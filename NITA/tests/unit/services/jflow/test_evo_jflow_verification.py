#!/usr/local/bin/python3

import sys
import copy
import mock
from mock import patch
from mock import Mock
from mock import MagicMock
import unittest
import unittest2 as unittest
from optparse import Values
from jnpr.toby.services.jflow.evo_jflow_verification import evo_jflow_verification
import builtins
builtins.t = MagicMock()

if sys.version < '3':
    builtin_string = '__builtin__'
else:
    builtin_string = 'builtins'


class Test_evo_jflow_verification(unittest.TestCase):

    def setUp(self):
        self.jf = evo_jflow_verification()
        t.log = MagicMock()
        self.jf.dhandle = MagicMock()
        self.jf.dhandle.cli = MagicMock()
        self.jf.log = t.log
        self.jf.platform = 'PTX'
        self.jf.jflow_type = 'INLINE'
        self.maxDiff = None

    def test_main_init(self):
        self.assertEqual(self.jf.log, t.log)

    def test_init_without_kwarg(self):
        self.jf.get_chassis_platform_info = MagicMock()
        self.jf.get_jflow_template_version = MagicMock()
        self.jf.get_expected_template_details = MagicMock()
        self.jf.get_all_observation_domain_ids = MagicMock()
        with self.assertRaises(Exception) as context:
            self.jf.init(template_type='ipv4', flow_colls=['100.0.0.2'])
        self.assertTrue(
            "please provide the keys with name" in str(context.exception))
    def test_init_with_decode_dump_with_flow_selectors_1(self):
        self.jf.get_chassis_platform_info = MagicMock()
        self.jf.get_jflow_template_version = MagicMock()
        self.jf.get_expected_template_details = MagicMock()
        self.jf.get_all_observation_domain_ids = MagicMock()
        self.jf.template_type = 'ipv4'
        self.jf.flow_colls = ['100.0.0.2']
        with self.assertRaises(Exception) as context:
            self.jf.init(template_type='ipv4', flow_colls=['100.0.0.2'], decode_dump_with_flow_selectors = {'decode_dump': {}, 'flow_selector_identifier_info': '2'})
        self.assertTrue(
            "key \'flow_selector_identifier_info\' should have value of type list or tuple" in str(context.exception))

    def test_init_with_decode_dump_with_flow_selectors_2(self):
        self.jf.get_chassis_platform_info = MagicMock()
        self.jf.get_jflow_template_version = MagicMock()
        self.jf.get_expected_template_details = MagicMock()
        self.jf.get_all_observation_domain_ids = MagicMock()
        self.jf.template_type = 'ipv4'
        self.jf.flow_colls = ['100.0.0.2']
        with self.assertRaises(Exception) as context:
            self.jf.init(template_type='ipv4', flow_colls=['100.0.0.2'], decode_dump_with_flow_selectors = {'decode_dump': {}, 'flow_selector_identifier_info': [1,2]})
        self.assertTrue(
            "\'flow_selector_identifier_info\' should be the list of dictionary" in str(context.exception))

    def test_init_with_decode_dump_with_flow_selectors_3(self):
        self.jf.get_chassis_platform_info = MagicMock()
        self.jf.get_jflow_template_version = MagicMock()
        self.jf.get_expected_template_details = MagicMock()
        self.jf.get_all_observation_domain_ids = MagicMock()
        self.jf.template_type = 'ipv4'
        self.jf.flow_colls = ['100.0.0.2']
        with self.assertRaises(Exception) as context:
            self.jf.init(template_type='ipv4', flow_colls=['100.0.0.2'], decode_dump_with_flow_selectors = {'decode_dump': {}, 'flow_selector_identifier_info': [{'SrcAddr' : '70.0.0.1'}]})
        self.assertTrue(
            "user must provide the values in list type" in str(context.exception))

    def test_init_with_decode_dump_with_flow_selectors_4(self):
        self.jf.get_chassis_platform_info = MagicMock()
        self.jf.get_jflow_template_version = MagicMock()
        self.jf.get_expected_template_details = MagicMock()
        self.jf.get_all_observation_domain_ids = MagicMock()
        self.jf.data_template_dict = MagicMock()
        self.jf.option_template_dict = MagicMock()
        self.jf.option_template_sys_dict = MagicMock()
        self.jf.template_type = 'ipv4'
        self.jf.flow_colls = ['100.0.0.2']
        self.assertEqual(self.jf.init(template_type='ipv4', flow_colls=['100.0.0.2'], decode_dump_with_flow_selectors = {'decode_dump': {}, 'flow_selector_identifier_info': [{'SrcAddr' : ['70.0.0.1']}]}), None)

    def test_get_expected_template_details_v9(self):
        format_dict = {'data_templ_id': '320', 'expected_option_template_pkt_flowset_name': 'Options Template(V9) (1)', 'expected_data_pkt_flowset_name': '(Data) (320)', 'expected_data_template_pkt_flowset_name': 'Data Template (V9) (0)', 'option_templ_id': '576', 'option_templ_sysid': '577', 'expected_option_pkt_flowset_name': '(Data) (576)', 'expected_option_pkt_system_flowset_name': '(Data) (577)'}
        self.jf.cflow_version = '9'
        self.assertEqual(self.jf.get_expected_template_details(data_template_id='320', option_template_scope_id='576', option_system_scope_id='577'), format_dict)

    def test_get_expected_template_details_v10(self):
        format_dict = {'data_templ_id': '320', 'expected_option_template_pkt_flowset_name': 'Options Template (V10 [IPFIX]) (3)', 'expected_data_pkt_flowset_name': '(Data) (320)', 'expected_data_template_pkt_flowset_name': 'Data Template (V10 [IPFIX]) (2)', 'option_templ_id': '576', 'option_templ_sysid': '577', 'expected_option_pkt_flowset_name': '(Data) (576)', 'expected_option_pkt_system_flowset_name': '(Data) (577)'}
        self.jf.cflow_version = '10'
        self.assertEqual(self.jf.get_expected_template_details(data_template_id='320', option_template_scope_id='576', option_system_scope_id='577'), format_dict)

    def test_get_expected_data_template_ipv4_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'ipv4'
        format_dict = {'ICMP_TYPE': {'Type': 'ICMP_TYPE', 'Length': '2', 'Element_id': '32'}, 'BYTES': {'Type': 'BYTES', 'Length': '8', 'Element_id': '1'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Length': '2', 'Element_id': '7'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Length': '1', 'Element_id': '4'}, 'IP_DST_ADDR': {'Type': 'IP_DST_ADDR', 'Length': '4', 'Element_id': '12'}, 'SRC_MASK': {'Type': 'SRC_MASK', 'Length': '1', 'Element_id': '9'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Length': '4', 'Element_id': '22'}, 'IP_NEXT_HOP': {'Type': 'IP_NEXT_HOP', 'Length': '4', 'Element_id': '15'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Length': '2', 'Element_id': '11'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Length': '4', 'Element_id': '14'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Length': '4', 'Element_id': '21'}, 'SRC_AS': {'Type': 'SRC_AS', 'Length': '4', 'Element_id': '16'}, 'DST_AS': {'Type': 'DST_AS', 'Length': '4', 'Element_id': '17'}, 'PKTS': {'Type': 'PKTS', 'Length': '8', 'Element_id': '2'}, 'IP_SRC_ADDR': {'Type': 'IP_SRC_ADDR', 'Length': '4', 'Element_id': '8'}, 'BGP_NEXT_HOP': {'Type': 'BGP_NEXT_HOP', 'Length': '4', 'Element_id': '18'}, 'IP_TOS': {'Type': 'IP_TOS', 'Length': '1', 'Element_id': '5'}, 'IP_PROTOCOL_VERSION': {'Type': 'IP_PROTOCOL_VERSION', 'Length': '1', 'Element_id': '60'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Length': '1', 'Element_id': '6'}, 'DST_MASK': {'Type': 'DST_MASK', 'Length': '1', 'Element_id': '13'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Length': '4', 'Element_id': '10'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_ipv4_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'ipv4'
        format_dict = {'IP_TOS': {'Length': '1', 'Type': 'IP_TOS', 'Element_id': '5'}, 'flowEndMilliseconds': {'Length': '8', 'Type': 'flowEndMilliseconds', 'Element_id': '153'}, 'DST_MASK': {'Length': '1', 'Type': 'DST_MASK', 'Element_id': '13'}, 'LAST_SWITCHED': {'Length': '4', 'Type': 'LAST_SWITCHED', 'Element_id': '21'}, 'L4_SRC_PORT': {'Length': '2', 'Type': 'L4_SRC_PORT', 'Element_id': '7'}, 'OUTPUT_SNMP': {'Length': '4', 'Type': 'OUTPUT_SNMP', 'Element_id': '14'}, 'SRC_MASK': {'Length': '1', 'Type': 'SRC_MASK', 'Element_id': '9'}, 'IP_SRC_ADDR': {'Length': '4', 'Type': 'IP_SRC_ADDR', 'Element_id': '8'}, 'DST_AS': {'Length': '4', 'Type': 'DST_AS', 'Element_id': '17'}, 'BYTES': {'Length': '8', 'Type': 'BYTES', 'Element_id': '1'}, 'L4_DST_PORT': {'Length': '2', 'Type': 'L4_DST_PORT', 'Element_id': '11'}, 'FIRST_SWITCHED': {'Length': '4', 'Type': 'FIRST_SWITCHED', 'Element_id': '22'}, 'INPUT_SNMP': {'Length': '4', 'Type': 'INPUT_SNMP', 'Element_id': '10'}, 'ICMP_TYPE': {'Length': '2', 'Type': 'ICMP_TYPE', 'Element_id': '32'}, 'SRC_AS': {'Length': '4', 'Type': 'SRC_AS', 'Element_id': '16'}, 'PROTOCOL': {'Length': '1', 'Type': 'PROTOCOL', 'Element_id': '4'}, 'flowStartMilliseconds': {'Length': '8', 'Type': 'flowStartMilliseconds', 'Element_id': '152'}, 'IP_DST_ADDR': {'Length': '4', 'Type': 'IP_DST_ADDR', 'Element_id': '12'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60'}, 'IP_NEXT_HOP': {'Length': '4', 'Type': 'IP_NEXT_HOP', 'Element_id': '15'}, 'ingressInterfaceType': {'Length': '4', 'Type': 'ingressInterfaceType', 'Element_id': '368'}, 'PKTS': {'Length': '8', 'Type': 'PKTS', 'Element_id': '2'}, 'BGP_NEXT_HOP': {'Length': '4', 'Type': 'BGP_NEXT_HOP', 'Element_id': '18'}, 'TCP_FLAGS': {'Length': '1', 'Type': 'TCP_FLAGS', 'Element_id': '6'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_ipv6_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'ipv6'
        format_dict =  {'DST_AS': {'Length': '4', 'Element_id': '17', 'Type': 'DST_AS'}, 'IPV6_DST_ADDR': {'Length': '16', 'Element_id': '28', 'Type': 'IPV6_DST_ADDR'}, 'IPV6_SRC_ADDR': {'Length': '16', 'Element_id': '27', 'Type': 'IPV6_SRC_ADDR'}, 'PKTS': {'Length': '8', 'Element_id': '2', 'Type': 'PKTS'}, 'IPV6_NEXT_HOP': {'Length': '16', 'Element_id': '62', 'Type': 'IPV6_NEXT_HOP'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Element_id': '60', 'Type': 'IP_PROTOCOL_VERSION'}, 'BYTES': {'Length': '8', 'Element_id': '1', 'Type': 'BYTES'}, 'INPUT_SNMP': {'Length': '4', 'Element_id': '10', 'Type': 'INPUT_SNMP'}, 'FIRST_SWITCHED': {'Length': '4', 'Element_id': '22', 'Type': 'FIRST_SWITCHED'}, 'IPV6_DST_MASK': {'Length': '1', 'Element_id': '30', 'Type': 'IPV6_DST_MASK'}, 'OUTPUT_SNMP': {'Length': '4', 'Element_id': '14', 'Type': 'OUTPUT_SNMP'}, 'L4_DST_PORT': {'Length': '2', 'Element_id': '11', 'Type': 'L4_DST_PORT'}, 'TCP_FLAGS': {'Length': '1', 'Element_id': '6', 'Type': 'TCP_FLAGS'}, 'ICMP_TYPE': {'Length': '2', 'Element_id': '32', 'Type': 'ICMP_TYPE'}, 'LAST_SWITCHED': {'Length': '4', 'Element_id': '21', 'Type': 'LAST_SWITCHED'}, 'PROTOCOL': {'Length': '1', 'Element_id': '4', 'Type': 'PROTOCOL'}, 'L4_SRC_PORT': {'Length': '2', 'Element_id': '7', 'Type': 'L4_SRC_PORT'}, 'IPV6_SRC_MASK': {'Length': '1', 'Element_id': '29', 'Type': 'IPV6_SRC_MASK'}, 'IP_TOS': {'Length': '1', 'Element_id': '5', 'Type': 'IP_TOS'}, 'SRC_AS': {'Length': '4', 'Element_id': '16', 'Type': 'SRC_AS'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_ipv6_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'ipv6'
        format_dict =  {'FIRST_SWITCHED': {'Element_id': '22', 'Type': 'FIRST_SWITCHED', 'Length': '4'}, 'OUTPUT_SNMP': {'Element_id': '14', 'Type': 'OUTPUT_SNMP', 'Length': '4'}, 'PKTS': {'Element_id': '2', 'Type': 'PKTS', 'Length': '8'}, 'IP_PROTOCOL_VERSION': {'Element_id': '60', 'Type': 'IP_PROTOCOL_VERSION', 'Length': '1'}, 'ingressInterfaceType': {'Element_id': '368', 'Type': 'ingressInterfaceType', 'Length': '4'}, 'IPV6_SRC_ADDR': {'Element_id': '27', 'Type': 'IPV6_SRC_ADDR', 'Length': '16'}, 'IPV6_NEXT_HOP': {'Element_id': '62', 'Type': 'IPV6_NEXT_HOP', 'Length': '16'}, 'flowEndMilliseconds': {'Element_id': '153', 'Type': 'flowEndMilliseconds', 'Length': '8'}, 'TCP_FLAGS': {'Element_id': '6', 'Type': 'TCP_FLAGS', 'Length': '1'}, 'BYTES': {'Element_id': '1', 'Type': 'BYTES', 'Length': '8'}, 'L4_DST_PORT': {'Element_id': '11', 'Type': 'L4_DST_PORT', 'Length': '2'}, 'IPV6_DST_ADDR': {'Element_id': '28', 'Type': 'IPV6_DST_ADDR', 'Length': '16'}, 'IPV6_SRC_MASK': {'Element_id': '29', 'Type': 'IPV6_SRC_MASK', 'Length': '1'}, 'DST_AS': {'Element_id': '17', 'Type': 'DST_AS', 'Length': '4'}, 'IP_TOS': {'Element_id': '5', 'Type': 'IP_TOS', 'Length': '1'}, 'icmpTypeCodeIPv6': {'Element_id': '139', 'Type': 'icmpTypeCodeIPv6', 'Length': '2'}, 'IPV6_DST_MASK': {'Element_id': '30', 'Type': 'IPV6_DST_MASK', 'Length': '1'}, 'L4_SRC_PORT': {'Element_id': '7', 'Type': 'L4_SRC_PORT', 'Length': '2'}, 'flowStartMilliseconds': {'Element_id': '152', 'Type': 'flowStartMilliseconds', 'Length': '8'}, 'INPUT_SNMP': {'Element_id': '10', 'Type': 'INPUT_SNMP', 'Length': '4'}, 'LAST_SWITCHED': {'Element_id': '21', 'Type': 'LAST_SWITCHED', 'Length': '4'}, 'SRC_AS': {'Element_id': '16', 'Type': 'SRC_AS', 'Length': '4'}, 'PROTOCOL': {'Element_id': '4', 'Type': 'PROTOCOL', 'Length': '1'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)


    def test_get_expected_data_template_mpls_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'mpls'
        format_dict =  {'INPUT_SNMP': {'Element_id': '10', 'Length': '4', 'Type': 'INPUT_SNMP'}, 'FIRST_SWITCHED': {'Element_id': '22', 'Length': '4', 'Type': 'FIRST_SWITCHED'}, 'MPLS_LABEL_2': {'Element_id': '71', 'Length': '3', 'Type': 'MPLS_LABEL_2'}, 'BYTES': {'Element_id': '1', 'Length': '8', 'Type': 'BYTES'}, 'LAST_SWITCHED': {'Element_id': '21', 'Length': '4', 'Type': 'LAST_SWITCHED'}, 'MPLS_LABEL_1': {'Element_id': '70', 'Length': '3', 'Type': 'MPLS_LABEL_1'}, 'MPLS_LABEL_3': {'Element_id': '72', 'Length': '3', 'Type': 'MPLS_LABEL_3'}, 'PKTS': {'Element_id': '2', 'Length': '8', 'Type': 'PKTS'}, 'OUTPUT_SNMP': {'Element_id': '14', 'Length': '4', 'Type': 'OUTPUT_SNMP'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'mpls'
        format_dict =  {'INPUT_SNMP': {'Element_id': '10', 'Length': '4', 'Type': 'INPUT_SNMP'}, 'MPLS_LABEL_1': {'Element_id': '70', 'Length': '3', 'Type': 'MPLS_LABEL_1'}, 'BYTES': {'Element_id': '1', 'Length': '8', 'Type': 'BYTES'}, 'FIRST_SWITCHED': {'Element_id': '22', 'Length': '4', 'Type': 'FIRST_SWITCHED'}, 'MPLS_LABEL_3': {'Element_id': '72', 'Length': '3', 'Type': 'MPLS_LABEL_3'}, 'PKTS': {'Element_id': '2', 'Length': '8', 'Type': 'PKTS'}, 'flowStartMilliseconds': {'Element_id': '152', 'Length': '8', 'Type': 'flowStartMilliseconds'}, 'MPLS_LABEL_2': {'Element_id': '71', 'Length': '3', 'Type': 'MPLS_LABEL_2'}, 'ingressInterfaceType': {'Element_id': '368', 'Length': '4', 'Type': 'ingressInterfaceType'}, 'flowEndMilliseconds': {'Element_id': '153', 'Length': '8', 'Type': 'flowEndMilliseconds'}, 'LAST_SWITCHED': {'Element_id': '21', 'Length': '4', 'Type': 'LAST_SWITCHED'}, 'OUTPUT_SNMP': {'Element_id': '14', 'Length': '4', 'Type': 'OUTPUT_SNMP'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv4_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'mpls-ipv4'
        format_dict =  {'BGP_NEXT_HOP': {'Type': 'BGP_NEXT_HOP', 'Element_id': '18', 'Length': '4'}, 'DST_AS': {'Type': 'DST_AS', 'Element_id': '17', 'Length': '4'}, 'IP_DST_ADDR': {'Type': 'IP_DST_ADDR', 'Element_id': '12', 'Length': '4'}, 'SRC_AS': {'Type': 'SRC_AS', 'Element_id': '16', 'Length': '4'}, 'SRC_MASK': {'Type': 'SRC_MASK', 'Element_id': '9', 'Length': '1'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Element_id': '14', 'Length': '4'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Element_id': '10', 'Length': '4'}, 'PKTS': {'Type': 'PKTS', 'Element_id': '2', 'Length': '8'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Element_id': '4', 'Length': '1'}, 'MPLS_LABEL_1': {'Type': 'MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'MPLS_TOP_LABEL_ADDR': {'Type': 'MPLS_TOP_LABEL_ADDR', 'Element_id': '47', 'Length': '4'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'IP_NEXT_HOP': {'Type': 'IP_NEXT_HOP', 'Element_id': '15', 'Length': '4'}, 'DST_MASK': {'Type': 'DST_MASK', 'Element_id': '13', 'Length': '1'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Element_id': '21', 'Length': '4'}, 'MPLS_LABEL_2': {'Type': 'MPLS_LABEL_2', 'Element_id': '71', 'Length': '3'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Element_id': '22', 'Length': '4'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Element_id': '6', 'Length': '1'}, 'IP_SRC_ADDR': {'Type': 'IP_SRC_ADDR', 'Element_id': '8', 'Length': '4'}, 'BYTES': {'Type': 'BYTES', 'Element_id': '1', 'Length': '8'}, 'MPLS_LABEL_3': {'Type': 'MPLS_LABEL_3', 'Element_id': '72', 'Length': '3'}, 'ICMP_TYPE': {'Type': 'ICMP_TYPE', 'Element_id': '32', 'Length': '2'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'IP_TOS': {'Type': 'IP_TOS', 'Element_id': '5', 'Length': '1'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv4_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'mpls-ipv4'
        format_dict =  {'BGP_NEXT_HOP': {'Type': 'BGP_NEXT_HOP', 'Element_id': '18', 'Length': '4'}, 'DST_AS': {'Type': 'DST_AS', 'Element_id': '17', 'Length': '4'}, 'flowEndMilliseconds': {'Type': 'flowEndMilliseconds', 'Element_id': '153', 'Length': '8'}, 'IP_DST_ADDR': {'Type': 'IP_DST_ADDR', 'Element_id': '12', 'Length': '4'}, 'SRC_AS': {'Type': 'SRC_AS', 'Element_id': '16', 'Length': '4'}, 'SRC_MASK': {'Type': 'SRC_MASK', 'Element_id': '9', 'Length': '1'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Element_id': '14', 'Length': '4'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Element_id': '10', 'Length': '4'}, 'PKTS': {'Type': 'PKTS', 'Element_id': '2', 'Length': '8'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Element_id': '4', 'Length': '1'}, 'MPLS_LABEL_1': {'Type': 'MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'IP_PROTOCOL_VERSION': {'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60', 'Length': '1'}, 'IP_NEXT_HOP': {'Type': 'IP_NEXT_HOP', 'Element_id': '15', 'Length': '4'}, 'DST_MASK': {'Type': 'DST_MASK', 'Element_id': '13', 'Length': '1'}, 'MPLS_TOP_LABEL_IPv6_ADDRESS': {'Type': 'MPLS_TOP_LABEL_IPv6_ADDRESS', 'Element_id': '140', 'Length': '16'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Element_id': '21', 'Length': '4'}, 'MPLS_LABEL_2': {'Type': 'MPLS_LABEL_2', 'Element_id': '71', 'Length': '3'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Element_id': '22', 'Length': '4'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Element_id': '6', 'Length': '1'}, 'IP_SRC_ADDR': {'Type': 'IP_SRC_ADDR', 'Element_id': '8', 'Length': '4'}, 'BYTES': {'Type': 'BYTES', 'Element_id': '1', 'Length': '8'}, 'MPLS_LABEL_3': {'Type': 'MPLS_LABEL_3', 'Element_id': '72', 'Length': '3'}, 'ICMP_TYPE': {'Type': 'ICMP_TYPE', 'Element_id': '32', 'Length': '2'}, 'ingressInterfaceType': {'Type': 'ingressInterfaceType', 'Element_id': '368', 'Length': '4'}, 'flowStartMilliseconds': {'Type': 'flowStartMilliseconds', 'Element_id': '152', 'Length': '8'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'IP_TOS': {'Type': 'IP_TOS', 'Element_id': '5', 'Length': '1'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)


    def test_get_expected_data_template_mpls_ipv6_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'mpls-ipv6'
        format_dict =  {'MPLS_LABEL_2': {'Length': '3', 'Type': 'MPLS_LABEL_2', 'Element_id': '71'}, 'IPV6_SRC_ADDR': {'Length': '16', 'Type': 'IPV6_SRC_ADDR', 'Element_id': '27'}, 'PKTS': {'Length': '8', 'Type': 'PKTS', 'Element_id': '2'}, 'DST_AS': {'Length': '4', 'Type': 'DST_AS', 'Element_id': '17'}, 'IP_TOS': {'Length': '1', 'Type': 'IP_TOS', 'Element_id': '5'}, 'FIRST_SWITCHED': {'Length': '4', 'Type': 'FIRST_SWITCHED', 'Element_id': '22'}, 'PROTOCOL': {'Length': '1', 'Type': 'PROTOCOL', 'Element_id': '4'}, 'L4_SRC_PORT': {'Length': '2', 'Type': 'L4_SRC_PORT', 'Element_id': '7'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60'}, 'L4_DST_PORT': {'Length': '2', 'Type': 'L4_DST_PORT', 'Element_id': '11'}, 'SRC_AS': {'Length': '4', 'Type': 'SRC_AS', 'Element_id': '16'}, 'IPV6_NEXT_HOP': {'Length': '16', 'Type': 'IPV6_NEXT_HOP', 'Element_id': '62'}, 'BYTES': {'Length': '8', 'Type': 'BYTES', 'Element_id': '1'}, 'MPLS_LABEL_3': {'Length': '3', 'Type': 'MPLS_LABEL_3', 'Element_id': '72'}, 'MPLS_LABEL_1': {'Length': '3', 'Type': 'MPLS_LABEL_1', 'Element_id': '70'}, 'OUTPUT_SNMP': {'Length': '4', 'Type': 'OUTPUT_SNMP', 'Element_id': '14'}, 'TCP_FLAGS': {'Length': '1', 'Type': 'TCP_FLAGS', 'Element_id': '6'}, 'MPLS_TOP_LABEL_ADDR': {'Length': '4', 'Type': 'MPLS_TOP_LABEL_ADDR', 'Element_id': '47'}, 'IPV6_SRC_MASK': {'Length': '1', 'Type': 'IPV6_SRC_MASK', 'Element_id': '29'}, 'IPV6_DST_MASK': {'Length': '1', 'Type': 'IPV6_DST_MASK', 'Element_id': '30'}, 'ICMP_TYPE': {'Length': '2', 'Type': 'ICMP_TYPE', 'Element_id': '32'}, 'LAST_SWITCHED': {'Length': '4', 'Type': 'LAST_SWITCHED', 'Element_id': '21'}, 'INPUT_SNMP': {'Length': '4', 'Type': 'INPUT_SNMP', 'Element_id': '10'}, 'IPV6_DST_ADDR': {'Length': '16', 'Type': 'IPV6_DST_ADDR', 'Element_id': '28'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv6_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'mpls-ipv6'
        format_dict =  {'IP_PROTOCOL_VERSION': {'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60', 'Length': '1'}, 'MPLS_TOP_LABEL_IPv6_ADDRESS': {'Type': 'MPLS_TOP_LABEL_IPv6_ADDRESS', 'Element_id': '140', 'Length': '16'}, 'MPLS_LABEL_1': {'Type': 'MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'DST_AS': {'Type': 'DST_AS', 'Element_id': '17', 'Length': '4'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Element_id': '22', 'Length': '4'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Element_id': '14', 'Length': '4'}, 'flowStartMilliseconds': {'Type': 'flowStartMilliseconds', 'Element_id': '152', 'Length': '8'}, 'IPV6_DST_MASK': {'Type': 'IPV6_DST_MASK', 'Element_id': '30', 'Length': '1'}, 'PKTS': {'Type': 'PKTS', 'Element_id': '2', 'Length': '8'}, 'MPLS_LABEL_2': {'Type': 'MPLS_LABEL_2', 'Element_id': '71', 'Length': '3'}, 'IPV6_SRC_ADDR': {'Type': 'IPV6_SRC_ADDR', 'Element_id': '27', 'Length': '16'}, 'flowEndMilliseconds': {'Type': 'flowEndMilliseconds', 'Element_id': '153', 'Length': '8'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Element_id': '6', 'Length': '1'}, 'icmpTypeCodeIPv6': {'Type': 'icmpTypeCodeIPv6', 'Element_id': '139', 'Length': '2'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'BYTES': {'Type': 'BYTES', 'Element_id': '1', 'Length': '8'}, 'ingressInterfaceType': {'Type': 'ingressInterfaceType', 'Element_id': '368', 'Length': '4'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Element_id': '10', 'Length': '4'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'MPLS_LABEL_3': {'Type': 'MPLS_LABEL_3', 'Element_id': '72', 'Length': '3'}, 'IPV6_SRC_MASK': {'Type': 'IPV6_SRC_MASK', 'Element_id': '29', 'Length': '1'}, 'SRC_AS': {'Type': 'SRC_AS', 'Element_id': '16', 'Length': '4'}, 'IPV6_DST_ADDR': {'Type': 'IPV6_DST_ADDR', 'Element_id': '28', 'Length': '16'}, 'IPV6_NEXT_HOP': {'Type': 'IPV6_NEXT_HOP', 'Element_id': '62', 'Length': '16'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Element_id': '21', 'Length': '4'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Element_id': '4', 'Length': '1'}, 'IP_TOS': {'Type': 'IP_TOS', 'Element_id': '5', 'Length': '1'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv4_mpls_ipv4_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'mpls-ipv4-mpls-ipv4'
        format_dict =  {'INNER_IP_DST_ADDR': {'Element_id': '12', 'Type': 'INNER_IP_DST_ADDR', 'Length': '4'}, 'IP_TOS': {'Element_id': '5', 'Type': 'IP_TOS', 'Length': '1'}, 'LAST_SWITCHED': {'Element_id': '21', 'Type': 'LAST_SWITCHED', 'Length': '4'}, 'BYTES': {'Element_id': '1', 'Type': 'BYTES', 'Length': '8'}, 'IP_PROTOCOL_VERSION': {'Element_id': '60', 'Type': 'IP_PROTOCOL_VERSION', 'Length': '1'}, 'INNER_L4_DST_PORT': {'Element_id': '11', 'Type': 'INNER_L4_DST_PORT', 'Length': '2'}, 'INPUT_SNMP': {'Element_id': '10', 'Type': 'INPUT_SNMP', 'Length': '4'}, 'L4_DST_PORT': {'Element_id': '11', 'Type': 'L4_DST_PORT', 'Length': '2'}, 'SRC_AS': {'Element_id': '16', 'Type': 'SRC_AS', 'Length': '4'}, 'DST_AS': {'Element_id': '17', 'Type': 'DST_AS', 'Length': '4'}, 'MPLS_LABEL_2': {'Element_id': '71', 'Type': 'MPLS_LABEL_2', 'Length': '3'}, 'SRC_MASK': {'Element_id': '9', 'Type': 'SRC_MASK', 'Length': '1'}, 'L4_SRC_PORT': {'Element_id': '7', 'Type': 'L4_SRC_PORT', 'Length': '2'}, 'TCP_FLAGS': {'Element_id': '6', 'Type': 'TCP_FLAGS', 'Length': '1'}, 'IP_SRC_ADDR': {'Element_id': '8', 'Type': 'IP_SRC_ADDR', 'Length': '4'}, 'IP_NEXT_HOP': {'Element_id': '15', 'Type': 'IP_NEXT_HOP', 'Length': '4'}, 'INNER_L4_SRC_PORT': {'Element_id': '7', 'Type': 'INNER_L4_SRC_PORT', 'Length': '2'}, 'INNER_IP_SRC_ADDR': {'Element_id': '8', 'Type': 'INNER_IP_SRC_ADDR', 'Length': '4'}, 'MPLS_LABEL_1': {'Element_id': '70', 'Type': 'MPLS_LABEL_1', 'Length': '3'}, 'FIRST_SWITCHED': {'Element_id': '22', 'Type': 'FIRST_SWITCHED', 'Length': '4'}, 'PKTS': {'Element_id': '2', 'Type': 'PKTS', 'Length': '8'}, 'DST_MASK': {'Element_id': '13', 'Type': 'DST_MASK', 'Length': '1'}, 'PROTOCOL': {'Element_id': '4', 'Type': 'PROTOCOL', 'Length': '1'}, 'OUTPUT_SNMP': {'Element_id': '14', 'Type': 'OUTPUT_SNMP', 'Length': '4'}, 'IP_DST_ADDR': {'Element_id': '12', 'Type': 'IP_DST_ADDR', 'Length': '4'}, 'ICMP_TYPE': {'Element_id': '32', 'Type': 'ICMP_TYPE', 'Length': '2'}, 'MPLS_LABEL_3': {'Element_id': '72', 'Type': 'MPLS_LABEL_3', 'Length': '3'}, 'INNER_MPLS_LABEL_1': {'Element_id': '70', 'Type': 'INNER_MPLS_LABEL_1', 'Length': '3'}, 'BGP_NEXT_HOP': {'Element_id': '18', 'Type': 'BGP_NEXT_HOP', 'Length': '4'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv4_mpls_ipv4_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'mpls-ipv4-mpls-ipv4'
        format_dict =  {'flowStartMilliseconds': {'Element_id': '152', 'Type': 'flowStartMilliseconds', 'Length': '8'}, 'INNER_IP_DST_ADDR': {'Element_id': '12', 'Type': 'INNER_IP_DST_ADDR', 'Length': '4'}, 'IP_TOS': {'Element_id': '5', 'Type': 'IP_TOS', 'Length': '1'}, 'LAST_SWITCHED': {'Element_id': '21', 'Type': 'LAST_SWITCHED', 'Length': '4'}, 'BYTES': {'Element_id': '1', 'Type': 'BYTES', 'Length': '8'}, 'IP_PROTOCOL_VERSION': {'Element_id': '60', 'Type': 'IP_PROTOCOL_VERSION', 'Length': '1'}, 'INNER_L4_DST_PORT': {'Element_id': '11', 'Type': 'INNER_L4_DST_PORT', 'Length': '2'}, 'INPUT_SNMP': {'Element_id': '10', 'Type': 'INPUT_SNMP', 'Length': '4'}, 'L4_DST_PORT': {'Element_id': '11', 'Type': 'L4_DST_PORT', 'Length': '2'}, 'SRC_AS': {'Element_id': '16', 'Type': 'SRC_AS', 'Length': '4'}, 'DST_AS': {'Element_id': '17', 'Type': 'DST_AS', 'Length': '4'}, 'MPLS_LABEL_2': {'Element_id': '71', 'Type': 'MPLS_LABEL_2', 'Length': '3'}, 'SRC_MASK': {'Element_id': '9', 'Type': 'SRC_MASK', 'Length': '1'}, 'L4_SRC_PORT': {'Element_id': '7', 'Type': 'L4_SRC_PORT', 'Length': '2'}, 'TCP_FLAGS': {'Element_id': '6', 'Type': 'TCP_FLAGS', 'Length': '1'}, 'flowEndMilliseconds': {'Element_id': '153', 'Type': 'flowEndMilliseconds', 'Length': '8'}, 'IP_SRC_ADDR': {'Element_id': '8', 'Type': 'IP_SRC_ADDR', 'Length': '4'}, 'IP_NEXT_HOP': {'Element_id': '15', 'Type': 'IP_NEXT_HOP', 'Length': '4'}, 'INNER_L4_SRC_PORT': {'Element_id': '7', 'Type': 'INNER_L4_SRC_PORT', 'Length': '2'}, 'INNER_IP_SRC_ADDR': {'Element_id': '8', 'Type': 'INNER_IP_SRC_ADDR', 'Length': '4'}, 'MPLS_LABEL_1': {'Element_id': '70', 'Type': 'MPLS_LABEL_1', 'Length': '3'}, 'FIRST_SWITCHED': {'Element_id': '22', 'Type': 'FIRST_SWITCHED', 'Length': '4'}, 'PKTS': {'Element_id': '2', 'Type': 'PKTS', 'Length': '8'}, 'DST_MASK': {'Element_id': '13', 'Type': 'DST_MASK', 'Length': '1'}, 'PROTOCOL': {'Element_id': '4', 'Type': 'PROTOCOL', 'Length': '1'}, 'OUTPUT_SNMP': {'Element_id': '14', 'Type': 'OUTPUT_SNMP', 'Length': '4'}, 'IP_DST_ADDR': {'Element_id': '12', 'Type': 'IP_DST_ADDR', 'Length': '4'}, 'ICMP_TYPE': {'Element_id': '32', 'Type': 'ICMP_TYPE', 'Length': '2'}, 'MPLS_LABEL_3': {'Element_id': '72', 'Type': 'MPLS_LABEL_3', 'Length': '3'}, 'INNER_MPLS_LABEL_1': {'Element_id': '70', 'Type': 'INNER_MPLS_LABEL_1', 'Length': '3'}, 'BGP_NEXT_HOP': {'Element_id': '18', 'Type': 'BGP_NEXT_HOP', 'Length': '4'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv4_mpls_ipv6_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'mpls-ipv4-mpls-ipv6'
        format_dict =  {'INNER_L4_DST_PORT': {'Type': 'INNER_L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'INNER_L4_SRC_PORT': {'Type': 'INNER_L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Element_id': '14', 'Length': '4'}, 'ICMP_TYPE': {'Type': 'ICMP_TYPE', 'Element_id': '32', 'Length': '2'}, 'BGP_NEXT_HOP': {'Type': 'BGP_NEXT_HOP', 'Element_id': '18', 'Length': '4'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Element_id': '21', 'Length': '4'}, 'IP_DST_ADDR': {'Type': 'IP_DST_ADDR', 'Element_id': '12', 'Length': '4'}, 'MPLS_LABEL_2': {'Type': 'MPLS_LABEL_2', 'Element_id': '71', 'Length': '3'}, 'PKTS': {'Type': 'PKTS', 'Element_id': '2', 'Length': '8'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Element_id': '10', 'Length': '4'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'IP_PROTOCOL_VERSION': {'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60', 'Length': '1'}, 'SRC_MASK': {'Type': 'SRC_MASK', 'Element_id': '9', 'Length': '1'}, 'DST_AS': {'Type': 'DST_AS', 'Element_id': '17', 'Length': '4'}, 'MPLS_LABEL_1': {'Type': 'MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'BYTES': {'Type': 'BYTES', 'Element_id': '1', 'Length': '8'}, 'SRC_AS': {'Type': 'SRC_AS', 'Element_id': '16', 'Length': '4'}, 'IP_NEXT_HOP': {'Type': 'IP_NEXT_HOP', 'Element_id': '15', 'Length': '4'}, 'DST_MASK': {'Type': 'DST_MASK', 'Element_id': '13', 'Length': '1'}, 'IP_TOS': {'Type': 'IP_TOS', 'Element_id': '5', 'Length': '1'}, 'IPV6_SRC_ADDR': {'Type': 'IPV6_SRC_ADDR', 'Element_id': '27', 'Length': '16'}, 'MPLS_LABEL_3': {'Type': 'MPLS_LABEL_3', 'Element_id': '72', 'Length': '3'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'IP_SRC_ADDR': {'Type': 'IP_SRC_ADDR', 'Element_id': '8', 'Length': '4'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Element_id': '6', 'Length': '1'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Element_id': '4', 'Length': '1'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Element_id': '22', 'Length': '4'}, 'INNER_MPLS_LABEL_1': {'Type': 'INNER_MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'IPV6_DST_ADDR': {'Type': 'IPV6_DST_ADDR', 'Element_id': '28', 'Length': '16'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv4_mpls_ipv6_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'mpls-ipv4-mpls-ipv6'
        format_dict =  {'INNER_L4_DST_PORT': {'Type': 'INNER_L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'INNER_L4_SRC_PORT': {'Type': 'INNER_L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Element_id': '14', 'Length': '4'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Element_id': '22', 'Length': '4'}, 'BGP_NEXT_HOP': {'Type': 'BGP_NEXT_HOP', 'Element_id': '18', 'Length': '4'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Element_id': '21', 'Length': '4'}, 'IP_DST_ADDR': {'Type': 'IP_DST_ADDR', 'Element_id': '12', 'Length': '4'}, 'flowEndMilliseconds': {'Type': 'flowEndMilliseconds', 'Element_id': '153', 'Length': '8'}, 'MPLS_LABEL_2': {'Type': 'MPLS_LABEL_2', 'Element_id': '71', 'Length': '3'}, 'PKTS': {'Type': 'PKTS', 'Element_id': '2', 'Length': '8'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Element_id': '10', 'Length': '4'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'IP_PROTOCOL_VERSION': {'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60', 'Length': '1'}, 'SRC_MASK': {'Type': 'SRC_MASK', 'Element_id': '9', 'Length': '1'}, 'DST_AS': {'Type': 'DST_AS', 'Element_id': '17', 'Length': '4'}, 'MPLS_LABEL_1': {'Type': 'MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'BYTES': {'Type': 'BYTES', 'Element_id': '1', 'Length': '8'}, 'SRC_AS': {'Type': 'SRC_AS', 'Element_id': '16', 'Length': '4'}, 'IP_NEXT_HOP': {'Type': 'IP_NEXT_HOP', 'Element_id': '15', 'Length': '4'}, 'DST_MASK': {'Type': 'DST_MASK', 'Element_id': '13', 'Length': '1'}, 'IP_TOS': {'Type': 'IP_TOS', 'Element_id': '5', 'Length': '1'}, 'IPV6_SRC_ADDR': {'Type': 'IPV6_SRC_ADDR', 'Element_id': '27', 'Length': '16'}, 'MPLS_LABEL_3': {'Type': 'MPLS_LABEL_3', 'Element_id': '72', 'Length': '3'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'IP_SRC_ADDR': {'Type': 'IP_SRC_ADDR', 'Element_id': '8', 'Length': '4'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Element_id': '6', 'Length': '1'}, 'flowStartMilliseconds': {'Type': 'flowStartMilliseconds', 'Element_id': '152', 'Length': '8'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Element_id': '4', 'Length': '1'}, 'INNER_MPLS_LABEL_1': {'Type': 'INNER_MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'IPV6_DST_ADDR': {'Type': 'IPV6_DST_ADDR', 'Element_id': '28', 'Length': '16'}, 'icmpTypeCodeIPv6': {'Type': 'icmpTypeCodeIPv6', 'Element_id': '139', 'Length': '2'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_ipv4_mpls_ipv6_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'ipv4-mpls-ipv6'
        format_dict =  {'IP_SRC_ADDR': {'Element_id': '8', 'Length': '4', 'Type': 'IP_SRC_ADDR'}, 'PROTOCOL': {'Element_id': '4', 'Length': '1', 'Type': 'PROTOCOL'}, 'DST_AS': {'Element_id': '17', 'Length': '4', 'Type': 'DST_AS'}, 'IPV6_SRC_ADDR': {'Element_id': '27', 'Length': '16', 'Type': 'IPV6_SRC_ADDR'}, 'IP_DST_ADDR': {'Element_id': '12', 'Length': '4', 'Type': 'IP_DST_ADDR'}, 'LAST_SWITCHED': {'Element_id': '21', 'Length': '4', 'Type': 'LAST_SWITCHED'}, 'INNER_MPLS_LABEL_1': {'Element_id': '70', 'Length': '3', 'Type': 'INNER_MPLS_LABEL_1'}, 'L4_SRC_PORT': {'Element_id': '7', 'Length': '2', 'Type': 'L4_SRC_PORT'}, 'INNER_L4_SRC_PORT': {'Element_id': '7', 'Length': '2', 'Type': 'INNER_L4_SRC_PORT'}, 'SRC_AS': {'Element_id': '16', 'Length': '4', 'Type': 'SRC_AS'}, 'IP_PROTOCOL_VERSION': {'Element_id': '60', 'Length': '1', 'Type': 'IP_PROTOCOL_VERSION'}, 'DST_MASK': {'Element_id': '13', 'Length': '1', 'Type': 'DST_MASK'}, 'BYTES': {'Element_id': '1', 'Length': '8', 'Type': 'BYTES'}, 'FIRST_SWITCHED': {'Element_id': '22', 'Length': '4', 'Type': 'FIRST_SWITCHED'}, 'OUTPUT_SNMP': {'Element_id': '14', 'Length': '4', 'Type': 'OUTPUT_SNMP'}, 'TCP_FLAGS': {'Element_id': '6', 'Length': '1', 'Type': 'TCP_FLAGS'}, 'IP_NEXT_HOP': {'Element_id': '15', 'Length': '4', 'Type': 'IP_NEXT_HOP'}, 'ICMP_TYPE': {'Element_id': '32', 'Length': '2', 'Type': 'ICMP_TYPE'}, 'L4_DST_PORT': {'Element_id': '11', 'Length': '2', 'Type': 'L4_DST_PORT'}, 'BGP_NEXT_HOP': {'Element_id': '18', 'Length': '4', 'Type': 'BGP_NEXT_HOP'}, 'SRC_MASK': {'Element_id': '9', 'Length': '1', 'Type': 'SRC_MASK'}, 'INNER_L4_DST_PORT': {'Element_id': '11', 'Length': '2', 'Type': 'INNER_L4_DST_PORT'}, 'INPUT_SNMP': {'Element_id': '10', 'Length': '4', 'Type': 'INPUT_SNMP'}, 'IP_TOS': {'Element_id': '5', 'Length': '1', 'Type': 'IP_TOS'}, 'IPV6_DST_ADDR': {'Element_id': '28', 'Length': '16', 'Type': 'IPV6_DST_ADDR'}, 'PKTS': {'Element_id': '2', 'Length': '8', 'Type': 'PKTS'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_ipv4_mpls_ipv6_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'ipv4-mpls-ipv6'
        format_dict =  {'IP_SRC_ADDR': {'Element_id': '8', 'Length': '4', 'Type': 'IP_SRC_ADDR'}, 'PROTOCOL': {'Element_id': '4', 'Length': '1', 'Type': 'PROTOCOL'}, 'DST_AS': {'Element_id': '17', 'Length': '4', 'Type': 'DST_AS'}, 'IPV6_SRC_ADDR': {'Element_id': '27', 'Length': '16', 'Type': 'IPV6_SRC_ADDR'}, 'IP_DST_ADDR': {'Element_id': '12', 'Length': '4', 'Type': 'IP_DST_ADDR'}, 'flowStartMilliseconds': {'Element_id': '152', 'Length': '8', 'Type': 'flowStartMilliseconds'}, 'LAST_SWITCHED': {'Element_id': '21', 'Length': '4', 'Type': 'LAST_SWITCHED'}, 'INNER_MPLS_LABEL_1': {'Element_id': '70', 'Length': '3', 'Type': 'INNER_MPLS_LABEL_1'}, 'L4_SRC_PORT': {'Element_id': '7', 'Length': '2', 'Type': 'L4_SRC_PORT'}, 'INNER_L4_SRC_PORT': {'Element_id': '7', 'Length': '2', 'Type': 'INNER_L4_SRC_PORT'}, 'SRC_AS': {'Element_id': '16', 'Length': '4', 'Type': 'SRC_AS'}, 'IP_PROTOCOL_VERSION': {'Element_id': '60', 'Length': '1', 'Type': 'IP_PROTOCOL_VERSION'}, 'DST_MASK': {'Element_id': '13', 'Length': '1', 'Type': 'DST_MASK'}, 'BYTES': {'Element_id': '1', 'Length': '8', 'Type': 'BYTES'}, 'FIRST_SWITCHED': {'Element_id': '22', 'Length': '4', 'Type': 'FIRST_SWITCHED'}, 'OUTPUT_SNMP': {'Element_id': '14', 'Length': '4', 'Type': 'OUTPUT_SNMP'}, 'TCP_FLAGS': {'Element_id': '6', 'Length': '1', 'Type': 'TCP_FLAGS'}, 'IP_NEXT_HOP': {'Element_id': '15', 'Length': '4', 'Type': 'IP_NEXT_HOP'}, 'ICMP_TYPE': {'Element_id': '32', 'Length': '2', 'Type': 'ICMP_TYPE'}, 'L4_DST_PORT': {'Element_id': '11', 'Length': '2', 'Type': 'L4_DST_PORT'}, 'flowEndMilliseconds': {'Element_id': '153', 'Length': '8', 'Type': 'flowEndMilliseconds'}, 'BGP_NEXT_HOP': {'Element_id': '18', 'Length': '4', 'Type': 'BGP_NEXT_HOP'}, 'SRC_MASK': {'Element_id': '9', 'Length': '1', 'Type': 'SRC_MASK'}, 'INNER_L4_DST_PORT': {'Element_id': '11', 'Length': '2', 'Type': 'INNER_L4_DST_PORT'}, 'INPUT_SNMP': {'Element_id': '10', 'Length': '4', 'Type': 'INPUT_SNMP'}, 'IP_TOS': {'Element_id': '5', 'Length': '1', 'Type': 'IP_TOS'}, 'IPV6_DST_ADDR': {'Element_id': '28', 'Length': '16', 'Type': 'IPV6_DST_ADDR'}, 'PKTS': {'Element_id': '2', 'Length': '8', 'Type': 'PKTS'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)


    def test_get_expected_data_template_ipv4_mpls_ipv4_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'ipv4-mpls-ipv4'
        format_dict =  {'LAST_SWITCHED': {'Length': '4', 'Element_id': '21', 'Type': 'LAST_SWITCHED'}, 'OUTPUT_SNMP': {'Length': '4', 'Element_id': '14', 'Type': 'OUTPUT_SNMP'}, 'DST_AS': {'Length': '4', 'Element_id': '17', 'Type': 'DST_AS'}, 'L4_SRC_PORT': {'Length': '2', 'Element_id': '7', 'Type': 'L4_SRC_PORT'}, 'L4_DST_PORT': {'Length': '2', 'Element_id': '11', 'Type': 'L4_DST_PORT'}, 'DST_MASK': {'Length': '1', 'Element_id': '13', 'Type': 'DST_MASK'}, 'INNER_IP_DST_ADDR': {'Length': '4', 'Element_id': '12', 'Type': 'INNER_IP_DST_ADDR'}, 'PKTS': {'Length': '8', 'Element_id': '2', 'Type': 'PKTS'}, 'BGP_NEXT_HOP': {'Length': '4', 'Element_id': '18', 'Type': 'BGP_NEXT_HOP'}, 'INNER_IP_SRC_ADDR': {'Length': '4', 'Element_id': '8', 'Type': 'INNER_IP_SRC_ADDR'}, 'IP_TOS': {'Length': '1', 'Element_id': '5', 'Type': 'IP_TOS'}, 'INNER_L4_SRC_PORT': {'Length': '2', 'Element_id': '7', 'Type': 'INNER_L4_SRC_PORT'}, 'IP_DST_ADDR': {'Length': '4', 'Element_id': '12', 'Type': 'IP_DST_ADDR'}, 'BYTES': {'Length': '8', 'Element_id': '1', 'Type': 'BYTES'}, 'PROTOCOL': {'Length': '1', 'Element_id': '4', 'Type': 'PROTOCOL'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Element_id': '60', 'Type': 'IP_PROTOCOL_VERSION'}, 'IP_SRC_ADDR': {'Length': '4', 'Element_id': '8', 'Type': 'IP_SRC_ADDR'}, 'INPUT_SNMP': {'Length': '4', 'Element_id': '10', 'Type': 'INPUT_SNMP'}, 'SRC_MASK': {'Length': '1', 'Element_id': '9', 'Type': 'SRC_MASK'}, 'IP_NEXT_HOP': {'Length': '4', 'Element_id': '15', 'Type': 'IP_NEXT_HOP'}, 'SRC_AS': {'Length': '4', 'Element_id': '16', 'Type': 'SRC_AS'}, 'FIRST_SWITCHED': {'Length': '4', 'Element_id': '22', 'Type': 'FIRST_SWITCHED'}, 'INNER_MPLS_LABEL_1': {'Length': '3', 'Element_id': '70', 'Type': 'INNER_MPLS_LABEL_1'}, 'INNER_L4_DST_PORT': {'Length': '2', 'Element_id': '11', 'Type': 'INNER_L4_DST_PORT'}, 'TCP_FLAGS': {'Length': '1', 'Element_id': '6', 'Type': 'TCP_FLAGS'}, 'ICMP_TYPE': {'Length': '2', 'Element_id': '32', 'Type': 'ICMP_TYPE'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_ipv4_mpls_ipv4_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'ipv4-mpls-ipv4'
        format_dict =  {'LAST_SWITCHED': {'Length': '4', 'Element_id': '21', 'Type': 'LAST_SWITCHED'}, 'OUTPUT_SNMP': {'Length': '4', 'Element_id': '14', 'Type': 'OUTPUT_SNMP'}, 'DST_AS': {'Length': '4', 'Element_id': '17', 'Type': 'DST_AS'}, 'L4_SRC_PORT': {'Length': '2', 'Element_id': '7', 'Type': 'L4_SRC_PORT'}, 'L4_DST_PORT': {'Length': '2', 'Element_id': '11', 'Type': 'L4_DST_PORT'}, 'DST_MASK': {'Length': '1', 'Element_id': '13', 'Type': 'DST_MASK'}, 'INNER_IP_DST_ADDR': {'Length': '4', 'Element_id': '12', 'Type': 'INNER_IP_DST_ADDR'}, 'PKTS': {'Length': '8', 'Element_id': '2', 'Type': 'PKTS'}, 'BGP_NEXT_HOP': {'Length': '4', 'Element_id': '18', 'Type': 'BGP_NEXT_HOP'}, 'flowStartMilliseconds': {'Length': '8', 'Element_id': '152', 'Type': 'flowStartMilliseconds'}, 'INNER_IP_SRC_ADDR': {'Length': '4', 'Element_id': '8', 'Type': 'INNER_IP_SRC_ADDR'}, 'IP_TOS': {'Length': '1', 'Element_id': '5', 'Type': 'IP_TOS'}, 'INNER_L4_SRC_PORT': {'Length': '2', 'Element_id': '7', 'Type': 'INNER_L4_SRC_PORT'}, 'IP_DST_ADDR': {'Length': '4', 'Element_id': '12', 'Type': 'IP_DST_ADDR'}, 'BYTES': {'Length': '8', 'Element_id': '1', 'Type': 'BYTES'}, 'PROTOCOL': {'Length': '1', 'Element_id': '4', 'Type': 'PROTOCOL'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Element_id': '60', 'Type': 'IP_PROTOCOL_VERSION'}, 'IP_SRC_ADDR': {'Length': '4', 'Element_id': '8', 'Type': 'IP_SRC_ADDR'}, 'INPUT_SNMP': {'Length': '4', 'Element_id': '10', 'Type': 'INPUT_SNMP'}, 'SRC_MASK': {'Length': '1', 'Element_id': '9', 'Type': 'SRC_MASK'}, 'IP_NEXT_HOP': {'Length': '4', 'Element_id': '15', 'Type': 'IP_NEXT_HOP'}, 'flowEndMilliseconds': {'Length': '8', 'Element_id': '153', 'Type': 'flowEndMilliseconds'}, 'SRC_AS': {'Length': '4', 'Element_id': '16', 'Type': 'SRC_AS'}, 'FIRST_SWITCHED': {'Length': '4', 'Element_id': '22', 'Type': 'FIRST_SWITCHED'}, 'INNER_MPLS_LABEL_1': {'Length': '3', 'Element_id': '70', 'Type': 'INNER_MPLS_LABEL_1'}, 'INNER_L4_DST_PORT': {'Length': '2', 'Element_id': '11', 'Type': 'INNER_L4_DST_PORT'}, 'TCP_FLAGS': {'Length': '1', 'Element_id': '6', 'Type': 'TCP_FLAGS'}, 'ICMP_TYPE': {'Length': '2', 'Element_id': '32', 'Type': 'ICMP_TYPE'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_vx_ipv4_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'mpls-vx-ipv4'
        format_dict =  {'INNER_L4_SRC_PORT': {'Type': 'INNER_L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'IP_SRC_ADDR': {'Type': 'IP_SRC_ADDR', 'Element_id': '8', 'Length': '4'}, 'BYTES': {'Type': 'BYTES', 'Element_id': '1', 'Length': '8'}, 'ICMP_TYPE': {'Type': 'ICMP_TYPE', 'Element_id': '32', 'Length': '2'}, 'IP_PROTOCOL_VERSION': {'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60', 'Length': '1'}, 'IP_DST_ADDR': {'Type': 'IP_DST_ADDR', 'Element_id': '12', 'Length': '4'}, 'SRC_MASK': {'Type': 'SRC_MASK', 'Element_id': '9', 'Length': '1'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Element_id': '21', 'Length': '4'}, 'INNER_IP_DST_ADDR': {'Type': 'INNER_IP_DST_ADDR', 'Element_id': '12', 'Length': '4'}, 'DST_MASK': {'Type': 'DST_MASK', 'Element_id': '13', 'Length': '1'}, 'DST_AS': {'Type': 'DST_AS', 'Element_id': '17', 'Length': '4'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Element_id': '10', 'Length': '4'}, 'INNER_IP_SRC_ADDR': {'Type': 'INNER_IP_SRC_ADDR', 'Element_id': '8', 'Length': '4'}, 'MPLS_LABEL_1': {'Type': 'MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'BGP_NEXT_HOP': {'Type': 'BGP_NEXT_HOP', 'Element_id': '18', 'Length': '4'}, 'IP_TOS': {'Type': 'IP_TOS', 'Element_id': '5', 'Length': '1'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Element_id': '22', 'Length': '4'}, 'INNER_L4_DST_PORT': {'Type': 'INNER_L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'IP_NEXT_HOP': {'Type': 'IP_NEXT_HOP', 'Element_id': '15', 'Length': '4'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Element_id': '14', 'Length': '4'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Element_id': '6', 'Length': '1'}, 'INNER_MPLS_LABEL_1': {'Type': 'INNER_MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'SRC_AS': {'Type': 'SRC_AS', 'Element_id': '16', 'Length': '4'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Element_id': '4', 'Length': '1'}, 'MPLS_LABEL_2': {'Type': 'MPLS_LABEL_2', 'Element_id': '71', 'Length': '3'}, 'PKTS': {'Type': 'PKTS', 'Element_id': '2', 'Length': '8'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_vx_ipv4_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'mpls-vx-ipv4'
        format_dict =  {'INNER_L4_SRC_PORT': {'Type': 'INNER_L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'IP_SRC_ADDR': {'Type': 'IP_SRC_ADDR', 'Element_id': '8', 'Length': '4'}, 'BYTES': {'Type': 'BYTES', 'Element_id': '1', 'Length': '8'}, 'ICMP_TYPE': {'Type': 'ICMP_TYPE', 'Element_id': '32', 'Length': '2'}, 'IP_PROTOCOL_VERSION': {'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60', 'Length': '1'}, 'IP_DST_ADDR': {'Type': 'IP_DST_ADDR', 'Element_id': '12', 'Length': '4'}, 'SRC_MASK': {'Type': 'SRC_MASK', 'Element_id': '9', 'Length': '1'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Element_id': '21', 'Length': '4'}, 'INNER_IP_DST_ADDR': {'Type': 'INNER_IP_DST_ADDR', 'Element_id': '12', 'Length': '4'}, 'DST_MASK': {'Type': 'DST_MASK', 'Element_id': '13', 'Length': '1'}, 'DST_AS': {'Type': 'DST_AS', 'Element_id': '17', 'Length': '4'}, 'flowStartMilliseconds': {'Type': 'flowStartMilliseconds', 'Element_id': '152', 'Length': '8'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Element_id': '10', 'Length': '4'}, 'INNER_IP_SRC_ADDR': {'Type': 'INNER_IP_SRC_ADDR', 'Element_id': '8', 'Length': '4'}, 'MPLS_LABEL_1': {'Type': 'MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'BGP_NEXT_HOP': {'Type': 'BGP_NEXT_HOP', 'Element_id': '18', 'Length': '4'}, 'IP_TOS': {'Type': 'IP_TOS', 'Element_id': '5', 'Length': '1'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Element_id': '22', 'Length': '4'}, 'INNER_L4_DST_PORT': {'Type': 'INNER_L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'IP_NEXT_HOP': {'Type': 'IP_NEXT_HOP', 'Element_id': '15', 'Length': '4'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'flowEndMilliseconds': {'Type': 'flowEndMilliseconds', 'Element_id': '153', 'Length': '8'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Element_id': '14', 'Length': '4'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Element_id': '6', 'Length': '1'}, 'INNER_MPLS_LABEL_1': {'Type': 'INNER_MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'SRC_AS': {'Type': 'SRC_AS', 'Element_id': '16', 'Length': '4'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Element_id': '4', 'Length': '1'}, 'MPLS_LABEL_2': {'Type': 'MPLS_LABEL_2', 'Element_id': '71', 'Length': '3'}, 'PKTS': {'Type': 'PKTS', 'Element_id': '2', 'Length': '8'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_vx_ipv6_v9_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'mpls-vx-ipv6'
        format_dict =  {'INPUT_SNMP': {'Length': '4', 'Type': 'INPUT_SNMP', 'Element_id': '10'}, 'MPLS_LABEL_1': {'Length': '3', 'Type': 'MPLS_LABEL_1', 'Element_id': '70'}, 'INNER_L4_DST_PORT': {'Length': '2', 'Type': 'INNER_L4_DST_PORT', 'Element_id': '11'}, 'PKTS': {'Length': '8', 'Type': 'PKTS', 'Element_id': '2'}, 'DST_AS': {'Length': '4', 'Type': 'DST_AS', 'Element_id': '17'}, 'DST_MASK': {'Length': '1', 'Type': 'DST_MASK', 'Element_id': '13'}, 'FIRST_SWITCHED': {'Length': '4', 'Type': 'FIRST_SWITCHED', 'Element_id': '22'}, 'L4_SRC_PORT': {'Length': '2', 'Type': 'L4_SRC_PORT', 'Element_id': '7'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60'}, 'PROTOCOL': {'Length': '1', 'Type': 'PROTOCOL', 'Element_id': '4'}, 'IPV6_SRC_ADDR': {'Length': '16', 'Type': 'IPV6_SRC_ADDR', 'Element_id': '27'}, 'IP_TOS': {'Length': '1', 'Type': 'IP_TOS', 'Element_id': '5'}, 'SRC_MASK': {'Length': '1', 'Type': 'SRC_MASK', 'Element_id': '9'}, 'IP_SRC_ADDR': {'Length': '4', 'Type': 'IP_SRC_ADDR', 'Element_id': '8'}, 'BGP_NEXT_HOP': {'Length': '4', 'Type': 'BGP_NEXT_HOP', 'Element_id': '18'}, 'SRC_AS': {'Length': '4', 'Type': 'SRC_AS', 'Element_id': '16'}, 'MPLS_LABEL_2': {'Length': '3', 'Type': 'MPLS_LABEL_2', 'Element_id': '71'}, 'IP_DST_ADDR': {'Length': '4', 'Type': 'IP_DST_ADDR', 'Element_id': '12'}, 'LAST_SWITCHED': {'Length': '4', 'Type': 'LAST_SWITCHED', 'Element_id': '21'}, 'OUTPUT_SNMP': {'Length': '4', 'Type': 'OUTPUT_SNMP', 'Element_id': '14'}, 'TCP_FLAGS': {'Length': '1', 'Type': 'TCP_FLAGS', 'Element_id': '6'}, 'L4_DST_PORT': {'Length': '2', 'Type': 'L4_DST_PORT', 'Element_id': '11'}, 'ICMP_TYPE': {'Length': '2', 'Type': 'ICMP_TYPE', 'Element_id': '32'}, 'BYTES': {'Length': '8', 'Type': 'BYTES', 'Element_id': '1'}, 'INNER_L4_SRC_PORT': {'Length': '2', 'Type': 'INNER_L4_SRC_PORT', 'Element_id': '7'}, 'IP_NEXT_HOP': {'Length': '4', 'Type': 'IP_NEXT_HOP', 'Element_id': '15'}, 'INNER_MPLS_LABEL_1': {'Length': '3', 'Type': 'INNER_MPLS_LABEL_1', 'Element_id': '70'}, 'IPV6_DST_ADDR': {'Length': '16', 'Type': 'IPV6_DST_ADDR', 'Element_id': '28'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_vx_ipv6_v10_172X75(self):
        self.jf.jflow_template_version = '17.2X75'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'mpls-vx-ipv6'
        format_dict =  {'INPUT_SNMP': {'Length': '4', 'Type': 'INPUT_SNMP', 'Element_id': '10'}, 'MPLS_LABEL_1': {'Length': '3', 'Type': 'MPLS_LABEL_1', 'Element_id': '70'}, 'INNER_L4_DST_PORT': {'Length': '2', 'Type': 'INNER_L4_DST_PORT', 'Element_id': '11'}, 'PKTS': {'Length': '8', 'Type': 'PKTS', 'Element_id': '2'}, 'DST_AS': {'Length': '4', 'Type': 'DST_AS', 'Element_id': '17'}, 'DST_MASK': {'Length': '1', 'Type': 'DST_MASK', 'Element_id': '13'}, 'FIRST_SWITCHED': {'Length': '4', 'Type': 'FIRST_SWITCHED', 'Element_id': '22'}, 'L4_SRC_PORT': {'Length': '2', 'Type': 'L4_SRC_PORT', 'Element_id': '7'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60'}, 'PROTOCOL': {'Length': '1', 'Type': 'PROTOCOL', 'Element_id': '4'}, 'IPV6_SRC_ADDR': {'Length': '16', 'Type': 'IPV6_SRC_ADDR', 'Element_id': '27'}, 'IP_TOS': {'Length': '1', 'Type': 'IP_TOS', 'Element_id': '5'}, 'SRC_MASK': {'Length': '1', 'Type': 'SRC_MASK', 'Element_id': '9'}, 'IP_SRC_ADDR': {'Length': '4', 'Type': 'IP_SRC_ADDR', 'Element_id': '8'}, 'BGP_NEXT_HOP': {'Length': '4', 'Type': 'BGP_NEXT_HOP', 'Element_id': '18'}, 'SRC_AS': {'Length': '4', 'Type': 'SRC_AS', 'Element_id': '16'}, 'MPLS_LABEL_2': {'Length': '3', 'Type': 'MPLS_LABEL_2', 'Element_id': '71'}, 'IP_DST_ADDR': {'Length': '4', 'Type': 'IP_DST_ADDR', 'Element_id': '12'}, 'LAST_SWITCHED': {'Length': '4', 'Type': 'LAST_SWITCHED', 'Element_id': '21'}, 'OUTPUT_SNMP': {'Length': '4', 'Type': 'OUTPUT_SNMP', 'Element_id': '14'}, 'TCP_FLAGS': {'Length': '1', 'Type': 'TCP_FLAGS', 'Element_id': '6'}, 'flowStartMilliseconds': {'Length': '8', 'Type': 'flowStartMilliseconds', 'Element_id': '152'}, 'L4_DST_PORT': {'Length': '2', 'Type': 'L4_DST_PORT', 'Element_id': '11'}, 'ICMP_TYPE': {'Length': '2', 'Type': 'ICMP_TYPE', 'Element_id': '32'}, 'BYTES': {'Length': '8', 'Type': 'BYTES', 'Element_id': '1'}, 'INNER_L4_SRC_PORT': {'Length': '2', 'Type': 'INNER_L4_SRC_PORT', 'Element_id': '7'}, 'IP_NEXT_HOP': {'Length': '4', 'Type': 'IP_NEXT_HOP', 'Element_id': '15'}, 'INNER_MPLS_LABEL_1': {'Length': '3', 'Type': 'INNER_MPLS_LABEL_1', 'Element_id': '70'}, 'IPV6_DST_ADDR': {'Length': '16', 'Type': 'IPV6_DST_ADDR', 'Element_id': '28'}, 'flowEndMilliseconds': {'Length': '8', 'Type': 'flowEndMilliseconds', 'Element_id': '153'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_ipv6_v9_192(self):
        self.jf.jflow_template_version = '19.2'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'ipv6'
        format_dict =  {'DST_AS': {'Length': '4', 'Element_id': '17', 'Type': 'DST_AS'}, 'IPV6_DST_ADDR': {'Length': '16', 'Element_id': '28', 'Type': 'IPV6_DST_ADDR'}, 'IPV6_SRC_ADDR': {'Length': '16', 'Element_id': '27', 'Type': 'IPV6_SRC_ADDR'}, 'PKTS': {'Length': '8', 'Element_id': '2', 'Type': 'PKTS'}, 'IPV6_NEXT_HOP': {'Length': '16', 'Element_id': '62', 'Type': 'IPV6_NEXT_HOP'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Element_id': '60', 'Type': 'IP_PROTOCOL_VERSION'}, 'BYTES': {'Length': '8', 'Element_id': '1', 'Type': 'BYTES'}, 'INPUT_SNMP': {'Length': '4', 'Element_id': '10', 'Type': 'INPUT_SNMP'}, 'FIRST_SWITCHED': {'Length': '4', 'Element_id': '22', 'Type': 'FIRST_SWITCHED'}, 'IPV6_DST_MASK': {'Length': '1', 'Element_id': '30', 'Type': 'IPV6_DST_MASK'}, 'OUTPUT_SNMP': {'Length': '4', 'Element_id': '14', 'Type': 'OUTPUT_SNMP'}, 'L4_DST_PORT': {'Length': '2', 'Element_id': '11', 'Type': 'L4_DST_PORT'}, 'TCP_FLAGS': {'Length': '1', 'Element_id': '6', 'Type': 'TCP_FLAGS'}, 'ICMP_TYPE': {'Length': '2', 'Element_id': '32', 'Type': 'ICMP_TYPE'}, 'LAST_SWITCHED': {'Length': '4', 'Element_id': '21', 'Type': 'LAST_SWITCHED'}, 'PROTOCOL': {'Length': '1', 'Element_id': '4', 'Type': 'PROTOCOL'}, 'L4_SRC_PORT': {'Length': '2', 'Element_id': '7', 'Type': 'L4_SRC_PORT'}, 'IPV6_SRC_MASK': {'Length': '1', 'Element_id': '29', 'Type': 'IPV6_SRC_MASK'}, 'IP_TOS': {'Length': '1', 'Element_id': '5', 'Type': 'IP_TOS'}, 'SRC_AS': {'Length': '4', 'Element_id': '16', 'Type': 'SRC_AS'},'BGP_IPV6_NEXT_HOP': {'Length': '16', 'Element_id': '63', 'Type': 'BGP_IPV6_NEXT_HOP'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_ipv6_v10_192(self):
        self.jf.jflow_template_version = '19.2'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'ipv6'
        format_dict =  {'FIRST_SWITCHED': {'Element_id': '22', 'Type': 'FIRST_SWITCHED', 'Length': '4'}, 'OUTPUT_SNMP': {'Element_id': '14', 'Type': 'OUTPUT_SNMP', 'Length': '4'}, 'PKTS': {'Element_id': '2', 'Type': 'PKTS', 'Length': '8'}, 'IP_PROTOCOL_VERSION': {'Element_id': '60', 'Type': 'IP_PROTOCOL_VERSION', 'Length': '1'}, 'ingressInterfaceType': {'Element_id': '368', 'Type': 'ingressInterfaceType', 'Length': '4'}, 'IPV6_SRC_ADDR': {'Element_id': '27', 'Type': 'IPV6_SRC_ADDR', 'Length': '16'}, 'IPV6_NEXT_HOP': {'Element_id': '62', 'Type': 'IPV6_NEXT_HOP', 'Length': '16'}, 'flowEndMilliseconds': {'Element_id': '153', 'Type': 'flowEndMilliseconds', 'Length': '8'}, 'TCP_FLAGS': {'Element_id': '6', 'Type': 'TCP_FLAGS', 'Length': '1'}, 'BYTES': {'Element_id': '1', 'Type': 'BYTES', 'Length': '8'}, 'L4_DST_PORT': {'Element_id': '11', 'Type': 'L4_DST_PORT', 'Length': '2'}, 'IPV6_DST_ADDR': {'Element_id': '28', 'Type': 'IPV6_DST_ADDR', 'Length': '16'}, 'IPV6_SRC_MASK': {'Element_id': '29', 'Type': 'IPV6_SRC_MASK', 'Length': '1'}, 'DST_AS': {'Element_id': '17', 'Type': 'DST_AS', 'Length': '4'}, 'IP_TOS': {'Element_id': '5', 'Type': 'IP_TOS', 'Length': '1'}, 'icmpTypeCodeIPv6': {'Element_id': '139', 'Type': 'icmpTypeCodeIPv6', 'Length': '2'}, 'IPV6_DST_MASK': {'Element_id': '30', 'Type': 'IPV6_DST_MASK', 'Length': '1'}, 'L4_SRC_PORT': {'Element_id': '7', 'Type': 'L4_SRC_PORT', 'Length': '2'}, 'flowStartMilliseconds': {'Element_id': '152', 'Type': 'flowStartMilliseconds', 'Length': '8'}, 'INPUT_SNMP': {'Element_id': '10', 'Type': 'INPUT_SNMP', 'Length': '4'}, 'LAST_SWITCHED': {'Element_id': '21', 'Type': 'LAST_SWITCHED', 'Length': '4'}, 'SRC_AS': {'Element_id': '16', 'Type': 'SRC_AS', 'Length': '4'}, 'PROTOCOL': {'Element_id': '4', 'Type': 'PROTOCOL', 'Length': '1'},'BGP_IPV6_NEXT_HOP': {'Length': '16', 'Element_id': '63', 'Type': 'BGP_IPV6_NEXT_HOP'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv6_v9_192(self):
        self.jf.jflow_template_version = '19.3'
        self.jf.cflow_version = '9'
        self.jf.template_type = 'mpls-ipv6'
        format_dict =  {'MPLS_LABEL_2': {'Length': '3', 'Type': 'MPLS_LABEL_2', 'Element_id': '71'}, 'IPV6_SRC_ADDR': {'Length': '16', 'Type': 'IPV6_SRC_ADDR', 'Element_id': '27'}, 'PKTS': {'Length': '8', 'Type': 'PKTS', 'Element_id': '2'}, 'DST_AS': {'Length': '4', 'Type': 'DST_AS', 'Element_id': '17'}, 'IP_TOS': {'Length': '1', 'Type': 'IP_TOS', 'Element_id': '5'}, 'FIRST_SWITCHED': {'Length': '4', 'Type': 'FIRST_SWITCHED', 'Element_id': '22'}, 'PROTOCOL': {'Length': '1', 'Type': 'PROTOCOL', 'Element_id': '4'}, 'L4_SRC_PORT': {'Length': '2', 'Type': 'L4_SRC_PORT', 'Element_id': '7'}, 'IP_PROTOCOL_VERSION': {'Length': '1', 'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60'}, 'L4_DST_PORT': {'Length': '2', 'Type': 'L4_DST_PORT', 'Element_id': '11'}, 'SRC_AS': {'Length': '4', 'Type': 'SRC_AS', 'Element_id': '16'}, 'IPV6_NEXT_HOP': {'Length': '16', 'Type': 'IPV6_NEXT_HOP', 'Element_id': '62'}, 'BYTES': {'Length': '8', 'Type': 'BYTES', 'Element_id': '1'}, 'MPLS_LABEL_3': {'Length': '3', 'Type': 'MPLS_LABEL_3', 'Element_id': '72'}, 'MPLS_LABEL_1': {'Length': '3', 'Type': 'MPLS_LABEL_1', 'Element_id': '70'}, 'OUTPUT_SNMP': {'Length': '4', 'Type': 'OUTPUT_SNMP', 'Element_id': '14'}, 'TCP_FLAGS': {'Length': '1', 'Type': 'TCP_FLAGS', 'Element_id': '6'}, 'MPLS_TOP_LABEL_ADDR': {'Length': '4', 'Type': 'MPLS_TOP_LABEL_ADDR', 'Element_id': '47'}, 'IPV6_SRC_MASK': {'Length': '1', 'Type': 'IPV6_SRC_MASK', 'Element_id': '29'}, 'IPV6_DST_MASK': {'Length': '1', 'Type': 'IPV6_DST_MASK', 'Element_id': '30'}, 'ICMP_TYPE': {'Length': '2', 'Type': 'ICMP_TYPE', 'Element_id': '32'}, 'LAST_SWITCHED': {'Length': '4', 'Type': 'LAST_SWITCHED', 'Element_id': '21'}, 'INPUT_SNMP': {'Length': '4', 'Type': 'INPUT_SNMP', 'Element_id': '10'}, 'IPV6_DST_ADDR': {'Length': '16', 'Type': 'IPV6_DST_ADDR', 'Element_id': '28'},'BGP_IPV6_NEXT_HOP': {'Length': '16', 'Element_id': '63', 'Type': 'BGP_IPV6_NEXT_HOP'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

    def test_get_expected_data_template_mpls_ipv6_v10_192(self):
        self.jf.jflow_template_version = '19.3'
        self.jf.cflow_version = '10'
        self.jf.template_type = 'mpls-ipv6'
        format_dict =  {'IP_PROTOCOL_VERSION': {'Type': 'IP_PROTOCOL_VERSION', 'Element_id': '60', 'Length': '1'}, 'MPLS_TOP_LABEL_IPv6_ADDRESS': {'Type': 'MPLS_TOP_LABEL_IPv6_ADDRESS', 'Element_id': '140', 'Length': '16'}, 'MPLS_LABEL_1': {'Type': 'MPLS_LABEL_1', 'Element_id': '70', 'Length': '3'}, 'DST_AS': {'Type': 'DST_AS', 'Element_id': '17', 'Length': '4'}, 'FIRST_SWITCHED': {'Type': 'FIRST_SWITCHED', 'Element_id': '22', 'Length': '4'}, 'OUTPUT_SNMP': {'Type': 'OUTPUT_SNMP', 'Element_id': '14', 'Length': '4'}, 'flowStartMilliseconds': {'Type': 'flowStartMilliseconds', 'Element_id': '152', 'Length': '8'}, 'IPV6_DST_MASK': {'Type': 'IPV6_DST_MASK', 'Element_id': '30', 'Length': '1'}, 'PKTS': {'Type': 'PKTS', 'Element_id': '2', 'Length': '8'}, 'MPLS_LABEL_2': {'Type': 'MPLS_LABEL_2', 'Element_id': '71', 'Length': '3'}, 'IPV6_SRC_ADDR': {'Type': 'IPV6_SRC_ADDR', 'Element_id': '27', 'Length': '16'}, 'flowEndMilliseconds': {'Type': 'flowEndMilliseconds', 'Element_id': '153', 'Length': '8'}, 'TCP_FLAGS': {'Type': 'TCP_FLAGS', 'Element_id': '6', 'Length': '1'}, 'icmpTypeCodeIPv6': {'Type': 'icmpTypeCodeIPv6', 'Element_id': '139', 'Length': '2'}, 'L4_SRC_PORT': {'Type': 'L4_SRC_PORT', 'Element_id': '7', 'Length': '2'}, 'BYTES': {'Type': 'BYTES', 'Element_id': '1', 'Length': '8'}, 'ingressInterfaceType': {'Type': 'ingressInterfaceType', 'Element_id': '368', 'Length': '4'}, 'INPUT_SNMP': {'Type': 'INPUT_SNMP', 'Element_id': '10', 'Length': '4'}, 'L4_DST_PORT': {'Type': 'L4_DST_PORT', 'Element_id': '11', 'Length': '2'}, 'MPLS_LABEL_3': {'Type': 'MPLS_LABEL_3', 'Element_id': '72', 'Length': '3'}, 'IPV6_SRC_MASK': {'Type': 'IPV6_SRC_MASK', 'Element_id': '29', 'Length': '1'}, 'SRC_AS': {'Type': 'SRC_AS', 'Element_id': '16', 'Length': '4'}, 'IPV6_DST_ADDR': {'Type': 'IPV6_DST_ADDR', 'Element_id': '28', 'Length': '16'}, 'IPV6_NEXT_HOP': {'Type': 'IPV6_NEXT_HOP', 'Element_id': '62', 'Length': '16'}, 'LAST_SWITCHED': {'Type': 'LAST_SWITCHED', 'Element_id': '21', 'Length': '4'}, 'PROTOCOL': {'Type': 'PROTOCOL', 'Element_id': '4', 'Length': '1'}, 'IP_TOS': {'Type': 'IP_TOS', 'Element_id': '5', 'Length': '1'},'BGP_IPV6_NEXT_HOP': {'Length': '16', 'Element_id': '63', 'Type': 'BGP_IPV6_NEXT_HOP'}}
        self.assertEqual(self.jf.get_expected_data_template(), format_dict)

if __name__ == '__main__':
    unittest.main()

