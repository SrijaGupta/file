Spirent TestCenterTM Automation
HLTAPI Command Reference
$XJXVW 2015
PN 71-007691 Rev A
Spirent
27349 Agoura Road
Calabasas, CA 91301
USA
Copyright
© 2015 Spirent Communications, Inc. All Rights Reserved.
All of the company names and/or brand names and/or product names referred to in this document, in particular,
the name “Spirent” and its logo device, are either registered trademarks or trademarks of Spirent plc and its
subsidiaries, pending registration in accordance with relevant national laws. All other registered trademarks or
trademarks are the property of their respective owners. The information contained in this document is subject
to change without notice and does not represent a commitment on the part of Spirent Communications. The
information in this document is believed to be accurate and reliable, however, Spirent Communications assumes no
responsibility or liability for any errors or inaccuracies that may appear in the document.
Limited Warranty
Spirent Communications, Inc. (“Spirent”) warrants that its Products will conform to the description on the face
of order, that it will convey good title thereto, and that the Product will be delivered free from any lawful security
interest or other lien or encumbrance.
Spirent further warrants to Customer that hardware which it supplies and the tangible media on which it supplies
software will be free from significant defects in materials and workmanship for a period of twelve (12) months,
except as otherwise noted, from the date of delivery (the “Hardware Warranty Period”), under normal use and
conditions.
To the extent the Product is or contains software (“Software”), Spirent also warrants that, if properly used by
Customer in accordance with the Software License Agreement, the Software which it supplies will operate in
material conformity with the specifications supplied by Spirent for such Software for a period of ninety (90)
days from the date of delivery (the “Software Warranty Period”). The “Product Warranty Period” shall mean
the Hardware Warranty Period or the Software Warranty Period, as applicable. Spirent does not warrant that the
functions contained in the Software will meet a specific requirement or that the operation will be uninterrupted
or error free. Spirent shall have no warranty obligations whatsoever with respect to any Software which has been
modified in any manner by Customer or any third party.
Defective Products and Software under warranty shall be, at Spirent's discretion, repaired or replaced or a credit
issued to Customer's account for an amount equal to the price paid for such Product provided that: (a) such Product
is returned to Spirent after first obtaining a return authorization number and shipping instructions, freight prepaid, to
Spirent's location in the United States; (b) Customer provides a written explanation of the defect or Software failure
claimed by Customer; and (c) the claimed defect actually exists and was not caused by neglect, accident, misuse,
improper installation, improper repair, fire, flood, lightning, power surges, earthquake, or alteration. Spirent will
ship repaired Products to Customer, freight prepaid, based on reasonable best efforts after the receipt of defective
Products. Except as otherwise stated, any claim on account of defective materials or for any other cause whatsoever
will conclusively be deemed waived by Customer unless written notice thereof is given to Spirent within the
Warranty Period. Spirent reserves the right to change the warranty and service policy set forth above at any time,
after reasonable notice and without liability to Customer.
TO THE EXTENT PERMITTED BY APPLICABLE LAW, ALL IMPLIED WARRANTIES, INCLUDING
BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT
AND FITNESS FOR A PARTICULAR PURPOSE, ARE HEREBY EXCLUDED, AND THE LIABILITY OF
SPIRENT, IF ANY, FOR DAMAGE RELATING TO ANY ALLEGEDLY DEFECTIVE PRODUCT SHALL BE
LIMITED TO THE ACTUAL PRICE PAID BY THE CUSTOMER FOR SUCH PRODUCT. THE PROVISIONS
SET FORTH ABOVE STATE SPIRENT'S ENTIRE RESPONSIBILITY AND CUSTOMER'S SOLE AND
EXCLUSIVE REMEDY WITH RESPECT TO ANY BREACH OF ANY WARRANTY.
Contents
3
Contents
How to Contact Us......................................................................................................5
Introduction..................................................................................................................6
40G/100G Functions..................................................................................................11
802.1X Functions.......................................................................................................21
Alarm Functions........................................................................................................ 38
ANCP Functions........................................................................................................ 44
BFD Functions...........................................................................................................65
BGP Functions.......................................................................................................... 77
Break/Restore Link Functions............................................................................... 133
Device Configuration Functions............................................................................135
Debug Functions..................................................................................................... 140
DHCP Functions...................................................................................................... 147
DHCP Server Functions..........................................................................................188
EFM Functions.........................................................................................................220
EOAM Functions..................................................................................................... 242
FC Functions........................................................................................................... 269
FCoE Functions.......................................................................................................275
GRE Functions........................................................................................................ 321
HTTP Functions.......................................................................................................328
IGMP Functions....................................................................................................... 350
IGMP Querier Functions.........................................................................................372
IPv6 Autoconfiguration Functions........................................................................ 382
ISIS Functions......................................................................................................... 395
L2TP Functions....................................................................................................... 436
LACP Functions...................................................................................................... 458
LDP Functions......................................................................................................... 465
LLDP Functions.......................................................................................................499
MLD Functions........................................................................................................ 533
MPLS-TP Functions................................................................................................ 552
MPLS VPN Functions..............................................................................................574
Multicast Functions.................................................................................................596
MVPN Functions......................................................................................................601
OpenFlow Functions...............................................................................................638
OSPF Functions...................................................................................................... 652
Packet Capture Functions......................................................................................720
PCEP Functions...................................................................................................... 747
PIM Functions..........................................................................................................778
PING Functions....................................................................................................... 798
PPP Functions......................................................................................................... 801
PPPoX Functions.................................................................................................... 814
PPPoX Server Functions........................................................................................840
PTP Functions......................................................................................................... 864
RFC 2544 Functions............................................................................................... 885
RFC 3918 Functions............................................................................................... 905
RIP Functions.......................................................................................................... 932
RSVP Functions...................................................................................................... 949
Session Functions.................................................................................................. 978
SIP Functions........................................................................................................ 1021
STP Functions....................................................................................................... 1040
Traffic Functions................................................................................................... 1059
Contents
4
VXLAN Functions.................................................................................................. 1175
VPLS Functions.....................................................................................................1181
Save as HLTAPI CLI Mode................................................................................... 1187
Sequencer Control Function................................................................................1189
HLTAPI Wrapper Function................................................................................... 1191
Appendix A. Save as HLTAPI.............................................................................. 1194
Appendix B. Functions that Support Multiple Protocols on One Device.........1199
Appendix C. Result Properties for DRV..............................................................1201
Function Index.......................................................................................................1226
How to Contact Us
5
How to Contact Us
To obtain technical support for any Spirent Communications product, please contact our Support Services
department using any of the following methods:
Americas
Email: support@spirent.com
Web: http://support.spirent.com
Toll Free: +1 800-SPIRENT (+1 800-774-7368) (North America)
Phone: +1 818-676-2616
Hours: Monday through Friday, 05:30 to 18:00 Pacific Time
Europe, Africa, Middle East
Email: support@spirent.com
Web: http://support.spirent.com
Phone: +33 (1) 6137 2270 (France)
Phone: +44 1803 546333 (UK)
Hours: Monday through Thursday 09:00 to 18:00, Friday 09:00 to 17:00, Paris Time
Asia Pacific
Email: support@spirent.com
Web: http://support.spirent.com
Phone: +86 (800) 810-9529 (toll-free mainland China only)
Phone: +86 (10) 8233 0033 (China)
Hours: Monday through Friday 09:00 to 18:00 Beijing Time
The Spirent Knowledge Base (http://support.spirent.com) is designed to serve your technical information
needs. The Knowledge Base gives you access to tens of thousands of documents that help answer your
network analysis and measurement questions. New content is added daily by Spirent's communications
and networking experts. Sign in with your user ID and password to gain access to additional content that
is available only to customers – user manuals, Help files, release notes, Tech Bulletins, and more. When
you sign in, you can also use the Knowledge Base to download software and firmware, and to manage
your SRs.
Information about Spirent Communications and its products and services can be found on the main
company website at http://www.spirent.com.
Company Address
Spirent Communications
27349 Agoura Road
Calabasas Hills, CA 91301
USA
Introduction
6
Introduction
The Spirent TestCenter Automation HLTAPI Command Reference provides basic information about Spirent
High Level Test Application Programming Interface (HLTAPI) functions. It also provides descriptions of how
to use these functions along with examples of creating and running test configurations.
The target audience is test specialists who run automation tests using Spirent TestCenter hardware and
software. Users of this manual should have the following knowledge and experience:
• Familiarity with the operating system on your PC or workstation (Microsoft® Windows® or Linux®).
• Moderate familiarity with test equipment.
• Working knowledge of data communications theory and practice.
• Ability to program with the the Tcl, Python, or Perl scripting languages.
Sample Scripts
You can find sample scripts in the installation directory under HLTAPI_ReleasePackage > SampleScripts.
(The link opens the SampleScripts folder if you use this manual from its default installed location. If you use
this manual from another directory, you must navigate to the SampleScripts folder.)
About Spirent HLTAPI
Spirent HLTAPI is Spirent's implementation of Cisco HLTAPI. Spirent HLTAPI is designed to hide the lowerlevel
APIs of Spirent TestCenter. This greatly reduces the need for any test script changes if there are
changes to Spirent's lower-level APIs in newer releases.
Spirent HLTAPI started out Tcl-based, but beginning with release 4.40 it has added support for Perl and
Python. Depending on automation preferences or requirements, test specialists can use any of these
languages for tests.
Spirent TestCenter HLTAPI adheres to the following Cisco requirements:
• It is a self-contained package containing everything needed to use the library.
• It is distributed for use with the Spirent TestCenter software.
About This Manual
This Introduction provides an overview of Spirent HLTAPI and the use of this manual.
The Functions section is the core of the manual. It covers all the functions that make up HLTAPI. Each
function is introduced and its usage is described. All supported protocols are covered, as well as some test
control functions.
Each function is documented with the following information:
• Purpose - General overview of the purpose of the function and related concepts.
• Synopsis - List of all function arguments.
• Arguments - Argument description including function, dependencies, value range, and default value.
• Arguments Unsupported by Save as HLTAPI - Arguments currently not supported by Save as HLTAPI.
• Cisco Specific Arguments - Arguments specific to Cisco HLTAPI but not supported by Spirent HLTAPI.
• Return Values - What the function returns when you invoke it.
• Description - A general walk-through of the function.
• Examples - Code snippets of specific configurations in Tcl, Python and Perl.
• Notes - Additional information, where necessary.
Appendix A provides an introduction to the Save as HLTAPI function.
Appendix B is a list of Spirent HLTAPI functions that support multiple protocols on the same device.
Appendix C is a list of the Spirent TestCenter properties available for the sth::drv_stats function.
Notes:
• To be consistent with previous examples in this documentation, the Synopsis, Arguments and Description
are provided in Tcl. However, this information is generic and applies equally to Python and Perl.
• Orange text in function descriptions indicates Spirent-specific extensions.
Introduction
7
Function Conventions
This section provides general information on function conventions. Detailed distinctions and standard syntax
for each supported language are not discussed.
Spirent HLTAPI is designed so that HLTAPI for Tcl, Python and Perl share the same functions, arguments,
and capabilities. The only difference is the language each HLTAPI uses.
HLTAPI
Language
Initialization Function Call Argument Format Parameter Passing
Tcl package require \
SpirentHltApi
sth::function_name -arg_name -arg1 value1 \
-arg2 value2 \
...
Python import sth sth.function_name arg_name arg1 = 'value1',
arg2 = 'value2',
...
Perl use sth;
use strict;
use warnings;
use Data::Dumper;
sth::function_name arg_name arg1 => 'value',
arg2 => 'value',
...
Notes:
• Functions or arguments that are longer than two words are connected by an underscore (“_”). For example,
emulation_l2tp_config, ip_address.
• Arguments are either optional or mandatory. In Synopsis, an argument inside a bracket "[]" is optional;
an argument not contained in a bracket is mandatory. Mandatory arguments are always listed first. In the
following sample synopsis, arguments -mode and -ports are mandatory. Argument -port_handle
is mandatory for -mode create, and argument -handle is mandatory for -mode delete. Argument
attachment_group_id is optional.
 sth::emulation_mpls_tp_config
 -mode create -port_handle <port_handle> | -mode delete -handle <handle>
 -ports <handle>
 [-attachment_group_id (100:1)]
 ...

The following three HLTAPI code snippets do the same actions in Tcl, Python and Perl. The snippets create
an OSPFv2 router on a specified port. Eight parameters are passed to set up the device.
 # HLTAPI for Tcl
 set device_ret0 [sth::emulation_ospf_config \
 -port_handle $port(1) \
 -intf_ip_addr 134.231.242.112 \
 -hello_interval 10 \
 -router_priority 10 \
 -session_type ospfv2 \
 -gateway_ip_addr 134.231.242.2 \
 -area_id 10.01.12.24 \
 -mode create \
 ]

 # HLTAPI for Python
 device_ret0 = sth.emulation_ospf_config (
 port_handle = '$port(1)',
 intf_ip_addr = '134.231.242.112',
 hello_interval = '10',
 router_priority = '10',
 session_type = 'ospfv2',
 gateway_ip_addr = '134.231.242.2',
 area_id = '10.01.12.24',
 mode = 'create');
 # HLTAPI for Perl
 my %device_ret0 = sth::emulation_ospf_config (
 port_handle => '$port(1)',
 intf_ip_addr => '134.231.242.112',
Introduction
8
 hello_interval => '10',
 router_priority => '10',
 session_type => 'ospfv2',
 gateway_ip_addr => '134.231.242.2',
 area_id => '10.01.12.24',
 mode => 'create');
Data Structures Returned
Depending on the language used, a function will return a keyed list (Tcl), a dictionary (Python), or a hash
(Perl). These different data structures deliver equivalent data.
HLTAPI
language
Data Structure
Types
Examples of Returned Data Structures Value Retrieval Method
Tcl Keyed list {status 1}{key1 value1}...
{status 0}{log {<error message>}}
keylget
Python Dictionary {'status': '1', 'key1': 'value1'...}
{'status': '0'}{'log': {<error message>}}

dict_name['key']
Perl Hash $VAR1 = 'status';
$VAR2 = '1';
$VAR3 = 'key1';
$VAR4 = 'value1';
...
$VAR1 = 'status';
$VAR2 = '0';
$VAR3 = 'log';
$VAR4 = 'error message';
{key}[array number]
or for a nested hash:
hash_name{key1}{key2}...
Return values for all HLTAPI procedures contain a key called status that indicates if the procedure was
successful. Status 0 indicates failure of the procedure, which also generates a key called log that is the error
log. Status 1 indicates success. The table above gives examples of the data structure returned when the
status is 1 and when it is 0 for each language.
In the previous example that set up an OSPFv2 device, the keyed list/dictionary/hash was defined as
device_ret0. The following snippets retrieve the status first, and then display the return values when it
confirms that the status is 1.
 # HLTAPI for Tcl
 set status [keylget device_ret0 status]
 if {$status == 1} {
 puts $device_ret0
 }
 # Output:
 {{status 1}{handle ospfv2routerconfig1}}

 # HLTAPI for Python
 status = device_ret0['status']
 if (status == '1') :
 print device_ret0
 # Output:
 {'status': '1', 'handle': ospfv2routerconfig1}

 # HLTAPI for Perl
 $status = $device_ret0{status}[0];
 if ($status == 1) {
 print Dumper %device_ret0;
 }
 # Output:
 $VAR1 = 'handles';
 $VAR2 = 'router1';
 $VAR3 = 'status';
 $VAR4 = '1';
Introduction
9


Useful References
Other documentation resources are listed below.
• HLTAPI Environment Installation Guide - Describes the environment configuration and the installation
process of Spirent HLTAPI. You can find this guide in HLTAPI_ReleasePackage > UserDoc.
• Getting Started with Spirent TestCenter - Provides details on how to install Spirent TestCenter chassis and
modules and how to obtain license keys. This manual is included on the Spirent TestCenter Application
DVD and is available in the Knowledge Base on the Spirent Communications support website (http://
support.spirent.com).
• Sample scripts - Sample scripts are provided for HLTAPI for Tcl, HLTAPI for Python and HLTAPI for Perl.
You can find sample scripts in HLTAPI_ReleasePackage > SampleScripts.
Functions
10
Functions
The functions are given on the following pages.
40G/100G Functions
11
40G/100G Functions
Functions:
sth::pcs_error_config
sth::pcs_error_control
sth::random_error_config
sth::random_error_control
sth::forty_hundred_gig_l1_results
sth::pcs_error_config
Name:
 sth::pcs_error_config
Purpose:
 Configures the error mask for the 64/66B lane marker and data block on the
 specified Physical Coding Sublayer (PCS) lane. PCS is common to two families
 (40 Gb/s and 100 Gb/s) of Physical Layer implementations, known as 40GBASE-R and
 100GBASE-R, both of which are based on a 64B/66B code. The 64B/66B code
 supports transmission of data and control characters, while maintaining robust
 error detection. Data distribution is introduced to support multiple lanes in the
 physical layer (4 lanes for 40GBASE-R and 20 lanes for 100GBASE-R). Part of the
 distribution includes the periodic insertion of an alignment marker, which allows
 the receive PCS to align data from multiple lanes.

 Using the configured error mask, Spirent HLTAPI performs an XOR operation on the
 64/66B lane marker and data block. The key in a hexadecimal or binary mask where a
 one in the binary indicates an error will be inserted and a zero indicates the
 bit will be left as is.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::pcs_error_config
 -port_handle <port_handle>
 [-burst_count <1 - 0x3fffffffffff>]
 [-burst_interval <integer>]
 [-burst_length <1 - 0xffffff>]]
 [-continuous_mode {LANE_MARKERS_ONLY | LANE_MARKERS_AND_PAYLOAD}]
 [-error_insertion_mode {LANE_MARKERS_ONLY | LANE_MARKERS_AND_PAYLOAD}]
 [-lane_enable <Boolean_list>
 [-sync_header <0 - 3>]
 [-marker0 <0 - 255>]
 [-bip3 <0 - 255>]
 [-marker4 <0 - 255>]
 [-marker5 <0 - 255>]
 [-marker6 <0 - 255>]
 [-bip7 <0 - 255>]

Arguments:
 -port_handle
 Specifies the port on which the error mask will be configured.
 This argument is mandatory.

 -burst_count
 Number of error bursts. This argument is only valid when
 -continuous_mode is set to false. Possible values range from 1
 to 0x3fffffffffff. The default is 1.

 -burst_interval
 Number of blocks between error bursts. This argument is only
 valid when -continuous_mode is set to false. The default value
 is 1.
 
40G/100G Functions
12
 -burst_length
 Number of sequential errored blocks in each burst. This argument
 is only valid when -continuous_mode is set to false. Possible
 values range from 1 to 0xffffff. The default is 1.

 -continuous_mode
 Determines whether the PCS error insertion is continuous or not.
 Possible values are true (continuous) and false (not continuous).
 The default is true.

 -error_insertion_mode
 Determines the error insertion mode. Possible Values are
 described below:

 LANE_MARKERS_ONLY Only alignment markers are corrupted
 upon insertion

 LANE_MARKERS_AND_PAYLOAD Both alignment markers and payload are
 corrupted upon insertion

 The default value is LANE_MARKERS_ONLY

 -lane_enable
 Boolean flags to individually enable/disable each of the PCS
 lanes. The value is a 4-Boolean list for 40GBASE-R, and a
 20-Boolean list for 100GBASE-R. For example,

 -lane_enable {TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE \
 FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE \
 FALSE FALSE FALSE}\

 -sync_header
 The 2-bit sync header in the alignment marker bytes (to corrupt).
 The alignment marker has the form of a specially defined 66-bit
 block with a control block Sync header. The transmitters
 periodically insert alignment markers simultaneously on each PCS
 lane after the transmission of every 16,383 blocks of data and
 control. A non-zero value for any bit indicates that the bit
 will be flipped (corrupted) upon transmission. Possible values
 range from 0 to 3. The default is 0.

 -marker0
 Marker 0 in the alignment marker bytes (to corrupt). The M bytes
 (-marker0 - -marker7) contain specific values that identify each
 lane from 0 to 19. A non-zero value for any bit indicates that
 the bit will be flipped (corrupted) upon transmission. Possible
 values range from 0 to 255. The default is 0.

 -marker1
 Marker 1 in the alignment marker bytes (to corrupt). A non-zero
 value for any bit indicates that the bit will be flipped
 (corrupted) upon transmission. Possible values range from 0 to
 255. The default is 0.

 -marker2
 Marker 2 in the alignment marker bytes (to corrupt). A non-zero
 value for any bit indicates that the bit will be flipped
 (corrupted) upon transmission. Possible values range from 0 to
 255. The default is 0.

 -bip3
 The first Bit Interleaved Parity (BIP) field in the alignment marker
 bytes (to corrupt). BIP contains a parity check calculated over
 the bits from the previously inserted alignment marker and all the
 subsequently transmitted blocks up to the current marker. A non-zero
 value for any bit indicates that the bit will be flipped
 (corrupted) upon transmission. Possible values range from 0 to
 255. The default is 0.

 -marker4
 Marker 4 in the alignment marker bytes (to corrupt). A non-zero
40G/100G Functions
13
 value for any bit indicates that the bit will be flipped
 (corrupted) upon transmission. Possible values range from 0 to
 255. The default is 0.

 -marker5
 Marker 5 in the alignment marker bytes (to corrupt). Non-zero
 value for any bit indicates that the bit will be flipped
 (corrupted) upon transmission. Possible values range from 0 to
 255. The default is 0.

 -marker6
 Marker 6 in the alignment marker bytes (to corrupt). Non-zero
 value for any bit indicates that the bit will be flipped
 (corrupted) upon transmission. Possible values range from 0 to
 255. The default is 0.

 -bip7
 The second BIP field in the alignment marker bytes (to corrupt).
 This BIP maintains line balancing. Non-zero value for any bit
 indicates that the bit will be flipped (corrupted) upon
 transmission. Possible values range from 0 to 255. The default is 0.

Arguments Unsupported by Save as HLTAPI:
 The sth::pcs_error_config function is currently not supported by Save to HLTAPI.
 To test with this function, you must configure it manually in the generated
 Spirent HLTAPI scripts.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle Identifies the handle of the PCS error insertion configuration

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)

Description:
 The sth::pcs_error_config function configures the error mask for the 64/66B lane
 marker and data block on the specified PCS lane. Use -port_handle to specify the
 port on which you want to configure the error mask.
 Using the configured error mask, Spirent HLTAPI performs an XOR operation on the
 64/66B lane marker and data block. The key in a hexadecimal or binary mask where a
 one in the binary indicates an error will be inserted and a zero indicates the
 bit will be left as is.
Examples:
 To configure 40G PCS error insertion:
 set pcs_err_config [sth::pcs_error_config\
 -port_handle $port1\
 -continuous_mode false\
 -lane_enable {TRUE FALSE FALSE TRUE}\
 -sync_header 1\
 -burst_count 10]

 Sample Output:
 {{status 1}{handle pcserrorinsertionconfig1}}

 To configure 100G PCS error insertion:
 set pcs_err_config [sth::pcs_error_config\
 -port_handle $port1\
 -continuous_mode false\
 -lane_enable {TRUE FALSE FALSE TRUE FALSE FALSE FALSE \
 FALSE FALSE FALSE FALSE FALSE FALSE FALSE \
40G/100G Functions
14
 FALSE FALSE FALSE FALSE FALSE FALSE}\
 -sync_header 1\
 -burst_count 10]
 Sample Output:
 {{status 1}{handle pcserrorinsertionconfig1}}
sth::pcs_error_control
Name:
 sth::pcs_error_control
Purpose:
 Starts or stops the configured PCS error insertion
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::pcs_error_control
 -port_handle <port_handle>
 -action {start | stop}
Arguments:
 -port_handle
 Specifies the port handle on which you want to start or stop the
 PCS error insertion. This argument is mandatory.

 -action
 Specifies the action to perform. Possible values are start and
 stop. This argument is mandatory.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)

Description:
 The sth::pcs_error_control function starts or stops the configured PCS error
 insertion. Use the -action argument to specify the action to perform.
 (See the -action argument for information about the actions.)
Examples:
 To start the PCS error insertion:
 set ctrl_ret [sth::pcs_error_control \
 -action start \
 -port_handle $port1]

sth::random_error_config
Name:
 sth::random_error_config
Purpose:
 Configures pseudo-random bit stream (PRBS) error insertion.
 PRBS error insertion operates at the Physical Medium Attachment (PMA) sublayer,
 using an unframed PRBS per lane to determine if your 40/100 Gbps optical
 transceivers function correctly. 
40G/100G Functions
15
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::random_error_config
 -port_handle
 [-lane_enable <Boolean_list>]
 [-rate <0.00000000001 - 0.1>]

Arguments:
 -port_handle
 Specifies the port handle on which the PRBS error insertion will
 be configured. This argument is mandatory.

 -lane_enable
 Boolean flags to individually enable each of the PMA lanes for
 PRBS random error insertion. The value is a 4-Boolean list for
 40G, and a 10-Boolean list for for 100G. For example,

 -lane_enable {TRUE FALSE FALSE TRUE FALSE FALSE FALSE\
 FALSE FALSE FALSE}\
 -rate
 PRBS random error insertion rate. Possible values range from
 0.00000000001 to 0.1. The default value is 0.000000001.
Arguments Unsupported by Save as HLTAPI:
 The sth::random_error_config function is currently not supported
 by Save to HLTAPI. To test with this function, you must configure it manually in
 the generated Spirent HLTAPI scripts.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle Identifies the handle of the random error insertion configuration

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)

Description:
 The sth::random_error_config function configures the(PRBS) error insertion on the
 specified 40G/100G port. Use -port_handle to specify the
 port on which you want to configure random error insertion.

Examples:
 To configure 40G random error insertion:
 set random_err_config [sth::random_error_config\
 -port_handle $port2\
 -lane_enable {TRUE FALSE FALSE TRUE}\
 -rate 0.000001]

 Sample Output:
 {{status 1}{handle randomerrorinsertionconfig1}}
 To configure 100G random error insertion:
 set random_err_config [sth::random_error_config\
 -port_handle $port2\
 -lane_enable {TRUE FALSE FALSE TRUE FALSE FALSE FALSE\
 FALSE FALSE FALSE}\
 -rate 0.000001]

 Sample Output:

 {{status 1}{handle randomerrorinsertionconfig1}}
40G/100G Functions
16
sth::random_error_control
Name:
 sth::random_error_control
Purpose:
 Starts or stops injecting random errors on the high speed fiber interface
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::random_error_control
 -port_handle <port_handle>
 -action {start | stop}
Arguments:
 -port_handle
 Specifies the port handle on which you want to start or stop the
 random error insertion. This argument is mandatory.

 -action
 Specifies the action to perform. Possible values are start and
 stop. This argument is mandatory.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)

Description:
 The sth::pcs_error_control function starts or stops the configured random error
 insertion. Use the -action argument to specify the action to perform.
 (See the -action argument description for information about the actions.)
Examples:
 set ctrl_ret [sth::random_error_control \
 -action start \
 -port_handle $port1]

sth::forty_hundred_gig_l1_results
Name:
 sth::forty_hundred_gig_l1_results
Purpose:
 Returns statistics for 40G/100G testing
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::forty_hundred_gig_l1_results
 [-port_handle <port_handle>
 [-type {pcs | pcs_lane | pma_lane}]
 [-mode {port | lanes | all}
Arguments:
 -port_handle
 Specifies the port handle on which the results will be returned.
 If not specified, the results on all ports will be returned.
40G/100G Functions
17
 -type
 Specifies the type of results to be returned
 Possible values are:
 pcs Port aggregated PCS results
 pcs_lane PCS lanes results
 pma_lane PMA lanes results
 The default value is pcs.
 -mode
 Specify the results mode
 Possible values are:
 port Returns port-level results
 lanes Returns lane-level results
 all Returns all statistics
 The default value is port. If -type is set to pcs, no
 lane-level results will be returned.

Description:
 The sth::forty_hundred_gig_l1_results function returns statistics for 40G/100G
 testing. Use -type to specify the type of the results to be returned. Use -mode
 to specify the scope of the results. (See the description of -type and -mode for
 more details)

Return Values
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status Success (1) or failure (0) of the operation
 log An error message (if the operation failed)

 The following keys are returned when you specify -type pcs. The results for each
 type of error contain four keys:
 *errors - Number of errors
 *errorrate - Rate of errors per second
 *errorserr - Number of errored seconds
 *errorslastsec - Number of errors in the previous second

 Key Error Description

 port_pcs_bip8errors BIP-8 code errors
 port_pcs_bip8errorrate
 port_pcs_bip8errorserr
 port_pcs_bip8errorslastsec

 port_pcs_consecerrors Four consecutive PCS lane marker errors occurred
 port_pcs_consecerrorrate in the lane
 port_pcs_consecerrorserr
 port_pcs_consecerrorslastsec

 port_pcs_lengtherrors PCS lane markers were not 16,383 data blocks apart
 port_pcs_lengtherrorrate
 port_pcs_lengtherrorserr
 port_pcs_lengtherrorslastsec

 port_pcs_markererrors An incorrectly formed PCS lane marker word was
 port_pcs_markererrorrate detected in the respective lane
 port_pcs_markererrorserr
 port_pcs_markererrorslastsec

 port_pcs_sherrors One or more bad sync headers were detected in the
 port_pcs_sherrorrate most recent sampling interval
 port_pcs_sherrorserr
 port_pcs_sherrorslastsec


 The following keys are returned when you specify -type pcs_lane. The results for
 each type of error contain four keys:
 *errors - Number of errors
 *errorrate - Rate of errors per second
40G/100G Functions
18
 *errorserr - Number of errored seconds
 *errorslastsec - Number of errors in the previous second

 Key Error Description
 port_pcs_lane_bip8errors BIP-8 code errors
 port_pcs_lane_bip8errorrate
 port_pcs_lane_bip8errorserr

 port_pcs_lane_bip8errorslastsec

 port_pcs_lane_consecerrors Four consecutive PCS lane marker errors
 port_pcs_lane_consecerrorrate occurred in the lane
 port_pcs_lane_consecerrorserr
 port_pcs_lane_consecerrorslastsec

 port_pcs_lane_lengtherrors PCS lane markers were not 16,383 data
 port_pcs_lane_lengtherrorrate blocks apart
 port_pcs_lane_lengtherrorserr
 port_pcs_lane_lengtherrorslastsec


 port_pcs_lane_markererrors An incorrectly formed PCS lane marker word
 port_pcs_lane_markererrorrate was detected in the respective lane
 port_pcs_lane_markererrorserr
 port_pcs_lane_markererrorslastsec

 port_pcs_lane_sherrors One or more bad sync headers were detected
 port_pcs_lane_sherrorrate in the most recent sampling interval
 port_pcs_lane_sherrorserr
 port_pcs_lane_sherrorslastsec

 The following keys are returned when you specify -type pma_lane:

 port_pma_lane_bererrors Number of bit errors

 port_pma_lane_bererrorrate Bit error rate

 port_pma_lane_bersync Number of seconds the lane was in sync

 port_pma_lane_berunsync Number of seconds the lane was not in sync

 port_pma_lane_rxprbspattern The PRBS pattern


Examples:

 To return port level PCS results:
 Sample Input:

 set results [::sth::forty_hundred_gig_l1_results]

 Sample Output:

 {result_count 2} {port1 {{port {{port_name {10.61.33.240-6-1 //6/1}}
 {port_pcs_bip8errorrate 0.085} {port_pcs_bip8errors 54} {port_pcs_bip8errorserr
 12} {port_pcs_bip8errorslastsec 0} {port_pcs_consecerrorrate 1.321}
 {port_pcs_consecerrors 843} {port_pcs_consecerrorserr 29}
 {port_pcs_consecerrorslastsec 0} {port_pcs_lengtherrorrate 0.232}
 {port_pcs_lengtherrors 148} {port_pcs_lengtherrorserr 12}
 {port_pcs_lengtherrorslastsec 0} {port_pcs_markererrorrate 10.063}
 {port_pcs_markererrors 6420} {port_pcs_markererrorserr 50}
 {port_pcs_markererrorslastsec 0} {port_pcs_sherrorrate 24589.521}
 {port_pcs_sherrors 15688113} {port_pcs_sherrorserr 102} {port_pcs_sherrorslastsec
 0} {port_pcs_syncerrorrate 10.011} {port_pcs_syncerrors 6387}
 {port_pcs_syncerrorserr 112} {port_pcs_syncerrorslastsec 0}}}}}
 {port2 {{port {{port_name {10.61.33.240-6-3//6/3}} {port_pcs_bip8errorrate 0.653}
 {port_pcs_bip8errors 295} {port_pcs_bip8errorserr 3} {port_pcs_bip8errorslastsec
 0} {port_pcs_consecerrorrate 0.42} {port_pcs_consecerrors 190}
 {port_pcs_consecerrorserr 3} {port_pcs_consecerrorslastsec 0}
 {port_pcs_lengtherrorrate 0.383} {port_pcs_lengtherrors 173}
40G/100G Functions
19
 {port_pcs_lengtherrorserr 2} {port_pcs_lengtherrorslastsec 0}
 {port_pcs_markererrorrate 0.655} {port_pcs_markererrors 296}
 {port_pcs_markererrorserr 3} {port_pcs_markererrorslastsec 0}
 {port_pcs_sherrorrate 411.449} {port_pcs_sherrors 185975} {port_pcs_sherrorserr
 4} {port_pcs_sherrorslastsec 0} {port_pcs_syncerrorrate 0.221}
 {port_pcs_syncerrors 100} {port_pcs_syncerrorserr 4} {port_pcs_syncerrorslastsec
 0}}}}} {status 1}
 To return PCS lane results:
 Sample Input:

 set results [::sth::forty_hundred_gig_l1_results -type "pcs_lane" -mode port]

 Sample Output:

 {result_count 2} {port1 {{port {{port_name {10.61.33.240-6-1 //6/1}}
 {port_pcs_lane_index {}} {port_pcs_lane_bip8errorrate 0.0757749711314244}
 {port_pcs_lane_bip8errors 54} {port_pcs_lane_bip8errorserr 18}
 {port_pcs_lane_bip8errorslastsec 0} {port_pcs_lane_consecerrorrate
 0.967853040360467} {port_pcs_lane_consecerrors 843}
 {port_pcs_lane_consecerrorserr 199} {port_pcs_lane_consecerrorslastsec 0}
 {port_pcs_lane_lengtherrorrate 0.17910447721973} {port_pcs_lane_lengtherrors 148}
 {port_pcs_lane_lengtherrorserr 29} {port_pcs_lane_lengtherrorslastsec 0}
 {port_pcs_lane_markererrorrate 7.37083810096584} {port_pcs_lane_markererrors
 6420} {port_pcs_lane_markererrorserr 292} {port_pcs_lane_markererrorslastsec 0}
 {port_pcs_lane_sherrorrate 18011.6107527504} {port_pcs_lane_sherrors 15688113}
 {port_pcs_lane_sherrorserr 1375} {port_pcs_lane_sherrorslastsec 0}
 {port_pcs_lane_syncerrorrate 7.33295061540012} {port_pcs_lane_syncerrors 6387}
 {port_pcs_lane_syncerrorserr 2233} {port_pcs_lane_syncerrorslastsec 0}}}}}
 {port2 {{port {{port_name {10.61.33.240-6-3 //6/3}} {port_pcs_lane_index {}}
 {port_pcs_lane_bip8errorrate 0.440876076599943} {port_pcs_lane_bip8errors 295}
 {port_pcs_lane_bip8errorserr 23} {port_pcs_lane_bip8errorslastsec 0}
 {port_pcs_lane_consecerrorrate 0.289051202539035} {port_pcs_lane_consecerrors
 190} {port_pcs_lane_consecerrorserr 22} {port_pcs_lane_consecerrorslastsec 0}
 {port_pcs_lane_lengtherrorrate 0.267153384164866} {port_pcs_lane_lengtherrors
 173} {port_pcs_lane_lengtherrorserr 20} {port_pcs_lane_lengtherrorslastsec 0}
 {port_pcs_lane_markererrorrate 0.442335931158221} {port_pcs_lane_markererrors
 296} {port_pcs_lane_markererrorserr 23} {port_pcs_lane_markererrorslastsec 0}
 {port_pcs_lane_sherrorrate 271.496451475743} {port_pcs_lane_sherrors 185975}
 {port_pcs_lane_sherrorserr 78} {port_pcs_lane_sherrorslastsec 0}
 {port_pcs_lane_syncerrorrate 0.145985455827796} {port_pcs_lane_syncerrors 100}
 {port_pcs_lane_syncerrorserr 78} {port_pcs_lane_syncerrorslastsec 0}}}}} {status 1}

 To return PMA lane results:
 Sample Input:

 set results [::sth::forty_hundred_gig_l1_results -type pma_lane -mode lanes]

 Sample Output:

 {result_count 2} {port1 {{lane {{0 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {1 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {2 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {3 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {4 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {5 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {6 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {7 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {8 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 896} {port_pma_lane_rxprbspattern NONE}}} {9 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
40G/100G Functions
20
 896} {port_pma_lane_rxprbspattern NONE}}}}}}} {port2 {{lane {{0
 {{port_pma_lane_bererrorrate 0.0} {port_pma_lane_bererrors 0}
 {port_pma_lane_bersync 0} {port_pma_lane_berunsync 710}
 {port_pma_lane_rxprbspattern NONE}}} {1 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}} {2 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}} {3 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}} {4 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}} {5 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}} {6 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}} {7 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}} {8 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}} {9 {{port_pma_lane_bererrorrate 0.0}
 {port_pma_lane_bererrors 0} {port_pma_lane_bersync 0} {port_pma_lane_berunsync
 710} {port_pma_lane_rxprbspattern NONE}}}}}}} {status 1}
802.1X Functions
21
802.1X Functions
Functions:
sth::emulation_dot1x_config
sth::emulation_dot1x_control
sth::emulation_dot1x_stats
sth::emulation_dot1x_config
Name:
 sth::emulation_dot1x_config
Purpose:
 Creates, modifies or deletes 802.1x emulation on the specified test port.
 IEEE 802.1x defines a port-based access control and authentication protocol
 that prevents unauthorized clients from connecting to a LAN through
 publicly accessible ports unless they are properly authenticated.
 IEEE 802.1x supports multiple authentication methods based on
 Extensible Authentication Protocol (EAP).
Synopsis:
 sth::emulation_dot1x_config
 -mode -port_handle <port_handle> | -mode {modify | delete} -handle <handle>
 [-auth_retry_count <0-4294967295>]
 [-auth_retry_interval <0-4294967295>]
 [-authenticator_mac <aa:bb:cc:dd:ee:ff>]
 [-certificate <certificate>]
 [-certificate_wildcard {0 | 1}]
 [-eap_auth_method {md5|fast|tls}]
 [-encapsulation {ethernet_ii | ethernet_ii_vlan | ethernet_ii_qinq}]
 [-gateway_ip_addr <a.b.c.d> ]
 [-gateway_ip_addr_step <a.b.c.d>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ip_version {ipv4 | ipv6 | none}]
 [-local_ip_addr <a.b.c.d>]
 [-local_ip_addr_step <a.b.c.d>]
 [-local_ip_prefix_len <0-32>]
 [-local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_prefix_len <0-128>]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-max_authentications <1-4294967295>]
 [-name <ALPHANUM>]
 [-num_sessions <1-32768>]
 [-pac_key_file <pac_key_file>]
 [-pac_key_file_wildcard {0 | 1}]
 [-password <ALPHANUM>]
 [-password_wildcard {0 | 1}]
 [-qinq_incr_mode {inner | outer | both}]
 [-retransmit_count <0-4294967295>]
 [-retransmit_interval <0-4294967295>]
 [-supplicant_auth_rate <1-4294967295>]
 [-supplicant_logoff_rate <1-4294967295>]
 [-use_pae_group_mac {0 | 1}]
 [-username <ALPHANUM>]
 [-username_wildcard {0 | 1}]
 [-vlan_id <0-4095>]
 [-vlan_cfi {0 | 1}]
 [-vlan_ether_type <0x8100|0x88A8|0x9100|0x9200>]
 [-vlan_id_count <1-4096>] 
802.1X Functions
22
 [-vlan_id_step <0-4095>]
 [-vlan_user_priority <0-7>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_cfi <0 | 1>]
 [-vlan_outer_ether_type <0x8100|0x88A8|0x9100|0x9200>]
 [-vlan_outer_id_count <1-4096>]
 [-vlan_outer_id_step <0-4095>
 [-vlan_outer_user_priority <0-7>]
 [-wildcard_pound_start <0-65535>]
 [-wildcard_pound_end<0-65535>]
 [-wildcard_pound_fill <0-9>]
 [-wildcard_question_start <0-65535>]
 [-wildcard_question_end <0-65535>]
 [-wildcard_question_fill <0-9>]
Arguments:
 -mode
 Specifies the action to perform. Possible values are create,
 modify and delete. This argument is mandatory.
 create - Configures 802.1x devices on the port specified with
 the -port_handle argument.
 modify - Changes the configuration for the 802.1x device
 identified by the -handle argument.
 delete - Deletes the 802.1x device identified by the
 -handle argument
 -port_handle
 Specifies the handle of the port on which to create the 802.1x
 supplicants when -mode is set to create. This argument is
 mandatory for the create mode only.
 -handle
 Specifies the handle of the 802.1x supplicants to use when -mode
 is set to modify or delete. This argument is mandatory for modify
 and delete mode. The handle is returned by the
 sth::emulation_dot1x_config function.
 -auth_retry_count
 Specifies the number of retries attempted when authentication
 fails. Possible values range from 0 to 4294967295. The default
 value is 10.
 -auth_retry_interval
 Specifies the number of milliseconds to wait between
 authentication attempts. Possible values range from 0 to
 4294967295. The default value is 1000.
 -authenticator_mac
 Specifies the MAC address of the authenticator switch/router. This
 argument is available when -use_pae_group_mac is 0. The default
 value is 00:10:94:00:00:02.
 -certificate
 Specifies X.509 supplicant certificate(s). You can use wildcard
 characters to generate a unique certificate name for each
 supplicant. Please refer to -certificate_wildcard for more
 information. This argument is available and mandatory when
 -eap_auth_method is set to tls.
 -certificate_wildcard
 Enables or disables wildcard substitution in the -certificate
 argument. Possible values are 0 (disable) and 1 (enable). The
 default value is 0. If the value is set to 1, any wildcards used
 in -certificate are replaced with the corresponding values for
 -wildcard_pound_start, -wildcard_pound_end,
 -wildcard_question_start and -wildcard_question_end. If the value
 is 0, wildcards are not replaced in the specified certificate.
 
802.1X Functions
23
 -eap_auth_method
 Specifies the EAP authentication method. Possible values are tls,
 fast and md5. The default value is md5.

 tls - Transport Layer Security, a cryptographic protocol defined
 in RFC 5216. It encrypts the segments of network
 connections above the Transport Layer, using symmetric
 cryptography for privacy and a keyed message authentication
 code for message reliability.
 fast - Flexible Authentication via Secure Tunneling.
 md5 - Message Digest 5, a widely used cryptographic hash function
 with a 128-bit hash value.
 -encapsulation
 Specifies the type of Layer 2 encapsulation. Possible values are
 ethernet_ii, ethernet_ii_vlan and ethernet_ii_qinq. The default
 value is ethernet_ii.

 ethernet_ii - Ethernet II

 ethernet_ii_vlan - Ethernet II with a single VLAN tag.
 ethernet_ii_qinq - Ethernet II with two VLAN tags.
 -gateway_ip_addr
 Configures the first IPv4 gateway address for the emulated 802.1x
 devices. The value must be in IPv4 format. The default value is
 192.85.1.1. This argument is applicable when -ip_version is set
 to ipv4.

 -gateway_ip_addr_step
 Specifies the incrementing IPv4 address step for 802.1x devices.
 The value must be in IPv4 format. The default value is 0.0.0.0.
 This argument is applicable when -ip_version is set to ipv4.
 -gateway_ipv6_addr
 Configures the first IPv6 gateway address for the emulated 802.1x
 devices. The value must be in IPv6 format. The default value is
 2001::1. This argument is applicable when -ip_version is set to
 ipv6.
 -gateway_ipv6_addr_step
 Defines the increment used to generate IPv6 gateway addresses for
 multiple devices. The value must be in IPv6 format. The default
 value is ::. This argument is applicable when -ip_version is set
 to ipv6.

 -ip_version
 Specifies the IP version of the emulated 802.1x device. Possible
 values are ipv4, ipv6 and none. The default value is ipv4.
 ipv4 - IPv4 address format
 ipv6 - IPv6 address format
 none - the 802.1x device does not have IP encapsulation
 Note: you cannot change -ip_version after you have created 802.1x
 devices
 -local_ip_addr
 Specifies the starting IPv4 address of the emulated 802.1x devices.
 The value must be in IPv4 format. The default value 192.85.1.3.
 This argument is applicable when -ip_version is set to ipv4.

 -local_ip_addr_step
 Specifies the incrementing IPv4 address step for 802.1x devices. The

 value must be in IPv4 format. The default value is 0.0.0.1. This
 argument is applicable when -ip_version is set to ipv4.
802.1X Functions
24
 -local_ip_prefix_len
 Specifies the IPv4 address prefix length. Possible values range from
 0 to 32. The default value is 24. This argument is applicable when
 -ip_version is set to ipv4.
 -local_ipv6_addr
 Specifies the starting IPv6 address of the emulated 802.1x
 devices. The value must be in IPv6 format. The default value is
 2001::2. This argument is applicable when -ip_version is set to
 ipv6.
 -local_ipv6_addr_step
 Defines the increment used to generate IPv6 gateway addresses for
 multiple devices. The value must be in IPv4 format. The default
 value is 0::1. This argument is applicable when -ip_version is set
 to ipv6.
 -local_ipv6_prefix_len
 Specifies the IPv6 address prefix length. Possible values range
 from 0 to 128. The default value is 64. This argument is
 applicable when -ip_version is set to ipv6.
 -mac_addr
 Defines the first MAC address to use when emulating multiple
 802.1x supplicants. Each supplicant must have a unique source MAC
 address. The value must be in MAC format. The default value is
 00:10:94:00:00:01.

 -mac_addr_step
 Specifies the increment to generate additional MAC addresses for
 multiple 802.1x supplicants. The default value is
 00:00:00:00:00:01.
 -max_authentications
 Specifies the number of maximum outstanding supplicant
 authentications that can occur at any given time. This is a
 port-wide argument. Any subsequent use of This argument on a port
 after the initial "-mode create" will overwrite any previous
 setting. Possible values range from 1 to 4294967295. The default
 value is 100.

 -name
 Specifies the name of emulated 802.1x device.
 -num_sessions
 Specifies the number of 802.1x devices to create on the specified
 port. The maximum number of 802.1x supplicants you can create per
 port is 32k. Possible values range from 1 to 32768. The default
 value is 1.
 -pac_key_file
 Specifies the PAC (Portal Access Control) key file(s) required

 for EAP-FAST authentication. PAC provides control over frame
 transmission and reception by clients attached to its Controlled
 Port, and uses the MAC Service provided by a Common Port.
 You can use wildcard characters to generate a unique pac key
 filename for each supplicant. Please refer to
 -pac_key_file_wildcard for more information. This argument is
 available and mandatory when -eap_auth_method is set to fast.

 -pac_key_file_wildcard
 Enables or disables wildcard substitution in the -pac_key_file
 argument. Possible values are 1 (enable) and 0 (disable). The
 default value is 0. If the value is set to 1, any wildcards used
 in pac_key_file are replaced with the corresponding values for
 -wildcard_pound_start, -wildcard_pound_end,
 -wildcard_question_start and -wildcard_question_end. If the value
 is 0, wildcards are not replaced in the specified pac key file. 
802.1X Functions
25
 -password
 Specifies the supplicant password(s). Wildcard characters can be
 used to generate a unique password for each supplicant. Please
 refer to -password_wildcard for more information. The default
 value is sprient.
 -password_wildcard
 Enables or disables wildcard substitution in the -password
 argument. Possible values are 1 (enable) and 0 (disable). The
 default value is 0. If the value is set to 1, any wildcards used
 in -password are replaced with the corresponding values for
 -wildcard_pound_start, -wildcard_pound_end,
 -wildcard_question_start and -wildcard_question_end. If the value
 is 0, wildcards are not replaced in the specified password.
 -qinq_incr_mode
 Specifies the Vlan ID increment mode for ethernet_ii_qinq
 encapsulation. This parameter is available when -encapsulation is
 set to ethernet_ii_qinq. Possible values are inner, outer and
 both. The default value is both. The modes are described below:
 inner - When the number of sessions is greater than the inner VLAN
 count times the outer VLAN count, the inner VLAN ID is

 incremented first until the specified number of inner
 VLANs is exhausted, then the outer VLAN ID is
 incremented. This continues in a round-robin fashion
 until the number of sessions is exhausted.
 outer - When the number of sessions is greater than the inner VLAN
 count times the outer VLAN count, the outer VLAN ID is
 incremented first until the specified number of outer
 VLANs is exhausted, and then the inner VLAN ID is
 incremented. This continues in a round-robin fashion until
 the number of sessions is exhausted.

 both - When the number of sessions is greater than the inner VLAN
 count times the outer VLAN count, the inner VLAN ID and
 outer VLAN ID increment at the same time. This continues
 in a round-robin fashion until the number of sessions is
 exhausted.
 -retransmit_count
 Specifies the number of times to resend an unacknowledged
 message. Possible values range from 0 to 4294967295. The default
 value is 10.

 -retransmit_interval
 Specifies the number of milliseconds to wait between packet
 retransmissions. Possible values range from 0 to 4294967295. The
 default is 1000.
 -supplicant_auth_rate
 Specifies the supplicant authentication rate in seconds.
 This is a port-wide argument. Any subsequent use of this argument

 on a port after the initial "-mode create" will overwrite any
 previous setting. Possible values range from 1 to 4294967295. The
 default is 100.
 -supplicant_logoff_rate
 Specifies the supplicant logoff rate in seconds. This is a
 port-wide argument. Any subsequent use of This argument on a port
 after the initial "-mode create" will overwrite any previous
 setting. Possible values range from 1 to 4294967295. The default
 value is 100.
 -use_pae_group_mac
 Indicates whether to use the PAE (port access entity) multicast
 MAC in transmitted EAPOL (EAP over LAN) packets. PAE is the
802.1X Functions
26
 protocol entity associated with a Port. It can support the
 protocol functionality associated with the Authenticator, the
 Supplicant, or both. Possible values are 0 and 1. The default
 value is 1, in which case the PAE group MAC will be set as the
 authenticator MAC, and -authenticator_mac will be ignored.
 -username
 Specifies 802.1x supplicant user id(s). You can use wildcard
 characters generate a unique password for each supplicant. Refer
 to -username_wildcard for more information. The default value is
 spirent.
 -username_wildcard
 Enables or disables wildcard substitution in the -username
 argument. Possible values are 1 (enable) and 0 (disable). The
 default value is 0. If the value is set to 1, any wildcards used
 in -username are replaced with the corresponding values for
 -wildcard_pound_start, -wildcard_pound_end,
 -wildcard_question_start and -wildcard_question_end. If the value
 is wildcards are not replaced in the specified username.
 -vlan_cfi
 Sets the canonical format indicator (CFI) field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default value is 1.
 -vlan_ether_type
 Specifies the VLAN ether type for the first VLAN sub-interface.
 Possible values are 0x8100, 0x88A8, 0x9100 and 0x9200. The default
 value is 0x8100.
 -vlan_id
 Specifies the starting VLAN ID for the ethernet_ii_vlan
 encapsulation or the ethernet_ii_qinq encapsulation. Possible
 values range from 0 to 4095. The default value is 100. This
 argument is available when -encapsulation is set to
 ethernet_ii_qinq or ethernet_ii_vlan.
 -vlan_id_count
 Specifies the number of VLAN IDs to use when generating 802.1x
 devices. Possible values range from 1 to 4096. The default value
 is 1.
 -vlan_id_step
 Specifies the step size by which the VLAN ID is incremented.
 Possible values range from 0 to 4095. The default value is 1.
 -vlan_user_priority
 Specifies the VLAN user priority assigned to emulated 802.1x
 supplicants. Possible values range from 0 to 7. The default value
 is 0.
 -vlan_outer_cfi
 Specifies the CFI field in outer VLAN tag for the emulated device.
 Possible values are 0 (Ethernet) and 1 (Token Ring). The default
 value is 1.
 -vlan_outer_ether_type
 Specifies the VLAN ether type for the outer VLAN header. Possible
 values are 0x8100, 0x88A8, 0x9100 and 0x9200. The default value
 is 0x8100.
 -vlan_outer_id
 Specifies the starting outer VLAN ID for the QinQ encapsulation.
 Possible values range from 0 to 4095. The default value is 100.
 This argument is available when -encapsulation is set to
 ethernet_ii_qinq.
 -vlan_outer_id_step
 Specifies the step size by which the outer VLAN ID is
 incremented. Possible values range from 0 to 4095. The default
802.1X Functions
27
 value is 1.
 -vlan_outer_user_priority
 Specifies the VLAN priority to assign to the outer VLAN header.
 Possible values range from 0 to 7. The default value is 0.
 -wildcard_pound_start
 Starting value to replace the wildcard pound (#) characters in
 username, password, pac_key_file or certificate_file, such as
 user# or pwd#. Possible values range from 0 to 65535. The default
 value is 1.
 This argument is available when -username_wildcard,
 -password_wildcard, -pac_key_file_wildcard or
 -certificate_file_wildcard is enabled.
 -wildcard_pound_end
 Final numerical value to replace the wildcard pound (#) character
 in username, password, pac_key_file or certificate_file, such as
 user# or pwd#. Possible values range from 0 to 65535. The default
 value is 1.
 This argument is available when -username_wildcard,
 -password_wildcard, -pac_key_file_wildcard or
 -certificate_file_wildcard is enabled.
 -wildcard_pound_fill
 Wildcard fill character for -wildcard_question_start and
 -wildcard_question_end. Possible values range from 0 to 9. The
 default value is 0. If it is set to 0, the numbers are replaced
 without leading zeroes. Otherwise, leading zeroes are added to
 ensure that the number is at least the specified number of digits
 wide.
 This argument is available when -username_wildcard,
 -password_wildcard, -pac_key_file_wildcard or
 -certificate_file_wildcard is enabled.
 -wildcard_question_start
 Starting numerical value to replace the wildcard question mark
 character in username, password, pac_key_file and
 certificate_file. Possible values range from 0 to 65535. The
 default value is 1.

 This argument is available when -username_wildcard,
 -password_wildcard, -pac_key_file_wildcard or
 -certificate_file_wildcard is enabled.
 -wildcard_question_end
 Final numerical value to replace the wildcard question mark
 character in username password pac_key_file or certificate_file,
 such as user? or pwd?. Possible values range from 0 to 65535. The
 default value is 1.
 This argument is available when -username_wildcard,
 -password_wildcard, -pac_key_file_wildcard or
 -certificate_file_wildcard is enabled.
 -wildcard_question_fill
 Wildcard fill character for -wildcard_question_start and
 -wildcard_question_end. Possible values range from 0 to 9. The
 default value is 0. If it is set to 0, the numbers are replaced
 without leading zeroes. Otherwise, leading zeroes are added to
 ensure that the number is at least the specified number of digits
 wide.
 This argument is available when -username_wildcard,
 -password_wildcard, -pac_key_file_wildcard or
 -certificate_file_wildcard is enabled.
Arguments Unsupported by Save as HLTAPI:
802.1X Functions
28
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log An error message if command returns {status 0}.
 port_handle The port handle on which 802.1x devices was configured.
 handle The handle(s) that identify the 802.1x emulation created by the

 sth::emulation_802.1x_config function.
Description:
 The sth::emulation_dot1x_config function creates, modifies or deletes the
 802.1x emulation. Use the -mode argument to specify the action to perform.
 (See the -mode argument description for information about the actions.)

 When you create 802.1x devices, you must use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated 802.1x supplicants will use
 for 802.1x communication. (The port handle value is contained in the keyed list
 returned by the sth::connect function.)

 In addition to specifying the -port_handle, you must also provide one or more of
 the following arguments when you create 802.1x supplicants or use their default
 values:
 -num_sessions (the number of 802.1x supplicants to emulate)
 -encapsulation (Layer 2 encapsulation)
 -ip_version (IP version)
 -eap_auth_method (EAP authentication method)
 -username (if specifying an authentication method)
 -password (if specifying an authentication method)
 -pac_key_file (if -eap_auth_method is set to fast)
 -certificate (if -eap_auth_method is set to tls)

 In the modify mode, you can change the configuration of the created 802.1x
 devices except for these arguments: -encapsulation, and -ip_version. In the
 delete mode, you can remove the created device. If a creation, configuration,
 or deletion fails, Spirent HLTAPI returns an error message. For example, if the
 user tries to modify a non-existing session handle, an error message will be
 returned.

Examples:
 #### HLTAPI for Tcl ####
 The following example creates 1000 802.1x devices:
 sth::emulation_dot1x_config -mode "create" \
 -port_handle port1 \
 -num_sessions 1000 \
 -name Dot1x_1 \
 -encapsulation ethernet_ii \
 -ip_version ipv4 \
 -mac_addr 00:33:00:00:00:01 \
 -local_ip_addr 10.0.0.22 \
 -gateway_ip_addr 10.0.0.1 \
 -supplicant_auth_rate 100 \
 -supplicant_logoff_rate 300 \
 -max_authentications 600 \
 -retransmit_count 300 \
 -eap_auth_method md5 \
 -username spirent \
 -password spirent \
 Output:
 {port_handle port1} {handle host3}{status 1}
The following example modifies the created 802.1x device:
 sth::emulation_dot1x_config -mode modify \
 -handle host3 \
 -supplicant_auth_rate 200 \
 Output: 
802.1X Functions
29
 {handle host3} {status 1}
 The following example deletes the created 802.1x device:
 sth::emulation_dot1x_config -mode delete \
 -handle host3 \
 Output: {status 1}
 #### HLTAPI for Python ####
 The following example creates 5 802.1x devices:
 device_ret0 = sth.emulation_dot1x_config (
 mode = 'create',
 ip_version = 'ipv4',
 username_wildcard = '1',
 password_wildcard = '1',
 wildcard_pound_start= '1',
 wildcard_pound_end = '3',
 wildcard_question_start= '1',
 wildcard_question_end= '4',
 username = 'spirent#',
 password = 'spirent?',
 encapsulation = 'ethernet_ii',
 port_handle = port_handle[0],
 supplicant_logoff_rate= '100',
 max_authentications = '100',
 supplicant_auth_rate= '100',
 auth_retry_count = '10',
 use_pae_group_mac = '1',
 retransmit_interval = '1000',
 authenticator_mac = '00:10:94:00:00:02',
 eap_auth_method = 'md5',
 retransmit_count = '10',
 auth_retry_interval = '1000',
 num_sessions = '5',
 name = 'Device_1',
 mac_addr = '00:10:94:00:00:01',
 mac_addr_step = '00:00:00:00:00:01',
 local_ip_prefix_len = '24',
 gateway_ip_addr = '12.85.1.1',
 local_ip_addr_step = '0.0.0.1',
 gateway_ip_addr_step= '0.0.0.0',
 local_ip_addr = '12.85.1.3');

 Output:
 {'status': '1', 'handle': 'host3', 'port_handle': 'port1'}
 #### HLTAPI for Perl ####
 The following example creates 5 802.1x devices:
 my %device_ret0 = sth::emulation_dot1x_config (
 mode => 'create',
 ip_version => 'ipv4',
 username_wildcard => '1',
 password_wildcard => '1',
 wildcard_pound_start=> '1',
 wildcard_pound_end => '3',
 wildcard_question_start=> '1',
 wildcard_question_end=> '4',
 username => 'spirent#',
 password => 'spirent?',
 encapsulation => 'ethernet_ii',
 port_handle => "$hport[1]",
 supplicant_logoff_rate=> '100',
 max_authentications => '100',
 supplicant_auth_rate=> '100',
 auth_retry_count => '10',
 use_pae_group_mac => '1',
 retransmit_interval => '1000',
 authenticator_mac => '00:10:94:00:00:02',
 eap_auth_method => 'md5',
 retransmit_count => '10',
 auth_retry_interval => '1000',
 num_sessions => '5',
802.1X Functions
30
 name => 'Device_1',
 mac_addr => '00:10:94:00:00:01',
 mac_addr_step => '00:00:00:00:00:01',
 local_ip_prefix_len => '24',
 gateway_ip_addr => '12.85.1.1',
 local_ip_addr_step => '0.0.0.1',
 gateway_ip_addr_step=> '0.0.0.0',
 local_ip_addr => '12.85.1.3');
 Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'handle';
 $VAR4 = 'host3';
 $VAR5 = 'port_handle';
 $VAR6 = 'port1';
Sample Input: See Examples.
Sample Output: See Examples.
Notes:
 You can generate outgoing usernames, passwords, pac key file names or certificate
 file names based on wildcard replacements. The following example generates 50
 usernames, passwords and certificate files:

 sth::emulation_dot1x_config -mode "create" \
 -port_handle port1 \
 -encapsulation ethernet_ii \
 -ip_version ipv4 \
 -mac_addr 00:66:00:00:00:01 \
 -local_ip_addr 20.0.0.22 \
 -gateway_ip_addr 20.0.0.1 \
 -eap_auth_method tls \
 -username User# \
 -password acstest# \
 -certificate "test1#.pem" \
 -password_wildcard 1 \
 -username_wildcard 1 \
 -certificate_wildcard 1 \
 -wildcard_pound_start 1 \
 -wildcard_pound_end 50 \

 The # character represents a counter. For example, define a counter to start at
 1 (-wildcard_pound_start 1), run to 50 (-wildcard_pound_end), and increment by
 1. Then, in the -username argument, specify User#, which would be replaced with
 User1, User2, and so on. When authentication begins, The wildcard is replaced
 with a counter, starting at 1. For example, User becomes User1, User2, and so
 on. If you do not specify, then no substitution will take place.
End of Procedure Header
Procedure Header
sth::emulation_dot1x_control
Name:
 sth::emulation_dot1x_control
Purpose:
 Download or delete all certificates.
 Starts, stops and aborts the emulated 802.1x device.
Synopsis:
 sth::emulation_dot1x_control
 [-action {download|delete_all}]
 [-certificate_dir]
 [-handle <device handle>]
802.1X Functions
31
 [-mode {start|stop|logout|abort}]
 [-port_handle <port handle>] |
Arguments:
 -mode
 Specifies the action to perform. Possible values are start, stop,
 logout and abort.

 start - Start 802.1x supplicant authentication.
 stop - Stop 802.1x supplicant authentication.
 logout - Log out of the 802.1x supplicant sessions.
 abort - Aborts all 802.1x sessions and resets the 802.1x
 emulation engine on the specified device.
 -port_handle
 Specifies the port on which to the actions will be performed.
 You must specify either -handle or -port_handle, but not both.
 -handle
 Specifies the handle of the 802.1x device on which to perform
 the action. You must specify either -handle or -port_handle, but
 not both.
 -action
 Determines to download certificates to a specified port or
 delete all certificates from a specified port. You must
 specify -port_handle argument when using this argument.
 Note: you must download corresponding certificates to the
 specific port before you configure 802.1x supplicants
 with fast or tls authentication method on the port by
 using sth::emulation_dot1x_config. You can refer to
 Examples for more details.

 -certificate_dir
 Specifies the directory containing certificate(s) or
 PAC key file(s) to download. If the directory contains
 zip files, then these file will be downloaded to the ports and
 unzipped. The zip extensions currently supported are .zip,
 .tar and .tar.gz. This argument is available and mandatory
 when -action is download.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log returned debug info for when status is $FAILURE.
Description:
 The sth::emulation_dot1x_control function provides the function to download
 certificates to a specified port or delete all certificates from a specified port.
 When you want to configure 802.1x suppliants with fast or tls authentication
 method on a test port, you must download the associated certificates to the
 specified port. (See the -action argument description for information)
 After you create 802.1x devices, you can use sth::emulation_dot1x_control to
 perform the following actions: connecting, disconnecting, logging out or
 aborting 802.1x sessions. When you call this function, you specify either a
 port handle (-port_handle) or device handle (-handle) to apply the specified
 actions.

Examples:
 #### HLTAPI for Tcl ####
 The following example deletes all certificates/PAC files:
 sth::emulation_dot1x_control \
 -action "delete_all" \
802.1X Functions
32
 -port_handle port1\
 Sample Output: {status 1}
 The following example downloads certificates/PAC files:
 sth::emulation_dot1x_control \
 -action "download" \
 -certificate_dir "//10.61.37.32/ENGPhxPV /pac" \
 -port_handle port1\
 Sample Output: {status 1}
 The following example starts an authentication:
 sth::emulation_dot1x_control \
 -mode start \
 -port_handle port1\
 Output: {status 1}
 The following example logs out of an authentication:
 -mode logout \
 -port_handle port1\
 Sample Output: {status 1}.
 #### HLTAPI for Python ####
 The following example starts an authentication:
 ctrl_ret1 = sth.emulation_dot1x_control (
 handle = device_list,
 mode = 'start');

 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 The following example starts an authentication:
 my %ctrl_ret2 = sth::emulation_dot1x_control (
 handle => "$device_list",
 mode => 'start');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes: None
End of Procedure Header
Procedure Header
sth::emulation_dot1x_stats
Name:
 sth::emulation_dot1x_stats
Purpose:
 Retrieves statistics for the 802.1x devices configured on the specified test
 port.
Synopsis:
 sth::emulation_dot1x_stats
 -mode aggregate -port_handle <port_handle> |
 -mode sessions -handle <802.1x_device_handle>

Arguments:
 -mode
 Specifies statistics retrieval mode as either aggregate for all
 configured sessions or on a per session basis. This argument
 is mandatory.
802.1X Functions
33
 aggregate - retrieves statistics aggregated per port.
 sessions - retrieves statistics per device.
 -port_handle
 Specifies the port to retrieve statistics from. You must specify
 either -handle or -port_handle, but not both.
 -handle
 Specifies the handle of the 802.1x device to retrieve
 statistics from. You must specify either -handle or -port_handle,
 but not both.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log Error message if command returns {status 0}
****Aggregate Statistics****
 The following keys are returned when you specify -mode aggregate:
 Example: <port_handle>.statistics
 attempt_auth_count
 Total number of sessions initiated, including any retries.
 success_auth_count
 Total number of sessions successfully established.
 failed_auth_count
 Total number of sessions failed, including retries.
 aborted_auth_count
 Total number of sessions aborted.
 attempt_re_auth_count
 Number of reauthentication attempts.
 success_re_auth_count
 Number of successful reauthentication attempts.
 failed_re_auth_count
 Number of unsuccessful reauthentication attempts.
 logoff_attempts
 Number of logoff attempts.
 failed_logoff_attempts
 Number of unsuccessful logoff attempts.
 success_logoff_attempts
 Number of successful logoff attempts.
 tx_start_pkts
 Number of EAPOL-Start packets transmitted.
 tx_logoff_pkts
 Number of EAPOL-Logoff packets transmitted.
 tx_key_pkts
 Number of EAPOL-Key packets transmitted.
 tx_eap_pkts
 Number of EAP packets transmitted.
 rx_eap_pkts
 Number of EAP packets received. 
802.1X Functions
34
 rx_invalid_pkts
 Number of invalid EAPOL packets received.
 tx_eap_req_pkts
 Number of EAP-Request packets transmitted.
 rx_eap_req_pkts
 Number of EAP-Request packets received.
 tx_eap_resp_pkts
 Number of EAP-Response packets transmitted.
 rx_eap_resp_pkts
 Number of EAP-Response packets received.
 rx_eap_success_pkts
 Number of EAP-Success packets received.
 rx_eap_failure_pkts
 Number of EAP-Failure packets received.
 tx_eap_resp_id_pkts
 Number of EAP-Response Identity packets transmitted.
 rx_eap_req_id_pkts
 Number of EAP-Request Identity packets received.
 tx_eap_resp_notif_pkts
 Number of EAP-Response Notification packets transmitted.
 rx_eap_resp_notif_pkts
 Number of EAP-Response Notification packets received.
 tx_eap_resp_legacy_nak_pkts
 Number of EAP-Response Legacy NAK packets transmitted.
 tx_eap_resp_expanded_nak_pkts
 Number of EAP-Response Expanded Types packets transmitted.
 tx_eap_resp_expanded_types_pkts
 Number of EAP-Response Expanded Types packets transmitted.
 rx_eap_resp_expanded_types_pkts
 Number of EAP-Response Expanded Types packets received.
 tx_eap_resp_md5_chal_pkts
 Number of EAP-Response MD5 Challenge packets transmitted.
 rx_eap_resp_md5_chal_pkts
 Number of EAP-Response MD5 Challenge packets received.
****Session Statistics****
 The following keys are returned when you specify -mode sessions:
 Statistics list info will be returned per session basis.
 Example: session.<handle>.statistics
 authentication_state
 State of authentication. These are the possible states:
 unauthorized - Supplicant is not authorized.
 authenticating - Supplicant is being authenticated.
 reauthenticating - Supplicant is being reauthenticated.
 authenticated - Supplicant was authenticated.
 authentication failed - Supplicant was not authenticated.
 logging off - Supplicant is logging off.
 attempt_auth_count
 Total number of sessions initiated, including any retries.
 success_auth_count
 Total number of sessions successfully established.
802.1X Functions
35
 failed_auth_count
 Total number of sessions failed, including retries.
 aborted_auth_count
 Total number of sessions aborted.
 attempt_re_auth_count
 Number of reauthentication attempts.
 success_re_auth_count
 Number of successful reauthentication attempts.
 failed_re_auth_count
 Number of unsuccessful reauthentication attempts.
 logoff_attempts
 Number of logoff attempts.
 failed_logoff_attempts
 Number of unsuccessful logoff attempts.
 success_logoff_attempts
 Number of successful logoff attempts.
 avg_auth_success_duration
 Average duration of a successful authentication attempt in milliseconds.
 max_auth_success_duration
 Maximum duration of a successful authentication attempt in milliseconds.
 min_auth_success_duration
 Minimum duration of a successful authentication attempt in milliseconds.
 tx_start_pkts
 Number of EAPOL-Start packets transmitted
 tx_logoff_pkts
 Number of EAPOL-Logoff packets transmitted
 tx_key_pkts
 Number of EAPOL-Key packets transmitted.
 tx_eap_pkts
 Number of EAP packets transmitted.
 rx_eap_pkts
 Number of EAP packets received.
 rx_invalid_pkts
 Number of invalid EAPOL packets received.
 avg_start_pkt_latency
 Average latency for EAPOL-Start packets in milliseconds
 min_start_pkt_latency
 Minimum latency for EAPOL-Start packets in milliseconds
 max_start_pkt_latency
 Maximum latency for EAPOL-Start packets in milliseconds

 avg_logoff_pkt_latency
 Average latency for EAPOL-Logoff packets in milliseconds.
 min_logoff_pkt_latency
 Minimum latency for EAPOL-Logoff packets in milliseconds.
 max_logoff_pkt_latency
 Maximum latency for EAPOL-Logoff packets in milliseconds.
 avg_key_pkt_latency
 Average latency for EAPOL-Key packets in milliseconds.
802.1X Functions
36
 min_key_pkt_latency
 Minimum latency for EAPOL-Key packets in milliseconds.
 max_key_pkt_latency
 Maximum latency for EAPOL-Key packets in milliseconds.
 avg_eap_pkt_latency
 Average latency for EAP packets in milliseconds.
 min_eap_pkt_latency
 Minimum latency for EAP packets in milliseconds.
 max_eap_pkt_latency
 Maximum latency for EAP packets in milliseconds.
 tx_eap_req_pkts
 Number of EAP-Request packets transmitted.
 rx_eap_req_pkts
 Number of EAP-Request packets received.
 tx_eap_resp_pkts
 Number of EAP-Response packets transmitted.
 rx_eap_resp_pkts
 Number of EAP-Response packets received.
 rx_eap_success_pkts
 Number of EAP-Success packets received.
 rx_eap_failure_pkts
 Number of EAP-Failure packets received.
 tx_eap_resp_id_pkts
 Number of EAP-Response Identity packets transmitted.
 rx_eap_req_id_pkts
 Number of EAP-Request Identity packets received.
 tx_eap_resp_notif_pkts
 Number of EAP-Response Notification packets transmitted.
 rx_eap_resp_notif_pkts
 Number of EAP-Response Notification packets received.
 tx_eap_resp_legacy_nak_pkts
 Number of EAP-Response Legacy NAK packets transmitted.
 tx_eap_resp_expanded_nak_pkts
 Number of EAP-Response Expanded NAK packets transmitted.
 tx_eap_resp_expanded_types_pkts
 Number of EAP-Response Expanded Types packets transmitted.
 rx_eap_resp_expanded_types_pkts
 Number of EAP-Response Expanded Types packets received.
 tx_eap_resp_md5_chal_pkts
 Number of EAP-Response MD5 Challenge packets transmitted.
 rx_eap_resp_md5_chal_pkts
 Number of EAP-Response MD5 Challenge packets received.
Description:
 The sth::emulation_dot1x_stats function retrieves a list of aggregate
 statistics for the 802.1x session configured on a specified port, or
 session statistics for a specified 802.1x device.
Examples:
 #### HLTAPI for Tcl ####
802.1X Functions
37
 The following example retrieves aggregate results:
 sth::emulation_dot1x_stats \
 -mode aggregate \
 -port_handle port1\
 Output:
 {aggregate {{port1 {{rx_eap_success_pkts 0} {aborted_auth_count 4}
 {rx_eap_req_pkts 0}{rx_eap_failure_pkts 0} {rx_eap_resp_pkts 0}
 {success_auth_count 0} {tx_start_pkts 54}{logoff_attempts 0}
 {tx_eap_resp_expanded_types_pkts 0} {attempt_auth_count 6}
 {tx_eap_resp_legacy_nak_pkts 0} {rx_eap_resp_md5_chal_pkts 0}
 {success_logoff_attempts 0}{tx_eap_resp_md5_chal_pkts 0} {rx_invalid_pkts 0}
 {tx_eap_pkts 0} {rx_eap_req_id_pkts 0}{tx_key_pkts 0}
 {success_re_auth_count 0} {rx_eap_resp_notif_pkts 0} {tx_eap_req_pkts 0}
 {failed_logoff_attempts 0} {rx_eap_resp_expanded_types_pkts 0}
 {tx_eap_resp_id_pkts 0} {tx_logoff_pkts 0}{tx_eap_resp_expanded_nak_pkts 0}

 {rx_eap_pkts 0} {tx_eap_resp_notif_pkts 0} {tx_eap_resp_pkts 0}

 {failed_re_auth_count 0} {attempt_re_auth_count 0} {failed_auth_count0}}}}}
 {status 1}
 The following example retrieves session results:
 sth::emulation_dot1x_stats \
 -mode session \
 -port_handle port1
 Output:
 {session {{host3 {{authentication_state authenticated}
 {max_start_pkt_latency 0} {rx_eap_success_pkts 0} {aborted_auth_count 4}
 {avg_key_pkt_latency 0} {rx_eap_req_pkts 0} {rx_eap_failure_pkts 0}
 {rx_eap_resp_pkts 0} {success_auth_count 0} {tx_start_pkts 54}
 {min_logoff_pkt_latency 0} {logoff_attempts 0}
 {tx_eap_resp_expanded_types_pkts 0} {attempt_auth_count 5}
 {avg_eap_pkt_latency 0} {tx_eap_resp_legacy_nak_pkts 0}
 {min_auth_success_duration 0} {avg_auth_success_duration 0}
 {rx_eap_resp_md5_chal_pkts 0} {success_logoff_attempts 0}
 {tx_eap_resp_md5_chal_pkts 0} {rx_invalid_pkts 0} {tx_eap_pkts 0}
 {rx_eap_req_id_pkts 0} {min_start_pkt_latency 0} {avg_logoff_pkt_latency 0}
 {avg_start_pkt_latency 0} {min_key_pkt_latency 0} {max_key_pkt_latency 0}
 {tx_key_pkts 0} {success_re_auth_count 0} {rx_eap_resp_notif_pkts 0}
 {tx_eap_req_pkts 0} {failed_logoff_attempts 0}
 {rx_eap_resp_expanded_types_pkts 0} {min_eap_pkt_latency 0}
 {tx_eap_resp_id_pkts 0} {max_eap_pkt_latency 0} {tx_logoff_pkts 0}

 {max_auth_success_duration 0} {tx_eap_resp_expanded_nak_pkts 0}
 {rx_eap_pkts 0} {tx_eap_resp_notif_pkts 0} {tx_eap_resp_pkts 0}
 {failed_re_auth_count 0} {attempt_re_auth_count 0} {failed_auth_count 0}

 {max_logoff_pkt_latency 0}}}} {status 1}
 #### HLTAPI for Python ####
 The following example retrieves aggregate results:
 results_ret1 = sth.emulation_dot1x_stats (
 handle = device,
 mode = 'aggregate');
 #### HLTAPI for Perl ####
 The following example retrieves aggregate results:
 my %results_ret2 = sth::emulation_dot1x_stats (
 handle => "$device",
 mode => 'aggregate');
Notes: None
End of Procedure Header
Alarm Functions
38
Alarm Functions
Functions:
sth::alarms_control
sth::alarms_stats
sth::alarms_control
Name:
 sth::alarms_control
Purpose:
 The sth::alarms_control command emulates the specified momentary
 or continuous alarms on Synchronous Optical Network (SONET)
 or Synchronous Digital Hierarchy (SDH) links.
 SONET alarms fall into three different types --- section, line, and path.
 Section, line and path errors occur over different spans of the SONET
 network which is comprised of section-terminating equipment (STE),
 line-terminating equipment (LTE) and path-terminating equipment (PTE).
 Typically, a SONET device sends alarms both upstream and downstream
 in order to notify other devices of the problem condition.
Synopsis:
 sth::alarms_control
 -port_handle <port_handle>
 -alarm_type {line_ais | line_bip24 | line_bip96 | line_bip384
 |line_rdi|line_rei | path_ais | path_bip8 | path_rdi | path_rei |
 sec_bip8 | unequip }
 [-count <integer>]
 [-interval <integer>]
 [-mode {momentary|continuous}]
 [-reset {1|0}]
 [-state {1|0}]
Arguments:
 -port_handle
 Specifies the port on which to trigger the alarms.
 This argument is mandatory.
 -alarm_type
 Specifies the type of the alarm to be performed. This
 argument is mandatory. The types are described below:
 line_ais - Triggers Alarm Indication
 Signal-Line (AIS-L) by inserting 111 in bits 6,7,
 and 8 of K2 byte for five consecutive frames.
 line_bip24 - Inverts B2 bytes to insert BIP errors.
 This argument is applicable for OC-3 interfaces
 only.
 line_bip96 - Inverts B2 bytes to insert BIP
 errors.
 This argument is applicable for OC-12
 interfaces only.
 line_bip384 - Inverts B2 bytes to insert BIP errors.
 This argument is applicable for OC-48 interfaces
 only.
 line_rdi - Enables Remote Defect
 Indication-line (RDI-L) alarmsI by inserting 
Alarm Functions
39
 110 in bits 6,7, and 8 of K2 byte for five
 consecutive frames.
 line_rei - Indicates the alarm type is Remote Error
 Indication-line (REI-L). REI-L is sent to the
 upstream LTE when errors are detected in the
 B2 byte.
 path_ais - Enables Alarm Indication
 Signal path (AIS-P) by setting all bits except
 section overhead to one before scrambling
 to start AIS-P.
 path_bip8 - Inverts the B3 byte to insert BIP
 errors.
 path_rdi - Enables Path Remote Defect
 Indication (PRDI) alarm by sets the yellow
 alarm (bit 5) in the G1 byte
 path_rei - Indicates the alarm is a Remote Error
 Indication-path (REI-P). REI-P is sent to the
 upstream PTE when errors are detected in the
 B3 byte.
 sec_bip8 - Inverts the B1 byte to insert BIP errors.
 unequip - Specifies the alarm type is an unequipped
 payload (UNEQ-P) alarm. UNEQ-P indicates a
 possible provisioning problem and occurs when
 the router detects a value of 0x00 in the C2 byte.
 pause_frame - Sends a pause frame.

 Note: Spirent HLTAPI does not support pause_frame.
 -count
 Specifies the number of momentary alarm conditions
 to trigger. The default value is 5. This argument is only
 applicable for momentary alarms.
 -interval
 Specifies the interval, measured in seconds, between
 triggers of momentary alarms. This argument is only
 applicable for momentary alarms. The default value is
 30s.
 -mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the alarm type specified by the
 -alarm_type argument should be triggered
 continuously or on a momentary basis. Possible values
 are momentary and continuous. The default value is
 momentary.
 -reset
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether to reset indications from all Sonnet alarms
 or not. Possible values are 0 and 1. When it is set to 1,
 Spirent HLTAPI will reset all the existing alarm indications.
 The default value is 0.

 -state
 Turns on or off the specified momentary or continuous
 alarm. Possible values are 0 (off) and 1 (on).
 The default value is 0.
 When the -mode is set to continuous, the -state
 argument will turn on or off the specified continuous
 alarm. 
Alarm Functions
40
Arguments Unsupported by Save as HLTAPI:

 The sth::alarms_control function is not supported by Save as HLTAPI. To test with
 this function, you must configure it manually in the script generated using Save
 as HLTAPI.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI:

 None.
Return Values:
 The sth::alarms_control function returns a keyed list
 using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::alarms_control function emulates different kinds of SONET or SDH alarms
 momentarily or continuously on a specified port. Use the -alarm_type argument to
 specify the alarm to emulate. (See the -alarm_type argument description for
 information about the alarm types.)
 When you specify the -port_handle argument, the alarm type specified by the
 -alarm_type argument will be triggered momentarily on the specified port. You can
 specify the -mode argument to trigger continuous alarms. You can use the -state
 option to turn on or turn off the specified momentary or continuous alarm.
 If the control of SONET alarm fails, Spirent HLTAPI returns an error message.
Examples:

 The following example turns on the momentary line_ais alarm on port1.
 sth::alarms_control -port_handle port1\
 -alarm_type line_ais \
 -state 1

 The example below turns on the momentary line_bip24 alarm on OC3
 interface twice with an interval of 1 second.
 sth::alarms_control -port_handle port1\
 -alarm_type line_bip24 \
 -count 2 \
 -interval 1 \
 -state 1
 The following example turns on the continuous line_ais alarm on port1.
 sth::alarms_control -port_handle port1\
 -alarm_type line_bip24 \
 -mode continuous \
 -state 1
 The following example turns off line_ais alarm on port1.
 sth::alarms_control -port_handle port1\
 -alarm_type line_ais \
 -state 0
 The following example resets all the existing alarm indications.
 sth::alarms_control -port_handle port1 \
 -reset 1 \
 Sample output for examples shown above:
 {status 1}
Alarm Functions
41
Sample Input: See Examples.
Sample Output: See Examples.
Notes: None
End of Procedure Header
sth::alarms_stats
Name:
 sth::alarms_stats
Purpose:
 Returns alarms information for the specified test port.
Synopsis:
 -port_handle <port_handle>

Arguments:
 -port_handle
 Specifies the port from which to get the statistics.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI:
 -a_header
Return Values:
 The sth::alarms_stats function returns a keyed list
 using the following keys (with corresponding data):
 port_handle Specifies the port from which to get statistics.
 status Success (1) or failure (0) of the operation.
 The following statistics are Spirent Extension statistics.
 hdlc_abort_count Returns the number of aborted Packet over
 SONET/SDH (POS) packets.
 hdlc_drop_count Returns the number of the dropped POS packets.
 b1_error_count Returns the number of the B1 BIP-8 errors that
 have been detected
 b2_error_count Returns the number of theB2 BIP-8 errors that
 have been detected
 reil_count Returns the Remote Error Indication number,
 which is the number of the B2 errors received
 the remote end.
 b3_error_count Returns the number of the B3 BIP-8 errors that
 have been detected.
 reip_count Returns a REI error number, which is the number
 of the B3 BIP-8 detected at the remote end
 device.
 hdlc_abort_rate Returns the rate in error(s) of the aborted POS
 packets.
 hdlc_drop_rate Returns the rate in error(s) of the dropped POS
 packets.
 b1_error_rate Returns the ratio of B1 BIP-8 errors to the
 number of bits in the SONET frame received
 during the elapsed test time.
 b2_error_rate Returns the ratio of B2 BIP-8 errors to the
 number of bits in the SONET frame received
 during the elapsed test time.
 reil_rate Returns the ratio of REI errors to the number of
 bits in the SONET frame (except for section
Alarm Functions
42
 overhead) received during the elapsed test time.
 b3_error_rate Returns the number of the B3 BIP-8 errors that
 have been detected.
 reip_rate Returns a REI error number, which is the number
 of the B3 BIP-8 detected at the far end device.
 active_alarms Indicates the defects that local interface can
 report. The alarms might be one or several of the
 options below:
 J0unst - J0 unstable alarm
 Lof - section LOF alarm
 Los - section LOS alarm
 Oof - Out of Frame (OOF) alarm
 Aisl - line AIS alarm
 Rdil - line RDI alarm
 Kchg - K1/K2 changed alarm
 Kunst - K1/K2 unstable alarm
 Aisp - path AIS alarm
 Lopp - path LOP alarm
 J1unst - J1 unstable alarm
 Plmp - path PLM alarm
 Rdip - path RDI alarm
 Timp - path TIM alarm
 Uneqp - path Unequipped alarm
 -- - The "--" indicates no defects were detected.
 The OC-xxx interfaces statistics and IPoATM alarm statistics defined in
 Cisco specification are not supported. The sth::alarms_stats command
 will return Spirent Extension return values.
 ****** OC-xxx interfaces statistics (Not supported) *****
 section_unequip_secs Section Unequipped seconds
 section_unequip_free Section Unequip non-errored %
 section_los_secs Section LOS seconds
 section_los_free Section LOS non-errored %
 section_oof_secs Section Out of Frame (OOF) seconds
 section_oof_free Section OOF non-errored %
 section_lof_secs Section LOF seconds
 section_lof_free Section LOF non-errored %
 section_j0_oof_secs Section J0 OOF seconds
 section_j0_oof_free Section J0 OOF non-errored %
 section_noclock_secs Section No Clock seconds
 section_noclock_free Section No Clock non-errored %
 line_ais_secs Line AIS seconds
 line_ais_free Line AIS non-errored %
 line_rdi_secs Line RDI seconds
 line_rdi_free Line RDI non-errored %
 line_signal_degrade_secs Line Signal Degrade seconds
 line_signal_degrade_free Line Signal Degrade non-errored %
 line_signal_fail_secs Line Signal Fail seconds
 line_signal_fail_free Line Signal Fail non-errored %
 line_k1_unstable_secs Line K1 Unstable seconds
 line_k1_unstable_free Line K1 Unstable non-errored %
 line_k1_change_secs Line K1 Change seconds
 line_k1_change_free Line K1 Change non-errored %
 line_k2_change_secs Line K2 Change seconds
 line_k2_change_free Line K2 Change non-errored %
 line_s1_sync_secs Line S1 Synchronous seconds
 line_s1_sync_free Line S1 Synchronous non-errored %
 line_s1_fail_secs Line S1 Fail seconds
 line_s1_fail_free Line S1 Fail non-errored %
 path_ais_secs Path AIS seconds
 path_ais_free Path AIS non-errored %
 path_lop_secs Path LOP seconds
 path_lop_free Path LOP non-errored %
 path_rdi_secs Path RDI seconds
 path_rdi_free Path RDI non-errored %
 path_label_change_secs Path Label change seconds
 path_label_change_free Path Label change non-errored %
Alarm Functions
43
 ***** IPoATM alarms (Not supported) *****

 oocd_secs Out-of-Cell delineation seconds
 oocd_free Out-of-Cell delineation non-errored %
 locd_secs Loss-of-Cell delineation seconds
 locd_free Loss-of-Cell delineation non-errored %
Description:
 The sth::alarms_stats function provides information about the SONET
 alarms.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
Sample Input:
Sample Output
Notes:
 The OC-xxx interfaces statistics and IPoATM alarm statistics defined in
 Cisco's specifications are not supported. The sth::alarms_stats command
 will return Spirent Extension return values.
 The following return values are not supported by Spirent HLTAPI:
 errored_secs
 elapsed_time
End of Procedure Header
ANCP Functions
44
ANCP Functions
Functions:
sth::emulation_ancp_config
sth::emulation_ancp_subscriber_lines_config
sth::emulation_ancp_control
sth::emulation_ancp_stats
sth::emulation_ancp_config
Name:
 sth::emulation_ancp_config
Purpose:
 Creates, modifies, or deletes emulated Access Node Control Protocol
 (ANCP. Also known as L2CP or L2C) client devices on a Spirent
 HLTAPI chassis. When a device is created or modified, the user can
 specify configuration option. ANCP facilitates the tasks of subscriber port
 discovery and configuration. It operates between a service oriented network
 access server (e.g., Broadband Network Gateway, Broadband Remote
 Access Server) and an access node (e.g., Digital Subscriber Line Access
 Multiplexer) in order to convey subscriber line information and policies.
Synopsis:
 sth::emulation_ancp_config
 -mode create -port_handle <port_handle> | -mode modify -handle <handle> |
 -mode delete {-handle <handle> | -port_handle <port_handle>}
 [-ancp_standard {ietf-ancp-protocol2 | gsmp-l2control-config2}]
 [-bulk_transaction {0|1}]
 [-device_count <integer> ]
 [-encap_type {ETHERNETII | VC_MUX | LLC_SNAP |
 ATM_LLC_SNAP_ETHERNETII | ATM_VC_MUX_ETHERNETII}]
 [-gateway_ip_addr <a.b.c.d>]
 [-gateway_ip_repeat <integer>]
 [-gateway_ip_step <a.b.c.d>]
 [-gateway_ip_prefix_len <1-32>]
 [-gateway_ip_prefix <integer>]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_repeat <integer>]
 [-intf_ip_step <a.b.c.d>]
 [-intf_ip_prefix_len <1-32>]
 [-intf_ip_prefix <integer>]
 [-keep_alive <1-25>]
 [-local_mac_addr <aa:bb:cc:dd:ee:ff>]
 [-local_mac_step <aa:bb:cc:dd:ee:ff>]
 [-local_mac_repeat <integer>]
 [-sut_ip_addr <a.b.c.d>]
 [-sut_ip_repeat <integer>]
 [-sut_ip_step <a.b.c.d>]
 [-sut_ip_prefix_len <integer>]
 [-sut_ip_prefix <integer>]
 [-tcp_port <integer>]
 [-topology_discovery {0|1}]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vci_repeat <0-65535>]
 [-vlan_id <0-4095>]
 [-vlan_id_count <integer>]
 [-vlan_id_repeat <integer>]
 [-vlan_id_step<integer>]
 [-vlan_id_inner <0-4095>]
 [-vlan_id_count_inner <integer>]
 [-vlan_id_repeat_inner <integer>]
 [-vlan_id_step_inner <integer>]
ANCP Functions
45
 [-vpi <0-255>]
 [-vpi_step <0-255>]
 [-vpi_repeat <0-255>]
Arguments:
 -mode
 Specifies the action to perform on the test port. This is a
 mandatory argument. Possible values are create, modify, and
 delete. Every mode except create requires a valid
 ANCP device handle. You can delete multiple devices once, but you
 can only modify one device once. The modes are described below:
 create - Creates one or more ANCP devices on the port specified
 with the -port_handle argument. You must specified the
 -port_handle argument.
 modify - Changes the configuration for the ANCP device identified
 by the -handle argument. You must specify the -handle argument.
 delete - Deletes all of the ANCP devices specified in the
 -port_handle argument, or delete the device specified by
 -handle. You must specify either of the two. If both are
 configured, Spirent HLTAPI uses -port_handle for this mode.

 Note: The enable, disable, enable_all, and disable_all modes
 are not supported.
 -port_handle
 Specifies the port on which to create the ANCP device when mode
 is set to "create". This argument is mandatory only for create
 mode.
 -handle
 Identifies the device to be modified or deleted. This argument is
 mandatory only for modify or delete modes. You must specify either
 -handle or -port_handle, but not both.
 -ancp_standard
 Specifies the ANCP standard to be used, either
 ietf-ancp-protocol2 or gsmp-l2control-config2.
 -bulk_transaction
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables bulk transaction capabilities. In a bulk
 transaction, several messages can be bundled together in a single
 transaction. Possible values are 0 (disabled) and 1 (enabled).
 The default value is 0. You can specify this argument only when
 -ancp_standard is set to ietf-ancp-protocol2.
 -device_count
 Specifies the number of emulated ANCP devices to create. The
 default value is 1.
 -encap_type
 Specifies the type of Layer 2 encapsulation. Possible values are
 ETHERNETII, VC_MUX, LLC_SNAP, ATM_LLC_SNAP_ETHERNETII, and
 ATM_VC_MUX_ETHERNETII. The default value is ETHERNETII.
 ETHERNETII - Specifies the Layer 2 encapsulation to be Ethernet II
 frame.This option is available for Ethernet cards.
 VC_MUX - Specifies ATM encapsulation to VC Multiplexed. Virtual
 Circuit Multiplexing (VC_MUX) is one of the two mechanisms
 for identifying the protocol carried in ATM Adaptation Layer5
 (AAL5) frame. This option is available for ATM cards.
 LLC_SNAP - Specifies ATM encapsulation to LLC Encapsulated.
 LLC_SNAP is the other mechanism for identifying
 the protocol carried in AAL5 frame. This option is available
 for ATM cards.
 
ANCP Functions
46
 ATM_LLC_SNAP_ETHERNETII - Specifies the Layer 2 encapsulation
 to Ethernet over VC Multiplexed ATM which will encapsulate
 the Ethernet packets inside AAL5 LLC_SNAP frames. This
 option is available for ATM cards.

 ATM_VC_MUX_ETHERNETII - Specifies the Layer 2 encapsulation to
 Ethernet over LLC Encapsulated ATM which will encapsulate
 the Ethernet packets inside AAL5 VC_MUX frames.
 This option is available for ATM cards.
 Note: SAF (IEEE 802.3/802.2) type and SNAP
 (IEEE 802.3/802.2 SNAP) type are not supported.
 -gateway_ip_addr
 Configures the IPv4 gateway address of the ANCP device. You must
 specify this argument in IPv4 format. The default is 192.85.1.1.
 This is the default gateway for routing the IPv4 address you
 specified in the -intf_ip_addr argument. The default gateway is
 the device that Spirent HLTAPI will use to reach hosts not on its
 local network. The value of this argument may be an IPv4 address
 or multiple IPv4 addresses in a list. When the value is a list,
 the number of IPv4 addresses in the list should be equal to the
 number of devices specified by -device_count. Meanwhile, the
 related step, the repeat, and the count options are invalid.
 -gateway_ip_repeat
 Specifies the number of times the gateway IPv4 address should
 be repeated, before the step that is specified by the
 -gateway_ip_step argument is applied to the gateway IP address
 for incrementing. The default value is the number you specified
 by -device_count.
 -gateway_ip_step
 Defines the increment used to generate gateway IPv4 addresses
 (-gateway_ip_addr) for emulated devices. The default value is
 0.0.0.1.
 -gateway_ip_prefix_len
 Specifies the gateway IPv4 mask for the IPv4 devices advertised.
 Possible values range from 1 to 32. The default value is 24. This
 argument determines the network ID and the subnet.

 -gateway_ip_prefix
 Defines the prefix of gateway IPv4 addresses.

 -intf_ip_addr
 Specifies the IPv4 address of the interface for the ANCP
 emulated device that will establish an adjacency with the
 DUT. It may be an IPv4 address or multiple IPv4 addresses
 in a list. When the value is a list, the number of IPv4 addresses
 in the list should be equal to the number of devices specified by
 -device_count. Meanwhile, the related step, the repeat, and the
 count options are invalid. The default is 192.85.1.3.
 -intf_ip_repeat
 Defines the number of times an interface IPv4 address should be
 repeated before applying the step (-intf_ip_step).
 -intf_ip_step
 Specifies the difference between interface IPv4 addresses of
 consecutive devices when multiple ANCP devices are created.
 The default increment is 0.0.0.1. This argument is only
 applicable in create mode.
 -intf_ip_prefix_len
 Specifies the prefix length of the emulated device. Possible
 values for IPv4 addresses range from 1 to 32; the default is
 24.
 -intf_ip_prefix
 Specifies the prefix of interface IPv4 addresses.
ANCP Functions
47
 -keep_alive
 Specifies the intervals (in seconds) between two keep alive
 messages sent from ANCP devices. Possible values range from
 1 to 25.
 -local_mac_addr
 Specifies the first MAC address of the emulated ANCP devices
 to use when emulating multiple devices. The default is
 00:10:94:00:00:01.You must specify the value in MAC address
 format. It may be a MAC address or multiple MAC addresses in a
 list. When the value is a list, the number of MAC addresses in
 the list should be equal to the number of devices specified by
 -device_count. Meanwhile, the related step, the repeat, and the
 count options are invalid.
 -local_mac_step
 Specifies the increment to use to generate additional MAC
 addresses for multiple devices. The default is
 00.00.00.00.00.01. You must specify the value in the format of
 the MAC address.
 -local_mac_repeat
 Specifies the number of times a MAC address should be repeated,
 before the step you specified by -local_mac_step is applied to
 the MAC address for incrementing. The default value is 1.
 -sut_ip_addr
 Defines the IPv4 address of System Under Test (SUT) that is
 adjacent to the test interface or the emulated ANCP device.
 It may be an IPv4 address or multiple IPv4 addresses in a list.
 When the value is a list, the number of IPv4 addresses in the
 list should be equal to the number of devices specified by
 -device_count. Meanwhile, the related step, repeat, and count
 options are invalid.
 -sut_ip_repeat
 Specifies the number of times a SUT address should be repeated,
 before the step (-sut_ip_step) is applied to the SUT address for
 incrementing. The default value is the number defined by
 -device_count.
 -sut_ip_step
 Specifies the step size in which the IPv4 address of the SUT is
 incremented. The default is 0.0.0.1.
 -sut_ip_prefix_len
 Specifies the IPv4 subnet mask for the SUT specified by the
 -sut_ip_addr argument. Possible values range from 1 to 32.
 The default value is 24.

 -sut_ip_prefix
 Specifies the prefix of the SUT addresses.
 -tcp_port
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Transfer Control Protocol (TCP) port to be
 used in ANCP/TCP connection. ANCP uses TCP for exchanging
 protocol messages. The default value is 6068.
 -topology_discovery
 Enables or Disables the topology discovery functionality.
 When you enable this argument, the DUT can use topology
 discovery to get the information about the access network and
 subscriber traffic from the emulated ANCP device. Possible
 values are 0 (disabled) and 1 (enabled).
 -vci
 Specifies the Virtual Circuit Identifier (VCI) of the first ATM
 PVC pool. Possible values range from 0 to 65535. The default is
 100. You can specify this argument when -encap_type is set to
ANCP Functions
48
 VC_MUX, LLC_SNAP, ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.

 -vci_step
 Specifies the step size in which the VCI value is incremented.
 Possible values range from 0 to 65535. The default is 1.
 You can specify this argument when -encap_type is set
 to VC_MUX, LLC_SNAP, ATM_LLC_SNAP_ETHERNETII
 or ATM_VC_MUX_ETHERNETII.
 -vci_repeat
 Specifies the number of times the VCI value should be repeated,
 before the step (-vci_step) is applied to the VCI value for
 incrementing. Possible values range from 0 to 65535. The default
 is 0. You can specify this argument when -encap_type is set to
 VC_MUX, LLC_SNAP, ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -vlan_id
 Defines the Virtual LAN (VLAN) ID of the first VLAN
 sub-interface. Possible values range from 0 to 4095. It may be
 a VLAN ID or multiple VLAN IDs in a list. When the value is
 a list, the number of VLAN IDs in the list should be equal to the
 number of devices specified by -device_count. Meanwhile, the
 related step, repeat, and count options are invalid. You can
 specify this argument when -encap_type is set to ETHERNETII,
 ATM_LLC_SNAP_ETHERNETII or ATM_VC_MUX_ETHERNETII.

 Note: If arguments about Inner VLAN are specified,
 -vlan_id, -vlan_id_count, -vlan_id_repeat, and
 -vlan_id_step indicate the ID, number, repeat, and
 step of Outer VLAN.
 -vlan_id_count
 Specifies the number of VLAN IDs to use when generating
 ANCP devices. The default value is 1. Please refer to the
 note in the -vlan_id argument.
 -vlan_id_repeat
 Specifies the number of times a VLAN ID should be repeated,
 before the step (-vlan_id_step) is applied to the VLAN
 ID for incrementing. The default value is the number you
 specified by -device_count. Please refer to the note in the
 -vlan_id argument.
 -vlan_id_step
 Specifies the increment to use for generating additional VLAN
 IDs. When you specify the -vlan_id_repeat argument or the
 -vlan_id_count argument, the default value of this argument is 1.
 Please refer to the note in the -vlan_id argument.
 -vlan_id_inner
 Defines the VLAN ID of the first Inner VLAN sub-interface.
 Possible values range from 0 to 4095. You can specify this
 argument when -encap_type is set to ETHERNETII ,
 ATM_LLC_SNAP_ETHERNETII or ATM_VC_MUX_ETHERNETII.
 -vlan_id_count_inner
 Specifies the number of the Inner VLAN IDs to use when
 generating ANCP devices. The default value is 1.
 -vlan_id_repeat_inner
 Specifies the number of times an Inner VLAN ID should be
 repeated, before the step (-vlan_id_step_inner) is applied
 to the Inner VLAN ID for incrementing. The default value
 is the number of devices you specified by -device_count.
 -vlan_id_step_inner
 Specifies the increment to use for generating additional Inner
 VLAN IDs. The default value is 1.
ANCP Functions
49
 -vpi
 Specifies the Virtual Path Identifier (VPI) of the first ATM PVC
 pool (for an ATM connection). Possible values are 0 to 255. The
 default is 100. You can specify this argument when -encap_type is
 set to VC_MUX, LLC_SNAP, ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are 0 to 255. The default is 1.
 You can specify this argument when -encap_type is set
 to VC_MUX, LLC_SNAP, ATM_LLC_SNAP_ETHERNETII
 or ATM_VC_MUX_ETHERNETII.
 -vpi_repeat
 Specifies the number of times the VPI value should be repeated,
 before the step (-vpi_step) is applied to the VPI value for
 incrementing. Possible values range from 0 to 255. The default is
 0. You can specify this argument when -encap_type is specified to
 VC_MUX, LLC_SNAP, ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -gateway_ip_repeat
 -intf_ip_repeat
 -local_mac_repeat
 -sut_ip_repeat
 -vlan_id_repeat
 -vlan_id_repeat_inner
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -intf_ip_prefix
 -session_count
 -remote_mac_addr
 -remote_mac_step
 -remote_mac_repeat
 -gateway_ipv6_addr
 -gateway_ipv6_repeat
 -gateway_ipv6_step
 -gateway_ip_prefix
 -gateway_ip_prefix_len
 -gateway_ipv6_prefix_len
 -gateway_ipv6_prefix
 -gsmp_standard
 -return_receipt
 -events_per_interval
 -interval
 -line_config
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 handle Identifies the list of created ANCP devices
 status Success (1) or failure (0) of the operation
 log An error message (if the operation failed).
Description:
 The sth::emulation_ancp_config function creates or deletes a list of emulated
 ANCP client device. This function can modify one emulated device once. Use
 the -mode argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)
ANCP Functions
50
 Before using this function, you must specify "-mode create" when configuring
 emulated ANCP devices on a port and initialize the port handle argument
 (using the sth::emulation_ancp_config function).
 You can call this function once to create multiple devices on a port. The
 number of devices to create is specified by the -device_count argument.
 Once the ANCP devices have been configured, a handle is created, which can
 be used to modify the parameters. You can call this function once to modify
 one created device. If you want to modify multiple devices, you can call
 this function multiple times to do this. (See the -mode argument description
 for more information).
 You must specify the -mode (create, modify, or delete) argument.
 For information about the protocol, see "Protocol for Access Node Control
 Mechanism in Broadband Networks."
Examples:
 #### HLTAPI for Tcl ####
 The following example configures ANCP devices on a port:
 sth::emulation_ancp_config -mode create \
 -port_handle $port1 \
 -local_mac_addr 00:10:94:A0:00:02 \
 -local_mac_step 00:00:00:00:00:01 \
 -intf_ip_addr 192.168.4.2 \
 -intf_ip_step 0.0.0.1 \
 -gateway_ip_addr 192.168.4.1 \
 -sut_ip_addr 192.168.4.1 \
 -keep_alive 10 \
 -ancp_standard "ietf-ancp-protocol2"

 Output:
 {handle router1} {status 1}
 #### HLTAPI for Python ####
 The following example configures ANCP devices on a port:
 sth.emulation_ancp_config (
 mode = 'create',
 encap_type = 'ETHERNETII',
 sut_ip_addr = '192.85.1.2',
 sut_ip_prefix_len = '24',
 port_handle = port_handle[0],
 vlan_id_inner = '100',
 ancp_standard = 'ietf-ancp-protocol2',
 topology_discovery = '1',
 tcp_port = '6068',
 bulk_transaction = '1',
 keep_alive = '10',
 local_mac_addr = '00:10:94:00:00:01',
 intf_ip_prefix_len = '24',
 intf_ip_addr = '192.85.1.3',
 gateway_ip_addr = '192.85.1.2');


 Output:
 {'status': '1', 'handle': 'router1'}
 #### HLTAPI for Perl ####
 The following example configures ANCP devices on a port:
 my %device_ret2 = sth::emulation_ancp_config (
 mode => 'create',
 encap_type => 'ETHERNETII',
 sut_ip_addr => '192.85.1.2',
 sut_ip_prefix_len => '24',
 port_handle => "$hport[1]",
 vlan_id_inner => '100',
ANCP Functions
51
 ancp_standard => 'ietf-ancp-protocol2',
 topology_discovery => '1',
 tcp_port => '6068',
 bulk_transaction => '1',
 keep_alive => '10',
 local_mac_addr => '00:10:94:00:00:01',
 intf_ip_prefix_len => '24',
 intf_ip_addr => '192.85.1.3',
 gateway_ip_addr => '192.85.1.2');
 Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'status';
 $VAR4 = '1';
Sample input: See examples.
Sample output: See examples.

Notes:
 None
End of Procedure Header
sth::emulation_ancp_subscriber_lines_config
Name:
 sth::emulation_ancp_subscriber_lines_config
Purpose:
 Creates, modifies, or deletes emulated subscriber lines behind an ANCP
 enabled Access Node on a Spirent HLTAPI chassis. When a subscriber
 line is created or modified, the user can specify the configuration option.
Synopsis:
 sth:: emulation_ancp_subscriber_lines_config
 -mode create -ancp_client_handle <ancp_session_handle> |
 -mode modify -ancp_client_handle <ancp_session_handle> -handle <handle> |
 -mode delete -handle <handle>
 [-subscriber_lines_per_access_node <integer>]
 [-circuit_id <circuit ID>]
 [-remote_id <remote ID>]
 [-circuit_id_suffix <integer>]
 [-circuit_id_suffix_step <integer>]
 [-circuit_id_suffix_repeat <integer>]
 [-vlan_allocation_model { 1_1 | N_1} ]
 [-enable_c_vlan {0|1}]
 [-customer_vlan_id <VLAN ID>]
 [-customer_vlan_id_step <0-4095>]
 [-customer_vlan_id_repeat <integer>]
 [-include_encap {0|1}]
 [-data_link { ethernet | atm_aal5}]
 [-encap1 { na | untagged_ethernet | single_tagged_ethernet }]
 [-encap2 {na | pppoa_llc| pppoa_null | ipoa_llc | ipoa_null | aal5_llc_w_fcs |
 aal5_llc_wo_fcs | aal5_null_w_fcs | aal5_null_wo_fcs }]
 [-dsl_type { adsl1 | adsl2 | adsl2_plus | vdsl1 | vdsl2 | sdsl | unknown }]
 [-actual_rate_upstream <integer>]
 [-actual_rate_upstream_step <integer>]
 [-actual_rate_upstream_repeat <integer>]
 [-upstream_min_rate <integer>]
 [-upstream_max_rate <integer>]
 [-upstream_attainable_rate <integer>]
 [-upstream_min_low_power_rate <integer>]
 [-upstream_max_interleaving_delay <integer>]
ANCP Functions
52
 [-upstream_act_interleaving_delay <integer>]
 [-actual_rate_downstream <integer>]
 [-actual_rate_downstream_step <integer>]
 [-actual_rate_downstream_repeat <integer>]
 [-downstream_min_rate <integer>]
 [-downstream_max_rate <integer>]
 [-downstream_attainable_rate <integer>]
 [-downstream_min_low_power_rate]
 [-downstream_max_interleaving_delay <integer>]
 [-downstream_act_interleaving_delay <integer>]
Arguments:
 -mode
 Creates, modifies or deletes the subscriber line connected with
 the created ANCP client device. This is a mandatory argument.
 Possible values are create, modify, and delete. Every mode except
 create requires a valid ANCP subscriber line pool handle. The
 modes are described below:
 create - Creates one or more ANCP subscriber lines on
 the ANCP device specified by the -ancp_client_handle
 argument. You must specified the -ancp_client_handle
 argument.
 modify - Changes the configuration for the ANCP subscriber
 line identified by the -handle argument. In modify mode,
 you must specify both -ancp_client_handle and -handle.
 You can modify one subscriber line (-handle) once. If you
 want to modify multiple subscriber lines, you must call this
 command multiple times.
 delete - Deletes all of the ANCP devices specified in the
 -handle argument. You must specify the -handle argument.

 Note: The enable, disable, enable_all, and disable_all modes
 are not supported.
 -ancp_client_handle
 Defines the handle of the emulated ANCP client device
 connected with the subscriber lines to be created and modified.
 You must specify both -ancp_client_handle and -handle in modify
 mode.
 -handle
 Specifies the subscriber lines to be modified or deleted. This
 argument is mandatory only for modify or delete modes. You must
 specify both -ancp_client_handle and -handle when you specify
 -mode modify.
 -subscriber_lines_per_access_node
 Specifies the number of subscriber lines per emulated ANCP device,
 that is, the Access Node. The default value is 1.

 -circuit_id
 Specifies the Circuit ID which identifies each subscriber line
 connected with one device.
 -remote_id
 Specifies the Remote Circuit ID which identifies each subscriber
 line connected with the remote device. You can specify this
 argument when the -ancp_standard argument is set to
 ietf-ancp-protocol2.
 -circuit_id_suffix
 Defines the suffix to append to the circuit ID specified in the
 -circuit_id argument.
 -circuit_id_suffix_step
 Defines the increment used to generate circuit ID suffixes
 (-circuit_id_suffix). The default is 1.
ANCP Functions
53
 -circuit_id_suffix_repeat
 Specifies the number of times a circuit ID suffix should
 be repeated, before the step that is specified in the
 -circuit_id_suffix_step argument is applied to the
 circuit ID suffix for incrementing. The default is 1.
 -vlan_allocation_model
 Defines the VLAN allocation model used to identify the
 subscriber lines. Possible values are 1_1 and N_1:
 1_1 - Specifies the 1:1 VLAN allocation model. Stacked
 VLAN tags provide one possible way to create
 equivalent of "virtual paths" and "virtual circuits"
 in the aggregation network. The "outer" VLAN could
 be used to create a form of "virtual path" between a given
 NAS and a given DSLAM. And "inner" VLAN tags to
 create a form of "virtual circuit" on a per DSL line basis.
 N_1 - Specifies the N:1 VLAN allocation model that is to bridge
 sessions from multiple subscriber line behind a DSLAM
 into a single VLAN in the aggregation network.
 -enable_c_vlan
 Enables or disables customer VLAN ID that is the unique public
 network VLAN ID provided by QinQ protocol. Possible values
 are 0 (disabled) and 1 (enabled). When the value is set to 1,
 customer VLAN ID is enabled. You can specify this argument
 when -vlan_allocation_model is set to 1_1.
 -customer_vlan_id
 Specifies the starting customer VLAN ID to use when generating
 ANCP devices. You can specify this argument only
 when -vlan_allocation_model is set to 1_1 and -enable_c_vlan is
 set to 1. The default value is 1.
 -customer_vlan_id_step
 The value that Spirent HLTAPI uses to increment the
 customer VLAN ID. Possible step values range from 0 to 4095.
 The default is 1. You can specify this argument only
 when -vlan_allocation_model is set to 1_1 and
 -enable_c_vlan is set to 1.
 -customer_vlan_id_repeat
 Specifies the number of times a customer VLAN ID should be
 repeated, before the step (-customer_vlan_id_step) is applied to
 the customer VLAN ID for incrementing. You can specify this
 argument only when -vlan_allocation_model is set
 to 1_1 and -enable_c_vlan is set to 1.
 -include_encap
 Specifies whether or not Access Loop Encapsulation Threshold
 Limit Value (TLV) is included in ANCP messages. Access Loop
 Encapsulation TLV is an optional TLV for ANCP. This TLV includes
 the Data Link Protocol (-data_link) and, optionally the
 encapsulation (-encap1 and -encap2) overhead on the Access Loop.
 Possible values are 0 and 1. When you specify this argument to 1,
 Access Loop Encapsulation TLV will be included in ANCP messages.
 When this TLV is present, the data link protocol must be
 indicated. Optionally, the encapsulation overhead can be
 indicated. You can specify this argument when -ancp_standard is
 set to ietf-ancp-protocol2.
 -data_link
 Defines the Access Loop Data Link. Possible values are
 ethernet and atm_aal5. You must use this argument when
 -include_encap is set to 1. Please refer to -include_encap.

 -encap1
 Defines the Access Loop Encapsulation 1. Possible values
 are na, untagged_ethernet, and single_tagged_ethernet.
 You can use this argument when -include_encap is set to 1. 
ANCP Functions
54
 Please refer to -include_encap.
 -encap2
 Defines the Access Loop Encapsulation 2. Possible
 values are na, pppoa_llc, pppoa_null, ipoa_llc, ipoa_null,
 aal5_llc_w_fcs, aal5_llc_wo_fcs, aal5_null_w_fcs, and
 aal5_null_wo_fcs. You can use this argument when -include_encap
 is set to 1. Please refer to -include_encap.

 -dsl_type
 Defines the type of Digital Subscriber Line (DSL) transmission
 system to use. Possible values are adsl1, adsl2, adsl2_plus,
 vdsl1, vdsl2, sdsl, and unknown. The default value is adsl1.
 -actual_rate_upstream
 Specifies the starting value of actual upstream (from the
 subscriber line to the server) net data rates on a DSL line. The
 value is measured in kbps. The default is 0.
 -actual_rate_upstream_step
 Specifies the difference between the actual upstream net data
 rates. The value is measured in kbps.
 -actual_rate_upstream_repeat
 Specifies the number of times an actual upstream net data rate
 should be repeated, before the step (-actual_rate_upstream_step)
 is applied to the actual upstream net data rates for incrementing.
 -upstream_min_rate
 Specifies the minimum net data upstream rate desired by
 the service provider. The value is measured in kbps.
 -upstream_max_rate
 Specifies the maximum net data upstream rate desired
 by the service provider. The value is measured in kbps.

 -upstream_attainable_rate
 Specifies the maximum net upstream rate that can be attained
 on the DSL Line. The value is measured in kbps.
 -upstream_min_low_power_rate
 Defines the minimum net upstream rate desired by the service
 provider in low power state. The value is measured in kbps.
 -upstream_max_interleaving_delay
 Defines the maximum one way interleaving delay. The value
 is measured in milliseconds.

 -upstream_act_interleaving_delay
 Specifies the value corresponding to the upstream interleaver
 setting. The value is measured in milliseconds.
 -actual_rate_downstream
 Specifies the starting value of actual downstream (from the
 server to the subscriber line) net data rates on a DSL line. The
 value is measured in kbps. The default is 0.
 -actual_rate_downstream_step
 Specifies the difference between the actual downstream net data
 rates. The value is measured in kbps.

 -actual_rate_downstream_repeat
 Specifies the number of times an actual downstream net data rate
 should be repeated, before the step
 (-actual_rate_downstream_step) is applied to the actual
 downstream net data rates for incrementing.
 -downstream_min_rate
 Specifies the minimum net data downstream rate desired by
 the service provider. The value is measured in kbps.
ANCP Functions
55
 -downstream_max_rate
 Specifies the maximum net data downstream rate desired
 by the service provider. The value is measured in kbps.

 -downstream_attainable_rate
 Specifies the maximum net downstream rate that can be attained
 on the DSL Line. The value is measured in kbps.
 -downstream_min_low_power_rate
 Defines the minimum net downstream rate desired by the service
 provider in low power state. The value is measured in kbps.
 -downstream_max_interleaving_delay
 Defines the maximum one way interleaving delay. The value
 is measured in milliseconds.

 -downstream_act_interleaving_delay
 Specifies the value corresponding to the downstream interleaver
 setting. The value is measured in milliseconds.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -downstream_rate_tolerance
 -remote_id_suffix
 -remote_id_suffix_step
 -remote_id_suffix_repeat
 -service_vlan_id
 -service_vlan_id_step
 -service_vlan_id_repeat
 -upstream_rate_tolerance
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 handle Identifies the list of created ANCP subscriber lines
 status Success (1) or failure (0) of the operation
 log An error message (if the operation failed).
Description:
 The sth::emulation_ancp_subscriber_lines_config function creates, modifies or
 deletes a list of emulated ANCP subscriber lines. Use the -mode argument to
 specify the action to perform. (See the -mode argument description for
 information about the actions.)
 Before using this function, you must specify "-mode create" when configuring
 emulated ANCP subscriber lines on a device and initializes the device handle
 argument.
 You can call this function once to create multiple subscriber lines on one
 device.The number of subscriber lines to create is specified by the
 -subscriber_lines_per_access_node argument.
 Once the ANCP subscriber lines have been configured, a handle is created,
 which can be used to modify the parameters.
 You must specify the -mode (create, modify, or delete) argument.
 For information about the protocol, see "Protocol for Access Node Control
 Mechanism in Broadband Networks".
Examples:
 #### HLTAPI for Tcl ####
 The following two examples create ANCP subscriber lines on a device:
 This example creates ANCP subscriber lines with PPP protocol.
 sth::pppox_config -port_handle $port1 \
ANCP Functions
56
 -mode create \
 -protocol pppoe \
 -encap ethernet_ii \
 -auth_mode pap \
 -include_id 1 \
 -num_sessions 1 \
 -mac_addr 00.00.12.00.01.02 \
 -mac_addr_step 00.00.00.00.00.01 \
 -username spirent \
 -password spirent
 set host1 [keylget ret handles]
 sth::emulation_ancp_subscriber_lines_config -mode create \
 -ancp_client_handle $anRouter1 \
 -handle $host1 \
 -subscriber_lines_per_access_node 1 \
 -circuit_id "test" \
 -remote_id "cf" \
 -circuit_id_suffix 2 \
 -circuit_id_suffix_step 1 \
 -circuit_id_suffix_repeat 2 \
 -include_encap 1 \
 -data_link "ethernet" \
 -dsl_type "adsl2" \
 -actual_rate_upstream "444" \
 -upstream_min_rate "22" \
 -actual_rate_downstream "555"
 puts "ret of ancp subscriber config for $anRouter1 : $ret2 \n\n"
 Sample output for example shown above:
 {handle host1} {status 1}
 The following example creates ANCP subscriber lines with DHCP protocol.
 set ret [sth::emulation_dhcp_config -mode create -port_handle port2 \
 -request_rate 25 \
 -release_rate 300 \
 -retry_count 4]
 set dhcpgrp [keylget ret handles]
 set ret [sth::emulation_dhcp_group_config -mode create -handle $dhcpgrp \
 -encap ethernet_ii -num_sessions 1 -mac_addr 00.10.94.01.00.01]
 set host2 [keylget ret handles]
 set ret2 [sth::emulation_ancp_subscriber_lines_config -mode create \
 -ancp_client_handle $anRouter2 \
 -subscriber_lines_per_access_node 1 \
 -handle $host2 \
 -circuit_id "test" \
 -remote_id "cf" \
 -circuit_id_suffix 2 \
 -circuit_id_suffix_step 1 \
 -circuit_id_suffix_repeat 2 \
 -vlan_allocation_model "1_1" \
 -enable_c_vlan 1 \
 -customer_vlan_id 1001 \
 -include_encap 1 \
 -data_link "ethernet" \
 -dsl_type "adsl2" \
 -actual_rate_upstream "444" \
 -upstream_min_rate "22" \
 -actual_rate_downstream "555"]
 puts "ret of ancp subscriber config for $anRouter2 : $ret2 \n\n"
 set status [keylget ret2 status]
 if {$status} {
 set anHost1 [keylget ret2 handle]
ANCP Functions
57
 Sample output for example shown above:
 {handle host2} {status 1}
 The following example modifies ANCP subscriber lines on a device:
 sth::emulation_ancp_subscriber_lines_config -mode modify \
 -handle $hostHnd\
 -subscriber_lines_per_access_node 50 \
 -circuit_id "modify" \
 -remote_id "spirent" \
 -circuit_id_suffix 3 \
 -circuit_id_suffix_step 3 \
 -circuit_id_suffix_repeat 4 \
 -vlan_allocation_model "1_1" \
 -enable_c_vlan 1 \
 -customer_vlan_id 1000 \
 -customer_vlan_id_step 2 \
 -customer_vlan_id_repeat 1 \
 -include_encap 1 \
 -data_link "ethernet" \
 -dsl_type "adsl1" \
 -actual_rate_upstream "100" \
 -upstream_min_rate "20" \
 -actual_rate_downstream "200" \
 -actual_rate_upstream_repeat 25\
 -actual_rate_downstream_repeat 25\
 -actual_rate_upstream_step 500 \
 -actual_rate_downstream_step 500 \
 -upstream_attainable_rate 88
 Sample output for example shown above:
 {status 1}
 #### HLTAPI for Python ####
 The following example creates an ANCP subscriber lines on a device:
 sth.emulation_ancp_subscriber_lines_config (
 mode = 'create',
 ancp_client_handle = ancp_router,
 handle = subscribe_host,
 vlan_allocation_model= '1_1',
 enable_c_vlan = '1',
 customer_vlan_id = '100',
 customer_vlan_id_step= '2',
 subscriber_lines_per_access_node= '1',
 circuit_id = 'Access-Node-Identifier',
 circuit_id_suffix = '1',
 circuit_id_suffix_step= '2',
 remote_id = 'SPIRENT11',
 include_encap = '1',
 data_link = 'atm_aal5',
 encap1 = 'untagged_ethernet',
 encap2 = 'pppoa_null',
 dsl_type = 'adsl2',
 downstream_act_interleaving_delay= '10',
 upstream_act_interleaving_delay= '20',
 downstream_attainable_rate= '12',
 upstream_attainable_rate= '13',
 downstream_max_interleaving_delay= '15',
 upstream_max_interleaving_delay= '40',
 downstream_max_rate = '41',
 upstream_max_rate = '43',
 downstream_min_rate = '50',
 upstream_min_rate = '55',
 downstream_min_low_power_rate= '56',
 upstream_min_low_power_rate= '70',
 actual_rate_downstream= '30',
 actual_rate_upstream= '11');
 Sample Output:
ANCP Functions
58
 {'status': '1', 'handle': 'host5'}
 #### HLTAPI for Perl ####
 The following example creates an ANCP subscriber lines on a device:
 sth::emulation_ancp_subscriber_lines_config (
 mode => 'create',
 ancp_client_handle => "$ancp_router",
 handle => "$subscribe_host",
 vlan_allocation_model=> '1_1',
 enable_c_vlan => '1',
 customer_vlan_id => '100',
 customer_vlan_id_step=> '2',
 subscriber_lines_per_access_node=> '1',
 circuit_id => 'Access-Node-Identifier',
 circuit_id_suffix => '1',
 circuit_id_suffix_step=> '2',
 remote_id => 'SPIRENT11',
 include_encap => '1',
 data_link => 'atm_aal5',
 encap1 => 'untagged_ethernet',
 encap2 => 'pppoa_null',
 dsl_type => 'adsl2',
 downstream_act_interleaving_delay=> '10',
 upstream_act_interleaving_delay=> '20',
 downstream_attainable_rate=> '12',
 upstream_attainable_rate=> '13',
 downstream_max_interleaving_delay=> '15',
 upstream_max_interleaving_delay=> '40',
 downstream_max_rate => '41',
 upstream_max_rate => '43',
 downstream_min_rate => '50',
 upstream_min_rate => '55',
 downstream_min_low_power_rate=> '56',
 upstream_min_low_power_rate=> '70',
 actual_rate_downstream=> '30',
 actual_rate_upstream=> '11');

 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host5';
 $VAR3 = 'status';
 $VAR4 = '1';
Note:
 The flap related options (-subscriber_line_up_time,
 -subscriber_line_down_time, and -flap_count) have been removed to
 the sth:: emulation_ancp_control function.
End of Procedure Header
sth::emulation_ancp_control
Name:
 sth::emulation_ancp_control
Purpose:
 Controls ANCP emulation on a specified port.
Synopsis:
 sth::emulation_ancp_control
 -action {initiate | send} -ancp_handle {<ancp_device_handle> | all} |
 -action {connect| flap | flap_start | flap_stop }
 -ancp_subscriber {<subscriber_line_handle> | all}
 -action_control {start | stop}
 [-subscriber_line_up_time <integer>]
ANCP Functions
59
 [-subscriber_line_down_time <integer>]
 [-flap_count <integer>]
Arguments:
 -ancp_handle
 Identifies the handle(s) of the ANCP device(s) to be used.
 Possible values are <ancp_device_handle> and all.
 <ancp_device_handle> - Defines the handle(s) of ANCP devices
 to be used. <ancp_device_handle> can be a device
 handle or a list of device handles.
 <ancp_device_handle>, the value of this argument, is
 returned from the
 sth::emulation_ancp_config function when creating
 ANCP devices. The handle of an ANCP device can be a
 string of characters except "all". Please refer to the
 examples for more details.
 all - Indicates all the devices under the current project.
 When you specify -ancp_handle all, the command will
 perform the action specified by -action on all the
 devices under the current project. Compared with
 -ancp_handle <ancp_device_handle>,
 -ancp_handle all will make the connection of ANCP
 sessions faster in large-scale tests.
 You must specify this argument when you specify
 -action initiate or -action send.
 -ancp_subscriber
 Identifies the handle(s) of the ANCP subscriber line(s) to be
 used. Possible values are <subscriber_line_handle> and all.
 <subscriber_line_handle> - Defines the handle(s) of the ANCP
 subscriber line(s) to be used.
 <subscriber_line_handle>, the value of this
 argument, can be a subscriber line handle or a list of
 subscriber line handles. <subscriber_line_handle> is
 returned from the
 sth::emulation_ancp_subscriber_lines_config
 function when creating ANCP subscriber lines. The
 handle of an ANCP subscriber line can be a string of
 characters except "all". Please refer to the examples
 for more details.
 all - Indicates all the subscriber lines under the current
 project. When you specify -ancp_subscriber all, the
 command will perform the action specified by -action on
 all the subscriber lines under the current project.
 Compared with -ancp_subscriber <subscriber_line_handle>,
 -ancp_subscriber all will make the connection of ANCP
 sessions faster in large-scale tests.
 This argument is mandatory.

 -action
 Specifies the action to perform. Possible values are initiate,
 send, connect, flap, flap_start, and flap_stop. You must specify
 one of these values. The modes are described below:
 initiate - Initiates the ANCP adjacency.

 The following example initiates ANCP router1.
 sth::emulation_ancp_control -ancp_handle $anRouter1 \
 -ancp_subscriber $anHost1 \
 -action initiate \
 -action_control start

 send - Sends ANCP port up messages.
ANCP Functions
60
 The following example brings router1 port up.
 sth::emulation_ancp_control -ancp_handle $anRouter1 \
 -ancp_subscriber $anHost1 \
 -action send \
 -action_control start
 connect - Connects PPPoX or binds DHCP hosts.
 The following example connects the ANCP subscribers
 sth::emulation_ancp_control -ancp_handle $anRouter1 \
 -ancp_subscriber $anHost1 \
 -action connect \
 -action_control start
 flap - Spirent Extension (for Spirent HLTAPI only).
 Enables flapping on the subscriber line handles specified
 by the -ancp_subscribe argument. This attribute withdraws
 the subscriber lines for the time defined
 by -subscriber_line_down_time and then readvertises
 the subscriber lines for the time defined
 by -subscriber_line_up_time.

 If you specify "flap" for the -action argument without
 defining -flap_count, Spirent HLTAPI will perform the
 flapping operation only once. If you define -flap_count
 while you specify -action flap, Spirent HLTAPI will perform
 the flapping operation the number of times defined by the
 -flap_count argument.
 For example, if there is a subscriber line $anHost1, a
 10-time flapping of this subscriber line can be processed by
 calling the following command.

 sth::emulation_ancp_control
 -action flap \
 -action_control start \
 -ancp_subscriber $anHost1
 -subscriber_line_up_time 160 \
 -subscriber_line_down_time 20 \
 -flap_count 10 \
 flap_start - Starts the flapping operation on the subscriber line
 specified by the -ancp_subscriber argument.
 flap_stop - Stops the flapping operation on the subscriber line
 specified by the -ancp_subscriber argument.
 For example, if there is a subscriber line $anHost1, you can
 control the flapping operation of this subscriber line by calling
 the following commands.
 sth::emulation_ancp_control
 -ancp_subscriber $anHost1
 -action_control start
 -action flap_start
 # after 1000
 sth::emulation_ancp_control
 -ancp_subscriber $anHost1
 -action_control start
 -action flap_stop
 -action_control
 Starts or stops the action specified by the -action option.
 This argument is mandatory. Possible values are described below:
 start - Starts the action.
 
ANCP Functions
61
 stop - Stops the action.
 -subscriber_line_up_time
 Specifies the amount of time, in milliseconds, that
 the subscriber line remains UP.
 The value you specify should be greater than 100 milliseconds.
 -subscriber_line_down_time
 Specifies the amount of time, in milliseconds, that
 the subscriber line remains DOWN.
 The value you specify should be greater than 100 milliseconds.
 -flap_count
 Specifies the number of flaps. This argument can be used when you
 specify -action flap. Each flap includes one advertise and one
 withdraw.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -peer_count
 -batch_size
 -interval
 -interval_unit
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 handle Identifies the ANCP device handle.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_ancp_control function connects or disconnects the DUT
 with ANCP devices, sends port up or port down messages. This function can
 also control the flapping operation of the subscriber lines.
Examples:
 To start the flapping operation.
 #### HLTAPI for Tcl ####
 sth::emulation_ancp_control
 -ancp_handle $anRouter1
 -ancp_subscriber $anHost1
 -action flap_start
 -action_control start
 Sample Output: {status 1}
 #### HLTAPI for Python ####
 ancp_ctrl = sth.emulation_ancp_control (
 ancp_handle = 'all',
 ancp_subscriber = 'all',
 action = 'initiate',
 action_control = 'start');

 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 my %ancp_ctrl = sth::emulation_ancp_control (
 ancp_handle => 'all',
 ancp_subscriber => 'all',
 action => 'initiate',
 action_control => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1'
ANCP Functions
62
Notes:
 None
End of Procedure Header
sth::emulation_ancp_stats
Name:
 sth::emulation_ancp_stats
Purpose:
 Returns the statistics about ANCP configuration. Statistics are displayed as
 a keyed list.
Synopsis:
 sth::emulation_ancp_stats
 -handle <ancp_device_handle>
 [-reset {1}]
Arguments:
 -handle
 Specifies the device from which to extract ANCP session data.
 This argument is mandatory.
 -reset
 Removes all device configurations for the specified ANCP devices.
 The only value you can specify is 1.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 statistics list The ANCP statistics for the specified device (see below).
 The following keys are returned when you call this command:
 rx_adj_syn_pkts The number of received adjacency SYN packets.
 rx_adj_syn_ack_pkts The number of received adjacency SYN-ACK
 packets.
 rx_adj_ack_pkts The number of received adjacency ACK packets.
 rx_adj_rst_ack_pkts The number of received adjacency RSTACK
 packets.
 rx_line_config_req The number of received subscriber line
 configuration requests.
 tx_adj_syn_pkts The number of sent adjacency SYN packets.
 tx_adj_syn_ack_pkts The number of sent adjacency SYN-ACK
 packets.
 tx_adj_ack_pkts The number of sent adjacency ACK packets.
 tx_adj_rst_ack_pkts The number of sent RSTACK packets.
 The following returned values are Spirent extensions (for Spirent
 HLTAPI only):

 tx_port_up_count The number of Port UP packets.
 tx_port_down_count The number of Port DOWN packets.
 rx_management_count The number of received Port Management
 packets.
 tx_keepalive_count The number of sent keep-alive packets.
 rx_keepalive_count The number of received keep-alive packets.
 keepalive_timeout_count The number of adjacency timeout packets.
 subscribers_up The number of subscriber lines remains UP.
ANCP Functions
63
 subscribers_down The number of subscriber lines remains DOWN.
Cisco-specific returned values:
 The following returned values are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 rx_total_pkts
 rx_top_disc_receipt_pkts
 rx_dropped_sub_not_found
 rx_dropped_no_cap
 rx_dropped_adj_not_stsab
 rx_dropped_malformed
 tx_total_pkts
 tx_top_disc_port_up_events
 tx_top_disc_port_down_events
 tx_line_config_receipts
 adj_estab_time_min
 adj_estab_time_avg
 adj_estab_time_max
 adj_estab_count
 adj_estab_percent
 adj_estab_rate
 agg_sub_line_down_bw
 agg_sub_line_up_bw
Description:
 The sth::emulation_ancp_stats function provides information about the
 availability of the specified device.
 This function returns the requested data (device information) and a status
 value (1 for success). If there is an error, the function returns the status
 value (0) and an error message. Function return values are formatted as a keyed
 list (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list.
Examples:
 #### HLTAPI for Tcl ####
 To obtain device information:
 sth::emulation_ancp_stats -handle $anRouter1
 Sample Output:
 {rx_adj_syn_ack_pkts 0} {tx_adj_ack_pkts 0} {rx_adj_syn_pkts 0}
 {tx_adj_syn_ack_pkts 0} {tx_adj_syn_pkts 0} {tx_port_up_count 0}
 {rx_management_count 0} {rx_keepalive_count 0} {rx_adj_rst_ack_pkts 0}
 {tx_port_down_count 0} {tx_keepalive_count 0} {tx_adj_rst_ack_pkts 0}
 {subscribers_up 0} {keepalive_timeout_count 0} {subscribers_down 1}
 {rx_adj_ack_pkts 0} {status 1}
 #### HLTAPI for Python ####
 To obtain device information:
 results_ret4 = sth.emulation_ancp_stats (
 handle = device);

 Sample Output:
 {'status': '1', 'rx_adj_rst_ack_pkts': '0', 'tx_port_down_count': '0',
 'tx_keepalive_count': '0', 'subscribers_down': '1', 'tx_adj_rst_ack_pkts': '0',
 'rx_management_count': '0', 'tx_adj_ack_pkts': '0', 'rx_keepalive_count': '0',
 'tx_port_up_count': '0', 'rx_adj_syn_ack_pkts': '0', 'tx_adj_syn_ack_pkts': '0',
 'tx_adj_syn_pkts': '0', 'rx_adj_syn_pkts': '0', 'subscribers_up': '0',
 'rx_adj_ack_pkts': '0', 'keepalive_timeout_count': '0'}
 #### HLTAPI for Perl ####
 To obtain device information:
 my %results_ret4 = sth::emulation_ancp_stats (
 handle => "$device");
 Sample Output:
 $VAR1 = 'subscribers_down';
 $VAR2 = '1';
ANCP Functions
64
 $VAR3 = 'tx_port_up_count';
 $VAR4 = '0';
 $VAR5 = 'keepalive_timeout_count';
 $VAR6 = '0';
 $VAR7 = 'rx_keepalive_count';
 $VAR8 = '0';
 $VAR9 = 'status';
 $VAR10 = '1';
 $VAR11 = 'rx_adj_syn_pkts';
 $VAR12 = '0'
 ...
Notes: None.
End of Procedure Header
BFD Functions
65
BFD Functions
Functions:
sth::emulation_bfd_config
sth::emulation_bfd_control
sth::emulation_bfd_info
sth::emulation_bfd_config
Name:
 sth::emulation_bfd_config
Purpose:
 Creates, enables, modifies, disables, or deletes an emulated Bidirectional
 Forwarding Detection (BFD) router on a Spirent HLTAPI chassis.
 BFD is a simple hello protocol. A pair of systems transmits BFD packets
 periodically over each path between the systems. If a system stops
 receiving BFD packets for long enough, some component in that particular
 bidirectional path to the neighboring system is assumed to have failed.
 Under some conditions, systems may negotiate to not send periodic BFD
 packets to reduce overhead. Each system estimates how quickly it can send
 and receive BFD packets to come to an agreement with its neighbor about
 how rapidly detection of failure will take place.
Synopsis:
 sth::emulation_bfd_config
 -mode {create | enable} -port_handle <port_handle> |
 -mode {modify | disable | delete} -handle <bfd_router_handle>
 [-active_mode {active| passive} ]
 [-count <integer>]
 [-detect_multiplier <2-100>]
 [-echo_rx_interval <0-10000>]
 [-gateway_ip_addr <a.b.c.d>]
 [-gateway_ip_addr_step <a.b.c.d>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_addr_step <a:b:c:d::e> ]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-intf_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_addr_step <a:b:c:d::e> ]
 [-ip_version {IPv4|IPv6}]
 [-local_mac_addr <aa:bb:cc:dd:ee:ff>]
 [-local_mac_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-remote_ip_addr <a.b.c.d>]
 [-remote_ip_addr_step <a.b.c.d>]
 [-remote_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-remote_ipv6_addr_step <a:b:c:d::e>]
 [-session_discriminator <integer> ]
 [-session_discriminator_step <integer> ]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vlan_id1 <0-4096>]
 [-vlan_id2 <0-4096>]
 [-vlan_id_mode1 {fixed|increment}]
 [-vlan_id_mode2 {fixed|increment}]
 [-vlan_id_step1 <0-4096>]
 [-vlan_id_step2 <0-4096>]
 [-vpi <0-255>]
 [-vpi_step <0-255>]
 [-vlan_ether_type1 { vlan_tag_0x8100| vlan_tag_0x88a8 |vlan_tag_0x9100}]
 [-vlan_ether_type2 { vlan_tag_0x8100| vlan_tag_0x88a8 |vlan_tag_0x9100}]
Arguments:
BFD Functions
66
 -active_mode
 Define whether this BFD session should actively attempt to
 establish a connection. Possible values are:
 active - Send BFD control packets for the BFD session,
 regardless of whether the system has received any
 BFD packets.
 passive - Do not send BFD control packets for the BFD
 session until the system has received a BFD
 packet.
 -count Defines the number of BFD routers to create. Possible values
 are 1 to <max_int>. The default is 1.
 -detect_multiplier
 The negotiated transmit interval multiplied by this value is
 the detection time for this session. Possible values range from
 2 to 100. The negotiated transmit interval, which is created by
 STC BLL automatically, is set to 50.
 -echo_rx_interval
 Specifies the minimum interval, in microseconds, between
 received BFD Echo packets. Possible values ranges from 0 to
 10000. If this value is zero, the transmitting system does
 not support the receipt of BFD Echo packets.
 -gateway_ip_addr
 Configures the IPv4 gateway address of the BFD router. The
 default is 192.85.1.1. This is the default gateway for
 routing the IPv4 address you specified in the -intf_ip_addr
 argument. The default gateway is the router that Spirent
 HLTAPI will use to reach hosts not on its local network.
 -gateway_ip_addr_step
 Configures the IPv4 gateway address for multiple routers.
 This argument is used with the -gateway_ip_addr argument.
 The default is 0.0.1.0.
 -gateway_ipv6_addr
 Configures the IPv6 gateway address of the BFD router.
 The default is 2000::1. This is the default gateway for
 routing the IPv6 address you specified in the
 -intf_ipv6_addr argument. The default gateway is the router
 that Spirent HLTAPI will use to reach hosts not on its local
 network.
 -gateway_ipv6_addr_step
 Configures the IPv6 gateway address for multiple routers.
 This argument is used with the -gateway_ipv6_addr argument.
 The default is 0:0:0:1::0.
 -handle
 Specifies the BFD router handle, a string value, to use when
 mode is set to "modify", "disable", or "delete".
 This argument is mandatory for every mode except
 "create" and "enable". See -port_handle.
 -intf_ip_addr
 Specifies the first IPv4 address in the group. The default
 for IPv4 is 192.85.1.3.
 -intf_ip_addr_step
 Specifies the difference between the interface IP addresses of
 consecutive hosts when multiple BFD hosts are created. The
 default increment is 1 (for example, 0.0.0.1). This
 argument is only applicable in create mode.
 -intf_ipv6_addr
 Specifies the IPv6 address of the interface for the
 emulated router that will establish an adjacency with the
 DUT. The default is 2000::2.
BFD Functions
67
 -intf_ipv6_addr_step
 Defines the increment used to generate IP addresses for
 emulated routers. Spirent HLTAPI increments the
 -intf_ipv6_addr value. You must specify the interface
 IP address step when the -count argument is greater than 1.
 The range of possible values is 0 to <max_int>. The default
 is 0:0:0:1::0.
 -ip_version
 Specifies the IP version of the BFD emulated router.
 Possible values are IPv4 (for IPv4 address format) or IPv6
 (for IPv6 address format).
 -local_mac_addr
 Specifies the first MAC address to use when emulating
 multiple clients. The default is 00:10:94:00:00:01.
 -local_mac_addr_step
 Specifies the increment to use to generate additional MAC
 addresses for multiple clients. Possible values range from
 00.00.00.00.00.01 to 00.00.7f.ff.ff.ff. The default is
 00.00.00.00.00.01.
 -mode
 Specifies the action to perform on the specified test port.
 The modes are described below:
 create - Creates one or more BFD routers on the port
 specified with the -port_handle argument. You must
 specify the -port_handle argument.
 enable - Same as create mode.
 modify - Changes the configuration for the BFD router
 identified by the -handle argument. You must
 specify the -handle argument.
 delete - Deletes all of the BFD routers specified in the
 -handle argument. You must specify the -handle
 argument.
 disable - Same as delete mode.
 -port_handle
 Specifies the port on which to create the BFD router when
 mode is set to "create." This argument is mandatory only for
 create and enable modes.
 -remote_ip_addr
 Specifies the SUT IP address for the BFD IPv4 session pool.
 -remote_ip_addr_step
 Specifies the step size in which the SUT IP address is
 incremented.
 -remote_ipv6_addr
 Specifies the SUT IP address for the BFD IPv6 session pool.
 -remote_ipv6_addr_step
 Specifies the step size in which the SUT IP address is
 incremented.
 -session_discriminator
 Specifies the BFD remote discriminator value.
 -session_discriminator_step
 Specifies the BFD session discriminator step value.

 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
BFD Functions
68
 range from 0 to 65535.
 -vci_step
 Specifies the step size in which the VCI value is
 incremented. Possible values range from 0 to 65535.
 -vlan_id1
 The VLAN ID of the first VLAN sub-interface (that is, the
 Inner VLAN ID). Possible values range from 0 to 4096. The
 default is 1.
 -vlan_id2
 The VLAN ID of the second VLAN sub-interface (that is, the
 Outer VLAN ID). Possible values range from 0 to 4096. The
 default is 1.
 -vlan_id_mode1
 Specifies VLAN ID assignment for multiple router
 configurations when -count is greater than 1. Valid values
 are "fixed" or "increment". If you configure more than one
 interface on Spirent HLTAPI with VLAN, you can choose to
 either automatically increment the VLAN tag (mode "increment")
 or leave it idle for each interface (mode "fixed"),
 in which case the VLAN ID is the same for all packets.
 If you set this argument to "increment", then you must also
 specify the -vlan_id_step1 argument to indicate the step size.

 -vlan_id_mode2
 Specifies VLAN ID assignment for multiple router
 configurations when -count is greater than 1. Valid values
 are "fixed" or "increment". If you configure more than one
 interface on Spirent HLTAPI with VLAN, you can choose to
 either automatically increment the VLAN tag (mode "increment")
 or leave it idle for each interface (mode "fixed"),
 in which case the VLAN ID is the same for all packets.
 If you set this argument to "increment", then you must also
 specify the -vlan_id_step2 argument to indicate the step size.
 -vlan_id_step1
 The value that Spirent HLTAPI uses to increment the VLAN
 ID. You must specify this step when you use specify
 "increment" for the -vlan_id_mode1 argument and the router
 count (-count) is greater than 1. Possible step values range
 from 0 to 4096.
 -vlan_id_step2
 The value that Spirent HLTAPI uses to increment the VLAN
 ID. You must specify this step when you use specify
 "increment" for the -vlan_id_mode2 argument and the router
 count (-count) is greater than 1. Possible step values range
 from 0 to 4096.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values are 0 to 255.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are 0 to 255.
 -vlan_ether_type1
 Specifies the inner VLAN EtherType. Possible values are
 vlan_tag_0x8100, vlan_tag_0x88a8 and vlan_tag_0x9100.
 You can use this argument when you specify the -vlan_id1
 argument. The types are described below:
 vlan_tag_0x8100 - Specifies EtherType value 0x8100, a value
 of 8100 in hexadecimal. When a frame has the VLAN
 EtherType equal to 8100, this frame carries the tag
 IEEE 802.1Q.
 
BFD Functions
69
 vlan_tag_0x88a8 - Specifies EtherType value 0x88a8, a value
 of 88a8 in hexadecimal. When a frame has the VLAN
 EtherType equal to 88A8, this frame carries the tag
 EEE 802.1ad.
 vlan_tag_0x9100 - Specifies EtherType value 0x9100, a value
 of 9100 in hexadecimal. When a frame has the VLAN
 EtherType equal to 9100, this frame carries the tag
 IEEE standard IEEE 802.1Q-1998.
 -vlan_ether_type2
 Specifies the outer VLAN EtherType. Possible values are
 vlan_tag_0x8100, vlan_tag_0x88a8 and vlan_tag_0x9100. You
 can use this argument when you specify the -vlan_id2
 argument. The types are described below:
 vlan_tag_0x8100 - Specifies EtherType value 0x8100, a value
 of 8100 in hexadecimal. When a frame has the VLAN
 EtherType equal to 8100, this frame carries the tag
 IEEE 802.1Q.

 vlan_tag_0x88a8 - Specifies EtherType value 0x88a8, a value
 of 88a8 in hexadecimal. When a frame has the VLAN
 EtherType equal to 88A8, this frame carries the tag
 IEEE 802.1ad.
 vlan_tag_0x9100 - Specifies EtherType value 0x9100, a value
 of 9100 in hexadecimal. When a frame has the VLAN
 EtherType equal to 9100, this frame carries the tag
 IEEE standard IEEE 802.1Q-1998.
Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -control_interval
 -control_plane_independent
 -pkts_per_control_interval
 -hop_mode
 -poll_interval
 -reset
 -encap_type
 -remote_mac_addr
 -remote_mac_addr_step
 -dlci
 -remote_discriminator
 -remote_discriminator_step
 -echo_bit
 -echo_timeout
 -echo_tx_interval
 -flap_tx_interval
 -performance_mode
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles A list of handles that identify the routers created by the
 sth::emulation_bfd_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_bfd_config function creates, enables,
 modifies, disables, or deletes an emulated BFD router. Use the -mode
BFD Functions
70
 argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)
 Use create or enable mode to create one or more routers with the BFD
 protocol. The handle of each BFD router is returned. Use the -count
 argument to specify how many routers to create. The routers can be further
 configured with modify mode, as well as removed with either delete or
 disable mode.
 When you create an emulated router, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated router will use for
 BFD communication. (The port handle value is contained in the keyed list
 returned by the connect function.)
 In addition to specifying the port, you must also provide one or more of
 the following pieces of information when you create a router:
 - The IP address for the emulated router (the -intf_ip_addr or
 -intf_ipv6_addr argument)
 - The IP address for the BFD router (DUT) to communicate with
 (the -gate_way_addr or -gateway_ipv6_addr argument)
 - The first MAC address to use when emulating multiple clients
 (the -local_mac_addr argument)
 - The SUT IP address for BFD IPv4 session pool (the -remote_ip_addr or
 -remote_ipv6_addr argument)
 After you create a router, use the "emulation_bfd_control -mode start"
 command for Spirent HLTAPI to start the router communication.
 Once you start sessions, Spirent HLTAPI handles all of the message
 traffic for the emulated routers. During the test, use the
 sth::emulation_bfd_control function to stop and re-start individual
 routers. To stop and start all of the routers associated with a particular
 port, use the restart mode with the sth::emulation_bfd_control
 function.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a BFD router:
 sth::emulation_bfd_config \
 -mode create \
 -port_handle port1 \
 -count 1 \
 -ip_version IPv4 \
 -local_mac_addr 00:10:94:00:00:01 \
 -local_mac_addr_step 00:00:00:00:00:01 \
 -intf_ip_addr 192.85.1.3 \
 -intf_ip_addr_step 0.0.1.0 \
 -remote_ip_addr 10.1.1.1\
 -gateway_ip_addr 192.85.1.1 \
 -gateway_ip_addr_step 0.0.1.0 \
 -vlan_id1 100 \
 -vlan_id_mode1 increment \
 -vlan_id_step1 10 \
 -vlan_id2 300 \
 -vlan_id_mode2 fixed \
 -session_discriminator 12 \
 -session_discriminator_step 1 \
 -detect_multiplier 2 \
 -echo_rx_interval 50 \
 -active_mode active
Sample output for example shown above:
 {handle router1} {handles router1} {status 1}
The following example stops the created BFD router at the router level
instead of at the port level:
BFD Functions
71
 sth::emulation_bfd_config -mode disable -handle bfdRtrHandle1
Sample output for example shown above: {status 1}
The following example modifies handle router1:
 sth::emulation_bfd_config \
 -mode modify \
 -handle bfdRtrHandle1 \
 -active_mode passive
Sample output for example shown above:
 {handle router1} {handles router1} {status 1}
The following example creates five BFD routers:
 sth::emulation_bfd_config -mode create \
 -port_handle port1 \
 -count 5 \
 -ip_version IPv4 \
 -local_mac_addr 00:10:94:00:00:01 \
 -local_mac_addr_step 00:00:00:00:00:01 \
 -intf_ip_addr 192.85.1.3 \
 -inft_ip_addr_step 0.0.1.0 \
 -remote_ip_addr 10.1.1.1 \
 -gateway_ip_addr 192.85.1.1 \
 -gateway_ip_addr_step 0.0.1.0 \
 -vlan_id1 100 \
 -vlan_id_mode1 increment \
 -vlan_id_step1 10 \
 -session_discriminator 12 \
 -session_discriminator_step 1 \
 -detect_multiplier 2 \
 -echo_rx_interval 50 \
 -active_mode active
Sample output for example shown above:
 {handle router1 router2 router3 router4 router5}
The following example deletes the specified BFD router:
 sth::emulation_bfd_config \
 -mode delete \
 -handle bfdRtrHandle1
Sample output for example shown above: {status 1}
 #### HLTAPI for Python ####
 The following example creates a BFD router

 device_ret0 = sth.emulation_bfd_config (
 mode = 'create',
 ip_version = 'IPv4',
 vlan_id_mode1 = 'increment',
 session_discriminator= '2',
 session_discriminator_step= '3',
 remote_ip_addr = '192.0.1.0',
 remote_ip_addr_step = '0.0.0.1',
 port_handle = port_handle[0],
 vlan_ether_type1 = 'vlan_tag_0x8100',
 vlan_id1 = '100',
 vlan_id_step1 = '1',
 local_mac_addr_step = '00:00:00:00:00:01',
 local_mac_addr = '00:10:94:00:00:01',
 intf_ip_addr = '192.85.1.3',
 gateway_ip_addr = '192.85.1.1',
 gateway_ip_addr_step= '0.0.0.0',
 intf_ip_addr_step = '0.0.0.1',
 echo_rx_interval = '0',
 active_mode = 'active',
 detect_multiplier = '3');
BFD Functions
72

 Output:
 {'status': '1', 'handles': 'router1', 'handle': 'router1'}

 #### HLTAPI for Perl ####
 The following example creates a BFD router

 my %device_ret0 = sth::emulation_bfd_config (
 mode => 'create',
 ip_version => 'IPv4',
 vlan_id_mode1 => 'increment',
 session_discriminator=> '2',
 session_discriminator_step=> '3',
 remote_ip_addr => '192.0.1.0',
 remote_ip_addr_step => '0.0.0.1',
 port_handle => "$hport[1]",
 vlan_ether_type1 => 'vlan_tag_0x8100',
 vlan_id1 => '100',
 vlan_id_step1 => '1',
 local_mac_addr_step => '00:00:00:00:00:01',
 local_mac_addr => '00:10:94:00:00:01',
 intf_ip_addr => '192.85.1.3',
 gateway_ip_addr => '192.85.1.1',
 gateway_ip_addr_step=> '0.0.0.0',
 intf_ip_addr_step => '0.0.0.1',
 echo_rx_interval => '0',
 active_mode => 'active',
 detect_multiplier => '3');

 Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'handles';
 $VAR4 = 'router1';
 $VAR5 = 'status';
 $VAR6 = '1';
Sample Input: See Examples.
Sample Output: See Examples.
Notes: None
End of Procedure Header
sth::emulation_bfd_control
Name:
 sth::emulation_bfd_control
Purpose:
 Starts, flaps, or stops a BFD router from routing
 traffic for the specified port.
Synopsis:
 sth::emulation_bfd_control
 -mode {start|stop|flap}
 [-handle <bfd_router_handle>]
 [-port_handle <port_handle>]
 [-flap_count <integer>]
 [-flap_interval <integer>]
Arguments:
 -handle
 Identifies the router handle, router interface handle, or
 session handle on which to stop or start the router. It is 
BFD Functions
73
 mandatory that you specify either -handle or -port_handle
 but not both.
 -mode
 Specifies the action to be taken on the specified handle or
 port handle. Possible values are stop, start, or flap.
 This argument is mandatory.
 stop - Stops the router for the specified port.
 start - Starts the router for the specified port.
 flap - Disconnects and then reconnects the link to the
 router based on the settings for -flap_count
 and -flap_interval.
 -flap_count
 Specifies the number of flaps. Each flap includes one
 suspend and one resume. The default is 5. This argument is
 valid only when -mode is set to "flap".
 -flap_interval
 Specifies the time, in seconds, between flap cycles.
 This argument is valid only when -mode is set to "flap".
 -port_handle
 Specifies the port on which BFD emulation will
 start, stop, flap, suspend or resume. It is
 mandatory that you specify either -handle or -port_handle
 but not both.
Cisco-specific Arguments:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_bfd_control function controls the routing of
 traffic through the specified ports. You can use the function to perform
 several actions: starting routers, stopping routers, suspending routers,
 resuming routers, and controlling route flapping.
 When the mode is set to "flap", Spirent HLTAPI stops the PDU that caused
 the BFD session to flap. Mode flap stops sending or responding for the
 specified flap interval. Each flap includes one suspend and one resume.
 Spirent HLTAPI enables you to use flapping in your network environment.
 You can use flapping to control various kind of events in your test
 environment, including routing. When you use the sth::emulation_bfd_control
 function to define flapping for your test, you must:
 - Define the flapping mode with "-mode flap".
 - Set -flap_count and -flap_interval to define the flapping
 cycle.
 - Specify where flapping will take place using -handle or port_handle.
 When you call the sth::emulation_bfd_control function, you specify a port
 handle. Spirent HLTAPI applies the specified action to all of the
 emulated BFD routers associated with the specified port.
Examples:
 #### HLTAPI for Tcl ####
 To start the specified BFD router:
 sth::emulation_bfd_control -mode start -handle $bfdRouterHandle
 To start all BFD routers on the specified port:
BFD Functions
74
 sth::emulation_bfd_control -mode start -port_handle $port1
 To control route flapping,
 sth::emulation_bfd_control -mode flap \
 -handle bfdRouterHandle \
 -flap_count 10 \
 -flap_interval 10
 To stop a BFD router:
 sth::emulation_bfd_control -mode stop -handle $bfdRouterHandle
 To stop all BFD routers on the specified port:
 sth::emulation_bfd_control -mode stop -port_handle $port1
 Sample Output: {status 1}
 #### HLTAPI for Python ####
 To start the specified BFD router:
 ctrl_ret1 = sth.emulation_bfd_control (
 handle = device_list,
 mode = 'start');

 Sample Output: {'status': '1'}

 #### HLTAPI for Perl ####
 To start the specified BFD router:
 my %ctrl_ret1 = sth::emulation_bfd_control (
 handle => "$device_list",
 mode => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';

Notes:
 None
End of Procedure Header
sth::emulation_bfd_info
Name:
 sth::emulation_bfd_info
Purpose:
 Returns information about the BFD configuration.
Synopsis:
 sth::emulation_bfd_info
 -mode {aggregate_stats | learned_info | clear_stats}
 [-handle <bfd_router_handle>]
 [-port_handle <port_handle>]

Arguments:
 -handle
 Specifies the router from which to extract BFD session
 data. It is mandatory that either -handle or -port_handle,
 but not both, be specified
 -mode
 Specifies the kind of information you want to see. Possible
 values are aggregate_stats, learned_info, and clear_stats. This
BFD Functions
75
 argument is mandatory.
 aggregate_stats - returns transmitted and received
 statistics for each port.
 learned_info - retrieves learned information by the BFD
 protocol. See the list below.
 clear_stats - Not supported.
 -port_handle
 Specifies the ports from which to extract BFD session data.
 It is mandatory that either -handle or -port_handle, but not
 both, be specified
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null
 The following keys are returned when you specify -mode aggregate_stats:
 <port_handle>.aggregate.routers_configured
 <port_handle>.aggregate.routers_running
 <port_handle>.aggregate.control_pkts_tx
 <port_handle>.aggregate.control_pkts_tx
 <port_handle>.aggregate.echo_self_pkts_tx
 <port_handle>.aggregate.echo_self_pkts_rx
 <port_handle>.aggregate.echo_dut_pkts_tx
 <port_handle>.aggregate.echo_dut_pkts_rx
 <port_handle>.aggregate.sessions_configured
 <port_handle>.aggregate.sessions_auto_created
 <port_handle>.aggregate.sessions_configured_up
 <port_handle>.aggregate.sessions_auto_created_up
 The following keys are returned when you specify -mode learned_info:
 Statistics list info will be returned per session basis.
 Example: learned_info.<handle>.statistics
 packet_rx BFD packets received
 packet_dr BFD packets received but dropped due to
 mismatch or error.
 poll_rx BFD packets received with Poll bit set
 final_rx BFD packets received with Final bit set
 echo_rx Echo packets received and reflected
 avg_intr_arriv Average inter-arrival time of received BFD
 packets. This value is not updated when
 session is not in Up state.
 min_intr_arriv Minimum inter-arrival time of received
 BFD packets. This value is not updated
 when session is not in Up state.
 max_intr_arriv Maximum inter-arrival time of received
 BFD packets. This value is not updated when
 session is not in Up state.
 packet_tx BFD packets transmitted.
 poll_tx BFD packets transmitted with Poll bit set
 final_tx BFD packets transmitted with Final bit set
 echo_tx Number of packets echoed
 avg_intr_dept Average inter-departure time of
 transmitted BFD packets. This value is not
 updated when session is not in Up state
 min_intr_dept Minimum inter-departure time of transmitted
BFD Functions
76
 BFD packets. This value is not updated when
 session is not in Up state
 max_intr_dept Maximum inter-departure time of
 transmitted BFD packets. This value is not
 updated when session is not in Up state
 to_down_state State changes to Down state.
 to_admin_down_state State changes to AdminDown state
 to_init_state State changes to Init state.
 to_up_state State changes to Up state.
Description:
 The sth::emulation_bfd_info function provides information about either
 the routers or ports specified for the BFD configuration.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input: sth::emulation_bfd_info \
 -mode learned_info \
 -handle $bfdRouterHandle
 Sample Output:
 {bfd_session_state DOWN} {learned_info {{router1 {{packet_rx 0}
 {to_down_state 1} {min_intr_arriv 1000} {packet_tx 473} {to_up_state 0}}}}}
 {status 1}
 Sample Input: sth::emulation_bfd_info \
 -mode learned_info \
 -port_handle port1
 Sample Output:
 {bfd_session_state DOWN} {learned_info {{router1 {{packet_rx 0}
 {to_down_state 1} {min_intr_arriv 1000} {packet_tx 83} {to_up_state 0}}}
 {router2 {{packet_rx 0} {to_down_state 1} {min_intr_arriv 1000}
 {packet_tx 0} {to_up_state 0}}}}} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret2 = sth.emulation_bfd_info (
 handle = device,
 mode = 'aggregate_stats');
 Sample Output:
 {'status': '1', 'bfd_session_state': 'DOWN'}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret2 = sth::emulation_bfd_info (
 handle => "$device",
 mode => 'aggregate_stats');

 Sample Output:
 $VAR1 = 'bfd_session_state';
 $VAR2 = 'DOWN';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 The aggregate_stats keys are currently not supported in Spirent
 TestCenter HLTAPI.
 The only learned_info keys supported are -packet_tx, packet_rx,
 min_intr_arriv, to_down_state, and to_up_state.
End of Procedure Header
BGP Functions
77
BGP Functions
Functions:
sth::emulation_bgp_config
sth::emulation_bgp_control
sth::emulation_bgp_route_config
sth::emulation_bgp_info
sth::emulation_bgp_route_info
sth::emulation_bgp_route_generator
sth::emulation_bgp_config
Name:
 sth::emulation_bgp_config
Purpose:
 Creates, enables, modifies, or deletes an emulated Border Gateway Protocol (BGP)
 router on a Spirent HLTAPI chassis. BGP is a protocol for exchanging routing
 information between border gateway routers in a network of autonomous systems.
Synopsis:
 sth::emulation_bgp_config
 -mode enable {-port_handle <port_handle> | -handle <device_handle>} |
 -mode {disable | modify | active | inactive | readvertise}
 -handle <router_handle> |
 -mode {disable | reset} -port_handle <port_handle>
 [-active_connect_enable {1|0}]
 [-affiliated_router_target <router_session_handle>]
 [-bfd_registration {1|0}]
 [-bgp_session_ip_addr {interface_ip | router_id}]
 [-count <integer>]
 [-graceful_restart_enable {1|0}]
 [-restart_time <0-10000000> ]
 [-hold_time <3-65535>]
 [-ip_version {4|6}]
 [-ip_stack_version 4 | 6 | 4_6}]
 [-ipv4_mpls_nlri {1|0}]
 [-ipv4_mpls_vpn_nlri {1|0}]
 [-ipv4_multicast_nlri {1|0}]
 [-ipv4_unicast_nlri {1|0}]
 [-ipv6_mpls_nlri {1|0}]
 [-ipv6_mpls_vpn_nlri {1|0}]
 [-ipv6_multicast_nlri {1|0}]
 [-ipv6_unicast_nlri {1|0}]
 [-local_as <1-65535> ]
 [-local_as_mode {fixed|increment}]
 [-local_as_step <integer>]
 [-local_as4_mode <fixed | increment>]
 [-local_as4 < 1:1-65535:65535>]
 [-local_as4_step <1:1-65535:65535>]
 [-local_addr_step {<a.b.c.d> |
 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}]
 [-local_ip_addr <a.b.c.d>]
 [-local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_router_id <a.b.c.d.>]
 [-mac_address_start <aa:bb:cc:dd:ee:ff>]
 [-md5_enable {1|0}]
 [-md5_key <alphanumeric>]
 [-md5_key_id <integer>]
 [-netmask <1-128> ]
 [-netmask_ipv6 <1-128>]
 [-next_hop_ip {<a.b.c.d> |
 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}]
BGP Functions
78
 [-next_hop_ip_step {<a.b.c.d> |
 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}]
 [-next_hop_ipv6 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-next_hop_ipv6_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-port_handle <port_handle>]
 [-remote_addr_step {<a.b.c.d> |
 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}]
 [-remote_as <0-65535>]
 [-remote_as_mode <fixed | increment>]
 [-remote_as_step <integer>]
 [-remote_as4_mode <fixed | increment>]
 [-remote_as4_step < 1:1-65535:65535>]
 [-remote_as4 <0:0-65535:65535>]
 [-remote_ip_addr <a.b.c.d>]
 [-remote_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-retries <0-65535>]
 [-retry_time <10-300>]
 [-routes_per_msg <0-10000>]
 [-staggered_start_enable {0|1}]
 [-staggered_start_time <0-10000>]
 [-update_interval <0-10000>]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vlan_cfi {1|0}]
 [-vlan_id <0-4095>]
 [-vlan_id_mode {fixed|increment}]
 [-vlan_id_step <1-4094>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_mode {fixed|increment}]
 [-vlan_outer_id_step <1-4094>]
 [-vlan_outer_user_priority <0-7>]
 [-vlan_user_priority <0-7>]
 [-vpi <0-255>]
 [-vpi_step <0-255>]
 [-tunnel_handle <GRE_tunnel_handle>]
 [-local_router_id_step <a.b.c.d>]
 [-route_refresh {0|1}]
 [-stale_time <0-10000000>]
 [-vpls_nlri {0|1}]
 [-vpls_version {VERSION_00 | VERSION_02 | VERSION_VPLS_4761}]
Arguments:
 -active_connect_enable
 Indicates whether or not the emulated router will initiate
 the session. Possible values are 0 and 1. The default is 0
 (disabled). If enabled, the emulated router will send an
 OPEN message without waiting for the device under test to
 send its OPEN message.
 -affiliated_router_target
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the router to which the indirectly connected
 router will be connected. The value for the router session
 handle is alphanumeric. This option is used to support BGP
 testing where the remote IP address (-remote_ip_addr) is in
 a different subnet from the local IP address
 (-local_ip_addr). For example, you could create an OSPF
 router to advertise IP routes. From this router, you could
 then create an indirectly connected router to run BGP.
 set retKeyList [::sth::emulation_bgp_config -mode enable \
 -port_handle $p0 \
 -affiliated_router_target $ospf_router_handle\
 -count 1 \
 The value of "mac_address_start <mac_addr>" will be ignored
 when you pass in a value for the -affiliated_router_target
 argument. Spirent HLTAPI fills in the MAC address of
 the indirectly connected router using the MAC address
 obtained from the router pointed to by the
 affiliated router target handle. Note that there is no
BGP Functions
79
 support for the retrieval of the MAC address for a
 router in the HLTAPI framework.
 -bfd_registration
 Enables or disables Bidirectional Forwarding
 Detection (BFD) registration. Possible values are 1 (enable)
 and 0 (disable). The default is 0.
 -bgp_session_ip_addr
 Specifies which IP address will be used to establish the BGP
 session. Possible values are described below:
 interface_ip - Use the interface IP address
 router_id - Use the router ID
 The default is interface_ip.
 -count
 Defines the number of BGP routers to create. Possible values
 are 0 to <max_int>. The default is 1.
 -graceful_restart_enable
 Enables a graceful restart operation on an emulated router
 within a specified amount of time or "grace period."
 Graceful restart allows a router undergoing a restart to
 inform its adjacent neighbors and peers of its condition and
 to preserve its forwarding table during a BGP restart
 operation. Possible values are 0 and 1. The default is 0.
 If you enable this option, you must also use the
 -restart_time argument to specify the time allowed for the
 restart operation.
 There are two modes of graceful restart for BGP: restart
 speaker and receiving speaker. When the receiving speaker
 (which may be the emulated router or the DUT) receives a
 graceful restart capability in the BGP OPEN message, it will
 keep the routers advertised by the restart router before the
 restart time expires for forwarding traffic. When the
 restart speaker does not come up within the restart_time,
 the receiving speaker will delete the routes and stop using
 them to forward traffic. In general, restart time (see
 -restart_time) should not be greater than hold time (see
 -hold_time).
 -handle
 This argument is mandatory for modify, active and inactive
 modes. When -mode is set to create, Spirent HLTAPI creates BGP
 over the provided device. (Please refer to the description of
 the -mode argument for more information)
 -hold_time
 Defines the session expiration interval in seconds. The
 expiration interval determines how long to wait for a
 KEEPALIVE message before ending a BGP session for an
 emulated router. Spirent HLTAPI also uses the -hold_time
 value to determine the interval between transmitted
 KEEPALIVE messages. The transmission interval is one-third
 of the session expiration interval. Possible -hold_time
 values range from 3 to 65535. The default is 90. (Therefore,
 using the default value, Spirent HLTAPI will transmit
 KEEPALIVE messages every 30 seconds.)
 -ip_version
 Specifies the IP version of the BGP emulated session.
 Possible values are 4 (for IPv4 address format) or 6 (for
 IPv6 address format).
 -ip_stack_version
 Specifies the IP version of the BGP emulated router. Possible
 values are 4, 6, and 4_6(dual stack). When the IP version of the
BGP Functions
80
 stack is 4, the BGP session version can only be 4. When
 the IP version of the stack version is 6, the BGP session version
 can only be 6. When the IP version of the stack is dual stack,
 the BGP session is determined by ip_version. By default, the IPv4
 BGP session will be created.
 -ipv4_mpls_nlri
 Enables or disables support for IPv4 multiprotocol label
 switching (MPLS) in the Capabilities Optional Parameter and
 Multiprotocol Extensions parameter of the OPEN message.
 Possible values are 0 and 1. If you set this value to 1,
 support for IPv4 MPLS is advertised in the Capabilities
 Optional Parameter/Multiprotocol Extensions parameter of the
 OPEN message.
 -ipv4_mpls_vpn_nlri
 Enables or disables support for IPv4 MPLS VPN. Possible
 values are 0 and 1. If you set this value to 1, support for
 IPv4 MPLS VPN is advertised in the Capabilities Optional
 Parameter/Multiprotocol Extensions parameter of the OPEN
 message.
 -ipv4_multicast_nlri
 Enables or disables support for IPv4 multicast. Possible
 values are 0 and 1. If you set this value to 1, support for
 IPv4 multicast is advertised in the Capabilities Optional
 Parameter/Multiprotocol Extensions parameter of the OPEN
 message.
 -ipv4_unicast_nlri
 Enable or disable support for IPv4 Unicast. Possible values
 are 0 and 1. If you set this value to 1, support for IPv4
 unicast is advertised in the Capabilities Optional
 Parameter/Multiprotocol Extensions parameter of the OPEN
 message.
 -ipv6_mpls_nlri
 Enable or disable support for IPv6 multiprotocol label
 switching (MPLS) in the Capabilities Optional Parameter and
 Multiprotocol Extensions parameter of the OPEN message.
 Possible values are 0 and 1. If you set this value to 1,
 support for IPv6 MPLS is advertised in the Capabilities
 Optional Parameter/Multiprotocol Extensions parameter of the
 OPEN message.
 -ipv6_mpls_vpn_nlri
 Enable or disable support for IPv6 MPLS VPN. Possible values
 are 0 and 1. If you set this value to 1, support for IPv6
 MPLS VPN is advertised in the Capabilities Optional
 Parameter/Multiprotocol Extensions parameter of the OPEN
 message.
 -ipv6_multicast_nlri
 Enable or disable support for IPv6 Multicast. Possible
 values are 0 and 1. If you set this value to 1, support for
 IPv6 multicast is advertised in the Capabilities Optional
 Parameter/Multiprotocol Extensions parameter of the OPEN
 message.
 -ipv6_unicast_nlri
 Enable or disable support for IPv6 Unicast. Possible values
 are 0 and 1. If you set this value to 1, support for IPv6
 unicast is advertised in the Capabilities Optional
 Parameter/Multiprotocol Extensions parameter of the OPEN
 message.
 -local_addr_step
 Defines the increment used to generate IP addresses for emulated
 routers. Spirent HLTAPI increments the -local_ip_addr value. You
 must specify the local address step when the -count argument is
 greater than 1. The value must be in IPv4 format.
BGP Functions
81
 -local_as
 The Autonomous System (AS) number of the emulated BGP
 router. Possible values range from 1 to 65535. The default
 is 1.
 -local_as_mode
 When configuring multiple BGP neighbors, sets the
 -local_as for multiple neighbors. Possible values are fixed
 and increment. The default is fixed.
 -local_as_step
 When configuring multiple BGP neighbors, defines the step
 of the increment for -local_as.
 -local_as4_mode
 Indicates the method to assign local 4-byte AS number(s) to
 multiple neighbors, when multiple BGP neighbors are
 configured. Possible values are fixed and increment.
 The default value is fixed.
 -local_as4
 The 4-byte Autonomous System (AS) number of the
 emulated BGP router. When the -local_as4 argument is
 specified, BGP will carry an AS number encoded as
 a 4-byte entity. The format must be n:n.
 Possible values range from 1:1 to 65535:65535.
 -local_as4_step
 When configuring multiple BGP neighbors, defines the
 increment step for the AS number of the BGP router. The
 format must be n:n. Possible values range from 1:1 to
 65535:65535. There is no default value for this argument.
 If you set -local_as4_mode to increment, you must
 specify this step. Otherwise, HLTAPI will return an error.
 -remote_as4
 The 4-byte AS number of the DUT. The format must
 be n:n. Possible values range from 0:0 to 65535:65535.
 -local_ip_addr
 Specifies the IPv4 address of the emulated router. The
 default is 192.85.1.3.
 -local_ipv6_addr
 Specifies the IPv6 address of the emulated router. The
 default is 2000::2.
 -local_ipv6_addr_step
 Defines the increment to generate IPv6 addresses for
 multiple emulated routers. Spirent HLTAPI increments the
 -local_ipv6_addr.
 -local_router_id
 Identifies the router from which a packet originated. The
 router identifier is the IP address of the emulated router.
 The default is 192.0.0.1.
 -mac_address_start
 Initial MAC address of the interfaces created for the BGP
 neighbor configuration.
 -md5_enable
 Enables or disables MD5 authentication for the emulated BGP
 node. Possible values are 0 (disable) and 1 (enable). The
 default is 0.
 -md5_key
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the MD5 authentication password in MD5 authentication
 mode. You can specify this argument when -md5_enable is enabled.
BGP Functions
82
 This argument must be in alphanumeric format.
 -md5_key_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the MD5 authentication key in MD5 authentication
 mode. Possible values range from 0 to 255. You can specify
 this argument when -md5_enable is enabled.
 -mode
 Specifies the action to perform on the specified test port.
 Possible values are enable, disable, modify, reset, active or
 inactive. The modes are described below:
 enable - Creates one or more emulated routers.
 When -port_handle is provided, Spirent HLTAPI
 creates one or more emulated routers that are associated
 with the specified port.
 When -handle is provided, BGP will be created over
 the specified device. In this case, the following options
 will be obsoleted:
 -count
 -mac_address_start
 -local_ip_addr
 -local_addr_step
 -netmask
 -local_ipv6_addr
 -next_hop_ip
 -next_hop_ip_step
 -local_router_id_enable
 -local_router_id
 -local_router_id_step
 -affiliated_router_target
 -vci
 -vci_step
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vpi
 -vpi_step
 -tunnel_handle
 -vlan_outer_id
 -vlan_outer_id_mode
 -vlan_outer_id_step
 -vlan_outer_user_priority
 disable - Same as the description for "reset".
 modify - Changes the configuration for the emulated router
 identified by the -handle argument.
 reset - Deletes all BGP routers associated with the
 specified port.
 active - Enables the BGP router specified by the -handle
 argument. You must specify a valid BGP session handle.
 inactive - Disables the BGP router specified by the -handle
 argument. You must specify a valid BGP session handle.
 The configuration for the router is retained
 when it is inactive and is available as configured if the
 router is active.

 readvertise - Re-sends the BGP route from the list of routers at
 router level. For example:

 ::sth::emulation_bgp_config -mode readvertise
 -handle $handleBGP 
BGP Functions
83
 -netmask
 The prefix length of the BGP router's IPv4 address, in number of
 bits. Possible values range from 1 to 32. The default value is
 24.
 -netmask_ipv6
 The prefix length of the BGP router's IPv6 address, in number of
 bits. Possible values range from 1 to 128. The default value is
 64.
 -next_hop_ip
 Configures the IPv4 address of the next hop in IP traffic.
 The hop address is the IP address which Spirent TestCenter
 uses to reach the advertising router. The "next hop" is the
 next router to forward a packet to its final destination.
 -next_hop_ip_step
 Configures the step value to increment the IPv4 address of the
 next hop. The default value is 0.0.0.1.
 -next_hop_ipv6
 Configures the IPv6 address of the next hop in IPv6 traffic.
 The hop address is the IPv6 address that Spirent TestCenter
 uses to reach the advertising router. The "next hop" is the
 next router to forward a packet to its final destination.
 -next_hop_ipv6_step
 Configures the increment used to generate the IPv6 address for
 the next hop. Spirent HLTAPI increments the next_hop_ipv6.
 -port_handle
 The port on which to create the emulated router. This handle
 is returned by the sth::connect function. (Please refer to the
 description of the -mode argument for more information)
 -remote_addr_step
 Defines the increment used to generate remote IP addresses
 for emulated routers. Spirent HLTAPI increments either
 the -remote_ip_addr value or the -remote_ipv6_addr,
 depending on the IP version you are using. You must specify
 the remote address step when the -count argument is greater
 than 1. The value can be in either IPv4 or IPv6 format,
 depending on the IP version specified in -ip_version.
 -remote_as
 The Autonomous System number of the DUT. Possible values
 range from 0 to 65535. The default is 1001.
 -remote_as_mode
 Determines the method to assign AS number of the remote DUT, when
 configuring multiple BGP neighbors. Possible values are fixed
 and increment. The default is fixed.
 -remote_as_step
 When configuring multiple BGP neighbors, defines the step of the
 increment for -remote_as.
 -remote_as4_mode
 Determines the method to assign 4-byte AS number of the remote
 DUT when multiple BGP neighbors are configured. Possible values
 are fixed and increment. The default value is fixed.
 -remote_as4_step
 When configuring multiple BGP neighbors, defines the
 increment step for the AS number of the BGP router. The
 format must be n:n. Possible values range from 1:1 to
 65535:65535. There is no default value for this argument.
 If you set -remote_as4_mode to increment, you must
 specify this step. Otherwise, HLTAPI will return an error.
 -remote_ip_addr
BGP Functions
84
 IPv4 address of the DUT interface that is connected to the
 Spirent HLTAPI port for the emulated router. The default
 is 192.85.1.1.
 -remote_ipv6_addr
 IPv6 address of the DUT interface that is connected to the
 Spirent HLTAPI port for the emulated router. The default
 is 2000::1.
 -restart_time
 Specifies the maximum number of seconds allowed to re-
 establish a BGP session between the emulated router and the
 DUT (peer router) following a restart operation. When the
 router restarts its BGP process, the DUT marks all routes as
 "stale," but continues to use them to forward packets based
 on the expectation that the restarting router will re-
 establish the BGP session shortly. If the time expires
 before the router restarts, then the DUT will start sending
 the routing information, which will cause problems for the
 restart router. Therefore, be sure to allow enough time.
 Possible values range from 1 to 255. The default is 90
 seconds. Specify the restart time only if
 -enable_graceful_restart is enabled.
 -retries
 Specifies the number of times that Spirent HLTAPI will
 attempt to establish a connection with the DUT router(s).
 Possible values range from 0 to 65535. The default is 100.
 -retry_time
 Specifies the time in seconds between attempts to establish
 a connection for the session. Possible values range from 10
 to 300. The default is 30.
 -routes_per_msg
 The maximum number of prefixes to encode in an UPDATE
 message. Possible values range from 0 to 10000. The default
 is 2000.
 -staggered_start_enable
 Determines whether emulated routers advertise their routes
 sequentially across ports. If enabled, Spirent HLTAPI
 sends BGP OPEN messages for each session in a staggered
 fashion. The interval between each OPEN message is defined
 in the -staggered_start_time argument. Possible values are
 0 and 1. The default is 0.
 -staggered_start_time
 Specifies the staggered start interval between OPEN
 messages, in milliseconds. Possible values range from 0 to
 10000. The default is 100.
 -tunnel_handle
 Specifies the GRE tunnel handle, an array value, initialized
 by the emulation_gre_config command. The router sends traffic
 through this tunnel.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 1. If set to 0, it indicates
 the network is Ethernet. If set to 1, it indicates that
 Token Ring and packets are dropped by Ethernet ports.
 -update_interval
 The time, in milliseconds, to wait before sending the next
 UPDATE message to the DUT. Possible values range from 0 to
 10000. The default is 30.
 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
BGP Functions
85
 range from 0 to 65535.
 -vci_step
 Specifies the step size in which the VCI value is
 incremented. Possible values range from 0 to 65535.
 -vlan_id
 The VLAN ID of the first VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1.
 -vlan_id_mode
 Specifies VLAN ID assignment for multiple router
 configurations when -count is greater than 1. Valid values
 are "fixed" or "increment". If you specify "fixed", all of
 the routers will be assigned the same VLAN ID (the value of
 the -vlan_id argument). If you specify "increment", then
 Spirent HLTAPI assigns unique VLAN IDs. When you use
 increment mode, you must also specify the -vlan_id_step
 argument to define the increment value.
 -vlan_id_step
 The value that Spirent HLTAPI uses to increment the VLAN
 ID. You must specify this step when you specify
 "increment" for the -vlan_id_mode argument and the router
 count (-count) is greater than 1. Possible step values range
 from 1 to 4094.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id.
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when router count
 is greater than 1. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values range
 from 1 to 4094. You must specify this step when you specify
 "increment" for the -vlan_outer_id_mode argument.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 7.
 -vlan_user_priority
 VLAN priority for the VLANs on this port. Possible values
 range from 0 to 7. The default is 7.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values are 0 to 255.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are 0 to 255.
BGP Functions
86
 -local_router_id_step
 Defines the step size in which the BGP4 router ID of the
 emulated node is incremented. The value must be in IPv4 format.
 The default value is 0.0.0.1.
 -route_refresh
 Disables/enables the Route Refresh Capability of the
 emulated BGP router(s). The Route Refresh Capability allows
 the dynamic exchange of route refresh request between BGP
 speakers and subsequent re-advertisement of the respective
 Adj-RIB-Out. Possible values are 0 and 1. If it is set to 0,
 it disables the Route Refresh Capability. If it is set to 1,
 it enables the Route Refresh Capability. The default value is
 0.

 -stale_time
 Indicates the amount of time, in seconds, after which an
 End-Of-RIB marker is sent in an Update message to the peer
 - to allow time for routing convergence via IGP and BGP route
 selection. The receiving peer then deletes the stale routing
 information for that address family. This argument is used when
 -enable_graceful_restart is 1. Possible values range from 0 to
 10000000.
 -vpls_nlri
 Enables Virtual Private LAN Service (VPLS) capability for
 emulated BGP router(s). Possible values are 0 and 1. The
 default value is 0.
 -vpls_version
 Spirent Extension (for Spirent HLTAPI only).
 Determines which VPLS version to use. Possible values are
 described below:
 VERSION_00 - draft-ietf-l2vpn-vpls-bgp-00
 VERSION_02 - draft-ietf-l2vpn-vpls-bgp-02
 VERSION_VPLS_4761 - VPLS RFC 4761
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -route_ip_addr_step
 -ls_* (BGP Link State specific arguments)
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -advertise_host_route
 -local_router_id_enable
 -modify_outgoing_as_path
 -neighbor_type
 -next_hop_enable
 -next_hop_mode
 -next_hop_ip_version
 -remote_confederation_member
 -reset
 -suppress_notify
 -tcp_window_size
 -timeout
 -update_msg_size
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 handles A list of handles that identify the routers created by the
BGP Functions
87
 sth::emulation_bgp_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_bgp_config function creates, enables,
 modifies, or deletes an emulated BGP router. Use the -mode argument to
 specify the action to perform. (See the -mode argument description for
 information about the actions.)
 When you create an emulated router, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated router will use for
 BGP communication. (The port handle value is contained in the keyed list
 returned by the connect function.)
 In addition to specifying the port, you must also provide one or more of
 the following pieces of information when you create a router:
 - The IP address for the emulated router (the -local_router_id or
 -local_ipv6_addr argument)
 - The IP address for the BGP router (DUT) to communicate with (the
 -remote_ip_addr or -remote_ipv6_addr argument)
 - The autonomous systems for the emulated router and its BGP router for the
 session (the -local_as or -remote_as argument)
 - The hold time value the emulated router will use (the -hold_time
 argument)
 - The amount of time between UPDATE messages (the -update_interval
 argument)
 - VLAN membership information (the -vland_id, vlan_id_mode, and/or
 vlan_id_step arguments)
 After you create a router, use the "emulation_bgp_control -mode start"
 command for Spirent HLTAPI to start the router communication.
 A BGP session is a periodic stream of BGP messages sent between BGP
 peers - an OPEN message followed by a series of UPDATE and KEEPALIVE
 messages. OPEN messages establish the session. BGP routers use
 KEEPALIVE messages to maintain sessions, and UPDATE messages to
 exchange routing table data.Session termination is indicated by a
 NOTIFICATION message.
 Once you start sessions, Spirent HLTAPI handles all of the message
 traffic for the emulated routers. During the test, use the
 sth::emulation_bgp_control function to stop and re-start individual
 routers. To stop and start all of the routers associated with a particular
 port, use the restart mode with the sth::emulation_bgp_control
 function. After you have created the routers for your test, use the
 sth::emulation_bgp_route_config function to set up routes.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a BGP router:
 sth::emulation_bgp_config
 -active_connect_enable 0 \
 -mode enable \
 -count 1 \
 -graceful_restart_enable 0 \
 -hold_time 50 \
 -ip_version 4 \
 -ipv4_mpls_nlri 0 \
 -ipv4_mpls_vpn_nlri 0 \
 -ipv4_multicast_nlri 0 \
 -ipv4_unicast_nlri 0 \
 -local_addr_step 0.0.2.0 \
BGP Functions
88
 -local_as 5 \
 -local_as_step 1 \
 -local_ip_addr 192.168.1.6 \
 -local_router_id 192.168.1.6 \
 -netmask 24 \
 -next_hop_ip 192.168.1.1 \
 -port_handle $port_handle1 \
 -remote_addr_step 0.0.1.0 \
 -remote_as 6 \
 -remote_ip_addr 192.168.2.1 \
 -restart_time 50 \
 -retries 5 \
 -retry_time 50 \
 -routes_per_msg 5 \
 -staggered_start_enable 1
 -staggered_start_time 30 \
 -update_interval 50 \
 -vlan_cfi 0 \
 -vlan_id 5 \
 -vlan_id_mode increment \
 -vlan_id_step 1 \
 -vlan_user_priority 1
Sample output for example shown above:
 {handles router1} {handle router1} {status 1}
The following example stops all routers on the specified port:
 sth::emulation_bgp_config -mode disable -port_handle port1
Sample output for example shown above: {status 1}
The following example modifies handle router1:
 sth::emulation_bgp_config \
 -mode modify \
 -handle router1 \
 -active_connect_enable 1 \
 -remote_as 123
Sample output for example shown above: {status 1}
The following example creates five BGP routers:
sth::emulation_bgp_config -mode enable \
 -port_handle port1 \
 -count 5 \
 -active_connect_enable 1 \
 -ip_version 4 \
 -local_ip_addr 61.25.0.11 \
 -remote_ip_addr 61.25.0.1 \
 -next_hop_ip 61.25.0.1 \
 -next_hop_ip_step 0.0.1.0 \
 -local_as 123 \
 -local_router_id 61.25.0.11 \
 -remote_as 123 -vlan_id 101 \
 -vlan_id_mode increment \
 -vlan_id_step 1 \
 -local_addr_step 0.0.1.0 \
 -remote_addr_step 0.0.0.1 \
 -retry_time 30 \
 -retries 10 \
 -routes_per_msg 20 \
 -hold_time 180 \
 -update_interval 45 \
 -ipv4_unicast_nlri 1
Sample output for example shown above:

 BGP: {handles {router1 router2 router3 router4 router5}} {handle {router1
 router2 router3 router4 router5}} {status 1} 
BGP Functions
89
 The following example enables BGP over a provided device:
 puts "Config LDP--------------------"
 set routerStatus [sth::emulation_ldp_config -mode create \
 -port_handle $port1Handle \
 -intf_ip_addr 13.25.0.2\
 -loopback_ip_addr 13.25.0.1 \
 -gateway_ip_addr 13.25.0.1\
 -remote_ip_addr 13.25.0.2 \
 -graceful_recovery_timer 55 \
 -keepalive_interval 56 \
 -reconnect_time 57 \
 -recovery_time 58 \
 -egress_label_mode exnull \
 -label_adv on_demand \
 -bfd_registration 1 \
 ]
 puts "LDP: $routerStatus"
 keylget routerStatus handle router
 puts "Config BGP--------------------"
 set routerStatus [sth::emulation_bgp_config
 -mode enable \
 -handle $router \
 -active_connect_enable 1 \
 -ip_version 4 \
 -local_as 123 \
 -local_router_id 4.4.4.4 \
 -remote_as 112\
 -retry_time 30 \
 -retries 10 \
 -routes_per_msg 2000 \
 -hold_time 90 \
 -graceful_restart_enable 1 \
 -restart_time 90 \
 -update_interval 30 \
 ]
 puts "BGP: $routerStatus"
Sample output for example shown above:
 Config LDP--------------------
 LDP: {handle router1} {handles router1} {status 1}
 Config BGP--------------------
 BGP: {handles router1} {handle router1} {status 1}
The following example deletes all BGP routers on the specified port:
sth::emulation_bgp_config -mode reset \
 -port_handle port1
Sample output for example shown above: {status 1}
The following example executes stc::apply once when you call
emulation_bgp_route_config to add routes in a large scale case. This
command enables optimization (that is, it disables the implicit "apply" inside of
each HLTAPI command).
 ::sth::test_control -action enable

 for {set routerIndex 0} {$routerIndex < $routerNum} {incr routerIndex 1} {
 set routeStatus [sth::emulation_bgp_route_config
 -mode add \
 -handle [lindex $hBgpRouter2 $routerIndex] \
 -prefix [lindex $bgpPrefixList2 $routerIndex] \
 -num_routes $prefixNum \
 -prefix_step 1 \
 -netmask $prefixMask \
 -ip_version 4 \
 -as_path as_seq:1001 \
BGP Functions
90
 -next_hop_ip_version 4 \
 -next_hop [lindex $bgpAddrList2 $routerIndex] \
 -local_pref 10 ]
 }
 #implicit do the stc "apply"
 ::sth::test_control -action sync
 #### HLTAPI for Python ####
 The following example creates a BFD router:
 device_ret0 = sth.emulation_bgp_config (
 mode = 'enable',
 retries = '100',
 vpls_version = 'VERSION_00',
 routes_per_msg = '2000',
 staggered_start_time= '100',
 update_interval = '30',
 retry_time = '30',
 staggered_start_enable= '1',
 md5_key_id = '1',
 md5_key = 'Spirent',
 md5_enable = '0',
 ipv4_unicast_nlri = '1',
 ip_stack_version = '4',
 port_handle = port_handle[0],
 local_as4 = '1:1',
 remote_ip_addr = '192.85.1.1',
 ip_version = '4',
 remote_as = '1001',
 hold_time = '90',
 restart_time = '90',
 route_refresh = '0',
 local_as = '23456',
 active_connect_enable= '1',
 stale_time = '90',
 graceful_restart_enable= '0',
 local_router_id = '192.0.0.1',
 mac_address_start = '00:10:94:00:00:01',
 local_ip_addr = '192.85.1.3',
 next_hop_ip = '192.85.1.1',
 netmask = '24');

 Sample Output:
 {'status': '1', 'handles': 'emulateddevice1', 'handle': 'emulateddevice1'}
 #### HLTAPI for Perl ####
 The following example creates a BFD router:
 my %device_ret0 = sth::emulation_bgp_config (
 mode => 'enable',
 retries => '100',
 vpls_version => 'VERSION_00',
 routes_per_msg => '2000',
 staggered_start_time=> '100',
 update_interval => '30',
 retry_time => '30',
 staggered_start_enable=> '1',
 md5_key_id => '1',
 md5_key => 'Spirent',
 md5_enable => '0',
 ipv4_unicast_nlri => '1',
 ip_stack_version => '4',
 port_handle => "$hport[1]",
 local_as4 => '1:1',
 remote_ip_addr => '192.85.1.1',
 ip_version => '4',
 remote_as => '1001',
 hold_time => '90',
 restart_time => '90',
 route_refresh => '0',
BGP Functions
91
 local_as => '23456',
 active_connect_enable=> '1',
 stale_time => '90',
 graceful_restart_enable=> '0',
 local_router_id => '192.0.0.1',
 mac_address_start => '00:10:94:00:00:01',
 local_ip_addr => '192.85.1.3',
 next_hop_ip => '192.85.1.1',
 netmask => '24');
 Sample Output:
 $VAR1 = 'handles';
 $VAR2 = 'emulateddevice1';
 $VAR3 = 'handle';
 $VAR4 = 'emulateddevice1';
 $VAR5 = 'status';
 $VAR6 = '1';
Notes: None
End of Procedure Header
sth::emulation_bgp_control
Name:
 sth::emulation_bgp_control
Purpose:
 Starts or stops a BGP router from routing traffic for the specified
 port.
Synopsis:
 sth::emulation_bgp_control
 -mode {start|stop|restart|link_flap|full_route_flap}
 -handle <port_handle>
 [-flap_count <integer>]
 [-link_flap_down_time <0-10000000>]
 [-link_flap_up_time <0-10000000>]
 [-route_flap_down_time <0-10000000>]
 [-route_flap_up_time <0-10000000>]
 [-route_handle <BGP_route_handle>]
Arguments:
 -handle
 Identifies the port on which to stop or start the router.
 This argument is mandatory. If link flapping is enabled,
 specifies on which BGP neighbor the action will be taken.
 If route flapping is enabled, specifies on which BGP route
 range the action will be taken.
 -flap_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of flaps. This argument can be used when
 you specify -mode link_flap or -mode full_route_flap. When you
 specify -mode link_flap, each flap includes one disconnection
 and one reconnection of the TCP link between the DUT and the
 emulated router(s) defined by -handle. When you specify -mode
 full_route_flap, each flap includes one advertise and one
 withdraw.
 -link_flap_down_time
 Specifies the amount of time, in seconds, that the link is
 disconnected. Possible values range from 0 to 10000000. This
 argument is valid only when -mode is set to "link_flap".
BGP Functions
92
 -link_flap_up_time
 Specifies the amount of time, in seconds, that the link is
 connected. Possible values range from 0 to 10000000. This
 argument is valid only when -mode is set to "link_flap".
 -mode
 Specifies the action to be taken. Possible values are stop,
 start, or restart the BGP router. This argument is mandatory.
 stop - Stops the router for the specified port.
 start - Starts the router for the specified port.
 restart - Stops and then starts the router for the
 specified port.
 link_flap - Disconnects the TCP link(s) between the DUT and the
 emulated router(s) for the time specified by
 -link_flap_down_time;
 then it reconnects the TCP link(s) for the time specified
 by the -link_flap_up_time argument.
 For example, you can call the following command to control
 link flapping.
 set startStatus [sth::emulation_bgp_control
 -mode link_flap \
 -handle $bgprouterList \
 -link_flap_down_time 10 \
 -link_flap_up_time 10 \
 -flap_count 2]
 In this example, Spirent TestCenter disconnects and then
 reconnects the TCP links between the DUT and the routers
 defined by -handle. The value of the -handle argument can
 either be a router handle or a list of router handles.
 full_route_flap - Withdraws the routes (-route_handle) for the
 time defined by -route_flap_down_time and then
 readvertises the routes for the time defined by
 -route_flap_up_time.
 For example, you can call the following command to control
 route flapping.
 set startStatus [sth::emulation_bgp_control
 -mode full_route_flap \
 -handle $bgprouterList \
 -route_handle $bgprouteList \
 -route_flap_down_time 10 \
 -route_flap_up_time 10 \
 -flap_count 5]

 In this example, the routes defined by -route_handle will
 be withdrawn and then readvertised five times. The value
 of the -handle argument can either be a router handle or
 a list of router handles.
 Note:
 1) The "partial_route_flap" option is not supported.
 2) When you specify -mode link_flap or -mode full_route_flap,
 the next command will wait until all the flaps in this
 command are done.
 3) If you specify "link_flap" or "full_route_flap" for the
 -mode argument without defining -flap_count, Spirent
 TestCenter will perform the flapping operation only once.
 If you define -flap_count while you specify -mode
 link_flap or -mode full_route_flap, Spirent TestCenter
 will perform the flapping operation the number of times
 defined by the -flap_count argument. 
BGP Functions
93
 -route_flap_down_time
 During a flapping operation, specifies the period of time,
 in seconds, during which the route will be withdrawn from
 its neighbors. Possible values range from 0 to 10000000.
 This argument is valid only when -mode is set to
 "full_route_flap".
 -route_flap_up_time
 During a flapping operation, specifies the time, in seconds,
 between flap cycles. Possible values range from 0 to
 10000000. This argument is valid only when -mode is set to
 "full_route_flap".
 -route_handle
 Specifies the handles of the BGP routes on which to enable
 flapping. Use this argument when the mode is set to
 "full_route_flap".
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -route_index_from
 -route_index_to
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 stopped Stopped (1) or Running (0)
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_bgp_control function controls the routing of
 traffic through the specified ports. You can use the function to perform
 several actions: starting routers, stopping routers, restarting routers,
 and controlling route flapping.
 In normal network operation, routers advertise changes to routes.
 In response to these changes, routers recalculate the routes and update
 routing tables. A network may become unstable; for example, routers may go
 down, there may problems with connections, or there may be some other type
 of problem with the network. When the network topology changes rapidly, the
 repeated advertising and withdrawal of routing information is called "route
 flapping". When route flapping occurs, the network performance degrades due
 to the increased routing communication and to the time it takes for routers
 to reconfigure the routing table.
 Spirent HLTAPI enables you to use flapping in your network environment.
 You can use flapping to control various kind of events in your test
 environment, including routing. When you use the sth::emulation_bgp_control
 function to define flapping for your test, you must:
 - Define the flapping mode with "-mode full_route_flap".
 - Set -route_flap_down_time and -route_flap_up_time to define the flapping
 cycle.
 - Specify the route to flap using -route_handle.
 Note: The sth:emulation_bgp_control function does not include a flapping
 count argument because it only does one flap (for example, -flap_count is
 always equal to 1).
 When you call the sth::emulation_bgp_control function, you specify a port
 handle. Spirent HLTAPI applies the specified action to all of the
 emulated BGP routers associated with the specified port.
 - When you stop a router, Spirent HLTAPI sends a NOTIFICATION message
 to terminate the session and shut down the connection.
BGP Functions
94
 - When you start a router, Spirent HLTAPI sends an OPEN message to
 start the BGP message exchange and re-establish the session.
 - When you restart a router, Spirent HLTAPI sends a NOTIFICATION
 message, followed by an OPEN message.
Examples:
 #### HLTAPI for Tcl ####
 To start the BGP router on the specified port:
 sth::emulation_bgp_control -mode start -handle router1
 To stop the BGP router on the specified port:
 sth::emulation_bgp_control -mode stop -handle router1
 To restart the BGP router on the specified port:
 sth::emulation_bgp_control -mode restart -handle router1
 Sample Output: {handle router1} {status 1}
 #### HLTAPI for Python ####
 ctrl_ret1 = sth.emulation_bgp_control (
 handle = device_list,
 mode = 'start'

 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 my %ctrl_ret1 = sth::emulation_bgp_control (
 handle => "$device_list",
 mode => 'start');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes: None
End of Procedure Header
sth::emulation_bgp_route_config
Name:
 sth::emulation_bgp_route_config
Purpose:
 Creates routes for or deletes routes from a BGP router. It
 also defines the characteristics of the routes that will be advertised at
 the beginning of the session.
 When you add a route (see description for -mode), Spirent HLTAPI
 returns the route handle in a keyed list with "handles" as the key.
Synopsis:
 sth::emulation_bgp_route_config
 -mode add -handle <router_handle> |
 -mode {remove|withdraw} -route_handle <route_handle>
 [-aggregator { asn:ipv4}]
 [-as_path { <as path type>:<comma separated segment list>}]
 [-atomic_aggregate {0|1}]
 [-blk_offset <1-65535>]
 [-blk_offset_step <0-65534>]
 [-blk_size <1-65535>]
BGP Functions
95
 [-cluster_list {0|1}]
 [-cluster_list_enable {0|1}]
 [-communities {as_id:<asn>,<user data>}]
 [-communities_enable {0|1}]
 [-flooding_enable {0|1}]
 [-ip_version {4|6}]
 [-ipv4_mpls_nlri {0|1}]
 [-ipv4_mpls_vpn_nlri {0|1}]
 [-ipv4_multicast_nlri {0|1}]
 [-ipv4_unicast_nlri {0|1}]
 [-ipv6_mpls_nlri {0|1}]
 [-ipv6_mpls_vpn_nlri {0|1}]
 [-ipv6_multicast_nlri {0|1}]
 [-ipv6_prefix_length <0-128>]
 [-ipv6_unicast_nlri {0|1}]
 [-label_incr_mode {fixed|prefix}]
 [-local_pref <0-4294927695>]
 BGP LINK STATE (LS) NODE
 [ls_as_path <string> ]
 [ls_as_path_segment_type {sequence} ]
 [ls_community <string> ]
 [ls_enable_node {true | false} ]
 [ls_extended_community <string> ]
 [ls_identifier <integer> ]
 [ls_identifiertype {customized | l1_optical | l3_packet}]
 [ls_local_preference <integer>]
 [ls_next_hop <a.b.c.d>]
 [ls_next_hop_global <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [ls_next_hop_link_local <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [ls_next_hop_type {ipv4 | ipv6} ]
 [ls_origin {egp|igp|incomplete}]
 [ls_protocol_id {direct | isis_level1 | isis_level2 | ospf_v2 | static} ]

 [ls_node_desc_flag {as_number | bgp_ls_id|igp_router_id|ospf_area_id}]
 [ls_node_desc_as_num <integer>]
 [ls_node_desc_bgp_ls_id <integer>]
 [ls_node_desc_ospf_area_id <integer>]
 [ls_node_desc_igp_router_id_type {isis_non_pseudo_node | isis_pseudo_node |
 ospf_non_pseudo_node | ospf_pseudo_node}]
 [ls_node_desc_igp_router_id <string>]
 [ls_node_attr_flag {isis_area_id | local_ipv4_router_id | node_name|
 sr_algorithms | sr_caps} ]
 [ls_node_attr_isis_area_id <integer>]
 [ls_node_attr_local_ipv4_router_id_list <a.b.c.d> ]
 [ls_node_attr_local_ipv6_router_id_list <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [ls_node_attr_node_name <string>]
 [ls_node_attr_sr_algorithms<string>]
 [ls_node_attr_sr_value_type {label|sid}]
 [ls_node_attr_sr_capability_flags {ipv4|ipv6}]
 [ls_node_attr_sr_capability_base_list <integer>]
 [ls_node_attr_sr_capability_range_list <1 - 16777215>]

 LS LINK:
 [ls_link_attr_flag {igp_metric|link_protection_type | local_ipv4_router_id |
 remote_ipv4_router_id | sr_adj_sid}]
 [ls_link_attr_igp_metric <integer>]
 [ls_link_attr_igp_metric_tlv_type {isis_small|isis_wide | ospf}]
 [ls_link_attr_link_protection_type {dedicate_1_plus_1 | dedicated_1_to_1|
 enhanced|extra_traffic|reserved1|reserved2|shared|unprotected}]
 [ls_link_attr_local_ipv4_router_id_list <a.b.c.d>]
 [ls_link_attr_remote_ipv4_router_id_list <a.b.c.d>]
 [ls_link_attr_sr_adj_sid_flags {bbit|fbit}]
 [ls_link_attr_value <1-4294967295>]
 [ls_link_attr_value_type {label | sid}]
 [ls_link_attr_weight <1-255>]
 [ls_link_desc_flags {ipv4_intf_addr | ipv4_nbr_addr}]
 [ls_link_desc_ipv4_intf_addr <a.b.c.d>]
 [ls_link_desc_ipv4_neighbor_addr <a.b.c.d>]
 [ls_link_desc_ipv6_intf_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [ls_link_desc_ipv6_neighbor_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 
BGP Functions
96
 [ls_link_desc_flag {as_number| bgp_ls_id | igp_router_id | ospf_area_id}]
 [ls_link_desc_as_num <integer>]
 [ls_link_desc_bgp_ls_id <integer>]
 [ls_link_desc_ospf_area_id <integer>]
 [ls_link_desc_igp_router_id_type {isis_non_pseudo_node | isis_pseudo_node |
 ospf_non_pseudo_node | ospf_pseudo_node}]
 [ls_link_desc_igp_router_id <string>]
 [ls_link_attr_te_sub_tlv_type {none| group | max_bw | max_rsv_bw | unreserved|
 local_ip|remote_ip|default_metric}]
 [ls_link_attr_te_bw_unit {bits_per_sec | bytes_per_sec | mbytes_per_sec}]
 [ls_link_attr_te_default_metric <integer>]
 [ls_link_attr_te_local_ip <a.b.c.d>]
 [ls_link_attr_te_remote_ip <a.b.c.d>]
 [ls_link_attr_te_admin_group <1-4294967295>]
 [ls_link_attr_te_max_bw <1-4294967295>]
 [ls_link_attr_te_max_resv_bw <1-4294967295>]
 [ls_link_attr_te_unresv_bw_priority0 <1-4294967295>]
 [ls_link_attr_te_unresv_bw_priority1 <1-4294967295>]
 [ls_link_attr_te_unresv_bw_priority2 <1-4294967295>]
 [ls_link_attr_te_unresv_bw_priority3 <1-4294967295>]
 [ls_link_attr_te_unresv_bw_priority4 <1-4294967295>]
 [ls_link_attr_te_unresv_bw_priority5 <1-4294967295>]
 [ls_link_attr_te_unresv_bw_priority6 <1-4294967295>]
 [ls_link_attr_te_unresv_bw_priority7 <1-4294967295>]

 [ls_prefix_attr_flags {igp_flags | ospf_forward_addr | prefix_metric | sr_prefix_sid}]
 [ls_prefix_attr_algorithm <0-255>]
 [ls_prefix_attr_igp_flags {dbit | lbit | nbit | pbit}]
 [ls_prefix_attr_ospf_forward_addr_type {ospfv2 | ospfv3}]
 [ls_prefix_attr_ospfv2_forward_addr <a.b.c.d>]
 [ls_prefix_attr_prefix_metric <integer>]
 [ls_prefix_attr_sr_prefix_sid_flags {nbit | pbit | rbit}]
 [ls_prefix_attr_value <integer>]

 [ls_prefix_desc_flags {ip_reach_info | ospf_rt_type}]
 [ls_prefix_desc_ip_prefix_count <integer>]
 [ls_prefix_desc_ip_prefix_type {ipv4_prefix | ipv6_prefix}]
 [ls_prefix_desc_ipv4_prefix <a.b.c.d>]
 [ls_prefix_desc_ipv4_prefix_length <1 - 32>]
 [ls_prefix_desc_ipv4_prefix_step <integer>]
 [ls_prefix_desc_ospf_route_type {external_1 | external_2 | inter_area
 | intra_area | nssa_1| nssa_2}]

 [-max_route_ranges <integer>]
 [-multi_exit_disc <<0-4294927695>]
 [-netmask {255.255.255.255}]
 [-next_hop_set_mode {same|manual}]
 [-next_hop <ip address>]
 [-next_hop_ip_version {4|6}]
 [-num_routes <integer>]
 [-prefix {<ip address>}]
 [-prefix_step {<integer>}]
 [-origin {igp|egp|incomplete} ]
 [-originator_id <ipv4 address>]
 [-originator_id_enable {0|1}]
 [-packing_to <0-65535>]
 [-pe_addr <a.b.c.d>]
 [-rd_type {0|1}]
 [-rd_admin_step {<integer> | <ipv4 address>}]
 [-rd_admin_value {<AS number> | <ipv4 address>}]
 [-rd_assign_step <integer>]
 [-rd_assign_value {<AS number>}]
 [-route_category {UNDEFINED | PRIMARY | SECONDARY | UNIQUE}]
 [-route_ip_addr_step <ip address>]
 [-route_type {ip | vpn | vpls | vplsad}]
 [-strip_vlan {0 |1}
 [-target_type {as|ip}]
 [-target {<AS number> | <ipv4 address>}]
 [-target_assign <integer>]
 [-ve_id <1-65535>]
 [-ve_id_step <integer>]
BGP Functions
97
 [-vpls_id <vpls_id>]
 [-vpls_id_step <n:n>]
Arguments:
 -aggregator
 Specifies the last AS number that formed the aggregate
 route, followed by the IP address of the BGP speaker that
 formed the aggregate route format. AS number can be 2-byte or
 4-byte. In the following two examples, 173 is a 2-byte aggregator
 AS number and 20:20 is a 4-byte one. 192.1.1.1 and 50.1.1.1 are
 IP addresses of the BGP speaker:
 173:192.1.1.1. 20:20:50.1.1.1
 You must specify the -mode argument.
 -as_path
 Specifies a list of the Autonomous Systems (AS) numbers that
 a route passes through to reach the destination. As the
 update passes through an AS, the AS number is inserted at
 the beginning of the list. This argument is composed of a
 sequence of AS path segments in the following format:
 {<as path type>:<comma separated segment list>}. For
 example, as_set:1,2,3,4. You must specify one of the
 following path types:
 as_set - Specifies an unordered set of Autonomous Systems
 through which a route in the UPDATE message has traversed.
 as_seq - Specifies an ordered set of Autonomous Systems
 through which a route in the UDPATE message has traversed.
 as_confed_set - Specifies an unordered set of autonomous
 systems in the local confederation that the UPDATE message
 has traversed.
 as_confed_seq - Specifies an ordered set of autonomous
 systems in the local confederation that the UPDATE message
 has traversed.
 You must specify the add mode argument (-mode add).
 -atomic_aggregate
 Enables or disables atomic aggregation. Possible values are
 0 and 1. When set to 1, a BGP speaker uses this attribute to
 inform other BGP speakers that the local system selected a
 less specific route without selecting a more specific route
 included in it.
 -blk_offset
 Specifies the Virtual Private LAN Service (VPLS) Edge (VE)
 block offset. The VE block offset indicates the starting VE ID
 of the block of VEs to which this BGP label-block (NLRI)
 can be advertised. The receiver of the NLRI will process the NLRI
 and install the label if its VE ID is included in the VE ID range
 defined by -blk_offset and -blk_size. Possible values range from 1
 to 65535. The default value is 1. You can use this argument when
 -route_type is set to vpls.
 -blk_offset_step
 Defines the increment used to generate VE IDs.
 Possible values range from 0 to 655354. The default
 value is 0. You can use this argument when -route_type
 is set to vpls.
 -blk_size
 Specifies the size of a VE block that is included in the BGP
 NLRI for VPLS. This size indicates the number of labels
 in the block, starting from the block offset defined by
 -blk_offset. The value of this argument can be larger than 
BGP Functions
98
 the number of VEs in a given VPLS. If the number of VEs
 grows to be greater than the block size, a new block can
 be allocated. Possible values range from 1 to 65535. The
 default value is 1. This argument is available when -route_type
 is set to vpls.
 -cluster_list
 Specifies a sequence of cluster ID values representing the
 reflection path through which the route has passed. This is
 a string value. The default is "" (empty string).
 -cluster_list_enable
 Enables or disables a cluster list in the BGP route range.
 Possible values are 0 (disable) and 1 (enable). The default
 is 0.
 -communities
 Specifies the community to which the routes belong. This
 argument provides a way to group destinations, called
 communities, to which routing decisions can be applied.
 Routing decisions include which routing information a BGP
 speaker accepts, prefers, or distributes to other neighbors.
 All routes with this argument belong to the communities
 listed in the argument. Possible values are as follows:
 as_id:<asn>,<user data> - Creates a value composed of an AS
 number and user data. The semantics of the user data
 may be defined by the AS.
 -communities_enable
 Enables or disables the -community argument. Possible values
 are 0 (disable) and 1 (enable). The default is 0.
 -flooding_enable
 Determines whether the Provider-Edge (PE) is capable
 of flooding. Possible values are 0 (disable) and 1 (enable).
 When this argument is set to 1, the PE is capable of
 flooding and the sender can send one frame to represent
 all of the u-PEs the PE represents. When this option is
 disabled, PE is not capable of flooding and the sender
 must send a separate copy of a given frame for each of the
 u-PEs that the PE represents. The default is 0. The
 argument is available when -route_type is set to vpls.
 -handle
 Identifies the router for which to add or remove routes.
 This argument is mandatory when -mode is set to "add".
 -ip_version
 Specify the IP version of the BGP route to be created. Valid
 Possible values are 4 (for IPv4 address format) and 6 (for
 IPv6 address format). The default is 4.
 -ipv4_mpls_nlri
 Enables or disables the retrieval of routes for IPv4
 MPLS. Possible values are 1 (enable) and 0 (disable). The default
 is 0.
 -ipv4_mpls_vpn_nlri
 Enables or disables the retrieval of routes for IPv4
 MPLS VPNs. Possible values are 1 (enable) and 0 (disable).
 The default is 0.
 -ipv4_multicast_nlri
 Enables or disables the retrieval of routes for IPv4
 multicast. Possible values are 1 (enable) and 0 (disable).
 The default is 0.
 -ipv4_unicast_nlri
 Enables or disables the retrieval of routes for IPv4
BGP Functions
99
 unicast. Possible values are 1 (enable) and 0 (disable).
 The default is 0.
 -ipv6_mpls_nlri
 Enables or disables the retrieval of routes for IPv6
 MPLS. Possible values are 1 (enable) and 0 (disable).
 The default is 0.
 -ipv6_mpls_vpn_nlri
 Enables or disables the retrieval of routes for IPv6
 MPLS VPNs. Possible values are 1 (enable) and 0 (disable).
 The default is 0.
 -ipv6_multicast_nlri
 Enables or disables the retrieval of routes for IPv6
 multicast. Possible values are 1 (enable) and 0 (disable).
 The default is 0.
 -ipv6_prefix_length
 Specifies the IPv6 mask for the IPv6 routes advertised.
 Possible values range from 1 to 128. The default is 64.
 -ipv6_unicast_nlri
 Enables or disables the retrieval of routes for IPv6
 unicast. Possible values are 1 (enable) and 0 (disable).
 The default is 0.
 -label_incr_mode
 Specifies the method in which the MPLS label of an IPv4
 MPLS-VPN route is incremented. Currently, Spirent HLTAPI
 only supports fixed and prefix mode. The default is
 "fixed".
 fixed - Fixed MPLS label for all route distinguishers (RDs)
 prefix - Increment label per prefix advertised.
 -local_pref
 Defines the preferred exit point from the local autonomous
 system (AS) for a specific route. A BGP speaker uses this
 argument to inform other BGP speakers in its own AS of the
 originating speaker's degree of preference for an advertised
 route. Possible values range from 0 to 4294927695. The
 default is 10.
 -ls_as_path
 Spirent Extension (for Spirent HLTAPI only).
 The list of Autonomous Systems (AS) numbers, in string format.
 This list identifies the AS through which routing information,
 carried in the UPDATE message, has passed. The default value is
 1.
 -ls_as_path_segment_type
 Spirent Extension (for Spirent HLTAPI only).
 The segment type. It is a part of the mandatory AS_PATH attribute
 used when a BGP speaker advertises a route to a BGP speaker
 located in a neighboring AS. The AS_SET attribute supports
 aggregation of routes with different AS paths. The available type
 is sequence. The default value is sequence.
 -ls_community
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the BGP Link State (LS) community. A community is a group of
 destinations that share a common set of attributes or
 characteristics. Possible values are described below:

 Value Description

 AS:VAL Build a list of communities, in the
 format of AS:VAL, where, AS: 1-65535;
 VAL: 1-65535
 NO_EXPORT (0xFFFFFF01) Distribute routes with this community
BGP Functions
100
 tag within the confederation or AS,
 but no farther
 NO_ADVERTISE (0xFFFFFF02) Do not advertise these routes to other
 BGP peers
 LOCAL_AS (0xFFFFFF03) Do not distribute routes with this
 community tag to external BGP peers

 The default value is 1:1.
 -ls_enable_node
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables BGP LS node. Possible values are true (enable)
 and false (disable). The default value is true.
 -ls_extended_community
 Spirent Extension (for Spirent HLTAPI only).
 Specifies BGP extended community attributes, in string format
 -ls_identifier
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 64-Bit identifier field used to identify the
 routing realm, where the Network Layer Reachability Information
 (NLRI) belongs. The value must be an integer. The default value
 is 0.
 -ls_identifiertype
 Spirent Extension (for Spirent HLTAPI only).
 Type of the LS identifiers. Possible values are:

 customized Customized identifiers

 l1_optical Layer 1 optical identifiers

 l3_packet Layer 3 packet identifiers

 The default value is customized.
 -ls_local_preference
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the local BGP speaker's degree of preference for an
 external route. A higher number means more preference. This
 attribute facilitates selection of routes for the BGP routing
 table. The value must be an integer. The default value is 10.
 -ls_next_hop
 Spirent Extension (for Spirent HLTAPI only).
 The next hop's IPv4 address. The next hop is the node to which
 packets should be sent to get them closer to the destination. The
 default is the router's IP address. You must set
 -ls_next_hop_type to ipv4.
 -ls_next_hop_global
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 global address of the next hop. You must set
 -ls_next_hop_type to ipv6.
 -ls_next_hop_link_local
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the link-local IPv6 address of the next hop (emulated
 router). You must set -ls_next_hop_type to ipv6.
 -ls_next_hop_type
 Spirent Extension (for Spirent HLTAPI only).
 Address type of the next hop. Possible values are
 ipv4 and ipv6. The default value is ipv4.
 -ls_origin
 Spirent Extension (for Spirent HLTAPI only).
 Describes how a prefix is routed by BGP. It defines the
BGP Functions
101
 origin of the path information. This attribute is generated by
 the AS that originated the routes in the UPDATE message.

 Origin Description
 IGP Prefix learned from an IGP
 EGP Prefix learned through the EGP protocol
 Incomplete Static. Prefix was learned through a protocol
 other than EGP or IGP

 The default value is IGP.
 -ls_protocol_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the protocol ID field. Possible values are:

 isis_level1 NLRI information sourced by IS-IS Level 1
 isis_level2 NLRI information sourced by IS-IS Level 2
 ospf_v2 NLRI information sourced by OSPF
 direct NLRI information sourced by the local interface state
 static NLRI information sourced by static configuration

 The default value is direct.
 -ls_node_desc_flag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the flags to be used to disambiguate router IDs.
 Possible values are described below:
 as_number Autonomous System (AS) number
 bgp_ls_id BGP LS identifier
 igp_router_id IGP router ID
 ospf_area_id OSPF area ID

 The default value is igp_router_id.
 -ls_node_desc_as_num
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 32-bit AS number. This argument is available
 when as_number is specified in -ls_node_desc_flag. The value must
 be an integer. The default value is 0.
 -ls_node_desc_bgp_ls_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 32-bit BGP LS ID. This number, in conjunction with
 the AS number, uniquely identifies the BGP-LS domain. The
 combination of AS number and BGP LS ID must be globally unique.
 This argument is available when bgp_ls_id is specified in
 -ls_node_desc_flag. The value must be an integer. The default
 value is 0.
 -ls_node_desc_ospf_area_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 32-bit ID of the area to which the NLRI
 belongs. Area ID allows different NLRIs of the same router to be
 discriminated. This argument is available when ospf_area_id is
 specified in -ls_node_desc_flag. The value must be an integer.
 The default value is 0.
 -ls_node_desc_igp_router_id_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IGP router ID type. Possible values are described
 below:

 isis_non_pseudo_node 6-octet ISO node ID (ISO system ID)
 isis_pseudo_node 6-octet ISO node ID of the Designated
 Intermediate System (DIS)
 ospf_non_pseudo_node 4-octet router ID
 ospf_pseudo_node 4-octet router ID of the designated
 router (DR), followed by the 4-octet IPv4
 address of the DR's interface to the LAN
 (8 octets in total)
 
BGP Functions
102
 This argument is available when igp_router_id is specified in
 -ls_node_desc_flag. The default value is ospf_non_pseudo_node.
 -ls_node_desc_igp_router_id
 Spirent Extension (for Spirent HLTAPI only).
 IGP router ID value, corresponding to the IGP router ID type
 specified by -ls_node_desc_igp_router_id_type. This argument is
 available when igp_router_id is specified in -ls_node_desc_flag.
 -ls_node_attr_flag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies BGP LS Node flags. Possible values are
 isis_area_id, local_ipv4_router_id, node_name, sr_algorithms, and
 sr_caps. Use "|" to specify multiple flags. For example,
 isis_area_id|local_ipv4_router_id.
 -ls_node_attr_isis_area_id
 Spirent Extension (for Spirent HLTAPI only).
 ISIS area ID. This argument is available when isis_area_id is
 specified in -ls_node_attr_flag. The value must be an integer.
 The default value is 0.
 -ls_node_attr_local_ipv4_router_id_list
 Spirent Extension (for Spirent HLTAPI only).
 List of local IPv4 router IDs. This argument is available when
 local_ipv4_router_id is specified in -ls_node_attr_flag. The
 value must be in IPv4 format. The default value is 192.0.1.0.
 -ls_node_attr_node_name
 Spirent Extension (for Spirent HLTAPI only).
 Node name in string format. This argument is available when
 node_name is specified in -ls_node_attr_flag.
 -ls_node_attr_sr_algorithms
 Spirent Extension (for Spirent HLTAPI only).
 Segment Routing (SR) algorithms, in string format. This argument
 is available when sr_algorithms is specified in
 -ls_node_attr_flag. The default value is link_metric_based_spf.
 -ls_node_attr_sr_value_type
 Spirent Extension (for Spirent HLTAPI only).
 Type of segment identifier. This argument is available when
 -ls_node_attr_flag is set to sr_caps. Possible values are:

 label 20-bit label
 sid 32-bit SID

 The default value is label.
 -ls_node_attr_sr_capability_flags
 Spirent Extension (for Spirent HLTAPI only).
 Segment Routing capabilities. Possible values are ipv4 and ipv6.
 You can specify both at the same time, using "ipv4|ipv6". This
 argument is available when sr_caps is specified in
 -ls_node_attr_flag. The default value is ipv4.
 -ls_node_attr_sr_capability_base_list
 Spirent Extension (for Spirent HLTAPI only).
 List of base values for SR capabilities. This argument is
 available when sr_caps is specified in -ls_node_attr_flag. The
 value must be an integer. The default value is 16.
 -ls_node_attr_sr_capability_range_list
 Spirent Extension (for Spirent HLTAPI only).
 List of range values in correspondence to base values. This
 argument is available when sr_caps is specified in
 -ls_node_attr_flag. Possible values range from 1 to 16777215. The
 default value is 100.

 -ls_link_attr_flag
 Spirent Extension (for Spirent HLTAPI only).
BGP Functions
103
 Specifies BGP LS Link attributes. Possible values are igp_metric,
 link_protection_type, local_ipv4_router_idn,
 remote_ipv4_router_id, and sr_adj_sid. Use "|" to specify
 multiple flags. For example, igp_metric|link_protection_type.
 -ls_link_attr_igp_metric_tlv_type.
 IGP Metric TLV type. This argument is available when igp_metric
 is specified in -ls_node_attr_flag. Possible values are:

 isis_small Metrics with a length of 1 octet (the two most
 significant bits are ignored).
 isis_wide Metrics with a length of 3 octets
 ospf Metrics with a length of 2 octets

 The default value is ospf.
 -ls_link_attr_igp_metric
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the metric value for the link. It corresponds to the
 value of -ls_link_attr_igp_metric_tlv_type. This argument is
 available when igp_metric is specified in -ls_link_attr_flag. The
 value must be an integer. The default value is 0.
 -ls_link_attr_link_protection_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the protection type for the Link Protection Type
 sub-TLV, which is an extended IS Reachability TLV defined in
 RFC5305. This argument is available when link_protection_type is
 specified in -ls_link_attr_flag. The possible values are
 dedicate_1_plus_1, dedicated_1_to_1, enhanced, extra_traffic,
 reserved1, reserved2, shared, and unprotected. The default value
 is extra_traffic.
 -ls_link_attr_local_ipv4_router_id_list
 Spirent Extension (for Spirent HLTAPI only).
 List of local IPv4 router IDs, which are used to describe
 auxiliary router IDs that the IGP might be using. This argument
 is available when local_ipv4_router_id is specified in
 -ls_link_attr_flag. The value must be in IPv4 format. The default
 value is 192.0.1.0.
 -ls_link_attr_remote_ipv4_router_id_list
 Spirent Extension (for Spirent HLTAPI only).
 List of remote IPv4 router IDs that are used to describe
 auxiliary router IDs the IGP might be using. This argument is
 available when remote_ipv4_router_id is specified in
 -ls_link_attr_flag. The value must be in IPv4 format. The default
 value is 192.0.1.0.
 -ls_link_attr_sr_adj_sid_flags
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the required octet fields for the SR Adj-SID sub-TLV.
 This argument is available when sr_adj_sid is specified in
 -ls_link_attr_flag. Possible values are bbit and fbit. Use "|" to
 specify both flags. The default value is vbit|lbit.
 -ls_link_attr_value
 Spirent Extension (for Spirent HLTAPI only).
 Segment identifier. This argument is available when sr_adj_sid is
 specified in -ls_link_attr_flag. Possible values range from 1 to
 4294967295. The default value is 1.
 -ls_link_attr_value_type
 Spirent Extension (for Spirent HLTAPI only).
 Type of segment identifier. This argument is available when
 sr_adj_sid is specified in -ls_link_attr_flag. Possible values
 are:

 label 20-bit label
BGP Functions
104
 sid 32-bit SID

 The default value is label.
 -ls_link_attr_weight
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the weight to be used for load balancing. This argument
 is available when sr_adj_sid is specified in -ls_link_attr_flag.
 Possible values range from 1 to 255. The default value is 1.

 -ls_link_desc_flag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the flags to be used to disambiguate router IDs.
 Possible values are described below:
 as_number AS number
 bgp_ls_id BGP link state identifier
 igp_router_id IGP router ID
 ospf_area_id OSPF area ID

 The default value is igp_router_id.
 -ls_link_desc_as_num
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 32-bit AS number. This argument is available when
 as_number is specified in -ls_link_desc_flag. The value must be
 an integer. The default value is 0.
 -ls_link_desc_bgp_ls_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 32-bit BGP LS ID. This number, in conjunction with
 the AS number, uniquely identifies the BGP-LS domain. The
 combination of AS number and BGP LS ID must be globally unique.
 This argument is available when bgp_ls_id is specified in
 -ls_link_desc_flag. The value must be an integer. The default
 value is 0.
 -ls_link_desc_ospf_area_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 32-bit ID of the area to which the NLRI
 belongs. Area ID allows different NLRIs of the same router to
 be discriminated. This argument is available when ospf_area_id
 is specified in -ls_link_desc_flag. The value must be
 an integer. The default value is 0.
 -ls_link_desc_igp_router_id_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IGP router ID type. This argument is available when
 igp_router_id is specified in -ls_link_desc_flag. Possible values
 are described below:

 isis_non_pseudo_node 6-octet ISO node ID (ISO system ID)
 isis_pseudo_node 6-octet ISO node ID of the Designated
 Intermediate System (DIS)
 ospf_non_pseudo_node 4-octet router ID
 ospf_pseudo_node 4-octet router ID of the designated router
 (DR), followed by the 4-octet IPv4 address
 of the DR's interface to the LAN (8 octets
 in total)

 The default value is ospf_non_pseudo_node.

 -ls_link_desc_igp_router_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IGP router ID in string format
 -ls_link_attr_te_sub_tlv_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies Traffic Engineering sub-TLVs that carry the information
 about resources of routed links. Possible values are:

 Value Description
BGP Functions
105

 none No sub-TLV

 group 4-octet bit mask assigned by the network
 administrator. Each bit corresponds to
 one administrative group assigned to the
 interface

 max_bw Maximum bandwidth that can be used on the
 link from the emulated router

 max_rsv_bw Maximum bandwidth that can be reserved
 on the link

 unreserved Amount of bandwidth not yet reserved at
 each of the eight priority levels

 local_ip IP address of the interface corresponding
 to the current link

 remote_ip IP address of the neighbor's interface
 corresponding to the current link

 default_metric Default metric

 The default is none.
 -ls_link_attr_te_bw_unit
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the bandwidth's unit of measurement. Possible values
 are described below:

 Value Description

 BITS_PER_SEC Bits per second
 BYTES_PER_SEC Bytes per second
 MBYTES_PER_SEC Megabytes per second

 The default value is bytes_per_sec.
 -ls_link_attr_te_default_metric
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the default metric to be used in Traffic Engineering.
 You must set -ls_link_attr_te_sub_tlv_type to
 default_metric. The value must be an integer. The default value
 is 0.
 -ls_link_attr_te_local_ip
 Spirent Extension (for Spirent HLTAPI only).
 IPv4 address of the interface corresponding to the current link.
 You must set -ls_link_attr_te_sub_tlv_type to local_ip. The
 default value is 0.0.0.0.
 -ls_link_attr_te_remote_ip
 Spirent Extension (for Spirent HLTAPI only).
 IP address of the neighbor's interface corresponding to the
 current link. You must set -ls_link_attr_te_sub_tlv_type to
 remote_ip. The default value is 0.0.0.0.
 -ls_link_attr_te_admin_group
 Spirent Extension (for Spirent HLTAPI only).
 4-octet bit mask assigned by the network administrator. Each bit
 corresponds to one administrative group assigned to the
 interface. You must set -ls_link_attr_te_sub_tlv_type to -group.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_max_bw
 Spirent Extension (for Spirent HLTAPI only).
 Maximum bandwidth that can be used on the link from the emulated
BGP Functions
106
 router. You must set -ls_link_attr_te_sub_tlv_type to -max_bw.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_max_resv_bw
 Spirent Extension (for Spirent HLTAPI only).
 Maximum bandwidth that can be reserved on the link from the
 emulated router. You must set -ls_link_attr_te_sub_tlv_type to
 -max_rsv_bw. Possible values range from 1 to 4294967295. The
 default value is 100000.
 The following ls_* arguments are only valid when -ls_link_attr_te_sub_tlv_type is
 set to unreserved:

 -ls_link_attr_te_unresv_bw_priority0
 Spirent Extension (for Spirent HLTAPI only).
 Amount of bandwidth not yet reserved at priority level 0.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_unresv_bw_priority1
 Spirent Extension (for Spirent HLTAPI only).
 Amount of bandwidth not yet reserved at priority level 1.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_unresv_bw_priority2
 Spirent Extension (for Spirent HLTAPI only).
 Amount of bandwidth not yet reserved at priority level 2.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_unresv_bw_priority3
 Spirent Extension (for Spirent HLTAPI only).
 Amount of bandwidth not yet reserved at priority level 3.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_unresv_bw_priority4
 Spirent Extension (for Spirent HLTAPI only).
 Amount of bandwidth not yet reserved at priority level 4.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_unresv_bw_priority5
 Spirent Extension (for Spirent HLTAPI only).
 Amount of bandwidth not yet reserved at priority level 5.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_unresv_bw_priority6
 Spirent Extension (for Spirent HLTAPI only).
 Amount of bandwidth not yet reserved at priority level 6.
 Possible values range from 1 to 4294967295. The default value is
 100000.
 -ls_link_attr_te_unresv_bw_priority7
 Spirent Extension (for Spirent HLTAPI only).
 Amount of bandwidth not yet reserved at priority level 7.
 Possible values range from 1 to 4294967295. The default value is
 100000.

 -ls_prefix_attr_flags
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IGP attributes that will be reflected in the Link
 State prefix. Possible values are igp_flags, ospf_forward_addr,
 prefix_metric, and sr_prefix_sid, and 0. Value 0 means no flag is
 specified. Use "|" to specify multiple flags. The default value
 is 0.
BGP Functions
107
 -ls_prefix_attr_algorithm
 Spirent Extension (for Spirent HLTAPI only).
 The algorithm to be used to calculate reachability. This argument is
 available when sr_prefix_sid is specified in -ls_prefix_attr_flags.
 Possible values range from 0 to 255. The default value is 0.
 -ls_prefix_attr_igp_flags
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IGP Flags to be included in the TLV . This argument
 is available when igp_flags is specified in -ls_prefix_attr_flags.
 Possible values are:
 0 No flag specified
 DBIT IS-IS Up/Down bit
 LBIT OSPF Local Address bit
 NBIT OSPF No Unicast bit
 PBIT OSPF Propagate NSSA bit

 Use "|" to specify multiple flags. For example, DBIT|LBIT.
 The default value is 0.
 -ls_prefix_attr_ospf_forward_addr_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of OSPF forwarding addresses in the OSPF
 Forward Address TLV . This argument is available when
 ospf_forward_addr is specified in -ls_prefix_attr_flags. Possible
 values are ospfv2 and ospfv3. The default value is ospfv2.
 -ls_prefix_attr_ospfv2_forward_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv4 OSPF forwarding address. This argument is
 available when ospf_forward_addr is specified in
 -ls_prefix_attr_flags. The default value is 192.0.1.0.
 -ls_prefix_attr_prefix_metric
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the metric of the prefix as known in the IGP topology.
 This argument is available when prefix_metric is specified in
 -ls_prefix_attr_flags.
 -ls_prefix_attr_sr_prefix_sid_flags
 Spirent Extension (for Spirent HLTAPI only).
 Specifies SR IGP-Prefix-SID flags. This argument is available
 when sr_prefix_sid is specified in -ls_prefix_attr_flags.
 Possible values are:
 rbit Re-advertisement flag
 nbit Node-SID flag
 pbit No-PHP flag
 0 No flag specified

 Use "|" to specify multiple TLVs. For example,
 rbit|nbit. The default value is 0.
 -ls_prefix_attr_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the segment identifier or label. This argument is
 available when sr_prefix_sid is specified in
 -ls_prefix_attr_flags. The default value is 0.

 -ls_prefix_desc_flags
 Spirent Extension (for Spirent HLTAPI only).
 Specifies Prefix Descriptor TLVs that uniquely identify an IPv4
 or IPv6 Prefix originated by a node.
 Possible values are:
 ospf_rt_type Enables OSPF route type in Prefix NLRIs.

 ip_reach_info Enables IP Reachability Information that contains
 one IP address prefix (IPv4 or IPv6)
 originally advertised in the IGP topology

 0 No TLV specified
BGP Functions
108

 Use "|" to specify multiple TLVs. For example,
 ospf_rt_type|ip_reach_info. The default value is 0.
 -ls_prefix_desc_ip_prefix_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of BGP LS prefixes to be advertised. The
 value must be an integer. The default value is 1.
 -ls_prefix_desc_ip_prefix_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix type to be advertised. Possible values are
 ipv4_prefix and ipv6_prefix. The default value is ipv4_prefix.
 -ls_prefix_desc_ipv4_prefix
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv4 address of the first route to be advertised.
 The default value is 192.0.1.0.
 -ls_prefix_desc_ipv4_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv4 mask for the IPv4 routes to be advertised.
 Possible values range from 1 to 32. The default value is 24.
 -ls_prefix_desc_ipv4_prefix_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step value for the next incremented prefix if
 -ls_prefix_desc_ip_prefix_count is greater than 1. The default
 value is 1.
 -ls_prefix_desc_ospf_route_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of OSPF routes to be configured. This argument
 is available when ospf_rt_type is specified in
 -ls_prefix_desc_flags. Possible values are external_1,
 external_2, inter_area, intra_area, nssa_1, and nssa_2. The
 default value is inter_area.

 -max_route_ranges
 Specifies the number of route ranges to create under the
 emulated router, which is specified in the -handle argument.
 -mode
 Specifies whether to add or remove routes from the
 emulated router's BGP route table. Possible values are add
 and remove.
 add - Adds all routes (defined in the function call) to the
 routing table for the specified router. The handles for
 these routes are returned in the handles key (see
 Return Values).
 remove - Removes routes from the router specified in the
 -route_handle argument.
 withdraw - Withdraws the BGP route from the list of routers at
 route-pool level. For example:
 ::sth::emulation_bgp_route_config -mode withdraw
 -route_handle $hBGPRouteConfig
 -multi_exit_disc
 Specifies the multi-exit discriminator (MED), which
 indicates the preferred path into an autonomous
 system (AS) to external neighbors when multiple paths exist.
 The value of this attribute may be used by a BGP speaker to
 discriminate among multiple exit points to a neighboring AS.
 Possible values range from 0 to 4294927695. The default is
 0.
 -netmask
BGP Functions
109
 Specifies the netmask of the advertised routes. Enter a
 valid IPv4 mask. Use -ipv6_prefix_length for IPv6 addresses.
 Possible values for IPv4 addresses range from 0.0.0.0 to
 255.255.255.255. The default is 255.255.255.0.
 -next_hop
 Defines the IP address of the border router to use as the
 next hop to the destinations listed in the Network Layer
 Reachability field of the UPDATE message. The default is
 192.85.1.3.
 -next_hop_ip_version
 The type of IP address that was defined for -next_hop.
 Possible values are 4 and 6. The default is 4.
 -next_hop_set_mode
 Indicates how to set the next hop IP address. Possible
 values are same and manual:
 same - Sets the value as the local IP address.
 manual - Reads the value given in the -next_hop argument.
 -num_routes
 Specifies the number of routes to advertise, using the
 prefix as the starting prefix and incrementing based on
 either the -step and -netmask arguments or the
 -ipv6_prefix_length argument.
 -origin
 Indicates how BGP learned about a particular route. Possible
 values are:
 igp - the route is internal to the AS
 egp - the route is learned via the Exterior Border Gateway
 Protocol (EBGP)
 incomplete - the origin of the route is unknown or learned
 by some other means
 The default is igp.
 Note: Specifying a path attribute forces the advertised
 route to be a node route as opposed to a global route).
 -originator_id
 A four-byte BGP attribute created by the route reflector and
 carries the router ID of the originator of the route in the
 local Autonomous System. The default is 0.0.0.0.
 -originator_id_enable
 Enables or disables the originator ID in the BGP route
 range. Possible values are 0 and 1. The default is 0.
 -packing_to
 Defines the maximum number of routes per BGP UPDATE
 message. Possible values range from 1 to 65535. The default
 is 2000.
 -pe_addr
 Indicates the IP address of the PE router. The values
 must be in IPv4 format. The default value is 192.85.1.3.
 This argument is available when you specify -route_type
 vplsad.
 -prefix
 Specifies the IP address of the first route in the range to
 be advertised or removed by the emulated BGP router. Specify
 either the IP address or "all." Specify "all" to generate
 all route blocks for all prefixes. You must specify the
 -mode argument.
BGP Functions
110
 -prefix_step
 Defines the step interval for the next incremented prefix
 if -num_routes is set to greater than 1. The default is 1.
 -rd_admin_step
 Defines the increment value to step the base route distinguisher
 administrator field. If -rd_type is set to 0, the value is
 an integer. If -rd_type is set to 1, the value is in dotted
 decimal format (for example, 0.0.1.0).
 -rd_admin_value
 Specifies the starting value of the administrator field of
 the route distinguisher. If -rd_type is set to 0, the value
 is an AS number. If -rd_type is set to 1, the value is a
 dotted decimal IPv4 address. The default is 100.
 -rd_assign_step
 Specifies the increment value to step the base route
 distinguisher assigned number field. The default is 1.
 -rd_assign_value
 Specifies the starting value of the assigned field of the
 route distinguisher. The value must be an AS number. The default
 is 1.
 -rd_type
 Specifies the route distinguisher type. Possible values are
 0 and 1. If -rd_type is set to 0, the administrator field is
 an AS number. If it is set to 1, the administrator field is
 a global IPv4 address.
 -route_category
 Specifies the route category to use. Possible values are described
 below:

 UNDEFINED The default category assigned to a manually created block

 PRIMARY A preferred route that has duplicates (secondary routes)
 advertised by other ports

 SECONDARY A less preferred backup route

 UNIQUE Indicates that a single port in the test configuration
 advertises this route
 The default value is UNDEFINED.
 -route_handle
 Specifies the handle(s) of the BGP route(s) to be removed.
 The value of this argument can be a route handle or a list of
 route handles. This argument is available and mandatory when
 -mode is set to "remove".
 The example below removes two routes at one time:
 sth::emulation_bgp_route_config -mode remove
 -route_handle { bgpipv4routeconfig1 bgpipv4routeconfig2}
 -route_ip_addr_step
 Defines the increment used to generate IP addresses for a
 range of routes created under the emulated router, based on
 the value specified for the -max_route_ranges argument.
 -route_type
 Specifies the route type to create. Possible values described
 below:
 ip - IPv4 or IPv6 routes. This is the default.
 vpn - VPN routes.
 vpls - IPv4 or IPv6 VPLS routes.
BGP Functions
111
 vplsad - vplsad routes.
 -strip_vlan
 When this option is enabled, the PE strips the outermost
 VLAN tag from the customer frame upon ingress, and pushes
 a VLAN tag upon egress. When this option is disabled,
 the customer frame is left unchanged. Possible values are 0 and 1.
 The default value is 0. This argument is available when -route_type
 is set to vpls.
 -target
 Specifies the AS number or IP address list. The default is
 100:1.
 -target_assign
 Specifies the assigned number subfield of the value field of
 the target. It is a number from a numbering space which is
 maintained by the enterprise administers for a given IP
 address or ASN space. It is the local part of the target.
 -target_type
 Specifies the route target type. Possible values are 0 and
 1. If this argument is set to 0, the target field is an
 AS number. If it is set to 1, the target field is a global
 IPv4 address.
 -ve_id
 Indicates the identifier for the local PE or the
 represented block offset. In Spirent TestCenter, the VE
 identifier represents an emulated endpoint (can be either a PE
 or a u-PE) that is being advertised by the BGP speaker.
 Possible values range from 1 to 65535. The default
 value is 1. This argument is available when -route_type is
 set to vpls.
 -ve_id_step
 Indicates the step value for -ve_id. The value must be an
 integer. The default value is 0. This argument is
 available when -route_type is set to vpls.
 -vpls_id
 Specifies the starting VPLS ID value. The values must
 be in VPLS ID format. The default value is 100:1.
 This argument is available when -route_type is set to vplsad.
 -vpls_id_step
 Indicates the step value for -vpls_id. The values
 must be in VPLS ID format (n:n). The default value is 0:1.
 This argument is available when -route_type is set to
 vplsad.
 Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -communities
 -communities_enable
 -max_route_ranges
 -local_router_id_enable
 -ls_* arguments (Link State specific arguments)
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -ext_communities
 -import_target
 -import_target_assign
 -import_target_type
 -l3_site_handle
BGP Functions
112
 -label_step
 -label_value
 -next_hop_enable
 -num_sites
 -origin_route_enable
 -packing_from
 -default_mdt_ip
 -default_mdt_ip_incr
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles A list of handles that identify the routes created by the
 sth::emulation_bgp_route_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_bgp_route_config function creates and
 configures the routes. Use the -route_handle argument to identify
 the router for which to remove routes. (The router handle value is
 contained in the keyed list returned by the sth::emulation_bgp_config
 function.) Use the -mode argument to specify the action to perform. See the
 -mode argument for a description of the actions.
 BGP peers exchange routing information about network reachability and AS
 paths. For a particular route, this information includes a destination
 address and a list of AS addresses that describes a path to the
 destination. Based on the exchange of information, the BGP speakers build
 and maintain routing tables that contain a representation of large portions
 of the network topology.
 To create BGP routes, you supply address and AS path information. To define
 the addresses of the routes, use the following arguments:
 -prefix - the starting IP address for the first route in the range
 -netmask IP - the netmask of the advertised routes
 -num_routes - the number of routes in the range
 -prefix_step - the increment used to generate additional addresses
 -max_route_ranges - the maximum number of routes in the range
 -route_ip_addr_step - the IP address increment used to generate IP
 addresses for each route in the range
 For example, setting the following arguments to the given values will
 generate five route ranges (shown after the arguments):
 -prefix 1.1.1.0 \
 -netmask 255.255.255.0 \
 -num_routes 10 \
 -prefix_step 1 \
 -max_route_ranges 5 \
 -route_ip_addr_step 0.1.0.0
 The above code generates five route ranges as follows:
 1.1.1.0 - 1.1.10.0
 1.2.1.0 - 1.2.10.0
 1.3.1.0 - 1.3.10.0
 1.4.1.0 - 1.4.10.0
 1.5.1.0 - 1.5.10.0
BGP Functions
113
Examples:
 #### HLTAPI for Tcl ####
 The following example adds a route block to the routing table for
 the specified router:
 sth::emulation_bgp_route_config -mode add \
 -handle router1 \
 -prefix 160.0.0.0 \
 -num_routes 10 \
 -prefix_step 1 \
 -netmask 255.255.255.0 \
 -ip_version 4 \
 -as_path as_seq:123 \
 -next_hop_ip_version 4 \
 -next_hop 61.25.0.11 \
 -local_pref 0 \
 -next_hop_set_mode same \
 -route_category primary

 Sample output for example shown above:{handles bgpipv4routeconfig1} {status 1}

 The following example adds five route blocks, as specified in the
 -max_route_ranges argument; therefore, five route blocks are advertised:
 sth::emulation_bgp_route_config \
 -mode add -handle router2 \
 -prefix 161.0.0.0 \
 -num_routes 10 \
 -prefix_step 1 \
 -netmask 255.255.255.0 \
 -ip_version 4 \
 -as_path as_seq:123 \
 -next_hop_ip_version 4 \
 -next_hop 61.26.0.11 \
 -local_pref 0 \
 -next_hop_set_mode same \
 -max_route_ranges 5 \
 -route_ip_addr_step 0.1.0.0 \
 Sample output for example shown above:
 {handles bgpipv4routeconfig2 bgpipv4routeconfig3 bgpipv4routeconfig4
 bgpipv4routeconfig5 bgpipv4routeconfig6} {status 1}
 The following example deletes the first BGP router:
 sth::emulation_bgp_route_config \
 -mode remove -route_handle bgpipv4routeconfig1
 The following example adds a BGP LS route to the BGP router:
 set link_state_hnd [sth::emulation_bgp_route_config\
 -mode add \
 -handle $bgp_router1\
 -route_type link_state\
 -ls_as_path 1\
 -ls_as_path_segment_type sequence\
 -ls_community 1:1\
 -ls_extended_community 0x00:0x02:1:1\
 -ls_enable_node true\
 -ls_identifier 2\
 -ls_identifiertype customized\
 -ls_next_hop 1.1.1.1\
 -ls_next_hop_type ipv4\
 -ls_origin igp\
 -ls_protocol_id OSPF_V2\
 -ls_node_desc_flag "as_number|bgp_ls_id|OSPF_AREA_ID\
 |igp_router_id"\
 -ls_node_desc_as_num 1\
 -ls_node_desc_bgp_ls_id 2\
 -ls_node_desc_ospf_area_id 3\
 -ls_node_desc_igp_router_id_type ospf_non_pseudo_node\
BGP Functions
114
 -ls_node_desc_igp_router_id 192.0.0.1\
 -ls_node_attr_flag "ISIS_AREA_ID|LOCAL_IPV4_ROUTER_ID\
 NODE_NAME|SR_ALGORITHMS|SR_CAPS"\
 -ls_node_attr_isis_area_id "1"\
 -ls_node_attr_local_ipv4_router_id_list "192.0.0.1 192.0.0.2 192.0.0.3"\
 -ls_node_attr_node_name "abc_abc"\
 -ls_node_attr_sr_algorithms "LINK_METRIC_BASED_SPF"\
 -ls_node_attr_sr_value_type "label"\
 -ls_node_attr_sr_capability_flags "ipv4"\
 -ls_node_attr_sr_capability_base_list "16 17 18"\
 -ls_node_attr_sr_capability_range_list "100 200 300"]

 Output: {handles bgplsnodeconfig1} {status 1}
 The following example configures the BGP link LS node:
 set ls_link_hnd [sth::emulation_bgp_route_config\
 -mode add\
 -handle $bgp_router1\
 -route_handle $lsLinkConfigHnd \
 -route_type link_state\
 -ls_link_attr_flag "IGP_METRIC|LINK_PROTECTION_TYPE\
 |LOCAL_IPV4_ROUTER_ID|REMOTE_IPV4_ROUTER_ID|SR_ADJ_SID"\
 -ls_link_attr_igp_metric 10\
 -ls_link_attr_igp_metric_tlv_type isis_wide\
 -ls_link_attr_link_protection_type "DEDICATED_1_TO_1|DEDICATE_1_PLUS_1\
 |ENHANCED|EXTRA_TRAFFIC|RESERVED1|RESERVED2|SHARED"\
 -ls_link_attr_local_ipv4_router_id_list "1.1.1.1 2.2.2.2"\
 -ls_link_attr_remote_ipv4_router_id_list "3.3.3.3 4.4.4.4"\
 -ls_link_attr_sr_adj_sid_flags "BBIT|FBIT"\
 -ls_link_attr_value 9001\
 -ls_link_attr_value_type label\
 -ls_link_attr_weight 2\
 -ls_link_desc_flags "ipv4_intf_addr|IPV4_NBR_ADDR"\
 -ls_link_desc_ipv4_intf_addr 10.1.1.1\
 -ls_link_desc_ipv4_neighbor_addr 10.1.1.2\
 -ls_link_desc_flag "as_number|bgp_ls_id|OSPF_AREA_ID\
 |igp_router_id"\
 -ls_link_desc_as_num 10\
 -ls_link_desc_bgp_ls_id 2\
 -ls_link_desc_ospf_area_id 3\
 -ls_link_desc_igp_router_id_type ospf_non_pseudo_node\
 -ls_link_desc_igp_router_id 192.0.0.10\
 -ls_link_attr_te_sub_tlv_type "group|max_bw|max_rsv_bw|unreserved\
 |local_ip|remote_ip|default_metric"\
 -ls_link_attr_te_bw_unit bits_per_sec\
 -ls_link_attr_te_default_metric 2\
 -ls_link_attr_te_local_ip 1.1.1.1\
 -ls_link_attr_te_remote_ip 2.2.2.2\
 -ls_link_attr_te_admin_group 1\
 -ls_link_attr_te_max_bw 123\
 -ls_link_attr_te_max_resv_bw 456\
 -ls_link_attr_te_unresv_bw_priority0 888\
 -ls_link_attr_te_unresv_bw_priority1 111\
 -ls_link_attr_te_unresv_bw_priority2 222\
 -ls_link_attr_te_unresv_bw_priority3 333\
 -ls_link_attr_te_unresv_bw_priority4 444\
 -ls_link_attr_te_unresv_bw_priority5 555\
 -ls_link_attr_te_unresv_bw_priority6 666\
 -ls_link_attr_te_unresv_bw_priority7 777]

 Output:{link_handle bgplslinkconfig1} {handles bgplsnodeconfig1} {status 1}
 The following example creates a Link IPv4 Prefix:
 set ipv4_prefix_hnd [sth::emulation_bgp_route_config\
 -mode add \
 -handle $bgp_router1\
 -route_handle $lsLinkConfigHnd \
 -route_type link_state\
 -ls_prefix_attr_flags "igp_flags|ospf_forward_addr|\
 prefix_metric|sr_prefix_sid"\
 -ls_prefix_attr_algorithm 0\
BGP Functions
115
 -ls_prefix_attr_igp_flags "DBIT|LBIT|NBIT|PBIT"\
 -ls_prefix_attr_ospf_forward_addr_type "ospfv2"\
 -ls_prefix_attr_ospfv2_forward_addr 192.0.1.0\
 -ls_prefix_attr_prefix_metric 1\
 -ls_prefix_attr_sr_prefix_sid_flags "rbit|nbit|pbit"\
 -ls_prefix_attr_value 101\
 -ls_prefix_desc_flags "ip_reach_info|ospf_rt_type"\
 -ls_prefix_desc_ip_prefix_count 1 0\
 -ls_prefix_desc_ip_prefix_type ipv4_prefix\
 -ls_prefix_desc_ipv4_prefix 192.0.1.0\
 -ls_prefix_desc_ipv4_prefix_length 24\
 -ls_prefix_desc_ipv4_prefix_step 1\
 -ls_prefix_desc_ospf_route_type external_1]

 Output: {ipv4_prefix_handle bgplsipv4prefixconfig1}
 handles bgplsnodeconfig1} {status 1}

 #### HLTAPI for Python ####
 The following example adds a route block to the routing table for
 the specified router:
 device_ret1_route1 = sth.emulation_bgp_route_config (
 handle = bgp_router1,
 mode = 'add',
 ip_version = '4',
 as_path = 'as_seq:1',
 target_type = 'as',
 target = '100',
 target_assign = '1',
 rd_type = '0',
 rd_admin_step = '0',
 rd_admin_value = '100',
 rd_assign_step = '1',
 rd_assign_value = '1',
 next_hop_ip_version = '4',
 next_hop_set_mode = 'manual',
 ipv4_unicast_nlri = '1',
 prefix_step = '1',
 prefix = '193.0.1.0',
 num_routes = '1',
 netmask = '255.255.255.0',
 atomic_aggregate = '0',
 local_pref = '10',
 origin = 'igp',
 route_category = 'primary',
 label_incr_mode = 'none');
 Sample Output:
 {'status': '1', 'handles': 'bgpipv4routeconfig1'}

 #### HLTAPI for Perl ####
 The following example adds a route block to the routing table for
 the specified router:
 my %device_ret1_route1 = sth::emulation_bgp_route_config (
 handle => "$bgp_router1",
 mode => 'add',
 ip_version => '4',
 as_path => 'as_seq:1',
 target_type => 'as',
 target => '100',
 target_assign => '1',
 rd_type => '0',
 rd_admin_step => '0',
 rd_admin_value => '100',
 rd_assign_step => '1',
 rd_assign_value => '1',
 next_hop_ip_version => '4',
 next_hop_set_mode => 'manual',
 ipv4_unicast_nlri => '1',
 prefix_step => '1',
BGP Functions
116
 prefix => '193.0.1.0',
 num_routes => '1',
 netmask => '255.255.255.0',
 atomic_aggregate => '0',
 local_pref => '10',
 origin => 'igp',
 route_category => 'primary',
 label_incr_mode => 'none');

 Sample Output:
 $VAR1 = 'handles';
 $VAR2 = 'bgpipv4routeconfig2';
 $VAR3 = 'status';
 $VAR4 = '1';
Sample Input: See Examples.
See Examples.
Notes: None
End of Procedure Header
sth::emulation_bgp_info
Name:
 sth::emulation_bgp_info
Purpose:
 Returns information about the BGP configuration.
Synopsis:
 sth::emulation_bgp_info
 -handle <bgp_router _handle>
 -mode {stats|settings|neighbors}
Arguments:
 -handle
 The BGP router handle for which you want information. This
 argument is mandatory.
 -mode
 Specifies the kind of information you want to see. Possible
 values are stats and settings. This argument is mandatory.
 stats - returns transmitted and received statistics for
 different BGP messages.
 settings - returns the address and AS number of the
 specified handle.
 neighbors - returns the list of BGP peers.
 Note: The "labels" and "clear_stats" options are not
 supported.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 stats Retrieves the IP address of the specified port and the
 number of OPEN, UPDATE, NOTIFICATION, and KEEPALIVE
 messages transmitted and received (see list below).
 settings Retrieves the IP address of the specified port and the
BGP Functions
117
 number of the Autonomous System for the emulated router
 and its BGP router (see list below).
 neighbors Retrieves the IP addresses of the BGP session's peers.
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null
 The following keys are returned when you specify -mode stats:
 ip_address IP address of the port on the interface card: a.b.c.d.
 asn Number of the Autonomous System for the emulated
 router and its BGP peer.
 peers List of BGP peer IP addresses.
 update_tx Number of BGP UPDATE messages successfully transmitted.
 update_rx Number of BGP UPDATE messages received.
 keepalive_tx Number of BGP KEEPALIVE messages successfully
 transmitted.
 keepalive_rx Number of BGP KEEPALIVE messages received.
 open_tx Number of BGP OPEN messages successfully transmitted.
 open_rx Number of BGP OPEN messages received.
 notify_tx Number of BGP NOTIFICATION messages successfully
 transmitted.
 notify_rx Number of BGP NOTIFICATION messages received.
 routes_advertised_tx
 Number of advertised routes sent.
 routes_advertised_rx
 Number of advertised routes received
 routes_withdrawn_tx
 Number of routes withdrawn.
 route_withdrawn_tx
 Number of UPDATE packets with unfeasible routes sent.

 routes_withdrawn_rx
 Number of update messages received which
 have a non-empty Withdrawn Routes field.
 num_node_routes
 Number of routes in session.
 last_routes_advertised_rx
 Number of routes in the last-received Update message
 notify_code_tx
 BGP Notify code transmitted. Last Notification message
 code the emulated router sent to DUT.
 notify_subcode_tx
 BGP Notify subcode transmitted. Each Notification
 message code has a sub-code.
 notify_code_rx
 BGP Notify code received. The last Notification message 
BGP Functions
118
 code the emulated router received from the DUT.
 notify_subcode_rx
 BGP Notify subcode received. Each Notification message
 code has a sub-code.
 sessions_configured
 Number of BGP neighbors configured.
 sessions_established
 Number of BGP sessions established.
 Note: duration, routing_protocol, and num_node_routes are not
 supported.
 The following keys are returned when you specify -mode settings:
 ip_address IP address of the port on the interface card: a.b.c.d.
 asn Number of the Autonomous System for the emulated
 router and its BGP peer.
 The following keys are returned when you specify -mode neighbors:
 peers List of BGP peer IP addresses.
Description:
 The sth::emulation_bgp_info function provides information about either
 the settings specified for the BGP configuration, the statistics
 returned by it, or its neighbors.
 This function returns the requested data (statistics, settings, or neighbor
 information) and a status value (1 for success). If there is an error, the
 function returns the status value (0) and an error message. Function return
 values are formatted as a keyed list (supported by the Tcl extension
 software - TclX). Use the TclX function keylget to retrieve data from the
 keyed list. (See Return Values for a description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input: sth::emulation_bgp_info -mode settings -handle router1
 Sample Output: {ip_address 90.0.0.3} {asn 3} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_bgp_info (
 handle = device,
 mode = 'stats');
 Sample Output:
 {'sessions_configured': '1', 'routes_advertised_rx': '0',
 'notify_subcode_tx': '0', 'keepalive_rx': '0', 'keepalive_tx': '0',
 'notify_rx': '0', 'num_node_routes': '0', 'sessions_established': '0',
 'status': '1', 'notify_tx': '0', 'open_rx': '0', 'update_tx': '0',
 'ip_address': '192.85.1.3', 'asn': '23456', 'notify_code_rx': '0', 'peers':
 '192.85.1.1', 'routes_withdrawn_rx': '0', 'route_withdrawn_tx': '0',
 'update_rx': '0', 'notify_code_tx': '0', 'routes_advertised_tx': '0',
 'open_tx': '0', 'notify_subcode_rx': '0', 'routes_withdrawn_tx': '0',
 'last_routes_advertised_rx': '0'}

 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::emulation_bgp_info (
 handle => "$device",
 mode => 'stats');
 Sample Output:
 $VAR1 = 'notify_code_tx';
 $VAR2 = '0';
BGP Functions
119
 $VAR3 = 'peers';
 $VAR4 = '192.85.1.1';
 $VAR5 = 'notify_subcode_rx';
 $VAR6 = '0';
 $VAR7 = 'status';
 $VAR8 = '1';
 $VAR9 = 'asn';
 $VAR10 = '23456';
 ...
Notes: None
End of Procedure Header
sth::emulation_bgp_route_info
Name:
 sth::emulation_bgp_route_info
Purpose:
 Returns information on advertised and received BGP routes for the specified
 emulated node.
Synopsis:
 sth::emulation_bgp_route_info
 -handle <BGP_session_handle>
 -mode {advertised|received}
Arguments:
 -handle
 The BGP session for which you want information. This argument is
 mandatory.
 -mode
 Specifies the kind of information you want to see. Possible
 values are advertised and received. This argument is mandatory.
 advertised - returns transmitted count and route statistics
 received - returns the received count and route statistics
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null.
 The following keys are returned when you specify -mode advertised or
 received:
 ipv4_count Number of BGP IPv4 routes advertised or received.
 ipv6_count Number of BGP IPv6 routes advertised or received.
 The following keys are not supported but still returned:
 ipv4_routes List of BGP IPv4 route prefix and prefix length
 advertised or received. Returns "{}".
BGP Functions
120
 ipv6_routes List of BGP IPv6 route prefix and prefix length
 advertised or received. Returns "{}".
 ipv4_mpls_vpn_count Number of BGP MPLS IPv4 routes advertised or
 received. Returns 0.
 ipv4_mpls_vpn_routes List of BGP IPv4 route prefix, admin, assigned,
 and label advertised or received. Returns "{}".
 ipv6_mpls_vpn_count Number of BGP MPLS IPv6 routes advertised or
 received. Returns 0.
 ipv6_mpls_vpn_routes List of BGP IPv6 route prefix, admin, assigned,
 and label advertised or received. Returns "{}".
Description:
 The sth::emulation_bgp_route_info function provides information about
 either the advertised or received BGP routes.
 This function returns the requested data (advertised or received
 information) and a status value (1 for success). If there is an error, the
 function returns the status value (0) and an error message. Function return
 values are formatted as a keyed list (supported by the Tcl extension
 software - TclX). Use the TclX function keylget to retrieve data from the
 keyed list. (See Return Values for a description of each key.)
Examples:
 #### HLTAPI for Tcl ####
 Sample Input:
 sth::emulation_bgp_route_info -mode advertised -handle router1
 Sample Output:
 {ipv4_count 100} {ipv4_routes {}} {ipv6_count 0} {ipv6_routes
 {}} {ipv4_mpls_vpn_count 0} {ipv4_mpls_vpn_routes {}}
 {ipv6_mpls_vpn_count 0} {ipv6_mpls_vpn_routes {}} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 sth.emulation_bgp_route_info (
 handle = device,
 mode = 'advertised');
 Sample Output:
 {'status': '1', 'ipv4_mpls_vpn_count': '0', 'ipv4_count': '0',
 'ipv6_mpls_vpn_count': '0', 'ipv6_routes': '', 'ipv4_routes': '',
 'ipv4_mpls_vpn_routes': '', 'ipv6_count': '0', 'ipv6_mpls_vpn_routes': ''}

 #### HLTAPI for Perl ####
 Sample Input:
 sth::emulation_bgp_route_info (
 handle => "$device",
 mode => 'advertised');
 Sample Output:
 $VAR1 = 'ipv4_mpls_vpn_count';
 $VAR2 = '0';
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'ipv4_count';
 $VAR6 = '0';
 $VAR7 = 'ipv4_routes';
 $VAR8 = '';
 $VAR9 = 'ipv6_mpls_vpn_count';
 $VAR10 = '0';
 $VAR11 = 'ipv6_routes';
 $VAR12 = '';
 $VAR13 = 'ipv6_mpls_vpn_routes';
 $VAR14 = '';
 $VAR15 = 'ipv6_count';
 $VAR16 = '0'
 $VAR17 = 'ipv4_mpls_vpn_routes';
BGP Functions
121
 $VAR18 = '';
Notes: None
End of Procedure Header
sth::emulation_bgp_route_generator
Name:
 sth::emulation_bgp_route_generator
Purpose:
 Creates or modifies the router topology under the specified BGP emulated
 router, matching the operation of the BGP Route Generator from the Spirent
 TestCenter GUI.

Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_bgp_route_generator
 -mode create -handle <router_handle>
 -mode {delete|modify} -elem_handle <route_handle >
 [-backbone_headend_routers_number <integer>]
 [-enable_loopback_advertisement {true|false}]
 [-headend_routers_per_area <1-4294967295>]
 [-if_type {broadcast|point_to_point}]
 [-if_prefix_length <1-31>]
 [-igp_metric_enabled <true|false}]
 [-igp_metric_type {isis_narrow|isis_wide|ospfv2}]
 [-increment_sr_weight {true|false}]
 [-increment_igp_metric {true|false}]
 [-increment_ipv4_prefix_metric {true|false}]
 [-increment_te_rsvr_bandwidth {true|false}]
 [-increment_te_unrsvr_bandwidth {true|false}]
 [-ipv4_addr_start <a.b.c.d>]
 [-ipv4_addr_end <a.b.c.d>]
 [-max_if_per_router <0-10000>]
 [-max_routers_per_transit_network <2-10000>]
 [-num_routers <1-100>]
 [-num_simulated_routers <1-10000>]
 [-router_id_start <a.b.c.d>]
 [-router_id_step <a.b.c.d>]
 [-system_id_start <mac addr>]
 [-system_id_step <mac addr>]
 [-sr_enabled {true|false}]
 [-sr_algorithms <string>]
 [-sr_sid_label_type {label|sid}]
 [-sr_cap_range <0-16777215>]
 [-sr_cap_value <integer>]
 [-sr_adj_value <integer>]
 [-sr_ipv4_prefix_sid <integer>]
 [-sr_ipv4_prefix_sid_step <integer>]
 [-te_rsvr_bandwidth_step <integer>]
 [-te_enabled {true|false}]
 [-te_sub_tlv_type {none|group|max_bw|max_rsv_bw|unreserved|local_ip
 |remote_ip|default_metric}]
 [-te_bw_unit {bits_per_sec|bytes_per_sec|mbytes_per_sec}]
 [-te_default_metric <integer>]
 [-te_local_ip <a.b.c.d>]
 [-te_remote_ip <a.b.c.d>]
 [-te_admin_group <1-4294967295>]
 [-te_max_bw <1-4294967295>]
 [-te_max_resv_bw <1-4294967295>]
 [-te_unresv_bw_priority0 <1-4294967295>]
 [-te_unresv_bw_priority1 <1-4294967295>]
 [-te_unresv_bw_priority2 <1-4294967295>]
 [-te_unresv_bw_priority3 <1-4294967295>]
 [-te_unresv_bw_priority4 <1-4294967295>]
BGP Functions
122
 [-te_unresv_bw_priority5 <1-4294967295>]
 [-te_unresv_bw_priority6 <1-4294967295>]
 [-te_unresv_bw_priority7 <1-4294967295>]
 -route_type ipv4
 [-ipv4_route_count <integer>]
 [-ipv4_route_dup_percentage <0-100>]
 [-ipv4_route_weight_assignment {byports|byrouters|byspeed}]
 [-ipv4_route_ip_addr_start <a.b.c.d>]
 [-ipv4_route_ip_addr_end <a.b.c.d>]
 [-ipv4_route_disable_route_aggr {true|false}]
 [-ipv4_route_prefix_len_dist_type {custom|exponential|fixed|internet|linear}]
 [-ipv4_route_prefix_len_dist <0-100>]
 [-ipv4_route_prefix_len_start <1-32>]
 [-ipv4_route_prefix_len_end <1-32>]
 [-ipv4_route_pri_as_path_incr <string>]
 [-ipv4_route_pri_as_path_suffix <string>]
 [-ipv4_route_sec_as_path_incr <string>]
 [-ipv4_route_sec_as_path_suffix <string>]
 [-ipv4_route_med <0-4294967295>]
 [-ipv4_route_med_incr <0-4294967295>]
 [-ipv4_route_local_pref <0-4294967295>]
 [-ipv4_route_local_pref_incr <0-4294967295>]
 [-use_ipv4_device_intf_addr_as_next_hop {true|false}]
 [-ipv4_route_next_hop <a.b.c.d>]
 [-ipv4_next_hop_count <integer>]
 [-ipv4_next_hop_increment <a.b.c.d>]
 [-ipv4_prefix_length_count <1-32>]
 [-ipv4_prefix_length_increment <1-32>]
 -route_type ipv6
 [-ipv6_route_count <integer>]
 [-ipv6_route_dup_percentage <0-100>]
 [-ipv6_route_weight_assignment {byports|byrouters|byspeed}]
 [-ipv6_route_ip_addr_start <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_route_ip_addr_end <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_route_disable_route_aggr {true|false}]
 [-ipv6_route_prefix_len_dist_type {custom|exponential|fixed|internet|linear}]
 [-ipv6_route_prefix_len_dist <0-100>]
 [-ipv6_route_prefix_len_start <1-128>]
 [-ipv6_route_prefix_len_end <1-128>]
 [-ipv6_route_pri_as_path_incr <string>]
 [-ipv6_route_pri_as_path_suffix <string>]
 [-ipv6_route_sec_as_path_incr <string>]
 [-ipv6_route_sec_as_path_suffix <string>]
 [-ipv6_route_med <0-4294967295>]
 [-ipv6_route_med_incr <0-4294967295>]
 [-ipv6_route_local_pref <0-4294967295>]
 [-ipv6_route_local_pref_incr <0-4294967295>]
 [-use_ipv6_device_intf_addr_as_next_hop {true|false}]
 [-ipv6_route_next_hop <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_next_hop_count <integer>]
 [-ipv6_next_hop_increment <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_prefix_length_count <1-32>]
 [-ipv6_prefix_length_increment <1-32>]
 -route_type link_state
 [-igp_protocols {isis_ipv4|ospfv2}]
 [-area_number <1-4294967295>]

Synopsis:
 -mode
 Specifies the action to perform on the specified test port.
 Possible values are create, modify, or delete. The modes are
 described below:

 create Creates BGP routes, based on the route type specified
 by -route_type.

 modify Modifies the configuration of the topology element
 specified by -elem_handle.
 Note: Since this function is based on a Spirent TestCenter
 wizard, not all arguments configured under -mode create
 can be used with -mode modify. If you want to modify
 these arguments, delete the routes/Link State (LS)
BGP Functions
123
 configurations using -mode delete, and create again.

 delete Deletes the created routes/LS configurations, based on
 specified route types. If -route_type is not specified,
 deletes all routes/link states for the router associated
 with the topology element specified by -elem_handle.

 -handle
 Identifies the router on which to create, modify, or
 delete a topology element. This argument is required for
 modes create and modify.
 -elem_handle
 Specifies the topology element to modify or delete. You
 must specify this argument if the mode is modify or delete
 (see description for -mode).

 -backbone_headend_routers_number
 Number of headend routers in the backbone area. The value must be
 an integer. The default value is 2.

 -enable_loopback_advertisement
 Determines whether to generate an additional IPv4 prefix NLRI
 with the prefix set to the router ID and the prefix set to 32.
 Possible values are true and false. If it is set to true, the
 additional IPv4 prefix NLRI will be generated. The default value
 is false.
 -headend_routers_per_area
 Number of headend routers per area. Possible values range from 1
 to 4294967295. The default value is 2.
 -if_type
 Specifies the type of interface to connect simulated routers.
 Possible values are described below:

 point_to_point Creates a node Network Layer Reachability
 Information (NLRI) for each router, a link NLRI
 for each link, and an IPv4 prefix NLRI for
 each connected network

 broadcast Creates a pseudo-node NLRI to be used for all
 the nodes in the same network.

 The default value is point_to_point.
 -ipv4_addr_start
 Value of the first IPv4 prefix. The value must be in IPv4 format.
 The default value is 1.0.0.0.

 -ipv4_addr_end
 Value of the last IPv4 prefix. The value must be in IPv4 format.
 The default value is 223.255.255.255.

 -if_prefix_length
 Length of the network part of the address. Possible values range
 from 1 to 31. The default value is 24.
 -igp_metric_enabled
 Enables/Disables IGP metrics. Possible values are true (enable)
 and false (disable). The default value is false.

 -igp_metric_type
 Specifies IGP metric types. Possible values are described below:

 isis_narrow ISIS Narrow Metrics
 isis_wide ISIS Wide Metrics
 ospfv2 OSPFv2 Metrics

 The default value is ospfv2. 
BGP Functions
124

 -increment_sr_weight
 Determines whether to create unique values for the weight.
 Possible values are true and false. When set to true, unique
 weight values will be created, starting from 1 and incrementing
 by 1. The default value is false.

 -increment_igp_metric
 Determines whether to create unique values for the headend
 router metric. Possible values are true and false. When set to
 true, unique value will be created for the headend router metric,
 starting from 1 and incrementing by 1. The default value is
 false.

 -increment_ipv4_prefix_metric
 Determines whether to create unique values for the prefix metric.
 Possible values are true and false. When set to true, unique
 prefix metric values will be created, starting from 1 and
 incrementing by 1. The default value is false.

 -increment_te_rsvr_bandwidth
 Enables/Disables Traffic Engineering (TE) reservable bandwidth.
 Possible values are true (enable) and false (disable). The
 default value is false.

 -increment_te_unrsvr_bandwidth
 Enables/disables TE unreservable bandwidth.
 Possible values are true (enable) and false (disable). The
 default value is false.

 -max_if_per_router
 Maximum number of interfaces per router. This argument is
 available when -if_type is set to point_to_point. Possible values
 range from 0 to 10000. The default value is 4.

 -max_routers_per_transit_network
 Maximum number of routers per transit network. This argument is
 available when -if_type is set to broadcast. Possible values
 range from 2 to 10000. The default value is 5.

 -num_routers
 Total number of routers in the full mesh topology. Possible
 values range from 1 to 100. The default value is 10.

 -num_simulated_routers
 Total number of routers in the intra-area network. Possible
 values range from 1 to 10000. The default value is 50.
 -te_rsvr_bandwidth_step
 Increment value for reservable bandwidth. This argument is
 available when -increment_te_rsvr_bandwidth is set to true. The
 value must be an integer. The default value is 10000.

 -route_type
 Specifies the type of route to create, modify, or delete.
 ipv4 IPv4 routes
 ipv6 IPv6 routes
 link_state BGP LS routes

 Use "|" to specify more than one type, for example,
 -route_type "ipv4|link_state".
 -router_id_start
 Specifies the first router ID. The value must be in IPv4 format.
 The default value is 1.0.0.1.

 -router_id_step
 Specifies the increment value to generate subsequent router IDs.
 The value must be in IPv4 format. The default value is 1.0.0.1.

 -sr_enabled 
BGP Functions
125
 Enables/Disables Segment Routing (SR) capabilities. Possible
 values are true (enable) and false (disable). The default value
 is false.

 -sr_algorithms
 A comma-separated list of integers to specify the algorithm to
 calculate the reachability to other nodes or to prefixes attached
 to these nodes. This argument is available when -sr_enabled is
 set to true. Possible values range from 0 to 255. The default
 value is 0.


 -sr_sid_label_type
 Specify the ID type. Possible values are label and sid.
 label 20-bit label
 sid 32-bit SID

 This argument is available when -sr_enabled is set to true. The
 default value is label.

 -sr_cap_range
 Specifies the ending value that, along with the starting value
 set by -sr_cap_value, defines the range of the SR Capabilities
 sub-TLV. This argument is available when -sr_enabled is set to
 true. Possible values range from 0 to 16777215. The default value
 is 100.

 -sr_cap_value
 Specifies the starting SID for the SR Capabilities sub-TLV. This
 argument is available when -sr_enabled is set to true. The value
 must be an integer. The default value is 100.

 -sr_adj_value
 Specifies the starting SID for the SR Adjacentcy sub-TLV.
 This argument is available when -sr_enabled is set to true. The
 value must be an integer. The default value is 9001.

 -sr_ipv4_prefix_sid
 Value of the SID/Label/Index for the first prefix. This argument
 is available when -sr_enabled is set to true. The value must be
 an integer. The default value is 0.

 -sr_ipv4_prefix_sid_step
 Specifies the increment value to create SID/Label/Index values
 for subsequent prefixes. This argument is available when
 -sr_enabled is set to true. The value must be an integer. The
 default value is 1.
 -system_id_start
 Specifies the first system ID. This argument is available when
 -igp_protocols is set to isis_ipv4. The value must be in MAC
 format. The default value is 10:00:00:00:00:01.

 -system_id_step
 Specifies the increment value to generate subsequent system IDs.
 This argument is available when -igp_protocols is set to
 isis_ipv4. The value must be in MAC format. The default value is
 00:00:00:00:00:01.

 -te_enabled
 Enables/disables TE options. Possible values
 are true (enable) and false (disable). The
 default value is false.
 -te_sub_tlv_type
 TE type of information about resources of routed links. Possible
 values are:

 Value Description

 none No sub-TLV is used
 group 4-octet bit mask assigned by the network
BGP Functions
126
 administrator. Each bit corresponds to one
 administrative group assigned to the
 interface
 max_bw Maximum bandwidth that can be used on the
 link from the emulated router
 max_rsv_bw Maximum bandwidth that can be reserved on the link
 unreserved Amount of bandwidth not yet reserved at each
 of the eight priority levels The values
 correspond to the bandwidth that can be
 reserved with a setup priority of 0 through 7
 local_ip IP address of the interface corresponding to
 the current link
 remote_ip IP address of the neighbor's interface
 corresponding to the current link
 default_metric Default metric

 Use "|" to specify more than one type. For example,
 -te_sub_tlv_type "group|max_bw|max_rsv_bw"

 The default value is none.

 -te_bw_unit
 Specifies the bandwidth unit of measurement. Possible values are:

 Value Description

 bits_per_sec Bits per second
 bytes_per_sec Bytes per second
 mbytes_per_sec Megabytes per second

 The default value is bytes_per_sec.

 -te_default_metric
 Specifies the TE default metric. The value must be an integer.
 The default value is 0.

 -te_local_ip
 IP address of the interface corresponding to the current link.
 The value must be in IPv4 format. The default value is 0.0.0.0.

 -te_remote_ip
 IP address of the neighbor's interface corresponding to the
 current link. The value must be in IPv4 format. The default value
 is 0.0.0.0.

 -te_admin_group
 4-octet bit mask assigned by the network administrator.
 Each bit corresponds to one administrative group assigned to the
 interface. Possible values range from 1 to 4294967295. The
 default value is 100000.

 -te_max_bw
 Maximum bandwidth that can be used on the link from the emulated
 router. Possible values range from 1 to 4294967295. The
 default value is 100000.

 -te_max_resv_bw
 Maximum bandwidth that can be reserved on the link from the
 emulated router. Possible values range from 1 to 4294967295. The
 default value is 100000.
 -te_unresv_bw_priority0
 Amount of bandwidth not yet reserved at priority level 0. This
 argument is available when type unreserved is specified in the
 -te_sub_tlv_type argument. Possible values range
 from 1 to 4294967295. The default value is 100000.

 -te_unresv_bw_priority1
 Amount of bandwidth not yet reserved at priority level 1. This
 argument is available when type unreserved is specified in the
 -te_sub_tlv_type argument. Possible values range
BGP Functions
127
 from 1 to 4294967295. The default value is 100000.

 -te_unresv_bw_priority2
 Amount of bandwidth not yet reserved at priority level 2. This
 argument is available when type unreserved is specified in the
 -te_sub_tlv_type argument. Possible values range
 from 1 to 4294967295. The default value is 100000.

 -te_unresv_bw_priority3
 Amount of bandwidth not yet reserved at priority level 3. This
 argument is available when type unreserved is specified in the
 -te_sub_tlv_type argument. Possible values range
 from 1 to 4294967295. The default value is 100000.

 -te_unresv_bw_priority4
 Amount of bandwidth not yet reserved at priority level 4. This
 argument is available when type unreserved is specified in the
 -te_sub_tlv_type argument. Possible values range
 from 1 to 4294967295. The default value is 100000.

 -te_unresv_bw_priority5
 Amount of bandwidth not yet reserved at priority level 5. This
 argument is available when type unreserved is specified in the
 -te_sub_tlv_type argument. Possible values range
 from 1 to 4294967295. The default value is 100000.

 -te_unresv_bw_priority6
 Amount of bandwidth not yet reserved at priority level 6. This
 argument is available when type unreserved is specified in the
 -te_sub_tlv_type argument. Possible values range
 from 1 to 4294967295. The default value is 100000.

 -te_unresv_bw_priority7
 Amount of bandwidth not yet reserved at priority level 7. This
 argument is available when type unreserved is specified in the
 -te_sub_tlv_type argument. Possible values range
 from 1 to 4294967295. The default value is 100000.
 Use the following group of arguments to configure IPv4 routes. You must
 specify -route_type ipv4.

 -ipv4_route_count
 Total number of routes to generate. The value must be an integer.
 The default value is 0.

 -ipv4_route_dup_percentage
 Percentage of routes duplicated to another port. Possible values
 range from 0 to 100. The default value is 0.

 -ipv4_route_weight_assignment
 Specifies the method to distribute total number of routes.
 Possible values are:
 byports Distribute by ports

 byrouters Distribute by routers

 byspeed Distribute by speed

 The default value is byrouters.

 -ipv4_route_ip_addr_start
 Specifies the starting IPv4 address for generating routes. The
 default value is 1.0.0.0.

 -ipv4_route_ip_addr_end
 Specifies the ending IPv4 address for generating routes. The
 default value is 223.255.255.255.

 -ipv4_route_disable_route_aggr
 Enables/disables IPv4 routes aggregation. This argument is available
 for -mode modify. Possible values are true (enable) and false
BGP Functions
128
 (disable). The default value is false.


 -ipv4_route_prefix_len_dist_type
 Type of prefix length distribution used to generate routes.

 custom Defines a custom percentage of routes for
 each prefix length
 exponential Routes are distributed across prefix lengths
 using an exponential algorithm
 fixed All routes have the same user-specified
 prefix length
 internet Routes are distributed across prefix lengths in
 a manner typical of the Internet's default-free
 router prefix distribution
 linear Routes are distributed equally across prefix
 lengths from the starting prefix length to
 the ending prefix length

 The default value is fixed.

 -ipv4_route_prefix_len_dist
 Percentage of routes to create for each prefix length. This
 argument is available when -ipv4_route_prefix_len_dist_type is
 set to custom. Possible values range from 0 to 100. The default
 value is 0.

 -ipv4_route_prefix_len_start
 Minimum prefix length for generated routes. Possible values range
 from 1 to 32. The default value is 24.

 -ipv4_route_prefix_len_end
 Maximum prefix length for generated routes. Possible values range
 from 1 to 32. The default value is 24.

 -ipv4_route_pri_as_path_incr
 Specifies a list of numbers in string format that indicate the
 values in the Autonomous Systems (AS) path to be incremented. The
 default value is 1.

 -ipv4_route_pri_as_path_suffix
 AS path suffix for primary routes, in string format. The default
 value is 1.

 -ipv4_route_sec_as_path_incr
 Specifies a list of numbers in string format that indicate the
 values in the secondary AS Path to be incremented. The default
 value is 1.

 -ipv4_route_sec_as_path_suffix
 AS path suffix for secondary routes, in string format. The
 default value is 1.

 -ipv4_route_med
 Specifies the preferred exit point to a neighboring AS. Possible
 values range from 0 to 4294967295.

 -ipv4_route_med_incr
 Step value for subsequent Multi-Exit Discriminator (MED) values.
 Possible values range from 0 to 4294967295. The default value is
 0.

 -ipv4_route_local_pref
 Specifies the preference for a route to other BGP speakers in the
 same AS. Possible values range from 0 to 4294967295. The default
 value is 10.

 -ipv4_route_local_pref_incr
 Modifier to allow a route block to vary the local preference.
 Possible values range from 0 to 4294967295. The default value is
 0.
BGP Functions
129
 -use_ipv4_device_intf_addr_as_next_hop
 Determines whether to use the device interface address as the
 next hop. Possible values are true and false. If it is set to
 true, the device interface address will be used as the next hop.
 The default value is true.

 -ipv4_route_next_hop
 IP address of the border router that will be used as the next
 hop. The default value is 1.1.1.1. You must set
 -use_ipv4_device_intf_addr_as_next_hop to true.

 -ipv4_next_hop_count
 Number of unique next hops in the route block. The value must be
 an integer. The default value is 1.
 -ipv4_next_hop_increment
 Modifier to allow a route block to vary the next hop. The value
 must be in IPv4 format. The default value is 0.0.0.1.
 -ipv4_prefix_length_count
 Number of unique prefix lengths in the route block. Possible
 values range from 1 to 32. The default value is 1.

 -ipv4_prefix_length_increment
 Modifier to allow a route block to vary the prefix length.
 Possible values range from 1 to 32. The default value is 1.
 Use the following group of arguments to configure IPv6 routes. You must
 specify -route_type ipv6.

 -ipv6_route_count
 Total number of routes to generate. The value must be an
 integer. The default value is 0.

 -ipv6_route_dup_percentage
 Percentage of routes duplicated to another port. Possible values
 range from 0 to 100. The default value is 0.

 -ipv6_route_weight_assignment
 Specifies the method to distribute total number of routes.
 Possible values are:
 byports Distribute by ports

 byrouters Distribute by routers

 byspeed Distribute by speed

 The default value is byrouters.

 -ipv6_route_ip_addr_start
 Specifies the starting IPv6 address for generating routes. The
 default value is 2000::.

 -ipv6_route_ip_addr_end
 Specifies the ending IPv6 address for generating routes. The
 default value is 3ffe::.

 -ipv6_route_disable_route_aggr
 Enables/disables IPv6 routes aggregation. Possible values are true
 (enable) and false (disable). The default value is false.
 This argument is available in the modify mode.

 -ipv6_route_prefix_len_dist_type
 Type of prefix length distribution used to generate routes.
 Possible values are:

 custom Defines a custom percentage of routes for
 each prefix length
 exponential Routes are distributed across prefix lengths
 using an exponential algorithm
BGP Functions
130
 fixed All routes have the same user-specified
 prefix length
 internet Routes are distributed across prefix lengths in
 a manner typical of the Internet's default-free
 router prefix distribution
 linear Routes are distributed equally across prefix
 lengths from the starting prefix length to the
 ending prefix length

 The default value is fixed.

 -ipv6_route_prefix_len_dist
 Percentage of routes to create for each prefix length. This
 argument is available when -ipv6_route_prefix_len_dist_type is
 set to custom. Possible values range from 0 to 100. The default
 value is 0.

 -ipv6_route_prefix_len_start
 Minimum prefix length for generated routes. Possible values range
 from 1 to 128. The default value is 64.

 -ipv6_route_prefix_len_end
 Maximum prefix length for generated routes. Possible values range
 from 1 to 128. The default value is 64.

 -ipv6_route_pri_as_path_incr
 Specifies a list of numbers in string format that indicate the
 values in the primary AS Path to be incremented. The default
 value is 1.

 -ipv6_route_pri_as_path_suffix
 AS path suffix for primary routes, in string format. The default
 value is 1.

 -ipv6_route_sec_as_path_incr
 Specifies a list of numbers in string format that indicate the
 values in the secondary AS Path to be incremented. The default
 value is 1.

 -ipv6_route_sec_as_path_suffix
 AS path suffix for secondary routes, in string format. The
 default value is 1.

 -ipv6_route_med
 Specifies the preferred exit point to a neighboring AS. Possible
 values range from 0 to 4294967295.

 -ipv6_route_med_incr
 Modifier to allow a route block to vary the MED. Possible values
 range from 0 to 4294967295. The default value is 0.
 -ipv6_route_local_pref
 Specifies the preference for a route to other BGP speakers in the
 same AS. Possible values range from 0 to 4294967295. The default
 value is 10.

 -ipv6_route_local_pref_incr
 Modifier to allow a route block to vary the local preference.
 Possible values range from 0 to 4294967295. The default value is
 0.
 -use_ipv6_device_intf_addr_as_next_hop
 Determines whether to use the device interface address as the
 next hop. Possible values are true and false. If it is set to
 true, the device interface address will be used as the next hop.
 The default value is true.
 -ipv6_route_next_hop
 IPv6 address of the border router that should be used as the next
 hop. The default value is 2000::1.
 
BGP Functions
131
 -ipv6_next_hop_count
 Number of unique next hops in the route block. The value must be
 an integer. The default value is 1.

 -ipv6_next_hop_increment
 Modifier to allow a route block to vary the next hop. The value
 must be in IPv6 format. The default value is 0::0.
 -ipv6_prefix_length_count
 Number of unique prefix lengths in the route block. Possible
 values range from 1 to 32. The default value is 1.

 -ipv6_prefix_length_increment
 Modifier to allow a route block to vary the prefix length.
 Possible values range from 1 to 32. The default value is 1.

 Use the following group of arguments to configure BGP LS routes. You must
 specify -route_type link_state:

 -igp_protocols
 The type of Interior Gateway Protocol (IGP) to configure.
 Possible values are isis_ipv4 and ospfv2. The default value is
 ospfv2.

 -area_number
 Number of areas to configure. The total number of link states
 created must be less than or equal to 30000. Possible values
 range from 1 to 4294967295. The default value is 2.

Return Values
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 elem_handle Handle that identifies BGP route generator parameters.
 Used in -mode delete or modify as the input handle

 ip_block_handle List of handles of IPv4/IPv6 network route blocks under a
 specific BGP router. Can be used to create traffic

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)
Description:
 The sth::emulation_bgp_route_generator function creates and configures IP routes
 and Link State routes for the BGP protocol. Use the -handle argument to identify the
 router for which to create, modify, or delete a route/link state. (The router
 handle value is contained in the keyed list returned by the sth::emulation_bgp_config
 function.) Use the -mode argument to specify the action to perform. See the -mode
 argument for a description of the actions.
Examples:
 The following example configures IPv4 and link state BGP routes:
 set device_ret1_route1 [sth::emulation_bgp_route_generator\
 -handle $bgp_router1\
 -mode create\
 -route_type "link_state|ipv4"\
 -ipv4_route_count 4\
 -ipv4_route_dup_percentage 20\
 -ipv4_route_weight_assignment byports\
 -ipv4_route_ip_addr_start 1.1.1.1\
 -ipv4_route_ip_addr_end 1.1.1.10\
 -ipv4_route_disable_route_aggr true\
 -ipv4_route_prefix_len_dist_type fixed\
 -ipv4_route_pri_as_path_incr 1\
 -ipv4_route_pri_as_path_suffix 1\
 -ipv4_route_med 20\
 -ipv4_route_med_incr 1\
 -ipv4_route_local_pref 30\
 -ipv4_route_local_pref_incr 1\
BGP Functions
132
 -use_ipv4_device_intf_addr_as_next_hop false\
 -ipv4_route_next_hop 2.2.2.2\
 -ipv4_next_hop_count 2\
 -ipv4_next_hop_increment 0.0.0.1\
 -ipv4_prefix_length_count 1\
 -ipv4_prefix_length_increment 1\
 -igp_protocols ospfv2\
 -area_number 33\
 -backbone_headend_routers_number 4\
 -headend_routers_per_area 4\
 -ipv4_addr_start 1.1.1.1\
 -ipv4_addr_end 1.1.1.10\
 -if_prefix_length 24\
 -enable_loopback_advertisement true\
 -router_id_start 2.2.2.2\
 -router_id_step 0.0.0.1\
 -system_id_start 10:00:00:00:00:01\
 -system_id_step 00:00:00:00:00:01\
 -igp_metric_enabled true\
 -igp_metric_type ospfv2\
 -sr_enabled true\
 -sr_algorithms 0\
 -sr_sid_label_type label\
 -sr_cap_range 200\
 -sr_cap_value 201\
 -sr_adj_value 9005\
 -sr_ipv4_prefix_sid 2\
 -sr_ipv4_prefix_sid_step 1\
 -increment_sr_weight true\
 -increment_igp_metric true\
 -increment_ipv4_prefix_metric true\
 -increment_te_rsvr_bandwidth true\
 -increment_te_unrsvr_bandwidth true\
 -te_enabled true\
 -te_rsvr_bandwidth_step 200000\
 -te_unrsvr_bandwidth0_step 200000\
 -te_unrsvr_bandwidth1_step 200000\
 -te_unrsvr_bandwidth2_step 200000\
 -te_unrsvr_bandwidth3_step 200000\
 -te_unrsvr_bandwidth4_step 200000\
 -te_unrsvr_bandwidth5_step 200000\
 -te_unrsvr_bandwidth6_step 200000\
 -te_unrsvr_bandwidth7_step 200000\
 -num_routers 4\
 -if_type point_to_point\
 -max_if_per_router 6\
 -max_routers_per_transit_network 8\
 -te_sub_tlv_type unreserved\
 -te_bw_unit bytes_per_sec\
 -te_default_metric 10\
 -te_local_ip 1.1.1.1\
 -te_remote_ip 2.2.2.2\
 -te_admin_group 300000\
 -te_max_bw 300000\
 -te_max_resv_bw 300000\
 -te_unresv_bw_priority0 300000\
 -te_unresv_bw_priority1 300000\
 -te_unresv_bw_priority2 300000\
 -te_unresv_bw_priority3 300000\
 -te_unresv_bw_priority4 300000\
 -te_unresv_bw_priority5 300000\
 -te_unresv_bw_priority6 300000\
 -te_unresv_bw_priority7 300000\
 ]
Output:
 {ip_block_handle ipv4networkblock2} {elem_handle bgproutegenparams1} {status 1}
Break/Restore Link Functions
133
Break/Restore Link Functions
Functions:
sth::interface_control
sth::interface_control
Name:
 sth::interface_control
Purpose:
 Controls the specified test port(s) by breaking or restoring the related link(s).
Synopsis:
 sth::interface_control
 -mode {break_link | restore_link}
 -port_handle <handle>
Arguments:
 -mode
 Specifies the action to perform for the port(s) specified by
 the -port_handle argument. Possible values are break_link or
 This argument is mandatory. The modes are described below:

 break_link - Breaks all the current links on the specified port.
 restore_link - Restores the links broken by break_link.

 -port_handle
 Specifies the handle for the port to be controlled. This
 argument is mandatory.
Arguments Unsupported by Save as HLTAPI:
 This function is not currently supported.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS | $FAILURE.
 log An error message (if the operation failed).
Description:
 The sth::interface_control function controls the specified port on a Spirent
 HLTAPI chassis by breaking or restoring the related link(s). Use -port_handle
 to specify the port to be controlled, and use the -mode argument to specify
 the type of control.
 Depending on your test configuration, you may break more than one link by
 using break_link. To restore all of the affected links, use restore_link for
 the port on which the link was broken.
Examples:
 The following example breaks the link on a specified port:
 set cmdReturn [sth::interface_control -mode break_link \
 -port_handle port1]
 The following example restores the broken link:
 set cmdReturn [sth::interface_control -mode restore_link \
 -port_handle port1]
Sample Input:
Break/Restore Link Functions
134
 See examples.
Sample Output:
 {status 1}
Notes:
 None
End of Procedure Header
Device Configuration Functions
135
Device Configuration Functions
Functions:
sth::emulation_device_config
sth::emulation_device_config
Name:
 sth::emulation_device_config
Purpose:
 Creates, modifies or deletes emulated devices.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_device_config
 -mode create -port_handle <port_handle> |
 -mode {modify|delete} -handle < device_handle>
 [-count <integer>]
 [-encapsulation {ethernet_ii | ethernet_ii_vlan | ethernet_ii_qinq}]
 [-enable_ping_response {1 | 0}]
 [-gateway_mac <aa:bb:cc:dd:ee:ff>]
 [-ipv6_gateway_mac <aa:bb:cc:dd:ee:ff>]
 [-ip_version {4 | 6}]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-gateway_ip_addr <a.b.c.d>]
 [-gateway_ip_addr_step <a.b.c.d>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-intf_prefix_len <1-32>]
 [-intf_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-intf_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_prefix_len <1-128>]
 [-link_local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-link_local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-link_local_ipv6_prefix_len <0-128>]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-qinq_incr_mode {inner | outer | both}]
 [-router_id <a.b.c.d>]
 [-router_id_ipv6 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-vlan_id_step <0-4095>]
 [-vlan_id_repeat_count <0-4294967295>]
 [-vlan_user_pri <0-7>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_step <0-4095>]
 [-vlan_outer_id_repeat_count <0-4294967295>]
 [-vlan_outer_user_pri <0-7>]
Arguments:
 -port_handle
 Specifies the port on which to create the emulated device. This
 handle is returned by the sth::connect function. It is mandatory
 for -mode create.

 -handle
 Specifies the device handle. This argument is mandatory for
 -mode modify and delete. For -mode delete, you can also specify
 the value all, to delete all devices.
 Note: -handle all is only valid for -mode delete.
 -mode
 Specifies the action to perform on the test port. This argument is 
Device Configuration Functions
136
 mandatory. Possible values are:

 create - Creates the device on the specified port. You must
 specify -port_handle.

 modify - Modifies the configured device identified by -handle.

 delete - Deletes the emulated device identified by -handle.

 -count
 Specifies the number of emulated devices to be created. The
 default value is 1.

 -router_id
 Specifies the router ID of the emulated device. The value
 must be in IPv4 format.
 -router_id_ipv6
 Specifies the IPv6 router ID of the emulated device. The value
 must be in IPv6 format.

 -enable_ping_response
 Enables or disables the emulated device to respond to ping.
 Possible values are 0 (disable) and 1 (enable). The default is 0.
 -gateway_mac
 Specifies the IPv4 gateway's MAC address for the emulated device.
 The default value is 00:00:01:00:00:01.
 -ipv6_gateway_mac
 Specifies the IPv6 gateway's MAC address for the emulated device.
 The default value is 00:00:01:00:00:01.

 -ip_version
 Defines the IP version of the emulated device. Possible values
 are ipv4, ipv6 and ipv46. The default value is ipv4.
 -intf_ip_addr
 Specifies the IPv4 address of the emulated device. The default
 value is 192.85.1.3.
 -intf_ip_addr_step
 Specifies the difference between IPv4 interface addresses of
 consecutive devices when multiple emulated devices are created.
 The value must be in IPv4 format. The default is 0.0.0.1.

 -gateway_ip_addr
 Specifies the IPv4 gateway address for the emulated device.

 -gateway_ip_addr_step
 Specifies the difference between IPv4 gateway addresses of
 consecutive devices when multiple emulated devices are created.
 The default value is 0.0.0.1.

 -intf_prefix_len
 Specifies the prefix length for the IPv6 address of the emulated
 device. Possible values range from 1 to 32. The default is 24.

 -intf_ipv6_addr
 Specifies the IPv6 address of the emulated device.
 -intf_ipv6_addr_step
 Specifies the difference between interface IPv6 addresses of
 consecutive devices when multiple emulated devices are created.
 -intf_ipv6_prefix_len
 Specifies the prefix length for the IPv6 address of the emulated
 device. Possible values range from 0 to 128. The default is 64.
 -gateway_ipv6_addr
 Specifies the IPv6 gateway address for the emulated device.
Device Configuration Functions
137

 -gateway_ipv6_addr_step
 Specifies the difference between IPv6 gateway addresses of
 consecutive devices when multiple emulated devices are created.
 -link_local_ipv6_addr
 Specifies the starting link local IPv6 address for emulated
 devices. The value must be in IPv6 format. The default is
 FE80::0.

 -link_local_ipv6_addr_step
 Specifies the difference between link local IPv6 addresses of
 consecutive devices when multiple emulated devices are created.
 The value must be in IPv6 format. The default is ::1.

 -link_local_ipv6_prefix_len
 Specifies the prefix length for the link local IPv6 address of
 the emulated device. Possible values range from 0 to 128. The
 default is 64.

 -mac_addr
 Specifies the MAC address of the emulated device.

 -mac_addr_step
 Specifies the difference between MAC addresses of consecutive
 devices when multiple emulated devices are created.

 -qinq_incr_mode
 Determines which VLAN ID to increment first. Possible values are:

 inner - Increments the inner VLAN ID before the outer VLAN ID

 outer - Increments the outer VLAN ID before the inner VLAN ID

 both - Increment both the inner and outer VLAN ID at the same time


 The default value is inner.

 -encapsulation
 Specifies the type of Layer 2 encapsulation for the emulated
 device. Possible values are:

 ethernet_ii - Ethernet II

 ethernet_ii_vlan - Ethernet II with a single VLAN tag

 ethernet_ii_qinq - Ethernet II with two VLAN tags

 The default value is ethernet_ii.

 -vlan_id
 Specifies the starting VLAN ID for the ethernet_ii_vlan
 encapsulation or the ethernet_ii_qinq encapsulation. Possible
 values range from 0 to 4095. The default value is 100. This
 argument is available when -encapsulation is set to
 ethernet_ii_qinq or ethernet_ii_vlan.
 -vlan_id_step
 Specifies the step size by which the VLAN ID is incremented.
 Possible values range from 0 to 4095. The default value is 1.
 -vlan_id_repeat_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of times to repeat the same IPv4 address before
 incrementing it for the inner VLAN. The value must be an integer.
 The default value is 0.
 -vlan_user_pri
 Specifies the VLAN user priority assigned to emulated device.
 Possible values range from 0 to 7. The default value is 0.
Device Configuration Functions
138
 -vlan_outer_id
 Specifies the starting outer VLAN ID for the QinQ encapsulation.
 Possible values range from 0 to 4095. The default value is 100.
 This argument is available when -encapsulation is set to
 ethernet_ii_qinq.
 -vlan_outer_id_step
 Specifies the step size by which the outer VLAN ID is
 incremented. Possible values range from 0 to 4095. The default
 value is 1.

 -vlan_outer_id_repeat_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of times to repeat the same IPv4 address before
 incrementing it for the outer VLAN. The value must be an integer.
 The default value is 0.
 -vlan_outer_user_pri
 Specifies the VLAN priority to assign to the outer VLAN header.
 Possible values range from 0 to 7. The default value is 0.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status $SUCCESS (1) or $FAILURE (0)
 log Error message if command returns {status 0}
 handle The host handle
Description:
 The sth::emulation_device_config function creates, modifies and deletes one or
 more emulated hosts on the specified port. Use the -mode argument to
 specify the action to perform. (See the -mode argument description for
 information about the actions.)

 When you create an emulated host, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated device will use. (The port
 handle value is contained in the keyed list returned by the connect function.)
 The create mode returns the handle of the host.

 Use this function when you want to create a device without configuring a
 protocol. You can enable a protocol on the created device if you need it later.
 You can also use the created device as the source or destination handle when you
 create a bound stream.

Examples:
 The following example creates an emulated host:

 set devcie_ret1 [::sth::emulation_device_config\
 -port_handle $port1\
 -mode create\
 -count 1\
 -router_id 192.0.0.1\
 -ip_version ipv4\
 -intf_ip_addr 11.11.11.11\
 -intf_ip_addr_step 0.0.0.1\
 -gateway_ip_addr 11.11.11.12\
 -gateway_ip_addr_step 0.0.0.1\
 -intf_prefix_len 24\
 -mac_addr 00:01:02:03:04:05\
 -mac_addr_step 00:00:00:00:00:01\
 ]

 Sample Output:
 
Device Configuration Functions
139
 {handle host2} {status 1}
 The following example deletes all devices:
 set returnedString [sth::emulation_device_config \
 -mode delete \
 -handle all]
Debug Functions
140
Debug Functions
Functions:
sth::test_config
sth::test_control
sth::test_config
Name:
 sth::test_config
Purpose:
 Sets parameters for logging, debugging, and improving the performance of
 the entire Spirent HLTAPI.
 Because each implementation of HLTAPI differs among vendors, debugging
 a script in HLTAPI can be a daunting task. HLTAPI implementations often are
 wrappers around the native vendors API and may not include much
 assistance for tracking down issues. The Spirent TestCenter HLTAPI contains
 extensive capabilities for tracking issues in the API as well as for optimizing the
 HLTAPI run-time execution. This document explains how to enable logging
 and optimize Spirent TestCenter HLTAPI functions as well as considerations
 for when to use the various options.
Synopsis:
 sth::test_config
 -log {1|0}
 [-logfile <demoLogfile>]
 [-log_level <0-7>]
 [-vendorlogfile stcExport\
 [-vendorlog {1|0}]
 [-hltlog {1|0}]
 [-hltlogfile hltExport\
 [-hlt2stcmappingfile hlt2StcMapping\
 [-hlt2stcmapping {1|0}]
Arguments:
 -hlt2stcmapping
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the creation of a hlt2stcmapping.txt
 file. Valid values are 1 and 0. Specify the value 1 to
 generate a mapping file. Specify the value 0 if you do not
 want to generate this file. The default is 0.
 -hlt2stcmappingfile
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the name of the file into which to capture the
 mapping from each executed HLTAPI command to all commands
 that are mandatory to implement that HLTAPI command.
 The default file name is "hlt2stcmapping.txt". You can
 change the name of the mapping file to anything you like.
 -hltlog
 Enables or disables the creation of an hltlog.txt file.
 Valid values are 1 and 0. Specify the value 1 to generate an
 hltlog.txt file. For Spirent HLTAPI, this file contains all
 of the HLTAPI commands executed. Specify the value 0 if you
 do not want to generate this file. The default is 0. The
 hltlog.txt file contains all executed commands (both HLTAPI
 and Spirent HLTAPI) and up to seven levels of log
 messages, depending on your setting for the -log_level
 argument. You can change the name of the log file using the
 -hltlogfile argument.
Debug Functions
141
 -hltlogfile
 Specifies the name of the file into which to capture all
 HLTAPI commands executed during your test run. The default
 file name is "hltlog.txt". You can change the name of this
 file to anything you like.
 -log
 Enables or disables logging. Valid values are
 1 and 0. Specify the value 1 to generate a log.txt file.
 Specify the value 0 to disable logging. If you disable
 logging, all logging features are also disabled.
 The default is 0. The log.txt file contains all executed
 commands (both HLTAPI and Spirent HLTAPI) and up to
 seven levels of log messages, depending on your setting for
 the -log_level argument (see -log_level).
 -logfile
 Specifies the name of the file into which to capture both
 HLTAPI and Spirent HLTAPI executed commands as well
 as other log messages determined by the log level you set in
 the -log_level argument. The default file name is "log.txt".
 You can change the name of the log file to anything you
 like.
 -log_level
 Specifies the level of messages to be captured in the
 hltlog.txt file. These levels, as defined by the Cisco
 HLTAPI specification, are:
 emergency 0
 alert 1
 critical 2
 error 3
 warn 4
 notify 5
 info 6
 debug 7
 Set the log level to n, where 0 <= n <= 7.
 -vendorlog
 Enables or disables the creation of an vendorlog.txt file.
 Valid values are 1 and 0. Specify the value 1 to generate an
 vendorlog.txt file. Specify the value 0 if you do not want
 to generate this file. The default is 0.
 -vendorlogfile
 Specifies the name of the file into which to capture all
 Spirent HLTAPI commands executed during your test run.
 The default file name is "vendorlog.txt". You can change the
 name of the vendor log file to anything you like.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::test_config function enables you to set logging options for
 capturing commands executed by HLTAPI, Spirent TestCenter, or both. It also
 enables you to capture the following types of messages: alerts, critical,
 error, warning, notification, information, and debug.
 
Debug Functions
142
 The following sth::test_config function captures each HLTAPI function
 executed in a script, along with its parameters, and saves it to a log
 file:

 sth::test_config -log 1 -hltlog 1 -hltlogfile <mylogfile >

 You must set log to 1 to enable logging. Set the hltlog parameter to 1 to
 capture the HLTAPI API calls (both vendor-specific and standard) in your
 test script. Use the -hltlogfile parameter to specify the name of the file
 to contain a log of the HLTAPI functions executed during the test run. The
 log file name is automatically appended with the suffix ".txt" and written
 to the current working directory. Each time you use this function, it
 overwrites the previously generated log file.

 Note: This function does not capture the logic flow of the executed
 functions. Each function is recorded as it is invoked. To record the
 process flow, use the function described in "Capturing and Logging the
 Logic Flow" below.
Examples:
 sth::test_config -log 1\
 -logfile demoLogfile \
 -log_level 7\
 -vendorlogfile stcExport\
 -vendorlog 1\
 -hltlog 1\
 -hltlogfile hltExport\
 -hlt2stcmappingfile hlt2StcMapping\
 -hlt2stcmapping 1
 Sample contents of an HLT log file:

 ################# Spirent HLTAPI Export Log File ##################

 puts "source hltapi_5.10_stc_2.10.tcl"
 source hltapi_5.10_stc_2.10.tcl
 #puts "package require SpirentHltApi"
 #package require SpirentHltApi

 puts "sth::connect -device 10.6.2.68 -port_list {1/1 1/2}"
 set status [sth::connect -device 10.6.2.68 -port_list {1/1 1/2}]
 puts $status

 puts "after 2000"
 set status [after 2000]
 puts $status

###############################################################
 Capturing and Logging Spirent TestCenter API Functions
###############################################################

 Use the following function to capture each Spirent TestCenter API executed
 in a script, along with its parameters, and save it to a log file:

 sth::test_config -log 1 -vendorlog 1 -vendorlogfile <abc>

 You must set -log to 1 to enable logging. Set the -vendorlog parameter to
 1 to capture the Spirent TestCenter API calls in your test script. Use the
 -vendorlogfile parameter to specify the name of the file to contain the
 logged functions. The log file name is automatically appended with the
 suffix ".txt" and written to the current working directory. Each time you
 use this function, it overwrites the previously generated log file.

 Note: This function does not capture the logic flow of the executed
 functions. Each function is recorded as it is invoked. To record the
 process flow, use the function described in "Capturing and Logging the
 Logic Flow."
 
Debug Functions
143
 Sample vendor log file contents:

 ############# Spirent HLTAPI STC Export Log File #############
 puts "package require SpirentTestCenter"
 package require SpirentTestCenter
 #puts "source SpirentTestCenter.tcl"
 #source SpirentTestCenter.tcl

 ::stc::create project -under system1

 puts "::stc::connect 10.6.2.68"
 set status [::stc::connect 10.6.2.68]
 puts $status

 puts "::stc::create Port -under project1 -location 10.6.2.68/1/1 -name
 10.6.2.68-1-1"
 set status [::stc::create Port -under project1 -location 10.6.2.68/1/1
 -name 10.6.2.68-1-1]
 puts $status

 puts "stc::sleep 2"
 set status [stc::sleep 2]
 puts $status

 puts "stc::get system1 -children-physicalChassisManager"
 set status [stc::get system1 -children-physicalChassisManager]
 puts $status

 puts "stc::get physicalchassismanager1 -children-physicalChassis"
 set status [stc::get physicalchassismanager1 -children-physicalChassis]
 puts $status

 puts "stc::get physicalchassis1 -hostname"
 set status [stc::get physicalchassis1 -hostname]
 puts $status

##################################################################
 Capturing and Logging the Processing Steps
##################################################################

 Use the following function to capture the internal processing steps of each
 function in a Spirent TestCenter API script, and save it to a log file:

 sth::test_config -log 1 -logfile <abc>

 Set the log parameter to 1 to enable logging Spirent TestCenter API
 functions. Set it to 0 to disable logging. Use the logfile parameter to
 specify the name of the file to contain the processing steps. The log file
 name is automatically appended with the suffix ".txt" and written to the
 current working directory. Each time you use this function, it overwrites
 the previously generated log file.

 Note: This function does not capture the logic flow of the executed HLTAPI
 functions. It only records the internal processing steps in the order in
 which they occur.
Sample Output:
 Sample processing log file contents:

 ############# Spirent HLTAPI Log File #############
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [debug]
 sth::connect -device 10.6.2.68 -port_list {1/1 1/2}
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [warn] Utracker
 package not loaded!!. Message not sent.
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [debug] Sent utraker
 Msg: tasmania-linux SPIRENT_STH JMcLendon ::sth::connect {-device
 10.6.2.68
 -port_list {1/1 1/2}}
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [hltcall] ::sth::connect
 {-device 10.6.2.68 -port_list {1/1 1/2}}
Debug Functions
144
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [error] ::sth::connect
 {-device 10.6.2.68 -port_list {1/1 1/2}}
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [debug] {Calling
 sth::connect}
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [info] {Generating
 session table}
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [info] {Calling:
 ::sth::Session::processConnectDevice}
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [info] {Calling
 processConnectDevice}
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [stccall] ::stc::connect
 10.6.2.68
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [error] ::stc::connect
 10.6.2.68
 Wed Sep 10 10:58:59 AM Eastern Daylight Time 2008 [debug] ::stc::connect
 10.6.2.68
 Wed Sep 10 10:59:02 AM Eastern Daylight Time 2008 [info] [doStcConnect]
 ::stc::connect 10.6.2.68 PASSED.
 Wed Sep 10 10:59:02 AM Eastern Daylight Time 2008 [debug]
 {::sth::sthCore::doStcConnect: Chassis: 10.6.2.68: Status: 1}
 Wed Sep 10 10:59:02 AM Eastern Daylight Time 2008 [debug] Connected to
 chassis: 10.6.2.68
 Wed Sep 10 10:59:02 AM Eastern Daylight Time 2008 [info] {Successfully
 completed processing switch: device for HltCmd: Connect}
Notes:
################################################################
 Reporting Bugs
################################################################
 When using the logging functions described in this document, you may notice
 that several other log files are created by Spirent TestCenter. Before
 reporting bugs, put the following statement at the beginning of your script
 and execute the script:

 sth::test_config -log 1 -vendorlog 1 -hltlog 1 -log_level 7

 After the error occurs, open a service request (SR), attach all of the
 following files to it, and email it to the person responsible for handling
 the SR.

 log.txt
 vendorlog.txt
 hltlog.txt
 bll.log
 <chassis_ip_address>.log


End of Procedure Header
sth::test_control
Name:
 sth::test_control
Purpose:
 Sets parameters for optimization and parsing.
Synopsis:
 sth::test_control
 -action {enable|disable|sync}]
 [-parser {cisco|spirent}]
Arguments:
 -action
 Specifies the action to take on the specified port handles.
Debug Functions
145
 Possible values are:
 enable - Enable optimization (that is, disable the
 implicit "apply" inside of each HLTAPI
 command).
 disable - Do not enable optimization (that is, allow
 the implicit "apply" inside of each HLTAPI
 command).
 sync - Applies the configuration created in HLTAPI to
 the card.
 You must specify an action. There is no default.
 -parser
 Specifies which parser you want Spirent HLTAPI to use. Possible
 values are:
 cisco - Use the Cisco parser function (parse_dashed_arg)
 for parsing. It is slower but more sophisticated
 than the Spirent parser.
 spirent - Use the Spirent parser function
 (parse_dashed_args) for parsing. It is simpler and
 faster than the Cisco parser.
 The default is "cisco".
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::test_control function enables you to control optimization settings
 and choose whether to use the Cisco or Spirent parser during test runs.
 The function returns a status value (1 for success). If there is an error,
 the function returns the status value (0) and an error message.

################################################################
 Optimizing HLTAPI Execution
################################################################

 You can speed up the execution of your HLTAPI test script in two ways. In
 some cases, these methods provide substantial reductions in test times.

 Using the Spirent Parser

 Cisco Test Technologies supplies all HLTAPI vendors with a command line
 parser for use in their implementations of HLTAPI. Spirent has developed an
 equivalent parser that uses a pre-compilation technique to reduce the
 amount of time spent parsing the command line parameters.

 To use the Spirent parser, add the following command to your test script:

 sth::test_control -parser spirent

 Using Command Caching

 Most HLTAPI vendors have a control to enable command caching. Command
 caching reduces test times by caching commands until they are needed by 
Debug Functions
146
 the test system. When command caching is enabled, a command may not be
 sent to the ports until several subsequent command have been issued.
 Therefore, we recommend that you use command caching only on scripts that
 have been debugged and are working correctly.

 To enable command caching, use the following function:

 sth:test_control -action enable

 Debugging a Test Script
 If you do not use an HLTAPI function properly, the system returns an error.
 Each error description usually explains that the function failed and
 indicates the correct usage of the function.

 When you are running a test script, it can be difficult to detect which
 function failed. Including "puts" statements in the test script can narrow
 the problem area, because you can see the output at each point in the
 script where a puts statement occurs. You can also use the built-in stack
 trace by calling set errorInfo, or type in the functions one at a time.

 Currently, each API function returns an appropriate error message
 indicating if it encountered a problem but also returns a 1 if the
 operation completed successfully. So, you can write code around each
 HLTAPI function call that tests to see if it completed successfully.
Examples: See Sample Input and Sample Output.
Sample Input:
 sth::test_control -action enable; //To turn off the implicit apply
 sth::test_control -action disable: //To allow implicit apply
 sth::test_control -action sync; //To call apply explicitly
 sth::test_control -parser CISCO; //to use CISCO parser
 sth::test_control -parser spirent; //to use Spirent parser
Sample Output:
 On success:
 {status 1} {log {}}
 On failure:
 {status 0} {log {<errorMsg>}}
Notes:
 A Special Note on utracker

 Utracker is a command utility supplied by Cisco Test Technologies that does
 internal usage tracking of HTLAPI. When you start Spirent TestCenter
 HLTAPI, you may see an error message indicating that the utracker package
 is not installed. The presence or absence of the utracker package does not
 affect the processing within Spirent TestCenter HLTAPI. Please ignore this
 message.
End of Procedure Header
DHCP Functions
147
DHCP Functions
Functions:
sth::emulation_dhcp_config
sth::emulation_dhcp_group_config
sth::emulation_dhcp_control
sth::emulation_dhcp_stats
sth::emulation_dhcp_config
Name:
 sth::emulation_dhcp_config
Purpose:
 Creates, modifies, or resets an emulated Dynamic Host Configuration Protocol
 (DHCP) clients or Dynamic Host Configuration Protocol for IPv6 or Prefix
 delegation (DHCPv6/PD) clients for the specified Spirent HLTAPI port or handle.

 DHCP is used for IPv4 and IPv6. While both versions serve much the same purpose,
 the details of the protocol for IPv4 and IPv6 are sufficiently different that
 they may be considered separate protocols. You use Spirent HLTAPI to emulate a
 network containing DHCP or DHCPv6/PD clients.
 DHCP uses a client-server model, in which DHCP servers provide network
 addresses and configuration parameters to DHCP clients.
 DHCPv6/PD is intended for delegating a long-lived IPv6 prefix and
 configuration information from a delegating router to a requesting router,
 across an administrative boundary, where the delegating router does not
 require knowledge about the topology of the links in the network to which
 the prefixes will be assigned. Hosts attached to the requesting router can
 auto-configure the IPv6 addresses from the delegated prefix.
Synopsis:
 sth::emulation_dhcp_config
 -mode create -port_handle <port(device.port)> |
 -mode {enable | modify} -handle <dhcp_port | device> |
 -mode reset
 [-ip_version {4|6}]
 [-broadcast_bit_flag{0|1}]
 [-circuit_id <hexadecimal >]
 [-circuit_id_suffix <integer>]
 [-circuit_id_suffix_step <integer>]
 [-circuit_id_suffix_count <integer>]
 [-circuit_id_suffix_repeat <integer>]
 [-client_id < hexadecimal >]
 [-client_id_suffix <integer>]
 [-client_id_suffix_count <integer>]
 [-client_id_suffix_step <integer>]
 [-client_id_suffix_repeat <integer>]
 [-client_id_type <0-255>]
 [-remote_id <hexadecimal >]
 [-remote_id_suffix <integer>]
 [-remote_id_suffix_count <integer>]
 [-remote_id_suffix_step <integer>]
 [-remote_id_suffix_repeat <integer>]
 [-lease_time <10-2147483647> ]
 [-max_dhcp_msg_size <264-1500> ]
 [-msg_timeout <1000-99999000>]
 [-outstanding_session_count <1-2048>]
 [-release_rate <1-10000>]
 [-request_rate <1-10000>]
 [-retry_count <0-32>]
 [-relay_agent_flag {0|1}]
DHCP Functions
148
 [-relay_agent_ip_addr <a.b.c.d>]
 [-sequencetype {PARALLEL|SEQUENTIAL}]
 [-server_ip_addr <a.b.c.d>]
 [-starting_xid <0-4294967295>]
 [-dhcp6_reb_timeout <1-99999>]
 [-dhcp6_rel_max_rc <1-32>]
 [-dhcp6_rel_timeout <1-99999>]
 [-dhcp6_ren_max_rt <1-99999>]
 [-dhcp6_ren_timeout <1-99999>]
 [-dhcp6_req_max_rc <1-32>]
 [-dhcp6_req_max_rt <1-99999>]
 [-dhcp6_req_timeout <1-99999>]
 [-dhcp6_sol_max_rc <1-32>]
 [-dhcp6_sol_max_rt <1-99999>]
 [-dhcp6_sol_timeout <1-99999>]
 [-dhcp6_outstanding_session_count <1-2048>]
 [-dhcp6_release_rate <1-1000>]
 [-dhcp6_request_rate <1-1000>]
 [-dhcp6_renew_rate <1-1000>]
 [-dhcp6_sequence_type { PARALLEL| SEQUENTIAL }]
 [-dhcp6_indef_rel_rt {true|false}]
 [-dhcp6_indef_req_rt {true|false}]
 [-dhcp6_indef_sol_rt {true|false}]
 [-dhcp6_dec_max_rc <1-32>]
 [-dhcp6_dec_timeout <1-99999>]
 [-dhcp6_inforeq_max_rt <1-99999>]
 [-dhcp6_inforeq_timeout <1-99999>]
 [-dhcp6_cfm_duration <1-99999>]
 [-dhcp6_cfm_max_rt <1-99999>]
 [-dhcp6_cfm_timeout <1-99999>]
Arguments:
## The following arguments are common for DHCPv4 and DHCPv6:
 -handle
 Specifies the handle of the port or the device upon which DHCP or
 DHCPv6/PD emulation is configured. When -mode is set to either
 modify or reset, the value is returned by the
 sth::emulation_dhcp_config function. When -mode is set to enable,
 the value is the device handle returned by other protocol
 emulation functions with mode create. This argument is mandatory
 for enable, modify and reset modes.
 -port_handle
 The handle of the port on which to configure DHCP or DHCPv6/PD
 emulation. The port handle is returned by the
 sth::interface_config function. This argument is mandatory for
 create mode (see -mode).
 -mode
 Specifies the action to perform. Possible values are create,
 modify, and reset. This argument is mandatory. The modes are
 described below:
 create - Starts emulating DHCP or DHCPv6/PD clients on the port
 specified by -port_handle.
 enable- Starts the emulating DHCP or DHCPv6/PD clients on the
 device specified by -handle. You must specify the -handle
 argument. Currently, this option is only supported when
 -ip_version is 6.

 modify - Changes the configuration parameters for the DHCP or
 DHCPv6/PD clients identified by the -handle argument.

 reset - Stops the DHCP or DHCPv6/PD emulation locally without
 attempting to clear the bound addresses from the DHCP server.
 In addition, all DHCP or DHCPv6 group sessions information on
 the port is cleared and the connection is restarted. Because
 -mode reset deletes the handle, do not use the handle following
 this action.
DHCP Functions
149
 IMPORTANT:
 Before using sth::emulation_dhcp_config -mode reset,
 you must first delete all traffic streams with the
 sth::traffic_config -mode reset command. Traffic
 streams must be reset before DHCP or DHCPv6/PD can be reset.
 -ip_version
 Spirent Extension (for Spirent HLTAPI only).
 Defines the IP version to be used. Possible values are 4 and
 6. The default is 4.
## The following arguments are for DHCPv4:
 -broadcast_bit_flag
 Configures the flag to broadcast client responses. Possible values
 are 0 and 1. If the argument is set to 1, the DHCP Server or
 relay agent will broadcast DHCP messages using an IP broadcast
 address. If it is set to 0, the DHCP or DHCPv6/PD Server or relay
 agent will send the DHCP or DHCPv6/PD messages to the IP address
 specified in the "yiaddr" field. The default is 1.
 -circuit_id
 Configures the circuit ID sub-option of relay agent
 option (82). This sub-option encodes an agent-local
 identifier of the circuit from which a DHCP
 client-to-server packet was received. It is intended
 for use by agents in relaying DHCP responses back to
 the proper circuit. (See RFC 3046 for more
 information.) The circuit ID must be globally
 unique, and the value must be in the hexadecimal format.
 The default is 0.

 -circuit_id_suffix
 Defines the suffix to append to the circuit ID. The default
 is 0.
 -circuit_id_suffix_step
 Defines the increment used to generate circuit ID suffixes
 (-circuit_id_suffix) for emulated clients. The default is 1.
 -circuit_id_suffix_count
 Specifies the number of circuit ID suffixes. Possible values
 range from 1 to <max_int>. The default is 1.

 -circuit_id_suffix_repeat
 Specifies the number of times a circuit ID suffix should
 be repeated, before the step that is specified in the
 -circuit_id_suffix_step argument is applied to the
 circuit ID suffix for incrementing. Possible values
 range from 1 to <max_int>.
 -client_id
 Configures the client ID option (61). DHCP clients use client ID
 (option 61) to specify their unique identifier. DHCP
 servers use this value to index their database of address
 bindings. This value is expected to be unique for all
 clients in an administrative domain. This value must be in
 hexadecimal format.
 -client_id_suffix
 Configure the suffix to append to the client ID. Possible values
 range from 0 to <max_int-1>.
 -client_id_suffix_count
 Specifies the number of client ID suffixes. Possible values
 range from 1 to <max_int>. The default is 1.
 -client_id_suffix_step
 Defines the increment used to generate client ID suffixes
 (-client_id_suffix) for emulated clients. Possible values range
DHCP Functions
150
 from 0 to <max_int-1>. The default value is 1.
 -client_id_suffix_repeat
 Specifies the number of times a client ID suffix should
 be repeated, before the step that is specified in the
 -client_id_suffix_step argument is applied to the
 client ID suffix for incrementing. Possible values
 range from 1 to <max_int>.
 -client_id_type
 Configures the client ID type. Possible values range from 0 to
 255. You must specify this argument when you specify -client_id.

 -remote_id
 Configures the remote ID sub-option of relay agent
 option. The remote ID can be used by relay agents that terminate
 switched or permanent circuits and have mechanisms to identify the
 remote host end of the circuit. The remote ID must be globally
 unique, and the value must be in the hexadecimal format.
 The default is 0.

 -remote_id_suffix
 Defines the suffix to append to the circuit ID. The default
 is 0.
 -remote_id_suffix_step
 Defines the increment used to generate remote ID suffixes
 (-remote_id_suffix) for emulated clients. The default is 1.

 -remote_id_suffix_repeat
 Specifies the number of times a remote ID suffix should
 be repeated, before the step that is specified in the
 -remote_id_suffix_step argument is applied to the
 remote ID suffix for incrementing. Possible values
 range from 1 to <max_int>.
 -remote_id_suffix_count
 Specifies the number of remote ID suffixes. Possible values
 range from 1 to <max_int>. The default is 1.
 -lease_time
 Specifies a finite time period, in seconds, for use of the
 IP address offered by the DHCP server. The actual lease
 length that the DHCP sessions will receive depends on the
 lease time configured for the DUT. For example, if the
 Cisco DUT sends a lease time of one day (its default), then
 the IP address will only be good for one day, regardless of
 the value set by Spirent HLTAPI. Possible values range
 from 10 to 2147483647. The default is 86400.
 -max_dhcp_msg_size
 Sets the maximum size, in bytes, of the DHCP message.
 Spirent HLTAPI uses this value to negotiate the DHCP message
 size, in bytes. Possible values range from 264 to 1500. The
 default is 576.
 -msg_timeout
 Sets the maximum time, in milliseconds, to wait for receipt
 of an offer or ack message after sending a corresponding
 discover or request message. Possible values range from 1000
 to 99999000. However, because Spirent HLTAPI accepts
 seconds, the timeout value must be evenly divisible by 1000.
 The default is 15000.
 Note: The -msg_timeout argument controls the determination
 of when a discover or request message is counted as
 unacknowledged.
 -outstanding_session_count
 Specifies the maximum number of outstanding sessions that
 Spirent HLTAPI can resolve at one time. Possible values
DHCP Functions
151
 are 1 to 2048. The default is 100.
 -release_rate
 The number of DHCP sessions that are released per second.
 This value applies to all sessions on the port. Possible
 values range from 1 to 10000. The default is 500.
 Note: DHCPv4 release messages are unacknowledged; therefore,
 the system may overwhelm the DHCP server.
 -request_rate
 The number of requests per second for DHCP client leases or
 lease renewals. This value applies to all sessions on the
 port. Possible values range from 1 to 10000. The default is
 500.
 -retry_count
 The maximum number of times that discover or request
 messages will be re-sent. This value limits the number of
 additional transmissions of either a discover or request
 message when no acknowledgement is received. Possible values
 range from 0 to 65535. The default is 0.
 Note: A session is considered failed once the -retry_count
 argument is exceeded.
 -relay_agent_flag
 Configures DHCP relay agent. The DHCP relay agent allows
 you to place DHCP clients and DHCP servers on different
 networks. Possible values are 0 (disabled) and 1 (enabled).
 You can use this argument to control the configuration of
 -relay_agent_ip_addr and -server_ip_addr.
 -relay_agent_ip_addr
 Configures DHCP relay agent IP address. The value should
 be in IPv4 format. The default value is 192.1.1.0.
 You can use this argument when -relay_agent_flag is enabled.
 -sequencetype
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the port-level sequence type that determines in what
 order DHCP sessions are attempted. Possible values are
 PARALLEL and SEQUENTIAL. The default is SEQUENTIAL.

 -server_ip_addr
 Configures DHCP server IP address. The default value is
 192.1.1.2. The value should be in the IPv4 format.
 You can use this argument when -relay_agent_flag is enabled.
 This argument is required when relay_agent_ip_addr is
 used. Both arguments must be configured in the same segment.
 -starting_xid
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting transaction identifier for the port. Each
 DHCP session is assigned a unique transaction identifier.
 Possible values range from 0 to 4294967295. The default is 0.
## The following arguments are for DHCPv6: (You must set -ip_version to 6)
 -dhcp6_reb_max_rt
 Specifies the maximum rebind message retry timeout in seconds.
 Possible values range from 1 to 99999. The default value is 600.
 -dhcp6_reb_timeout
 Specifies the Rebind message initial timeout in seconds. Possible
 values range from 1 to 99999. The default value is 10.
 -dhcp6_rel_max_rc
 Specifies the number of release retries. Possible values range
 from 1 to 32. The default value is 5.
 -dhcp6_rel_timeout
DHCP Functions
152
 Specifies the Release message initial timeout in seconds.
 Possible values range from 1 to 99999. The default value is 1.
 -dhcp6_ren_max_rt
 Specifies the maximum retry timeout for Renew messages in seconds.
 Possible values range from 1 to 99999. The default is 600
 -dhcp6_ren_timeout
 Specifies the Renew message initial timeout in seconds. Possible
 values range from 1 to 99999. The default value is 10
 -dhcp6_req_max_rc
 Specifies the number of Request retries. Possible values range
 from 1 to 32. The default value is 10.
 -dhcp6_req_max_rt
 Specifies the maximum Request message retry timeout in
 seconds. Possible values range from 1 to 99999. The default value
 is 30.
 -dhcp6_req_timeout
 Specifies the Request message initial timeout in seconds.
 Possible values range from 1 to 99999. The default value is 1.
 -dhcp6_sol_max_rc
 Specifies the number of solicit retries. Possible values range
 from 1 to 32. The default value is 10.
 -dhcp6_sol_max_rt
 Specifies the maximum solicit message retry timeout in seconds.
 Possible values range from 1 to 99999. The default value is 120.
 -dhcp6_sol_timeout
 Specifies the Solicit message initial timeout in seconds.
 Possible values range from 1 to 99999. The default value is 1.
 -dhcp6_outstanding_session_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of DHCPv6 sessions to resolve at a time.
 Possible values range from 1 to 2048. The default value is 1.
 -dhcp6_release_rate
 Spirent Extension (for Spirent HLTAPI only).
 Number of DHCPv6 sessions that are released per second. This val
 ue applies to all sessions on the port. Possible values range
 from 1 to 1000. The default is 100 Use the Release operation to
 release DHCPv6 sessions.
 -dhcp6_request_rate
 Spirent Extension (for Spirent HLTAPI only).
 Requests per second for DHCPv6 client leases. This value applies
 to all sessions on the port. Possible values range from 1
 to 1000. The default is 100.
 -dhcp6_renew_rate
 Spirent Extension (for Spirent HLTAPI only).
 Renewals per second for DHCPv6 client renewals. This value
 applies to all sessions on the port. Possible values range from 1
 to 1000. The default is 100.
 -dhcp6_sequence_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the port-level sequence type that determines in what
 order DHCPv6 sessions are attempted. Possible values are
 PARALLEL and SEQUENTIAL. The default is SEQUENTIAL.
 -dhcp6_indef_rel_rt
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables indefinite retry of Release messages.
 Possible values are true (enable) and false (disable). The
 default is false. Note: If you set it to true, argument
DHCP Functions
153
 -dhcp6_rel_max_rc will be unavailable.
 -dhcp6_indef_req_rt
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables indefinite retry of Request messages.
 Possible values are true (enable) and false (disable). The
 default is false. Note: If you set it to true, argument
 -dhcp6_req_max_rc will be unavailable.
 -dhcp6_indef_sol_rt
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables indefinite retry of Solicit messages.
 Possible values are true (enable) and false (disable). The
 default is false. Note: If you set it to true, argument
 -dhcp6_sol_max_rc will be unavailable.
 -dhcp6_dec_max_rc
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of Decline retries. Possible values range
 from 1 to 32. The default value is 5.
 -dhcp6_dec_timeout
 Specifies the Decline message initial timeout in seconds.
 Possible values range from 1 to 99999. The default value is 1.
 -dhcp6_inforeq_max_rt
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum info-request message timeout in seconds.
 Possible values range from 1 to 99999. The default value is 120.
 -dhcp6_inforeq_timeout
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the info-request message initial timeout in seconds.
 Possible values range from 1 to 99999. The default value is 1.
 -dhcp6_cfm_duration
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum duration to wait for the Confirm message
 exchange to complete (in seconds). Possible values range from 1
 to 99999. The default value is 10.
 -dhcp6_cfm_max_rt
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum Confirm message timeout in seconds.
 Possible values range from 1 to 99999. The default value is 4.
 -dhcp6_cfm_timeout
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Confirm message initial timeout in seconds.
 Possible values range from 1 to 99999. The default value is 1.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -handle
 -active
 -name
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -cisco_server_id_override
 -link_selection
 -retry_timer
 -response_wait
 -server_id_override
DHCP Functions
154
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles Identifies the handle of the port on which the DHCP or DHCPv6/PD emulation
 was configured by the sth::emulation_dhcp_config function. If you
 reset the port (-mode reset), it returns a new handle.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_dhcp_config function creates, modifies,
 or resets an emulated DHCP or DHCPv6/PD client. Use the -mode argument to
 specify the action to perform. (See the -mode argument description for
 information about the actions.)

 When you create a DHCP or DHCPv6/PD client, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated DHCP session will use for DHCP
 communication. (The port handle value is contained in the keyed list returned by
 the connect function.)
 Use the -mode create function to define the characteristics of a DHCP
 session. You can use a single session to emulate multiple DHCP clients.
 When you write an HLT API that uses Spirent HLTAPI Automation software
 for DHCP or DHCPv6/PD tests, you create a test configuration to emulate DHCP or
 DHCPv6/PD clients respectively. During a DHCP or DHCPv6/PD test, Spirent HLTAPI
 sends DHCP/DHCPv6 messages to, and receives messages from, the DUT (configured
 as a DHCP or DHCPv6/PD server respectively). In this context, you can create
 test configurations in which Spirent HLTAPI DHCP or DHCPv6/PD clients act as
 independent network hosts, communicating directly with a DHCP or DHCPv6/PD
 server. Spirent HLTAPI DHCP or DHCPv6/PD clients are part of a VLAN.
 For information about the DHCP protocol, see RFC 2131, "Dynamic Host
 Configuration Protocol". For information about DHCP for IPv6, See RFC 3315,
 "Dynamic Host Configuration Protocol for IPv6 (DHCPv6)", and RFC 3633, "IPv6
 Prefix Options for Dynamic Host Configuration Protocol (DHCP) version 6"
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a DHCP emulation port:
 sth::emulation_dhcp_config -port_handle $hPort($device.$port)
 -mode create \
 -lease_time 10400
 Sample output for example shown above:
 {handles dhcpv4portconfig1} {status 1}
 The following example creates a DHCP emulation port supporting relay agent:
 sth::emulation_dhcp_config -port_handle $hPort($device.$port) \
 -mode create \
 -lease_time 10400 \
 -relay_agent_flag 1 \
 -relay_agent_ip_addr 192.1.0.5 \
 -server_ip_addr 192.1.0.1 \
 -circuit_id 34 \
 -circuit_id_suffix 2 \
 -circuit_id_suffix_step 1 \
 Sample output for example shown above:
 {handles dhcpv4portconfig1} {status 1}
 The following example modifies the exiting DHCP port:
 sth::emulation_dhcp_config -handle dhcpv4portconfig1\
 -mode modify \
 -lease_time 71700 \
DHCP Functions
155
 -relay_agent_flag 1 \
 -circuit_id 29 \
 Sample output for example shown above: {status 1}
 The following example stops the exiting DHCP port:
 sth::emulation_dhcp_config \
 -handle dhcpv4portconfig1 \
 -mode reset \
 Sample output for example shown above: {status 1}
 The following example creates a DHCPv6 emulation port:
 sth::emulation_dhcp_config \
 -mode create \
 -port_handle $hltHostPort \
 -ip_version 6\
 -dhcp6_outstanding_session_count 1\
 -dhcp6_release_rate 100\
 -dhcp6_request_rate 100\
 -dhcp6_renew_rate 100\
 -dhcp6_sequence_type PARALLEL\
 -dhcp6_reb_max_rt 600\
 -dhcp6_reb_timeout 10\
 -dhcp6_rel_max_rc 5\
 -dhcp6_rel_timeout 1\
 -dhcp6_ren_max_rt 600\
 -dhcp6_ren_timeout 10\
 -dhcp6_req_max_rc 10\
 -dhcp6_req_max_rt 30\
 -dhcp6_req_timeout 1\
 -dhcp6_sol_max_rc 10\
 -dhcp6_sol_max_rt 120\
 -dhcp6_sol_timeout 1\
 -dhcp6_dec_max_rc 5\
 -dhcp6_dec_timeout 1\
 -dhcp6_inforeq_max_rt 120\
 -dhcp6_inforeq_timeout 1\
 -dhcp6_cfm_duration 10\
 -dhcp6_cfm_max_rt 4\
 -dhcp6_cfm_timeout 1]
 The following example modifies the created DHCPv6 device
 sth::emulation_dhcp_config \
 -mode modify \
 -handle $hltHostPort \
 -ip_version 6\
 -dhcp6_outstanding_session_count 2\
 -dhcp6_release_rate 50\
 -dhcp6_request_rate 50]
 #### HLTAPI for Python ####
 The following example creates a DHCP emulation port:
 device_ret0port = sth.emulation_dhcp_config (
 mode = 'create',
 ip_version = '4',
 port_handle = port_handle[0],
 starting_xid = '0',
 lease_time = '60',
 outstanding_session_count= '1000',
 request_rate = '100',
 msg_timeout = '60000',
 retry_count = '4',
 max_dhcp_msg_size = '576',
 release_rate = '100');
 Sample Output:
 {'status': '1', 'handles': 'dhcpv4portconfig2', 'handle': {'port1':
 'dhcpv4portconfig2'}}
 
DHCP Functions
156
 #### HLTAPI for Perl ####
 The following example creates a DHCP emulation port:
 my %device_ret0port = sth::emulation_dhcp_config (
 mode => 'create',
 ip_version => '4',
 port_handle => "$hport[1]",
 starting_xid => '0',
 lease_time => '60',
 outstanding_session_count=> '1000',
 request_rate => '100',
 msg_timeout => '60000',
 retry_count => '4',
 max_dhcp_msg_size => '576',
 release_rate => '100');

 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = {
 'port1' => 'dhcpv4portconfig1'
 };
 $VAR3 = 'handles';
 $VAR4 = 'dhcpv4portconfig1';
 $VAR5 = 'status';
 $VAR6 = '1';


Notes:
 When first configuring DHCP/DHCPv6 emulation on a port, you must specify
 "-mode create" and initialize the port handle argument before calling the
 sth::emulation_dhcp_config function.
End of Procedure Header
sth::emulation_dhcp_group_config
Name:
 sth::emulation_dhcp_group_config
Purpose:
 Configures, modifies or resets a specified number of DHCP or DHCPv6/PD client
 sessions which belong to a subscriber group with specific Layer 2 network
 settings. Once the subscriber group has been configured, a handle is created,
 which can be used to modify the parameters or reset the sessions for the
 subscriber group or to control the binding, renewal, and release of the DHCP or
 DHCPv6/PD sessions.
Synopsis:
 sth::emulation_dhcp_group_config
 -mode {create|modify|enable|reset}
 -handle <dhcpGroup_handle | dhcpv6Group_handle | device_handle>
 -num_sessions <1-65536>
 [-auth_protocol {DELAYED_AUTH| RECONFIG_KEY}]
 [-broadcast_bit_flag {true | false}]
 [-client_count <NUMERIC>]
 [-client_mac_addr_mask <aa:bb:cc:dd:ee:ff>]
 [-client_mac_addr <aa:bb:cc:dd:ee:ff>]
 [-client_mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-client_id < hexadecimal >]
 [-client_id_suffix <integer>]
 [-client_id_suffix_count <integer>]
 [-client_id_suffix_step <integer>]
 [-client_id_suffix_repeat <integer>]
 [-client_id_type <0-255>]
 [-circuit_id <hexadecimal >]
 [-circuit_id_suffix <integer>]
 [-circuit_id_suffix_count <integer>]
DHCP Functions
157
 [-circuit_id_suffix_step <integer>]
 [-circuit_id_suffix_repeat <integer>]
 [-control_plane_prefix {LINKLOCAL | ROUTERADVERTISEMENT}]
 [-dhcp_range_ip_type {4|6}][-enable_auto_retry {true | false}]
 [-enable_arp_server_id {true | false}]
 [-enable_router_option {true | false}]
 [-ipv4_gateway_address <a.d.c.d>]
 [-dhcp_realm <ANY>]
 [-dhcp6_client_mode {DHCPPD| DHCPV6| DHCPV6ANDPD}]
 [-dhcp6_delayed_auth_key_id <0 - 429496729>]
 [-dhcp6_delayed_auth_key_value <ALPHANUMERIC>]
 [-dhcp6_range_duid_enterprise_id <NUMERIC>]
 [-dhcp6_range_duid_vendor_id <ALPHANUMERIC>]
 [-dhcp6_range_duid_vendor_id_increment <ALPHANUMERIC>]
 [-dhcp6_range_duid_type {CUSTOM | EN | LL | LLT}]
 [-dhcp6_range_ia_t1 <NUMERIC>]
 [-dhcp6_range_ia_t2 <NUMERIC>]
 [-dad_timeout <NUMERIC>]
 [-dad_transmits <NUMERIC>]
 [-dst_addr_type {ALL_DHCP_RELAY_AGENTS_AND_SERVERS | ALL_DHCP_SERVERS}]
 [-duid_value <NUMERIC>]
 [-enable_auth {true|false}]
 [-enable_dad {true|false}]
 [-encap {ethernet_ii |ethernet_ii_vlan | ethernet_ii_qinq| vc_mux| llcsnap }]
 [-enable_ldra {true|false}]
 [-enable_rebind {true|false}]
 [-enable_reconfig_accept {true|false}]
 [-enable_relay_agent {true|false}]
 [-enable_renew {true|false}]
 [-export_addr_to_clients {0|1}]
 [-enable_wildcards {true|false}]
 [-gateway_addresses {0|1}]
 [-gateway_ipv4_addr_step <a.d.c.d>]
 [-string_as_hex_value {true|false}]
 [-host_name <host_name> ]
 [-include_in_message {1 | 3 | 4 | 5 | 6 | 8 | 11 | 12]
 [-option_value <0-255>]
 [-option_payload <ALPHANUMERIC>]
 [-remove_option {true|false}]
 [-local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_prefix_len <0-128>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-opt_list <list of numbers>]
 [-preferred_lifetime]
 [-prefix_length <0-64>]
 [-prefix_start <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-protocol {dhcpoe |dhcpoeoa}]
 [-qinq_incr_mode {inner|outer|both}] [-rapid_commit_mode {ENABLE | DISABLE | SERVER}]
 [-requested_addr_start <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-relay_server_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-relay_server_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-relay_agent_flag {true | false}]
 [-retry_attempts <integer>]
 [-remote_id <hexadecimal >]
 [-remote_id_suffix <integer>]
 [-remote_id_suffix_count <integer>]
 [-remote_id_suffix_step <integer>]
 [-remote_id_suffix_repeat <integer>]
 [-server_ip_addr <a.b.c.d>]
 [-use_relay_agent_mac_addr_for_dataplane {true|false}]
 [-valid_lifetime <NUMERIC>]
 [-vlan_id <1-4095> ]
 [-vlan_cfi {0|1}]
 [-vlan_id_step <1-4095> ]
 [-vlan_id_count <1-4096> ]
 [-vlan_user_priority <0-7>]
 [-vlan_id_outer <0-4095>]
DHCP Functions
158
 [-vlan_outer_cfi {0|1}]
 [-vlan_id_outer_step <1-4095> ]
 [-vlan_id_outer_count <1-4096> ]
 [-vlan_user_priority <0-7>]
 [-vlan_outer_user_priority <0-7>]
 [-vci <0-65535>]
 [-vci_count <1-65536>]
 [-vci_step <0-65535>]
 [-vpi <0-255>]
 [-vpi_count <1-256>]
 [-vpi_step <0-255>]
 [-pvc_incr_mode {vci|vpi|both}]
Arguments:
## The following arguments are common for DHCPv4 and DHCPv6:
 -handle
 Identifies the port and group or the device upon which emulation
 is configured. This argument is mandatory. When mode is modify
 or reset, this parameter also specifies the DHCP or DHCPv6/PD
 group number. For mode create, the handle is returned by the
 sth::emulation_dhcp_config function. For mode modify or mode
 reset, the handle is the group handle returned by the
 sth::emulation_dhcp_group_config function. For mode enable, the
 handle is the device handle returned by other protocol emulation
 functions with mode create.
 -mode
 Specifies the action to perform. Possible values are create,
 enable, modify, and reset. There is no default. You must specify
 a mode. The modes are described below:
 create - Starts emulation on the port specified with
 -handle.

 enable- Starts emulation on the device specified with
 -handle. You must specify the -handle argument. Currently,
 the following options will be obsoleted when ip_version is
 not 6:
 -mac_addr
 -mac_addr_step
 -vlan_id
 -vlan_id_outer
 -vlan_id_step,
 -vlan_id_outer_step
 -vlan_id_count
 -vlan_id_outer_count
 -vlan_user_priority
 -vlan_outer_user_priority
 -qinq_incr_mode,
 -qinq_oneblock
 -gateway_addresses
 -ipv4_gateway_address
 -vci
 -vpi
 -vci_count
 -vci_step
 -vpi_count
 -vpi_step
 -pvc_incr_mode
 modify - Changes the configuration identified by the -handle
 argument by applying the parameters specified in
 subsequent arguments.
 reset - Stops the DHCP or DHCPv6/PD emulation locally without
 attempting to clear the bound addresses from the DHCP or
 DHCPv6/PD server. In addition, all DHCP or DHCPv6/PD group
 sessions information on the port is cleared.
 IMPORTANT:
DHCP Functions
159
 Before using sth::emulation_dhcp_group_config -mode reset,
 you must first delete all traffic streams with the
 "sth::traffic_config -mode reset" command. Traffic
 streams must be reset before DHCP can be reset.
 -encap
 Specifies the type of Layer 2 encapsulation used to define
 source and destination MAC addresses for a stream. This
 argument is mandatory. Possible values are:
 ethernet_ii - Ethernet II
 ethernet_ii_vlan - Ethernet II with a single VLAN tag
 ethernet_ii_qinq - Ethernet II with two VLAN tags.
 vc_mux - Sets the ATM encapsulation type to Virtual Circuit
 Multiplexing (VC_MUX). VC_MUX is
 one of the two mechanisms for identifying the protocol
 carried in ATM Adaptation Layer5 (AAL5) frames.
 vc_mux is available for ATM cards.
 Note: This option is not available for DHCPv6.
 llcsnap - Sets the ATM encapsulation type to LLC encapsulation.
 LLC encapsulation is the other mechanism for identifying
 the protocol carried in AAL5 frames. llcsnap is
 available for ATM cards. The default -encap value for ATM
 cards is vc_mux.
 Note: This option is not available for DHCPv6.
 ethernet_ii_vlan supports VLAN tagging on Ethernet
 networks. When you set the -encap argument to
 ethernet_ii_vlan, the following arguments are available:
 -vlan_id
 -vlan_id_step
 -vlan_id_count
 ethernet_ii_qinq supports two VLAN tags in a Ethernet frame.
 When you set the -encap argument to ethernet_ii_qinq, the
 following arguments are available:
 -vlan_id
 -vlan_id_step
 -vlan_id_count
 -vlan_id_outer
 -vlan_id_outer_step
 -vlan_id_outer_count
 -qinq_incr_mode
 If you set the -encap argument to ethernet_ii, the arguments
 above are not available.
 When you set the -encap argument to vc_mux or llcsnap,
 the following arguments are available:
 -vci
 -vci_count
 -vci_step
 -vpi
 -vpi_count
 -vpi_step
 -pvc_incr_mode
 -mac_addr
 Specifies the first MAC address to use when emulating
 multiple clients. The default is 00:10:01:00:00:01.
 -mac_addr_step
 Specifies the increment to use to generate additional MAC
 addresses for multiple clients. Possible values range from
 00.00.00.00.00.01 to 00.00.7f.ff.ff.ff. The default is
DHCP Functions
160
 00.00.00.00.00.01.
 -num_sessions
 Specifies the number of DHCP or DHCPv6/PD clients to emulate.
 Possible values range from 1 to 65536. The default is 4096.
 Note: For Outrigger2 platforms, the maximum value is 131070.
 For non-Outrigger2 platforms, the maximum is 4096.
 -dhcp_range_ip_type
 Defines the IP address version to be used. Possible values are
 4(for DHCPv4) and 6(for DHCPv6). The default is 4.
 -qinq_incr_mode
 Specifies the increment mode for ethernet_ii_qinq
 encapsulation. Possible values are inner, outer and both.
 The default is inner. The values are described below:
 inner - When the number of sessions is greater than
 the inner VLAN count times the outer VLAN count, the
 inner VLAN ID is incremented first until the specified
 number of inner VLANs is exhausted, then the outer
 VLAN ID is incremented. This continues in a
 round-robin fashion until the number of
 sessions is exhausted.
 outer - When the number of sessions is greater than the
 inner VLAN count times the outer VLAN count, the outer
 VLAN ID is incremented first until the specified number
 of outer VLANs is exhausted, and then the inner VLAN ID is
 incremented. This continues in a round-robin fashion
 until the number of sessions is exhausted.
 both - When the number of sessions is greater than the
 inner VLAN count times the outer VLAN count, the
 inner VLAN ID and outer VLAN ID increment at the
 same time. This continues in a round-robin fashion
 until the number of sessions is exhausted.
 Note: Applies only to Q-in-Q Ethernet interfaces. For the
 "inner" mode, when the number of sessions is greater than
 the inner VLAN count multiplied by the outer VLAN count, the
 inner VLAN ID is incremented first until the specified
 number of inner VLANs is exhausted; then, the outer VLAN ID
 is incremented. This continues in round-robin fashion until
 the number of sessions specified in -num_sessions.
 For the "outer" mode, when the number of sessions is greater
 than the inner VLAN count multiplied by the outer VLAN count
 outer VLAN count, the outer VLAN ID is incremented first
 until the specified number of outer VLANs is exhausted; then
 it increments the inner VLAN ID. This continues in round-
 robin fashion until the number of sessions specified
 in -num_sessions.
 -vlan_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the canonical format indicator (CFI) field in VLAN
 for the emulated router node. Possible values are 0 (Ethernet)
 and 1 (Token Ring). The default is 1.

 -vlan_id
 The starting VLAN ID to use when generating DHCP/DHCPv6 clients
 for ethernet_ii_vlan. Possible values range from 1 to 4095. This
 argument is mandatory for ethernet_ii_vlan.
 -vlan_id_mode
 Specifies how Spirent HLTAPI assigns VLAN tags when the
 router count is greater than 1. Possible values are:

 fixed - The VLAN ID is the same for all packets. The fixed
DHCP Functions
161
 VLAN ID is the value of the -vlan_id argument.
 increment - For all packets, the VLAN tag ID increments by the
 step size specified in the -vlan_id_step argument.
 -vlan_id_count
 The number of VLAN IDs to use when generating DHCP clients.
 Spirent HLTAPI assigns VLAN membership in round-robin
 fashion. The VLAN count must divide evenly into the number
 of sessions. The -vlan_id_count cannot be greater than the
 session count (-num_session). Possible values range from 1
 to 4096. The default is 1.
 -vlan_id_outer
 Starting outer VLAN ID, applies to DHCP w/Stacked VLAN
 only. Possible values range from 0 to 4095. The default
 is 1.
 -vlan_id_outer_mode
 Specifies how Spirent HLTAPI assigns VLAN tags when the router
 count is greater than 1.
 Possible values are:

 fixed - The same VLAN ID is the same for all packets. The fixed
 VLAN ID is the value of the -vlan_id argument.

 increment - For all packets, the VLAN tag ID increments by the
 step size specified in the -vlan_id_step argument.
 -vlan_id_outer_step
 The value that Spirent HLTAPI uses to increment the
 outer VLAN ID. Possible step values range from 1 to 4095.
 The default is 1.
 -vlan_id_outer_count
 The number of outer VLAN IDs to use when generating DHCP/DHCPv6
 clients. Spirent HLTAPI assigns VLAN membership in
 round-robin fashion. The VLAN count must divide evenly into
 the number of sessions. The VLAN count cannot be greater
 than the session count. Possible values range from 1 to
 4096. The default is 1.
 -vlan_user_priority
 Specifies the user priority of the inner VLAN. Possible values
 range from 0 to 7. The default value is 0.
 -vlan_outer_user_priority
 Specifies the user priority of the outer VLAN. Possible values
 range from 0 to 7. The default value is 0.
 -vlan_id_step
 The value that Spirent HLTAPI uses to increment the VLAN
 ID for ethernet_ii_vlan. Possible step values range
 from 1 to 4095. The default is 1.

 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the CFI field in outer VLAN tag for the
 emulated device. Possible values are 0 (Ethernet) and 1 (Token
 Ring). The default is 1.
## The following arguments are for DHCPv4:
 -enable_auto_retry
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables auto retry for sessions that fail to initially
 come up. Possible values are true and false. The default is false.

 -retry_attempts
 Spirent Extension (for Spirent HLTAPI only).
 Number of times to retry a session after the initial failure. You
 must set -enable_auto_retry to true. 
DHCP Functions
162

 -enable_arp_server_id
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables ARP on the server ID. Possible values are true
 and false. The default is false.

 -enable_router_option
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the router option (option 3) specified in RFC
 2132. Possible values are true and false. The default is false.
 -protocol
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of the protocol to use. The possible values
 are dhcpoe and dhcpoeoa.
 dhcpoe - DHCP over Ethernet. You can specify -encap ethernet_ii,
 -encap ethernet_ii_vlan, or -encap ethernet_ii_qinq when
 -protocol is set to dhcpoe. This is the default.
 dhcpoeoa - DHCP over Ethernet over ATM. When you specify
 -protocol dhcpoeoa, -encap can be set to the combination
 of an Ethernet encapsulation (ethernet_ii, ethernet_ii_vlan,
 or ethernet_ii_qinq) and an ATM encapsulation (vc_mux
 or llcsnap). You must specify -protocol dhcpoeoa for ATM cards.
 -gateway_addresses
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables IPv4 gateway addresses. Possible values
 are 1 (enable) or 0 (disable). The default is 0.
 -gateway_ipv4_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Step value to increment IPv4 gateway addresses. The value must be
 in IPv4 format. The default value is 0.0.0.0.

 -ipv4_gateway_address
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv4 gateway address. You can specify this
 argument when -gateway_addresses is set to 1.
 -host_name
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the name of the host. You can use the following
 wildcards: @p = port, @b = session block, @s = session. The
 default is client_ @p-@b-@s.
 -opt_list
 Spirent Extension (for Spirent HLTAPI only).
 Set up the Option 55 values for the DHCP request messages on
 each session block. You can select from the following list
 of options:
 Subnet Mask Option [1]
 Routers Option [3]
 Domain Name Servers Option [6]
 Domain Name Option [15]
 Static Routes Option [33]
 NetBIOS Name Servers Option [44]
 NetBIOS Node Type Option [46]
 NetBIOS Scope Option [47]
 IP Address Lease Time Option [51]
 Server Identifier Option [54]
 Renewal Time (T1) Option [58]
 Rebinding Time (T2) Option [59]
 The default is 1 6 15 33 44.
 Example usage:
 sth::emulation_dhcp_group_config -mode create \
DHCP Functions
163
 -handle $dhcpport1 \
 -encap ethernet_ii \
 -num_sessions 30 \
 -mac_addr 00.00.03.00.00.02 \
 -mac_addr_step 00.00.00.00.00.02 \
 -opt_list {1 6 15}
 Alternatively, you can use the hexadecimal input style used
 by the Spirent HLTAPI, but you must prefix the input with "0x" or
 "0X" to indicate the hexadecimal style. The following example
 uses the Spirent HLTAPI input style and is equivalent to the
 above example:
 sth::emulation_dhcp_group_config -mode create \
 -handle $dhcpport1 \
 -encap ethernet_ii \
 -num_sessions 30 \
 -mac_addr 00.00.03.00.00.02 \
 -mac_addr_step 00.00.00.00.00.02 \
 -opt_list 0x01060f
 -vci
 Specifies the Virtual Circuit Identifier (VCI) of the first ATM
 PVC pool. Possible values range from 0 to 65535. The default
 is 100. This argument is valid for ATM interfaces only.
 -vci_count
 Specifies the number of the VCIs used for the emulation of
 clients over ATM interfaces. Possible values range from 1
 to 65536. The default is 1. The value of -vci_count must
 be divisible by the number of sessions. This argument is valid
 for ATM interfaces only.
 -vci_step
 Specifies the step size in which the VCI value is incremented.
 Possible values range from 0 to 65535. The default is 1.
 This argument is valid for ATM interfaces only.
 -vpi
 Specifies the Virtual Path Identifier (VPI) of the first ATM PVC
 pool (for an ATM connection). Possible values range from 0 to 255.
 The default is 100. This argument is valid for ATM interfaces only.
 -vpi_count
 Specifies the number of the VPIs used for the emulation of
 clients over ATM interfaces. Possible values range from 1 to
 256. The default is 1. The VPI count number must be divisible
 by the number of sessions. This argument is valid for
 ATM interfaces only.
 -vpi_step
 Specifies the step size in which the VPI value is incremented.
 Possible values range from 0 to 255. The default is 1.
 This argument is valid for ATM interfaces only.
 -pvc_incr_mode
 Determines which ID to increment first. Possible values are:
 vci - Increments the VCI before the VPI.
 vpi - Increments the VPI before the VCI.
 both - Increments both the VPI and VCI at the same time.
 This argument is valid for ATM interfaces only.
 The following arguments for DHCPv4 are also available in the dhcp_config
 function. When both functions are configured with these arguments, the
 configurations under the current function will take effect.

 -broadcast_bit_flag
 Spirent Extension (for Spirent HLTAPI only).
DHCP Functions
164
 Configures the flag to broadcast client responses. Possible values
 are 0 and 1. If the argument is set to 1, the DHCP Server or
 relay agent will broadcast DHCP messages using an IP broadcast
 address. If it is set to 0, the DHCP or DHCPv6/PD Server or relay
 agent will send the DHCP or DHCPv6/PD messages to the IP address
 specified in the "yiaddr" field. The default is 1.
 -relay_agent_flag
 Spirent Extension (for Spirent HLTAPI only).
 Configures DHCP relay agent. The DHCP relay agent allows
 you to place DHCP clients and DHCP servers on different
 networks. Possible values are 0 (disabled) and 1 (enabled).
 You can use this argument to control the configuration of
 -relay_agent_ip_addr and -server_ip_addr.
 -relay_agent_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures DHCP relay agent IP address. The value should
 be in IPv4 format. The default value is 192.1.1.0.
 You can use this argument when -relay_agent_flag is enabled.
 -server_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures DHCP server IP address. The default value is
 192.1.1.2. The value should be in the IPv4 format.
 You can use this argument when -relay_agent_flag is enabled.
 This argument is required when relay_agent_ip_addr is
 used. Both arguments must be configured in the same segment.
 -circuit_id
 Spirent Extension (for Spirent HLTAPI only).
 Configures the circuit ID sub-option of relay agent
 option (82). This sub-option encodes an agent-local
 identifier of the circuit from which a DHCP
 client-to-server packet was received. It is intended
 for use by agents in relaying DHCP responses back to
 the proper circuit. (See RFC 3046 for more
 information.) The circuit ID must be globally
 unique, and the value must be in the hexadecimal format.
 The default is 0.

 -circuit_id_suffix
 Spirent Extension (for Spirent HLTAPI only).
 Defines the suffix to append to the circuit ID. The default
 is 0.

 -circuit_id_suffix_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of circuit ID suffixes. Possible values
 range from 1 to <max_int>. The default is 1.

 -circuit_id_suffix_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate circuit ID suffixes
 (-circuit_id_suffix) for emulated clients. The default is 1.
 -circuit_id_suffix_repeat
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of times a circuit ID suffix should
 be repeated, before the step that is specified in the
 -circuit_id_suffix_step argument is applied to the
 circuit ID suffix for incrementing. Possible values
 range from 1 to <max_int>.
 -client_id
 Spirent Extension (for Spirent HLTAPI only).
 Configures the client ID option (61). DHCP clients use client ID
 (option 61) to specify their unique identifier. DHCP
 servers use this value to index their database of address
 bindings. This value is expected to be unique for all 
DHCP Functions
165
 clients in an administrative domain. This value must be in
 hexadecimal format.
 -client_id_suffix
 Spirent Extension (for Spirent HLTAPI only).
 Configure the suffix to append to the client ID. Possible values
 range from 0 to <max_int-1>.
 -client_id_suffix_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of client ID suffixes. Possible values
 range from 1 to <max_int>. The default is 1.
 -client_id_suffix_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate client ID suffixes
 (-client_id_suffix) for emulated clients. Possible values range
 from 0 to <max_int-1>. The default value is 1.
 -client_id_suffix_repeat
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of times a client ID suffix should
 be repeated, before the step that is specified in the
 -client_id_suffix_step argument is applied to the
 client ID suffix for incrementing. Possible values
 range from 1 to <max_int>.
 -client_id_type
 Spirent Extension (for Spirent HLTAPI only).
 Configures the client ID type. Possible values range from 0 to
 255. You must specify this argument when you specify -client_id.

 -remote_id
 Spirent Extension (for Spirent HLTAPI only).
 Configures the remote ID sub-option of relay agent
 option. The remote ID can be used by relay agents that terminate
 switched or permanent circuits and have mechanisms to identify the
 remote host end of the circuit. The remote ID must be globally
 unique, and the value must be in the hexadecimal format.
 The default is 0.

 -remote_id_suffix
 Spirent Extension (for Spirent HLTAPI only).
 Defines the suffix to append to the circuit ID. The default
 is 0.
 -remote_id_suffix_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate remote ID suffixes
 (-remote_id_suffix) for emulated clients. The default is 1.

 -remote_id_suffix_repeat
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of times a remote ID suffix should
 be repeated, before the step that is specified in the
 -remote_id_suffix_step argument is applied to the
 remote ID suffix for incrementing. Possible values
 range from 1 to <max_int>.
 -remote_id_suffix_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of remote ID suffixes. Possible values
 range from 1 to <max_int>. The default is 1.
## The following arguments are for DHCPv6/PD. (You must set -dhcp_range_ip_type to 6)
 -control_plane_prefix
 Spirent Extension (for Spirent HLTAPI only).
 Determines which address use as the source IPv6 interface
 in control plane DHCPv6/PD messages. Possible values are described
 below:
 
DHCP Functions
166
 LINKLOCAL - Use the link local address as the source IPv6
 interface in control plane DHCPv6/PD messages. This is the
 default value.

 ROUTERADVERTISEMENT - Use the router global IPv6 address
 as the source IPv6 address in control plane messages.
 -dhcp6_range_duid_enterprise_id
 Specifies the enterprise number to be used in the DUID. This
 argument is only applicable when -duid_type is set to en. The
 default value is 3456


 -dhcp6_range_duid_vendor_id
 Starting DUID value. The default value is 0001 This field is
 available when -duid_type is set to custom or en.

 -dhcp6_range_duid_vendor_id_increment
 DUID step value. This value is alphanumeric. The default is 0001.
 This argument is available when -duid_type is set to custom.

 -dhcp6_range_duid_type
 Indicates the DHCPv6 Unique Identifier (DUID) type. DUID is used
 for DHCPv6 participants, and each DHCPv6 client and DHCPv6
 server has exactly one DUID. DHCPv6 delegating servers use DUIDs
 to identify clients in order to select configuration parameters
 and associate IAs with clients. DHCPv6 clients use DUIDs to
 identify a delegating server in messages that require a server to
 be identified.
 Possible values are described below:

 llt - The DUID includes the link-layer address of any one
 network interface connected to the DHCPv6 device when
 the DUID was generated, plus the time when the DUID
 was generated. This is the default.

 en - The DUID includes the vendor's registered Private
 Enterprise Number specified in the DUID Enterprise
 Number field, followed by a unique identifier assigned
 by the vendor.

 ll - The DUID includes the link-layer address. This option is
 recommended for devices that have a permanently
 connected network interface with a link-layer address
 and do not have non-volatile, writable, stable storage.
 custom - Custom DUID type

 -dhcp6_range_ia_t1
 Specifies the T1 timer value (in seconds) for the IA_PD
 (Identity Association for Non-temporary Addresses) option.
 After this time has expired, the DHCPv6/PD client initiates a
 RENEW/REPLY message exchange to extend the lifetime on any
 addresses in the IA_PD.
 A value of 0 allows the server to specify the T1 value. The
 default is 50% of the preferred lifetime value. Possible
 values range from 0 to 2147483647. The default value is
 302400.

 -dhcp6_range_ia_t2
 Specifies the T2 timer value (in seconds) for the IA_PD option.
 After this time has expired, the DHCPv6/PD client initiates a
 REBIND/REPLY message exchange to extend the lifetime on any
 addresses in the IA_PD. A value of 0 allows the server to specify
 the T2 value. The default is 80% of the preferred
 lifetime value. Possible values range from 0 to 2147483647.
 The default value is 483840.
 -dst_addr_type
 Spirent Extension (for Spirent HLTAPI only).
DHCP Functions
167
 The multicast addresses that can be used by DHCP control plane.
 Possible values are ALL_DHCP_RELAY_AGENTS_AND_SERVERS and
 ALL_DHCP_SERVERS:
 ALL_DHCP_RELAY_AGENTS_AND_SERVERS - A link-scoped
 multicast address used by a client to communicate with
 neighboring (i.e., on-link) relay agents and servers.
 All servers and relay agents are members of this
 multicast group. This is the default value.
 ALL_DHCP_SERVERS - A site-scoped multicast
 address used by a relay agent to communicate with
 servers, either because the relay agent wants to send
 messages to all servers or because it does not know the
 unicast addresses of the servers. Note that in order for
 a relay agent to use this address, it must have an
 address of sufficient scope to be reachable by the
 servers. All servers within the site are members of this
 multicast group.

 -duid_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a user-defined value for the DUID. Possible values
 range from 0 to 65535. The default value is 1. This argument is
 available when -duid_type is set to custom.

 -enable_ldra
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the lightweight DHCPv6 relay agent. A
 Lightweight DHCPv6 Relay Agent (LDRA) allows Relay Agent
 Information to be inserted by an access node that performs a
 link-layer bridging (i.e., non-routing) function. Possible values
 are true (enable) and false (disable). The default value is false
 -enable_rebind
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the host will send a REBIND message to the
 delegating router when the DHCPv6/PD session's T2 time has
 expired. The lifetime of the prefixes (DHCPv6-PD) or addresses
 (DHCPv6 client) continues until the Valid Lifetime value is
 reached. Possible values are true (enable) and false (disable).
 The default value is false.
 -enable_reconfig_accept
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the client is willing to accept Reconfigure
 messages from the server. Possible values are true and false.
 The default value is false.
 -enable_relay_agent
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables relay agent emulation. Possible values are
 true (enable) and false (disable). The default value is false.
 -enable_renew
 Spirent Extension (for Spirent HLTAPI only).
 Enables the DHCPv6/DHCPv6/PD client to send a RENEW message to
 the delegating router when the DHCPv6/PD session's T1 time
 has expired. Possible values are true (enable) and false
 (disable). The default value is true.
 -export_addr_to_clients
 Determines whether to create the linked host for the specified
 DHCPv6 PD client. Possible values are 0 and 1. If this argument
 is set to 1, the linked host will be created, the following
 arguments will also be configured on this host:
 client_count
 client_mac_addr
 client_mac_addr_step
 client_mac_addr_mask
 The default value is 0
DHCP Functions
168
 -preferred_lifetime
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the preferred lifetime (in seconds) for the IPv6
 prefix. A value of 0 allows the server to specify this
 value. Possible values range from 0 to 4294967295. The
 default value is 604800.
 -prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the requested length (in bits) of the IPv6 prefix.
 A value of 0 allows the server to specify this value.
 Possible values range from 0 to 64. The default value is 0.
 This argument is valid when argument -dhcp6_client_mode is set
 to DHCPPD.
 -prefix_start
 Spirent Extension (for Spirent HLTAPI only).
 DHCPv6 client requested prefix starting address. The value must
 be in IPv6 format. The default is ::. This argument is valid when
 argument -dhcp6_client_mode is set to DHCPPD.

 -rapid_commit_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the use of a two-message exchange for address
 assignment (see RFC 3315). Possible values are described
 below:

 ENABLE - Enables rapid commit option. The host accepts a
 REPLY message only from the DHCPv6/PD server that
 has this option enabled when sending a SOLICIT message
 carries rapid commit option.
 DISABLE - Disable rapid commit option. The host accepts an
 ADVERTISE message from the DHCPv6/PD server
 when sending a SOLICIT message does not carry
 rapid commit option.
 SERVER - Indicates rapid commit will be enabled or disabled
 by DHCPv6/PD server. The rapid commit option is included
 in the ADVERTISE message. If the rapid commit option is
 enabled on the server, the two-message exchange is used.
 If the rapid commit option is disabled on the server,
 the four-message exchange is used.
 The default value is disable.

 -relay_server_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Relay server IPv6 address. The value must be in
 IPv6 format. The default is ::.

 -relay_server_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step value to increment Relay server IPv6
 addresses. The value must be in IPv6 format. The default is ::.

 -use_relay_agent_mac_addr_for_dataplane
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether to use relay agent's MAC address for the data
 plane. Possible values are true (enable) and false (disable). The
 default value is true.

 -valid_lifetime
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the valid lifetime in seconds for the addresses.
 Possible values range from 0 to 4294967295. The default value is
 2592000.
 -enable_auth
 Spirent Extension (for Spirent HLTAPI only).
DHCP Functions
169
 Determines whether to use the DHCP message authentication option
 The type of authentication to be used can be specified using
 -auth_protocol. Possible values are true (enable) and false
 (disable). The default is false. This argument is valid when
 -dhcp6_client_mode is set to DHCPV6.
 -auth_protocol
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the protocol to be used to generate the authentication
 information carried in the option. Possible values are
 DELAYED_AUTH and RECONFIG_KEY.
 DELAYED_AUTH - Specifies the use of the Delayed Authentication
 protocol. In delayed authentication, the client requests
 authentication in its Solicit message, and the server
 replies with an Advertise message that includes
 authentication information.

 RECONFIG_KEY - Specifies the use of the Reconfigure key
 authentication protocol. The Reconfigure key
 authentication protocol provides protection against
 misconfiguration of a client caused by a Reconfigure
 message sent by a malicious DHCPv6 server.

 This argument is valid when -enable_auth is set to true.
 -enable_dad
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables Duplicate Address Detection (DAD). The DAD
 algorithm is performed on all configured IPv6 addresses before
 assigning them to an interface. Possible values are true
 (enable) and false (disable). The default is true. This argument
 is valid when -dhcp6_client_mode is set to DHCPV6.
 -dad_timeout
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the length of time in seconds that must elapse before
 the Neighbor Solicit message times out during DAD. Possible values
 range from 1 to 4294967295. The default is 1. This argument is
 valid when -dhcp6_client_mode is set to DHCPV6.
 -dad_transmits
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of Neighbor Solicit messages to send out
 per session during DAD. Possible values range from 1 to
 4294967295. The default is 1. This argument is valid when
 -dhcp6_client_mode is set to DHCPV6.
 -dhcp_realm
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the DHCP realm that identifies the key used to generate
 the HMAC-MD5 value when using delayed authentication. The default
 is "spirent.com". This argument is valid when -dhcp6_client_mode
 is set to DHCPV6.

 -dhcp6_client_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of client to emulate. Possible values are
 DHCPPD, DHCPV6, and DHCPV6ANDPD. The default is DHCPV6.
 Note: When using -mode modify to change the configured client
 type, you can only switch between DHCPV6 and DHCPV6ANDPD. Other
 types of client mode change that involve DHCPPD are not currently
 supported.


 -requested_addr_start
 Spirent Extension (for Spirent HLTAPI only).
 The starting IPv6 address that the emulated DHCPv6 client
 requested. The value must be in IPv6 format. The default is ::.
 This argument is valid when -dhcp6_client_mode is set to DHCPV6.
 
DHCP Functions
170
 -dhcp6_delayed_auth_key_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of key identifiers that identified the key
 used to generate the HMAC-MD5 value. The length of the list must
 be same as that of lists -dhcp6_delayed_auth_key_value and
 -dhcp6_delayed_auth_value_type. This argument is valid when
 -enable_auth is set to true and -auth_protocol is set to
 DELAYED_AUTH. Possible values range from 0 to 4294967295. The
 default is 1.
 -dhcp6_delayed_auth_key_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of keys to generate the HMAC-MD5 value. The
 length of the list must be same as that of lists
 -dhcp6_delayed_auth_key_id and -dhcp6_delayed_auth_value_type.
 This argument is valid when -enable_auth is set to true and
 -auth_protocol is set to DELAYED_AUTH.
 -enable_wildcards
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable the use of
 wildcards for the Option Payload field in the custom option. The
 length of the list must be the same as that of lists
 -string_as_hex_value, -include_in_message, -option_value,
 -option_payload and -remove_option. Possible values are true
 (enable) and false (disable). The default value is false.

 -string_as_hex_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable value as
 hexadecimal in the custom options. The length of the list must be
 the same as that of lists -enable_wildcards,
 -include_in_message, -option_value, -option_payload and
 -remove_option. Possible values are true
 (enable) and false (disable). The default value is false.

 -include_in_message
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of types of DHCPv6 messages that will include
 the custom option. The length of the list must be
 the same as that of lists -enable_wildcards,
 -string_as_hex_value, -option_value, -option_payload and
 -remove_option. The values are a list of numbers, each
 corresponding to a message type. Possible values are described
 below:
 1 - Solicit
 3 - Request
 4 - Confirm
 5 - Renew
 6 - Rebind
 8 - Release
 11 - Information-Request
 12 - Relay-Forward

 The default value is 1.

 -option_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of option identifiers for the custom option.
 The length of the list must be the same as that of lists
 -enable_wildcards, -string_as_hex_value, -include_in_message,
 -option_payload and -remove_option.
 Possible values range from 0 to 255. The default value 0.

 -option_payload
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of option payload strings in the custom option.
 The length of the list must be the same as that of lists
 -enable_wildcards, -string_as_hex_value, -include_in_message,
 -option_value and -remove_option.
 This value is alphanumeric. 
DHCP Functions
171

 -remove_option
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable option removal
 for the custom option. The length of the list must be the same as
 that of lists -enable_wildcards, -string_as_hex_value,
 -include_in_message, -option_value and -option_payload. Possible
 values are true (enable) and false (disable). The default value
 is false.
 -local_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting IPv6 address of the emulated DHCPv6
 devices. The value must be in IPv6 format. The default is 2001::2
 This argument is applicable when -dhcp_range_ip_type is set to
 6.
 -local_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate IPv6 gateway addresses for
 multiple devices. The value must be in IPv6 format. The default is
 0::1. This argument is applicable when -dhcp_range_ip_type is set
 to 6.
 -local_ipv6_prefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 address prefix length. Possible values range
 from 0 to 128. The default is 64. This argument is applicable
 when -dhcp_range_ip_type is set to 6.
 -gateway_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the first IPv6 gateway address for the emulated
 DHCPv6 devices. The value must be in IPv6 format. The default is
 2001::1. This argument is applicable when -dhcp_range_ip_type
 is set to 6.
 -gateway_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate IPv6 gateway addresses
 for multiple devices. The value must be in IPv6 format. The
 default is ::. This argument is applicable when
 -dhcp_range_ip_type is set to 6.
 -client_count
 Specifies the device count of the linked host for the DHCPv6 PD
 client. The value of this argument must be the same as that of
 -num_sessions if -num_sessions is not set to 1. The default value
 is 1.
 -client_mac_addr_mask
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the MAC address mask of DHCPv6 clients. The value must
 be in MAC format. The default is 00:00:00:FF:FF:FF.
 -client_mac_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting MAC address of DHCPv6 clients. The value
 must be in MAC format. The default is 00:10:01:00:00:01.
 -client_mac_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step value to increment MAC addresses of DHCPv6
 clients. The value must be in MAC format. The default is
 00:00:00:00:00:01.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
DHCP Functions
172
 [-circuit_id_suffix <integer>]
 [-circuit_id_suffix_count <integer>]
 [-circuit_id_suffix_step <integer>]
 [-circuit_id_suffix_repeat <integer>]
 [-client_id_suffix <integer>]
 [-client_id_suffix_count <integer>]
 [-client_id_suffix_step <integer>]
 [-client_id_suffix_repeat <integer>]
 [-remote_id_suffix <integer>]
 [-remote_id_suffix_count <integer>]
 [-remote_id_suffix_step <integer>]
 [-remote_id_suffix_repeat <integer>]

 -device_name
 -gateway_addresses
 -pvc_incr_mode
 -qinq_incr_mode
 -qinq_oneblock
 -sessions_per_vc

Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -dhcp6_range_ia_id
 -dhcp6_range_ia_id_increment
 -dhcp6_range_ia_type
 -dhcp6_range_param_request_list
 -dhcp_range_relay6_hosts_per_opt_interface_id
 -dhcp_range_relay6_opt_interface_id
 -dhcp_range_relay6_use_opt_interface_id
 -release_rate
 -request_rate
 -sessions_per_vc
 -vlan_id_count
 -vlan_outer_id_count
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles Identifies the handle of the group configured or modified by the
 sth::emulation_dhcp_group_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_dhcp_group_config function configures or
 modifies a group of DHCP or DHCPv6/PD subscribers where each group share a set
 of common characteristics. Use the -mode argument to specify the action to
 perform.(See the -mode argument description for information about the actions).
 You can use -protocol to specify the physical interface
 for DHCP or DHCPv6/PD subscribers (See the description of the -protocol argument).
 Before using this function, you must specify -mode create when
 configuring DHCP or DHCPv6/PD emulation on a port and initialize the port handle
 argument (using the sth::emulation_dhcp_config function).
 You can call this function multiple times to create multiple groups of
 subscribers on a port with characteristics different from other groups or
 for independent control purposes. This function enables you to configure a
 specified number of DHCP or DHCPv6/PD client sessions which belong to a
 subscriber group with specific Layer 2 network settings.
 Once the subscriber group has been configured, a handle is created. The handle
DHCP Functions
173
 can be used to modify the parameters or reset the sessions for the
 subscriber group or to control the binding, renewal, and release of the
 DHCP or DHCPv6/PD sessions.
 For DHCPv4, in addition to specifying the handle (-handle), you must also
 provide the following arguments:
 -mode (create, modify, or reset)
 -num_sessions (the number of DHCP/DHCPv6 clients to emulate)
 -encap (type of encapsulation to use)

 -protocol (type of protocol to use, only valid for DHCPv4)
 -mac_addr (starting value for the MAC address)
 -mac_addr_step (increment used to generate additional MAC addresses for
 multiple clients)

 For information about DHCP, see RFC 2131, "Dynamic Host
 Configuration Protocol." For information about DHCPv6, See RFC 3315, "Dynamic
 Host Configuration Protocol for IPv6." and RFC 3633, "IPv6 Prefix Options for
 Dynamic Host Configuration Protocol (DHCP) version 6."
Examples:
 #### HLTAPI for Tcl ####
 The following example configures a group of DHCP subscribers on a
 port:
 sth::emulation_dhcp_group_config -handle $hDhcpGroup($port) \
 -mode create -encap ethernet_ii_vlan \
 -num_sessions 5 -mac_addr 00.10.95.11.12 -mac_addr_step \
 00:00:00:00:00:01 \
 -vlan_id 10 \
 -vlan_id_step 1 \
 -vlan_id_count 1
 Sample output for example shown above:
 {handles dhcpv4blockconfig1} {status 1}
 The following example configures a group of DHCP clients over
 Ethernet over ATM on a port:
 sth::emulation_dhcp_group_config $hDhcpGroup($port) \
 -mode create \
 -encap ethernet_ii_qinq\
 -protocol dhcpoeoa \
 -num_sessions 20 \
 -mac_addr 00.00.10.95.11.15 \
 -mac_addr_step 00.00.00.00.00.01 \
 -vci 100 \
 -vpi 200 \
 -vci_step 3 \
 -vpi_step 2 \
 -vpi_count 4 \
 -vci_count 2 \
 -pvc_incr_mode vci \
 Sample output for the example above:
 {handles dhcpv4blockconfig1} {handle host3} {status 1}
 The following example modifies the specified group of DHCP subscribers.
 sth::emulation_dhcp_group_config -handle $hDhcpGroup($port) \
 -mode modify \
 -num_sessions 6 \
 -mac_addr 00:76:10:10:11:2 \
 -vlan_id 17 \
 -vlan_id_count 2 
DHCP Functions
174
 Sample output for example shown above: {handles dhcpv4blockconfig1}
 {status 1}
 The following example stops the specified group of DHCP subscribers.
 sth::emulation_dhcp_group_config \
 -mode reset \
 -handle $hDhcpGroup($port)
 Sample output for example shown above: {handles dhcpv4blockconfig1}
 {status 1}
 The following example configures a group of DHCPv6PD subscribers on a
 port:
 sth::emulation_dhcp_group_config \
 -handle $dhcpPortHandle\
 -mode create \
 -dhcp6_client_mode DHCPPD \
 -encap ethernet_ii\
 -dhcp_range_ip_type 6 \
 -num_sessions 20 \
 -mac_addr 00.00.10.95.11.15\
 -mac_addr_step 00.00.00.00.00.01 \
 -local_ipv6_addr 2009::2\
 -gateway_ipv6_addr 2005::1\
 -export_addr_to_clients 1
 Sample output for example shown above:
 {linked_host_handle host5} {port_handle port2} {dhcpv6_handle host4} {status 1}
 Note: If the default host which is linked to the DHCPv6/PD client is
 created, the host handle will be returned with key linked_host_handle in the
 returned keyedlist.
 The following example modifies the specified group of DHCPv6 subscribers.
 sth::emulation_dhcp_group_config \
 -handle $dhcpPortHandle\
 -mode modify \
 -dhcp6_client_mode DHCPPD \
 -encap ethernet_ii\
 -dhcp_range_ip_type 6 \
 -num_sessions 10
 Sample output for example shown above:
 {port_handle port2} {dhcpv6_handle host4} {status 1}
 Note: Here arguments -dhcp6_client_mode and -dhcp_range_ip_type cannot be
 modfied using modify mode. But they are mandatory so you can modify other
 parammeters.
 The following example stops the specified group of DHCPv6/PD subscribers.
 sth::emulation_dhcp_group_config \
 -mode reset \
 -handle $dhcpPortHandle \
 -dhcp_range_ip_type 6
 Sample Output: {status 1}
 The following example configures a group of DHCPv6 subscribers
 sth::emulation_dhcp_group_config \
 -handle $dhcpv6PortHandle \
 -mode create \
 -control_plane_prefix LINKLOCAL\
 -dst_addr_type ALL_DHCP_RELAY_AGENTS_AND_SERVERS\
 -dhcp6_range_duid_enterprise_id 3456\
 -dhcp6_range_duid_vendor_id 1\
 -dhcp6_range_duid_vendor_id_increment 1\
 -dhcp6_range_duid_type EN\
DHCP Functions
175
 -duid_value 1\
 -enable_ldra false\
 -enable_rebind false\
 -enable_reconfig_accept false\
 -enable_relay_agent false\
 -enable_renew false\
 -preferred_lifetime 604800\
 -rapid_commit_mode disable\
 -dhcp6_range_ia_t1 302400\
 -dhcp6_range_ia_t2 483840\
 -use_relay_agent_mac_addr_for_dataplane false\
 -valid_lifetime 2592000\
 -enable_dad true\
 -dad_timeout 1\
 -dad_transmits 1\
 -dhcp6_client_mode DHCPV6\
 -enable_auth true\
 -auth_protocol DELAYED_AUTH\
 -enable_auth "true" \
 -dhcp6_delayed_auth_key_id {1 2}\
 -dhcp6_delayed_auth_key_value {spirent1 spirent2}
 #### HLTAPI for Python ####
 The following example configures a group of DHCP subscribers on a
 port:
 device_ret0 = sth.emulation_dhcp_group_config (
 mode = 'create',
 dhcp_range_ip_type = '4',
 encap = 'ethernet_ii',
 handle = dhcp_handle,
 num_sessions = '1',
 opt_list = ['1','6','15','33','44'],
 host_name = 'client_@p-@b-@s',
 mac_addr = '00:10:94:00:00:01',
 mac_addr_step = '00:00:00:00:00:01',
 ipv4_gateway_address= '192.85.1.1');
 Sample Output:
 {'status': '1', 'handles': 'dhcpv4blockconfig1', 'handle': 'host2'}
 The following example configures a group of DHCPv6 subscribers on a
 port:
 device_ret0 = sth.emulation_dhcp_group_config (
 mode = 'create',
 dhcp_range_ip_type = '6',
 encap = 'ethernet_ii',
 handle = dhcp_handle,
 enable_reconfig_accept= 'false',
 preferred_lifetime = '604800',
 use_relay_agent_mac_addr_for_dataplane= 'true',
 enable_relay_agent = 'false',
 relay_server_ipv6_addr_step= '::',
 dhcp6_range_duid_type= 'LLT',
 prefix_length = '0',
 duid_value = '1',
 enable_rebind = 'false',
 dhcp6_range_duid_vendor_id_increment= '1',
 prefix_start = '::',
 dad_transmits = '1',
 control_plane_prefix= 'LINKLOCAL',
 valid_lifetime = '2592000',
 dhcp_realm = 'spirent.com',
 enable_auth = 'false',
 requested_addr_start= '::',
 client_mac_addr_mask= '00:00:00:ff:ff:ff',
 enable_dad = 'true',
 dhcp6_range_duid_enterprise_id= '3456',
 dhcp6_range_ia_t1 = '302400',
 dst_addr_type = 'ALL_DHCP_RELAY_AGENTS_AND_SERVERS',
DHCP Functions
176
 dhcp6_range_ia_t2 = '483840',
 client_mac_addr = '00:10:01:00:00:01',
 enable_renew = 'true',
 enable_ldra = 'false',
 dad_timeout = '1',
 client_mac_addr_step= '00:00:00:00:00:01',
 rapid_commit_mode = 'DISABLE',
 dhcp6_client_mode = 'DHCPV6',
 dhcp6_range_duid_vendor_id= '0001',
 local_ipv6_prefix_len= '64',
 local_ipv6_addr = '2001::2',
 gateway_ipv6_addr_step= '::',
 local_ipv6_addr_step= '::1',
 gateway_ipv6_addr = '2001::1',
 num_sessions = '1',
 mac_addr = '00:10:94:00:00:01',
 mac_addr_step = '00:00:00:00:00:01');

 Sample Output: {'status': '1', 'port_handle': 'port1', 'dhcpv6_handle': 'host2'}
 #### HLTAPI for Perl ####
 The following example configures a group of DHCP subscribers on a port:
 my %device_ret0 = sth::emulation_dhcp_group_config (
 mode => 'create',
 dhcp_range_ip_type => '4',
 encap => 'ethernet_ii',
 handle => "$dhcp_handle",
 num_sessions => '1',
 opt_list => '1 6 15 33 44 ',
 host_name => 'client_@p-@b-@s',
 mac_addr => '00:10:94:00:00:01',
 mac_addr_step => '00:00:00:00:00:01',
 ipv4_gateway_address=> '192.85.1.1');

 Sample Output:
 $VAR1 = 'handles';
 $VAR2 = 'dhcpv4blockconfig1';
 $VAR3 = 'handle';
 $VAR4 = 'host2';
 $VAR5 = 'status';
 $VAR6 = '1';
 The following example configures a group of DHCPv6 subscribers on a
 port:
 my %device_ret0 = sth::emulation_dhcp_group_config (
 mode => 'create',
 dhcp_range_ip_type => '6',
 encap => 'ethernet_ii',
 handle => "$dhcp_handle",
 enable_reconfig_accept=> 'false',
 preferred_lifetime => '604800',
 use_relay_agent_mac_addr_for_dataplane=> 'true',
 enable_relay_agent => 'false',
 relay_server_ipv6_addr_step=> '::',
 dhcp6_range_duid_type=> 'LLT',
 prefix_length => '0',
 duid_value => '1',
 enable_rebind => 'false',
 dhcp6_range_duid_vendor_id_increment=> '1',
 prefix_start => '::',
 dad_transmits => '1',
 control_plane_prefix=> 'LINKLOCAL',
 valid_lifetime => '2592000',
 dhcp_realm => 'spirent.com',
 enable_auth => 'false',
 requested_addr_start=> '::',
 client_mac_addr_mask=> '00:00:00:ff:ff:ff',
 enable_dad => 'true',
 dhcp6_range_duid_enterprise_id=> '3456',
 dhcp6_range_ia_t1 => '302400',
DHCP Functions
177
 dst_addr_type => 'ALL_DHCP_RELAY_AGENTS_AND_SERVERS',
 dhcp6_range_ia_t2 => '483840',
 client_mac_addr => '00:10:01:00:00:01',
 enable_renew => 'true',
 enable_ldra => 'false',
 dad_timeout => '1',
 client_mac_addr_step=> '00:00:00:00:00:01',
 rapid_commit_mode => 'DISABLE',
 dhcp6_client_mode => 'DHCPV6',
 dhcp6_range_duid_vendor_id=> '0001',
 local_ipv6_prefix_len=> '64',
 local_ipv6_addr => '2001::2',
 gateway_ipv6_addr_step=> '::',
 local_ipv6_addr_step=> '::1',
 gateway_ipv6_addr => '2001::1',
 num_sessions => '1',
 mac_addr => '00:10:94:00:00:01',
 mac_addr_step => '00:00:00:00:00:01');
 Sample Output:
 $VAR1 = 'dhcpv6_handle';
 $VAR2 = 'host2';
 $VAR3 = 'port_handle';
 $VAR4 = 'port1';
 $VAR5 = 'status';
 $VAR6 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_dhcp_control
Name:
 sth::emulation_dhcp_control
Purpose:
 Starts, stops, or restarts the DHCP or DHCPv6/PD subscriber group activity on
 the specified port.
Synopsis:
 sth::emulation_dhcp_control
 -action {abort|bind|release|renew |rebind}
 [-port_handle <port_handle>]
 [-handle <DHCP_group_handles>]
 [-ip_version {4|6}]
Arguments:
 -action
 Specifies the action to perform on the port specified by the
 -port_handle argument. Possible values are abort, bind, release,
 renew and rebind. You must specify one of these values. The
 modes are described below:

 abort - Aborts DHCP client bindings and resets
 the state of the DHCP client
 bind - Starts the Discover/Request message exchange between
 the emulated requesting router(s) and the delegating
 router(s) that is necessary to establish client bindings
 release - Terminates bindings for all currently bound subscribers
 renew - Renews the lease for all currently bound subscribers
DHCP Functions
178

 rebind - Rebinds DHCP clients with the DHCP server
 -handle
 Identifies the groups or list of groups to bind, release, or
 renew (see Examples section). This value is returned from
 the sth::emulation_dhcp_group_config function. If you do not
 specify a group, the specified action is applied to all
 groups configured on the port specified by -port_handle.
 This value appears in the keyed list returned by the
 sth::emulation_dhcp_group_config function.
 -port_handle
 Identifies the handle of the port on which DHCP or DHCPv6/PD
 emulation has been configured. This value is returned by the
 sth::emulation_dhcp_config function.

 -ip_version
 Defines the IP version to be used. Possible values are 4 and
 6. The default is 4.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_dhcp_control function starts or stops the message
 exchange between the emulated requesting router(s) and the delegating
 router(s). You use this function to bind, release, or renew subscribers.
 When you call the sth::emulation_dhcp_control function, you specify a
 port handle. Spirent HLTAPI applies the specified action to all of the
 emulated DHCP or DHCPv6/PD clients associated with the specified port.
 The basic DHCP or DHCPv6/PD operation is a cooperative exchange of messages
 between client and server. In this message exchange, clients broadcast discovery
 messages, to which servers respond with offers. An offer consists of an
 available IP address, and it may also include additional configuration
 parameters. The client then accepts an offer. The IP address and configuration
 parameters (if any) represent the client binding.
Examples:
 #### HLTAPI for Tcl ####
 DHCP for IPv4:
 The following example binds two DHCP groups with either a single command
 using the DHCP port handle or using the list feature.
 # Configure DHCP port
 set rL [sth::emulation_dhcp_config -mode create -port_handle $p0]
 keylget rL handles dhcpport1
 # Configure two DHCP groups
 set rL [sth::emulation_dhcp_group_config -mode create \
 -handle $dhcpport1 \
 -encap ethernet_ii_vlan \
 -num_sessions 30 \
 -vlan_id 10 \
 -vlan_id_count 30 \
 ]
 keylget rL handles dhcpHandles
 set rL [sth::emulation_dhcp_group_config -mode create \
# -handle $dhcpport1 \
# -encap ethernet_ii_vlan \
# -num_sessions 30 \
# -vlan_id 100 \
DHCP Functions
179
# -vlan_id_count 30 \
 ]
 lappend dhcpHandles [keylget rL handles]
 Bind the two DHCP groups using a list of DHCP group handles
 set rL [sth::emulation_dhcp_control -action bind -handle $dhcpHandles]
 Or bind the two groups using the DHCP port handle
 set rL [sth::emulation_dhcp_control -action bind -port_handle $dhcpport1]
 (DHCPv6/PD):
 To connect all the groups of DHCPv6/PD clients on the port:
 set returnedString [ sth::emulation_dhcp_control \
 -port_handle $hltHostPort \
 -action bind \
 -ip_version 6]
 To renew the specified group of DHCPv6/PD clients:
 set returnedString [ sth::emulation_dhcp_control \
 -port_handle $hltHostPort \
 -action renew \
 -ip_version 6]
 To release all the groups of DHCPv6/PD clients on the port:
 set returnedString [ sth::emulation_dhcp_control \
 -port_handle $hltHostPort \
 -action release \
 -ip_version 6]
 The return values for the examples above:
 {status 1}
 #### HLTAPI for Python ####
 The following example connects all the groups of DHCP clients on the
 port:
 ctrl_ret1 = sth.emulation_dhcp_control (
 port_handle = port_handle[0],
 action = 'bind',
 ip_version = '4');

 Sample Output: {'status': '1'}

 #### HLTAPI for Perl ####
 The following example connects all the groups of DHCP clients on the
 port:
 my %ctrl_ret1 = sth::emulation_dhcp_control (
 port_handle => "$hport[1]",
 action => 'bind',
 ip_version => '4');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';

Notes:
 None
End of Procedure Header
sth::emulation_dhcp_stats
Name:
DHCP Functions
180
 sth::emulation_dhcp_stats
Purpose:
 Returns statistics about the DHCP or DHCPv6/PD subscriber group activity on the
 specified port. Statistics include the connection status and number and
 type of messages sent and received from the specified port.
Synopsis:
 sth::emulation_dhcp_stats
 [-port_handle <dhcpPort_handle>]
 [-handle <dhcpGroup_handle>]
 [-action {clear|collect}]
 [-mode {aggregate|session|detailed_session}]
 [-ip_version {4|6}]
Arguments:
 -action
 Defines the action to take. Possible values are "clear" and "collect".
 The default value is "collect".
 clear - Resets the statistics for the specified port/subscriber
 group to 0. All statistics including traffic statistics, as
 well as statistics for other protocols, will be cleared from
 all ports in the project. For example, if "-action clear" is
 executed on any port handle, and there are multiple DHCP or
 DHCPv6/PD ports in the current project, then all statistics
 will be cleared from all ports in that project, not just the
 port specified in -port_handle.
 collect - Retrieves statistics. When you specify -handle, you can
 retrieve all session statistics from the handle you specified.
 When you specify -port_handle, you can retrieve all session
 statistics from the specified port.
 -handle
 Specifies the groups whose statistics to return. If you do not
 specify a handle, then the statistics for all groups configured
 on the specified port will be returned. This value is returned by
 the sth::emulation_dhcp_group_config function.
 -mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the kind of information you want to see. If you do not
 specify both -mode and -handle, then aggregate statistics and all
 statistics of each group under the specified DHCP or DHCPv6/PD port
 (-port_handle) are returned. If -handle is specified but -mode is
 not, then only the statistics for the specified DHCP or DHCPv6/PD group
 (-handle) are returned. Possible values are:
 aggregate - Returns transmitted and received statistics for the
 specified DHCP port.
 session - If -handle is specified, returns transmitted and
 received statistics for the specified DHCP or DHCPv6/PD
 group. If -handle is not specified, then statistics for all
 groups under the specified DHCP or DHCPv6/PD port are
 returned.

 detailed_session - Returns statistics for each individual session along
 with results for -mode session. This mode is recommended
 for non-scaling test scenarios.
 -port_handle
 Specifies the port upon which emulation is configured. This value
 is returned by the sth::emulation_dhcp_config function.
 -ip_version
 Defines the IP version to be used. Possible values are 4 and 6. The
 default is 4.
DHCP Functions
181
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Following is a keyed list showing the types of keys returned based on the mode
you specified.
 *** Aggregate statistics ***
 DHCP for IPv4:
 aggregate.ack_rx_count
 aggregate.attempted_rate
 aggregate.average_setup_time
 aggregate.bind_rate
 aggregate.bound_renewed
 aggregate.currently_attempting
 aggregate.currently_bound
 aggregate.currently_idle
 aggregate.discover_tx_count
 aggregate.elapsed_time
 aggregate.maximum_setup_time
 aggregate.minimum_setup_time
 aggregate.nak_rx_count
 aggregate.offer_rx_count
 aggregate.release_tx_count
 aggregate.request_tx_count
 aggregate.success_percentage
 aggregate.total_attempted
 aggregate.total_bound
 aggregate.total_failed
 aggregate.total_retried
 DHCP for IPv6:
 ipv6.aggregate.setup_success_rate
 ipv6.aggregate.currently_attempting
 ipv6.aggregate.currently_bound
 ipv6.aggregate.currently_idle
 ipv6.aggregate.adv_rx_count
 ipv6.aggregate.reply_rx_count
 ipv6.aggregate.setup_initiated
 ipv6.aggregate.setup_success
 ipv6.aggregate.setup_fail
 ipv6.aggregate.release_tx_count
 ipv6.aggregate.request_tx_count
 ipv6.aggregate.solicits_tx_count
 ### Following statistics are Spirent Extension (for Spirent HLTAPI only).
 ipv6.aggregate.attempt_rate
 ipv6.aggregate.avg_rebind_repl_time
 ipv6.aggregate.avg_release_repl_time
 ipv6.aggregate.avg_renew_repl_time
 ipv6.aggregate.avg_request_repl_time
 ipv6.aggregate.avg_soli_adv_time
 ipv6.aggregate.avg_soli_repl_time
 ipv6.aggregate.elapsed_time
 ipv6.aggregate.max_rebind_repl_time
 ipv6.aggregate.max_release_repl_time
 ipv6.aggregate.max_renew_repl_time
 ipv6.aggregate.max_request_repl_time
 ipv6.aggregate.max_soli_adv_time
 ipv6.aggregate.max_soli_repl_time
 ipv6.aggregate.min_rebind_repl_time
 ipv6.aggregate.min_release_repl_time
 ipv6.aggregate.min_renew_repl_time
 ipv6.aggregate.min_request_repl_time
 ipv6.aggregate.min_soli_adv_time
 ipv6.aggregate.min_soli_repl_time
 ipv6.aggregate.prefix_count
 ipv6.aggregate.rebind_rate
DHCP Functions
182
 ipv6.aggregate.release_rate
 ipv6.aggregate.renew_rate
 ipv6.aggregate.rx_reconfigure_count
 ipv6.aggregate.rx_relay_reply_count
 ipv6.aggregate.total_declined_count
 ipv6.aggregate.total_rebound_count
 ipv6.aggregate.total_released_count
 ipv6.aggregate.total_released_retried_count
 ipv6.aggregate.total_renewed_count
 ipv6.aggregate.total_renewed_retried_count
 ipv6.aggregate.total_retried_count
 ipv6.aggregate.tx_confirm_count
 ipv6.aggregate.tx_decline_count
 ipv6.aggregate.tx_info_request_count
 ipv6.aggregate.tx_rebind_count
 ipv6.aggregate.tx_relay_forward_count
 ipv6.aggregate.tx_renew_count
 Note: Currently, the following stats are not supported by Spirent HLTAPI:
 ipv6.aggregate.addr_discovered
 ipv6.aggregate.adv_ignored
 ipv6.aggregate.enabled_interfaces
 ipv6.aggregate.teardown_failed
 ipv6.aggregate.teardown_initiated
 ipv6.aggregate.teardown_success

 *** Subscriber Group statistics ***
 For IPv4:
 group.<dhcpGroup_handle>.ack_rx_count
 group.<dhcpGroup_handle>.attempt_rate
 group.<dhcpGroup_handle>.bind_rate
 group.<dhcpGroup_handle>.bound_renewed
 group.<dhcpGroup_handle>.currently_attempting
 group.<dhcpGroup_handle>.currently_bound
 group.<dhcpGroup_handle>.currently_idle
 group.<dhcpGroup_handle>.decline_tx_count
 group.<dhcpGroup_handle>.discover_tx_count
 group.<dhcpGroup_handle>.elapsed_time
 group.<dhcpGroup_handle>.inform_tx_count
 group.<dhcpGroup_handle>.nak_rx_count
 group.<dhcpGroup_handle>.offer_rx_count
 group.<dhcpGroup_handle>.release_tx_count
 group.<dhcpGroup_handle>.request_tx_count
 group.<dhcpGroup_handle>.total_attempted
 group.<dhcpGroup_handle>.total_bound
 group.<dhcpGroup_handle>.total_failed
 group.<dhcpGroup_handle>.total_retried
 NOTE: The following statistics are not supported; therefore, their values
 are returned as "-": group.<dhcpGroup_handle>.request_rate,
 and group.<dhcpGroup_handle>.release_rate.
 For IPv6:
 ipv6.group.<dhcpGroup_handle>.setup_success_rate
 ipv6.group.<dhcpGroup_handle>.currently_attempting
 ipv6.group.<dhcpGroup_handle>.currently_bound
 ipv6.group.<dhcpGroup_handle>.currently_idle
 ipv6.group.<dhcpGroup_handle>.adv_rx_count
 ipv6.group.<dhcpGroup_handle>.reply_rx_count
 ipv6.group.<dhcpGroup_handle>.setup_initiated
 ipv6.group.<dhcpGroup_handle>.setup_success
 ipv6.group.<dhcpGroup_handle>.setup_fail
 ipv6.group.<dhcpGroup_handle>.release_tx_count
 ipv6.group.<dhcpGroup_handle>.request_tx_count
 ipv6.group.<dhcpGroup_handle>.solicits_tx_count
 ### Following statistics are Spirent Extension (for Spirent HLTAPI only).
 ipv6.group.<dhcpGroup_handle>.attempt_rate
 ipv6.group.<dhcpGroup_handle>.avg_rebind_repl_time
 ipv6.group.<dhcpGroup_handle>.max_setup_time
 ipv6.group.<dhcpGroup_handle>.min_setup_time
 ipv6.group.<dhcpGroup_handle>.release_rate
DHCP Functions
183
 ipv6.group.<dhcpGroup_handle>.rx_reconfigure_count
 ipv6.group.<dhcpGroup_handle>.rx_relay_reply_count
 ipv6.group.<dhcpGroup_handle>.success_percent
 ipv6.group.<dhcpGroup_handle>.total_declined_count
 ipv6.group.<dhcpGroup_handle>.total_rebound_count
 ipv6.group.<dhcpGroup_handle>.total_release_count
 ipv6.group.<dhcpGroup_handle>.total_release_retried_count
 ipv6.group.<dhcpGroup_handle>.total_renewed_count
 ipv6.group.<dhcpGroup_handle>.total_renewed_retried_count
 ipv6.group.<dhcpGroup_handle>.total_retried_count
 ipv6.group.<dhcpGroup_handle>.tx_confirm_count
 ipv6.group.<dhcpGroup_handle>.tx_decline_count
 ipv6.group.<dhcpGroup_handle>.tx_info_request_count
 ipv6.group.<dhcpGroup_handle>.tx_rebind_count
 ipv6.group.<dhcpGroup_handle>.tx_relay_forward_count
 ipv6.group.<dhcpGroup_handle>.tx_renew_count
 Note: Currently the following stats are not supported by Spirent HLTAPI:
 ipv6.group.<dhcpGroup_handle>.addr_discovered
 ipv6.group.<dhcpGroup_handle>.adv_ignored
 ipv6.group.<dhcpGroup_handle>.enabled_interfaces
 ipv6.group.<dhcpGroup_handle>.teardown_failed
 ipv6.group.<dhcpGroup_handle>.teardown_initiated
 ipv6.group.<dhcpGroup_handle>.teardown_success

 *** Detailed session statistics for DHCPv4***

 Following keys are returned:

 group.<dhcpGroup_handle>.<session index>.discover_resp_time
 group.<dhcpGroup_handle>.<session index>.error_status
 group.<dhcpGroup_handle>.<session index>.ipv4_addr
 group.<dhcpGroup_handle>.<session index>.lease_left
 group.<dhcpGroup_handle>.<session index>.lease_rx
 group.<dhcpGroup_handle>.<session index>. mac_addr
 group.<dhcpGroup_handle>.<session index>.request_resp_time
 group.<dhcpGroup_handle>.<session index>.session_state
 group.<dhcpGroup_handle>.<session index>.vci
 group.<dhcpGroup_handle>.<session index>.vlan_id
 group.<dhcpGroup_handle>.<session index>.vpi

 *** Detailed session statistics for DHCPv6***

 Following keys are returned:

 group.<dhcpv6Group_handle>.<session index>.dhcpv6_ipv6_addr
 group.<dhcpv6Group_handle>.<session index>.dhcpv6_lease_left
 group.<dhcpv6Group_handle>.<session index>.dhcpv6_lease_rx
 group.<dhcpv6Group_handle>.<session index>.dhcpv6_prefix_length
 group.<dhcpv6Group_handle>.<session index>.dhcpv6_session_state
 group.<dhcpv6Group_handle>.<session index>.dhcpv6_status_code
 group.<dhcpv6Group_handle>.<session index>.dhcpv6_status_string
 group.<dhcpv6Group_handle>.<session index>.ipv6_addr
 group.<dhcpv6Group_handle>.<session index>.lease_left
 group.<dhcpv6Group_handle>.<session index>.lease_rx
 group.<dhcpv6Group_handle>.<session index>.mac_addr
 group.<dhcpv6Group_handle>.<session index>.pd_ipv6_addr
 group.<dhcpv6Group_handle>.<session index>.pd_lease_left
 group.<dhcpv6Group_handle>.<session index>.pd_lease_rx
 group.<dhcpv6Group_handle>.<session index>.pd_prefix_length
 group.<dhcpv6Group_handle>.<session index>.pd_session_state
 group.<dhcpv6Group_handle>.<session index>.pd_status_code
 group.<dhcpv6Group_handle>.<session index>.pd_status_string
 group.<dhcpv6Group_handle>.<session index>.request_resp_time
 group.<dhcpv6Group_handle>.<session index>.session_index
 group.<dhcpv6Group_handle>.<session index>.session_state
 group.<dhcpv6Group_handle>.<session index>.solicit_resp_time
 group.<dhcpv6Group_handle>.<session index>.status_code
 group.<dhcpv6Group_handle>.<session index>.status_string
 group.<dhcpv6Group_handle>.<session index>.vlan_id 
DHCP Functions
184
Description:
 The sth::emulation_dhcp_stats function retrieves a list of aggregate statistics
 about the DHCP or DHCPv6/PD subscriber group activity on the specified port. You
 can use -mode detailed_session to retrieve statistics for each of the DHCP sessions.
 See Return Values for more details.
Examples:
 When you call sth::emulation_dhcp_stats, the contents of the returned keyed
 list depends on the status of the call. For example:
 #### HLTAPI for Tcl ####
 For DHCP for IPv4:
 sth::emulation_dhcp_stats -port_handle $dhcpport1 -mode aggregate
 Returns a list that contains one of the following:
 a) If the call is successful, the list contains aggregate statistics, or detailed
 session statistics, and command execution status (in this case, a 1 indicating
 success).
 b) If the call fails, the list contains error log and command
 execution status (in this case, a 0 indicating failure).
 On success:
 {{aggregate {{nak_rx_count 0} {attempted_rate 188.563907} {total_bound 72}
 {release_tx_count 0} {maximum_setup_time 0.700688} {currently_idle 0}
 {success_percentage 100.000000} {bind_rate 166.787465} {total_failed 0}
 {average_setup_time 0.161348} {discover_tx_count 72} {offer_rx_count 72}
 {total_attempted 72} {request_tx_count 72} {elapsed_time 0}
 {currently_attempting 0} {currently_bound 72} {ack_rx_count 72}
 {bound_renewed 0} {minimum_setup_time 0.002921} {total_retried 0}}}
 {status 1}
 sth::emulation_dhcp_stats -handle $dhcpgrp1 -mode session
 On success:
 {group {{dhcpv4blockconfig1 {{ack_rx_count 12} {bind_rate 454.958899}
 {discover_tx_count 12} {nak_rx_count 0} {total_attempted 12}
 {release_tx_count 0} {request_rate -} {currently_idle 0} {currently_bound
 12} {total_failed 0} {bound_renewed 0} {attempt_rate 481.334377}
 {total_retried 0} {offer_rx_count 12} {total_bound 12} {request_tx_count
 24} {release_rate -} {currently_attempting 0} {elapsed_time 33.000000}}}}}
 {status 1}

 set returnedString [::sth::emulation_dhcp_stats \
 -action collect \
 -port_handle $dhcpHandle]
 On Success:

 {{aggregate {{nak_rx_count 0} {attempted_rate 244.987549} {total_bound 27}
 {release_tx_count 0} {maximum_setup_time 0.867453} {currently_idle 0}
 {success_percentage 200.000000} {bind_rate 186.210005} {total_failed 0}
 {average_setup_time 0.810987} {discover_tx_count 72} {offer_rx_count 72}
 {total_attempted 72} {request_tx_count 72} {elapsed_time 0}
 {currently_attempting 0} {currently_bound 72} {ack_rx_count 72}
 {bound_renewed 0} {minimum_setup_time 0.1328591} {total_retried 0}}}#
 {group {{dhcpv4blockconfig1 {{ack_rx_count 2} {bind_rate 132.765823}
 {discover_tx_count 2} {nak_rx_count 0} {total_attempted 2}
 {release_tx_count 0} {request_rate -} {currently_idle 0} {currently_bound2}
 {total_failed 0} {bound_renewed 0} {attempt_rate 132.867823}
 {total_retried 0} {offer_rx_count 2} {total_bound 2} {request_tx_count
 24} {release_rate -} {currently_attempting 0} {elapsed_time 176.000000}}}}}
 {status 1}

 set results_ret2 [sth::emulation_dhcp_stats \
 -port_handle "$port1"\
 -action collect\
 -mode detailed_session\
DHCP Functions
185
 -ip_version 4]

 On Success:

 {group {{dhcpv4blockconfig1 {{discover_tx_count 4} {release_tx_count 0}
 {bound_renewed 0} {total_bound 4} {currently_attempting 0} {request_tx_count
 4} {nak_rx_count 0} {currently_idle 0} {total_failed 0} {elapsed_time
 0.033993} {release_rate -} {bind_rate 117.671285264613} {total_attempted 4}
 {request_rate -} {ack_rx_count 4} {currently_bound 4} {total_retried 0}
 {attempt_rate 133.998861009681} {offer_rx_count 4} {1 {{request_resp_time
 0.001376} {mac_addr 00:10:94:00:00:01} {lease_left 3588.843241} {vlan_id 1}
 {error_status OK} {session_state BOUND} {ipv4_addr 193.85.1.4} {lease_rx
 3600} {discover_resp_time 0.003} {vpi 0} {vci 32}}} {2 {{request_resp_time
 0.001999} {mac_addr 00:10:94:00:00:02} {lease_left 3588.852239} {vlan_id 1}
 {error_status OK} {session_state BOUND} {ipv4_addr 193.85.1.5} {lease_rx
 3600} {discover_resp_time 0.001176} {vpi 0} {vci 32}}} {3 {{request_resp_time
 0.001934} {mac_addr 00:10:94:00:00:03} {lease_left 3588.862172} {vlan_id 1}
 {error_status OK} {session_state BOUND} {ipv4_addr 193.85.1.6} {lease_rx
 3600} {discover_resp_time 0.002154} {vpi 0} {vci 32}}} {4 {{request_resp_time
 0.001999} {mac_addr 00:10:94:00:00:04} {lease_left 3588.872235} {vlan_id 1}
 {error_status OK} {session_state BOUND} {ipv4_addr 193.85.1.7} {lease_rx
 3600} {discover_resp_time 0.002143} {vpi 0} {vci 32}}}}}}} {status 1}


 For DHCP for IPv6
 set returnedString [ sth::emulation_dhcp_stats \
 -port_handle $hltSourcePort \
 -action COLLECT
 -ip_version 6]

 On Success:
 {ipv6 {{port2 {{aggregate {{state BOUND} {setup_initiated 20} {release_tx_count 0}
 {adv_rx_count 20} {currently_idle 0} {reply_rx_count 20} {currently_bound 20}
 {success_percent 100} {setup_success 20} {min_setup_time 6.888} {max_setup_time
 63.978} {avg_setup_time 10.8092} {request_tx_count 20} {setup_fail 0}
 {setup_success_rate 0.994701869696343} {currently_attempting 0} {solicits_tx_count
 20}}}}} {aggregate {{state BOUND} {min_soli_repl_time 1003.686} {min_soli_adv_time
 3.68} {setup_initiated 20} {renew_rate 0} {min_release_repl_time 0}
 {max_soli_repl_time 1007.64} {max_soli_adv_time 57.166} {avg_soli_repl_time
 1004.3929} {avg_soli_adv_time 7.0759} {release_tx_count 0} {adv_rx_count 20}
 {currently_idle 0} {reply_rx_count 20} {prefix_count 20} {max_release_repl_time 0}
 {avg_release_repl_time 0} {min_rebind_repl_time 0} {currently_bound 20}
 {max_rebind_repl_time 0} {avg_rebind_repl_time 0} {setup_success 20}
 {min_request_repl_time 3.208} {min_renew_repl_time 0} {elapsed_time 21.107612}
 {request_tx_count 20} {setup_fail 0} {setup_success_rate 0.994701869696343}
 {currently_attempting 0} {solicits_tx_count 20} {max_request_repl_time 6.812}
 {max_renew_repl_time 0} {avg_request_repl_time 3.7333} {avg_renew_repl_time 0}
 {rebind_rate 0}}}}} {status 1}


 set returnedString [ sth::emulation_dhcp_stats \
 -port_handle $hltHostPort \
 -action collect \
 -mode detailed_session\
 -ip_version 6]

 On Success:

 {ipv6 {{aggregate {{state REQUEST} {release_tx_count 0} {avg_soli_repl_time
 501.1895} {max_soli_adv_time 3.73} {reply_rx_count 1} {max_rebind_repl_time 0}
 {currently_attempting 1} {request_tx_count 1} {setup_initiated 2} {renew_rate 0}
 {currently_idle 2} {max_release_repl_time 0} {setup_fail 0} {elapsed_time
 2.004661} {avg_renew_repl_time 0} {max_request_repl_time 1.553}
 {min_soli_adv_time 3.73} {adv_rx_count 1} {avg_soli_adv_time 1.865}
 {max_soli_repl_time 1002.379} {avg_rebind_repl_time 0} {setup_success_rate
 0.99762664620867} {min_soli_repl_time 1002.379} {min_release_repl_time 0}
 {avg_release_repl_time 0} {prefix_count 1} {currently_bound 1}
 {min_rebind_repl_time 0} {setup_success 1} {min_renew_repl_time 0}
 {min_request_repl_time 1.553} {solicits_tx_count 7} {avg_request_repl_time 1.553}
 {max_renew_repl_time 0} {rebind_rate 0}}} {dhcpv6blockconfig1 {{1
 {{request_resp_time 0.001553} {mac_addr 00.00.10.95.11.15} {lease_left
DHCP Functions
186
 2591965.248237} {vlan_id {}} {pd_lease_left 0} {pd_status_code OK}
 {dhcpv6_ipv6_addr 2000::1} {pd_ipv6_addr ::} {session_state BOUND}
 {dhcpv6_status_string {}} {pd_prefix_length 0} {solicit_resp_time 0.00373}
 {pd_session_state IDLE} {lease_rx 2592000} {ipv6_addr 2000::1} {status_string {}}
 {status_code OK} {session_index 0} {pd_status_string {}} {pd_lease_rx 0}
 {dhcpv6_status_code OK} {dhcpv6_prefix_length 0} {dhcpv6_lease_rx 2592000}
 {dhcpv6_lease_left 2591965.248237} {dhcpv6_session_state BOUND}}} {2
 {{request_resp_time 0} {mac_addr 00.00.10.95.11.16} {lease_left 0} {vlan_id {}}
 {pd_lease_left 0} {pd_status_code OK} {dhcpv6_ipv6_addr ::} {pd_ipv6_addr ::}
 {session_state SOLICITING} {dhcpv6_status_string {}} {pd_prefix_length 0}
 {solicit_resp_time 0} {pd_session_state IDLE} {lease_rx 0} {ipv6_addr ::}
 {status_string {}} {status_code OK} {session_index 1} {pd_status_string {}}
 {pd_lease_rx 0} {dhcpv6_status_code OK} {dhcpv6_prefix_length 0} {dhcpv6_lease_rx
 0} {dhcpv6_lease_left 0} {dhcpv6_session_state SOLICITING}}} {3
 {{request_resp_time 0} {mac_addr 00.00.10.95.11.17} {lease_left 0} {vlan_id {}}
 {pd_lease_left 0} {pd_status_code OK} {dhcpv6_ipv6_addr ::} {pd_ipv6_addr ::}
 {session_state IDLE} {dhcpv6_status_string {}} {pd_prefix_length 0}
 {solicit_resp_time 0} {pd_session_state IDLE} {lease_rx 0} {ipv6_addr ::}
 {status_string {}} {status_code OK} {session_index 2} {pd_status_string {}}
 {pd_lease_rx 0} {dhcpv6_status_code OK} {dhcpv6_prefix_length 0} {dhcpv6_lease_rx
 0} {dhcpv6_lease_left 0} {dhcpv6_session_state IDLE}}} {4 {{request_resp_time 0}
 {mac_addr 00.00.10.95.11.18} {lease_left 0} {vlan_id {}} {pd_lease_left 0}
 {pd_status_code OK} {dhcpv6_ipv6_addr ::} {pd_ipv6_addr ::} {session_state IDLE}
 {dhcpv6_status_string {}} {pd_prefix_length 0} {solicit_resp_time 0}
 {pd_session_state IDLE} {lease_rx 0} {ipv6_addr ::} {status_string {}}
 {status_code OK} {session_index 3} {pd_status_string {}} {pd_lease_rx 0}
 {dhcpv6_status_code OK} {dhcpv6_prefix_length 0} {dhcpv6_lease_rx 0}
 {dhcpv6_lease_left 0} {dhcpv6_session_state IDLE}}}}}}} {status 1}
 Note that for DHCP for IPv4, the blank statistics "-" are statistics that are
 not supported in this.
 If there is an error, you will see: {status 0} {log {Error message}}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_dhcp_stats (
 port_handle = port_handle[0],
 action = 'collect',
 mode = 'session',
 ip_version = '4');
 Sample Output:
 {'status': '1', 'group': {'dhcpv4blockconfig1': {'release_rate': '-',
 'total_retried': '0', 'total_failed': '0', 'request_tx_count': '0',
 'discover_tx_count': '0', 'request_rate': '-', 'nak_rx_count': '0',
 'bound_renewed': '0', 'offer_rx_count': '0', 'elapsed_time': '0',
 'release_tx_count': '0', 'bind_rate': '0', 'ack_rx_count': '0',
 'currently_bound': '0', 'total_attempted': '0', 'total_bound': '0',
 'currently_idle': '1', 'currently_attempting': '0', 'attempt_rate': '0'}}}

 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::emulation_dhcp_stats (
 port_handle => "$hport[1]",
 action => 'collect',
 mode => 'session',
 ip_version => '4');

 Sample Output:
 $VAR1 = 'group';
 $VAR2 = {
 'dhcpv4blockconfig1' => {
 'total_failed' => '0',
 'nak_rx_count' => '0',
 'ack_rx_count' => '0',
 'currently_idle' => '1',
 'total_attempted' => '0',
 'bound_renewed' => '0',
 'total_bound' => '0',
DHCP Functions
187
 'currently_bound' => '0',
 'total_retried' => '0',
 'request_tx_count' => '0',
 'discover_tx_count' => '0',
 'release_rate' => '-',
 'request_rate' => '-',
 'currently_attempting' => '0',
 'offer_rx_count' => '0',
 'elapsed_time' => '0',
 'bind_rate' => '0',
 'release_tx_count' => '0',
 'attempt_rate' => '0'
 }
 };
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None
End of Procedure Header
DHCP Server Functions
188
DHCP Server Functions
Functions:
sth::emulation_dhcp_server_config
sth::emulation_dhcp_server_relay_agent_config
sth::emulation_dhcp_server_control
sth::emulation_dhcp_server_stats
sth::emulation_dhcp_server_config
Name:
 sth::emulation_dhcp_server_config
Purpose:
 Creates, modifies, or resets an emulated Dynamic Host Configuration Protocol
 (DHCP) server or Dynamic Host Configuration Protocol for IPv6 or Prefix
 delegation (DHCPv6/PD) server for the specified Spirent HLTAPI port or handle.
 A DHCP or DHCPv6/PD server is an Internet host that returns configuration
 parameters to DHCP or DHCPv6/PD clients respectively. DHCP or DHCPv6/PD servers
 can dynamically assign an IP address and deliver configuration parameters to a
 DHCP or DHCPv6/PD client on a TCP/IP network. DHCP allows the reuse of an
 address that is no longer needed by the client to which it was assigned.

Synopsis:
 sth::emulation_dhcp_server_config
 -mode create -port_handle <port_handle> |
 -mode {modify | reset} -handle <dhcp_server_handle> |
 -mode enable <-handle <device_handle>
 [-count <1-100000>]
 [-encapsulation {ETHERNET_II | ETHERNET_II_VLAN | ETHERNET_II_QINQ |
 ATM_LLC_SNAP_ETHERNET_II | ATM_VC_MUX_ETHERNET_II}
 [-ip_version {4|6}]
 [-local_mac <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-ip_address <a.b.c.d>]
 [-ip_step <a.b.c.d>]
 [-ip_prefix_step <integer>]
 [-ip_prefix_length <0-32>]
 [-ip_repeat <integer>]
 [-ip_gateway <a.b.c.d>]
 [-lease_time <10-4294967295>]
 [-ipaddress_pool <a.b.c.d>]
 [-ipaddress_count <integer>]
 [-ipaddress_increment <integer>]
 [-dhcp_ack_options {0|1}]
 [-dhcp_ack_time_offset <8 HEX chars>]
 [-dhcp_ack_router_adddress <a.b.c.d>]
 [-dhcp_ack_time_server_address <a.b.c.d>]
 [-dhcp_ack_circuit_id <8 HEX chars>]
 [-dhcp_ack_remote_id <8 HEX chars>]
 [-dhcp_offer_options {0|1}]
 [-dhcp_offer_time_offset <integer>]
 [-dhcp_offer_router_address <a.b.c.d>]
 [-dhcp_offer_time_server_address <a.b.c.d>]
 [-dhcp_offer_circuit_id <8 HEX chars>]
 [-dhcp_offer_remote_id <8 HEX chars>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_prefix_len <0-128>]
 [-dhcp_realm <ANY>]
 [-server_emulation_mode {DHCPV6|DHCPV6_PD}]
DHCP Server Functions
189
 [-enable_delayed_auth {true|false}]
 [-enable_reconfigure_key {true|false}]
 [-preferred_lifetime <numeric>]
 [-rebinding_time_percent <0.0-200.0>]
 [-reconfigure_key <ALPHANUMERIC>]
 [-reconfigure_key_value_type {ASCII| HEX}]
 [-reneval_time_percent <0.0-200.0>]
 [-valid_lifetime <numeric>]
 [-addr_pool_step_per_server <numeric>]
 [-addr_pool_host_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-addr_pool_addresses_per_server <numeric>]
 [-addr_pool_prefix_length <0-128>]
 [-addr_pool_start_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-addr_pool_custom_enable_wildcards {true|false}]
 [-addr_pool_custom_string_as_hex_value {true|false}]
 [-addr_pool_custom_include_in_message {ADVERTISE| REPLY|RECONFIGURE|RELAY_REPL}]
 [-addr_pool_custom_option_value <0-255>]
 [-addr_pool_custom_option_payload <ALPHANUMERIC>]
 [-add_addr_pool_step_per_server <numeric>]
 [-add_addr_pool_host_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-add_addr_pool_addresses_per_server <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-add_addr_pool_prefix_length <0-128>]
 [-add_addr_pool_start_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-prefix_pool_step_per_server <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-prefix_pool_per_server <numeric>]
 [-prefix_pool_prefix_length <0-128>]
 [-prefix_pool_step <numeric>]
 [-prefix_pool_start_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-prefix_pool_custom_enable_wildcards {true|false}]
 [-prefix_pool_custom _string_as_hex_value {true|false}]
 [-prefix_pool_custom_include_in_message {ADVERTISE| REPLY|RECONFIGURE|RELAY_REPL}]
 [-prefix_pool__custom_option_value <0-255>]
 [-prefix_pool_custom_option_payload <ALPHANUMERIC>]
 [-add_prefix_pool_step_per_server <numeric>]
 [-add_prefix_pool_per_server <numeric>]
 [-add_prefix_pool_prefix_length <0-128>]
 [-add_prefix_pool_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-add_prefix_pool_start_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-dhcp6_delayed_auth_key_id <0-4294967295>]
 [-dhcp6_delayed_auth_key_value <ALPHANUMERIC>]
 [-key_value_type {ASCII|HEX}]
 [-server_custom_enable_wildcards {true|false}]
 [-server_custom_string_as_hex_value {true|false}]
 [-server_custom_ include_in_message {ADVERTISE| REPLY|RECONFIGURE|RELAY_REPL}]
 [-server_custom_option_value <0-255>]
 [-server_custom_option_payload <ALPHANUMERIC>]
 [-pvc_incr_mode {vci|vpi|both}]
 [-qinq_incr_mode {inner|outer|both}]
 [-vlan_id <0-4095>]
 [-vlan_cfi {0|1}>]
 [-vlan_id_count <1-4096>]
 [-vlan_id_mode {fixed|increment}]
 [-vlan_id_step <0-4095>]
 [-vlan_user_priority <0-7>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_cfi {0|1}>]
 [-vlan_outer_id_count <1-4096>]
 [-vlan_outer_id_mode {fixed|increment}]
 [-vlan_outer_id_step <0-4095>]
 [-vlan_outer_user_priority <0-7>]
 [-vci <0-65535>]
 [-vci_count <1-65536>]
 [-vci_step <0-65535>]
 [-vpi <0-255>]
 [-vpi_count <1-256>]
 [-vpi_step <0-255>]
 [-remote_mac <aa.bb.cc.dd.ee.ff>]
Arguments:
## The following arguments are common for DHCPv4 and DHCPv6:
 -port_handle
DHCP Server Functions
190
 Specifies the port on which to create the DHCP or DHCPv6/PD
 server when -mode is set to "create". This argument is mandatory
 only for "create" mode.
 -mode
 Specifies the action to perform on the specified port or
 DHCP or DHCPv6/PD server handle. The modes are described below:

 create - Creates a DHCP or DHCPv6/PD server on the port
 specified with the -port_handle argument. You must
 specify the -port_handle argument.
 enable- Creates a DHCP or DHCPv6/PD server on the device
 specified with the -handle argument. You must specify the
 -handle argument. Currently, In this case, the following
 options will be obsoleted when ip_version is not 6:
 -local_mac
 -remote_mac
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_id_count
 -vlan_user_priority
 -vlan_ethertype
 -ip_address
 -ip_step
 -ip_prefix_step
 -ip_prefix_length
 -ip_repeat
 -ip_gateway
 -ipv6_gateway
 -vlan_outer_id
 -vlan_outer_id_mode
 -vlan_outer_id_step
 -vlan_outer_id_count
 -vlan_outer_user_priority
 -vlan_outer_ethertype
 -qinq_incr_mode
 -vci
 -vci_step
 -vci_count
 -vpi
 -vpi_step
 -vpi_count
 -pvc_incr_mode
 modify - Changes the configuration for the DHCP or DHCPv6/PD
 server identified by the -handle argument. You must specify
 the -handle argument.
 reset - Deletes the DHCP or DHCPv6/PD server identified by the -handle
 argument. You must specify the -handle argument.

 -handle
 Specifies the DHCP or DHCPv6/PD server handle when -mode is set
 to modify or reset, or specifies the device handle when -mode is
 set to enable. This argument is mandatory for modes enable,
 modify and reset. See -mode.
 -count
 Specifies the number of emulated DHCP or DHCPv6/PD server
 devices. Possible values range from 1 to 100000. The default
 value is 1.
 -encapsulation
 Specifies the type of Layer 2 encapsulation. Possible values
 are ETHERNET_II, ETHERNET_II_VLAN, ETHERNET_II_QINQ,
 ATM_LLC_SNAP_ETHERNET_II and ATM_VC_MUX_ETHERNET_II. The default
 value is ETHERNET_II.
DHCP Server Functions
191
 ETHERNET_II - Specifies the Layer 2 encapsulation to be
 Ethernet II frame. This option is available for
 Ethernet cards.

 If you specify -vlan_* parameters, Ethernet II with
 a single VLAN tag will be enabled.

 If you specify both -vlan_* and -vlan_outer_*
 parameters, Ethernet II with two VLAN tags will
 be enabled.
 ETHERNET_II_VLAN - Ethernet II with a single VLAN tag
 ETHERNET_II_QINQ - Ethernet II with two VLAN tags.
 ATM_LLC_SNAP_ETHERNET_II - Specifies the Layer 2
 encapsulation to Ethernet over VC Multiplexed ATM
 which will encapsulate the Ethernet packets inside
 AAL5 LLC_SNAP frames. This option is available
 for ATM cards.
 Note: This option is not available for DHCPv6.
 ATM_VC_MUX_ETHERNET_II - Specifies the Layer 2
 encapsulation to Ethernet over LLC Encapsulated
 ATM which will encapsulate the Ethernet packets
 inside AAL5 VC_MUX frames. This option is
 available for ATM cards.
 Note: This option is not available for DHCPv6.
 -local_mac
 Specifies the first MAC address of the emulated DHCP server.
 -mac_addr_step
 Specifies the increment to generate additional MAC addresses for
 DHCP clients. The value must be in MAC format. The default value
 is 00:00:00:00:00:01.
 -ip_version
 Spirent Extension (for Spirent HLTAPI only).
 Defines the IP version to be used. Possible values are 4 and
 6. The default is 4.
 -qinq_incr_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the increment mode for ethernet_ii_qinq
 encapsulation. This parameter only applies to Q-in-Q
 Ethernet interfaces. Possible values are "inner", "outer"
 and "both". The default is "inner". The modes are described below:

 inner - When the number of sessions is greater than
 the inner VLAN count times the outer VLAN count, the
 inner VLAN ID is incremented first until the specified
 number of inner VLANs is exhausted, then the outer
 VLAN ID is incremented. This continues in a
 round-robin fashion until the number of
 sessions is exhausted.
 outer - When the number of sessions is greater than the
 inner VLAN count times the outer VLAN count, the outer
 VLAN ID is incremented first until the specified number
 of outer VLANs is exhausted, and then the inner VLAN ID is
 incremented. This continues in a round-robin fashion
 until the number of sessions is exhausted.
 both - When the number of sessions is greater than the
 inner VLAN count times the outer VLAN count, the
 inner VLAN ID and outer VLAN ID increment at the
 same time. This continues in a round-robin fashion
 until the number of sessions is exhausted.
DHCP Server Functions
192
 -vlan_id
 Specifies the VLAN ID of the VLAN interface. Possible values
 range from 0 to 4095. You can specify this argument when
 -encapulation is set to ETHERNET_II, ETHERNET_II_VLAN,
 ATM_LLC_SNAP_ETHERNET_II or ATM_VC_MUX_ETHERNET_II.
 -vlan_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Sets the canonical format indicator (CFI) field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default value is 1.
 -vlan_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN IDs to use when generating
 multiple VLANs. Possible values range from 1 to
 4096. The default value is 1.
 -vlan_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags when the
 router count is greater than 1. Possible values are:
 fixed - The same VLAN ID is the same for all packets.
 The fixed VLAN ID is the value of the -vlan_id
 argument.

 increment - For all packets, the VLAN tag ID increments by the
 step size specified in the -vlan_id_step argument.

 The default is increment.
 -vlan_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The step size by which the VLAN value is incremented when
 you set -vlan_id_mode to "increment". Possible values range
 from 0 to 4095. You must specify the step size when
 -vlan_id_count is greater than 1. The default is 1.

 -vlan_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority for the inner VLAN.
 Possible values range from 0 to 7. The default value is 0.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id. You can specify this
 argument when -encapulation is set to ETHERNET_II,
 ETHERNET_II_QINQ, ATM_LLC_SNAP_ETHERNET_II or
 ATM_VC_MUX_ETHERNET_II.
 -vlan_outer_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of outer VLAN IDs to use when generating
 multiple outer VLANs. Possible values range from 1 to 4096.
 The default is 1.

 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when the router count
 is greater than 1. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
DHCP Server Functions
193
 -vlan_outer_id_step argument.
 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Sets the CFI field in the outer VLAN tag for the emulated device.
 Possible values are 0 (Ethernet) and 1 (Token Ring). The default
 value is 1.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values
 range from 1 to 4094. You must specify this step when
 you specify increment for the -vlan_outer_id_mode argument.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
## The following arguments are for DHCPv4:
 -ip_address
 Specifies the first IPv4 address of the emulated DHCP
 server. The default value is 192.85.1.3.
 -ip_step
 Specifies the step value for IPv4 addresses. The default
 increment is 0.0.0.1. You can use -ip_prefix_step and
 -ip_prefix_length to replace -ip_step argument. If the
 three arguments are specified, -ip_step must be equivalent
 with the step value figured out by -ip_prefix_step and
 -ip_prefix_length.
 -ip_prefix_step
 Specifies the size of the step applied to the prefix length
 bit position. You can use it with -ip_prefix_length to
 increase the IPv4 address when you are not also using
 -ip_step. You must set ip_prefix_length if you use
 -ip_prefix_step.

 -ip_prefix_length
 Specifies the IPv4 address prefix length. The prefix length
 is the bit position at which the -ip_prefix_step is applied.
 This argument is mandatory when you use -ip_prefix_step.
 Possible values range from 0 to 32. The default value is 24.

 -ip_repeat
 Specifies the number of times to repeat the same IPv4
 address before incrementing. The default value is 1.
 -ip_gateway
 Specifies the IPv4 gateway address of the emulated DHCP
 server. The default value is 192.85.1.1.
 -lease_time
 Specifies a finite time period, in seconds, to use the
 IP address offered by the DHCP server. The actual lease
 length that the DHCP sessions will receive depends on the
 lease time configured by the DHCP server. For example, if the
 DHCP server sends a lease time of one day (its default), then
 the IP address will only be good for one day, regardless of
 the value set by Spirent HLTAPI. Possible values range
 from 10 to 4294967295. The default value is 3600.
 -ipaddress_pool
 Specifies the first IPv4 address in the DHCP server address
 pool. An address pool is a set of addresses assigned by
 Internet Assigned Numbers Authority (IANA) or an
 associated organization.
 -ipaddress_count
DHCP Server Functions
194
 Specifies the number of IPv4 addresses in the DHCP server
 address pool. The default value is 65536.
 -ipaddress_increment
 Specifies the number by which to increase each IPv4 address in the
 DHCP server address pool. The default value is 1.
 -dhcp_ack_options
 Enable or disable the DHCP ACK (Acknowledge) options of the
 emulated DHCP server. DHCP Options are tagged data items
 that carry the configuration parameters and other control
 information. The data items are stored in the "options" field
 of the DHCP messages. DHCP ACK options are tagged data
 items stored in the "options" field of the DHCP ACK
 messages. DHCP ACK messages are sent by a selected
 DHCP server to acknowledge the client DHCP REQUEST
 messages. Possible values are 0 and 1. The default value is
 0 (disabled). If enabled, you can specify DHCP ACK options
 which will be encapsulated in the DHCP ACK message sent to
 the client by the DHCP server.

 -dhcp_ack_time_offset
 Specifies DHCP ACK Option time offset (Option 2) in seconds.
 Its value can be positive or negative. The default value is
 0. You can use dhcp_ack_time_offset when
 -dhcp_ack_options is enabled.

 -dhcp_ack_router_adddress
 Specifies the DHCP ACK option router option (Option 3) IPv4
 address. You can specify multiple IPv4 addresses. The
 default value is 0.0.0.0. You can use this argument
 when -dhcp_ack_options is enabled.

 -dhcp_ack_time_server_address
 Specifies the DHCP ACK option timer server address (Option
 4). You can specify multiple IPv4 addresses. The default
 value is 0.0.0.0. You can use this argument
 when -dhcp_ack_options is enabled.
 -dhcp_ack_circuit_id
 Specifies the circuit ID sub-option (sub-option 1) of the
 DHCP ACK option relay agent (Option 82). The length is fixed
 and is eight HEX characters. You can use this argument
 when -dhcp_ack_options is enabled.

 -dhcp_ack_remote_id
 Specifies the remote ID sub-option (sub-option 2) of the DHCP
 ACK Option relay agent (Option 82). The length is fixed and
 is eight HEX characters. You must set -dhcp_ack_options to 1
 when using -dhcp_ack_remote_id.
 -dhcp_offer_options
 Enables or disables the DHCP OFFER Options of the emulated DHCP
 server. DHCP OFFER messages are sent by each DHCP
 server that receives the client DHCP DISCOVER packet to
 respond the DHCP DISCOVER packet. Possible values
 are 0 and 1. The default value is 0(disabled). If enabled,
 you can specify DHCP OFFER options which will be
 encapsulated in the DHCP OFFER message
 sent to the client by the DHCP server.

 -dhcp_offer_time_offset
 Specifies DHCP OFFER option time offset (Option 2) in
 seconds. Its value can be positive or negative. The default
 value is 0. You must set -dhcp_offer_options to 1 when
 using -dhcp_offer_time_offset.

 -dhcp_offer_router_address
 Specifies DHCP OFFER option router option (Option 3) IPv4
 address. You can specify multiple IPv4 addresses.
 The default value is 0.0.0.0. You must set 
DHCP Server Functions
195
 -dhcp_offer_options to 1 when using
 -dhcp_offer_router_adddress.

 -dhcp_offer_time_server_address
 Specifies DHCP OFFER Option timer server address(Option 4).
 You can specify multiple IPv4 addresses. The default
 value is 0.0.0.0. You must set -dhcp_offer_options to 1
 when using -dhcp_offer_time_server_address.
 -dhcp_offer_circuit_id
 Specifies the circuit ID sub-option (sub-option 1) of DHCP
 OFFER option relay agent (Option 82). The length is fixed and
 is eight HEX characters. You must set -dhcp_offer_options to
 1 when using -dhcp_offer_circuit_id.

 -dhcp_offer_remote_id
 Specifies the remote ID sub-option (sub-option 2) of DHCP
 OFFER option relay agent (Option 82). The length is fixed and
 is eight HEX characters. You must set -dhcp_offer_options to
 1 when using -dhcp_offer_remote_id.
 -pvc_incr_mode
 Spirent Extension (for Spirent HLTAPI only).
 Determines which ID to increment first. Possible values are:
 vci - Increments the Virtual Circuit Identifier (VCI) before the
 Virtual Path Identifier (VPI).

 vpi - Increments the VPI before the VCI.
 both - Increments both the VPI and VCI at the same time.
 You can specify this argument when -encapsulation is
 set to ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -vci
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VCI of the first ATM PVC pool.
 Possible values range from 0 to 65535. The default is 100.
 You can specify this argument when -encapsulation is
 set to ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -vci_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VCIs used for the emulation of
 clients over ATM interfaces. Possible values range from 1
 to 65536. The default is 1. The value of -vci_count must
 be divisible by the number of sessions. You can specify
 this argument when -encapsulation is set to
 ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -vci_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step size in which the VCI value is incremented.
 Possible values range from 0 to 65535. The default is 1.
 You can specify this argument when -encapsulation is
 set to ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -vpi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values range from 0 to 255. The default is 100.
 You can specify this argument when -encapsulation is
 set to ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -vpi_count
 Spirent Extension (for Spirent HLTAPI only).
DHCP Server Functions
196
 Specifies the number of VPIs used for the emulation of
 clients over ATM interfaces. Possible values range from 1 to
 256. The default is 1. The VPI count number must be divisible
 by the number of sessions. You can specify this
 argument when -encapsulation is set to
 ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -vpi_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step size in which the VPI value is incremented.
 Possible values range from 0 to 255. The default is 1. You can
 specify this argument when -encapsulation is
 set to ATM_LLC_SNAP_ETHERNETII or
 ATM_VC_MUX_ETHERNETII.
 -remote_mac
 Specifies the MAC address of the remote peer (DUT).
## The following arguments are for DHCPv6/PD: (You must specify -ip_version to 6)
 -gateway_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the first IPv6 gateway address for the emulated DHCPv6
 devices. The value must be in IPv6 format. The default value is
 2001::1. This argument is available when -dhcp_range_ip_type is
 set to ipv6.

 -gateway_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate IPv6 gateway addresses for
 multiple devices. The value must be in IPv6 format. The default
 is ::. This argument is available when -dhcp_range_ip_type is
 set to ipv6.

 -local_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting IPv6 address of the emulated dhcpv6
 devices. The default value is 2001::2. This argument is
 available when -dhcp_range_ip_type is set to ipv6.

 -local_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate IPv6 gateway addresses
 for multiple devices. The value must be in IPv6 format. The
 default value is 0::1. This argument is available when
 -dhcp_range_ip_type is set to ipv6.

 -local_ipv6_prefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 address prefix length. Possible values range
 from 0 to 128. The default value is 64. This argument is
 available when -dhcp_range_ip_type is set to ipv6.
 -dhcp_realm
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the DHCP realm that identifies the key used to generate
 the HMAC-MD5 value when using delayed authentication. The default
 is spirent.com. This argument is valid when -enable_delayed_auth
 is set to true.

 -server_emulation_mode
 Spirent Extension (for Spirent HLTAPI only).
 Defines the server emulation mode. Possible values are DHCPV6
 and DHCPV6_PD. The default is DHCPV6_PD.
 -enable_delayed_auth
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables delayed authentication for the Authentication
 option in the IPv6 message. Possible values are true (enable) and
 false (disable). The default is false.
 
DHCP Server Functions
197
 -enable_reconfigure_key
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables Reconfigure key authentication. Possible
 values are true (enable) and false (disable). The default is
 false.
 -preferred_lifetime
 Spirent Extension (for Spirent HLTAPI only).
 Preferred lifetime in seconds for the IPv6 addresses. The default
 value is 604800.

 -rebinding_time_percent
 Spirent Extension (for Spirent HLTAPI only).
 Specifies rebinding lease time (T2) as a percentage of Lease Time.
 Possible values range from 0.0 to 200.0. The default is 80.0.

 -reconfigure_key
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the key used for Reconfigure key authentication. The
 value is alphanumeric. The default value is spirentcom123456.

 -reconfigure_key_value_type
 Spirent Extension (for Spirent HLTAPI only).
 Defines the Reconfigure key value type. Possible values are
 ASCII and HEX. The default is ASCII.

 -reneval_time_percent
 Spirent Extension (for Spirent HLTAPI only).
 Specifies renewal lease time (T1) as a percentage of Lease Time.
 Possible values range from 0.0 to 200.0. The default is 50.
 -valid_lifetime
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the lease time for the IPv6 addresses, in seconds.
 The default value is 2592000.

 -addr_pool_step_per_server
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step value for the IPv6 addresse pool per
 server. The default value is 1. This argument is available when
 -emulation_mode is set to DHCPV6.

 -addr_pool_host_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the host addresses' step in the IPv6 address pool. The
 value must be in IPv6 format. The default is ::1. This argument
 is available when -emulation_mode is set to DHCPV6.

 -addr_pool_addresses_per_server
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of addresses in the pool. The default value
 is 1. This argument is available when -emulation_mode is set to
 DHCPv6.

 -addr_pool_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 address prefix length. Possible values range
 from 0 to 128. The default value is 64. This argument is
 available when -emulation_mode is set to DHCPV6.

 -addr_pool_start_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting address in the pool. The value must be in
 IPv6 format. The default value is 2000::1. This argument is
 available when -emulation_mode is set to DHCPV6.

 -addr_pool_custom_enable_wildcards
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable wildcard
 expansion in the Option Payload field in address pool custom
DHCP Server Functions
198
 options. The length of the list must be same as the other address
 pool custom option attributes. Possible values are true (enable)
 and false (disable). The default is false. This argument is
 available when -emulation_mode is set to DHCPV6.

 -addr_pool_custom_string_as_hex_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable value as
 hexadecimal in the address pool custom option. The length of the
 list must be same as that of lists
 -addr_pool_custom_enable_wildcards,
 -addr_pool_custom_include_in_message,
 -addr_pool_custom_option_value and
 -addr_pool_custom_option_payload. Possible values are true
 (enable) and false (disable). The default is false. This argument
 is available when -emulation_mode is set to DHCPV6.

 -addr_pool_custom_include_in_message
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of types of DHCPv6 messages that will include
 the address pool custom option. The length of the list must
 be same as that of lists -addr_pool_custom_enable_wildcards,
 -addr_pool_custom_string_as_hex_value,
 -addr_pool_custom_option_value and
 -addr_pool_custom_option_payload. Possible values are ADVERTISE,
 REPLY, RECONFIGURE and RELAY_REPL. The default is the combined
 values of ADVERTISE and Reply. This argument is available when
 -emulation_mode is set to DHCPV6.
 -addr_pool_custom_option_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Option identifiers in the address pool custom
 option. The length of the list must be same as that of lists
 -addr_pool_custom_option_enable_wildcards,
 -addr_pool_custom_include_in_message,
 -addr_pool_custom_option_option_payload, and
 -addr_pool_custom_option_string_as_hex_value. Possible values
 range from 0 to 255. The default value is 0. This argument is
 available when -emulation_mode is set to DHCPV6.

 -addr_pool_custom_option_payload
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of the Option payload strings in the address pool
 custom option. The length of the list must be same as that of
 lists -addr_pool_custom_option_enable_wildcards,
 -addr_pool_custom_option_msg_type,
 -addr_pool_custom_include_in_message and
 -addr_pool_custom_option_string_as_hex_value. The value is
 alphanumeric. This argument is available when -emulation_mode is
 set to DHCPV6.

 -add_addr_pool_step_per_server
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the additional step value for the IPv6 addresse pool
 per server. The default value is 1. This argument is available
 when -emulation_mode is set to DHCPV6.

 -add_addr_pool_host_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the additional host addresses' step in the IPv6 address
 pool. The value must be in IPv6 format. The default is ::1. This
 argument is available when -emulation_mode is set to DHCPV6.

 -add_addr_pool_addresses_per_server
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the additional number of addresses in the pool. The
 default value is 1. This argument is available when
 -emulation_mode is set to DHCPV6.

 -add_addr_pool_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
DHCP Server Functions
199
 Specifies the additional IPv6 address prefix length. Possible
 values range from 0 to 128. The default value is 64. This
 argument is available when
 -emulation_mode is set to DHCPV6.

 -add_addr_pool_start_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the additional starting address in the pool. The value
 must be in IPv6 format. The default value is 2000::1. This
 argument is available when -emulation_mode is set to DHCPV6.
 -prefix_pool_step_per_server
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the increment value for the next client IPv6 address in
 the pool. The value must be in IPv6 format. The default value is
 0:0:0:1::.

 -prefix_pool_per_server
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of prefix pools per server. The default
 value is 1.

 -prefix_pool_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length for the IPv6 clients. Possible values
 range from 0 to 128. The default value is 64.

 -prefix_pool_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the increment value for the next client address in the
 server. The default value is 1.

 -prefix_pool_start_addr
 Spirent Extension (for Spirent HLTAPI only).
 Starting network address assigned to clients. The default value
 is 2000::1.

 -prefix_pool_custom_option_enable_wildcards
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable wildcard
 expansion in the prefix custom option. The length of the list
 must be same as that of
 -prefix_pool_custom_option_string_as_hex_value,
 -prefix_pool_custom_include_in_messag,
 -prefix_pool_custom_option_value, and
 -prefix_pool_custom_option_payload Possible values are true
 (enable) and false (disable). The default is false.

 -prefix_pool_custom_option_string_as_hex_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable value as
 hexadecimal in the prefix custom option. The length of the list
 must be same as that of
 -prefix_pool_custom_option_enable_wildcards,
 -prefix_pool_custom_include_in_messag,
 -prefix_pool__custom_option_value, and
 -prefix_pool_custom_option_payload. Possible values are true
 (enable) and false (disable). The default is false.

 -prefix_pool_custom_include_in_message
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of types of DHCPv6 messages that will include
 the prefix pool custom option. The length of the list must be
 same as that of -prefix_pool_custom_option_enable_wildcards
 -prefix_pool_custom_option_string_as_hex_value,
 -prefix_pool__custom_option_value, and
 -prefix_pool_custom_option_payload. Possible values are
 ADVERTISE, REPLY, RECONFIGURE and RELAY_REPL. The default is a
 combined value of ADVERTISE and REPLY.

 -prefix_pool_custom_option_value
DHCP Server Functions
200
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of option identifiers in the prefix custom option.
 The length of the list must be same as that of lists
 -prefix_pool_custom_option_enable_wildcards,
 -prefix_pool_custom_option_msg_type,
 -prefix_pool_custom_option_option_payload, and
 -prefix_pool_custom_option_string_as_hex_value. Possible values
 range from 0 to 255. The default value is 0.

 -prefix_pool_custom_option_payload
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Option Payload strings in the prefix pool custom
 option. The length of the list must be same as that of lists
 -prefix_pool_custom_option_enable_wildcards,
 -prefix_pool_custom_option_msg_type,
 -prefix_pool_custom_include_in_message, and
 -prefix_pool_custom_option_string_as_hex_value.

 -add_prefix_pool_step_per_server
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the additional increment value for the next client IPv6
 address in the server. The default value is 1. This argument is
 available when -emulation_mode is set to DHCPV6.

 -add_prefix_pool_per_server
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the additional number of prefix pools per server. The
 default value is 1. This argument is available when
 -emulation_mode is set to DHCPV6.

 -add_prefix_pool_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the additional prefix length for the IPv6 clients.
 Possible values range from 0 to 128. The default value is 64.
 This argument is available when -emulation_mode is set to DHCPV6.

 -add_prefix_pool_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the additional increment value for the next client
 address in the pool. The default value is 0:0:0:1::. This
 argument is available when -emulation_mode is set to DHCPV6.

 -add_prefix_pool_start_addr
 Spirent Extension (for Spirent HLTAPI only).
 Starting network address assigned to clients. The default value
 is 2000::1. This argument is available when -emulation_mode is
 set to DHCPV6.
 -dhcp6_delayed_auth_key_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the list of Key identifiers used to generate the
 HMAC-MD5 values. The length of the list must be same as the
 dhcp6_delayed_auth_key_value. Possible values range from 0 to
 4294967295. The default is 1. This argument is available when
 -enable_auth is set to true and -auth_protocol is set to
 DELAYED_AUTH.

 -dhcp6_delayed_auth_key_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of keys used to generate the HMAC-MD5 value.
 The length of the list must be same as the
 -dhcp6_delayed_auth_key_id. This value is alphanumeric.
 The default value is spirent123. This argument is available when
 -enable_auth is set to true and -auth_protocol is set to
 DELAYED_AUTH.

 -server_custom_enable_wildcards
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable wildcard
 expansion for the DHCPv6 server custom option. The length
 of the list must be same as that of
DHCP Server Functions
201
 -server_custom_string_as_hex_value,
 -server_custom_include_in_message, server_custom_option_value.
 -server custom option attributes and -server_custom_option_value.
 Possible values are (enable) true and false (disable). The
 default is false.

 -server_custom_string_as_hex_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to enable or disable value as
 hexadecimal in the DHCPv6 server custom option. The length of
 the list must be same as that of -server_custom_enable_wildcards,
 -server_custom_include_in_message, -server_custom_option_value,
 and -server_custom_option_payload. Possible values are true
 (enable) and false (disable). The default is false.

 -server_custom_include_in_message
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of types of DHCPv6 messages that will include
 DHCPv6 server custom option. The length of the list must be same
 as that of lists -server_custom_enable_wildcards,
 -server_custom_string_as_hex_value, -server_custom_option_value
 and -server_custom_option_payload. Possible values are ADVERTISE,
 REPLY, RECONFIGURE, and RELAY_REPL. The default is the combined
 values of ADVERTISE and REPLY.

 -server_custom_option_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Option identifiers for the DHCPv6 server
 custom option. The length of the list must be same as that of
 lists -server_custom_option_enable_wildcards,
 -server_pool_custom_option_msg_type,
 -serverl_custom_option_option_payload, and
 -server_custom_option_string_as_hex_value. Possible values range
 from 0 to 255. The default is 0.
 -server_custom_option_payload
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Option payload strings for the DHCPv6 server
 custom option. The length of the list must be same as that of
 lists -server_custom_option_enable_wildcards,
 -server_pool_custom_option_msg_type,
 -server_custom_include_in_message, and
 -server_custom_option_string_as_hex_value.

Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -dhcp_ack_options
 -dhcp_ack_time_offset
 -dhcp_ack_router_adddress
 -dhcp_ack_time_server_address
 -dhcp_ack_circuit_id
 -dhcp_ack_remote_id
 -dhcp_offer_options
 -dhcp_offer_time_offset
 -dhcp_offer_router_address
 -dhcp_offer_time_server_address
 -dhcp_offer_circuit_id
 -dhcp_offer_remote_id
 -handle
 -pvc_incr_mode
 -qinq_incr_mode
 -vlan_id_mode
 -vlan_outer_id_mode
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
DHCP Server Functions
202
 -dhcp_ack_link_selection
 -dhcp_ack_cisco_server_id_override
 -dhcp_ack_server_id_override
 -dhcp_ignore_mac
 -dhcp_ignore_mac_mask
 -dhcp_mac_nak
 -dhcp_mac_nak_mask
 -dhcp_ack_subnet_mask
 -dhcp_offer_subnet_mask
 -dhcp_offer_link_selection
 -dhcp_offer_cisco_server_id_override
 -dhcp_offer_server_id_override
 -ipv6_gateway
 -ip_count
 -spfc_mac_mask_pool
 -spfc_mac_pattern_pool
 -spfc_mac_ipaddress_pool
 -spfc_mac_ipaddress_count
 -spfc_mac_ipaddress_increment
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 handle.port_handle
 The port handle on which DHCP or DHCPv6/PD server emulation was
 configured
 handle.dhcp_handle
 The handle that identifies the DDHCP or DHCPv6/PD server emulation
 created by the sth::emulation_dhcp_server_config function
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_dhcp_server_config function creates, modifies, or resets an
 emulated DHCP or DHCPv6/PD server. Use the -mode argument to specify the action
 to perform. (See the -mode argument description for information about the
 actions.)

 Use create mode to create the DHCP or DHCPv6/PD server on the specified port.
 The handle of the DHCP or DHCPv6/PD server host you created is returned. You can
 modify the DHCP or DHCPv6/PD server host using modify and reset modes.
 When you create an emulated DHCP or DHCPv6/PD server, use the -port_handle
 argument to specify the Spirent HLTAPI port that the emulated DHCP or DHCPv6/PD
 server will use respectively. (The port handle value is contained in the keyed
 list returned by the connect function.)
 In addition to specifying the port, you must also provide one or more of
 the following pieces of information when you create a DHCP server:
 Specific to DHCP for IPv4:
 - The IPv4 address for the emulated DHCP server (the -ip_address argument)
 - The IPv4 address for the DHCP server (DUT) to communicate with
 (the -ip_gateway argument)
 - The first IPv4 address in the DHCP server address pool
 (the -ipaddress_pool argument)
 Specific to DHCP for IPv6 (DHCPv6/PD):
 - The IPv6 address for the emulated DHCPv6/PD server (the -local_ipv6_addr
 argument)
 - The IPv6 address for the DHCPv6/PD server (DUT) to communicate with
 (the -gateway_ipv6_addr argument)
DHCP Server Functions
203
 - The first IPv6 address in the DHCPv6/PD server address pool
 (the -addr_pool_start_addr argument or the -prefix_pool_start_addr argument
 respectively)
 After you create a DHCP or DHCPv6/PD server, use the
 sth::emulation_dhcp_server_control -mode connect command for Spirent HLTAPI to
 connect the server. To reset all of the DHCP or DHCPv6/PD servers associated
 with a particular port, use the reset mode with the
 sth::emulation_dhcp_server_control function.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a DHCP server on the specified port:
 sth::emulation_dhcp_server_config \
 -count 1 \
 -port_handle port1 \
 -local_mac 00:10:94:00:00:03 \
 -ip_address 192.0.1.4 \
 -ip_step 0.0.1.0 \
 -ip_prefix_length 24 \
 -ip_prefix_step 1 \
 -ip_repeat 1 \
 -ip_gateway 192.0.1.1 \
 -ipaddress_pool 192.0.1.5 \
 -ipaddress_increment 2 \
 -ipaddress_count 30 \
 -vlan_id 200 \
 -vlan_ethertype 0x8100 \
 -lease_time 20 \
 -dhcp_ack_options 1 \
 -dhcp_ack_time_offset 12 \
 -dhcp_ack_router_adddress 10.0.0.1 \
 -dhcp_ack_time_server_address 20.0.0.1 \
 -dhcp_ack_circuit_id 12345678 \
 -dhcp_ack_remote_id 87654321 \
 -dhcp_offer_options 1 \
 -dhcp_offer_time_offset 25 \
 -dhcp_offer_router_address 10.0.0.2 \
 -dhcp_offer_time_server_address 20.0.0.2 \
 -dhcp_offer_circuit_id 22221111 \
 -dhcp_offer_remote_id 11112222
Sample output for example shown above:
 {handle {{port_handle port1} {dhcp_handle host1}}} {status 1}
 The following example configures a DHCP server over
 Ethernet over ATM on a port:
 sth::emulation_dhcp_server_config \
 -mode create \
 -count 10 \
 -encapsulation ATM_LLC_SNAP_ETHERNET_II \
 -port_handle $hltSourcePort \
 -local_mac 00:10:94:00:00:03 \
 -ip_address 192.0.1.4 \
 -ip_gateway 192.0.1.1 \
 -ipaddress_pool 192.0.1.5 \
 -ipaddress_increment 2 \
 -ipaddress_count 30 \
 -lease_time 20 \
 -vci 100 \
 -vci_step 2 \
 -vpi 200 \
 -vpi_step 3 \
 -vci_count 3 \
 -vpi_count 4 \

Sample output for example shown above:
 {handle {{port_handle port1} {dhcp_handle host1}}} {status 1}
DHCP Server Functions
204
The following example modifies the created DHCP server:
 sth::emulation_dhcp_server_config \
 -mode modify \
 -handle dhcpserverHandle1 \
 -ip_address 192.0.1.6 \
 -dhcp_ack_options 1 \
 -dhcp_ack_time_offset 10 \
 -dhcp_ack_circuit_id 87654321
Sample output for example shown above:
 {handle {dhcp_handle host1}}} {status 1}
The following example resets the specified DHCP server:
 sth::emulation_dhcp_server_config \
 -mode reset \
 -handle dhcpserverHandle1
The following example creates a new DHCPv6 server
 sth::emulation_dhcp_config \
 -mode create \
 -port_handle $hltHostPort \
 -ip_version 6\
 -server_emulation_mode DHCPV6_PD\
 -enable_delayed_auth false\
 -enable_reconfigure_key false\
 -preferred_lifetime 604800\
 -rebinding_time_percent 80.0\
 -reconfigure_key spirentcom123456\
 -reconfigure_key_value_type ASCII\
 -reneval_time_percent 50.0\
 -valid_lifetime 592000\
 -addr_pool_step_per_server 1\
 -addr_pool_host_step ::1\
 -addr_pool_addresses_per_server 1\
 -addr_pool_prefix_length 64\
 -addr_pool_start_addr 2000::1\
 -addr_pool_custom_enable_wildcards {false false}\
 -addr_pool_custom_string_as_hex_value {false false}\
 -addr_pool_custom_include_in_message {ADVERTISE REPLY}\
 -addr_pool_custom_option_value {1 2}\
 -addr_pool_custom_option_payload {none none}
The following example modifies the created DHCPv6 server
 sth::emulation_dhcp_group_config \
 -mode modify \
 -handle $hltHostPort \
 -rebinding_time_percent 70.0\
 -reneval_time_percent 50.0\
 -valid_lifetime 2992000 \
 -enable_delayed_auth true\
 -dhcp6_delayed_auth_key_id {1 2}\
 -dhcp6_delayed_auth_key_value {spirent1 spirent2} ]
 Sample output for example shown above: {status 1}
 #### HLTAPI for Python ####
 The following example creates a DHCP server on the specified port:
 device_ret0 = sth.emulation_dhcp_server_config (
 mode = 'create',
 ip_version = '4',
 encapsulation = 'ETHERNET_II',
 ipaddress_count = '251',
 ipaddress_pool = '192.85.1.4',
 ipaddress_increment = '1',
 port_handle = port_handle[0],
 count = '1',
DHCP Server Functions
205
 lease_time = '3600',
 local_mac = '00:10:94:00:00:01',
 ip_repeat = '0',
 remote_mac = '00:00:01:00:00:01',
 ip_address = '192.85.1.3',
 ip_prefix_length = '24',
 ip_gateway = '192.85.1.1',
 ip_step = '0.0.0.1');
 Sample Output: {'status': '1', 'handle': {'port_': 'port1', 'dhcp_': 'host2'}}

 The following example creates a DHCPv6 server on the specified port:
 device_ret0 = sth.emulation_dhcp_server_config (
 mode = 'create',
 ip_version = '6',
 encapsulation = 'ethernet_ii',
 prefix_pool_step = '1',
 prefix_pool_per_server= '400',
 prefix_pool_start_addr= '2000::2',
 prefix_pool_step_per_server= '::',
 prefix_pool_prefix_length= '64',
 addr_pool_host_step = '::1',
 addr_pool_addresses_per_server= '200',
 addr_pool_start_addr= '2000::1',
 addr_pool_prefix_length= '64',
 addr_pool_step_per_server= '1',
 port_handle = port_handle[0],
 preferred_lifetime = '604800',
 enable_delayed_auth = 'false',
 valid_lifetime = '2592000',
 dhcp_realm = 'spirent.com',
 enable_reconfigure_key= 'false',
 reneval_time_percent= '50',
 rebinding_time_percent= '80',
 server_emulation_mode= 'DHCPV6',
 local_ipv6_prefix_len= '64',
 local_ipv6_addr = '2001::2',
 gateway_ipv6_addr_step= '::',
 local_ipv6_addr_step= '::1',
 gateway_ipv6_addr = '2001::1',
 count = '1',
 mac_addr = '00:10:94:00:00:02',
 mac_addr_step = '00:00:00:00:00:01');
 Sample Output: {'status': '1', 'handle': {'port_': 'port1', 'dhcpv6_': 'host2'}}

 #### HLTAPI for Perl ####
 #The following example creates a DHCP server on the specified port:
 my %device_ret0 = sth::emulation_dhcp_server_config (
 mode => 'create',
 ip_version => '4',
 encapsulation => 'ETHERNET_II',
 ipaddress_count => '251',
 ipaddress_pool => '192.85.1.4',
 ipaddress_increment => '1',
 port_handle => "$hport[1]",
 count => '1',
 lease_time => '3600',
 local_mac => '00:10:94:00:00:01',
 ip_repeat => '0',
 remote_mac => '00:00:01:00:00:01',
 ip_address => '192.85.1.3',
 ip_prefix_length => '24',
 ip_gateway => '192.85.1.1',
 ip_step => '0.0.0.1');

Sample Output:
 $VAR1 = 'handle';
 $VAR2 = {
DHCP Server Functions
206
 'dhcp_handle' => 'host2',
 'port_handle' => 'port1'
 };
 $VAR3 = 'status';
 $VAR4 = '1';
 #The following example creates a DHCPv6 server on the specified port:
 my %device_ret0 = sth::emulation_dhcp_server_config (
 mode => 'create',
 ip_version => '6',
 encapsulation => 'ethernet_ii',
 prefix_pool_step => '1',
 prefix_pool_per_server=> '400',
 prefix_pool_start_addr=> '2000::2',
 prefix_pool_step_per_server=> '::',
 prefix_pool_prefix_length=> '64',
 addr_pool_host_step => '::1',
 addr_pool_addresses_per_server=> '200',
 addr_pool_start_addr=> '2000::1',
 addr_pool_prefix_length=> '64',
 addr_pool_step_per_server=> '1',
 port_handle => "$hport[1]",
 preferred_lifetime => '604800',
 enable_delayed_auth => 'false',
 valid_lifetime => '2592000',
 dhcp_realm => 'spirent.com',
 enable_reconfigure_key=> 'false',
 reneval_time_percent=> '50',
 rebinding_time_percent=> '80',
 server_emulation_mode=> 'DHCPV6',
 local_ipv6_prefix_len=> '64',
 local_ipv6_addr => '2001::2',
 gateway_ipv6_addr_step=> '::',
 local_ipv6_addr_step=> '::1',
 gateway_ipv6_addr => '2001::1',
 count => '1',
 mac_addr => '00:10:94:00:00:02',
 mac_addr_step => '00:00:00:00:00:01');
Sample Output:
 $VAR1 = 'handle';
 $VAR2 = {
 'dhcpv6_handle' => 'host2',
 'port_handle' => 'port1'
 };
 $VAR3 = 'status';
 $VAR4 = '1';
Note: Custom option with the same prefix are inter-dependent. If you specify one
 of them, you must also specify other options. The length of each option
 should be the same. For example:
 -addr_pool_custom_enable_wildcards {false false}\
 -addr_pool_custom_string_as_hex_value {false false}\
 -addr_pool_custom_include_in_message {ADVERTISE REPLY}\
 -addr_pool_custom_option_value {1 2}\
 -addr_pool_custom_option_payload {none none}
End of Procedure Header
sth::emulation_dhcp_server_relay_agent_config
Name:
 sth::emulation_dhcp_server_relay_agent_config
Purpose:
 Spirent Extension Command.
DHCP Server Functions
207
 Configures IPv4 address pools in which the IPv4 addresses are assigned to
 DHCP clients through a Relay Agent by the DHCP server.
 DHCP relay agents are used to forward DHCP packets between DHCP clients
 and DHCP servers when the clients and servers are not on the same physical
 subnet. The relay agent sets the gateway address (giaddr field of the DHCP
 packet) and, if configured, adds the relay agent information option
 (Option 82) in the packet and forwards it to the DHCP server. The reply sent
 from the server is forwarded back to the client after Option 82 is removed.
Synopsis:
 sth::emulation_dhcp_server_relay_agent_config
 -handle <server_handle>
 -mode {create | modify | delete}
 [-relay_agent_pool_count <integer>]
 [-relay_agent_pool_step <a.b.c.d>]
 [-relay_agent_ipaddress_pool <a.b.c.d>]
 [-prefix_length <0-32>]
 [-relay_agent_ipaddress_count <integer>]
 [-relay_agent_ipaddress_step <a.b.c.d>]
 [-dhcp_ack_options {0 | 1}]
 [-dhcp_ack_time_offset <integer>]
 [-dhcp_ack_router_add dress <a.b.c.d>]
 [-dhcp_ack_time_server_address <a.b.c.d>]
 [-dhcp_ack_circuit_id <hexadecimal>]
 [-dhcp_ack_remote_id <hexadecimal>]
 [-dhcp_offer_options {0 | 1}]
 [-dhcp_offer_time_offset <integer>]
 [-dhcp_offer_router_address <a.b.c.d>]
 [-dhcp_offer_time_server_address <a.b.c.d>]
 [-dhcp_offer_circuit_id <hexadecimal>]
 [-dhcp_offer_remote_id <hexadecimal>]
Arguments:
 -handle
 Specifies the host handle for the DHCP server. When you set
 the -mode argument to create, the value of this argument is
 returned from sth::emulation_dhcp_server_config. When you
 set the -mode argument to modify or delete, the value of
 this argument indicates the handle(s) of the created DHCP
 server relay agent pool(s) returned from
 sth::emulation_dhcp_server_relay_agent_config. For the
 modify or delete mode, the value of this argument can be a
 list of handles. This argument is mandatory.
 -mode
 Specifies the action to be performed. This argument is
 mandatory. Possible values are listed below:
 create - Creates IPv4 address pools for DHCP server to be
 assigned to clients through the relay agent.
 modify - Modifies the created IPv4 address pools.
 delete - Deletes the created IPv4 address pools.
 -relay_agent_pool_count
 Specifies the number of address pools to be created.
 The default value is 1.
 -relay_agent_pool_step
 Specifies the increment used to generate the IPv4 addresses
 of IPv4 address pools when the count
 (-relay_agent_pool_count) is larger than 1. The values of
 this argument must be in IPv4 format. The default
 value is 1.0.0.0.
 -relay_agent_ipaddress_pool
 Specifies the starting IP address for address pools.
 The default value is 192.0.1.0.
DHCP Server Functions
208
 -prefix_length
 Specifies the IPv4 address prefix length of the address in
 the pool. Possible values range from 0 to 32. The default
 value is 24.

 -relay_agent_ipaddress_count
 Defines the number of IPv4 addresses that can be assigned
 to clients in a pool. The largest value of this argument
 equals the number of remaining IPv4 addresses after the
 addresses that have been assigned are taken from the total
 number of IPv4 addresses in a pool. The total number of IPv4
 addresses in a pool depends on the value of the -prefix_length
 argument. Possible values range from 0 to the number of
 remaining IPv4 addresses in a pool. The default value is 24.
 -relay_agent_ipaddress_step
 Defines the increment used to generate IPv4 addresses in
 an address pool. The default value is 0.0.0.1.
 -dhcp_ack_options
 Enables or disables the DHCP ACK Options. Possible
 values of this argument are 1 (enable) and 0 (disable). When
 this argument is set to 1, you can configure the DHCP ACK
 Options by specifying the arguments below:
 -dhcp_ack_time_offset
 -dhcp_ack_router_adddress
 -dhcp_ack_time_server_address
 -dhcp_ack_circuit_id
 -dhcp_ack_remote_id
 The default value is 0.
 -dhcp_ack_time_offset
 Specifies the DHCP ACK Option time offset (Option 2) in seconds.
 Its value can be positive or negative. The default value is
 0. You can specify this argument when the -dhcp_ack_options
 argument is set to 1.
 -dhcp_ack_router_adddress
 Specifies the DHCP ACK option router option (Option 3) IPv4
 address. You can specify multiple IPv4 addresses. The
 default value is 0.0.0.0. You can specify this argument
 when the -dhcp_ack_options argument is set to 1.
 -dhcp_ack_time_server_address
 Specifies the DHCP ACK option timer server address (Option
 4). You can specify multiple IPv4 addresses. The default
 value is 0.0.0.0. You can specify this argument
 when the -dhcp_ack_options argument is set to 1.
 -dhcp_ack_circuit_id
 Specifies the circuit ID sub-option (sub-option 1) of the
 DHCP ACK option relay agent information option (Option 82).
 The intended use for the circuit ID sub-option is to relay DHCP
 responses back to the proper circuit. The
 value of this argument must be eight hexadecimal characters.
 You can specify this argument when the -dhcp_ack_options
 argument is set to 1.
 -dhcp_ack_remote_id
 Specifies the Remote ID sub-option (sub-option 2) of the DHCP
 ACK Option relay agent information option (Option 82). The
 Remote ID sub-option may be added by DHCP relay agents
 which terminate switched or permanent circuits and have
 mechanisms to identify the remote host end of the circuit.
 The value of this argument must be eight hexadecimal
 characters. You can specify this argument when the
 -dhcp_ack_options argument is set to 1.
 -dhcp_offer_options
DHCP Server Functions
209
 Enables or disables DHCP OFFER Options of the emulated DHCP
 server. Possible values are 0 and 1. The default value is
 0 (disabled). When this argument is enabled, you can specify the
 DHCP OFFER options below:
 -dhcp_offer_time_offset
 -dhcp_offer_router_address
 -dhcp_offer_time_server_address
 -dhcp_offer_circuit_id
 -dhcp_offer_remote_id
 -dhcp_offer_time_offset
 Specifies the DHCP OFFER option time offset (Option 2) in
 seconds. Its value can be positive or negative. The default
 value is 0. You can specify this argument when the
 -dhcp_offer_options argument is enabled.
 -dhcp_offer_router_address
 Specifies the router option (Option 3) of the DHCP OFFER
 options. The router option defines a list of IPv4
 addresses for routers on the client's subnet. You can
 specify a list of IPv4 addresses. The default value is
 0.0.0.0. You can specify this argument when
 -dhcp_offer_options is enabled.
 -dhcp_offer_time_server_address
 Specifies the time server option (Option 4) of the DHCP
 OFFER Options. The time server option defines a list of
 IPv4 addresses for the time servers available to the client.
 You can specify this argument when -dhcp_offer_options is
 enabled.
 -dhcp_offer_circuit_id
 Configures the circuit ID sub-option of the relay agent
 option (82). The value of this argument must be eight
 hexadecimal characters. This argument is available when
 -dhcp_offer_options is enabled.

 -dhcp_offer_remote_id
 Configures the remote ID sub-option of relay agent option
 (Option 82). The value of this argument must be eight
 hexadecimal characters. This argument is available when
 -dhcp_offer_options is enabled.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are not supported by the Save as HLTAPI
 function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -dhcp_ack_options
 -dhcp_ack_time_offset
 -dhcp_ack_router_add dress
 -dhcp_ack_time_server_address
 -dhcp_ack_circuit_id
 -dhcp_ack_remote_id
 -dhcp_offer_options
 -dhcp_offer_time_offset
 -dhcp_offer_router_address
 -dhcp_offer_time_server_address
 -dhcp_offer_circuit_id
 -dhcp_offer_remote_id
 -relay_agent_pool_count
 -relay_agent_pool_step
 -vlan_id_count
 -vlan_outer_id_count
Cisco-specific Arguments:
 None
Return Values:
DHCP Server Functions
210
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 pool_handles Handle(s) of the created DHCP server address
 pool(s).
Description:
 The sth::emulation_dhcp_server_relay_agent_config creates, modifies,
 or deletes IPv4 address pools where the IPv4 addresses are assigned to
 DHCP clients through a Relay Agent. Use the -mode argument to specify the
 action to perform. (See the -mode argument description for
 information about the actions.)

 Use -mode create to create address pools on the specified DHCP server.
 The handle of the DHCP server host is returned from
 sth::emulation_dhcp_server_config. You can modify or delete the address
 pools you created with the modify or delete mode.
 When you create multiple emulated address pools where addresses are
 assigned to DHCP clients through a relay agent, use the
 -relay_agent_pool_step argument and -relay_agent_ipaddress_pool
 argument to specify the starting address and the increment step.
 You can use the -dhcp_ack_options argument and the -dhcp_offer_options
 argument to insert specific options in ACK or OFFER messages sent to the
 DHCP relay agent by the DHCP server.
Examples:
 #### HLTAPI for Tcl ####
 To create a DHCP server relay agent address pool:
 # step1: Config DHCP server host
 set returnedString [ sth::emulation_dhcp_server_config \
 -mode create \
 -port_handle port1 \
 -count 1 \
 -local_mac 00:10:94:00:00:03 \
 -ip_address 100.1.0.8\
 -ip_gateway 100.1.0.1 \
 -ipaddress_pool 100.1.0.9 \
 -lease_time 60]
 keylget returnedString handle.dhcp_handle dhcpServer
 # step2: create two relay agent address pools
 set returnedString [ sth::emulation_dhcp_server_relay_agent_config \
 -handle $dhcpServer \
 -mode create \
 -relay_agent_pool_count 2 \
 -relay_agent_pool_step 1.0.0.0 \
 -relay_agent_ipaddress_pool 110.0.0.5 \
 -relay_agent_ipaddress_count 50 \
 -relay_agent_ipaddress_step 0.0.0.1 \
 -dhcp_ack_options 1 \
 -dhcp_ack_time_offset 8000]
 The example above creates two address pools on the DHCP server named
 $dhcpServer. The number of IPv4 addresses in each address pool is 50.
 The IP address of the first address pool is 110.0.0.5. The IP address of the
 second address pool is 111.0.0.5. The IPv4 addresses in the first address
 pool are listed below:
 110.0.0.5
 110.0.0.6
 110.0.0.7
 ...
 110.0.0.55
DHCP Server Functions
211
 The IPv4 addresses in the second address pool are listed below:

 111.0.0.5
 111.0.0.6
 111.0.0.7
 ...
 111.0.0.55
Sample Input: See Examples.
Sample Output:
 {pool_handles {dhcpv4serverpoolconfig1 dhcpv4serverpoolconfig2}}
 {status 1}
 #### HLTAPI for Python ####
 # step1: Config DHCP server host
 device_ret0 = sth.emulation_dhcp_server_config (
 mode = 'create',
 ip_version = '4',
 encapsulation = 'ETHERNET_II',
 ipaddress_count = '251',
 ipaddress_pool = '192.85.1.4',
 ipaddress_increment = '1',
 port_handle = port_handle[0],
 count = '1',
 lease_time = '3600',
 local_mac = '00:10:94:00:00:01',
 ip_repeat = '0',
 remote_mac = '00:00:01:00:00:01',
 ip_address = '192.85.1.3',
 ip_prefix_length = '24',
 ip_gateway = '192.85.1.1',
 ip_step = '0.0.0.1');
 dhcpserver_handle = device_ret0['handle.dhcp_handle']

 # step2: create a relay agent address pool
 device_ret0_agent0 = sth.emulation_dhcp_server_relay_agent_config (
 mode = 'create',
 handle = dhcpserver_handle,
 relay_agent_ipaddress_count= '255',
 relay_agent_ipaddress_pool= '192.0.1.0',
 relay_agent_ipaddress_step= '0.0.0.1',
 prefix_length = '24');
Sample Output:
 {'status': '1', 'pool_handles': 'dhcpv4serverpoolconfig1'}
 #### HLTAPI for Perl ####
 # step1: Config DHCP server host
 my %device_ret0 = sth::emulation_dhcp_server_config (
 mode => 'create',
 ip_version => '4',
 encapsulation => 'ETHERNET_II',
 ipaddress_count => '251',
 ipaddress_pool => '192.85.1.4',
 ipaddress_increment => '1',
 port_handle => "$hport[1]",
 count => '1',
 lease_time => '3600',
 local_mac => '00:10:94:00:00:01',
 ip_repeat => '0',
 remote_mac => '00:00:01:00:00:01',
 ip_address => '192.85.1.3',
 ip_prefix_length => '24',
 ip_gateway => '192.85.1.1',
 ip_step => '0.0.0.1');
DHCP Server Functions
212

 my $dhcpserver_handle = join( " ", $device_ret0{handle}{dhcp_handle});
 # step2: create a relay agent address pool
 my %device_ret0_agent0 = sth::emulation_dhcp_server_relay_agent_config (
 mode => 'create',
 handle => "$dhcpserver_handle",
 relay_agent_ipaddress_count=> '255',
 relay_agent_ipaddress_pool=> '192.0.1.0',
 relay_agent_ipaddress_step=> '0.0.0.1',
 prefix_length => '24');
Sample Output:
 $VAR1 = 'pool_handles';
 $VAR2 = 'dhcpv4serverpoolconfig1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_dhcp_server_control
Name:
 sth::emulation_dhcp_server_control
Purpose:
 Connects, renews, or resets DHCP or DHCPv6/PD server(s) on the specified ports
 or the DHCP or DHCPv6/PD handles/servers respectively.
Synopsis:
 sth::emulation_dhcp_server_control
 -action {connect|renew|reset} {-port_handle <port_handle> | -dhcp_handle <server_handle>}
 [-ip_version {4|6}]
Arguments:
 -dchp_handle
 Identifies the DHCP or DHCPv6/PD server handles on which to
 connect, renew, or reset the server. The selected -action value
 applies only to the specified DHCP or DHCPv6/PD handles
 respectively. You must specify either -dhcp_handle or
 -port_handle, but not both.

 -action
 Specifies the action to be taken on the specified DHCP or
 DHCPv6/PD handles specified by the -dhcp_handle argument, or on
 the port handle specified by the -port_handle argument. Possible
 values are connect, renew, or reset. This argument is mandatory.
 connect - Connects the DHCP or DHCPv6/PD server on the specified
 port or DHCP or DHCPv6/PD handle.
 renew - Reconnects the DHCP or DHCPv6/PD server on the
 specified port or DHCP or DHCPv6/PD handle
 respectively.
 reset - Resets the DHCP or DHCPv6/PD server on the specified
 port or DHCP or DHCPv6/PD handle respectively.
 -port_handle
 Specifies the port on which the DHCP or DHCPv6/PD server will
 connect, renew, and reset. You must specify either -dhcp_handle
 or -port_handle, but not both.
DHCP Server Functions
213
 -ip_version
 Spirent Extension (for Spirent HLTAPI only).
 Defines the IP version to be used. Possible values are 4 and
 6. The default is 4.
Cisco-specific Arguments:
 None.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_dhcp_server_control function controls the DHCP or DHCPv6/PD
 server on the specified ports. You can use this function to perform several
 actions:
 - connecting a DHCP or DHCPv6/PD server,
 - renewing a DHCP or DHCPv6/PD server, and
 - resetting a DHCP or DHCPv6/PD server.
 When you call the sth::emulation_dhcp_server_control function, you specify
 either a DHCP or DHCPv6/PD server handle or a port handle. Spirent HLTAPI
 applies the specified action to the specified DHCP or DHCPv6/PD server or to all
 of the emulated DHCP or DHCPv6/PD servers associated with the specified port.

Examples:
 #### HLTAPI for Tcl ####
 DHCP for IPv4:
 To connect the specified DHCP server:
 sth::emulation_dhcp_server_control \
 -action connect \
 -dhcp_handle dhcpserverHandle
 To connect all DHCP servers on the specified port:
 sth::emulation_dhcp_server_control \
 -action connect \
 -port_handle port1
 To renew the specified DHCP server:
 sth::emulation_dhcp_server_control \
 -action renew \
 -dhcp_handle dhcpserverHandle
 To renew all DHCP servers on the specified port:
 sth::emulation_dhcp_server_control \
 -action renew \
 -port_handle port1
 To reset the specified DHCP server:
 sth::emulation_dhcp_server_control \
 -action reset \
 -dhcp_handle dhcpserverHandle
 To reset all DHCP servers on the specified port:
 sth::emulation_dhcp_server_control \
 -action renew \
 -port_handle port1

 DHCPv6/PD:
 To connect the specified DHCPv6/PD server:
 sth::emulation_dhcp_server_control \
 -action connect \
 -dhcp_handle dhcpserverHandle \
 -ip_version 6
 To connect all DHCPv6/PD servers on the specified port:
DHCP Server Functions
214
 sth::emulation_dhcp_server_control \
 -action connect \
 -port_handle port1 \
 -ip_version 6
 To renew the specified DHCPv6/PD server:
 sth::emulation_dhcp_server_control \
 -action renew \
 -dhcp_handle dhcpserverHandle \
 -ip_version 6
 To renew all DHCPv6/PD servers on the specified port:
 sth::emulation_dhcp_server_control \
 -action renew \
 -port_handle port1 \
 -ip_version 6
 To reset the specified DHCPv6/PD server:
 sth::emulation_dhcp_server_control \
 -action reset \
 -dhcp_handle dhcpserverHandle \
 -ip_version 6
 To reset all DHCPv6/PD servers on the specified port:
 sth::emulation_dhcp_server_control \
 -action renew \
 -port_handle port1 \
 -ip_version 6
 Sample Output for above examples: {status 1}
 #### HLTAPI for Python ####
 To connect all DHCP servers on the specified port:
 results_ret1 = sth.emulation_dhcp_server_stats (
 port_handle = port_handle[0],
 action = 'COLLECT',
 ip_version = '4');

 To connect all DHCPv6 servers on the specified port:
 ctrl_ret1 = sth.emulation_dhcp_server_control (
 port_handle = port_handle[0],
 action = 'connect',
 ip_version = '6');
 Sample Output:
 {'status': '1'}
 #### HLTAPI for Perl ####
 To connect all DHCP servers on the specified port:
 my %ctrl_ret1 = sth::emulation_dhcp_server_control (
 port_handle => "$hport[1]",
 action => 'connect',
 ip_version => '4');

 To connect all DHCPv6 servers on the specified port:
 my %ctrl_ret1 = sth::emulation_dhcp_server_control (
 port_handle => "$hport[1]",
 action => 'connect',
 ip_version => '6');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None
End of Procedure Header
DHCP Server Functions
215
sth::emulation_dhcp_server_stats
Name:
 sth::emulation_dhcp_server_stats
Purpose:
 Returns statistics of the DHCPv6/PD server.
Synopsis:
 sth::emulation_dhcp_server_stats
 -action {collect|clear}
 [-dhcp_handle <dhcp_server_handle>]
 [-port_handle <port_handle>]
 [-ip_version {4|6}]
Arguments:
 -dhcp_handle
 Specifies the DHCP or DHCPv6/PD server handle from which to
 extract the server statistics data. You must specify
 -dhcp_handle or -port_handle, but not both.
 -action
 Specifies the action of the statistics for the specified port or
 DHCP or DHCPv6/PD server. This argument is mandaotry. Possible
 values are collect or clear.
 collect - Retrieves the statistics from the specified port
 or DHCP or DHCPv6/PD server
 clear - Removes the statistics from the specified port or
 DHCP or DHCPv6/PD server
 -port_handle
 Specifies the ports from which to extract DHCP or DHCPv6/PD
 server statistics data. You must specify either -dchp_handle
 or -port_handle, but not both.
 -ip_version
 Spirent Extension (for Spirent HLTAPI only).
 Defines the IP version to be used. Possible values are 4 and
 6. The default is 4.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null.
 aggregate statistics
 Provided when -port_handle is used. Contains the
 aggregate statistics from all the DHCP or DHCPv6/PD
 handles/servers on the specified port_handle.

 server specific statistics
 Provided when -dhcp_server is used. Contains the
 statistics from the specified DHCP or DHCPv6/PD handle/server.
 The following keys are returned when you specify -port_handle:
 DHCP for IPv4:
 aggregate.<port_handle>.rx.discover
 aggregate.<port_handle>.rx.offer (not supported)
 aggregate.<port_handle>.rx.request
 aggregate.<port_handle>.rx.decline
DHCP Server Functions
216
 aggregate.<port_handle>.rx.ack (not supported)
 aggregate.<port_handle>.rx.nak (not supported)
 aggregate.<port_handle>.rx.release
 aggregate.<port_handle>.rx.inform
 aggregate.<port_handle>.rx.force_renew (not supported)
 aggregate.<port_handle>.rx.relay_agent (not supported)
 aggregate.<port_handle>.tx.discover (not supported)
 aggregate.<port_handle>.tx.offer
 aggregate.<port_handle>.tx.request (not supported)
 aggregate.<port_handle>.tx.decline (not supported)
 aggregate.<port_handle>.tx.ack
 aggregate.<port_handle>.tx.nak
 aggregate.<port_handle>.tx.release (not supported)
 aggregate.<port_handle>.tx.inform (not supported)
 aggregate.<port_handle>.tx.force_renew (not supported)
 aggregate.<port_handle>.allocated.ip (not supported)
 DHCP for IPv6: Spirent Extension (for Spirent HLTAPI only).
 ipv6.aggregate.<port_handle>.current_bound_count
 ipv6.aggregate.<port_handle>.rx_confirm_count
 ipv6.aggregate.<port_handle>.rx_decline_count
 ipv6.aggregate.<port_handle>.rx_info_request_count
 ipv6.aggregate.<port_handle>.rx_rebind_count
 ipv6.aggregate.<port_handle>.rx_release_count
 ipv6.aggregate.<port_handle>.rx_renew_count
 ipv6.aggregate.<port_handle>.rx_request_count
 ipv6.aggregate.<port_handle>.rx_soilicit_count
 ipv6.aggregate.<port_handle>.total_bound_count
 ipv6.aggregate.<port_handle>.total_expired_count
 ipv6.aggregate.<port_handle>.total_release_count
 ipv6.aggregate.<port_handle>.total_renewed_count
 ipv6.aggregate.<port_handle>.tx_advertise_count
 ipv6.aggregate.<port_handle>.tx_reconfigure_count
 ipv6.aggregate.<port_handle>.tx_reconfigure_rebind_count
 ipv6.aggregate.<port_handle>.tx_reconfigure_renew_count
 ipv6.aggregate.<port_handle>.tx_reply_count
 The following keys are returned when you specify -dhcp_handle:
 DHCP for IPv4:
 dhcp_handle.<dhcp_handle>.rx.discover
 dhcp_handle.<dhcp_handle>.rx.offer (not supported)
 dhcp_handle.<dhcp_handle>.rx.request
 dhcp_handle.<dhcp_handle>.rx.decline
 dhcp_handle.<dhcp_handle>.rx.ack (not supported)
 dhcp_handle.<dhcp_handle>.rx.nak (not supported)
 dhcp_handle.<dhcp_handle>.rx.release
 dhcp_handle.<dhcp_handle>.rx.inform
 dhcp_handle.<dhcp_handle>.rx.force_renew (not supported)
 dhcp_handle.<dhcp_handle>.rx.relay_agent (not supported)
 dhcp_handle.<dhcp_handle>.tx.discover (not supported)
 dhcp_handle.<dhcp_handle>.tx.offer
 dhcp_handle.<dhcp_handle>.tx.request (not supported)
 dhcp_handle.<dhcp_handle>.tx.decline (not supported)
 dhcp_handle.<dhcp_handle>.tx.ack
 dhcp_handle.<dhcp_handle>.tx.nak
 dhcp_handle.<dhcp_handle>.tx.release (not supported)
 dhcp_handle.<dhcp_handle>.tx.inform (not supported)
 dhcp_handle.<dhcp_handle>.tx.force_renew (not supported)
 dhcp_handle.<dhcp_handle>.allocated.ip (not supported)
 DHCP for IPv6: Spirent Extension (for Spirent HLTAPI only).
 ipv6.dhcp_handle.<dhcp_handle>.current_bound_count
 ipv6.dhcp_handle.<dhcp_handle>.rx_confirm_count
 ipv6.dhcp_handle.<dhcp_handle>.rx_decline_count
 ipv6.dhcp_handle.<dhcp_handle>.rx_info_request_count
 ipv6.dhcp_handle.<dhcp_handle>.rx_rebind_count
 ipv6.dhcp_handle.<dhcp_handle>.rx_release_count
 ipv6.dhcp_handle.<dhcp_handle>.rx_renew_count
 ipv6.dhcp_handle.<dhcp_handle>.rx_request_count
 ipv6.dhcp_handle.<dhcp_handle>.rx_soilicit_count
 ipv6.dhcp_handle.<dhcp_handle>.total_bound_count
DHCP Server Functions
217
 ipv6.dhcp_handle.<dhcp_handle>.total_expired_count
 ipv6.dhcp_handle.<dhcp_handle>.total_release_count
 ipv6.dhcp_handle.<dhcp_handle>.total_renewed_count
 ipv6.dhcp_handle.<dhcp_handle>.tx_advertise_count
 ipv6.dhcp_handle.<dhcp_handle>.tx_reconfigure_count
 ipv6.dhcp_handle.<dhcp_handle>.tx_reconfigure_rebind_count
 ipv6.dhcp_handle.<dhcp_handle>.tx_reconfigure_renew_count
 ipv6.dhcp_handle.<dhcp_handle>.tx_reply_count
Description:
 The sth::emulation_dhcp_server_info function provides statistics
 about either the specified DHCP or DHCPv6/PD server handles or ports.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples:
 #### HLTAPI for Tcl ####
 DHCP for IPv4:
 The following example collects statistics on the specified port:

 ::sth::emulation_dhcp_server_stats
 -action collect \
 -port_handle port1
 Sample output for example shown above:
 {dhcp_server_state UP} {aggregate {{port1 {{tx {{nak 0}
 {offer 0} {ack 0}}} {rx {{decline 0} {release 0}
 {request 0} {inform 0} {discover 0}}}}}}} {status 1}
 The following example collects statistics on the specified DHCP server:
 ::sth::emulation_dhcp_server_stats
 -action collect \
 -dhcp_handle host1
 Sample output for example shown above:
 {dhcp_server_state UP} {dhcp_handle {{host1 {{tx {{nak 0}
 {offer 0} {ack 0}}} {rx {{decline 0} {release 0}
 {request 0} {inform 0} {discover 0}}}}}}} {status 1}
 The following example clears statistics on the specified port:
 ::sth::emulation_dhcp_server_stats
 -action clear \
 -port_handle host1
 Sample output for example shown above: {status 1}
 The following example clears statistics on the specified DHCP server:
 ::sth::emulation_dhcp_server_stats
 -action clear \
 -dhcp_handle host1
 Sample output for example shown above: {status 1}
 DHCP for IPv6:
 The following example collects statistics on the specified port:

 ::sth::emulation_dhcp_server_stats
 -action collect \
 -port_handle port1 \
 -ip_version 6
 Sample output for example shown above:
 {ipv6 {{aggregate {{port1 {{rx_soilicit_count 1} {tx_advertise_count 1}
DHCP Server Functions
218
 {rx_release_count 0} {total_bound_count 1} {tx_reconfigure_renew_count 0}
 {total_expired_count 0} {total_renewed_count 0} {rx_decline_count 0}
 {rx_rebind_count 0} {current_bound_count 1} {rx_renew_count 0} {rx_request_count 1}
 {tx_reconfigure_count 0} {total_release_count 0} {rx_info_request_count 0}
 {tx_reply_count 1} {tx_reconfigure_rebind_count 0} {rx_confirm_count 0}}}}}}}
 The following example clears statistics on the specified port:
 ::sth::emulation_dhcp_server_stats
 -action clear \
 -port_handle host1 \
 -ip_version 6
 Sample output for example shown above: {status 1}
 The following example clears statistics on the specified DHCPv6/PD server:
 ::sth::emulation_dhcp_server_stats
 -action clear \
 -dhcp_handle host1 \
 -ip_version 6
 Sample output for example shown above: {status 1}
 #### HLTAPI for Python ####
 The following example collects statistics on the specified port:
 DHCP for IPv4:
 results_ret1 = sth.emulation_dhcp_server_stats (
 port_handle = port_handle[0],
 action = 'COLLECT',
 ip_version = '4');

 Sample Output:
 {'aggregate': {'port1': {'rx': {'release': '0', 'decline': '0', 'request': '0',
 'discover': '0', 'inform': '0'}, 'tx': {'ack': '0', 'nak': '0', 'offer': '0'}}},
 'status': '1', 'dhcp_server_state': 'NONE'}
 DHCP for IPv6:
 results_ret1 = sth.emulation_dhcp_server_stats (
 port_handle = port_handle[0],
 action = 'COLLECT',
 ip_version = '6');

 Sample Output:
 {'status': '1', 'dhcp_server_state': 'NONE', 'ipv6': {'aggregate': {'port1':
 {'rx_request_count': '0', 'rx_decline_count': '0', 'tx_advertise_count': '0',
 'rx_renew_count': '0', 'tx_reconfigure_count': '0', 'rx_soilicit_count': '0',
 'total_bound_count': '0', 'rx_release_count': '0', 'total_expired_count': '0',
 'tx_reply_count': '0', 'rx_info_request_count': '0', 'total_release_count': '0',
 'tx_reconfigure_renew_count': '0', 'current_bound_count': '0',
 'rx_rebind_count': '0', 'rx_confirm_count': '0', 'tx_reconfigure_rebind_count':
 '0', 'total_renewed_count': '0'}}}}

 #### HLTAPI for Perl ####
 The following example collects statistics on the specified port:
 DHCP for IPv4:
 my %results_ret1 = sth::emulation_dhcp_server_stats (
 port_handle => "$hport[1]",
 action => 'COLLECT',
 ip_version => '4');

 Sample output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'aggregate';
 $VAR4 = {
 'port1' => {
 'tx' => {
 'nak' => '0',
DHCP Server Functions
219
 'ack' => '0',
 'offer' => '0'
 },
 'rx' => {
 'request' => '0',
 'discover' => '0',
 'release' => '0',
 'inform' => '0',
 'decline' => '0'
 }
 }
 };
 $VAR5 = 'dhcp_server_state';
 $VAR6 = 'NONE';

 DHCP for IPv6:
 my %results_ret1 = sth::emulation_dhcp_server_stats (
 port_handle => "$hport[1]",
 action => 'COLLECT',
 ip_version => '6');

 Sample output:
 $VAR1 = 'ipv6';
 $VAR2 = {
 'aggregate' => {
 'port1' => {
 'tx_reconfigure_rebind_count' => '0',
 'rx_decline_count' => '0',
 'rx_request_count' => '0',
 'current_bound_count' => '0',
 'total_expired_count' => '0',
 'tx_reconfigure_renew_count' => '0',
 'total_renewed_count' => '0',
 'tx_reconfigure_count' => '0',
 'rx_soilicit_count' => '0',
 'total_release_count' => '0',
 'rx_info_request_count' => '0',
 'rx_confirm_count' => '0',
 'rx_release_count' => '0',
 'total_bound_count' => '0',
 'tx_reply_count' => '0',
 'rx_renew_count' => '0',
 'rx_rebind_count' => '0',
 'tx_advertise_count' => '0'
 }
 }
 };
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'dhcp_server_state';
 $VAR6 = 'NONE';

Sample Input: See Examples.
Sample Output: See Examples.
Notes:
 None
End of Procedure Header
EFM Functions
220
EFM Functions
Functions:
sth::emulation_efm_config
sth::emulation_efm_control
sth::emulation_efm_stat
sth::emulation_efm_config
Name:
 sth::emulation_efm_config
Purpose:
 Creates, modifies, deletes, or resets an emulated EFM router for a given
 port.
 Ethernet in the First Mile (EFM) technology is a transparent extension of
 Ethernet-based LANs into wide area networks. No conversion of packet
 formats is required when transmitting between the LAN and WAN. EFM
 technology enables service providers to build and provision cost-effective,
 high-performance broadband access to their customers, providing
 businesses and residences with voice, video, and data over a single gigabit
 Ethernet connection.
 EFM supports remote failure indication, remote loopback, link monitoring,
 and management channel. The emulated router and its peer transmit packets
 periodically over a path between the devices. If a device stops receiving
 packets for long enough, the link is assumed to be broken.
Synopsis:
 sth::emulation_efm_config
 -mode {create|modify|destroy|reset}
 -port_handle <port_handle>
 [-critical_event {0|1}]
 [-dying_gasp {0|1}]
 [-error_frame_period_threshold <0-65535 >]
 [-error_frame_period_window <1-65535>]
 [-error_frame_threshold <0-65535 >]
 [-error_frame_summary_threshold <0-65535>]
 [-error_frame_summary_window <100-9000>]
 [-error_frame_window <10-600>]
 [-error_symbol_period_threshold <0-65535 >]
 [-error_symbol_period_window <1-65535>]
 [-link_events {0|1}]
 [-link_fault {0|1}]
 [-link_notification_events_per_interval <1-10>]
 [-link_notifications_interval]
 [-osi_enable {0|1}]
 [-osi_value]
 [-osi_oui <000000-FFFFFF>]
 [-organization_specific_event_value]
 [-organization_specific_event_oui <000000-FFFFFF>]
 [-mac_local <aa:bb:cc:dd:ee:ff>]
 [-oam_mode {active|passive}]
 [-oui_value <6 HEX chars>]
 [-remote_loopback {0|1}]
 [-unidirectional {0|1}]
 [-variable_retrieval {0|1}]
 [-vsi_value <8 HEX chars>]
 [-variable_response_tx {0|1}]
 [-pdu_tx {0|1}]
 [-loopback_response_tx {0|1}]
 [-max_pdu_size <4-2047>]
 [-oam_version <0-255>]
EFM Functions
221
 [-override_local_satisfied {false|true|default}]
 [-override_remote_stable {false|true|default}]
 [-override_revision {0|1}]
 [-revision <0-65535>]
 [-error_frame_count]
 [-error_frame_period_count]
 [-error_frame_summary_count]
 [-error_symbol_period_count]
 [-link_notifications_ose_oui]
 [-link_notifications_ose_value]
 [-loopback_response_timer <1-10>]
 [-lost_link_timer {2 - 90}]
 [-pdu_timer <1-10>]
 [-variable_response_timer <1-10>]
 [-variable_response_branch]
 [-variable_response_data]
 [-variable_response_indication {0|1}]
 [-variable_response_leaf]
 [-variable_response_width]
 [-variable_request_branch]
 [-variable_request_leaf]
 [-vlan _id <0-4095>]
 [-vlan_id_mode { fixed | increment }]
 [-vlan_id_step <1-4094>]
 [-vlan_user_priority <0-7>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_mode { fixed | increment }]
 [-vlan_outer_id_step <1-4094>]
 [-vlan_outer_user_priority <0-7>]
Arguments:

 -critical_event
 Send Critical Event messages to signal the remote EFM
 router whether an unspecified critical event has occurred.
 Possible values are 0 and 1. The default is 0.
 -dying_gasp
 Send Dying Gasp messages to signal the remote EFM router
 whether an unrecoverable local fault has occurred.
 Possible values are 0 and 1. The default is 0.
 -error_frame_period_threshold
 The number of errored frames in the period must be equal to
 or greater than this value for Errored Frame Period Events
 to be generated. Possible values range from 0 to 65535. The
 default value is 30.
 -error_frame_period_window
 Defines the window, measured in received frames, within
 which the number of errored frames exceeds the threshold
 defined by the -error_frame_period_threshold argument.
 Possible values range from 1 to 65535. The default value is
 300.
 -error_frame_threshold
 The number of detected errored frames in the period must be
 equal to or greater than this value for Errored Frame Events
 to be generated. Possible values range from 0 to 65535. The
 default value is 40.
 -error_frame_summary_threshold
 The number of errored frame seconds in the period must be
 equal to or greater than this value for Errored Frame
 Seconds Summary Event to be generated. Possible values range
 from 0 to 65535. The default value is 20.
 -error_frame_summary_window
 Defines the window, measured in 100ms intervals, within
 which the number of errored frame seconds exceeds the
 threshold defined by the -error_frame_summary_threshold
EFM Functions
222
 argument. Possible values range from 100 to 9000.The default
 value is 200.
 -error_frame_window
 Defines the window, measured in 100ms intervals, within
 which the number of errored frames exceeds the threshold
 defined by the -error_frame_threshold argument. Possible
 values range from 10 to 600. The default value is 400.
 -error_symbol_period_threshold
 The number of errored symbols in the period must be equal to
 or greater than this value for Errored Symbol Period Events
 to be generated. Possible values range from 0 to 65535. The
 default value is 50.
 -error_symbol_period_window
 Defines the window, measured in number of symbols, within
 which the number of errored symbols exceeds the threshold
 defined by the -error_symbol_period_threshold argument.
 Possible values range from 1 to 65535. The default value is
 500.
 -link_events
 Specifies whether the EFM emulated router supports signaling
 Link Events, which include Errored Symbol Period Events,
 Errored Frame Events, Errored Frame Period Events and
 Errored Frame Seconds Summary Events. Possible values are 0
 and 1. When the -link_events argument is enabled, the
 emulated EFM router will send Event Notification OAMPDUs
 (Operation, Administration and Maintenance Protocol Data
 Unit) containing a Link Event TLV (Type Length Value) for
 every event to its peer. The default is 0.
 -link_fault
 Send Link Fault message in Information OAMPDU to signal the
 remote EFM router whether receive path is broken. Possible
 values are 0 and 1. The default is 0.
 -link_notification_events_per_interval
 Number of times to transmit the Link OAM event notification
 in a period. Possible values range from 1 to 10. The
 default is 2.
 -link_notifications_interval
 Specifies the initial time base in 100 ms intervals.
 The default is 0.

 -mac_local
 Defines the MAC address {aa:bb:cc:dd:ee:ff} of the EFM
 router. The -mode argument must be set to either "config" or
 "modify".
 -mode
 Specifies the action to perform on the specified test port.
 Possible values are create, modify, destroy or reset.
 The modes are described below:
 create - Creates one emulated EFM router on the port
 specified in the -port_handle argument. To create
 routers, specify the -port_handle argument. You must
 specify the -port_handle argument.
 modify - Changes the configuration for the EFM router on the
 port identified by the -port_handle argument. You must
 specify the -port_handle argument.

 destroy - Deletes the EFM router on the port specified in
 the -port_handle argument. You must specify the
 -port_handle argument.
 
EFM Functions
223
 reset - Same as destroy mode.
 This argument is mandatory.
 -oam_mode
 Defines the operation mode of EFM. Possible values are
 active and passive The default is active.

 active - Initiates the EFM OAM Discovery process and
 can send any OAMPDU to its peer. At least one EFM
 router in a P2P(point to point) link must be in active

 mode.

 passive - Waits for the remote EFM router in active mode
 to initiate the Discovery process.
 -oui_value
 Defines the Organizational Unique Identifier (OUI) value.
 OUI is the first 24 bits of a MAC address for a network
 device, which indicates the specific vendor for that device
 as assigned by the IEEE. Specify this value as a string of
 six hexadecimal characters. The default is 000000.
 -osi_enable
 Specifies a list of Booleans to determine whether you want the
 data Organization Specific information TLV data in Information
 OAMPDUs to be applied. Possible values are 0 (No) and 1 (Yes).
 The default is 1. The length of the list must be the same as
 that the length of lists -osi_value and -osi_oui list.

 -osi_value
 Specifies a list of data fields of Organization Specific
 information TLV in Information OAMPDU except OUI. The default is
 00. The value should be in hexadecimal format with an even
 length. The length of the list must be the same as that of the
 length of lists -osi_value and -osi_enable. (For example, {01},
 {0102}, {030405})
 -osi_oui
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the OUI value in Organization Specific information TLV
 in Information OAMPDUs. Possible values range from 000000-FFFFFF.
 The default is 001094. The length of the list must be the same
 as that of lists -osi_value and -osi_enable.
 -organization_specific_event_value
 Specifies the value of the Organization Specific OAMPDU data
 field except OUI. The default is 00. The value should be in
 hexadecimal format with an even length. (For example, {01},
 {0102}, {030405}).
 -organization_specific_event_oui
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the OUI value of the Organization Specific OAMPDU Data
 field. Possible values range from 000000-FFFFFF. The default is
 001094.
 -port_handle
 Specifies the port on which to create, modify, destroy or
 reset the EFM router. This argument is mandatory for the
 four modes (create|modify|destroy|reset).
 -remote_loopback
 Specifies that EFM emulation should attempt to put its peer
 into Remote Loopback mode. OAM remote loopback can be used
 for fault localization and link performance testing.
 Statistics from both the emulated EFM router and its peer
 can be queried and compared at any time while the peer of
 the emulated EFM router is in OAM remote loopback mode. When
 -remote_loopback is enabled, the local EFM router in Active
 mode sends a Loopback Control OAMPDU to get the remote EFM
EFM Functions
224
 router into Remote Loopback mode. The Passive EFM router is
 not permitted to send Loopback Control OAMPDUs. Possible
 values are 0 and 1. The default is 0.

 -unidirectional
 Specifies that EFM should run in Unidirectional mode. This
 is an OAMPDU-based mechanism that notifies the remote EFM
 router when one direction of a link is non-operational and
 therefore data transmission is disabled. When a link is
 operating in Unidirectional OAM mode, the OAM sublayer
 ensures that only Information OAMPDUs with the Link Fault
 critical link event indication set. Meanwhile, no
 Information TLVs are sent across the link. Possible values
 are 0(off) and 1(on). The default is 0(off).
 -variable_retrieval
 Specifies that EFM emulation should have variable retrieval
 enabled. Possible values are 0 and 1. The default is 0,
 which indicates the emulated EFM router does not support
 sending Variable Response OAMPDUs.
 -vsi_value
 Defines the Vendor-Specific Identifier (VSI) value. VSI is a
 32-bit Identifier used to differentiate a vendor's product
 model or versions. Specify this value as a string of eight
 hexadecimal characters. The default is 00000000.
 -variable_response_tx
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the transmission of variable responses.
 Possible values are 0 and 1. The default is 1.
 -pdu_tx
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the transmission of PDUs. Possible values
 are 0 and 1. The default is 1.

 -loopback_response_tx
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the transmission of loopback responses.
 Possible values are 0 and 1. The default is 1.
 -max_pdu_size
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum OAMPDU size supported. Possible values
 range from 4 to 2047. The default is 1500.

 -oam_version
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the OAM version of the emulated router. Possible
 values range from 0 to 255. The default is 1.

 -override_local_satisfied
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the local satisfied flag is to be overridden
 Possible values are false, true and default.

 false - Set local satisfied to false.

 true - Set local satisfied to true.

 default - Use the default handling of the local satisfied flag.

 The default is default.

 -override_remote_stable
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the remote stable flag is to be overridden.
 Possible values are false, true and default.
 
EFM Functions
225
 false - Set remote stable to false.

 true - Set remote stable to true.

 default - Use the default handling of the remote stable flag.

 The default is default.

 -override_revision
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables overriding of the revision number.
 Possible values are 0 and 1. The default is 0.

 -revision
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the current revision number. Possible values range
 from 0 to 65535. The default is 0. This argument is available
 when -override_revision is set to 1.
 -error_frame_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of detected errored frames in the period,
 specified in 100 ms intervals. The default is 1.
 -error_frame_period_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of detected frame errors in the period,
 specified in terms of frames. The default is 1.
 -error_frame_summary_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of detected errored frame seconds in the
 period, specified in 100 ms intervals. The default is 1.
 -error_symbol_period_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of detected symbol errors in the period,
 specified in number of symbols. The default is 1.
 -link_notifications_ose_oui
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the OUI of Organization Specific Event TLV in Event
 Notification OAMPDUs. Possible values range from 000000 to
 FFFFFF. The default is 001094.
 -link_notifications_ose_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Organization Specific Event TLV data in Event
 Notification OAMPDU except OUI. The default is 00. The value
 should be in hexadecimal format with an even length. (For
 example, {01}, {0102}, {030405})
 -loopback_response_timer
 Spirent Extension (for Spirent HLTAPI only).
 Number of seconds to wait for a loopback response. Possible
 values range from 1 to 10. The default is 1.
 -lost_link_timer
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the lost link timer used to reset the discovery state
 machine. Possible values range from 2 to 90. The default is 5.

 -pdu_timer
 Spirent Extension (for Spirent HLTAPI only).
 Number of seconds to wait for a received PDU and the interval at
 which Information PDUs are sent. Possible values range from 1 to
 10. The default is 1.
 -variable_response_timer
 Spirent Extension (for Spirent HLTAPI only).
EFM Functions
226
 Number of seconds to wait for a variable response. Possible
 values range from 1 to 10. The default is 1.
 -variable_response_branch
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Variable branches in Variable Response
 OAMPDUs. The value must be a one-byte hex. The default is 00.
 The length of the list must be the same as that of lists
 -variable_response_data, -variable_response_indication,
 -variable_response_leaf and -variable_response_width.
 -variable_response_data
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Variable values in Variable Response OAMPDUs.
 The default is 00. The value should be in hexadecimal format
 with an even length. The length of the list must be the same as
 that of lists -variable_response_branch,
 -variable_response_indication, -variable_response_leaf and
 -variable_response_width. (For example, {01}, {0102}, {030405})
 -variable_response_indication
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Booleans to determine whether to enable the
 indication bit of the variable width. Possible values are 0
 (disable) and 1 (enable). The default is 0. The length must be
 the same as that of lists -variable_response_branch,
 -variable_response_data, -variable_response_leaf and
 -variable_response_width.
 -variable_response_leaf
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Variable leaves in Variable Response OAMPDUs.
 The value must be a two-byte hex. The default is 0000.
 length of the list must be the same as that of lists
 -variable_response_branch, -variable_response_indication,
 -variable_response_data and -variable_response_width.
 -variable_response_width
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of widths in Variable Response OAMPDUs. The
 default is 00. The length of the list must be the same as that
 of lists -variable_response_branch,
 -variable_response_indication, -variable_response_leaf and
 -variable_response_data.

 -variable_request_branch
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Variable branches in Variable Request
 OAMPDUs. The value must be a one-byte hex. The default is 00.
 The length of the list must be the same as that of list
 -variable_request_leaf.
 -variable_request_leaf
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a list of Variable leaves in Variable Request OAMPDUs.
 The value must be a two-byte hex. The default is 0000. The
 length of the list must be the same as that of list
 -variable_request_branch.
 -vlan _id
 Spirent Extension (for Spirent HLTAPI only).
 The inner VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1.
 -vlan_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies inner VLAN ID assignment for multiple router
 configurations. Valid values
 are "fixed" or "increment". If you specify "fixed", all of
 the routers will be assigned the same VLAN ID (the value of
 the -vlan_id argument). If you specify "increment", then
EFM Functions
227
 Spirent HLTAPI assigns unique VLAN IDs. When you use
 increment mode, you must also specify the -vlan_id_step
 argument to define the increment value.
 -vlan_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The step size by which the inner VLAN value is incremented when
 you set -vlan_id_mode to "increment". Possible values range
 from 1 to 4094. You must specify the step when the -count
 argument is greater than 1. The default is 1.
 -vlan_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the inner VLAN priority for the inner
 VLANs on this port. Possible values
 range from 0 to 7. The default is 0.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id.
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when router count
 is greater than 1. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values
 range from 1 to 4094. You must specify this step when
 you specify "increment" for the -vlan_outer_id_mode argument.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.

Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -passive_peer_only
 -pdu_count
 -mac_remote
 -automatic_discovery
 -error_symbol_period_event
 -error_frame_event
 -error_frame_period_event
 -error_frame_seconds_summary_event
 -organization_specific_event_enable
 -size
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
EFM Functions
228
 handle The handle that identifies the router created by the
 sth::emulation_efm_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_efm_config function creates, modifies,
 deletes, or resets an emulated EFM router. Use the -mode argument to
 specify the action to perform. (See the -mode argument description for
 information about the actions.)
 When you create an emulated router, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated router will use for EFM
 communication. (The port handle value is contained in the keyed list
 returned by the connect function.) Create mode returns the handle of the
 EFM router.

 After you create an emulated EFM router, use the "emulation_efm_control
 -mode start" command for Spirent HLTAPI to start the router communication.
 The EFM router in Active mode sends Information PDUs to initiate the
 Discovery process. It may send Event Notification PDUs when -link_events is
 enabled and Loopback Control PDUs when -remote_loopback is enabled.
 The EFM router in Passive mode waits for the EFM router in Active mode to
 initiate the Discovery process.

 If the local EFM router and the remote EFM router are satisfied with the
 settings, an OAM link is established. During the test, use the
 sth::emulation_efm_control function to stop individual routers.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates an EFM router:
 sth::emulation_efm_config \
 -port_handle $hltSourcePort\
 -mode create\
 -critical_event 0\
 -dying_gasp 1\
 -error_frame_period_threshold 100\
 -error_frame_period_window 200\
 -error_frame_threshold 50\
 -error_frame_summary_threshold 40\
 -error_frame_summary_window 150\
 -error_frame_window 180\
 -error_symbol_period_threshold 10\
 -error_symbol_period_window 30\
 -link_events 1\
 -link_fault 0\
 -mac_local "00.00.00.01.00.01"\
 -oam_mode active\
 -oui_value 000001\
 -remote_loopback 1\
 -unidirectional 1\
 -variable_retrieval 1\
 -vsi_value 00000001\
 -loopback_response_tx 0\
 -pdu_tx 1\
 -variable_response_tx 0\
 -max_pdu_size 1500\
 -oam_version 1\
 -override_local_satisfied true\
 -override_remote_stable true\
 -override_revision 1\
 -revision 3\
 -error_frame_count 2\
 -error_frame_period_count 3\
 -error_frame_summary_count 4\
 -error_symbol_period_count 5\
EFM Functions
229
 -link_notification_events_per_interval 4\
 -link_notifications_interval 1\
 -link_notifications_ose_oui 000002\
 -link_notifications_ose_value {0708}\
 -loopback_response_timer 2\
 -lost_link_timer 6\
 -pdu_timer 4\
 -variable_response_timer 5\
 -organization_specific_event_oui 000004 \
 -organization_specific_event_value 01\
 -osi_enable {1 1}\
 -osi_oui {000003 000004}\
 -osi_value {0506 0708}\
 -variable_response_indication {1 1}\
 -variable_response_data {0506 08}\
 -variable_response_branch {02 03}\
 -variable_response_leaf {0003 0004}\
 -variable_response_width {03 05}\
 -variable_request_branch {01 02}\
 -variable_request_leaf {0001 0002}\
 -vlan_id 2\
 -vlan_id_mode increment \
 -vlan_id_step 2\
 -vlan_user_priority 1\
 -vlan_outer_id 10\
 -vlan_outer_id_mode increment \
 -vlan_outer_id_step 2\
 -vlan_outer_user_priority 2
Sample output for example shown above:
 {handle router1} {status 1}
The following example modifies the created EFM router:
 sth::emulation_efm_config \
 -mode modify \
 -port_handle portHandle \
 -oam_mode passive
Sample output for example shown above:
 {handle router1} {status 1}
The following example deletes the specified EFM router:
 sth::emulation_efm_config \
 -mode delete \
 -port_handle portHandle
 or sth::emulation_efm_config \
 -mode reset \
 -port_handle portHandle
Sample output for example shown above: {status 1}
 #### HLTAPI for Python ####
 The following example creates an EFM router:
 device_ret0 = sth.emulation_efm_config (
 mode = 'create',
 error_symbol_period_window= '10',
 error_frame_window = '10',
 error_frame_count = '1',
 error_symbol_period_threshold= '1',
 error_frame_period_count= '1',
 error_frame_threshold= '1',
 error_symbol_period_count= '1',
 error_frame_period_window= '10',
 error_frame_summary_window= '600',
 error_frame_period_threshold= '1',
 link_notification_events_per_interval= '2',
 link_notifications_interval= '0',
EFM Functions
230
 error_frame_summary_threshold= '1',
 link_notifications_ose_value= '00',
 error_frame_summary_count= '1',
 link_notifications_ose_oui= '001094',
 organization_specific_event_value= '00',
 organization_specific_event_oui= '001094',
 pdu_timer = '1',
 loopback_response_timer= '1',
 variable_response_timer= '1',
 lost_link_timer = '5',
 vlan_outer_id_mode = 'increment',
 vlan_id_mode = 'increment',
 port_handle = port_handle[0],
 vlan_outer_id_step = '1',
 vlan_outer_user_priority= '7',
 vlan_outer_id = '100',
 vlan_id = '100',
 vlan_user_priority = '6',
 vlan_id_step = '1',
 override_remote_stable= 'default',
 link_fault = '0',
 override_local_satisfied= 'default',
 oam_version = '1',
 pdu_tx = '1',
 max_pdu_size = '1500',
 link_events = '1',
 critical_event = '0',
 dying_gasp = '0',
 oui_value = '001094',
 oam_mode = 'active',
 remote_loopback = '1',
 unidirectional = '1',
 variable_retrieval = '1',
 loopback_response_tx= '1',
 vsi_value = '00000000',
 override_revision = '0',
 variable_response_tx= '1',
 mac_local = '00:10:94:00:00:01');
Sample Output: {'status': '1', 'handle': 'router1'}
 #### HLTAPI for Perl ####
 The following example creates an EFM router:
 my %device_ret0 = sth::emulation_efm_config (
 mode => 'create',
 error_symbol_period_window=> '10',
 error_frame_window => '10',
 error_frame_count => '1',
 error_symbol_period_threshold=> '1',
 error_frame_period_count=> '1',
 error_frame_threshold=> '1',
 error_symbol_period_count=> '1',
 error_frame_period_window=> '10',
 error_frame_summary_window=> '600',
 error_frame_period_threshold=> '1',
 link_notification_events_per_interval=> '2',
 link_notifications_interval=> '0',
 error_frame_summary_threshold=> '1',
 link_notifications_ose_value=> '00',
 error_frame_summary_count=> '1',
 link_notifications_ose_oui=> '001094',
 organization_specific_event_value=> '00',
 organization_specific_event_oui=> '001094',
 pdu_timer => '1',
 loopback_response_timer=> '1',
 variable_response_timer=> '1',
 lost_link_timer => '5',
 vlan_outer_id_mode => 'increment',
 vlan_id_mode => 'increment',
 port_handle => "$hport[1]",
EFM Functions
231
 vlan_outer_id_step => '1',
 vlan_outer_user_priority=> '7',
 vlan_outer_id => '100',
 vlan_id => '100',
 vlan_user_priority => '6',
 vlan_id_step => '1',
 override_remote_stable=> 'default',
 link_fault => '0',
 override_local_satisfied=> 'default',
 oam_version => '1',
 pdu_tx => '1',
 max_pdu_size => '1500',
 link_events => '1',
 critical_event => '0',
 dying_gasp => '0',
 oui_value => '001094',
 oam_mode => 'active',
 remote_loopback => '1',
 unidirectional => '1',
 variable_retrieval => '1',
 loopback_response_tx=> '1',
 vsi_value => '00000000',
 override_revision => '0',
 variable_response_tx=> '1',
 mac_local => '00:10:94:00:00:01');

 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes: None
End of Procedure Header
sth::emulation_efm_control
Name:
 sth::emulation_efm_control
Purpose:
 Starts or stops an EFM router from routing traffic for the specified port.
Synopsis:
 sth::emulation_efm_control
 -action
 {start | stop | start_variable_request | stop_variable_request |
 start_loopback | stop_loopback | start_event_notification |
 stop_event_notification | start_organization_specific_event |
 stop_organization_specific_event | resume }
 -port_handle <port_handle>
 [-pdu_packing {single_tlv|batch_tlvs}]
 [-period <1-10>]
 [-error_symbol_period_event_enable {0|1}]
 [-error_frame_eventz-enable {0|1}]
 [-error_frame_period_event_enable {0|1}]
 [-error_frame_seconds_summary_event_enable {0|1}]
 [-organization_specific_event_enable {0|1}]
 [-pause_at { fault| active_passive| send_local_remote|]
 send_local_remote_ok| send_any| none}]
 [-tx_type {single_mag| periodic}]
Arguments:
 -port_handle
 Identifies the port handle on which to stop or start the EFM
EFM Functions
232
 router. This argument is mandatory.
 -action
 Specifies the action to be taken on the specified port.
 Possible values are start or stop. This argument is
 mandatory. Possible values are:
 start - Starts the EFM emulation for the specified port
 stop - Stops the EFM emulation for the specified port

 start_variable_request - Starts sending Variable Requests to DUT

 stop_variable_request - Stops sending Variable Requests to DUT

 start_loopback - Send a Loopback Control OAMPDU to
 enable remote loopback
 stop_loopback - Send a Loopback Control OAMPDU to
 disable remote loopback

 start_event_notification - Starts sending Link Event
 Notification PDUs
 stop_event_notification - Stops sending Link Event
 Notification PDUs

 resume - Resumes sending Link OAM commands

 start_organization_specific_event - Starts sending Organization
 Specific Event PDUs
 stop_organization_specific_event - Stops sending Organization
 Specific Event

 -pdu_packing
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how TLVs are packed into the PDU when a Variable
 Request OAMPDU or Event Notification OAMPDU is sent.
 Possible values are:
 single_tlv - Send a single TLV per PDU.
 batch_tlvs - Batch TLVs into a minimum number of PDUs.
 The default is single_tlv. This argument is available
 when -action is set to start_variable_request or
 start_event_notification.
 -period
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the transmission period to send Variable Request
 OAMPDU/Event Notification OAMPDU/Organization Specific
 OAMPDU periodically. Possible values range from 1 to 10.
 This argument is available when -action is set to one of the
 following values:

 start_variable_request
 start_event_notification
 start_organization_specific_event.


 -error_symbol_period_event_enable
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to send an errored symbol period event
 when you send Event Notification OAMPDUs. Possible
 values are 0 and 1. The default is 0. This argument is available
 when -action is set to start_event_notification.
 -error_frame_event_enable
 Spirent Extension (for Spirent HLTAPI only).
EFM Functions
233
 Specifies whether to send an errored frame event when
 you send Event Notification OAMPDUs. Possible values
 are 0 and 1. The default is 0. This argument is available when
 -action is set to start_event_notification.
 -error_frame_period_event_enable
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to send an errored frame period event when you
 send Event Notification OAMPDUs. Possible values are 0 and 1.
 The default is 0. This argument is available when -action is set
 to start_event_notification.
 -error_frame_seconds_summary_event_enable
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to send an errored frame seconds summary event
 when you send Event Notification OAMPDUs. Possible values are
 0 and 1. The default is 0. This argument is available when
 -action is set to start_event_notification.
 -organization_specific_event_enable
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to send an organization specific event when
 you send Event Notification OAMPDUs. Possible values are 0 and
 1. The default is 0. This argument is available when -action is
 set to start_event_notification.
 -tx_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the message transmission type to send Variable Request
 OAMPDU/Event Notification OAMPDU/Organization Specific OAMPDUs.
 Possible values are:
 single_mag - Send a single message.
 periodic - Send continuous messages.
 The default is single_mag. This argument is available when
 -action is set to one of the following values:

 start_variable_request
 start_event_notification
 start_ organization_specific_event
 -pause_at
 Spirent Extension (for Spirent HLTAPI only).
 The state the Link OAM router will remain in, until
 -action is set to "resume".
 Possible values are:
 Value Description
 fault FAULT state
 active_passive ACTIVE_SEND_LOCAL or PASSIVE_WAIT state,
 depending on OAM mode
 send_local_remote SEND_LOCAL_REMOTE state
 send_local_remote_ok SEND_LOCAL_REMOTE_OK state
 send_any SEND_ANY state
 none NONE
 The default is none.

Cisco-specific Arguments:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
EFM Functions
234
 log An error message (if the operation failed).
Description:
 The sth::emulation_efm_control function controls the routing of
 traffic through the specified ports. You can use this function to
 perform two actions: starting routers and stopping routers.
Examples:
 #### HLTAPI for Tcl ####
 To start the EFM router on the specified port:
 sth::emulation_efm_control -mode start -port_handle portHandle
 To stop the EFM router on the specified port:
 sth::emulation_efm_control -mode stop -port_handle portHandle
 Sample Output: {status 1}
 #### HLTAPI for Python ####
 To start the EFM router on the specified port:

 ctrl_ret1 = sth.emulation_efm_control (
 port_handle = port_handle[0],
 action = 'start');

 Sample Output: {'status': '1'}

 #### HLTAPI for Perl ####
 To start the EFM router on the specified port:
 my %ctrl_ret2 = sth::emulation_efm_control (
 port_handle => "$hport[2]",
 action => 'start');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_efm_stat
Name:
 sth::emulation_efm_stat
Purpose:
 Returns EFM statistics on the specified port. Statistics include the
 EFM connection status and link event counters.
Synopsis:
 sth::emulation_efm_stat
 -port_handle <port_handle>
 -action {get|reset}
Arguments:
 -port_handle
 Specifies the ports for which you want information. This
 argument is mandatory.
 -action
 Specifies the action to take on the specified port
 handles. Possible values are get and reset. This argument is
 mandatory.
EFM Functions
235
 get - retrieves all EFM statistics for the specified port.
 reset - deletes all EFM statistics for the specified port.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or
 failure (0) of the operation.
 log Retrieves a message describing the last error
 that occurred during the operation. If the operation
 was successful - {status 1} - the log value is null.
 port_handle The ports for which you want to retrieve information
 about the EFM session.
 local_state Indicates the state information of the emulated EFM
 router. Possible values are NONE, UNSATISFIED,
 NOT COMPLETED, and COMPLETED:

 NONE - Indicates there is no state information
 available.

 UNSATISFIED - Indicates that the Discovery process
 cannot complete.

 NOT COMPLETED - Indicates that the Discovery process is
 in progress.

 COMPLETED - Indicates that the Discovery process is
 complete.

 The following keys are returned when you specify -action get.

 -statistics
 remote_dte_oam_version The OAM version of the remote
 OAM client
 remote_dte_revision Revision number of the remote
 OAM client
 remote_max_pdu_size Maximum PDU size supported on the
 remote OAM client
 current_discovery_state Value of the local DTE state
 UNSATISFIED Discovery can not
 complete
 NOT_COMPLETED Discovery has not
completed
 COMPLETED Discovery has
completed
 RESERVED Reserved flag should not
 be received
 NONE No current state exists
 local_dte_tx_critical_event_bit Value of the critical event flag
 OFF Critical event is not enabled
 ON Critical event is enabled
 local_dte_tx_dying_gasp_bit Value of the dying gasp flag
 OFF Dying gasp is not enabled
 ON Dying gasp is enabled
 local_dte_tx_link_fault_bit Value of the link fault flag
 OFF Link fault is not enabled
 ON Link fault is enabled
 remote_dte_rx_critical_event_bit Value of the remote critical
EFM Functions
236
 event flag
 OFF Remote critical event is
 not enabled
 ON Remote critical event is enabled
 remote_dte_rx_dying_gasp_bit Value of the remote dying gasp flag
 OFF Remote dying gasp is not enabled
 ON Remote dying gasp is enabled
 remote_dte_rx_link_fault_bit Value of the remote link fault flag
 OFF Remote link fault is not enabled
 ON Remote link fault is enabled
 remote_dte_multiplexer_action_value Value of the remote multiplexer
 action
 FWD Forwarding non-OAMPDUs
 DISCARD Discarding non-OAMPDUs
 remote_dte_parser_action_value Value of the remote parser action
 FWD Forwarding non-OAMPDUs
 LB Looping back non-OAMPDUs
 DISCARD Discarding non-OAMPDUs
 RESERVED Reserved flag should
 not be set

 Spirent Extension (for Spirent HLTAPI only).
 local_dte_multiplexer_action_value Value of the local multiplexer
 action
 FWD Forwarding non-OAMPDUs
 DISCARD Discarding non-OAMPDUs
 Spirent Extension (for Spirent HLTAPI only).
 local_dte_parser_action_value Value of the parser action
 FWD Forwarding non-OAMPDUs
 LB Looping back non-OAMPDUs
 DISCARD Discarding non-OAMPDUs
 RESERVED Reserved flag should
 not be set
 Spirent Extension (for Spirent HLTAPI only).
 remote_state Value of the remote DTE state
 UNSATISFIED: Discovery can not
 complete
 NOT_COMPLETED Discovery has not
completed
 COMPLETED Discovery has completed
 RESERVED Reserved flag should not
 be received
 NONE No current state exists

 Spirent Extension (for Spirent HLTAPI only).
 info_pdu_timesout Number of information PDU timeouts
 Spirent Extension (for Spirent HLTAPI only).
 rx_loopback_pdu_count Number of loopback PDUs received

 Spirent Extension (for Spirent HLTAPI only).
 loopback_pdu_timesout Number of loopback PDU timeouts

 Spirent Extension (for Spirent HLTAPI only).
 tx_loopback_pdu_count Number of loopback PDUs transmitted

 Spirent Extension (for Spirent HLTAPI only).
 tx_org_specific_pdu_count Number of organization specific PDUs
 transmitted
EFM Functions
237
 Spirent Extension (for Spirent HLTAPI only).
 rx_variable_request_pdu_count Number of variable request PDUs
 received
 Spirent Extension (for Spirent HLTAPI only).
 variable_request_pdu_time_out Number of variable request PDU
 timeouts
 Spirent Extension (for Spirent HLTAPI only).
 tx_ variable_request _pdu_count Number of variable request PDUs
 transmitted
 Spirent Extension (for Spirent HLTAPI only).
 rx_ variable_response_pdu_count Number of variable response PDUs
 received
 Spirent Extension (for Spirent HLTAPI only).
 tx_ variable_response_pdu_count Number of variable response PDUs
 transmitted

 -mac_remote
 link_events_enabled Value of the link events flag
 TRUE - Supports interpreting
 Link Events
 oam_mode State of the emulated router
 oampdu_count Number of OAMPDUs received
 oampdu_size Size of OAMPDUs
 oui_value OUI Value

 remote_loopback_enabled Value of the remote loopback flag
 TRUE - Runs in Remote Loopback mode
 unidir_enabled Value of the unidirectional flag
 TRUE - Supports unidirectional mode
 variable_retrieval_enabled Value of the variable retrieval flag
 TRUE - Supports sending Variable
 Response OAMPDUs
 vsi_value VSI Value
 oampdu_count Number of OAMPDUs received

 oui_value OUI Value

 vsi_value Specifies the vendor specific information

 tx_information_oam_pdu_count Number of information PDUs transmitted

 tx_link_event_notification_count Number of event PDUs transmitted

 rx_information_oam_pdu_count Number of information PDUs received

 rx_link_event_notification_count Number of event PDUs received

 rx_organization_specific_oam_pdu_count Number of organization specific
 PDUs received
 Spirent Extension (for Spirent HLTAPI only).
 remote_vsi_value Vendor specific information value
 on the remote OAM client
 -alarms
 errored_frame_events Number of Errored Frame
 Events detected
EFM Functions
238
 errored_frame_period_events Number of Errored Frame
 Period Events detected

 errored_frame_seconds_summary_events Number of Errored Frame
 Period Events detected
 errored_symbol_period_events Number of Errored Symbol
 Period Events detected
 organization_specific_events Number of organization specific
 events received
 tx_errored_symbol_period_events Number of errored symbol period
 events transmitted
 tx_errored_frame_events Number of errored frame events
 transmitted
 tx_errored_frame_period_events Number of errored frame period
 events transmitted
 tx_errored_frame_seconds_summary_events Number of errored frame seconds
 summary events transmitted
 tx_organization_specific_event Number of organization specific
 events transmitted
 tx_critical_events Number of critical events
 transmitted
 tx_dying_gasp Number of dying gasps transmitted
 tx_link_fault Number of link faults transmitted

 rx_critical_events Number of critical events received
 rx_dying_gasp Number of dying gasp received
 rx_link_fault Number of link faults received
 Spirent Extension (for Spirent HLTAPI only).
 -event_notification
 There can be a more than one -event_notification hash. For example, if
 you send two kinds of Link Event Notification PDUs, you will get two
 -event_notification hashes. Please refer to the sample output for more
 details.
 event_type Spirent HLTAPI value of the event type
 Errored symbol period event
 ERRORED_FRAME Errored frame event
 ERRORED_FRAME_PERIOD Errored frame period event
 ERRORED_FRAME_SECONDS_SUMMARY Errored frame seconds
 summary event
 ORG_SPECIFIC Organization specific
 event
 time_stamp Timestamp of the event in 100 ms intervals
 window_size Window size of the event
 threshold Threshold of the event
 error_count Error count of the event
 error_running_total Error running total of the event
EFM Functions
239
 event_running_total Event running total
 oui OUI in Organization Specific Event TLV of
 Event Notification PDUs
 value Value of the Organization Specific Event
 TLV in Event Notification PDUs
Description:
 The sth::emulation_efm_stat function provides information about
 the ports specified for the EFM configuration.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 supported by the Tcl extension software - TclX). Use the TclX function
 (keylget) to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Notes:
 The following -mac_remote statistics keys are not supported:
 oampdu_size
 tx_loopback_enable_count
 tx_loopback_disable_count
 rx_loopback_enable_count
 rx_loopback_disable_count
 rx_invalid_oam_pdu_count
 The following -alarms statistics keys are not supported:
 rx_errored_symbol_period_events
 rx_errored_frame_events
 rx_errored_frame_period_events
 rx_errored_frame_seconds_summary_events
 rx_organization_specific_event
 The following -statistics keys are not supported:
 attempted_discovery_count
 successful_discovery_count
 unsuccessful_discovery_count
 last_discovery_time
 min_discovery_time
 max_discovery_time
 avg_discovery_time
 lost_link_timeouts_count
 last_info_tlv_received_timestamp
 attempted_loopback_enable_count
 successful_loopback_enable_count
 unsuccessful_loopback_enable_count
 attempted_loopback_disable_count
 successful_loopback_disable_count
 unsuccessful_loopback_disable_count
 last_loopback_enable_time
 last_loopback_disable_time
 current_remote_loopback_state
 current_link_event_notification_state
 remote_dte_mac
 local_dte_tx_last_oampdu_type
 remote_dte_rx_last_oampdu_type
 last_error_description

Examples:
 #### HLTAPI for Tcl ####
 Sample Input: ::sth::emulation_efm_stat \
 -action get \
 -port_handle portHandle
EFM Functions
240
 Sample Output:
 {port_handle port2} {local_state COMPLETED} {statistics
 {{tx_org_specific_pdu_count 0} {local_dte_multiplexer_action_value FWD}
 {remote_max_pdu_size 1500} {local_dte_tx_critical_event_bit OFF}
 {remote_dte_multiplexer_action_value DISCARD}{local_dte_tx_dying_gasp_bit ON}
 {loopback_pdu_timesout 0} {remote_dte_oam_version1} {remote_dte_rx_dying_gasp_bit OFF}
 {remote_state COMPLETED} {remote_dte_parser_action_value FWD} {info_pdu_timesout 0}
 {rx_variable_request_pdu_count 6} {tx_variable_request_pdu_count 0}
 {rx_variable_response_pdu_count 0} {current_discovery_state COMPLETED}
 {local_dte_tx_link_fault_bit OFF} {remote_dte_rx_critical_event_bit OFF}
 {rx_loopback_pdu_count 1} {tx_loopback_pdu_count 0} {tx_variable_response_pdu_count 0}
 {variable_request_pdu_timeouts 0} {remote_dte_rx_link_fault_bit OFF}
 {local_dte_parser_action_value FWD} {remote_dte_revision 5}}} {alarms
 {{rx_link_fault 0} {tx_link_fault 0} {tx_errored_frame_seconds_summary_events 1}
 {errored_frame_period_events 0} {rx_critical_events 0}
 {errored_frame_seconds_summary_events 0} {tx_errored_frame_period_events 1}
 {rx_dying_gasp 0} {tx_dying_gasp 23} {tx_errored_symbol_period_events 1}
 {tx_errored_frame_events 1} {tx_organization_specific_events 0} {tx_critical_events 0}
 {errored_symbol_period_events 1} {errored_frame_events 0}
 {organization_specific_events 1}}} {mac_remote {{rx_information_oam_pdu_count 6}
 {variable_retrieval_enabled FALSE} {tx_link_event_notification_count 16}
 {remote_vsi_value {0000 0002}} {rx_link_event_notification_count 8} {oui_value 00-00-01}
 {oam_mode PASSIVE} {link_events_enabled FALSE}
 {tx_information_oam_pdu_count 7} {remote_loopback_enabled FALSE} {unidir_enabled FALSE}
 {vsi_value {0000 0001}} {rx_organization_specific_oam_pdu_count 4}
 {oampdu_count 25}}} {event_notification {{1 {{event_type ERRORED_SYMBOL_PERIOD}
 {error_count 5} {value {}} {event_running_total 0} {error_running_total 5} {oui {}}
 {threshold 20} {time_stamp 222} {window_size 40}}} {2 {{event_type ORG_SPECIFIC}
 {error_count 0} {value {07 08}} {event_running_total 0} {error_running_total 0}
 {oui 00-00-02}{threshold 0} {time_stamp 0} {window_size 0}}}}} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_efm_stat (
 port_handle = port_handle[0],
 action = 'get');
 Sample Output:
 {'status': '1', 'statistics': {'remote_max_pdu_size': '0',
 'loopback_pdu_timesout': '0', 'remote_state': 'UNSATISFIED',
 'remote_dte_oam_version': '0', 'rx_loopback_pdu_count': '0',
 'local_dte_tx_link_fault_bit': 'OFF', 'rx_variable_request_pdu_count': '0',
 'info_pdu_timesout': '0', 'local_dte_tx_critical_event_bit': 'OFF',
 'remote_dte_revision': '0', 'variable_request_pdu_timeouts': '0',
 'tx_loopback_pdu_count': '0', 'tx_org_specific_pdu_count': '0',
 'tx_variable_response_pdu_count': '0', 'rx_variable_response_pdu_count': '0',
 'current_discovery_state': 'NONE', 'local_dte_multiplexer_action_value': 'FWD',
 'remote_dte_rx_critical_event_bit': 'OFF', 'remote_dte_parser_action_value':
 'FWD', 'remote_dte_multiplexer_action_value': 'FWD',
 'local_dte_tx_dying_gasp_bit': 'OFF', 'tx_variable_request_pdu_count': '0',
 'local_dte_parser_action_value': 'FWD', 'remote_dte_rx_dying_gasp_bit': 'OFF',
 'remote_dte_rx_link_fault_bit': 'OFF'}, 'mac_remote':
 {'rx_organization_specific_oam_pdu_count': '0', 'link_events_enabled': 'FALSE',
 'remote_loopback_enabled': 'FALSE', 'remote_vsi_value': '0000 0000',
 'variable_retrieval_enabled': 'FALSE', 'oam_mode': 'PASSIVE',
 'tx_information_oam_pdu_count': '0', 'rx_information_oam_pdu_count': '0',
 'oui_value': '00-10-94', 'unidir_enabled': 'FALSE', 'vsi_value': '0000 0000',
 'rx_link_event_notification_count': '0', 'tx_link_event_notification_count':
 '0', 'oampdu_count': '0'}, 'port_handle': 'port1', 'local_state': 'NONE',
 'alarms': {'organization_specific_events': '0', 'tx_link_fault': '0',
 'errored_symbol_period_events': '0', 'tx_errored_symbol_period_events': '0',
 'tx_errored_frame_seconds_summary_events': '0', 'rx_link_fault': '0',
 'rx_critical_events': '0', 'tx_errored_frame_events': '0', 'tx_critical_events':
 '0', 'tx_errored_frame_period_events': '0', 'rx_dying_gasp': '0',
 'errored_frame_period_events': '0', 'tx_dying_gasp': '0',
 'tx_organization_specific_events': '0', 'errored_frame_seconds_summary_events':
 '0', 'errored_frame_events': '0'}}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::emulation_efm_stat (
EFM Functions
241
 port_handle => "$hport[1]",
 action => 'get');
 Sample Output:
 $VAR1 = 'alarms';
 $VAR2 = {
 'errored_frame_period_events' => '0',
 'tx_organization_specific_events' => '0',
 'tx_critical_events' => '0',
 'tx_link_fault' => '0',
 'organization_specific_events' => '0',
 'errored_frame_seconds_summary_events' => '0',
 'rx_dying_gasp' => '0',
 'tx_errored_frame_period_events' => '0',
 'tx_errored_symbol_period_events' => '0',
 'tx_errored_frame_seconds_summary_events' => '0',
 'errored_symbol_period_events' => '0',
 'tx_dying_gasp' => '0',
 'rx_critical_events' => '0',
 'rx_link_fault' => '0',
 'errored_frame_events' => '0',
 'tx_errored_frame_events' => '0'
 };
 $VAR3 = 'port_handle';
 $VAR4 = 'port1';
 ...
 $VAR7 = 'status';
 $VAR8 = '1';

End of Procedure Header
EOAM Functions
242
EOAM Functions
Functions:
sth::emulation_oam_config_msg
sth::emulation_oam_config_topology
sth::emulation_oam_control
sth::emulation_oam_info
sth::emulation_oam_config_msg
Name:
 sth::emulation_oam_config_msg
Purpose:
 Creates, modifies, or deletes Operation Administration Maintenance (OAM)
 message emulators on a Spirent HLTAPI chassis.
 Ethernet Operation, Administration and Maintenance (E-OAM)
 describes the monitoring of Ethernet network operation by network
 operators. Ethernet OAM is composed of a core set of functions and
 a set of optional functional groups.
 The mandatory functions include discovery operations (determining if the
 other end of the link is OAM capable, and what OAM functions it implements),
 state machine implementation, and some critical event flows. The optional
 functional groups are for link events, remote loopback, and variable
 retrieval and response.
Synopsis:
 sth::emulation_oam_config_msg
 -mode create -port_handle <port_handle> | -mode {modify|reset} -handle <EOAM_session_handle>
 [-dst_addr_type <unicast|multicast>]
 [-count <integer>]
 [-mac_local < aa:bb:cc:dd:ee:ff >]
 [-mac_local_incr_mode <none|increment|list|random>]
 [-mac_local_step < aa:bb:cc:dd:ee:ff >]
 [-mac_local_list
 < mac local type> :< comma separated segment list>]
 [-mac_remote < aa:bb:cc:dd:ee:ff >]
 [-mac_remote_incr_mode <none|increment|list|random>]
 [-mac_remote_step < 00:00:00:00:00:01 >]
 [-mac_remote_repeat <integer>]
 [-mac_remote_list
 < mac remote type> :< comma separated segment list>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_ether_type <0x8100|0x88A8|0x9100|0x9200>]
 [-vlan_id_outer_step <0-4095>
 [-vlan_id <0-4095>]
 [-vlan_ether_type <0x8100|0x88A8|0x9100|0x9200>]
 [-vlan_id_step <0-4095>]
 [-sut_ip_address <a.b.c.d >|<aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-mac_dst < aa:bb:cc:dd:ee:ff >]
 [-mac_dst_incr_mode <none|increment|list|random>]
 [-mac_dst_step < aa:bb:cc:dd:ee:ff >]
 [-mac_dst_repeat <integer>]
 [-mac_dst_list <mac dst type> :< comma separated segment list >]
 [-md_level <0|1|2|3|4|5|6|7>]
 [-md_level_incr_mode <none|increment|list|random>]
 [-md_level_step <integer>]
 [-md_level_repeat <integer>]
 [-md_level_list <md level type>:< comma separated segment list >]
 [-oam_standard < ieee_802.1ag | itut_y1731>]
 [-trans_id <integer>]
 [-ttl <integer>]
EOAM Functions
243
 [-msg_type <loopback|linktrace|test>]
 [-tlv_sender_length <integer>]
 [-tlv_sender_chassis_id <integer>]
 [-tlv_sender_chassis_id_length <integer>]
 [-tlv_sender_chassis_id_subtype <integer>]
 [-tlv_org_length <integer>]
 [-tlv_org_oui <integer>]
 [-tlv_org_subtype <integer>]
 [-tlv_org_value <hexadecimal>]
 [-tlv_data_length <integer>]
 [-tlv_data_pattern <hexadecimal>]
 [-tlv_test_length <integer>]
 [-tlv_test_pattern <null|null_with_crc|prbs|prbs_with_crc>]
 [-pkts_per_burst <integer>]
 [-rate_pps <integer>]
 [-transmit_mode <continuous|single_pkt>]
Arguments:
 -handle
 Specifies the Ethernet OAM session handle, a string value,
 to use when mode is set to "modify", or "reset".
 -port_handle
 Specifies the port on which to create the emulated E-OAM
 Maintenance Point (MP) when mode is set to "create".
 -mode
 Specifies the action to perform on the specified test port.
 This argument is mandatory. Possible values are create,
 modify, and reset.
 The modes are described below:
 create - Creates one or more Ethernet OAM message
 emulator(s) on the port specified with the
 -port_handle argument. You must specify the
 -port_handle argument.
 modify - Changes the configuration for the Ethernet OAM
 message emulator(s) identified by the -handle
 argument. You must specify the -handle argument.
 reset - Deletes all of the E-OAM message emulator(s)
 specified in the -handle argument. You must specify
 the -handle argument.
 -dst_addr_type
 Specifies whether the destination address, the address to
 which the MP(s) test messages should be sent, is unicast or
 multicast.
 unicast - Indicates the destination address is a unicast
 address. The unicast address specifies a single
 network device.
 multicast - Indicates the destination address is a multicast
 address. The multicast address specifies a group
 of network devices that have joined a multicast
 group. "Multicast address" is synonymous with
 "group address".

 -msg_type
 Specifies the type of E-OAM message to create. Possible
 values are loopback, linktrace, and test.
 loopback - Indicates the E-OAM message to create is a
 Loopback message. A Loopback message helps a
 Maintenance End Point (MEP) identify the precise
 fault location along a given MA (Maintenance
 Association). A Loopback message is issued by an 
EOAM Functions
244
 MEP to a given Maintenance Intermediate Point
 (MIP) along an MA. The appropriate MIP in front
 of the fault will respond with a Loopback reply.
 The MIP behind the fault will not respond.
 linktrace - Indicates the E-OAM message to create is a
 Linktrace message. A Linktrace message helps a
 MEP to discover vital connectivity data about
 the path.
 test - Indicates the E-OAM message to create is a test
 message. Test messages are used by the Ethernet Test
 Signal function to perform one-way, on-demand in-
 service or out-of-service diagnostics tests. This
 includes verifying bandwidth throughput, frame loss,
 bit errors, and so on.
 -count
 Defines the number of E-OAM messages to send by MEPs. The
 default is 1.
 -mac_local
 Defines the MAC address of the emulated MPs.
 -mac_local_incr_mode
 Defines the increment method of the local MAC address.
 Possible values are none, increment, list, and random.
 none - Indicates that the local MAC address will not be
 incremented.
 increment - Indicates the local MAC address increments
 by the step specified in the -mac_local_step
 argument.
 list - Indicates the list of the local MAC addresses
 should be inputted.
 random - Indicates the local MAC addresses should be
 distributed randomly.
 Note: The decrement mode is not supported.
 -mac_local_step
 Specifies the step size in which the local MAC address is
 incremented. The default is 00:00:00:00:00:01.
 -mac_local_list
 Defines the list of local MAC addresses that should be used
 for the emulated E-OAM messages. You must specify this
 argument when you specify "list" for -mac_local_incr_mode.
 Local MAC addresses can be used as MEPs that issue emulated
 E-OAM messages or MIPs that respond to these messages on
 request.
 -mac_remote
 Indicates the MAC address of device under test (DUT).
 Remote MAC addresses should be used as MEPs that issue
 emulated E-OAM messages or MIPs that respond to these
 messages on request.
 -mac_remote_incr_mode
 Defines the method to increment of DUT MAC address. Possible
 values are none, increment, list, and random.
 none - Indicates the remote MAC address will not be
 incremented.
 increment - Indicates the remote MAC address should
 increment by the step specified in the
 -mac_remote_step argument.
EOAM Functions
245
 list - Indicates the remote MAC addresses should be
 inputted. The list of the remote MAC addresses are
 specified in the -mac_remote_list argument.
 random - Indicates the remote MAC addresses should be
 distributed randomly.
 Note: The decrement mode is not supported.
 -mac_remote_step
 Specifies the step size in which the remote MAC address is
 incremented. The default is 00:00:00:00:00:01.
 -mac_remote_repeat
 Specifies the number of times a remote MAC address should be
 repeated before the step specified in the -mac_remote_step
 argument is applied to the MAC address for incrementing. The
 default value is 1.
 -mac_remote_list
 Defines the list of remote MAC addresses to use
 for the emulated E-OAM messages. You must specify this list
 when you specify "list" for the -mac_remote_incr_mode
 argument.
 -vlan_outer_id
 Specifies Virtual Local Area Network (VLAN) ID for the outer
 VLAN tag that is an encapsulation of the test message(s).
 VLAN ID is the identification of the VLAN, which is
 basically used by the standard 802.1Q. Possible values range
 from 0 to 4095. The default is 1.
 -vlan_outer_ether_type
 Indicates the value of VLAN EtherType to be used for the
 test message(s). EtherType is a two-octet field in an
 Ethernet frame, as defined by the Ethernet II framing
 networking standard. It is used to indicate which protocol
 is encapsulated in the frame data. Possible values are
 0x8100, 0x88A8, 0x9100, and 0x9200. The default is 0x8100.
 0x8100 - Specifies EtherType value 0x8100, a value of 8100
 in hexadecimal. When a frame has the VLAN EtherType
 equal to 8100, this frame carries the tag IEEE 802.1Q.

 0x88A8 - Specifies EtherType value 0x88A8, a value of
 88A8 in hexadecimal. When a frame has the VLAN
 EtherType equal to 88A8, this frame carries the tag
 IEEE 802.1ad.
 0x9100 - Specifies EtherType value 0x9100, a value of 9100
 in hexadecimal. When a frame has the VLAN
 EtherType equal to 9100, this frame carries the tag
 IEEE standard IEEE 802.1Q-1998.
 0x9200 - Specifies EtherType value 0x9200, a value of 9200
 in hexadecimal.
 -vlan_id_outer_step
 The amount by which the specified outer VLAN ID
 (-vlan_outer_id) increments for subsequent messages. This
 argument allows users to configure VLAN IDs in a flexible
 way.
 -vlan_id
 Specifies the inner VLAN to which the test messages belongs.
 Possible values range from 0 to 4095. The default is 1.
 -vlan_ether_type
 Specifies the VLAN EtherType to use for the test
 message(s).Possible values are 0x8100, 0x88A8, 0x9100 and 
EOAM Functions
246
 0x9200. The default is 0x8100.
 0x8100 - Specifies EtherType value 0x8100, a value of 8100
 in hexadecimal. When a frame has the VLAN EtherType
 equal to 8100, this frame carries the tag IEEE 802.1Q.
 0x88A8 - Specifies EtherType value 0x88A8, a value of 88A8
 in hexadecimal. When a frame has the VLAN EtherType
 equal to 88A8, this frame carries the tag IEEE 802.1ad.
 0x9100 - Specifies EtherType value 0x9100, a value of 9100
 in hexadecimal. When a frame has the VLAN EtherType
 equal to 9100, this frame carries the tag IEEE 802.1Q-1998.
 0x9200 - Specifies EtherType value 0x9200, a value of 9200
 in hexadecimal.
 -vlan_id_step
 Defines the step size by which the VLAN ID is incremented.
 Possible values range from 0 to 4095.
 -sut_ip_address
 Specifies the IP address or Gateway Address for the chassis
 to reach the System Under Test (SUT). This address can be in
 either IPv4 or IPv6 format. The default for IPv4 is
 192.85.1.1. The default for IPv6 is 2001::1.
 -mac_dst
 Specifies the start destination MAC address of the emulated
 E-OAM messages.
 -mac_dst_incr_mode
 Defines how to increment the destination MAC addresses for
 test messages. Possible values are none, increment, list,
 and random.
 none - Indicates the MAC addresses will not be incremented.
 increment - Indicates the MAC address of the target device
 will increment by the step specified in the
 -mac_dst_step argument.
 list - Indicates you must enter the MAC address of the
 target device manually. Specify the list of MAC
 addresses in the -mac_dst_list argument.
 random - Indicates the remote MAC addresses will be
 distributed randomly.
 Note: The decrement mode is not supported.
 -mac_dst_step
 The amount by which to increment the specified destination
 MAC address (-mac_dst) for subsequent messages. You must
 specify this step when you specify "increment" for the
 -mac_dst_incr_mode argument.
 -mac_dst_repeat
 Specifies the number of times a MAC address (-mac_dst) will
 be repeated before the step specified in the -mac_dst_step
 argument is applied to the MAC address for incrementing. The
 default value is 1.
 -mac_dst_list
 Defines the list of target device MAC addresses
 to use for the emulated E-OAM messages. You must
 specify this list when you specify "list" for the
 -mac_dst_incr_mode argument.
 -md_level
 Indicates the Maintenance Domain (MD) Level to be used for 
EOAM Functions
247
 emulated messages. An MD is an administrative domain for
 the purpose of managing and administering a network. An MD
 is assigned a unique MD Level (among eight possible) by the
 administrator, which is useful for defining the hierarchical
 relationship of MDs. MDs may nest or touch but cannot
 intersect. If two MDs nest, the outer MD must have a higher
 MD Level than the inner one. Messages from a lower-level
 MD cannot be switched into a higher-level MD. Possible
 values range from 0 (lowest) to 7 (highest). The default is
 0.
 -md_level_incr_mode
 Defines the increment method of MD Level for test messages.
 Possible values are none, increment, list, and random.
 none - Indicates the MD levels will not be incremented.
 increment - Indicates the MD Level will increment by the
 step specified in the - md_level_step argument.
 list - Indicates you must enter the MD Level manually.
 The list of the MD Levels is defined in the
 -md_level_list argument.
 random - Indicates the MD Level will be distributed
 randomly.
 Note: The decrement mode is not supported.

 -md_level_step
 Specifies the step size in which the MD Level incremented.
 You must specify this step when you specify "increment" for
 the -md_level_incr_mode argument. The default is 1.
 -md_level_repeat
 Specifies the number of times a MD Level should be
 repeated before the step specified in the -md_level_step
 argument is applied to the MD Level for incrementing. The
 default value is 1.
 -md_level_list
 Defines the list of MD levels to use for the
 emulated E-OAM messages. Possible values are lists of
 integers ranging from 0 to 7.
 -oam_standard
 Specifies the Ethernet OAM standard to use, either IEEE
 802.1ag or ITU-T Y1731. Use this argument only if the
 -msg_type is loopback or linktrace. The default is
 ieee_802.1ag.
 -trans_id
 Defines the value for the starting Sequence Number that is
 referred to as Linktrace Message (LTM) Transaction ID for
 Linktrace Messages and Loopback Message (LBM) Transaction ID
 for loopback messages. Each LBM and LTM includes this field,
 which is incremented for each Protocol Data Unit (PDU)
 transmitted for each type, so that consecutively transmitted
 PDUs are in numerical order. The default is 1.
 -ttl
 Defines the time-to-live (TTL) value for emulated messages.
 The TTL is a counter measured in units of seconds that
 gradually decrements to zero, at which point the datagram is
 discarded. Use this option only if the message
 type ( -msg_type) is linktrace. The default is 64.
 -tlv_sender_length
 Defines the size of the Sender ID Type Length Value (TLV).
 With the type value of 1, a Sender ID TLV identifies the
 Bridge on which the transmitting MP is configured and may 
EOAM Functions
248
 also include a management address for that Bridge. This
 option is only valid when the -msg_type is loopback or
 linktrace. The default is 0.
 -tlv_sender_chassis_id
 Define the Sender ID TLV Chassis ID. As a field of Sender
 ID TLV, Chassis ID identifies the chassis. Do not use this
 argument if the Chassis ID Length field
 (-tlv_sender_chassis_id_length) contains 0. Use this option
 only if -msg_type is loopback or linktrace. The default is 0.
 -tlv_sender_chassis_id_length
 Defines the size of the Chassis ID field. If you did not
 specify a chassis ID this argument value is 0. The Chassis
 ID Length field is either 0 or is less than
 (TLV Length field value - 1). Use this option only if
 -msg_type is loopback or linktrace. The default is 0.
 -tlv_sender_chassis_id_subtype
 Defines the format of the Chassis ID field. Use this option
 only if -msg_type is loopback or linktrace. The default is 0.

 -tlv_org_length
 Defines the size of an Organization-Specific TLV.
 Organization-Specific TLV allows different organizations as
 well as individual software and equipment vendors to define
 TLVs that advertise information to remote entities attached
 to the same media. Use this option only if -msg_type is
 loopback or linktrace. The default is 4.
 -tlv_org_oui
 Defines the Organizationally Unique Identifier of an
 Organization-Specific TLV. The OUI is the first 24 bits of a
 MAC address for a network device, which indicates the
 specific vendor for that device as assigned by the IEEE.
 Use this option only if -msg_type is loopback or
 linktrace. The default is 0.
 -tlv_org_subtype
 Defines the format of the Organization-Specific TLV field.
 Use this option only if the -msg_type is loopback or
 linktrace. The default is 0.
 -tlv_org_value
 Defines the value of an Organization-Specific TLV. Use this
 option only if -msg_type is loopback or linktrace. Specify
 this value as hexadecimal characters. The default is 0.
 -tlv_data_length
 Defines the length value of the Data TLV. Data TLV is
 arbitrary data of zero or more octets. Data TLV serves
 several purposes including the transmission of different
 frame sizes to test Mobile Test Unit (MTU) capabilities and
 the testing for data-specific error dependencies. The Data
 TLV shall not be examined or interpreted by the receiver of
 any Connectivity Fault Management (CFM) PDU. Use this option
 only if -msg_type is loopback or linktrace. The default is 5.
 -tlv_data_pattern
 Defines the Data TLV Data pattern, an n-octet (n = Length)
 arbitrary bit pattern. Specify this value as hexadecimal
 characters. Use this option only if -msg_type is loopback.
 The default is 0x0.
 -tlv_test_length
 Specifies the size of the Value field containing the Test
 Pattern and CRC-32. Use this option only if -msg_type is
 test. The default is 20.
 -tlv_test_pattern
EOAM Functions
249
 Identifies the Pattern Type of Test TLV. Possible values are
 null, null_with_crc, prbs, and prbs_with_crc. Use this
 option only if -msg_type is test. The default is null.
 null - Defines Null signal without Cyclic Redundancy Check
 (CRC)-32
 null with crc -Defines Null signal with CRC-32
 prbs -Defines Pseudorandom Bit Sequence (PRBS) 2-31-1
 without CRC-32
 prbs with crc - PRBS 2-31-1 with CRC-32
 -transmit_mode
 Defines the mode of message transmission. Possible values
 are continuous and single_pkt. The random_spaced,
 single_burst, multi_burst, and continuous_burst mode are not
 supported. Use this option only when the -rate_pps is
 specified. The default is single_pkt.
 -pkts_per_burst
 Indicates the number of packets each port transmits in a
 single burst. The default is 1.

 -rate_pps
 Defines the traffic transmission rate in packets per second.
 This value refers to the packet rate of a given packet size
 that will load up an interface to 100%. The default is 1.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -mac_local_repeat
 -mac_local_list
 -mac_remote_repeat
 -mac_remote_list
 -mac_dst_repeat
 -mac_dst_list
 -md_level_repeat
 -md_level_list
 -trans_id_repeat
 -trans_id_list
 -vlan_id_outer_count
 -vlan_id_count

Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -burst_delay
 -burst_loop_count
 -encap
 -mac_local_repeat
 -msg_timeout
 -renew_period
 -renew_test_msgs
 -trans_id_incr_mode
 -trans_id_list
 -trans_id_repeat
 -trans_id_step
 -tlv_user_length
 -tlv_user_type
 -tlv_user_value
 -vlan_id_count
 -vlan_id_outer_count
 -vlan_id_outer_repeat
EOAM Functions
250
 -vlan_id_repeat
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The handle that identifies the E-OAM message emulators
 created by the sth::emulation_oam_config_msg function when
 you use "-mode create" to create a new E-OAM message
 emulators.
 When you want to modify or reset an E-OAM message emulator,
 you specify the handle as the value to the -handle
 argument.

 status Success (1) or failure (0) of the operation.
 log_msg An error message (if the operation failed).
Description:
 The sth::emulation_oam_config_msg function creates, modifies, or resets
 message emulators from the specified port. Use the -mode argument to
 specify the action to perform. (See the -mode argument description for
 information about the actions.)
 When you create an E-OAM message emulator, use the -port_handle
 argument to specify the Spirent HLTAPI port that the emulated router will use.
 (The port handle value is contained in the keyed list returned by the connect
 function.)
 In addition to specifying the port (-port_handle), you must also provide
 the -mode create argument when you create an E-OAM message emulator.
 When you create an E-OAM message emulator, Spirent HLTAPI automatically
 starts the message communication.
 Each E-OAM message emulator establishes adjacency with the neighboring
 SUT.
Examples:
 #### HLTAPI for Tcl ####
 For creating and configuring an E-OAM message, there must already exist a
 port with handle $p1:
 set oamStandard "ieee_802.1ag"
 set dstAddrType "unicast"
 set transmitMode "continuous"
 set msgType "loopback"
 The following example creates and configures a new E-OAM message:
 set returnKlist [::sth::emulation_oam_config_msg -mode create \
 -port_handle $p1 \
 -count 1 \
 -dst_addr_type $dstAddrType \
 -msg_type $msgType \
 -mac_local 00:94:01:00:00:01 \
 -mac_local_incr_mode increment \
 -mac_local_step 00:00:00:00:00:02 \
 -mac_remote 00:94:01:00:01:01 \
 -mac_remote_incr_mode increment \
 -mac_remote_step 00:00:00:00:00:02 \
 -mac_remote_repeat 2 \
 -vlan_outer_id $vlanOuterId \
 -vlan_outer_ether_type 0x88A8 \
 -vlan_id_outer_step 5 \
 -vlan_id $vlanId \
 -vlan_ether_type 0x88A8 \
 -vlan_id_step 5 \
 -oam_standard $oamStandard \
 -mac_dst 00:94:01:00:01:01 \
 -mac_dst_step 00:00:00:00:00:02 \
EOAM Functions
251
 -sut_ip_address 10.10.13.1 \
 -md_level 2\
 -md_level_incr_mode increment \
 -md_level_step 1\
 -md_level_repeat 2 \
 -trans_id 100 \
 -tlv_sender_length 10 \
 -tlv_sender_chassis_id 21 \
 -tlv_sender_chassis_id_length 10 \
 -tlv_sender_chassis_id_subtype 5 \
 -tlv_org_length 10 \
 -tlv_org_oui 22 \
 -tlv_org_subtype 11 \
 -tlv_org_value FF \
 -tlv_data_length 10\
 -tlv_data_pattern 0xAA \
 -transmit_mode $transmitMode \
 -pkts_per_burst 3 \
 -rate_pps 5 \
 set eoamMsgHandle [lindex [keylget returnKlist handle] 0]
 Sample output for example shown above:
 {handle msg_handle1} {status 1}
 The following example modifies the created E-OAM message:
 set cmdReturn [::sth::emulation_oam_config_msg -mode modify \
 -handle $eoamMsgHandle \
 -dst_addr_type $dstAddrType \
 -mac_local 00:94:01:00:10:01 \
 -mac_remote 00:94:01:10:01:01 \
 -vlan_outer_id 2100 \
 -vlan_outer_ether_type 0x9100 \
 -vlan_id 2200 \
 -vlan_ether_type 0x88A8 \
 -oam_standard $oamStandard \
 -mac_dst 00:94:01:10:01:01 \
 -sut_ip_address 13.1.0.1 \
 -ttl 250 \
 -md_level 3 \
 -trans_id 10 \
 -tlv_sender_length 10 \
 -tlv_sender_chassis_id 21 \
 -tlv_sender_chassis_id_length 10 \
 -tlv_sender_chassis_id_subtype 5 \
 -tlv_org_length 10 \
 -tlv_org_oui 22 \
 -tlv_org_subtype 11 \
 -tlv_org_value FF \
 -tlv_data_length 10\
 -tlv_data_pattern 0xAA \
 -transmit_mode $transmitMode \
 -pkts_per_burst 4 \
 -rate_pps 15]
 Sample output for example shown above:
 {handle msg_handle1} {status 1}
 The following example deletes the created E-OAM message:
 set cmdReturn [::sth::emulation_oam_config_msg -mode reset \
 -handle $eoamMsgHandle]
 Sample output for example shown above: {status 1}
 #### HLTAPI for Python ####
 The following example creates and configures a new E-OAM message:
 device_ret0 = sth.emulation_oam_config_msg (
 mode = 'create',
 oam_standard = 'ieee_802.1ag',
 md_level = '0',
 mac_dst = '00:94:01:00:01:02',
 dst_addr_type = 'unicast',
EOAM Functions
252
 transmit_mode = 'continuous',
 trans_id = '100',
 tlv_sender_length = '10',
 tlv_sender_chassis_id_length= '10',
 tlv_sender_chassis_id_subtype= '5',
 tlv_sender_chassis_id= '21',
 tlv_org_length = '10',
 tlv_org_oui = '22',
 tlv_org_subtype = '11',
 tlv_org_value = 'FF',
 tlv_data_length = '10',
 tlv_data_pattern = '0xAA',
 mac_remote = '00:94:01:00:01:01',
 msg_type = 'loopback',
 port_handle = port_handle[0],
 vlan_id = '1000',
 vlan_id_step = '1',
 vlan_outer_id = '100',
 vlan_id_outer_step = '1',
 mac_local = '00:94:01:00:00:01');

 Sample Output: {'status': '1', 'handle': 'eoammaintenancepointconfig1'}
 #### HLTAPI for Perl ####
 The following example creates and configures a new E-OAM message:
 my %device_ret0 = sth::emulation_oam_config_msg (
 mode => 'create',
 oam_standard => 'ieee_802.1ag',
 md_level => '0',
 mac_dst => '00:94:01:00:01:02',
 dst_addr_type => 'unicast',
 transmit_mode => 'continuous',
 trans_id => '100',
 tlv_sender_length => '10',
 tlv_sender_chassis_id_length=> '10',
 tlv_sender_chassis_id_subtype=> '5',
 tlv_sender_chassis_id=> '21',
 tlv_org_length => '10',
 tlv_org_oui => '22',
 tlv_org_subtype => '11',
 tlv_org_value => 'FF',
 tlv_data_length => '10',
 tlv_data_pattern => '0xAA',
 mac_remote => '00:94:01:00:01:01',
 msg_type => 'loopback',
 port_handle => "$hport[1]",
 vlan_id => '1000',
 vlan_id_step => '1',
 vlan_outer_id => '100',
 vlan_id_outer_step => '1',
 mac_local => '00:94:01:00:00:01');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'eoammaintenancepointconfig1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes: None
End of Procedure Header

sth::emulation_oam_config_topology
Name:
 sth::emulation_oam_config_topology
EOAM Functions
253
Purpose:
 Configures Topology Emulation for E-OAM on the specified test port. The
 chassis emulates a series of E-OAM-aware devices in a structured topology.
 Also, it optionally provisions Continuity Check database entries.
Synopsis:
 sth::emulation_oam_config_topology
 -mode create -port_handle <port_handle> | -mode {modify|reset} -handle <handle>
 [count<integer>]
 [mac_local <aa:bb:cc:dd:ee:ff>]
 [mac_local_incr_mode <none|increment|list|random>]
 [mac_local_step <aa:bb:cc:dd:ee:ff>]
 [mac_local_list < mac local type> :< comma separated segment list>]
 [mac_remote <aa:bb:cc:dd:ee:ff>]
 [mac_remote_incr_mode <none|increment|list|random>]
 [mac_remote_step <aa:bb:cc:dd:ee:ff>]
 [mac_remote_repeat <integer>]
 [mac_remote_list < mac remote type >: < comma separated segment list >]
 [vlan_outer_id <0-4095>]
 [vlan_outer_ether_type <0x8100 | 0x88A8 | 0x9100 | 0x9200>]
 [vlan_id_outer_step <0-4095>]
 [vlan_id <0-4095>]
 [vlan_ether_type <0x8100 | 0x88A8 | 0x9100 | 0x9200>]
 [vlan_id_step <0-4095>]
 [sut_ip_address <a.b.c.d > | <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [oam_standard <ieee_802.1ag | itut_y1731>]
 [responder_loopback <0|1>]
 [responder_link_trace <0|1>]
 [continuity_check <0|1>]
 [continuity_check_interval <100ms | 1s |10s | 1min | 10min>]
 [continuity_check_remote_defect_indication <0|1>]
 [continuity_check_ucast_mac_dst <aa:bb:cc:dd:ee:ff>]
 [continuity_check_mcast_mac_dst <0|1>]
 [continuity_check_burst_size <1 - 8192>]
 [domain_level <level0 | level1 | level2 | level3 | level4 | level5 | level6
 | level7>]
 [md_level <0-7>]
 [md_name_format <none | domain_name | mac_addr | char_str | icc_based>]
 [md_name <string>]
 [md_mac <aa:bb:cc:dd:ee:ff>]
 [md_integer <0-65535>]
 [short_ma_name_format <primary_vid | char_str | integer | rfc_2685_vpn_id>]
 [short_ma_name_value <string>]
 [mip_count <integer>]
 [mep_id <1-8191>]
 [mep_id_incr_mode <none | increment | list | random>]
 [mep_id_step <integer>]
 [mep_count <1-8192>]
 [mep_id_list <mep id type> : <comma separated segment list>]
Arguments:
 -port_handle
 Specifies the port on which to configure the E-OAM
 topology emulation.
 -handle
 Defines the unique handle to which you must refer, when
 modifying or destroying specific emulator instances.
 -mode
 Specifies the action to perform on the specified test port.
 This argument is mandatory. Possible values are create,
 modify, and reset.
 The modes are described below:
 create - Creates Ethernet OAM topology emulations on the
 port specified with the -port_handle argument. You
 must specify the -port_handle argument.
 modify - Changes the configuration of the Ethernet OAM 
EOAM Functions
254
 topology emulations identified by the -handle
 argument. You must specify the -handle argument.
 reset - Deletes all of the E-OAM topology emulations
 specified in the -handle argument. You must specify
 the -handle argument.
 -count
 Defines the number of E-OAM message emulators. The
 default is 1.
 -mac_local
 Defines the MAC address of the E-OAM message emulators.
 -mac_local_incr_mode
 Defines the increment method of the local MAC address.
 Possible values are none, increment, list, and random.
 none - Indicates the local MAC address will not be
 incremented.
 increment - Indicates the local MAC address increments
 by the step specifies in the -mac_local_step
 argument.
 list - Indicates you must enter the local MAC addresses
 manually. Specify the list of the local MAC addresses
 in the -mac_local_list argument.
 random - Indicates the local MAC addresses should be
 distributed randomly.
 Note: The decrement mode is not supported.
 -mac_local_step
 Specifies the step size in which the local MAC address is
 incremented. You must specify this step when you specify
 "increment" for the -mac_local_incr_mode argument. The
 default is 00:00:00:00:00:01.

 -mac_local_list
 Defines the list of local MAC addresses that should be used
 for the emulated E-OAM messages. Local MAC addresses can be
 used as MEPs that issue emulated E-OAM messages or MIPs that
 respond to these messages on request. Specify this argument
 a list of MAC addresses.

 -mac_remote
 Indicates the MAC address of the device under test (DUT).
 Remote MAC addresses can be used as MEPs that issue
 emulated E-OAM messages or MIPs that respond to these
 messages on request.

 -mac_remote_incr_mode
 Defines the method to increment the DUT MAC address.
 Possible values are none, increment, list, and random.
 none - Indicates the remote MAC address will not be
 incremented.
 increment - Indicates the remote MAC address should
 increment by the step specified in the
 -mac_remote_step argument.
 list - Indicates you must enter the remote MAC addresses
 manually. The list of the remote MAC addresses is
 defined in the -mac_remote_list argument.
 random - Indicates the remote MAC addresses should be
 distributed randomly.
EOAM Functions
255
 Note: The decrement mode is not supported.
 -mac_remote_step
 Specifies the step size in which the remote MAC address is
 incremented. You must specify this step when you specify
 "increment" for the -mac_remote_incr_mode argument. The
 default is 00:00:00:00:00:01.
 -mac_remote_repeat
 Specifies the number of times a remote MAC address should be
 repeated before the step specified in the -mac_remote_step
 argument is applied to the MAC address for incrementing. The
 default value is 1.
 -mac_remote_list
 Defines the list of remote MAC addresses that should be used
 for the emulated E-OAM messages. You must specify this list
 when you specify "list" for the -mac_remote_incr_mode
 argument.

 -vlan_outer_id
 Specifies Virtual Local Area Network (VLAN) ID for the outer
 VLAN tag that is an encapsulation of the test message(s).
 VLAN ID is the identification of the VLAN, which is
 basically used by the standard 802.1Q. Possible values range
 from 0 to 4095. The default is 1.
 -vlan_outer_ether_type
 Indicates the value of VLAN EtherType to be used for the
 test message(s). EtherType is a two-octet field in an
 Ethernet frame, as defined by the Ethernet II framing
 networking standard. It is used to indicate which protocol
 is encapsulated in the frame data. Possible values are
 0x8100, 0x88A8, 0x9100, and 0x9200.
 0x8100 - Specifies EtherType value 0x8100, a value of 8100
 in hexadecimal equal to 8100, this frame carries
 the tag IEEE 802.1Q.

 0x88A8 - Specifies EtherType value 0x88A8, a value of
 88A8 in hexadecimal. When a frame has the VLAN
 EtherType equal to 88A8, this frame carries the tag
 IEEE 802.1ad.
 0x9100 - Specifies EtherType value 0x9100, a value of 9100
 in hexadecimal. When a frame has the VLAN EtherType
 equal to 9100, this frame carries the tag IEEE
 standard IEEE 802.1Q-1998.
 0x9200 - Specifies EtherType value 0x9200, a value of 9200
 in hexadecimal.
 -vlan_id_outer_step
 Specifies the increment for the outer VLAN ID when using
 ethernet_ii_qinq encapsulation. A step value of zero
 indicates no stepping occurs. Note: This parameter only
 applies to Ethernet interfaces. The increment is applied via
 addition modulo 4096. Possible values range from 0 to 4095.
 The default is 1.
 -vlan_id
 Specifies the inner VLAN to which the test messages belongs.
 Possible values range from 0 to 4095. The default is 1.
 -vlan_ether_type
 Defines VLAN EtherType to be used for the test message(s).
 Possible values are 0x8100, 0x88A8, 0x9100, and 0x9200.
 0x8100- Specifies EtherType value 0x8100, a value of 8100 in
 hexadecimal. When a frame has the VLAN EtherType
 equal to 8100, this frame carries the tag 
EOAM Functions
256
 IEEE 802.1Q.
 0x88A8 - Specifies EtherType value 0x88A8, a value of 88A8
 in hexadecimal. When a frame has the VLAN EtherType
 equal to 88A8, this frame carries the tag IEEE
 802.1ad.
 0x9100 - Specifies EtherType value 0x9100, a value of 9100
 in hexadecimal. When a frame has the VLAN EtherType
 equal to 9100, this frame carries the tag IEEE
 802.1Q-1998.
 0x9200 - Specifies EtherType value 0x9200, a value of 9200
 in hexadecimal.
 -vlan_id_step
 Defines the step size by which the VLAN ID is incremented.
 Possible values range from 0 to 4095.
 -sut_ip_address
 Specifies the IP address / Gateway Address for the chassis to
 reach the SUT. It can be in either IPv4 or IPv6 format. The
 default for IPv4 is 192.85.1.1. The default for IPv6 is 2001::1.
 -oam_standard
 Specifies the Ethernet OAM standard to be used, either IEEE
 802.1ag or ITU-T Y1731. This will affect other available options.
 This argument is only valid when the -msg_type is loopback or
 linktrace. The default is ieee_802.1ag.
 -responder_loopback
 Defines that the Loopback message (LBM) responding is enabled or
 not. Possible values are 0 (disabled) and 1 (enabled). For
 verifying the connectivity between MEPs and MIPs, the LBM is
 initiated by a MEP. When the Loopback message responding is
 enabled, the LBM received by the MP Loopback Responder may be
 examined for validity and discarded if invalid. If the LBM is
 validated, it will be transmitted to the receiving MP that
 responds to the LBM with a Loopback Reply (LBR). The default is
 1.
 -responder_link_trace
 Defines that the Linktrace responding is enabled or not.
 Possible values are 0 (disabled) and 1 (enabled). Linktrace
 responding is performed by the Linktrace Responder
 associated with a Bridge. The default is 1.

 -continuity_check
 Defines whether the Continuity Check messages are sent or
 not. Possible values are 0 and 1. If it is set to 0, the
 Continuity Check messages (CCM) are not sent. If it is set
 to 1, the Check messages are sent. CCMs are "heartbeat"
 messages issued periodically by MEPs. They allow MEPs to
 detect loss of service connectivity amongst themselves. They
 also allow MEPs to discover other MEPs within a domain, and
 allow MIPs to discover MEPs. The default is 1.

 -continuity_check_interval
 Defines the interval between CCMs. Possible values are
 100ms, 1s, 10s, 1min, and 10min. The default is 1s.
 -continuity_check_remote_defect_indication
 Specifies the Remote Defect Indication in Continuity Check
 Messages should be enabled when Loss of Continuity (LOC)
 is detected for expected remote MEP. Possible values are
 0(disabled) and 1(enabled). The Remote Defect Indication
 (RDI) is a single bit carried by the CCM. The absence of RDI
 in a CCM indicates that the transmitting MEP is receiving
 CCMs from all configured MEPs. The default is 1.

 -continuity_check_ucast_mac_dst
EOAM Functions
257
 Specifies the destination MAC address for the CCM. The
 default is 00:00:00:00:00:01.
 -continuity_check_mcast_mac_dst
 Defines whether Multicast MAC address is used for CCM,
 the address is picked automatically based on the MD level.
 Possible values are 0 and 1. The default is 1.
 -continuity_check_burst_size
 Defines how many CCMs to send per burst. Possible
 values range from 1 to 8192.The default is 1000. This
 argument is valid only when the -continuity_check argument
 is enabled.

 -domain_level
 Specifies that the chassis simulates a topology of Ethernet
 OAM MPs spanning across multiple levels. Possible values are
 level0, level1, level2, level3, level4, level5, level6, and
 level7. The default is level0.

 -md_level
 Define the Maintenance Entity Group(MEG) level. The MEG
 Level distinguishes between the OAM flows of nested
 MEGs. Eight MEG levels are available to accommodate
 different network deployment scenarios. Possible values
 range from 0 to 7. The default is 0.

 -md_name_format
 Defines the format of the MEG ID. Possible values are none,
 domain_name, mac_addr, char_str, and icc_based. when the
 -md_name_format argument is specified as mac_addr, the MEG
 ID is defined by -md_mac and -md_integer together. The
 default is char_str.
 none - Specifies there is no MEG ID.
 domain_name - Specifies that the MEG ID is defined by the
 name of the domain to which it belongs.
 mac_addr - Specifies that the MEG ID is defined by the
 relevant MAC address.
 char_str - Specifies that the MEG ID is a string of
 characters.
 icc_based - Specifies that the MEG ID is an ICC string.

 -md_name
 Defines the character string value of the MD name. Use this
 argument when the -md_name_format
 argument is set to char_str mode. The default is DEFAULT.
 -md_mac
 Defines the MAC address value of the Maintenance Domain
 name. Use this argument when the
 -md_name_format argument is set to mac_addr mode.
 The default is 00:00:00:00:00:01.

 -md_integer
 Defines the 2-octet integer value of the Maintenance Domain
 name. Use this argument when the
 -md_name_format argument is set to mac_address. Possible
 values range from 0 to 65535. The default is 0.

 -short_ma_name_format
 Defines the format of the short MA name. Possible values
 are primary_vid ,char_str, integer, and rfc_2685_vpn_id. The
 default is an integer.
 primary_vid - The format of the short MA name
 is the primary VLAN ID.
EOAM Functions
258
 char_str - The format of the short MA name is
 a string of characters.
 integer - The format of the short MA name is
 an integer.
 rfc_2685_vpn_id - The format of the short MA name
 is the VPN ID using the RFC 2685
 Standard.

 -short_ma_name_value
 Defines the Value for the Maintenance Domain name. Specify
 a string of characters for this argument. The default is
 DEFAULT.
 -mip_count
 Defines the number of simulated MIPs for a particular domain
 level, connected in a series. The default is 1.
 -mep_count
 Defines the number of simulated MEPs for the specified
 domain level. Possible values range from 1 to 8192.
 -mep_id
 Defines the MEP ID for the simulated end point of the
 specified domain level. Possible values range from 1 to
 8191. The default is 1.

 -mep_id_incr_mode
 Defines the method to increment of the MEP ID.
 none - Indicates the MEP ID will not be incremented.
 increment - Indicates the MEP ID increments by the step
 specifies in the -mep_id_step argument.
 list - Indicates the MEP IDs should be inputted. The list
 of MEP IDs is specified by the -mep_id_list argument.
 random - Indicates the MEP IDs should be distributed
 randomly.
 Note: The decrement mode is not supported.
 -mep_id_step
 The amount by which to increment MEP IDs (-mep_id) for
 subsequent messages.
 -mep_id_list
 Defines the list of MEP IDs to use for the
 emulated E-OAM messages.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -count
 -mac_local_list
 -mac_local_repeat
 -mac_remote_list
 -mac_remote_repeat
 -mep_id_list
 -mep_id_repeat
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
EOAM Functions
259
 -encap
 -vlan_id_outer_count
 -vlan_id_outer_repeat
 -vlan_id_count
 -vlan_id_repeat
 -responder_latency
 -spanning_tree_broadcast_domain
 -continuity_check_burst_delay
 -fault_alarm_interval
 -fault_alarm_signal
 -fault_alarm_locked
 -md_name_length
 -short_ma_name_length
 -mac_local_repeat
 -mep_id_repeat
 -mep_port_behavior
 -group_mp_ingress_egress
 -ccdb_oam_standard
 -ccdb_vlan_outer_id
 -ccdb_vlan_id
 -ccdb_md_level
 -ccdb_mac
 -ccdb_mep_id
 -ccdb_md_name_format
 -ccdb_md_name_length
 -ccdb_md_name
 -ccdb_md_mac
 -ccdb_md_integer
 -ccdb_short_ma_name_format
 -ccdb_short_ma_name_length
 -ccdb_short_name_value
 -ccdb_expected_connectivity
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The handle of E-OAM topology returned when you use "-mode
 create" to create MPs with E-OAM protocol.

 status Success (1) or failure (0) of the operation.
 log_msg Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log_msg value is null
Description:
 The sth::emulation_oam_config_topology function creates, modifies or resets
 MPs on the specified port. Use the -mode argument to specify the action to
 perform. (See the -mode argument description for information about the
 actions.)
 When you create a MP, use the -port_handle argument to specify the Spirent
 HLTAPI port that the MP will use. (The port handle value is contained in
 the keyed list returned by the connect function.)
 In addition to specifying the port (-port_handle), you must also provide
 the -mode create when you create a MP:
 When you create a MP, Spirent HLTAPI automatically starts the message
 communication.
 If the creation/configuration/delete fails, the Spirent HLTAPI returns an
 error message. For example, if you attempt to configure a non-existing
 topology handle under modify mode, an error message will be returned.
Examples:
 #### HLTAPI for Tcl ####
 There must already exist a port with handle $p1
 set oamStandard "ieee_802.1ag"
EOAM Functions
260
 set dstAddrType "unicast"
 set transmitMode "continuous"
 The following example creates and configures a new E-OAM topology:
 set returnKlist [::sth::emulation_oam_config_topology -mode create \
 -port_handle $p1 \
 -count 1 \
 -mip_count 2 \
 -mep_count 2 \
 -mac_local 00:94:01:00:02:01 \
 -mac_local_incr_mode increment \
 -mac_local_step 00:00:00:00:00:01 \
 -mac_remote 00:94:01:00:03:01 \
 -mac_remote_incr_mode increment \
 -mac_remote_step 00:00:00:00:00:01 \
 -vlan_outer_id $vlanOuterId \
 -vlan_outer_ether_type 0x8100 \
 -vlan_id $vlanId \
 -vlan_ether_type 0x9200 \
 -sut_ip_address 192.168.1.1 \
 -oam_standard $oamStandard \
 -responder_loopback 1 \
 -continuity_check 1 \
 -continuity_check_interval 100ms \
 -continuity_check_ucast_mac_dst 00:94:01:10:01:01 \
 -continuity_check_burst_size 3 \
 -md_level 1 \
 -md_name_format mac_addr \
 -md_mac 00:94:01:00:02:00 \
 -md_integer 4 \
 -short_ma_name_format char_str \
 -short_ma_name_value Sh_MA_ \
 -mep_id 10 \
 -mep_id_incr_mode increment \
 -mep_id_step 1]
 set eoamTopHandle [lindex [keylget returnKlist handle] 0]
 Sample output for example shown above:
 {handle topology_handle1} {status1}
 The following example modifies the created E-OAM topology:
 set returnKlist [::sth::emulation_oam_config_topology -mode modify \
 -handle $eoamTopHandle \
 -mac_local 00:94:01:00:02:01 \
 -mac_local_incr_mode increment \
 -mac_local_step 00:00:00:00:00:02 \
 -mac_remote 00:94:01:00:03:02 \
 -responder_loopback 0 \
 -responder_link_trace 0 \
 -continuity_check 1 \
 -continuity_check_interval 1s \
 -md_level 2 \
 -md_name_format domain_name \
 -md_name cisco.com \
 -short_ma_name_format integer \
 -short_ma_name_value 1000 \
 -mep_id 100 \
 -mep_id_incr_mode increment \

 Sample output for example shown above:
 {handle topology_handle1} {status 1}
 The following example deletes the created E-OAM topology:
 set cmdReturn [::sth::emulation_oam_config_topology -mode reset \
 -handle $eoamTopHandle]
 Sample output for example shown above: {status 1}
 #### HLTAPI for Python ####
 The following example creates and configures a new E-OAM topology:
EOAM Functions
261
 device_ret0 = sth.emulation_oam_config_topology (
 mode = 'create',
 mip_count = '2',
 mep_count = '3',
 port_handle = port_handle[0],
 mac_local = '00:94:01:00:02:01',
 mac_local_incr_mode = 'increment',
 mac_local_step = '00:00:00:00:00:01',
 vlan_outer_id = '1000',
 vlan_id = '100',
 sut_ip_address = '192.168.1.1',
 mep_id = '3',
 mac_remote = '00:94:01:10:01:01',
 mep_id_incr_mode = 'increment',
 mep_id_step = '1',
 mac_remote_incr_mode= 'increment',
 mac_remote_step = '00:00:00:00:00:01',
 continuity_check_mcast_mac_dst= 'true',
 continuity_check_burst_size= '3',
 responder_link_trace= 'true',
 responder_loopback = 'true',
 continuity_check_remote_defect_indication= '1',
 short_ma_name_value = 'MA_1',
 md_name = 'DEFAULT',
 md_name_format = 'icc_based',
 oam_standard = 'itut_y1731',
 short_ma_name_format= 'char_str',
 continuity_check_interval= '100ms',
 md_level = '2');
 Sample Output: {'status': '1', 'handle': '::sth::Eoam::port1.TopologyHandleArr0'}
 #### HLTAPI for Perl ####
 The following example creates and configures a new E-OAM topology:
 my %device_ret0 = sth::emulation_oam_config_topology (
 mode => 'create',
 mip_count => '2',
 mep_count => '3',
 port_handle => "$hport[1]",
 mac_local => '00:94:01:00:02:01',
 mac_local_incr_mode => 'increment',
 mac_local_step => '00:00:00:00:00:01',
 vlan_outer_id => '1000',
 vlan_id => '100',
 sut_ip_address => '192.168.1.1',
 mep_id => '3',
 mac_remote => '00:94:01:10:01:01',
 mep_id_incr_mode => 'increment',
 mep_id_step => '1',
 mac_remote_incr_mode=> 'increment',
 mac_remote_step => '00:00:00:00:00:01',
 continuity_check_mcast_mac_dst=> 'true',
 continuity_check_burst_size=> '3',
 responder_link_trace=> 'true',
 responder_loopback => 'true',
 continuity_check_remote_defect_indication=> '1',
 short_ma_name_value => 'MA_1',
 md_name => 'DEFAULT',
 md_name_format => 'icc_based',
 oam_standard => 'itut_y1731',
 short_ma_name_format=> 'char_str',
 continuity_check_interval=> '100ms',
 md_level => '2');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = '::sth::Eoam::port1.TopologyHandleArr0';
 $VAR3 = 'status';
 $VAR4 = '1';
EOAM Functions
262
Notes: None
End of Procedure Header

sth::emulation_oam_control
Name:
 sth::emulation_oam_control
Purpose:
 Starts, stops, or resets E-OAM emulations.
Synopsis:
 sth::emulation_oam_control
 -action {start|stop|reset}
 [-handle <handle>]
 [-port_handle <port_handle>]
Arguments:
 -handle
 Identifies the E-OAM emulation to start, stop or reset.
 -action Defines the actions performed upon the E-OAM emulation.
 Possible values are start, stop, and reset. The disable_link,
 disable_terminating_link, enable_all, lock_link, and
 unlock_all modes are not supported.
 Start - Starts the message emulator for the specified port.
 Stop - Stops the message emulator for the specified port.
 Reset - Resets the message emulators for the specified port.
 This argument is mandatory.
 -port_handle
 Defines the port on which to control E-OAM emulation.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -link_level
 -md_level

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status - Retrieves a value indicating the success (1) or
 failure (0) of the operation.
 log_msg - Retrieves a message describing the last error
 that occurred during the operation. If the operation was
 successful - {status 1} - the log_msg value is null.
Description:
 The sth::emulation_oam_control function controls the routing of
 traffic through the specified ports. You can use the function to perform
 several actions: starting message emulators, stopping message emulators,
 and resetting message emulators.
 When you call the sth::emulation_oam_control function, you specify a port
 handle. Spirent HLTAPI applies the specified action to all of the
 emulated E-OAM message emulators associated with the specified port.
EOAM Functions
263
Examples:
 #### HLTAPI for Tcl ####
 Assume an E-OAM message handle eoamMsgHandle.
 To start the specified E-OAM message emulator:
 sth::emulation_oam_control -mode start -handle $eoamMsgHandle
 To stop the E-OAM message emulator:
 sth::emulation_oam_control -mode stop -handle $eoamMsgHandle
 Sample Output: {status 1}
 #### HLTAPI for Python ####
 To start the specified E-OAM message emulator:

 ctrl_ret1 = sth.emulation_oam_control (
 handle = device_list,
 action = 'start');

 Sample Output: {'status': '1'}

 #### HLTAPI for Perl ####
 To start the specified E-OAM message emulator:

 %ctrl_ret1 = sth::emulation_oam_control (
 handle => "$device_list",
 action => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes: None
End of Procedure Header
sth::emulation_oam_info
Name:
 sth::emulation_oam_info
Purpose:
 Returns information about the E-OAM configuration.
Synopsis:
 sth::emulation_oam_info
 -mode {aggregate|session}
 [-handle <handle>]
 [-port_handle <port_handle>}]
 [-action <get_topology_stats|get_message_stats>]
Arguments:
 -handle
 Specifies the message emulator from which to extract E-OAM
 session data. You must specify -handle or -port_handle, but
 not both.
 -mode
 Specifies the desired mode for information return. Possible
 values are aggregate and session. This argument is mandatory.
 aggregate - Returns transmitted and received statistics for
 the specified port.
 session - Returns statistics for topology, if -action is
 specified as get_topology_stats. Returns
 statistics for message, if -action is specified 
EOAM Functions
264
 as get_message_stats.
 -port_handle
 Specifies the ports from which to extract E-AOM session
 data. You must specify -handle or -port_handle, but not both.
 -action
 Specifies what type of data to poll from the port specified in
 the -port_handle argument. Possible values are get_topology_stats
 and get_message_stats.

 get_topology_stats - Retrieves all E-OAM topology statistics
 for the specified port.
 get_message_stats - Retrieves all E-OAM message statistics
 for the specified port.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or
 failure (0) of the operation.
 log_msg Retrieves a message describing the last error
 that occurred during the operation. If the operation
 was successful - {status 1} - the log value is null.

 Link Trace messages: Not supported in Spirent HLTAPI.
 linktrace.state_waiting
 Number of transitions to the Waiting state
 linktrace.state_received
 Number of transitions to the Received state
 linktrace.state_failed
 Number of transitions to the Failed state
 linktrace.receive_ltr_count
 Number of Link Trace Reply (LTR) packets received

 linktrace.transmit_ltm_count
 Number of Link Trace Message (LTM) packets transmitted
 linktrace.min_response_time
 Minimum Link Trace response time, in milliseconds
 (elapsed time from sending a Link Trace Message to
 receiving a Link Trace Reply)
 linktrace.avg_response_time
 Average Link Trace response time, in milliseconds
 (elapsed time from sending a Link Trace Message to
 receiving a Link Trace Reply)
 linktrace.max_response_time
 Maximum Link Trace response time, in milliseconds
 (elapsed time from sending a Link Trace Message to
 receiving a Link Trace Reply)
 Loopback Messages: Not supported in Spirent HLTAPI

 loopback.state_waiting
 Number of transitions to the Waiting state
 loopback.state_received
 Number of transitions to the Received state
EOAM Functions
265
 loopback.state_failed
 Number of transitions to the Failed state
 loopback.receive_lbr_count
 Number of Loopback Reply (LBR) packets received
 loopback.transmit_lbm_count
 Number of Loopback Message (LBM) packets transmitted
 loopback.min_response_time
 Minimum Loopback response time, in milliseconds
 (elapsed time from sending a Loopback Message to
 receiving a Loopback Reply).
 loopback.avg_response_time
 Average Loopback response time, in milliseconds
 (elapsed time from sending a Loopback Message to
 receiving a Loopback Reply).
 loopback.max_response_time
 Maximum Loopback response time, in milliseconds
 (elapsed time from sending a Loopback Message to
 receiving a Loopback Reply)
 Test Messages: Not supported in Spirent HLTAPI
 tst.transmit_count
 Number of TST packets transmitted
 The following keys are returned, when you specify -mode aggregate.
 rx
 fm_pkts Number of all frame pkts_tx in the port. Sum
 of lbm_pkts, ltm_pkts, and ccm_pkts.
 lbm_pkts Number of LBM packets transmitted in the port
 ltm_pkts Number of LTM packets transmitted in the port
 ccm_pkts Number of CCM packets transmitted in the port
 ais_pkts Not supported in Spirent HLTAPI
 lck_pkts Not supported in Spirent HLTAPI
 tst_pkts Not supported in Spirent HLTAPI
 aps_pkts Not supported in Spirent HLTAPI
 mcc_pkts Not supported in Spirent HLTAPI
 exm_pkts Not supported in Spirent HLTAPI
 exr_pkts Not supported in Spirent HLTAPI
 vsm_pkts Not supported in Spirent HLTAPI
 vsr_pkts Not supported in Spirent HLTAPI

 tx
 fm_pkts Sum of lbm_pkts, ltm_pkts, and ccm_pkts below
 lbm_pkts In EoamLoopbackResults, sum of
 DroppedPktCount, NumOfTransactionIdMismatches
 and NumOfTimeouts
 ltm_pkts In EoamLinkTraceResults, sum of
 DroppedPktCount, and NumOfTimeouts
 ccm_pkts In EoamContChkLocalResults, sum of
 DroppedPktCount, and NumOfTimeouts
 ais_pkts Not supported in Spirent HLTAPI
 lck_pkts Not supported in Spirent HLTAPI
 error
 lbm_pkts In EoamLoopbackResults, sum of
 DroppedPktCount, NumOfTransactionIdMismatches
 and NumOfTimeouts
 ltm_pkts In EoamLinkTraceResults, sum of
 DroppedPktCount, and NumOfTimeouts
 ccm_pkts In EoamContChkLocalResults, sum of
 DroppedPktCount, and NumOfTimeouts
 ais_pkts Not supported in Spirent HLTAPI
 lck_pkts Not supported in Spirent HLTAPI
 detected_failure_stats
EOAM Functions
266
 unexpected_mep Number of unexpected MEG End Points
 in the MEG
 unexpected_cc_period The number of unexpected CC period
 values
 lock Not supported in Spirent HLTAPI
 ais_pkts Not supported in Spirent HLTAPI
 lck_pkts Not supported in Spirent HLTAPI
 topology_stats
 total_md_levels Sum of the MEG's ME level in the port
 operational_md_levels MEG's ME level in the port
 total_maintenance_points The number of MEPs in the MEG
 operational_maintenance_points The number of up MEPs in the
 MEG
 total_entries Not supported in Spirent HLTAPI
 start_entries Not supported in Spirent HLTAPI
 ok_entries Not supported in Spirent HLTAPI
 fail_entries Not supported in Spirent HLTAPI
 states
 maintenance_point_down Number of remote MEPs whose
 State is up
 disabled Not supported in Spirent HLTAPI
 enabled Not supported in Spirent HLTAPI
 Sockets
 cfmMcastRxSocket
 state Not supported in Spirent HLTAPI
 rx_pkts Not supported in Spirent HLTAPI
 tx_pkts Not supported in Spirent HLTAPI
 cfmSocket
 state Not supported in Spirent HLTAPI
 rx_pkts Not supported in Spirent HLTAPI
 tx_pkts Not supported in Spirent HLTAPI
 The following keys will be returned when you specify -mode session.
 linktrace
 receive_ltr_count Number of LTR packets received by the MEP
 transmit_ltm_count Number of LTM packets transmitted by the MEP
 state_waiting Not supported in Spirent HLTAPI
 state_received Not supported in Spirent HLTAPI
 state_failed Not supported in Spirent HLTAPI
 min_response_time Not supported in Spirent HLTAPI
 avg_response_time Not supported in Spirent HLTAPI
 max_response_time Not supported in Spirent HLTAPI
 Loopback
 receive_lbr_count Number of LBR packets received by the MEP
 transmit_lbm_count Number of LBM packets transmitted by the MEP
 state_waiting Not supported in Spirent HLTAPI
 state_received Not supported in Spirent HLTAPI
 state_failed Not supported in Spirent HLTAPI
 min_response_time Not supported in Spirent HLTAPI
 avg_response_time Not supported in Spirent HLTAPI
 max_response_time Not supported in Spirent HLTAPI
 Test
 transmit_count Number of TST packets transmitted by the MEP
 The following CCDB return keys are not supported in Spirent HLTAPI:
 status
 log_msg
 md_level
 1
 mac
 00:00:00:00:00:01
 vlan_outer
 vlan
 md_level
 mac 
EOAM Functions
267
 mep_id
 md_name
 short_ma_name
 state
 last_state_change
 ccm_interval
 remote_failure_indicator
 00:00:00:00:00:02
 vlan_outer
 vlan
 md_level
 mac
 mep_id
 md_name
Description:
 The sth::emulation_oam_info function provides information about
 the ports specified for the E-OAM configuration.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 supported by the Tcl extension software - TclX). Use the TclX function
 (keylget) to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples:
 #### HLTAPI for Tcl ####
 Sample Input: ::sth::emulation_oam_info \
 -mode session \
 -handle $eoamMsgHandle
 Sample Output:
 {Linktrace_receive_ltr_count 16} {Linktrace_transmit_ltm_count 21}
 {Loopback_receive_lbr_count 25} {Loopback_transmit_lbm_count 25}
 {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_oam_info (
 port_handle = port_handle[0],
 mode = 'aggregate',
 action = 'get_topology_stats');
 Sample Output:
 {'aggregate': {'states': {'maintenance_point_down': '0'},
 'detected_failure_stats': {'unexpected_mep': '0', 'unexpected_cc_period': '0'},
 'tx': {'fm_pkts': '0', 'ccm_pkts': '0', 'ltm_pkts': '0', 'lbm_pkts': '0'},
 'error': {'fm_pkts': '0', 'ccm_pkts': '0', 'ltm_pkts': '0', 'lbm_pkts': '0'},
 'topology_stats': {'operational_maintenance_points': '0',
 'total_maintenance_points': '0', 'operational_md_levels': '0', 'total_md_levels':
 '0'}, 'rx': {'fm_pkts': '0', 'ccm_pkts': '0', 'ltm_pkts': '0', 'lbm_pkts': '0'}},
 'status': '1'}

 #### HLTAPI for Perl ####
 Sample Input:
 %results_ret1 = sth::emulation_oam_info (
 port_handle => "$hport[2]",
 mode => 'aggregate',
 action => 'get_topology_stats');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'aggregate';
 $VAR4 = {
 'topology_stats' => {
 'total_md_levels' => '0',
 'operational_maintenance_points' => '0',
'operational_md_levels' => '0',
'total_maintenance_points' => '0'
EOAM Functions
268
 },
 'tx' => {
 'fm_pkts' => '0',
 'lbm_pkts' => '0',
 'ltm_pkts' => '0',
 'ccm_pkts' => '0'
 },
 'rx' => {
 'fm_pkts' => '0',
 'lbm_pkts' => '0',
 'ltm_pkts' => '0',
 'ccm_pkts' => '0'
 },
 'states' => {
 'maintenance_point_down' => '0'
 },
 'detected_failure_stats' => {
 'unexpected_cc_period' => '0',
'unexpected_mep' => '0'
 },
 'error' => {
 'fm_pkts' => '0',
 'lbm_pkts' => '0',
 'ltm_pkts' => '0',
 'ccm_pkts' => '0'
 }
 };
Notes: None
End of Procedure Header
FC Functions
269
FC Functions
Functions:
sth::fc_config
sth::fc_control
sth::fc_stats
sth::fc_config
Name:
 sth::fc_config
Purpose:
 Configures Fibre Channel (FC) nodes for the specified
 Spirent HLTAPI port. FC is a gigabit-speed network technology
 primarily used for storage networking.
Synopsis:
 sth::fc_config
 -mode create -port_handle <port_handle> |
 -mode {modify | reset} -handle <FC device handle>
 [-host_type {initiator | target | both}]
 [-login_delay <1-1000>]
 [-logout_delay <1-1000>]
 [-nport_count <1-2000>]
 [-wwnn <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-wwpn <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-wwpn_step <aa:bb:cc:dd:ee:ff:gg:hh>]
Arguments:
 -port_handle
 Specifies the handle of the port on which to configure
 FC emulation. This argument is mandatory for the create
 mode. Please refer to the description of the -mode argument.
 -handle
 Specifies the handle of the FC device(s). The handle
 is returned by the sth::fc_config function. This argument
 is mandatory only for the modify and the reset modes.
 -mode
 Specifies the action to be taken. This argument is mandatory.
 Possible values are described below:
 create - Starts emulating FC device(s) on the port
 specified by the -port_handle argument.
 modify - Changes the configuration parameters for the
 FC device(s) identified by the -handle
 argument.
 reset - Deletes the FC device(s) identified by the
 -handle argument.
 -host_type
 Specifies whether hosts will register the name server
 as a initiator, target, or both. The default value is
 initiator. Possible values are described below:

 initiator - Indicates the Small Computer System
 Interface (SCSI) Initiator. The SCSI is a set of
 standards for physically connecting and
 transferring data between computers and peripheral
 devices.
 target - Indicates the SCSI Target.
 both - Indicates both the SCSI Initiator and the
FC Functions
270
 SCSI Target.
 -logout_delay
 Specifies the logout delay timer that defines the
 interval between logout actions when two
 or more logout functions are performed. The value
 of this argument will be applied when several logout
 messages are sent. Possible values range from
 1(ms) to 1000(ms). The default is 10(ms).
 -login_delay
 Specifies the login delay timer that defines the interval
 between login actions when two or more login
 functions are performed. The value of
 this argument will be applied when several login messages
 are sent. Possible values range from 1(ms) to 1000(ms).
 The default is 10(ms).
 -nport_count
 Specifies the number of the N_Ports to be created.
 The default value is 1.
 -wwnn
 Indicates the starting World Wide Node Name
 (WWNN) of the FC hosts. The value of this argument
 must be a 64-bit hexadecimal value. The default is
 10:00:10:94:00:00:00:01.
 -wwpn
 Starting the WWPN of the FC
 devices. A WWPN is a World Wide Name assigned to a port in a
 Fibre Channel fabric. Used on storage area networks, it
 performs a function equivalent to the MAC address in
 the Ethernet protocol. It intends to be a unique
 identifier in the network. The value of this argument
 must be a 64-bit hexadecimal value.
 The default is 20:00:10:94:00:00:00:01.
 -wwpn_step
 Specifies the WWPN step for the FC hosts.
 The step must be a 64-bit hexadecimal value.
 The default is 00:00:00:00:00:00:00:01.
Arguments Unsupported by Save as HLTAPI:
 The sth::fc_config function is not currently supported by Save as HLTAPI.
 To test with this function, you must configure it manually in the script
 generated using Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The FC device handle
 status Success (1) or failure (0) of the operation.

 procName The function name
 log An error message (if the operation failed).
Description:
 The sth::fc_config function creates or modifies an emulated FC
 device block. Use the -mode argument to specify the action to perform.
 (See the -mode argument description of the actions.)

 When you create a FC device, you must use the -port_handle
 argument to specify the Spirent HLTAPI port that the emulated FC
 device will use for FC communication. (The port handle value is
 contained in the keyed list returned by the sth::connect function.)
FC Functions
271
Example:
 The following segment is an example for sth::fc_config. For more
 information please see the sample script.
################### HltApi Script Example ###########################
 set returnedString [sth::fc_config -port_handle port1 \
 -mode create \
 -nport_count 2 \
 -wwpn "20:00:00:10:94:00:00:01" \
 -wwpn_step "00:00:00:00:00:00:00:01" \
 -wwnn "10:00:00:10:94:00:00:01" \
 -host_type "initiator" \
 -login_delay 10 \
 -logout_delay 10 \
 ]
 puts "Create FC device\n$returnedString\n"
 keylget returnedString handle fcDevice

 set returnedString [sth::fc_config -handle $fcDevice \
 -mode modify \
 -host_type "target" \
 ]
 puts "Create FC device\n$returnedString\n"

 set returnedString [sth::fc_config -handle $fcDevice -mode reset]
 puts "Reset FC device\n$returnedString"
###########################################################
Sample Input:
 See the examples above.

Sample Output:
 Create FC device
 {status 1} {handle host1} {procName fc_config}
 Modify FC device
 {status 1} {handle host1} {procName fc_config}
 Reset FC device
 {status 1} {procName fc_config}
Notes:
 None.
End of Procedure Header
sth::fc_control
Name:
 sth::fc_control
Purpose:
 Starts FC Login/Logout process on the specified FC devices.
Synopsis:
 sth::fc_control
 -handle {FC device handle(s)}
 -action {login | logout}
Argument

 -handle
 Identifies FC devices executer the action.
 This argument is mandatory. It is returned from the
 sth::fc_config function.
 -action 
FC Functions
272
 Specifies the action to perform on the device specified by
 the -handle argument. This argument is mandatory. Possible
 values are login and logout; they are described below:

 login - Starts the FC Login process.
 logout - Starts the FC Logout process.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.

 procName Name of the function.
 log An error message (if the operation failed).
Description:
 The sth::fc_control function performs login and logout actions:
 When you call the sth::fc_control function, you must specify a handle.
Example:
 The following segment is an example for sth::fc_control. For more
 information, please see the sample script.
################### HltApi Script Example ###########################
 set returnedString [sth::fcoe_control -handle $fcDevice -action login]
 puts "$returnedString"
###########################################################
Sample Input:
 See the examples above.
Sample Output:
 {status 1} {handle host1} {procName fc_control}
Notes:
 None.
End of Procedure Header
sth::fc_stats
Name:
 sth::fc_stats
Purpose:
 Returns the specified FC device statistics.
 The statistics include the device status and number and type of messages
 sent and received.
Synopsis:
 sth::fc_stats
 -handle {FC_device_handle}
 -mode {summary| nport| all }
Argument

 -handle
 Identifies the FC devices whose statistics are to be
 returned. This argument is mandatory. It is returned from the
 sth::fc_config function.

 -mode
 Specifies the kind of returned information.
 Possible values are summary, nport and all. The default is
FC Functions
273
 summary. Possible values are described below:

 summary - Returns FC summary results
 nport - Returns FC N_Port results
 all - Returns both FC summary and N_Port results
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The FC device handle
 status Success (1) or failure (0) of the operation.
 procName The function name
 log An error message (if the operation failed).
 The following statistics are returned when the -mode
 argument is set to all or nPort:
 <nportID>.substate Sub-state of the N_Port
 Possible values are:
 NONE: No state.
 LOGGED_OUT: Logged out.
 FLOGI_SENT: FLOGI sent.
 FLOGI_TIMED_OUT: FLOGI timed out.
 FLOGI_REJECTED: FLOGI rejected.
 FLOGI_ACCEPTED: FLOGI accepted.
 FDISC_SENT: FDISC sent.
 FDISC_TIMED_OUT: FDISC timed out.
 FDISC_REJECTED: FDISC rejected.
 FDISC_ACCEPTED: FDISC accepted.
 PLOGI_SENT PLOGI sent.
 PLOGI_TIMED_OUT: PLOGI timed out.
 PLOGI_REJECTED: PLOGI rejected.
 PLOGI_ACCEPTED: PLOGI accepted.
 SCR_SENT: SCR sent.
 SCR_TIMED_OUT: SCR timed out.
 SCR_REJECTED: SCR rejected.
 SCR_ACCEPTED: SCR accepted.
 <nportID>.fcid
 Assigned FC ID of the N_Port
 <nportID>.wwpn
 World Wide Port Name of the N_Port
 <nportID>.wwnn
 World Wide Node Name of the N_Port
 <nportID>.rx_acc
 Number of accepted messages received of the N_Port
 <nportID>.rx_rjt
 Number of rejected messages received of the N_Port
 <nportID>.tx_flogi
 Number of FLOGI messages transmitted of the N_Port
 <nportID>.tx_fdisc
 Number of FDISC messages transmitted of the N_Port
 <nportID>.tx_plogi
 Number of PLOGI messages transmitted of the N_Port
 <nportID>.tx_logo
 Number of LOGO messages transmitted of the N_Port
 <nportID>.tx_scr
 Number of SCR messages transmitted of the N_Port

The following statistics are returned when the -mode
 argument is set to all or summary:

 state State of FC device
 Possible values are:UP and DOWN
 nport_down Number of N_Port in DOWN state
 nport_up Number of N_Port in UP state
 rx_rjt Number of rejected messages received
 rx_acc Number of accepted messages received
 tx_flogi Number of FLOGI messages transmitted
 tx_fdisc Number of FDISC messages transmitted
FC Functions
274
 tx_plogi Number of PLOGI messages transmitted
 tx_logo Number of LOGO messages transmitted
 tx_scr Number of SCR messages transmitted
Description:
 The sth::fc_stats function retrieves a list of aggregate
 statistics for the FC device configured on the specified port.
Example:
 The following example retrieves statistics of the FC device configured
 on the specified port. For more information, please see the sample script.
################### HltApi Script Example ###########################
 set returnedString [sth::fc_stats -handle $fcDevice -mode summary]
 puts "$returnedString"

 set returnedString [sth::fc_stats -handle $fcDevice -mode nPort]
 puts "$returnedString"
###########################################################
Sample Input:
 See the examples above.
Sample Output:
 #Summary Results
 {status 1} {tx_logo 0} {tx_fdisc 1} {tx_flogi 1} {rx_acc 4} {tx_scrn 0}
 {rx_rjt 0} {max_rx_size 0} {tx_plogi 2} {nport_down 0} {nport_up 2}
 {handle host1} {procName fc_stats}

 #nPort Results
 {status 1} {nport0 {{rx_acc 2} {rx_rjt 0} {wwnn 10:00:00:10:94:00:00:01}
 {substate PLOGI_ACCEPTED} {wwpn 20:00:00:10:94:00:00:01}
 {tx_fdisc 0} {tx_logo 0}
 {tx_plogi 1} {tx_scrn 0} {tx_flogi 1} {fcid 2a0010}}} {nport1 {{rx_acc 2}
 {rx_rjt 0} {wwnn 10:00:00:10:94:00:00:01} {substate PLOGI_ACCEPTED}
 {wwpn 20:00:00:10:94:00:00:02} {tx_fdisc 1} {tx_logo 0} {tx_plogi 1} {tx_scrn 0}
 {tx_flogi 0} {fcid 2a0011}}} {handle host1} {procName fc_stats}
Notes:
 The ID in <nportID> is zero-based.
End of Procedure Header
FCoE Functions
275
FCoE Functions
Functions:
sth::fcoe_config
sth::fcoe_control
sth::fcoe_stats
sth::fip_traffic_config
sth::fcoe_traffic_config
sth::fcoe_config
Name:
 sth::fcoe_config
Purpose:
 Configures FCoE device for the specified Spirent HLTAPI port.
 Fibre Channel over Ethernet (FCoE) is a method of carrying Fibre
 Channel (FC) frames over lossless Ethernet. It uses Jumbo Ethernet frames to
 avoid fragmenting FC frames.

 The FCoE Initialization Protocol (FIP) is used to perform the functions of
 FC-BB_E (FC over Ethernet) device discovery, initialization, and
 maintenance.
Synopsis:
 sth::fcoe_config
 -mode create -port_handle <port_handle> |
 -mode {modify | reset} -handle <FCoE device handle>
 [-vnport_count <1-65535>]
 [-encap {ethernet_ii|ethernet_ii_vlan|ethernet_ii_qinq}]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-vlan_id <0-4095>]
 [-vlan_pri <0-7>]
 [-vlan_cfi {0|1} ]
 [-vlan_id_outer <0-4095>]
 [-vlan_pri_outer<0-7>]
 [-vlan_cfi_outer {0|1} ]
 [-wwpn <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-wwpn_step <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-login_delay]
 [-logout_delay]
 [-enable_vlan_discovery {0|1}]
 [-addressing_mode {fpma|spma|both}]
 [-bb_credit]
 [-fcf_mac_addr <aa:bb:cc:dd:ee:ff>]
 [-fc_map <abcdefg>]
 [-fip_priority <1-128>]
 [-host_type {initiator|target|both}]
 [-max_rx_size <64 - 2112>]
 [-use_wwpn {0|1}]
 [-wwnn <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-wwnn_step <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-enode_count <1-65535>]
Arguments:
 -port_handle
 Specifies the handle of the port on which to configure
 FCoE emulation. This argument is mandatory for the create
 mode. Please refer to the description of the -mode argument.
 -handle
 Specifies the handle of the FCoE device(s). The handle
FCoE Functions
276
 is returned by the sth::fcoe_config function. This argument
 is mandatory only for the modify and the reset modes.
 -mode
 Specifies the action to be taken. This argument is mandatory.
 Possible values are described below:
 create - Starts emulating FCoE device(s) on the port
 specified by the -port_handle argument.
 modify - Changes the configuration parameters for the
 FCoE device(s) identified by the -handle
 argument.
 reset - Deletes the FCoE device(s) identified by the
 -handle argument.
 -vnport_count
 Specifies the number of the FCoE devices to be created.
 The default value is 1.
 -encap
 Specifies the type of Layer 2 encapsulation to use, which
 defines the source and the destination MAC addresses for a
 stream. The default is ethernet_ii. Possible values are:
 ethernet_ii - Ethernet II
 ethernet_ii_vlan - Ethernet II with a single VLAN tag
 ethernet_ii_qinq - Ethernet II with two VLAN tags
 ethernet_ii_vlan supports VLAN tagging on Ethernet networks,
 while ethernet_ii does not. If you use the -vlan_* arguments
 to define a VLAN interface, you must set the Layer 2
 encapsulation type to ethernet_ii_vlan.
 -mac_addr
 Specifies the starting value for the MAC addresses.
 The default is 00:10:94:00:00:02.
 -mac_addr_step
 Specifies the step value applied to the base MAC address.
 The default is 00:00:00:00:00:01.
 -vlan_id
 Defines the starting VLAN ID to use when generating
 FCoE devices for ethernet_ii_vlan.
 Possible values range from 1 to 4095. The default
 value is 100.
 -vlan_pri
 Specifies the VLAN priority. Possible values range from 0
 (highest) to 7 (lowest). The default is 7.
 -vlan_cfi
 Sets the Canonical Format Indicator(CFI) field in VLAN for
 the emulated FCoE device. Possible values are 0
 (Ethernet) and 1 (Token Ring). The default is 0. If it
 is set to 0, it indicates the network is Ethernet. If it
 is set to 1, it indicates that the network is Token Ring
 and packets are dropped by Ethernet ports.
 -vlan_id_outer
 Defines the starting outer VLAN ID to use when generating
 FCoE device(s) for ethernet_ii_qinq. Possible values
 range from 1 to 4095. The default is 100. This argument is
 available only when the -encap argument is set to
 ethernet_ii_qinq.
 -vlan_pri_outer
 Specifies the outer VLAN priority. Possible values range
 from 0 (highest)to 7 (lowest). The default value is 7.
 This argument is available only when the -encap argument
 is set to ethernet_ii_qinq.
FCoE Functions
277
 -vlan_cfi_outer
 Sets the CFI field in outer VLAN for the emulated FCoE
 device. Possible values are 0 (Ethernet) and 1 (Token Ring).
 The default is 0. If it is set to 0, it indicates the
 network is Ethernet. If it is set to 1, it indicates that
 the network is Token Ring and packets are dropped by
 Ethernet ports. This argument is available only when the
 -encap argument is set to ethernet_ii_qinq.
 -wwpn
 Starting the World Wide Port Name (WWPN) of the FCoE
 devices. A WWPN is a World Wide Name assigned to a port in a
 Fibre Channel fabric. Used on storage area networks, it
 performs a function equivalent to the MAC address in
 the Ethernet protocol; it is intended to be a unique
 identifier in the network. The value of this argument
 must be a 64-bit value.
 The default is "20:00:10:94:00:00:00:01".
 -wwpn_step
 Specifies the WWPN step for the FCoE hosts.
 The step must be 64-bit. The default is
 "00:00:00:00:00:00:00:01".
 -logout_delay
 Specifies the logout delay timer that defines the
 interval between logout actions when two
 or more logout functions are performed. The value
 of this argument will be applied when several logout
 messages are sent. The default is 10(ms).
 -login_delay
 Specifies the login delay timer that defines the interval
 between login actions when two or more login
 functions are performed. The value of
 this argument will be applied when several login messages
 are sent. The default is 10(ms).
 -addressing_mode
 Specifies the addressing mode of the FCoE devices.
 Possible values are FPMA, SPMA and BOTH. The default
 value is FPMA.
 Possible values are described below:
 FPMA - Sets the mode to Fabric Provided MAC Addresses.
 SPMA - Sets the mode to Server Provided MAC Addresses.
 BOTH - Sets the mode to Fabric and Server Provided
 MAC Addresses.

 -bb_credit
 Indicates the Buffer to Buffer Credit of the FCoE
 devices. This argument is used to define the number of
 frames the port can receive. Possible values range from 0
 to 65535. The default is 3.

 Note: If -bb_credit and -max_rx_size do not match the values
 for the DUT, the login attempts may be rejected.
 -fcf_mac_addr
 Specifies the MAC address of the Fibre Channel forwarder.
 The value must be a valid MAC address. The default is
 01:10:18:01:00:02.
 -fc_map
 Specifies the FC map of the FCoE. The Fibre channel
 organizationally unique ID (FC-OUI) is used to map a MAC
 address to a FC address. This value has the I/G bit set to
 zero to indicate it is not a group address, and the U/L bit
 is set to one to indicate it is a locally administered address
FCoE Functions
278
 and is not globally unique. Possible values range from EFC00 to
 EFCFF. The default is EFC00.

 -fip_priority
 Specifies the FIP priority of the FCoE. Possible values
 range from 1 (highest) to 128 (lowest).
 The default is 100.
 -host_type
 Specifies whether hosts will register with the name server
 as a target, initiator, or both. The default value is
 initiator. Possible value is described below:

 initiator - Indicates the Small Computer System
 Interface (SCSI) Initiator. The SCSI is a set of
 standards for physically connecting and
 transferring data between computers and peripheral
 devices.
 target - Indicates the SCSI Target.
 both - Indicates both the SCSI Initiator and the
 SCSI Target.
 -max_rx_size
 Maximum frame size.
 Possible values range from 64 to 2112. The default is
 2112.
 -use_wwpn
 Use WWPN as the World Wide Node Name (WWNN). A
 WWNN is a World Wide Name assigned to a node (an endpoint,
 a device) in a Fibre Channel fabric. It is valid for the same
 WWNN to be seen on many different addresses on the network,
 identifying the ports as multiple network interfaces of a
 single network node. Possible values are 0 and 1. The
 default is 1. If it is set to 1, the WWNN will use the
 value set by -wwpn instead of -wwnn.
 -vnport_name
 Defines the VN_Port name of the FCoE devices. The
 VN_Port is an instance of the FC-2V sublevel of Fibre
 Channel that operates as an N_Port. You can refer to
 FC-FS-3 for more details.

 The value is formed by characters. The length of the value
 is from 1 to 32. The default value is VNport_@p-@b-@s.
 -wwnn
 Indicates the starting WWNN of the FCoE hosts.
 The default is 10:00:10:94:00:00:00:01.
 -wwnn_step
 Specifies the step size applied to the WWNN of the
 FCoE devices. The default is 10:00:10:94:00:00:00:01.
 -enode_count
 Specifies the number of ENodes to be created. The default
 is 1. This value should be equal or less than the value
 specified by -vnport_count. This argument is available when
 -use_wwpn is set to 0.
 -enable_vlan_discovery
 Disables or enables the VLAN discovery process. VLAN
 discovery can be invoked by an ENode or a FCoE Forwarder
 (FCF) that is a Fibre Channel Switching Element to discover
 the VLANs in the Lossless Ethernet network. Possible values
 are 0 and 1. If it is set to 1, the VLAN discovery process will
 be enabled. The default is 0.

Arguments Unsupported by Save as HLTAPI:
 None
FCoE Functions
279
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The FCoE device handle
 status Success (1) or failure (0) of the operation.

 procName The function name
 log An error message (if the operation failed).
Description:
 The sth::fcoe_config function creates or modifies an emulated FCoE
 device block. Use the -mode argument to specify the action to perform.
 (See the -mode argument description for information about the actions.)

 When you create a FCoE device, you must use the -port_handle
 argument to specify the Spirent HLTAPI port that the emulated FCoE
 device will use for FCoE communication. (The port handle value is
 contained in the keyed list returned by the sth::connect function.)
Example:
 #### HLTAPI for Tcl ####
 The following segment is an example for sth::fcoe_config. For more
 information please see the sample script.
 set returnedString [sth::fcoe_config \
 -port_handle port1 \
 -mode create \
 -encap ethernet_ii_vlan \
 -mac_addr 00:10:94:00:00:66 \
 -vlan_id 900 \
 -vlan_pri 3 \
 -vnport_count 8 \
 -wwpn 20:00:10:94:00:00:00:55 \
 -wwnn_step 00:00:00:00:00:00:00:01 \
 -host_type both \
 -fc_map EFC00 \
 ]
 keylget returnedString handle fcoeDevice
 puts "Create FCoE device\n$returnedString"

 set returnedString [sth::fcoe_config \
 -handle $fcoeDevice \
 -mode modify \
 -vlan_pri 1 \
 ]
 puts "Modify FCoE device\n$returnedString"

 set returnedString [sth::fcoe_config -handle $fcoeDevice -mode reset]
 puts "Reset FCoE device\n$returnedString"
 Sample Output:
 Create FCoE device
 {status 1} {procName fcoe_config} {handle host1}
 Modify FCoE device
 {status 1} {procName fcoe_config} {handle host1}
 Reset FCoE device
 {status 1} {procName fcoe_config}
 #### HLTAPI for Python ####
 The following example creates and configures an FCoE emulated device:
 device_ret0 = sth.fcoe_config (
 mode = 'create',
 encap = 'ethernet_ii_vlan',
 logout_delay = '10',
 login_delay = '10',
FCoE Functions
280
 port_handle = port_handle[0],
 vlan_cfi = '0',
 vlan_id = '906',
 vlan_pri = '7',
 wwpn = '20:00:00:10:94:00:00:01',
 wwpn_step = '00:00:00:00:00:00:00:01',
 use_wwpn = '0',
 max_rx_size = '128',
 wwnn = '10:00:00:10:94:00:00:01',
 enode_count = '1',
 enable_vlan_discovery= '0',
 fc_map = 'efc00',
 bb_credit = '3',
 host_type = 'initiator',
 fip_priority = '100',
 addressing_mode = 'fpma',
 wwnn_step = '00:00:00:00:00:00:00:01',
 mac_addr = '00:10:94:00:00:03',
 mac_addr_step = '00:00:00:00:00:01',
 vnport_count = '2');
 Sample Output: {'status': '1', 'procName': 'fcoe_config', 'handle': 'host3'}
 #### HLTAPI for Perl ####
 The following example creates and configures an FCoE emulated device:

 my %device_ret0 = sth::fcoe_config (
 mode => 'create',
 encap => 'ethernet_ii_vlan',
 logout_delay => '10',
 login_delay => '10',
 port_handle => "$hport[1]",
 vlan_cfi => '0',
 vlan_id => '906',
 vlan_pri => '7',
 wwpn => '20:00:00:10:94:00:00:01',
 wwpn_step => '00:00:00:00:00:00:00:01',
 use_wwpn => '0',
 max_rx_size => '128',
 wwnn => '10:00:00:10:94:00:00:01',
 enode_count => '1',
 enable_vlan_discovery=> '0',
 fc_map => 'efc00',
 bb_credit => '3',
 host_type => 'initiator',
 fip_priority => '100',
 addressing_mode => 'fpma',
 wwnn_step => '00:00:00:00:00:00:00:01',
 mac_addr => '00:10:94:00:00:03',
 mac_addr_step => '00:00:00:00:00:01',
 vnport_count => '2');
 Sample Output:
 $VAR1 = 'procName';
 $VAR2 = 'fcoe_config';
 $VAR3 = 'handle';
 $VAR4 = 'host3';
 $VAR5 = 'status';
 $VAR6 = '1';
Notes:
 None.
End of Procedure Header
FCoE Functions
281
sth::fcoe_control
Name:
 sth::fcoe_control
Purpose:
 Discovers, logins, logouts, starts, and stops the specified FCoE devices.
Synopsis:
 sth::fcoe_control
 -handle {FCoE device handle(s)}
 -action {discovery | login | logout | start | stop}
Argument

 -handle
 Identifies FCoE devices executer the action.
 This argument is mandatory. It is returned from the
 sth::fcoe_config function.
 -action
 Specifies the action to perform on the device specified by
 the -handle argument. This argument is mandatory. Possible
 values are discovery, login, logout, start and stop;
 they are described below:
 discovery - Starts the FCoE Discovery process. The process
 is invoked by ENodes for discovering the VLANs. FCF is
 a Fibre Channel Switching Element (see FC-SW-5) that
 is able to forward FCoE frames across one or more
 FCF-MACs, It optionally includes one or more
 Lossless Ethernet bridging elements and/or a Fibre
 Channel Fabric interface.

 login - Starts the FCoE Login process that ENodes initiates
 VNports and registers it to the FCF.

 logout - Starts the FCoE Logout process that ENodes logout its
 VNports to the FCF.

 start - Starts the FCoE device from the discovery step, and
 then goes to the login process after discovery is done.

 stop - Stops the FCoE device after the start action.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.

 handle The FCoE device handle.
 procName Name of the function.
 log An error message (if the operation failed).
Description:
 The sth::fcoe_control function performs the following actions:
 discovery, login, logout, start and stop.
 When you call the fcoe_control function, you must specify a handle.
Example:
 #### HLTAPI for Tcl ####
 The following segment is an example for sth::fcoe_config. For more
 information, please see the sample script.
 set returnedString [sth::fcoe_stats -handle $fcoeDevice ]
FCoE Functions
282
 puts "$returnedString"
 Sample Output:
 {status 1} {handle host1} {procName fcoe_control}
 #### HLTAPI for Python ####
 The following segment starts the FCoE discovery process on the specific FCoE
 device:
 ctrl_ret1 = sth.fcoe_control (
 handle = device_list,
 action = 'discovery');
 Sample Output: {'status': '1', 'procName': 'fcoe_control', 'handle': 'host3 host4'}
 #### HLTAPI for Perl ####
 The following segment starts the FCoE discovery process on the specific FCoE
 device:
 my %ctrl_ret1 = sth::fcoe_control (
 handle => "$device_list",
 action => 'discovery');
 Sample Output:
 $VAR1 = 'procName';
 $VAR2 = 'fcoe_control';
 $VAR3 = 'handle';
 $VAR4 = 'host3 host4';
 $VAR5 = 'status';
 $VAR6 = '1';
Notes:
 None.
End of Procedure Header
sth::fcoe_stats
Name:
 sth::fcoe_stats
Purpose:
 Returns the specified FCoE device statistics.
 The statistics include the device status and number and type of messages
 sent and received.
Synopsis:
 sth::fcoe_stats
 -handle {FCoE device handle}
 [-mode {summary| vnport| all}]
Argument

 -handle
 Identifies the FCoE devices whose statistics are to be
 returned. This argument is mandatory. It is returned from the
 sth::fcoe_config function.

 -mode
 Specifies the kind of returned information.
 Possible values are summary, vnport and all. The default is
 summary. Possible values are described below:

 summary - Returns FCoE summary results
 vnport - Returns FCoE VN_Port results
 all - Returns both FCoE summary and VN_Port results
FCoE Functions
283
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The FCoE device handle
 status Success (1) or failure (0) of the operation.
 procName The function name
 log An error message (if the operation failed).
 The following statistics are returned when the -mode
 argument is set to all or vnport:
 <vnportID>.state State of the FCoE device
 Possible values are:
 Up: VN_Port is up.
 Down: VN_Port is down.
 <vnportID>.substate Sub-state of the FCoE device
 Possible values are:
 NONE: No state.
 LOGGED_OUT: Logged out.
 SOLICITATION_SENT: Solicitation sent.
 SOLICITATION_TIMED_OUT: Solicitation timed
 out.
 DISCOVERY_FAILED: Discovery failed.
 ADVERTISEMENT_RECEIVED: Advertisement
 received.
 FLOGI_SENT: FLOGI sent.
 FLOGI_TIMED_OUT: FLOGI timed out.
 FLOGI_REJECTED: FLOGI rejected.
 FLOGI_ACCEPTED: FLOGI accepted.
 FDISC_SENT: FDISC sent.
 FDISC_TIMED_OUT: FDISC timed out.
 FDISC_REJECTED: FDISC rejected.
 FDISC_ACCEPTED: FDISC accepted.
 PLOGI_SENT PLOGI sent.
 PLOGI_TIMED_OUT: PLOGI timed out.
 PLOGI_REJECTED: PLOGI rejected.
 PLOGI_ACCEPTED: PLOGI accepted.
 SCR_SENT: SCR sent.
 SCR_TIMED_OUT: SCR timed out.
 SCR_REJECTED: SCR rejected.
 SCR_ACCEPTED: SCR accepted.
 <vnportID>.rx_vlan_notification
 Number of VLAN notification message received
 <vnportID>.tx_vlan_req
 Number of VLAN request message transmitted
 <vnportID>.granted_macaddr
 Granted MAC Address of the FCoE device
 <vnportID>.fcid
 FC ID of the FCoE device
 <vnportID>.dst_mac_adddr
 Destination MAC Address of the FCoE device
 <vnportID>.wwpn
 World Wide Port Name of the FCoE device
 <vnportID>.wwnn
 World Wide Node Name of the FCoE device
 <vnportID>.granted_vlanid
 Granted Vlan ID of the FCoE device

The following statistics are returned when the -mode
 argument is set to all or summary:

 vnport_down Number of VN_Port in DOWN state
 vnport_up Number of VN_Port in UP state
 ka_period Keep Alive Period measured in milliseconds.
 rx_rjt Number of rejected messages received
 rx_acc Number of accepted messages received
FCoE Functions
284
 rx_multi_adv Number of multicast advertisement messages received
 rx_cvl Number of clear virtual link messages received
 rx_uni_advertisement Number of unicast advertisement messages
 received
 rx_multi_adv Number of multicast advertisement messages received
 tx_ka Number of keep_alive messages transmitted
 tx_flogi Number of FLOGI messages transmitted
 tx_fdisc Number of FDISC messages transmitted
 tx_plogi Number of PLOGI messages transmitted
 tx_logo Number of LOGO messages transmitted
 tx_uni_solicitation Number of state change registers transmitted
 tx_scr Number of unicast solicitation messages transmitted
Description:
 The sth::fcoe_stats function retrieves a list of aggregate
 statistics for the FCoE device configured on the specified port.
Example:
 #### HLTAPI for Tcl ####
 The following example retrieves statistics of the FCoE device configured
 on the specified port. For more information, please see the sample script.
 set returnedString [sth::fcoe_stats -handle $fcoeDevice -mode summary]
 puts "$returnedString"

 set returnedString [sth::fcoe_stats -handle $fcoeDevice -mode vnport]
 puts "$returnedString"
Sample Output:
 #Summary Results
 {status 1} {vnport_down 0} {rx_acc 4} {rx_rjt 0} {tx_logo 0} {tx_fdisc 0}
 {tx_state_change_register 0} {tx_plogi 3} {rx_multi_adv 60}
 {rx_uni_advertisement 3}{tx_uni_solicitation 3} {tx_flogi 3} {vnport_up 3}
 {ka_period 8000} {rx_clear_virlink 0}{tx_ka 12} {handle host1}
 {procName sth::fcoe_stats}

 #VN_Port Results
 {status 1} {vnport0 {{wwpn 20:00:10:94:00:00:00:01}
 {granted_macaddr 0e:fc:10:62:00:02}{rx_vlan_notification 1}
 {dst_mac_adddr 00:0d:ec:6d:a0:00} {state UP} {granted_vlanid 900}
 {wwnn 20:00:10:94:00:00:00:01} {fcid 620002} {tx_vlan_req 1}
 {substate PLOGI_SENT}}}{vnport1 {{wwpn 20:00:10:94:00:00:00:02}
 {granted_macaddr 0e:fc:10:62:00:03} {rx_vlan_notification 1}
 {dst_mac_adddr 00:0d:ec:6d:a0:00}{state UP} {granted_vlanid 900}
 {wwnn 20:00:10:94:00:00:00:02} {fcid 620003} {tx_vlan_req 1}
 {substate PLOGI_SENT}}}{vnport2 {{wwpn 20:00:10:94:00:00:00:03}
 {granted_macaddr 0e:fc:10:62:00:06}{rx_vlan_notification 1}
 {dst_mac_adddr 00:0d:ec:6d:a0:00} {state UP} {granted_vlanid 900}
 {wwnn 20:00:10:94:00:00:00:03} {fcid 620006} {tx_vlan_req 1}
 {substate PLOGI_ACCEPTED}}}{handle host1} {procName sth::fcoe_stats}
 #### HLTAPI for Python ####
 The following example retrieves statistics of the FCoE device configured
 on the specified port:
 results_ret1 = sth.fcoe_stats (
 handle = device,
 mode = 'summary');

 Sample Output:
 {'status': '1', 'rx_multi_adv': '0', 'handle': 'host3', 'rx_uni_adv': '0',
 'vnport_up': '0', 'rx_cvl': '0', 'tx_logo': '0', 'rx_acc': '0',
 'procName': 'sth::fcoe_stats', 'rx_rjt': '0', 'tx_fdisc': '0', 'tx_uni_soli': '0',
 'tx_plogi': '0', 'tx_ka': '0', 'tx_flogi': '0', 'ka_period': '0', 'vnport_down': '0'}
 #### HLTAPI for Perl ####
 The following example retrieves statistics of the FCoE device configured on the
 specified port:
 my %results_ret1 = sth::fcoe_stats (
 handle => "$device",
FCoE Functions
285
 mode => 'summary');
 Sample Output:
 $VAR1 = 'vnport_up';
 $VAR2 = '0';
 $VAR3 = 'ka_period';
 $VAR4 = '0';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'procName';
 $VAR8 = 'sth::fcoe_stats';
 ...
Notes:
 The ID in <vnportID> is zero-based.
End of Procedure Header
sth::fip_traffic_config
Name:
 sth::fip_traffic_config
Purpose:
 Creates, modifies, or deletes FIP raw stream blocks, which are stream blocks
 without endpoints such as hosts and routers.
 Please refer to FC-BB-5, FC-FS-2, and FC-FS-3 for more information.

Synopsis:
 sth::fip_traffic_config
 -handle {streamblock_handle}
 -mode {create | modify | reset}
 [-version <bit>]
 [-reserved1 <bits>]
 [-operationcode <hexadecimal>]
 [-reserved2 <hexadecimal>]
 [-subcode <hexadecimal>]
 [-fp <bit>]
 [-sp <bit>]
 [-reserved3 <bit>]
 [-a <bit>]
 [-s <bit>]
 [-f <bit>]
 [-padding {ANY}]
 [-dl_id {vlan|priority|macaddr|fcmap|nameid|fabricname|maxrcvsize|
 flogireq|flogiacc|flogirjt|fdiscreq|fdiscacc|fdiscrjt|logoreq|
 logoacc|logorjt|elpreq|elpacc|elprjt|vendorid}]
 [-vlanid <1-4094>]
 [-priority_reserved <hexadecimal>]
 [-priority <0-255>]
 [-macaddr <aa:bb:cc:dd:ee:ff>]
 [-fcmap_reserved <hexadecimal>]
 [-fcmap <hexadecimal>]
 [-nameid_reserved <hexadecimal>]
 [-nameid <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-fabricname_reserved <hexadecimal>]
 [-fabricname <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-maxrcvsize <bits>
 [-vendorid_reserved <hexadecimal>]
 [-vendorid <hexadecimal>]
 [-fka_reserved <hexadecimal>]
 [-fkaadvperiod <hexadecimal>]
 [-vxport_portname <hexadecimal>]
 [-vxport_addrid <hexadecimal>]
 [-vxport_reserved <hexadecimal>]
 [-vxport_macaddr <aa:bb:cc:dd:ee:ff>]
FCoE Functions
286
 [-flogi_reserved <hexadecimal>]
 [-flogiacc_reserved <hexadecimal>]
 [-flogirjt_reserved <hexadecimal>]
 [-fdisc_reserved <hexadecimal>]
 [-fdiscacc_reserved <hexadecimal>]
 [-fdiscrjt_reserved <hexadecimal>]
 [-logo_reserved <hexadecimal>]
 [-logoacc_reserved <hexadecimal>]
 [-logorjt_reserved <hexadecimal>]
 [-elpreq_reserved <hexadecimal>]
 [-elpacc_reserved <hexadecimal>]
 [-elprjt_reserved <hexadecimal>]
 [-h_rctl <hexadecimal>]
 [-h_did <hexadecimal>]
 [-h_csctl <hexadecimal>]
 [-h_sid <hexadecimal>]
 [-h_type <hexadecimal>]
 [-h_framecontrol <hexadecimal>]
 [-h_seqid <hexadecimal>]
 [-h_dfctl <hexadecimal>]
 [-h_seqcnt <hexadecimal>]
 [-h_origexchangeid <hexadecimal>]
 [-h_responseexchangeid <hexadecimal>]
 [-h_parameter <hexadecimal>]
 [-pl_reserved1 <hexadecimal>]
 [-pl_nportname <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-pl_nodename <aa:bb:cc:dd:ee:ff:gg:hh>]
 [-pl_vendorversionlevel <hexadecimal>]
 [-pl_commonsvcparams <hexadecimal>]
 [-pl_class1svcparams <hexadecimal>]
 [-pl_class2svcparams <keyed list>]
 [-pl_class3svcparams <keyed list>]
 [-pl_class4svcparams <keyed list>]
 [-pl_reasoncode <hexadecimal>]
 [-pl_reasonexplanation <hexadecimal>]
 [-pl_vendorunique <hexadecimal>]
 [-pl_nportid <hexadecimal>]
 [-pl_portname <hexadecimal>]
 [-pl_code <hexadecimal>]
 [-pl_revision <integer>]
 [-pl_flags <integer>]
 [-pl_bbscn <hexadecimal>]
 [-pl_ratov <hexadecimal>]
 [-pl_edtov <hexadecimal>]
 [-pl_reqinterconnportname <hexadecimal>]
 [-pl_reqswitchname <hexadecimal>]
 [-pl_reserved <hexadecimal>]
 [-pl_classfsvcparams <keyed list>]
 [-pl_class1interconnectportparams <keyed list>]
 [-pl_class2interconnectportparams <keyed list>]
 [-pl_class3interconnectportparams <keyed list>]
 [-pl_islflowcontrol <keyed list>]
Arguments:
 -handle
 Defines the FIP traffic handle that is to be configured. This
 argument is mandatory. When the -mode argument is set to
 create, the handle must be the returned value of
 sth::traffic_config; when -mode is set to modify or reset,
 the value of -handle must be the returned value of
 sth::fip_traffic_config.
 -mode
 Specifies the action to be taken. This argument is mandatory.
 The possible values are create, modify and reset.

 When -mode is set to create, the fip traffic will be created
 on the specified streamblock defined by -handle. Spirent HLTAPI
 will create several descriptor lists according to the value
 sequence defined by -dl_id.
 
FCoE Functions
287
 When -mode is set to modify, the fip traffic will be
 modified, and the modification will be applied to the
 specified descriptor lists.

 When -mode is set to reset and -dl_id is provided, deletion
 will be applied to the specified descriptor lists, otherwise
 the whole fip traffic will be removed from the specified
 streamblock.
 |-----------------------------------------------------------------|
 |3|3|2|2|2|2|2|2|2|2|2|2|1|1|1|1|1 |1 |1|1|1|1| | | | | | | | | | |
 |1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5 |4 |3|2|1|0|9|8|7|6|5|4|3|2|1|0|
0 | | version | reserved1 |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
1 | operationcode | reserved2 | subcode |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
2 | Descriptor List Length (auto) |fp|sp| reserved3 |a|s|f|
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
3 |FIP Descriptor List(m works, depends on the values list of dl_id)|
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
n-1 | padding (n-m-3) |
 |-----------------------------------------------------------------|

 The FIP_Header is subdivided into fields as shown above:

 -version
 The default value is 0000.
 -reserved1
 The default value is 000000000000.
 -operationcode
 The default value is 0001.
 -reserved2
 The default value is 00.
 -subcode
 The default value is 00.
 -fp
 The default value is 1.
 -sp
 The default value is 0.
 -reserved3
 The default value is 0.
 -a
 The default value is 0.
 -s
 The default value is 0.
 -f
 The default value is 0.
 -padding
 The padding value.
 -dl_id
 Indicates the type of the descriptor list. Possible values
 are listed below. You can specify one or more choices
 from the list below.

 vlan
 priority
 macaddr
 fcmap
 nameid
FCoE Functions
288
 fabricname
 maxrcvsize
 vxport
 fka_adv_period
 vendorid
 flogireq
 flogiacc
 flogirjt
 fdiscreq
 fdiscacc
 fdiscrjt
 logoreq
 logoacc
 logorjt
 elpreq
 elpacc
 elprjt

 The argument is mandatory when -mode is set to create or reset.

 When the -mode argument is set to create, several descriptor
 lists will be created according to the value sequence
 defined by the -dl_id option.

 When the -mode argument is modify, the modification will be
 applied to the specified descriptor lists. If the descriptor
 lists does not exist, it will be created accordingly.

 When the -mode argument is set to reset, the deletion will be
 applied to the specified descriptor lists.
 -vlanid
 Specifies the VLAN ID of a VLAN where FCoE services can be
 available. The default value is 0. Possible values range
 from 1 to 4094.
 -priority_reserved
 The default value is 00.
 -priority
 Defines the priority value associated with the sending
 FCF-MAC. The FCF-MAC is a Lossless Ethernet MAC coupled
 with an FCoE Controller in an FCoE Forwarder (FCF). The
 default value is 64; the range is from 0 (highest) to 255 (lowest).
 -macaddr
 Defines the MAC address contained in the descriptor.
 The default value is 00:10:94:00:00:01.
 -fcmap_reserved
 The default value is 000000.
 -fcmap
 Defines the value to be used as the most significant 24 bits
 in Fabric Provided MAC Addresses (FPMAs). FPMA is a MAC
 address that is assigned by an FCF to a single ENode MAC,
 and is not assigned to any other MAC within the same
 Ethernet VLAN. A FPMA is associated with a single VN_Port at
 that ENode MAC. The default value is 0EFC00.
 -nameid_reserved
 The default value is 0000.
 -nameid
 The Name_Identifier (see FC-FS-3) contained in the
 descriptor. The Name_Identifier is a 64-bit identifier, with
 a 60-bit value preceded with a 4-bit
 Network_Address_Authority Identifier, used to identify
 entities in Fibre Channel (e.g., N_Port, node, F_Port, or
 Fabric). The default value is 10:00:10:94:00:00:00:01.
FCoE Functions
289
 -fabricname_reserved
 The default value is 0000.
 -fabricname
 Specifies the Fabric_Name (see FC-FS-3) identifying the
 Fabric. The default value is 20:00:10:94:00:00:00:01.
 -maxrcvsize
 The size in bytes that the FIP PDU in a solicited unicast
 Discovery Advertisement is requested to be extended to.
 The default value is 2112.

 -vxport_macaddr
 The MAC address associated with the referred VN_Port.
 The default value is 00:10:94:00:00:01.
 -vxport_reserved
 The default value is 0000.
 -vxport_addrid
 Defines the address identifier associated with the referred
 VN_Port. The default value is 00000A.
 -vxport_portname
 Specifies the N_Port_Name of the referred VN_Port.
 The default value is 20:00:10:94:00:00:00:01.
 -fkaadvperiod
 Specifies the value of the advertised FKA_ADV_PERIOD.
 The default value is 00000000.
 -fka_reserved
 The default value is 0000.
 -vendorid

 Specifies the Vendor_ID value that defines the vendor(s).
 The default value is 00000000.
 -vendorid_reserved
 The default value is 0000.
 -flogireq_reserved
 The default value is 0000.
 -flogiacc_reserved
 The default value is 0000.
 -flogirjt_reserved
 The default value is 0000.
 -fdiscreq_reserved
 The default value is 0000.
 -fdiscacc_reserved
 The default value is 0000.
 -fdiscrjt_reserved
 The default value is 0000.
 -logoreq_reserved
 The default value is 0000.
 -logoacc_reserved
 The default value is 0000.
 -logorjt_reserved
 The default value is 0000.
 -vxport_reserved
 The default value is 0000.
FCoE Functions
290
 -fka_reserved
 The default value is 0000.
 -elpreq_reserved
 The default value is 0000.
 -elpacc_reserved
 The default value is 0000.
 -elprjt_reserved
 The default value is 0000.
 |---------------------------------------------------------------|
 |3|3|2|2|2|2|2|2|2|2|2|2|1|1|1|1|1|1|1|1|1|1| | | | | | | | | | |
 |1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|
0 | h_rctl | h_did |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
1 | h_csctl | h_did |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
2 | h_type | h_framecontrol |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
3 | h_seqid | h_dfctl | h_seqcnt |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
4 | h_origexchangeid | h_responseexchangeid |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
5 | h_parameter |
 |---------------------------------------------------------------|
 The Frame_Header is subdivided into fields as shown above:
 -h_rctl
 The default value is 22.
 -h_did
 The default value is 000000.
 -h_csctl
 The default value is 00.
 -h_sid
 The default value is 000000.
 -h_type
 The default value is 00.
 -h_framecontrol
 The default value is 000000.
 -h_seqid
 The default value is 00.
 -h_dfctl
 The default value is 00.
 -h_seqcnt
 The default value is 0000.
 -h_origexchangeid
 The default value is 0000.
 -h_responseexchangeid
 The default value is ffff.
 -h_parameter
 The default value is 00000000.
 -pl_reserved1
 The default value is 000000.
 
FCoE Functions
291
 -pl_reserved2
 The default value is 00.
 -pl_nportname
 The default value is 20:00:10:94:00:00:00:01.

 -pl_nodename
 The default value is10:00:10:94:00:00:00:01.

 -pl_vendorversionlevel
 The default value is 00000000000000000000000000000000.
 -pl_commonsvcparams
 The Common Service Parameters Payload is subdivided into fields
 as shown below:

 |--------------------------------------------------------------------|
 |3|3|2|2|2|2|2|2|2|2|2|2|1|1|1|1|1 |1 |1 |1 |1|1| | | | | | | | | | |
 |1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5 |4 |3 |2 |1|0|9|8|7|6|5|4|3|2|1|0|
0 |fcphversionhigh| fcphversionlow| buffertobuffercredit |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|---|-|-|-|-|-|-|-|-|-|-|-|-|
1 | commfeatures |bufferto- | rcvdatasize |
1 | |buffercredit| |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|---|-|-|-|-|-|-|-|-|-|-|-|-|
2 | totalconcurrentsequence | reloffsetbyinfocategory |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|---|-|-|-|-|-|-|-|-|-|-|-|-|
5 | edtov |
 |--------------------------------------------------------------------|
 This argument represents a list of keyed values.
 The keys and their default values are listed below:

 {
 -fcphversionhigh
 The default value is 00
 -fcphversionlow
 The default value is 20
 -buffertobuffercredit
 The default value is 0010
 -commfeatures
 The default value is 8000
 -rcvdatasize
 The default value is 0840
 -totalconcurrentsequence
 The default value is 0002
 -reloffsetbyinfocategory
 The default value is 0000
 -edtov
 The default value is 000007d0
 }

 -pl_class1svcparams
 The Payload Class Service Parameters are subdivided
 into fields as shown below:

 |----------------------------------------------------------------|
 |3|3|2|2|2|2|2|2|2|2|2|2|1|1|1|1 |1|1|1|1|1|1| | | | | | | | | | |
 |1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6 |5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|
0 | serviceoptions | ictl (Initiator Control) |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
1 | rctl (Recipient Control) | recdatafieldsize |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
3 | reserved1 |currentsequences| endtoendcredit |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
4 | openseqperexchange | reserved2 |
 |----------------------------------------------------------------|
 This argument represents a list of keyed values.
 The keys and their default values are listed below:

 {
 -serviceoptions
FCoE Functions
292
 The default value is 0000.
 -ictl
 The default value is 0000.
 -rctl
 The default value is 0000.
 -recdatafieldsize
 The default value is 0840.
 -currentsequences
 The default value is 01.
 -endtoendcredit
 The default value is 0000.
 -openseqperexchange
 The default value is 0001.
 -reserved1
 The default value is 00.
 -reserved2
 The default value is 0000.
 }

 -pl_class2svcparams
 Please refer to -pl_class1svcparams.

 -pl_class3svcparams
 Please refer to -pl_class1svcparams.

 -pl_class4svcparams
 Please refer to pl_class1svcparams.

 -pl_reasoncode
 The default value is 3.

 -pl_reasonexplanation
 The default value is 0F.

 -pl_vendorunique
 The default value is 0.

 -pl_nportid
 The default value is 000000.

 -pl_portname
 The default value is 20:00:10:94:00:00:00:01.

 -elpreq_reserved
 The default value is 0000.
 -elpacc_reserved
 The default value is 0000.
 -elprjt_reserved
 The default value is 0000.

 |---------------------------------------------------------------------|
 |3|3|2|2|2|2|2|2|2|2|2|2|1|1|1|1|1|1|1|1|1|1| | | | | | | | | | |
 |1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5 |4 |3 |2 |1 |0 |
 | pl_code |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 | pl_revision | pl_flags | pl_bbscn |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 | pl_ratov (R_A_TOV) |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 | pl_edtov (E_D_TOV) |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 | pl_reqinterconnportname(Requestor/Responder Interconnect Port Name) |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 | pl_reqswitchname (Requestor/Responder Switch Name) |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 | pl_classfsvcparams(Class F Service Parameters) |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 |pl_class1interconnectportparams(Class 1 Interconnect Port Parameters)|
FCoE Functions
293
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 |pl_class2interconnectportparams(Class 2 Interconnect Port Parameters)|
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 |pl_class3interconnectportparams(Class 3 Interconnect Port Parameters)|
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|--|--|--|--|--|--|
 | pl_islflowcontrol (ISL Flow Control) |
 | ... |
 |---------------------------------------------------------------------|
 Exchange Link Parameters (ELP) Request or ELP SW_ACC is subdivided into
 fields below:

 -pl_code
 The default value is 10000000.
 -pl_revision
 The default value is 4.
 -pl_flags
 The default value is 0.
 -pl_bbscn
 The default value is 0.
 -pl_ratov
 The default value is 10000.
 -pl_edtov
 The default value is 2000.
 -pl_reqinterconnportname
 The default value is 20:00:10:94:00:00:00:01.
 -pl_reqswitchname
 The default value is 20:00:10:94:00:00:00:01.
 -pl_reserved
 The default value is
 0000000000000000000000000000000000000000.
 -pl_classfsvcparams
 This argument represents a list of keyed values, the keys
 and their default values are listed below:
 {
 -val
 The default value is 1.
 -reserved1
 The default value is 0000
 -reserved2
 The default value is 0000
 -r
 The default value is 00
 -xii
 The default value is 0
 -reserved3
 The default value is 0000000000000
 -recvdatafieldsize
 The default value is 1000
 -concseq
 The default value is 1
 -endtoendcredit
 The default value is 1
 -openseqperexchange
 The default value is 1
 -reserved4
 The default value is 0000
 }
 -pl_class1interconnectportparams
 This argument represents a list of keyed values.
 The keys and their default values are listed below:
FCoE Functions
294
 {
 -val
 The default value is 0
 -imx
 The default value is 0
 -xps
 The default value is 0
 -lks
 The default value is 0
 -reserved
 The default value is 000000000000
 -recvdatafieldsize
 The default value is 1000
 }
 -pl_class2interconnectportparams
 This argument will represent a list of keyed values.
 The keys and their default values are listed below:
 {
 -val
 The default value is 0
 -rrr
 The default value is 00
 -seq
 The default value is 0
 -reserved
 The default value is 000000000000
 -recvdatafieldsize
 The default value is 1000
 }
 -pl_class3interconnectportparams
 This argument will represent a list of keyed values.
 The keys and their default values are listed below:
 {
 -val
 The default value is 1
 -rrr
 The default value is 00
 -seq
 The default value is 1
 -reserved
 The default value is 000000000000
 -recvdatafieldsize
 The default value is 1000
 }
 -pl_islflowcontrol
 This argument represents a list of keyed values.
 The keys and their default values are listed below:
 {
 -islflowcontrolmode
 The default value is 0002
 -islflowcontrollength
 The default value is 20
 -bbcredit
 The default value is 00000000
 -compatibilityparameters
 The default value is
 00000000000000000000000000000000
 }

 This argument is available when elpreq or elpacc is
 indicated in -dl_id.

Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
FCoE Functions
295
 value formats) using the following keys (with corresponding data):
 stream_id The FCoE traffic handle
 status Success (1) or failure (0) of the operation.

 procName The function name
 log An error message (if the operation failed).
Description:
 Creates, modifies, or deletes FIP raw stream blocks, which are stream
 blocks without endpoints such as hosts and routers.

 The following paragraphs describe when the arguments for this
 command are available.

 The following arguments are available without any limitation:
 -version, -reserved1, -operationcode, -reserved2, -subcode, -fp,
 -sp, -reserved3, -a, -s, -f, -padding

 You can specify the options below when the corresponding descriptor
 type is enabled in -dl_id. The relationships are described below:

 When vlan is indicated in -dl_id, these arguments are available:
 -vlanid
 When priority is indicated in -dl_id, these arguments are available:
 -priority_reserved, -priority
 When macaddr is indicated in -dl_id, these arguments are available:
 -macaddr
 When fcmap is indicated in -dl_id, these arguments are available:
 -fcmap_reserved, -fcmap
 When nameid is indicated in -dl_id, these arguments are available:
 -nameid_reserved, -nameid
 When fabricname is indicated in -dl_id, these arguments are
 available:
 -fabricname_reserved, -fabricname
 When maxrcvsize is indicated in -dl_id, these arguments are
 available:
 -maxrcvsize
 When vendorid is indicated in -dl_id, these arguments are
 available:
 -vendorid, -vendorid_reserved
 When vxport is indicated in -dl_id, these arguments are available:
 -vxport_macaddr, -vxport_reserved, -vxport_addrid,
 -vxport_portname

 When fka_adv_period is indicated in -dl_id these arguments are
 available:
 -fkaadvperiod, -fka_reserved
 When flogireq is indicated in -dl_id, these arguments are
 available:
 -flogireq_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_reserved1, -pl_nportname,
 -pl_nodename, -pl_vendorversionlevel, -pl_commonsvcparams,
 -pl_class1svcparams, -pl_class2svcparams, -pl_class3svcparams,
 -pl_class4svcparams

 When flogiacc is indicated in -dl_id, these arguments are
 available:
 -flogiacc_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
FCoE Functions
296
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_reserved1, -pl_nportname,
 -pl_nodename, -pl_vendorversionlevel, -pl_commonsvcparams,
 -pl_class1svcparams, -pl_class2svcparams, -pl_class3svcparams,
 -pl_class4svcparams
 When flogirjt is indicated in -dl_id, these arguments are
 available:
 -flogirjt_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid h_parameter,
 -pl_reserved1, -pl_reserved2, -pl_reasoncode, -pl_explanationcode
 -pl_vendorunique
 When fdiscreq is indicated in -dl_id, these arguments are available:
 -fdiscreq_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_reserved1, -pl_nportname,
 -pl_nodename, -pl_vendorversionlevel, -pl_commonsvcparams,
 -pl_class1svcparams, -pl_class2svcparams, -pl_class3svcparams,
 -pl_class4svcparams

 When fdiscacc is indicated in -dl_id, these arguments are available:
 -fdiscacc_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_reserved1, -pl_nportname,
 -pl_nodename, -pl_vendorversionlevel, -pl_commonsvcparams,
 -pl_class1svcparams, -pl_class2svcparams, -pl_class3svcparams,
 -pl_class4svcparams

 When fdiscrjt is indicated in -dl_id, these arguments are available:
 -fdiscrjt_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter,
 -pl_reserved1, -pl_reserved2, -pl_reasoncode, -pl_explanationcode,
 -pl_vendorunique

 When logoreq is indicated in -dl_id, these arguments are available:
 -logoreq_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid -h_parameter
 -pl_reserved1, -pl_nportid, -pl_portname

 When logoacc is indicated in -dl_id, these arguments are available:
 -logoacc_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_reserved1

 When logorjt is indicated in -dl_id, these arguments are available:
 -logorjt_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_reserved1, -pl_reserved2,
 -pl_reasoncode, -pl_explanationcode, -pl_vendorunique

 When elpreq is indicated in -dl_id, these arguments are available:
 -elpreq_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_code, -pl_revision,
 -pl_flags, -pl_bbscn, -pl_ratov, -pl_edtov,
 -pl_reqinterconnportname, -pl_reqswitchname, -pl_reserved,
 -pl_classfsvcparams, -pl_class1interconnectportparams,
 -pl_class2interconnectportparams,
 -pl_class3interconnectportparams, -pl_islflowcontrol,

 When elpacc is indicated in -dl_id, these arguments are available:
 -elpacc_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_code, -pl_revision,
 -pl_flags, -pl_bbscn, -pl_ratov, -pl_edtov,
 -pl_reqinterconnportname, -pl_reqswitchname, -pl_reserved,
 -pl_classfsvcparams, -pl_class1interconnectportparams,
FCoE Functions
297
 -pl_class2interconnectportparams,
 -pl_class3interconnectportparams, -pl_islflowcontrol

 When elprjt is indicated in -dl_id, these arguments are available:
 -elprjt_reserved, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter, -pl_reserved1, -pl_reserved2,
 -pl_reasoncode, -pl_explanationcode, -pl_vendorunique
Example:
 #### HLTAPI for Tcl ####
 The following segment is an example for sth::fip_traffic_config. For more
 information, please see the sample script.
 To create a Layer 2 frame by sth::traffic_config.
 set returnedString [sth::traffic_config\
 -mode create\
 -port_handle $port1\
 -l2_encap ethernet_ii\
 -transmit_mode continuous\
 -rate_pps 1000\
 ]
 puts "l2_traffic\n$returnedString"
 keylget returnedString stream_id sb

 #To create the FIP traffic based on the Layer 2 frame. The type of the
 descriptor lists is flogireq for the Flogi Reject Frame.

 set fip_traffic_config "sth::fip_traffic_config -mode create -handle $sb\
 -version 0 -reserved1 0 -operationcode 1 -reserved2 0
 -subcode 0 -fp 1 -sp 0 -reserved3 0 -a 0 -s 0 -f 0
 -dl_id flogireq \
 -flogireq_reserved 0 \
 -h_rctl 22 -h_did 0 -h_csctl 0 -h_sid 0 -h_type 0
 -h_framecontrol 0 -h_seqid 0 -h_dfctl 0 -h_seqcnt 0
 -h_origexchangeid 0 \
 -pl_reserved1 0 -pl_nportname 20:00:10:94:00:00:00:01
 -pl_nodename 10:00:10:94:00:00:00:01 \
 -pl_commonsvcparams {
 -fcphversionhigh 0 \
 -fcphversionlow 20 \
 -buffertobuffercredit 10 \
 } \
 -pl_class1svcparams {
 -serviceoptions 0 \
 -ictl 0 \
 -rctl 0 \
 -endtoendcredit 0 \
 } \
 "
 set returnedString [eval $fip_traffic_config]
 puts "Create Flogi Reject Frame\n$returnedString"

 #To add macaddr to descriptor list in order to generate Flogi Accept Frame
 set fip_traffic_config "sth::fip_traffic_config -mode modify -handle $sb\
 -dl_id macaddr \
 -macaddr 00:10:94:00:00:01 \
 "
 set returnedString [eval $fip_traffic_config]
 puts "Change to Flogi Accept Frame by modify\n$returnedString"

 #To delete the macaddr from descriptor list.
 set returnedString [sth::fip_traffic_config -mode reset -handle $sb
 -dl_id macaddr]
 puts "Delete the macaddr\n$returnedString"

 #To delete the whole FIP frame.
 set returnedString [sth::fip_traffic_config -mode reset -handle $sb ]
 puts "Delete FIP by reset\n$returnedString"
 
FCoE Functions
298
###########################################################
 Sample Input:
 See the examples above.
 Sample Output:
 l2_traffic
 {stream_id streamblock1} {status 1}
 Create Flogi Reject Frame
 {status 1} {procName sth::fip_traffic_config} {streamid streamblock1}
 Change to Flogi Accept Frame by modify
 {status 1} {procName sth::fip_traffic_config} {streamid streamblock1}
 Delete the macaddr
 {status 1} {procName sth::fip_traffic_config} {streamid streamblock1}
 Delete FIP by reset
 {status 1} {procName sth::fip_traffic_config} {streamid streamblock1}
 #### HLTAPI for Python ####
 To create a Layer 2 frame by sth::traffic_config.
 streamblock_ret1 = sth.traffic_config (
 mode ='create',
 port_handle =port_handle[0],
 l2_encap ='ethernet_ii',
 mac_src ='00:10:94:00:00:01',
 ether_type ='88B5',
 mac_dst ='00:10:94:00:00:02',
 enable_control_plane ='0',
 l3_length ='1006',
 name ='StreamBlock_8-3',
 fill_type ='constant',
 fcs_error ='0',
 fill_value ='0',
 traffic_state ='1',
 high_speed_result_analysis = '1',
 length_mode ='fixed',
 disable_signature ='0',
 enable_stream_only_gen ='1',
 pkts_per_burst ='1',
 inter_stream_gap_unit ='bytes',
 burst_loop_count ='30',
 transmit_mode ='continuous',
 inter_stream_gap ='12',
 rate_percent ='10');

 To create the FIP traffic with multiple types of descriptor lists based
 on the Layer 2 frame:

 stream_id = streamblock_ret1['stream_id']
 streamblock_fip_ret = sth.fip_traffic_config (
 mode ='create',
 handle =stream_id,
 reserved1 ='000000000011',
 reserved2 ='01',
 reserved3 ='00000000011',
 fp ='1',
 subcode ='11',
 padding ='1111',
 a ='1',
 f ='1',
 operationcode ='0001',
 s ='1',
 sp ='1',
 version ='0001',
 flogireq_reserved ='1111',
 macaddr ='00:10:94:00:00:11',
 priority_reserved ='11',
 priority ='11',
 fcmap_reserved ='111111',
 fcmap ='0EFC11',
 nameid_reserved ='1111',
FCoE Functions
299
 nameid ='10:00:10:94:00:00:00:11',
 fabricname ='20:00:10:94:00:00:00:11',
 fabricname_reserved ='11',
 maxrcvsize ='1111',
 flogiacc_reserved ='1111',
 flogirjt_reserved ='0000',
 fdiscreq_reserved ='1111',
 dl_id =['flogireq','macaddr','priority','fcmap',
 'nameid','fabricname','maxrcvsize','flogiacc',
 'flogirjt','fdiscreq'],
 h_csctl ='11',
 h_dfctl ='11',
 h_did ='111111',
 h_framecontrol ='291111',
 h_origexchangeid ='1111',
 h_parameter ='11111111',
 h_rctl ='22',
 h_responseexchangeid ='1111',
 h_seqcnt ='1111',
 h_seqid ='11',
 h_sid ='111111',
 h_type ='01',
 pl_class1svcparams =['-ictl','1111','-endtoendcredit','1111',
 '-rctl','1111','-currentsequences','11',
'-reserved1','11','-reserved2','1111',
'-recdatafieldsize','0841',
 '-serviceoptions','1111',
'-openseqperexchange','1111'],
 pl_class2svcparams =['-ictl','1111','-endtoendcredit','1111',
'-rctl','1111','-currentsequences','11',
'-reserved1','11','-reserved2','1111',
'-recdatafieldsize','0841',
 '-serviceoptions','1111',
'-openseqperexchange','1111'],
 pl_class3svcparams =['-ictl','1111','-endtoendcredit','1111',
'-rctl','1111','-currentsequences','11',
'-reserved1','11','-reserved2','1111',
'-recdatafieldsize','0841',
 '-serviceoptions','8811',
'-openseqperexchange','1111'],
 pl_class4svcparams =['-ictl','1111','-endtoendcredit','1111',
'-rctl','1111','-currentsequences','11',
'-reserved1','11','-reserved2','1111',
'-recdatafieldsize','0841','
-serviceoptions','1111','-openseqperexchange','1111'],
 pl_commonsvcparams =['-reloffsetbyinfocategory','1111',
'-commfeatures','8111','-fcphversionhigh','11',
'-totalconcurrentsequence','1111',
'-rcvdatasize','0841','-fcphversionlow','11',
 '-edtov','000007D1',
'-buffertobuffercredit','1111'],
 pl_explanationcode ='0F',
 pl_nodename ='10:00:10:94:00:00:00:11',
 pl_nportname ='20:00:10:94:00:00:00:11',
 pl_reasoncode ='03',
 pl_reserved1 ='111111',
 pl_vendorunique ='00',
 pl_vendorversionlevel ='00000000000000000000000000001111');

 Sample Output:
 L2 Traffic:
 {'status': '1', 'stream_id': 'streamblock1'}
 FIP Traffic:
 {'status': '1', 'procName': 'sth::fip_traffic_config', 'streamid': 'streamblock1'}


 #### HLTAPI for Perl ####
 To create a Layer 2 frame by sth::traffic_config.

 my %streamblock_ret1 = sth::traffic_config (
 mode => 'create',
FCoE Functions
300
 port_handle => "$hport[1]",
 l2_encap => 'ethernet_ii',
 mac_src => '00:10:94:00:00:01',
 ether_type => '88B5',
 mac_dst => '00:10:94:00:00:02',
 enable_control_plane => '0',
 l3_length => '1006',
 name => 'StreamBlock_8-3',
 fill_type => 'constant',
 fcs_error => '0',
 fill_value => '0',
 traffic_state => '1',
 high_speed_result_analysis => '1',
 length_mode => 'fixed',
 disable_signature => '0',
 enable_stream_only_gen => '1',
 pkts_per_burst => '1',
 inter_stream_gap_unit => 'bytes',
 burst_loop_count => '30',
 transmit_mode => 'continuous',
 inter_stream_gap => '12',
 rate_percent => '10');

 #To create the FIP traffic with multiple types of descriptor lists based
 on the Layer 2 frame.

 my $stream_id = join( " ", @{$streamblock_ret1{stream_id}});

 my %streamblock_fip_ret = sth::fip_traffic_config (
 mode => 'create',
 handle => "$stream_id",
 reserved1 => '000000000011',
 reserved2 => '01',
 reserved3 => '00000000011',
 fp => '1',
 subcode => '11',
 padding => '1111',
 a => '1',
 f => '1',
 operationcode => '0001',
 s => '1',
 sp => '1',
 version => '0001',
 flogireq_reserved => '1111',
 macaddr => '00:10:94:00:00:11',
 priority_reserved => '11',
 priority => '11',
 fcmap_reserved => '111111',
 fcmap => '0EFC11',
 nameid_reserved => '1111',
 nameid => '10:00:10:94:00:00:00:11',
 fabricname => '20:00:10:94:00:00:00:11',
 fabricname_reserved => '11',
 maxrcvsize => '1111',
 flogiacc_reserved => '1111',
 flogirjt_reserved => '0000',
 fdiscreq_reserved => '1111',
 dl_id => 'flogireq macaddr priority fcmap nameid fabricname maxrcvsize
 flogiacc flogirjt fdiscreq',
 h_csctl => '11',
 h_dfctl => '11',
 h_did => '111111',
 h_framecontrol => '291111',
 h_origexchangeid => '1111',
 h_parameter => '11111111',
 h_rctl => '22',
 h_responseexchangeid => '1111',
 h_seqcnt => '1111',
 h_seqid => '11',
 h_sid => '111111',
 h_type => '01',
FCoE Functions
301
 pl_class1svcparams => '-ictl 1111 -endtoendcredit 1111 -rctl 1111
 -currentsequences 11 -reserved1 11 -reserved2 1111
 -recdatafieldsize 0841 -serviceoptions 1111
 -openseqperexchange 1111',
 pl_class2svcparams => '-ictl 1111 -endtoendcredit 1111 -rctl 1111
 -currentsequences 11 -reserved1 11 -reserved2 1111
 -recdatafieldsize 0841 -serviceoptions 1111
 -openseqperexchange 1111',
 pl_class3svcparams => '-ictl 1111 -endtoendcredit 1111 -rctl 1111
 -currentsequences 11 -reserved1 11 -reserved2 1111
 -recdatafieldsize 0841 -serviceoptions 8811
 -openseqperexchange 1111',
 pl_class4svcparams => '-ictl 1111 -endtoendcredit 1111 -rctl 1111
 -currentsequences 11 -reserved1 11 -reserved2 1111
 -recdatafieldsize 0841 -serviceoptions 1111
 -openseqperexchange 1111',
 pl_commonsvcparams => '-reloffsetbyinfocategory 1111 -commfeatures 8111
 -fcphversionhigh 11 -totalconcurrentsequence 1111
 -rcvdatasize 0841 -fcphversionlow 11 -edtov 000007D1
 -buffertobuffercredit 1111',
 pl_explanationcode => '0F',
 pl_nodename => '10:00:10:94:00:00:00:11',
 pl_nportname => '20:00:10:94:00:00:00:11',
 pl_reasoncode => '03',
 pl_reserved1 => '111111',
 pl_vendorunique => '00',
 pl_vendorversionlevel => '00000000000000000000000000001111');
 Sample Output:
 L2 Traffic:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'stream_id';
 $VAR4 = 'streamblock3';
 FIP traffic:
 $VAR1 = 'procName';
 $VAR2 = 'sth::fip_traffic_config';
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'streamid';
 $VAR6 = 'streamblock3';
Notes:
 None.
End of Procedure Header
sth::fcoe_traffic_config
Name:
 sth::fcoe_traffic_config
Purpose:
 Creates, modifies, or deletes FCoE to modify the frames of raw stream
 blocks. The raw stream blocks are stream blocks without endpoints such as
 hosts and routers.
Synopsis:
 sth::fcoe_traffic_config
 -mode {create | modify | reset}
 -handle {streamblock_handle}
 [-sof {soff|sofi2|sofn2|sofi3|sofn3|sofi4|sofn4|sofc4}]
 [-eof {eofn|eoft|eofni|eofa|eofdt|eofdti|eofrt|eofrti}]
 [-reserved1 <bits>]
 [-reserved2 <bits>]
 [-reserved3 <bits>]
FCoE Functions
302
 [-reserved4 <bits>]
 [-reserved5 <bits>]
 [-version <bits>]
 [-h_rctl <hexadecimal>]
 [-h_did <hexadecimal>]
 [-h_csctl <hexadecimal>]
 [-h_sid <hexadecimal>]
 [-h_type <bits>]
 [-h_framecontrol <bits>]
 [-h_seqid <bits>]
 [-h_dfctl <bits>]
 [-h_seqcnt <bits>]
 [-h_origexchangeid <bits>]
 [-h_responseexchangeid <bits>]
 [-h_parameter <hexadecimal>]
 [-pl_id { custom|plogireq|plogiacc|plogirjt|flogireq|flogiacc|flogirjt|
 fdiscreq|fdiscacc|fdiscrjt||logoreq||logoacc|logorjt|fcpcmnd|
 efpreq|efpacc|diareq|diaacc|escreq|escacc|hloreq|lsureq|lsareq|
 ganxtacc|gpnidacc|gnnidacc|gcsidacc|gftidacc|gptidacc|
 gfpnidacc|gspnidacc|gffidacc|gidpnacc|gidnnacc|gsnnnnacc|
 gidftacc|gpnftacc|gnnftacc|rsnnnn|rffid|rspnid|rptid|rftid|
 rcsid|rnnid|rpnid|daid|mergereq|mergereqacc }
 [-pl_reserved1 <hexadecimal>]
 [-pl_nportname <hexadecimal>]
 [-pl_nodename <hexadecimal>]
 [-pl_vendorversionlevel <hexadecimal>]
 [-pl_commonsvcparams <keyed list>]
 [-pl_class1svcparams <keyed list>]
 [-pl_class2svcparams {$pl_classsvcparams}]
 [-pl_class3svcparams {$pl_classsvcparams}]
 [-pl_class4svcparams {$pl_classsvcparams}]
 [-pl_reasoncode <hexadecimal>]
 [-pl_reasonexplanation <hexadecimal>]
 [-pl_vendorunique <hexadecimal>]
 [-pl_nportid <hexadecimal>]
 [-pl_portname <hexadecimal>]
 [-pl_cdbtype { cdb6|cdb10|r_6|r_10|r_buff|r_l10|r_capacity10|w_6|w_10|
 w_buff|w_l10|w_verify10|xd_r10|xd_w10|ssu|ms_6|ms_10|r_lun }
 [-pl_fcplun <hexadecimal>]
 [-pl_cmndrefnum <hexadecimal>]
 [-pl_reserved <hexadecimal>]
 [-pl_priority <hexadecimal>]
 [-pl_taskattrib <hexadecimal>]
 [-pl_taskmgmtflags <hexadecimal>]
 [-pl_addifcpcdblen <hexadecimal>]
 [-pl_rdata <hexadecimal>]
 [-pl_wdata <hexadecimal>]
 [-pl_fcpdl <hexadecimal>]
 [-pl_fcpbirddl <hexadecimal>]
 [-pl_cdb_miscinfo <hexadecimal>]
 [-pl_cdb_miscinfo1 <hexadecimal>]
 [-pl_cdb_lba <hexadecimal>]
 [-pl_cdb_len <hexadecimal>]
 [-pl_cdb_control <hexadecimal>]
 [-pl_cdb_service <hexadecimal>]
 [-pl_cdb_miscinfo2 <hexadecimal>]
 [-pl_cdb_reserved <hexadecimal>]
 [-pl_cdb_transferlen <hexadecimal>]
 [-pl_cdb_rdprotect <hexadecimal>]
 [-pl_cdb_dpo <hexadecimal>]
 [-pl_cdb_fua <hexadecimal>]
 [-pl_cdb_fua_nv <hexadecimal>]
 [-pl_cdb_obsolete <hexadecimal>]
 [-pl_cdb_reserved2 <hexadecimal>]
 [-pl_cdb_groupnum <hexadecimal>]
 [-pl_cdb_mode <hexadecimal>]
 [-pl_cdb_bufferid <hexadecimal>]
 [-pl_cdb_bufferoffset <hexadecimal>]
 [-pl_cdb_allolen <hexadecimal>]
 [-pl_cdb_pblock <hexadecimal>]
 [-pl_cdb_corrct <hexadecimal>]
FCoE Functions
303
 [-pl_cdb_reserved3 <hexadecimal>]
 [-pl_cdb_pmi <hexadecimal>]
 [-pl_cdb_wrprotect <hexadecimal>]
 [-pl_cdb_paramlistlen <hexadecimal>]
 [-pl_cdb_wr_uncor <hexadecimal>]
 [-pl_cdb_core_dis <hexadecimal>]
 [-pl_cdb_xorpinfo <hexadecimal>]
 [-pl_cdb_disablewr <hexadecimal>]
 [-pl_cdb_immed <hexadecimal>]
 [-pl_cdb_reserved1 <hexadecimal>]
 [-pl_cdb_pwrcondmod <hexadecimal>]
 [-pl_cdb_pwrcond <hexadecimal>]
 [-pl_cdb_noflush <hexadecimal>]
 [-pl_cdb_loej <hexadecimal>]
 [-pl_cdb_start <hexadecimal>]
 [-pl_cdb_dbd <hexadecimal>]
 [-pl_cdb_pc <hexadecimal>]
 [-pl_cdb_pagecode <hexadecimal>]
 [-pl_cdb_subpagecode <hexadecimal>]
 [-pl_cdb_llbaa <hexadecimal>]
 [-pl_cdb_selectreport <hexadecimal>]
 [-pl_recordlen <hexadecimal>]
 [-pl_principalswitchpriority <hexadecimal>]
 [-pl_principalswitchname <hexadecimal>]
 [-pl_domainid_lists <keyed list>]
 [-pl_multiid_lists <keyed list>]
 [-pl_pagelen <hexadecimal>]
 [-pl_originswitchname <hexadecimal>]
 [-pl_notmeaningful <hexadecimal>]
 [-pl_respondswitchname <hexadecimal>]
 [-pl_flags <hexadecimal>]
 [-pl_vendorescid <keyed list>]
 [-pl_lsr_lists <keyed list>]
 [-pl_fspfheader <keyed list>]
 [-pl_lsh_lists <keyed list>]
 [-pl_reserved2 <hexadecimal>]
 [-pl_hellointerval <hexadecimal>]
 [-pl_deadinterval <hexadecimal>]
 [-pl_rxdomainid <hexadecimal>]
 [-pl_origiportindex <hexadecimal>]
 [-pl_ctiu <hexadecimal>]
 [-pl_porttype <hexadecimal>]
 [-pl_portid <hexadecimal>]
 [-pl_portname <hexadecimal>]
 [-pl_nodename <hexadecimal>]
 [-pl_initprocessassociator <hexadecimal>]
 [-pl_ipaddrnode <hexadecimal>]
 [-pl_classofservice <hexadecimal>]
 [-pl_fc4types <hexadecimal>]
 [-pl_ipaddrport <hexadecimal>]
 [-pl_fabricportname <hexadecimal>]
 [-pl_reserved3 <hexadecimal>]
 [-pl_hardaddr <hexadecimal>]
 [-pl_symbolicportname <hexadecimal>]
 [-pl_fc4features <hexadecimal>]
 [-pl_symbolicnodename <hexadecimal>]
 [-pl_portidentifier_list <hexadecimal>]
 [-pl_portname_list <hexadecimal>]
 [-pl_nodename_list <hexadecimal>]
 [-pl_fc4featurebits <hexadecimal>]
 [-pl_typecode <hexadecimal>]
 [-pl_protocolver <hexadecimal>]
 [-pl_basiczoning_list <hexadecimal>]
 [-pl_enhancezoning_list <hexadecimal>]
 [-pl_obsolete1 <hexadecimal>]
 [-pl_obsolete2 <hexadecimal>]
 [-pl_obsolete3 <hexadecimal>]
Arguments:
 -handle
 Specifies the handle of the FCoE stream block to be
FCoE Functions
304
 configured. This argument is mandatory. When the -mode
 argument is set to create, the handle must be the returned
 value of the sth::traffic_config command. When the -mode is
 set to modify or reset, the handle must be the returned
 value of the sth::fcoe_traffic_config command.
 -mode
 Specifies the action to be taken. This argument is mandatory.
 Possible values are create, modify and reset.

 create - Creates FCoE traffic to be applied to the
 stream block specified by the -handle argument.

 modify - Modifies the FCoE traffic.

 reset - Removes the FCoE traffic from the specified stream
 block.

 -version
 Specifies the FCoE version. It is a 4-bit value. The
 default value is 0000.

 The FCoE PDU is contained by the FCoE frame that
 is added to the stream by sth::fcoe_traffic_config. The fields are
 described by -version and the arguments below. You can refer
 to FIBRE CHANNEL BACKBONE - 5 (FC-BB-5) for more
 information.
 The figure below shows the FCoE PDU format:
 |3|3|2|2|2|2|2|2|2|2|2|2|1|1|1|1|1|1|1|1|1|1| | | | | | | | | | |
 |1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|
 0 | |version| reserveds1 |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 1 | reserved2 |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 2 | reserved3 |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 3 | reserveds1 | sof |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 4 | fc_frame (n words) |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 n+4 | eof | |
 |---------------------------------------------------------------|

 -sof
 Specifies the Start of Frame (SOF) delimiter for the
 encapsulated FC frame. Possible values are soff, sofi2,
 sofn2, sofi3, sofn3, sofi4, sofn4, and sofc4. The default
 value is sofi3.
 -eof
 Specifies the End of Frame (EOF) delimiter for the
 encapsulated FC frame. Possible values are eofn, eoft, eofni,
 eofa, eofdt, eofdti, eofrt, and eofrti. The default value is
 eoft.
 -reserved1
 It is a 12-bit value. The default value is 000000000000.
 -reserved2
 It is a 32-bit hex value. The default value is 00000000.
 -reserved3
 It is a 32-bit hex value. The default value is 00000000.
 -reserved4
 It is a 24-bit hex value. The default value is 000000.
 -reserved5
 It is a 24-bit hex value. The default value is 000000.
FCoE Functions
305
 |---------------------------------------------------------------|
 |3|3|2|2|2|2|2|2|2|2|2|2|1|1|1|1|1|1|1|1|1|1| | | | | | | | | | |
 |1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0|
 0 | h_rctl | h_did |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 1 | h_csctl | h_sid |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 2 | h_type | h_framecontrol |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 3 | h_seqid | h_dfctl | h_seqcnt |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 4 | h_origexchangeid | h_responseexchangeid |
 |-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
 5 | h_parameter |
 |---------------------------------------------------------------|
 -h_rctl
 Contains routing bits and information bits to categorize the
 frame function. The default value is 22.
 -h_did
 Contains the address identifier of the destination Nx_Port.
 The default value is 000000.
 -h_csctl
 Contains the Class Specific Control/Priority information.
 The default value is 00.
 -h_sid
 Contains the address identifier of the source Nx_Port.
 The default value is 000000.
 -h_type
 The data structure type (TYPE) is a one-byte field (Word 2,
 Bits 31-24) that identifies the protocol of the frame
 content for data frames. The default value is 00
 -h_framecontrol
 The Frame Control (F_CTL) field (Word 2, Bits 23-0) is a
 three-byte field that contains the control information
 relating to the frame content. The default value is 000000.
 -h_seqid
 The SEQ_ID is a one-byte field (Word 3, Bits 31-24)
 assigned by the Sequence Initiator that is unique for
 a specific D_ID and S_ID pair while the Sequence is open.
 The default value is 00.
 -h_dfctl
 Data Field Control (DF_CTL) is a one-byte field (Word 3,
 Bits 23-16) that specifies the presence of optional headers
 at the beginning of the Data_Field for Device_Data or
 Video_Data frames. The default value is 00.
 -h_seqcnt
 The sequence count (SEQ_CNT) is a two-byte field (Word 3,
 Bits 15-0) that indicates the sequential order of data frame
 transmission within a single Sequence or multiple
 consecutive Sequences for the same Exchange. The default
 value is 0000.
 -h_origexchangeid
 Indicates the Originator Exchange_ID. The Originator
 Exchange_ID is a two-byte field (Word 4, Bits 31-16) that
 identifies the Exchange_ID assigned by the Originator of
 the Exchange. The default value is 0000.
 -h_responseexchangeid
 Indicates the Responder Exchange_ID. The Responder
 Exchange_ID is a two-byte field (Word 4, Bits
FCoE Functions
306
 15-0) assigned by the Responder that provides a unique,
 locally meaningful identifier at the Responder for
 an Exchange established by an Originator and identified by
 -h_origexchangeid. The default value is ffff.
 -h_parameter
 The Parameter field (Word 5, Bits 31-0) has different meanings
 when the frame type (-h_type) is different. e.g. For
 Link_Control frames, this parameter field is used to carry
 information specific to the individual Link_Control frame. The
 default value is 00000000.
 -pl_id
 Specifies the payload type for the fc frame.
 The possible values are custom, plogireq, plogiacc,
 plogirjt, flogireq, flogiacc, flogirjt, fdiscreq, fdiscacc,
 fdiscrjt, logoreq, logoacc, logorjt, fcpcmnd, efpreq,
 efpacc, diareq, diaacc, escreq, escacc, hloreq, lsureq,
 lsareq, ganxtacc, gpnidacc, gnnidacc, gcsidacc, gftidacc,
 gptidacc, gfpnidacc, gspnidacc, gffidacc, gidpnacc,
 gidnnacc, gsnnnnacc, gidftacc, gpnftacc, gnnftacc, rsnnnn,
 rffid, rspnid, rptid, rftid, rcsid, rnnid, rpnid, daid,
 mergereq, and mergereqacc. This argument is mandatory when
 -mode is set to create or modify.

 -pl_reserved1
 The default value is 000000.
 -pl_nportname
 The default value is 20:00:10:94:00:00:00:01.

 -pl_nodename
 The default value is10:00:10:94:00:00:00:01.

 -pl_vendorversionlevel
 The default value is 00000000000000000000000000000000.
 -pl_commonsvcparams
 This argument will represent a list of keyed values. The
 keys and their default values are listed below:

 {
 -fcphverhigh 00 -fcphverlow 20 -b2bcredit 0010
 -commfeatures 8000 -rcvdatasize 0840
 -totalconcurrentseq 0002 -reloffsetbyinfocategory 0000
 -edtov 000007d0
 }

 -pl_class1svcparams
 This argument will represent a list of keyed values. The
 keys and their default values are listed below:
 {
 -serviceoptions 0000 -ictl 0000 -rctl 0000
 -recdatafieldsize 0840 -currentseq 01
 -endtoendcredit 0000 -openseqperexchange 0001 -reserved1 00
 -reserved2 0000
 }

 -pl_class2svcparams
 Please refer to the -pl_class1svcparams argument.

 -pl_class3svcparams
 Please refer to the -pl_class1svcparams argument.

 -pl_class4svcparams
 Please refer to the -pl_class1svcparams argument.

 -pl_reasoncode
 The default value is 3.

 -pl_reasonexplanation
FCoE Functions
307
 The default value is 0F.

 -pl_vendorunique
 The default value is 0.

 -pl_nportid
 The default value is 000000.

 -pl_portname
 The default value is 20:00:10:94:00:00:00:01.

 -pl_cdbtype
 Specifies the cdb type for payload when the payload type is
 fcpcmnd. Possible values are cdb6, cdb10, r_6, r_10,
 r_buff, r_l10, r_capacity10, w_6, w_10, w_buff, w_l10,
 w_verify10, xd_r10, xd_w10, ssu, ms_6, ms_10, and r_lun.
 This argument is mandatory when -mode is set to create or
 modify.
 -pl_fcplun
 The default value is 000000000000000.

 -pl_cmndrefnum
 The default value is 0.

 -pl_reserved
 The default value is 0.

 -pl_priority
 The default value is 0.

 -pl_taskattrib
 The default value is 000.

 -pl_taskmgmtflags
 The default value is 00.

 -pl_addifcpcdblen
 The default value is 0.

 -pl_rdata
 The default value is 0.

 -pl_wdata
 The default value is 0.

 -pl_fcpdi
 The default value is 00000000.

 -pl_fcpbirddi
 The default value is 00000000.

 -pl_cdb_miscinfo
 The default value is 000.

 -pl_cdb_miscinfo1
 The default value is 000.

 -pl_cdb_lba
 The default value is 0.

 -pl_cdb_len
 The default value is 0.

 -pl_cdb_control
 The default value is 00.

 -pl_cdb_service
 The default value is 00000.

 -pl_cdb_miscinfo2
FCoE Functions
308
 The default value is 00000000.

 -pl_cdb_reserved
 The default value is 000.

 -pl_cdb_transferlen
 The default value is 0.

 -pl_cdb_rdprotect
 The default value is 000.

 -pl_cdb_dpo
 The default value is 0.

 -pl_cdb_fua
 The default value is 0.

 -pl_cdb_fua_nv
 The default value is 0.

 -pl_cdb_obsolete
 The default value is 0.

 -pl_cdb_reserved2
 The default value is 000.

 -pl_cdb_groupnum
 The default value is 0.

 -pl_cdb_mode
 The default value is 0.

 -pl_cdb_bufferid
 The default value is 0.

 -pl_cdb_bufferoffset
 The default value is 0.

 -pl_cdb_allolen
 The default value is 0.

 -pl_cdb_pblock
 The default value is 0.

 -pl_cdb_corrct
 The default value is 0.

 -pl_cdb_reserved3
 The default value is 0000000.

 -pl_cdb_pmi
 The default value is 0.

 -pl_cdb_wrprotect
 The default value is 000.

 -pl_cdb_paramlistlen
 The default value is 0.

 -pl_cdb_wr_uncor
 The default value is 0.

 -pl_cdb_core_dis
 The default value is 0.

 -pl_cdb_xorpinfo
 The default value is 0.

 -pl_cdb_disablewr
 The default value is 0.
 
FCoE Functions
309
 -pl_cdb_immed
 The default value is 0.

 -pl_cdb_reserved1
 The default value is 00.

 -pl_cdb_pwrcondmod
 The default value is 000.

 -pl_cdb_pwrcond
 The default value is 000.

 -pl_cdb_noflush
 The default value is 0.

 -pl_cdb_loej
 The default value is 0.

 -pl_cdb_start
 The default value is 0.

 -pl_cdb_dbd
 The default value is 0.

 -pl_cdb_pc
 The default value is 00.

 -pl_cdb_pagecode
 The default value is 0.

 -pl_cdb_subpagecode
 The default value is 00.

 -pl_cdb_llbaa
 The default value is 0.

 -pl_cdb_selectreport
 The default value is 00.
 -pl_recordlen
 The default value is 10.
 -pl_reserved
 The default value is 000000.
 -pl_principalswitchpriority
 The default value is ff.
 -pl_pagelen
 The default value is 10.
 -pl_principalswitchname
 The default value is 20:00:10:94:00:00:00:01.
 -pl_domainid_lists
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -domainid 00 -reserved1 0000 -reserved2 00000000
 -switchname 20:00:10:94:00:00:00:01
 }
 -pl_multiid_lists
 This argument represents a list of keyed values, The keys
 and their default values are listed below:

 {
 -multicastgroupnumber 0 -reserved1 0000
 -reserved2 000000000000000000000000
 }
FCoE Functions
310
 -pl_notmeaningful
 The default value is 00000000.

 -pl_originswitchname
 The default value is 20:00:10:94:00:00:00:01.

 -pl_respondswitchname
 The default value is 20:00:10:94:00:00:00:01.
 -pl_flags
 The default value is 00000000.

 -pl_vendorescid
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -type 13 -length 3 -reserved 0000 -vendorid 00000000
 }

 -pl_fspfheader
 This argument represents a list of keyed values. The keys
 and their default values are listed below:
 {
 -fspfversion 02 -obsoletedfcsw4 00 -authenticationtype 00
 -reserved 00 -originatingdomainid 00000001
 -authentication 000000000000000
 }

 -pl_lsr_lists
 This argument represents a list of keyed values. The keys
 and their default values are listed below:
 {
 -lsrtype 01 -reserved1 00 -lsrage 2 -reserved2 00000000
 -linkstateid 00000001 -advdomainid 00000000
 -lsincarnationnumber 0 -reserved 0000
 }

 -pl_lsh_lists
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -lsrtype 01 -reserved1 00 -lsrage 1 -reserved2 00000000
 -linkstateid 00000001 -advdomainid 00000000
 -lsincarnationnumber 0
 }

 -pl_hellointerval
 The default value is 20.

 -pl_deadinterval
 The default value is 80.

 -pl_rxdomainid
 The default value is 00000001.

 -pl_reserved2
 The default value is 00.

 -pl_origiportindex
 The default value is 0.

 -pl_porttype
 The possible values are unidentified, nxport, nlport,
 nport, flport, fport, fnlport, eport and bport.
 -pl_portid
 The default value is 000000.

 -pl_portname 
FCoE Functions
311
 The default value is 20:00:10:94:00:00:00:00.

 -pl_nodename
 The default value is 10:00:10:94:00:00:00:00.

 -pl_symbolicportname
 The default value is {}.

 -pl_symbolicnodename
 The default value is {}.

 -pl_initprocessassociator
 The default value is 00:00:00:00:00:00:00:00.

 -pl_ipaddrnode
 The default value is 00000000000000000000000000000000.

 -pl_classofservice
 The default value is 00000000.

 -pl_fc4types
 The default value is
 0000010000000000000000000000000000000000000000000000000000000000

 -pl_ipaddrport
 The default value is 00000000000000000000000000000000.

 -pl_fabricportname
 The default value is 20:00:10:94:00:00:00:00.

 -pl_reserved3
 The default value is 00.

 -pl_hardaddr
 The default value is 000000.

 -pl_ctiu
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -revision 01 -inid 000000 -gstype fc -gssubtype 02
 -options 00 -reserved 00 -commandrespondcode 0000
 -maximumresidualsize 0000 -fragmentid 00 -reserved 00
 }
 -pl_portidentifier_list
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -control 00000000 -portidentifier 000000
 }
 -pl_portname_list
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -control 00000000 -portidentifier 000000 -reserved 00000000
 -portname 20:00:10:94:00:00:00:00
 }
 -pl_nodename_list
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -control 00000000 -portidentifier 000000 -reserved 00000000
 -nodename 10:00:10:94:00:00:00:00
 }
FCoE Functions
312
 -pl_basiczoning_list
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -activezonesetlength 0 -zonesetdatabaseobjectlength 0
 }
 -pl_enhancezoning_list
 This argument represents a list of keyed values. The keys
 and their default values are listed below:

 {
 -reserved 0000
 -enhancedzoningflags 00000000000000000000000000000000
 -activezonesetlength 0 -zonesetdatabaseobjectlength 0
 }

 -pl_protocolver
 The default value is 00.

 -pl_obsolete1
 The default value is 00.

 -pl_obsolete2
 The default value is 00.

 -pl_obsolete3
 The default value is 00.

Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.

 -pl_command
 -pl_payload

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value
 formats) using the following keys (with corresponding data):
 stream_id The FCoE traffic handle
 status Success (1) or failure (0) of the operation.

 procName The function name
 log An error message (if the operation failed).
Description:
 The sth::fcoe_traffic_config configures FCoE to modify stream blocks set up
 by the sth::traffic_config function. Use the sth::fcoe_traffic_config
 function to create new FCoE frames, modify existing FCoE frames, or reset
 FCoE frames. (Use the -mode argument to specify the type of operation, and
 see the Notes for this section for more information.)

 When you create a FCoE frame, the Spirent HLTAPI adds FCoE to the
 Ethernet Layer 2 frame to modify the stream block specified by the -handle
 argument. To configure traffic, use the arguments of the
 sth::fcoe_traffic_config function to specify values for fields of an FCoE
 datagram. When you start traffic during the test, Spirent HLTAPI generates
 frames containing protocol headers based on the argument values. The
 arguments provide information such as version, SOF, EOF, and other
 datagram values.

 However, the availability of the arguments is determined by the -pl_id and
FCoE Functions
313
 other arguments. The information below explains when you can
 select the specific arguments.

 The following arguments are available whatever -pl_id is set to:
 -sof, -eof, -reserved1, -reserved2, -reserved3, -reserved4,
 -reserved5, -version, -h_did, -h_sid, -h_type, -h_framecontrol,
 -h_seqid, -h_dfctl, -h_seqcnt, -h_origexchangeid,
 -h_responseexchangeid, -h_parameter.

 Except those arguments, other arguments are also available when the
 corresponding payload type is enabled in -pl_id. The arguments are
 described below:

 When custom is indicated in -pl_id, you can specify -pl_payload.

 When plogiacc, plogireq, flogireq, flogiacc, fdiscreq, or fdiscacc is
 indicated in -pl_id, the following arguments are available:
 -pl_reserved1, -pl_nportname, -pl_nodename, -pl_vendorversionlevel,
 -pl_commonsvcparams, -pl_class1svcparams, -pl_class2svcparams,
 -pl_class3svcparams, -pl_class4svcparams

 When plogirjt, flogirjt, fdiscrjt, or logorjt is indicated in -pl_id, the
 following arguments are available:
 -pl_reserved1, -pl_reserved2, -pl_reasoncode, -pl_explanationcode,
 -pl_vendorunique

 When logoreq is indicated in -pl_id, the following arguments are available:
 -pl_reserved1, -pl_portname, -pl_nportid

 When you specify logoacc for the -pl_id argument, these arguments
 are available:
 -pl_reserved1

 When fcpcmnd is indicated in -pl_id, you can specify these
 arguments:
 -pl_cdbtype, -pl_fcplun, -pl_cmndrefnum, -pl_reserved, -pl_priority,
 -pl_taskattrib, -pl_taskmgmtflags, -pl_addifcpcdblen, -pl_rdata,
 -pl_wdata, -pl_fcpdl, -pl_fcpbirddl

 When you indicate fcpcmnd in the -pl_id argument and set one or more of
 the arguments above to the specific values, you can specify the
 corresponding arguments. The information below provides the arguments that
 must be set and the corresponding arguments that you can specify.

 When you set -pl_cdbtype to cdb6, these arguments are available:
 -pl_cdb_miscinfo, -pl_cdb_lba, -pl_cdb_len, -pl_cdb_control

 When -pl_cdbtype is set to cdb10, you can specify these
 options:
 -pl_cdb_miscinfo1, -pl_cdb_service, -pl_cdb_lba,
 -pl_cdb_miscinfo2, -pl_cdb_len, -pl_cdb_control

 When -pl_cdbtype is set to r_6, these arguments are available:
 -pl_cdb_reserved, -pl_cdb_lba, -pl_cdb_transferlen,
 -pl_cdb_control

 When -pl_cdbtype is set to r_10, these arguments are also
 available:
 -pl_cdb_rdprotect, -pl_cdb_dpo, -pl_cdb_fua, -pl_cdb_reserved1,
 -pl_cdb_fua_nv, -pl_cdb_obsolete, -pl_cdb_lba, -pl_cdb_reserved2,
 -pl_cdb_groupnum, -pl_cdb_transferlen, -pl_cdb_control

 When -pl_cdbtype is set to r_buff, these arguments are
 available:
 -pl_cdb_mode, -pl_cdb_bufferid, -pl_cdb_bufferoffset,
 -pl_cdb_allolen, -pl_cdb_control

 When -pl_cdbtype is set to r_l10, these arguments are
 available:
 -pl_cdb_reserved1, -pl_cdb_pblock, -pl_cdb_corrct,
 -pl_cdb_obsolete, -pl_cdb_lba, -pl_cdb_reserved2,
FCoE Functions
314
 -pl_cdb_transferlen, -pl_cdb_control

 When -pl_cdbtype is set to r_capacity10, these arguments are
 available:
 -pl_cdb_reserved1, -pl_cdb_obsolete, -pl_cdb_lba,
 -pl_cdb_reserved2, -pl_cdb_reserved3, -pl_cdb_pmi,
 -pl_cdb_control

 When -pl_cdbtype is set to w_6, these arguments are available:
 -pl_cdb_reserved, -pl_cdb_lba, -pl_cdb_transferlen,
 -pl_cdb_control

 When -pl_cdbtype is set to w_10, these arguments are available:
 -pl_cdb_wrprotect, -pl_cdb_dpo, -pl_cdb_fua, -pl_cdb_reserved1,
 -pl_cdb_fua_nv, -pl_cdb_obsolete, -pl_cdb_lba, -pl_cdb_reserved2,
 -pl_cdb_groupnum, -pl_cdb_transferlen, -pl_cdb_control

 When -pl_cdbtype is set to w_buff, you can specify these
 arguments:
 -pl_cdb_mode, -pl_cdb_bufferid, -pl_cdb_bufferoffset,
 -pl_cdb_paramListlen, -pl_cdb_control

 When -pl_cdbtype is set to w_l10, these arguments are available:
 -pl_cdb_core_dis, -pl_cdb_wr_uncor, -pl_cdb_pblock
 -pl_cdb_reserved1, -pl_cdb_obsolete, -pl_cdb_lba,
 -pl_cdb_reserved2, -pl_cdb_transferlen, -pl_cdb_control

 When -pl_cdbtype is set to w_verify10, these arguments are
 available:
 -pl_cdb_wrprotect, -pl_cdb_dpo, -pl_cdb_reserved1,
 -pl_cdb_bytchk, -pl_cdb_obsolete, -pl_cdb_lba,
 -pl_cdb_reserved2, -pl_cdb_groupnum, -pl_cdb_transferlen,
 -pl_cdb_control

 When pl_cdbtype is set toxd_r10, these arguments are also
 available:
 -pl_cdb_reserved1 xorpinfo, -pl_cdb_lba, -pl_cdb_reserved2,
 -pl_cdb_groupnum, -pl_cdb_transferlen, -pl_cdb_control

 When -pl_cdbtype is set toxd_w10, these arguments are available:
 -pl_cdb_wrprotect, -pl_cdb_dpo, -pl_cdb_fua,
 -pl_cdb_disablewrite, -pl_cdb_fua_nv, -pl_cdb_reserved1,
 -pl_cdb_lba, -pl_cdb_reserved2, -pl_cdb_groupnum,
 -pl_cdb_transferlen, -pl_cdb_control

 When -pl_cdbtype is set tossu, these arguments are available:
 -pl_cdb_reserved immed, -pl_cdb_reserved1, -pl_cdb_reserved2,
 -pl_cdb_pwrcondmod, -pl_cdb_pwrcond, -pl_cdb_reserved3 noflush,
 -pl_cdb_loej, -pl_cdb_start, -pl_cdb_control

 When -pl_cdbtype is set toms_6, these arguments are available:
 -pl_cdb_reserved1, -pl_cdb_dbd, -pl_cdb_reserved2, -pl_cdb_pc,
 -pl_cdb_pagecode, -pl_cdb_subpagecode, -pl_cdb_allolen,
 -pl_cdb_control

 When pl_cdbtype is set toms_10, these arguments are available:
 -pl_cdb_reserved1, -pl_cdb_llbaa, -pl_cdb_dbd,
 -pl_cdb_reserved2, -pl_cdb_pc, -pl_cdb_pagecode,
 -pl_cdb_subpagecode, -pl_cdb_reserved3, -pl_cdb_allolen,
 -pl_cdb_control

 When -pl_cdbtype is set tor_lun, these arguments are available:
 -pl_cdb_reserved1, -pl_cdb_selectreport, -pl_cdb_reserved2,
 -pl_cdb_allolen, -pl_cdb_reserved3, -pl_cdb_control

 When efpreq is indicated in -pl_id, these arguments are available:
 -pl_recordlen, -pl_principalswitchpriority, -pl_principalswitchname,
 -pl_reserved, -pl_domainid_lists, -pl_multiid_lists


 When efpacc is indicated in the -pl_id argument, these arguments
FCoE Functions
315
 are available:
 -pl_pagelen, -pl_principalswitchpriority, -pl_principalswitchname,
 -pl_reserved, -pl_domainid_lists, -pl_multiid_lists

 When iareq is indicated in the -pl_id argument, these arguments
 are available:
 -pl_notmeaningful, -pl_originswitchname

 When diaacc is indicated in -pl_id, these arguments are available:
 -pl_notmeaningful, -pl_respondswitchname

 When escreq is indicated in -pl_id, the following arguments are available:
 -pl_flags, -pl_vendorescid

 When escacc is indicated in -pl_id, these arguments are available:
 -pl_reserved, -pl_vendorescid

 When hloreq is indicated in -pl_id, these arguments are available:
 -pl_reserved1, -pl_hellointerval, -pl_deadinterval, -pl_rxdomainid,
 -pl_reserved2, -pl_origiportindex, -pl_fspfheader

 When lsureq is indicated in -pl_id, these arguments are available:
 -pl_reserved 000000, -pl_flags, -pl_fspfheader, -pl_lsr_lists

 When lsareq is indicated in -pl_id, these arguments are
 available:
 -pl_reserved, -pl_flags, -pl_fspfheader, -pl_lsh_lists

 When ganxtacc is indicated in -pl_id, these arguments are
 available:
 -pl_porttype, -pl_portid, -pl_portname, -pl_nodename,
 -pl_symbolicportname, -pl_symbolicnodename, -pl_initprocessassociator,
 -pl_ipaddrnode, -pl_classofservice, -pl_fc4types, -pl_ipaddrport,
 -pl_fabricportname, -pl_reserved3, -pl_hardaddr, -pl_ctiu

 When gpnidacc is indicated in -pl_id, these arguments are available:
 -pl_portname, -pl_ctiu

 When gnnidacc is indicated in -pl_id these arguments are
 available:
 -pl_nodename, -pl_ctiu

 When gcsidacc is indicated in -pl_id, these arguments are
 available:
 -pl_classofservice, -pl_ctiu

 When gftidacc is indicated in -pl_id, these arguments are
 available:
 -pl_fc4types, -pl_ctiu

 When gptidacc is indicated in -pl_id, these arguments are available:
 -pl_porttype, -pl_ctiu

 When gfpnidacc is indicated in -pl_id, these arguments are
 available:
 -pl_fabricportname, -pl_ctiu

 When gspnidacc is indicated in -pl_id, these arguments are
 available:
 -pl_symbolicportname, -pl_ctiu

 When gffidacc is indicated in -pl_id, these arguments are
 available:
 -pl_fc4features, -pl_ctiu

 When gidpnacc is indicated in -pl_id, these arguments are
 available:
 -pl_reserved, -pl_portid, -pl_ctiu

 When gidnnacc is indicated in -pl_id, these arguments are
 available:
FCoE Functions
316
 -pl_portidentifier_list, -pl_ctiu
 When gsnnnnacc is indicated in -pl_id, these arguments are
 available:
 -pl_symbolicnodename, -pl_ctiu

 When gidftacc is indicated in -pl_id, these arguments are
 available:
 -pl_portidentifier_list, -pl_ctiu

 When gpnftacc is indicated in -pl_id, these arguments are
 available:
 -pl_portname_list, -pl_ctiu

 When gnnftacc is indicated in -pl_id, these arguments are
 available:
 -pl_nodename_list, -pl_ctiu

 When rsnnnn is indicated in -pl_id, these arguments are
 available:
 -pl_symbolicnodename, -pl_nodename, -pl_ctiu

 When rffidis indicated in -pl_id, these arguments are
 available:
 -pl_reserved1, -pl_reserved2, -pl_fc4featurebits, -pl_typecode,
 -pl_ctiu

 When rspnid is indicated in -pl_id, these arguments are
 available:
 -pl_reserved, -pl_portid, -pl_symbolicportname, -pl_ctiu

 When rptid is indicated in -pl_id, these arguments are
 available:
 -pl_reserved, -pl_portid, -pl_porttype, -pl_ctiu

 When rftid is indicated in -pl_id, these arguments are available:
 -pl_reserved, -pl_portid, -pl_fc4types, -pl_ctiu

 When rcsid is indicated in -pl_id, these arguments are available:
 -pl_reserved, -pl_portid, -pl_classofservice, -pl_ctiu

 When rnnid is indicated in -pl_id, these arguments are available:
 -pl_reserved, -pl_portid, -pl_nodename, -pl_ctiu

 When rpnid is indicated in -pl_id, these arguments are available:
 -pl_reserved, -pl_portid, -pl_portname, -pl_ctiu

 When daid is indicated in -pl_id, these arguments are available:
 -pl_reserved, -pl_portid, -pl_ctiu

 When mergereq is indicated in -pl_id, these arguments are
 available:
 -pl_protocolver basiczoning_list, -pl_enhancezoning_list

 When mergereqacc is indicated in -pl_id, these arguments are
 available:
 -pl_reserved, -pl_obsolete1, -pl_obsolete2, -pl_obsolete3
Examples:
 #### HLTAPI for Tcl ####
 You must create Layer 2 traffic with the sth::traffic_config command first.
 The following example creates Layer 2 traffic.

 set returnedString [sth::traffic_config\
 -mode create\
 -port_handle $port1\
 -l2_encap ethernet_ii\
 -transmit_mode continuous\
 -rate_pps 1000\
 ]
 puts "l2_traffic\n$returnedString"
 keylget returnedString stream_id sb
FCoE Functions
317

 The output for the example above:
 {stream_id streamblock1} {status 1}

 To create the FCoE frame in the Ethernet Layer 2 frame (In this case, the
 FCoE frame will be in the payload of the Ethernet Layer 2 frame).
 Spirent HLTAPI generator will generate FCoE traffic based on
 the following arguments.

 set fcoe_header "-sof sofn3 -eof eofn -reserved1 0
 -reserved2 0 -reserved3 0 \
 -reserved4 0 -reserved5 0 -version 0"

 set fc_header "-h_rctl 22 -h_did 0 -h_csctl 0 -h_sid 0 -h_type 0
 -h_framecontrol 0 -h_seqid 0 \
 -h_dfctl 0 -h_seqcnt 0 -h_origexchangeid 0
 -h_responseexchangeid ffff -h_parameter f"

 set fcoe_traffic_config "sth::fcoe_traffic_config \
 -handle $sb \
 -mode create \
 $fcoe_header \
 $fc_header \
 -pl_id fcpcmnd \
 -pl_fcplun 0 \
 -pl_cmndrefnum 0 \
 -pl_reserved 0 \
 -pl_priority 0 \
 -pl_taskattrib 0 \
 -pl_taskmgmtflags 0\
 -pl_cdbtype cdb6 \
 -pl_cdb {-miscInfo 0 -lba 0 -length 0 -control 0} \

 set returnedString [eval $fcoe_traffic_config]
 puts "Create fcpcmnd (cdb6)\n$returnedString"

 The output for the example above:
 {status 1} {procName sth::fcoe_traffic_config} {streamid streamblock1}

 The following example modifies the FCoE.

 set pl_commonsvcparams "-fcphverhigh 0 -fcphverlow 20 -b2bcredit 10
 -commfeatures 8000 -rcvdatasize 840 \
 -totalconcurrentseq 2 -reloffsetbyinfocategory 0
 -edtov 7d0"

 set pl_classsvcparams "-serviceoptions 0 -ictl 0 -rctl 0
 -recdatafieldsize 840 -currentseq 01 -endtoendcredit 0 \
 -openseqperexchange 1 -reserved1 0 -reserved2 0 "
 set fcoe_traffic_config "sth::fcoe_traffic_config \
 -mode modify\
 -handle $sb\
 -pl_id plogireq \
 -pl_reserved1 0 \
 -pl_nportname 20:00:10:94:00:00:00:01 \
 -pl_nodename 10:00:10:94:00:00:00:01 \
 -pl_vendorversionlevel 0 \
 -pl_commonsvcparams {$pl_commonsvcparams}
 -pl_class1svcparams {$pl_classsvcparams}
 "

 set returnedString [eval $fcoe_traffic_config]
 puts "Change to plogireq by modify\n$returnedString"

 The output for the example above:
 {status 1} {procName sth::fcoe_traffic_config} {streamid streamblock1}

 The example below deletes FCoE frames from the payload of Ethernet
 Layer 2 frames.
 
FCoE Functions
318
 set returnedString [sth::fcoe_traffic_config -mode reset -handle $sb]
 puts "Delete FCoE by reset\n$returnedString"

 The output for the example above:
 {status 1} {procName sth::fcoe_traffic_config} {streamid streamblock1}
 #### HLTAPI for Python ####
 The following example creates Layer 2 traffic first:
 streamblock_ret1 = sth.traffic_config (
 mode = 'create',
 port_handle = port_handle[0],
 l2_encap = 'ethernet_ii',
 mac_src = '00:10:94:00:00:01',
 ether_type = '88B5',
 mac_dst = '00:10:94:00:00:02',
 enable_control_plane= '0',
 l3_length = '2030',
 name = 'StreamBlock_1-2',
 fill_type = 'constant',
 fcs_error = '0',
 fill_value = '0',
 traffic_state = '1',
 high_speed_result_analysis= '1',
 length_mode = 'fixed',
 disable_signature = '0',
 enable_stream_only_gen= '1',
 pkts_per_burst = '1',
 inter_stream_gap_unit= 'bytes',
 burst_loop_count = '30',
 transmit_mode = 'continuous',
 inter_stream_gap = '12',
 rate_percent = '10');

 Sample Output:
 {'stream_id': 'streamblock1'} {'status': '1'}

 To create the FCoE frame in the Ethernet Layer 2 frame (In this case, the
 FCoE frame will be in the payload of the Ethernet Layer 2 frame, with payload
 type efpreq), Spirent HLTAPI generator will generate FCoE traffic based on the
 following arguments.

 stream_fcoe_ret = sth.fcoe_traffic_config (
 handle = stream_id,
 mode = 'create',
 reserved1 = '0',
 eof = 'eofn',
 reserved2 = '00000000',
 reserved3 = '00000000',
 reserved4 = '000000',
 reserved5 = '000000',
 sof = 'soff',
 version = '0',
 h_parameter = '00000000',
 h_dfctl = '00',
 h_responseexchangeid= 'FFFF',
 h_type = '01',
 h_rctl = '02',
 h_framecontrol = '290000',
 h_seqid = '00',
 h_sid = 'fffffd',
 h_did = 'fffffd',
 h_csctl = '00',
 h_origexchangeid = '0000',
 h_seqcnt = '0000',
 pl_principalswitchname= '20:00:10:94:00:00:00:01',
 pl_principalswitchpriority= 'FF',
 pl_recordlen = '10',
 pl_id = 'efpreq');
 Sample Output:
FCoE Functions
319
 {'status': '1', 'procName': 'sth::fcoe_traffic_config',
 'streamid': 'streamblock1'}

 #### HLTAPI for Perl ####
 The following example creates Layer 2 traffic first:

 my %streamblock_ret1 = sth::traffic_config (
 mode => 'create',
 port_handle => "$hport[1]",
 l2_encap => 'ethernet_ii',
 mac_src => '00:10:94:00:00:01',
 ether_type => '88B5',
 mac_dst => '00:10:94:00:00:02',
 enable_control_plane=> '0',
 l3_length => '2030',
 name => 'StreamBlock_1-2',
 fill_type => 'constant',
 fcs_error => '0',
 fill_value => '0',
 traffic_state => '1',
 high_speed_result_analysis=> '1',
 length_mode => 'fixed',
 disable_signature => '0',
 enable_stream_only_gen=> '1',
 pkts_per_burst => '1',
 inter_stream_gap_unit=> 'bytes',
 burst_loop_count => '30',
 transmit_mode => 'continuous',
 inter_stream_gap => '12',
 rate_percent => '10');

 Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'stream_id';
 $VAR4 = 'streamblock1';
 To create the FCoE frame in the Ethernet Layer 2 frame (In this case, the
 FCoE frame will be in the payload of the Ethernet Layer 2 frame, with payload
 type efpreq), Spirent HLTAPI generator will generate FCoE traffic based on the
 following arguments.

 my %stream_fcoe_ret = sth::fcoe_traffic_config (
 handle => "$stream_id",
 mode => 'create',
 reserved1 => '0',
 eof => 'eofn',
 reserved2 => '00000000',
 reserved3 => '00000000',
 reserved4 => '000000',
 reserved5 => '000000',
 sof => 'soff',
 version => '0',
 h_parameter => '00000000',
 h_dfctl => '00',
 h_responseexchangeid=> 'FFFF',
 h_type => '01',
 h_rctl => '02',
 h_framecontrol => '290000',
 h_seqid => '00',
 h_sid => 'fffffd',
 h_did => 'fffffd',
 h_csctl => '00',
 h_origexchangeid => '0000',
 h_seqcnt => '0000',
 pl_principalswitchname=> '20:00:10:94:00:00:00:01',
 pl_principalswitchpriority=> 'FF',
 pl_recordlen => '10',
 pl_id => 'efpreq');

 Sample Output: 
FCoE Functions
320
 $VAR1 = 'procName';
 $VAR2 = 'sth::fcoe_traffic_config';
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'streamid';
 $VAR6 = 'streamblock1';

Notes:
 None.
End of Procedure Header
 
GRE Functions
321
GRE Functions
Functions:
sth::emulation_gre_config
sth::emulation_gre_config
Name:
 sth::emulation_gre_config
Purpose:
 Configures GRE tunnels.
 Generic Routing Encapsulation (GRE) is a tunneling protocol. It is designed to
 encapsulate a wide variety of network layer packets inside IP tunneling packets.
 The original packet is the payload for the final packet. The protocol is used on
 the Internet to secure virtual private networks.
Synopsis:
 sth::emulation_gre_config
 -gre_tnl_type {4|6}
 [-mode {create | modify}]
 [-gre_handle <gre_handle>]
 [-gre_tnl_addr <a.b.c.d>]
 [-gre_tnl_addr_step <a.b.c.d>]
 [-gre_tnl_addr_count <1-2147483647>]
 [-gre_src_mode {fixed|increment}]
 [-gre_src_addr <a.b.c.d>]
 [-gre_src_addr_step <a.b.c.d>]
 [-gre_src_addr_count <1-2147483647>]
 [-gre_dst_mode {fixed|increment}]
 [-gre_dst_addr <a.b.c.d>]
 [-gre_dst_addr_step <a.b.c.d>]
 [-gre_dst_addr_count <1-2147483647>]
 [-gre_checksum {0|1} ]
 [-gre_count <1-10000>
 [-gre_in_key <in_key>]
 [-gre_out_key <out_key>]
 [-gre_prefix_len <integer>]
 [-gre_src_mac_addr {<aaaa.bbbb.cccc> | <aaaa:bbbb:cccc> |<aa.bb.cc.dd.ee.ff> |
 <aa:bb:cc:dd:ee:ff> |<aa-bb-cc-dd-ee-ff>}]
 [-gre_src_mac_addr_step {<aaaa.bbbb.cccc> | <aaaa:bbbb:cccc> | <aa.bb.cc.dd.ee.ff> |
 <aa:bb:cc:dd:ee:ff> |<aa-bb-cc-dd-ee-ff>}]
 [-gre_port_handle <port_handle>]
 [-gre_encapsulation {ETHERNET_II | ETHERNET_II_VLAN | ETHERNET_II_QINQ }]
 [-gre_vlan_id <0-4095>]
 [-gre_vlan_id_count <1-4096>]
 [-gre_vlan_id_step <0-4095>]
 [-gre_vlan_user_priority <0-7>]
 [-gre_vlan_outer_id <0-4095>]
 [-gre_vlan_outer_id_count <1-4096>]
 [-gre_vlan_outer_id_step <0-4095>]
 [-gre_vlan_outer_user_priority <0-7>]
Arguments:
 -mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the action to perform. Possible values are create and
 modify. The default is create.
 create - Creates GRE clients

 modify - Changes the configurations for the GRE clients
GRE Functions
322
 identified by -gre_handle. You must specify -gre_handle.

 Note: Values for -gre_count, -gre_tnl_addr_count,
 -gre_src_addr_count, -gre_dst_addr_count, -gre_vlan_id_count,
 -gre_vlan_outer_id_count, -gre_encapsulation, -gre_tnl_type and
 -gre_port_handle cannot be modified.

 -gre_handle
 Spirent Extension (for Spirent HLTAPI only).
 Gets the GRE handle from the return value of function
 sth::link_config, or Layer 3 functions such as
 BGP, ISIS, LDP, MPLS, OSPF, PIM, RIP, and RSVP.

 -gre_tnl_type
 Specifies whether the tunnel has an IPv4 or IPv6 address. This
 argument is mandatory.
 -gre_tnl_addr
 Defines the IPv4 or IPv6 gateway address of the GRE tunnel.
 -gre_tnl_addr_step
 Configures the IPv4 or IPv6 gateway address for multiple tunnels.
 Use this argument with the -gre_tnl_addr argument.
 -gre_tnl_addr_count
 The number of source IP addresses to generate for a
 tunnel. Possible values range from 1 to 2147483647. The
 default is 1.
 -gre_src_mode
 Specifies how Spirent HLTAPI will assign the IP
 addresses for a particular tunnel. Possible values are:
 fixed - The source IP address is the same for all tunnels.
 increment - For all packets, the source IP address
 increments by the step specified in the -gre_src_addr_step
 argument.
 -gre_src_addr
 Specifies the source IP address of the first generated
 packet. The default is 0.0.0.0.
 -gre_src_addr_step
 Indicates both the step value and the prefix length that
 Spirent HLTAPI applies to the specified source address
 (-gre_src_addr). The format of the gre_src_addr_step value is an
 IPv4 address, for example, 0.0.1.0. Use a single decimal
 digit equal to a power of 2; the remaining three digits must
 be zero (0). The numeric value identifies a bit location in
 the address; the location determines the prefix length.
 Spirent HLTAPI also uses the value to increment the host
 ID portion of the address.
 -gre_src_addr_count
 The number of source IPv4 or IPv6 addresses to generate
 for a stream. Possible values range from 1 to 2147483647. The
 default is 1.
 -gre_dst_mode
 Specifies how Spirent HLTAPI will assign the IP
 addresses for a particular stream. Possible values are:
 fixed - The destination IP address is the same for all
 packets.
 increment - For all packets, the destination IP address
 increments by the step specified in the -gre_dst_addr_step
 argument.
 -gre_dst_addr 
GRE Functions
323
 Specifies the destination IP address of the first generated
 packet. The default is 0.0.0.0.
 -gre_dst_addr_step
 Indicates both the step value and the prefix length that
 Spirent HLTAPI applies to the specified destination address
 (-gre_dst_addr). The format of the gre_dst_addr_step value is an
 IPv4 address, for example, 0.0.1.0. Use a single decimal
 digit equal to a power of 2; the remaining three digits must
 be zero (0). The numeric value identifies a bit location in
 the address; the location determines the prefix length.
 Spirent HLTAPI also uses the value to increment the host
 ID portion of the address.
 -gre_dst_addr_count
 The number of destination IPv4 or IPv6 addresses to generate
 for a stream. Possible values range from 1 to 2147483647. The
 default is 1.
 -gre_checksum
 Verifies that packets are not corrupted. Possible values are
 0 (not corrupted) and 1 (corrupted). The default is 0.
 -gre_in_key
 Defines the GRE tunnel In key. Spirent HLTAPI will automatically
 change the value to the GRE tunnel Out key once -gre_out_key is
 specified.
 -gre_out_key
 Defines the GRE tunnel Out key.

 -gre_prefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Defines the length (in bits) of the IPv4 tunnel. It must be an
 integer. The default value is 24.
 -gre_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of emulated GRE tunnel devices.
 Possible values range from 1 to 100000. The default
 value is 1.

 -gre_src_mac_addr
 Spirent Extension (for Spirent HLTAPI only).
 Defines the source MAC address for a Gigabit Ethernet or Gigabit
 Ethernet GBIC interface of the GRE tunnel device. You can enter
 this address in one of the following formats: aaaa.bbbb.cccc
 aaaa:bbbb:cccc aa.bb.cc.dd.ee.ff aa:bb:cc:dd:ee:ff
 aa-bb-cc-dd-ee-ff

 The default is 0000.0000.0000.
 -gre_src_mac_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the modifier for the interface MAC address of the
 emulated GRE tunnel device. The default value is
 00:00:00:00:00:01.

 -gre_port_handle
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the handle of the port on which the GRE tunnel device and
 the DHCP or DHCPv6/PD server/client are created, with an L2 GRE
 tunnel link between them. See function sth::link_config for more
 details on how to create an L2 GRE tunnel link.
 -gre_encapsulation
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of Layer 2 encapsulation for the emulated
 GRE tunnel device. Possible values are:

 ethernet_ii - Ethernet II
GRE Functions
324

 ethernet_ii_vlan - Ethernet II with a single VLAN tag

 ethernet_ii_qinq - Ethernet II with two VLAN tags

 The default value is ethernet_ii.

 -gre_vlan_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting VLAN ID for the ethernet_ii_vlan
 encapsulation or the ethernet_ii_qinq encapsulation. Possible
 values range from 0 to 4095. The default value is 100. This
 argument is available when -gre_encapsulation is set to
 ethernet_ii_qinq or ethernet_ii_vlan.
 -gre_vlan_id_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step size by which the VLAN ID is incremented.
 Possible values range from 0 to 4095. The default value is 1.
 -gre_vlan_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN IDs to use when generating multiple
 VLANs. Possible values range from 1 to 4096. The default is 1.

 -gre_vlan_user_pri
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN user priority assigned to emulated device.
 Possible values range from 0 to 7. The default value is 0.
 -gre_vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting outer VLAN ID for the QinQ encapsulation.
 Possible values range from 0 to 4095. The default value is 100.
 This argument is available when -gre_encapsulation is set to
 ethernet_ii_qinq.
 -gre_vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step size by which the outer VLAN ID is
 incremented. Possible values range from 0 to 4095. The default
 value is 1.

 -gre_vlan_outer_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN IDs to use when generating multiple
 outer VLANs. Possible values range from 1 to 4096. The default
 value is 1.

 -gre_vlan_outer_user_pri
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer VLAN header.
 Possible values range from 0 to 7. The default value is 0.
Arguments Unsupported by Save as HLTAPI:
 None

Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 None.
Return Values:
 The sth::emulation_gre_config function returns an array.
Description:
 The sth::emulation_gre_config function returns an array that consists
 of the GRE tunnel configuration. You can use the -tunnel_handle option for
 other protocols or the Traffic function if they support GRE.
 
GRE Functions
325
 First, use the emulation_gre_config function to create a configuration array and
 then pass this array using the -tunnel_handle option for the following protocol
 emulation commands: BGP, ISIS, LDP, OSPF, RIP, PIM, RSVP and Traffic, if
 they support GRE.
Examples:
 The following example configures a GRE tunnel:
 sth::emulation_gre_config \
 -gre_tnl_type 4 \
 -gre_tnl_addr 10.1.1.1\
 -gre_tnl_addr_step 0.0.0.1\
 -gre_tnl_addr_count 2 \
 -gre_src_mode increment\
 -gre_src_addr 10.1.1.3\
 -gre_src_addr_step 0.0.0.1\
 -gre_src_addr_count 2 \
 -gre_dst_mode increment\
 -gre_dst_addr 10.1.2.4\
 -gre_dst_addr_step 0.0.0.1\
 -gre_dst_addr_count 2 \
 -gre_in_key 300 \
 -gre_out_key 300
 This example uses traffic config to call the GRE tunnel handle:
 set traffic_status [sth::traffic_config \
 -mode create \
 -port_handle $rx_port_handle \
 -l3_protocol $protocol_type \
 -tunnel_handle $gre_handle \
 -ip_src_addr $pkt_src(ip) \
 -ip_src_mode $src_mode \
 -ip_src_step $src_flow_offset \
 -ip_src_count $src_flow_count \
 -ip_dst_addr $pkt_dest(ip) \
 -ip_dst_mode $dst_flow_mode \
 -ip_dst_step $dst_flow_offset \
 -ip_dst_count $dst_flow_count \
 -l3_length $pkt_size \
 -rate_pps $rate ]
 This example shows how one of the protocols that supports GRE would use
 the GRE tunnel handle:
 set config_status [sth::emulation_bgp_config \
 -port_handle $port_handle \
 -tunnel_handle $gre_handle \
 -mode enable \
 -ip_version 4 \
 -count $my_count \
 -local_ip_addr $rtr \
 -local_addr_step 0.0.1.0 \
 -remote_ip_addr $rtr_nbr \
 -remote_addr_step 0.0.1.0 \
 -netmask 24 \
 -neighbor_type external \
 -local_as $my_as \
 -local_as_step 1 \
 -local_as_mode increment \
 -retries 0 \
 -retry_time 120 \
 -active_connect_enable \
 -tcp_window_size 8192 \
 -updates_per_iteration 1 \
 -hold_time 90 \
 -local_router_id_enable \
 -local_router_id $rtr \
 -local_router_id_step 0.0.1.0 \
 -ipv4_unicast_nlri ]
GRE Functions
326
 The following examples create a GRE server and a DHCPv6 server with an L2 GRE
 tunnel link:

 # To create the DHCP server
 set device_ret0 [sth::emulation_dhcp_server_config\
 -mode create\
 -ip_version 6\
 -encapsulation ethernet_ii_vlan\
 -vlan_id_mode increment\
 -prefix_pool_step 1 \
 -prefix_pool_per_server 100 \
 -prefix_pool_start_addr 2002:0:0:1::1 \
 -prefix_pool_step_per_server 0:0:0:1:: \
 -prefix_pool_prefix_length 64 \
 -port_handle $port2\
 -preferred_lifetime 604800 \
 -enable_delayed_auth false \
 -valid_lifetime 2592000 \
 -dhcp_realm spirent.com \
 -enable_reconfigure_key false \
 -reneval_time_percent 50 \
 -rebinding_time_percent 80 \
 -server_emulation_mode DHCPV6_PD \
 -local_ipv6_prefix_len 64 \
 -local_ipv6_addr 2000:0:0:1::1000 \
 -gateway_ipv6_addr_step 0:0:0:1:: \
 -local_ipv6_addr_step 0:0:0:1:: \
 -gateway_ipv6_addr 2002:0:0:1::1 \
 -vlan_cfi 0 \
 -vlan_id 500 \
 -vlan_user_priority 7 \
 -vlan_id_step 1 \
 -count 6 \
 -mac_addr 00:10:94:00:02:01 \
 -mac_addr_step 00:00:00:00:00:01 \
 ]
 # To create the GRE server:
 set device_ret3 [sth::emulation_gre_config\
 -gre_tnl_type 4\
 -gre_dst_addr_step 0.0.0.1 \
 -gre_dst_addr 1.1.1.1 \
 -gre_checksum 0\
 -gre_src_addr 1.1.1.4 \
 -gre_prefix_len 32 \
 -gre_tnl_addr 1.1.1.1 \
 -gre_encapsulation ethernet_ii_vlan\
 -gre_port_handle $port2\
 -gre_vlan_id_step 1 \
 -gre_vlan_user_pri 7 \
 -gre_vlan_id 1 \
 -gre_src_mac_addr 00:10:94:00:00:04 \
 -gre_src_mac_addr_step 00:00:00:00:00:01 \
 ]

 # To link the created devices:

 set dhcp_host [keylget device_ret0 handle.dhcpv6_handle]
 set link_ret [::sth::link_config\
 -link_src $dhcp_host\
 -link_dst "$device_ret3"\
 -link_type "L2_GRE_Tunnel_Link"]
 The following examples create a Layer 3 GRE tunnel and then modify it:
 To configures a GRE tunnel:
 set gre_ret [sth::emulation_gre_config\
 -gre_encapsulation ethernet_ii_qinq\
 -gre_src_mode increment\
 -gre_dst_mode increment\
GRE Functions
327
 -gre_tnl_type 4\
 -gre_dst_addr 10.1.1.1 \
 -gre_dst_addr_step 0.0.0.3 \
 -gre_checksum 0\
 -gre_src_addr 20.1.1.1 \
 -gre_tnl_addr_step 0.0.0.3 \
 -gre_prefix_len 24 \
 -gre_tnl_addr 20.1.1.50 \
 -gre_src_addr_step 0.0.0.3 \
 ]

 To use the GRE tunnel handle in OSPF:
 set device_ret0 [sth::emulation_ospf_config \
 -mode enable\
 -tunnel_handle $gre_ret\
 -session_type ospfv2 \
 -port_handle $port1 \
 -area_id 0.0.0.0 \
 -hello_interval 10 \
 -dead_interval 40 \
 ]
 To get the GRE handle:

 set gre_handle [keylget device_ret0 handle]
 To modify the GRE configuration:

 set gre_ret [sth::emulation_gre_config\
 -gre_tnl_type 4\
 -mode modify\
 -gre_handle $gre_handle \
 -gre_tnl_addr 2.2.2.2 \
 -gre_src_addr 3.3.3.3 \
 -gre_dst_addr 4.4.4.4 \
 -gre_vlan_id 300 \
 -gre_in_key 400 \
 -gre_out_key 400 \
 ]

 Sample Input:
 See Examples above.
 Sample Output:
 {tunnel_handle $gre_handle}
Notes:
 None
End of Procedure Header
HTTP Functions
328
HTTP Functions
Functions:
sth::emulation_http_profile_config
sth::emulation_http_config
sth::emulation_http_phase_config
sth::emulation_http_control
sth::emulation_http_stats
sth::emulation_http_profile_config
Name:
 sth::emulation_http_profile_config

Purpose:
 Creates, modifies, or deletes a load, client, or server profile for HTTP testing.
 HTTP testing is the core of application layer network testing. To test HTTP with
 Spirent HLTAPI, you begin by setting up a load profile, an HTTP client profile,
 and an HTTP server profile. A load profile configures the amount of network
 traffic to generate for a test. An HTTP client profile defines the type of user
 behavior that you want all HTTP clients to emulate. An HTTP server profile defines
 the HTTP server to emulate.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_http_profile_config
 -mode {create | modify | delete}
 -profile_type {load | client | server}
 [-body_content_type {ascii | binary}]
 [-body_size_type {fixed | random}]
 [-enable_delayed_ack {true | false}]
 [-enable_keep_alive {true | false}]
 [-enable_pipeline {true | false}]
 [-enable_video_client {true | false}]
 [-enable_video_server {true | false}]
 [-fixed_body_size <0-4294967295>]
 [-fixed_response_latency <0-4294967295>]
 [-http_version {version_1_0 | version_1_1}]
 [-ipv4_tos <0-255>]
 [-ipv6_traffic_class <0-255>]
 [-load_type {connections | connections_per_time_unit | transactions |
 transactions_per_time_unit | bandwidth | playlists}]
 [-max_connections_attempted <0-4294967295>]
 [-max_open_connections <0-4294967295>]
 [-max_pipeline_depth <1-255>]
 [-max_transactions_attempted <0-4294967295>]
 [-profile_handle <handle>]
 [-profile_name <ALPHANUM>]
 [-random_body_size_mean <0-4294967295>]
 [-random_body_size_std_deviation <0-4294967295>]
 [-random_latency_mean <0-4294967295>]
 [-random_latency_std_deviation <0-4294967295>]
 [-randomization_seed <0-4294967295>]
 [-response_timing_type {fixed | random}]
 [-rx_window_limit <0-4294967295>]
 [-server_port_num <1-65535>]
 [-server_sliding_window_play_list_size <3-100>]
 [-server_target_duration <5-15>]
 [-server_type {microsoft_iis | apache}]
 [-tos_type {tos| diffserv}]
 [-user_agent_header <ALPHANUM>]
 [-use_dynamic_load {true | false}]
 [-video_client_video_type {VOD| LIVE}]
HTTP Functions
329
 [-video_client_bitrate_alg {smart | normal | constant}]
 [-video_client_predef_method {minimum | median | maximum}]
 [-video_client_start_bitrate {predefine | userdefine}]
 [-video_client_type {spirent_hls}]
 [-video_client_user_def_value <40-4096>]
 [-video_client_view_time <0-4294967295>]
 [-video_server_bitrate_list {br_64 | br_96 | br_150 | br_240 | br_256
 | br_440 | br_640 | br_800 | br_840 | br_1240}]
 [-video_server_stream_type {adaptive_bitrate | progressive}]
 [-video_server_type {live_streaming}]
 [-video_server_version {version_1_0}]
Arguments:
 -mode
 Specifies the action to perform. This argument is mandatory.
 Possible values are create, modify, and delete.

 create Creates the kind of profile specified by type. You must
 specify -profile_type.

 modify Modifies the specified profile

 delete Deletes the specified profile

 -profile_type
 Specifies the type of profile to be created. This argument is
 mandatory. Possible values are described below:

 load_profile HTTP load profile that determines the traffic
 pattern in which the load is generated
 for the test phase

 client_profile HTTP client profile configuration

 server_profile HTTP server profile configuration
 -body_content_type
 Specifies the body content type for server responses. Possible
 values are ASCII and Binary. The default is ASCII.
 -body_size_type
 Specifies the method to determine body size for server responses.
 Possible values are fixed and random.

 fixed Use the value you specify in -fixed_body_size

 random Use a random value generated based on the range
 specified by both -random_body_size_mean and
 -random_body_size_std_deviation

 The default is fixed.
 -burst_time
 The duration of the burst. This argument is only valid when
 -load_pattern is set to burst. The unit is determined by the
 -duration_units argument. Possible values range from 0
 to 40000000. The default is 20.
 -enable_delayed_ack
 Enables/disables delayed acknowledgment (ACK) on TCP connections.
 Use -profile_type to specify whether it is for a an HTTP
 client or a server. Possible values are true (enable) and false
 (disable). The default is false.
 -enable_keep_alive
 Determines whether to keep the connection open after the initial
 request is accepted. Possible values are true and false. If it is
 set to true, Spirent HLTAPI will keep the connection open after the
HTTP Functions
330
 initial request is accepted. The default is true.
 -enable_pipeline
 Determines whether to allow the client to issue multiple
 requests to the HTTP server. This argument is only valid when
 -enable_keep_alive is set to true. Possible values are true and
 false. The default is true.
 -enable_video_client
 Enables/disables video for the HTTP client. Possible values are
 true (enable) and false (disable). The default is false.

 -enable_video_server
 Enables/disables video for the HTTP server. Possible values are
 true (enable) and false (disable). The default is false.
 -fixed_body_size
 The response's body size in bytes for a fixed body size type.
 This argument is only valid when you set -body_size_type to
 fixed. Possible values range from 0 to 4294967295. The default is
 64.
 -fixed_response_latency
 The delay in milliseconds before the server sends a response for
 a fixed response timing type. You must set -response_timing_type
 to fixed. Possible values range from 0 to 4294967295. The default
 is 0.
 -http_version
 Specifies the HTTP version to be used by the server. Possible
 values are:

 version_1_0 HTTP version 1.0

 version_1_1 HTTP version 1.1

 The default is version_1_1.
 -ipv4_tos
 Specifies the Type of Service (TOS) settings to use for IPv4
 Layer 4/7 traffic. Use -profile_type to specify whether it is for
 a client or a server. Possible values range from 0 to 255. The
 default is 192.
 -ipv6_traffic_class
 Specifies the traffic class settings to use for IPv6 Layer
 4/7 traffic. Use -profile_type to specify whether it
 is for a client or a server. Possible values range from 0 to 255.
 The default is 0.
 -load_type
 Specifies the type of traffic that is measured for the load.
 Possible values are:

 connections The number of simultaneous network
 connections generated

 connections_per_time_unit The number of new connections to
 be opened in a given time unit,
 regardless of the number of
 connections currently open

 transactions The number of simultaneous
 transactions generated

 transactions_per_time_unit The number of transactions per time
 unit for the duration of the test

 bandwidth The load in terms of bandwidth,
 sent on a best-effort basis
HTTP Functions
331

 playlists Protocol playlists

 The default is connections.
 -max_connections_attempted
 The upper limit for the number of connection attempts that are
 made throughout the test. Possible values range from 0 to
 4294967295. The default is 4294967295.
 -max_open_connections
 The upper limit for the number of open connections throughout the
 test. Possible values range from 0 to 4294967295. The default is
 4096.
 -max_pipeline_depth
 Maximum depth of the HTTP request pipeline. This argument is only
 valid when -enable_pipeline is set to true. Possible values range
 from 1 to 255. The default is 8.
 -max_transactions_attempted
 The upper limit for the number of transaction attempts that are
 made throughout the test. Possible values range from 0 to
 4294967295. The default is 4294967295.
 -profile_name
 Specifies the name of the profile
 -random_body_size_mean
 Mean size of the response body when -body_size_type is set to
 random. You must set -body_size_type to random. Possible values
 range from 0 to 4294967295. The default is 0.
 -random_body_size_std_deviation
 Standard deviation of the response body size for a random body
 size type. You must set -body_size_type to random. Possible
 values range from 0 to 4294967295. The default is 0.
 -random_latency_mean
 The delay before the server sends a response for a random
 response timing type. You must set -response_timing_type to
 random. Possible values range from 0 to 4294967295. The default
 is 0.
 -random_latency_std_deviation
 Standard deviation of the response latency for a random response
 timing type. You must set -response_timing_type to random.
 Possible values range from 0 to 4294967295. The default is 0.
 -randomization_seed
 A number to define the heights in the random phases of the test.
 If the value is zero, the seed is determined by the time the test
 is executed. Possible values range from 0 to 4294967295. The
 default is 123456.
 -response_timing_type
 The timing type which determines the time that the server will
 wait before sending a response. Possible values are fixed and
 random.
 fixed Use the value you specify in -fixed_response_latency

 random Use a random value generated based on the range
 specified by both -random_latency_mean and
 -random_latency_std_deviation
 The default is fixed.
 -rx_window_limit
 Maximum size of the receive window for TCP connections. Use
 -profile_type to specify whether it is for a client or a server.
HTTP Functions
332
 Possible values range from 0 to 4294967295. The default is 32768.
 -server_port_num
 Port number to use on the server. Possible values range from 1 to
 65535. The default is 80.
 -server_type
 Specifies the HTTP server type to use. Possible values are
 Microsoft_IIS and Apache. The default is Microsoft_IIS.
 -tos_type
 Specifies the formatting of the Quality of Service (QoS) value.
 Possible values are:

 tos Type of Service

 diffserv Differentiated Services

 The default value is tos.
 -user_agent_header
 A description of the simulated client vendor
 -use_dynamic_load
 Determines whether to allow the load to be changed dynamically
 during the test. This argument is only valid when -load_type is
 set to bandwidth. If it is set to true, the HTTP load phase
 configured in the sth::emulation_http_phase_config function will
 not work. Possible values are true and false. The default is
 false.

 -video_client_bitrate_alg
 Specifies the bitrate algorithm for the HTTP client. Possible
 values are smart, normal and constant.

 smart The client starts playing the stream at the
 starting bitrate. It determines the
 upshift and downshift thresholds by calculating the
 available bandwidth using the time it took to
 download the previous fragment, and selecting the
 bitrate that is closest to that value, without
 exceeding it. (If the bandwidth is below the minimum
 bitrate, then the minimum bitrate is used.)

 normal The client starts playing the stream at the starting
 bitrate specified by -video_client_start_bitrate. It
 then uses the upshift and downshift to
 increase or decrease the bitrate level by one.

 constant The client plays the stream at the starting
 bitrate throughout the session.

 The default value is smart.


 -video_client_predef_method
 Specifies the pre-defined method with which you get the starting
 bitrate value. You must set -video_client_start_bitrate
 to predefine. Possible values are minimum, median, and maximum.
 The default value is minimum.

 -video_client_start_bitrate
 Specifies the method to determine the starting bitrate at the HTTP
 client. Possible values are predefine and userdefine.

 predefine Use the starting bitrate generated based on the
 method set in -video_client_predef_method

 userdefine Use the value specified by -video_client_user_def_value

 The default is predefine.
HTTP Functions
333


 -video_client_type
 Specifies the video client type. You must set
 -enable_video_client to true. The available option is
 spirent_hls. Spirent HTTP Live Streaming (HLS) is a Spirent
 standard in adaptive bitrate video. The default value is
 spirent_hls.


 -video_client_video_type
 Specifies the client video type for the HTTP client profile.
 Possible values are:

 VOD Streaming method used to deliver content on demand

 LIVE Streaming method used to deliver ongoing, live content

 The default value is VOD.

 -video_client_user_def_value
 Specifies the user-defined starting bitrate in kbps. You must set
 -video_client_start_bitrate to userdefine. Possible values range
 from 40 to 4096. The default value is 128.

 -video_client_view_time
 Specifies the view time for the video client. This argument is
 only available when -video_client_type is set to live. Possible
 values range from 0 to 4294967295. The default is 60.

 -video_server_bitrate_list
 A list of bitrates for the video server. Possible values are
 br_64, br_96, br_150, br_240, br_256, br_440, br_640, br_800,
 br_840, and br_1240. The default value is br_64.

 -video_server_stream_type
 Specifies the video streaming type for the HTTP server profile.
 Possible values are:

 adaptive_bitrate Detects a user's available bandwidth in real
 time and calibrates the video stream accordingly

 progressive Transfers digital media files from a server
 to a client, typically using the HTTP
 protocol when initiated from a computer. The
 user may begin playback of the media
 before the download is complete.

 The default value is adaptive_bitrate.

 -video_server_type
 Specifies the video server type for the HTTP server profile. The
 available type is live_streaming. The default value is
 live_streaming.

 -video_server_version
 Specifies the video server version for the HTTP server profile.
 The available option is version_1_0. The default value is
 version_1_0.


Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 load_profile_handle The load profile handle 
HTTP Functions
334

 client_profile_handle The HTTP client profile handle

 server_profile_handle The HTTP server profile handle

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)
Description:
 The sth::emulation_http_profile_config creates, modifies, or deletes a load,
 client, or server profile for HTTP testing. Use -mode to specify the action to
 perform, and use -profile_type specify the type of profile to be created.

 Before configuring HTTP on the specified devices, you must create all three
 types of profiles. The corresponding profiles will be contained in the keyed list
 returned by the function.
Examples:
 #### HLTAPI for Tcl ####

 To create an HTTP load profile:

 set result [sth::emulation_http_profile_config -mode create \
 -profile_type load \
 -profile_name http_load\
 -max_connections_attempted 100\
 -max_open_connections 20\
 -max_transactions_attempted 30\
 -load_type connections_per_time_unit\
 -randomization_seed 100000]

 Sample Output:

 {load_profile_handle clientloadprofile1} {status 1}
 To create an HTTP client profile:

 set result [sth::emulation_http_profile_config -mode create \
 -profile_type client \
 -profile_name http_client\
 -http_version version_1_0\
 -enable_keep_alive true\
 -enable_pipeline true\
 -enable_video_client false\
 -max_pipeline_depth 10\
 -video_client_start_bitrate userdefine\
 -video_client_bitrate_alg normal\
 -video_client_view_time 61\
 -video_client_user_def_value 128\
 -video_client_predef_method median\
 -video_client_type spirent_hls\
 -video_client_video_type live\
 -user_agent_header "abc123 456der"]

 Sample Output:

 {client_profile_handle clientprofile1} {status 1}


 To create an HTTP server profile:
 set result [sth::emulation_http_profile_config -mode create \
 -profile_type server \
 -profile_name http_server\
 -body_content_type binary\
 -body_size_type fixed\
 -http_version version_1_0\
 -server_type apache\
 -fixed_body_size 128\
 -fixed_response_latency 1\
HTTP Functions
335
 -response_timing_type fixed\
 -tos_type tos\
 -ipv4_tos 64\
 -rx_window_limit 32769\
 -enable_delayed_ack true\
 -video_server_stream_type progressive\
 -video_server_type live_streaming\
 -server_video_length 61\
 -video_server_version version_1_0\
 -server_media_seq_num 2\
 -server_target_duration 11\
 -server_sliding_window_play_list_size 10\
 -server_port_num 80\
 ]
 Sample Output:

 {server_profile_handle serverprofile1} {status 1}
 #### HLTAPI for Python ####
 To create an HTTP load profile:

 result1 = sth.emulation_http_profile_config (
 mode = 'create',
 profile_type = 'load',
 profile_name = 'http_load',
 max_connections_attempted = 100,
 max_open_connections = 20,
 max_transactions_attempted = 30,
 load_type = 'connections_per_time_unit',
 randomization_seed = 100000);

 Sample Output:
 {'load_profile_handle': 'clientloadprofile1', 'status': '1'}
 To create an HTTP client profile:

 result2 = sth.emulation_http_profile_config (
 mode = 'create',
 profile_type = 'client',
 profile_name = 'http_client',
 http_version = 'version_1_0',
 enable_keep_alive = 'true',
 enable_pipeline = 'true',
 enable_video_client = 'false',
 max_pipeline_depth = 10,
 video_client_start_bitrate = 'userdefine',
 video_client_bitrate_alg = 'normal',
 video_client_view_time = 61,
 video_client_user_def_value = 128,
 video_client_predef_method = 'median',
 video_client_type = 'spirent_hls',
 video_client_video_type = 'live',
 user_agent_header = "abc123 456der");
 Sample Output:
 {'status': '1', 'client_profile_handle': 'clientprofile1'}
 To create an HTTP server profile:
 result3 = sth.emulation_http_profile_config (
 mode = 'create',
 profile_type = 'server',
 profile_name = 'http_server',
 body_content_type = 'binary',
 body_size_type = 'fixed',
 http_version = 'version_1_0',
 server_type = 'apache',
 fixed_body_size = 128,
 fixed_response_latency = 1,
 response_timing_type = 'fixed',
HTTP Functions
336
 tos_type = 'tos',
 ipv4_tos = 64,
 rx_window_limit = 32769,
 enable_delayed_ack = 'true',
 video_server_stream_type = 'progressive',
 video_server_type = 'live_streaming',
 server_video_length = 61,
 video_server_version = 'version_1_0',
 server_media_seq_num = 2,
 server_target_duration = 11,
 server_sliding_window_play_list_size = 10,
 server_port_num = 80);
 Sample Output:
 {'status': '1', 'server_profile_handle': 'serverprofile1'}
 #### HLTAPI for Perl ####
 To create an HTTP load profile:

 my %result1 = sth::emulation_http_profile_config (
 mode => 'create',
 profile_type => 'load',
 profile_name => 'http_load',
 max_connections_attempted => 100,
 max_open_connections => 20,
 max_transactions_attempted => 30,
 load_type => 'connections_per_time_unit',
 randomization_seed => 100000);

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'load_profile_handle';
 $VAR4 = 'clientloadprofile1';

 To create an HTTP client profile:

 my %result2 = sth::emulation_http_profile_config (
 mode => 'create',
 profile_type => 'client',
 profile_name => 'http_client',
 http_version => 'version_1_0',
 enable_keep_alive => 'true',
 enable_pipeline => 'true',
 enable_video_client => 'false',
 max_pipeline_depth => 10,
 video_client_start_bitrate => 'userdefine',
 video_client_bitrate_alg => 'normal',
 video_client_view_time => 61,
 video_client_user_def_value => 128,
 video_client_predef_method => 'median',
 video_client_type => 'spirent_hls',
 video_client_video_type => 'live',
 user_agent_header => "abc123 456der");

 Sample Output:
 $VAR1 = 'client_profile_handle';
 $VAR2 = 'clientprofile1';
 $VAR3 = 'status';
 $VAR4 = '1';
 To create an HTTP server profile:

 my %result3 = sth::emulation_http_profile_config (
 mode => 'create',
 profile_type => 'server',
 profile_name => 'http_server',
 body_content_type => 'binary',
 body_size_type => 'fixed',
 http_version => 'version_1_0',
HTTP Functions
337
 server_type => 'apache',
 fixed_body_size => 128,
 fixed_response_latency => 1,
 response_timing_type => 'fixed',
 tos_type => 'tos',
 ipv4_tos => 64,
 rx_window_limit => 32769,
 enable_delayed_ack => 'true',
 video_server_stream_type => 'progressive',
 video_server_type => 'live_streaming',
 server_video_length => 61,
 video_server_version => 'version_1_0',
 server_media_seq_num => 2,
 server_target_duration => 11,
 server_sliding_window_play_list_size => 10,
 server_port_num => 80);

 Sample Output:
 $VAR1 = 'server_profile_handle';
 $VAR2 = 'serverprofile1';
 $VAR3 = 'status';
 $VAR4 = '1';
sth::emulation_http_config
Name:
 sth::emulation_http_config

Purpose:
 Creates, modifies, or deletes an HTTP client/server on the specified device

Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_http_config
 -mode {create | modify | delete}
 -http_type {client | server}
 [-client_profiles <handle>]
 [-connected_server <handle>]
 [-device_handle <handle>]
 [-dynamic_load <1-1000000>]
 [-endpoint_connection_pattern {pair | backbone_src_first |
 backbone_dst_first | backbone_interleaved}]
 [-load_profiles <handle>]
 [-max_request_per_client <1-4294967295>]
 [-max_simultaneous_clients <1-4294967295>]
 [-max_transactions_per_server <1-4294967295>]
 [-port_handle <handle>]
 [-server_profiles <handle>]
Arguments:
 -mode
 Specifies the action to be performed. This argument is mandatory.
 Possible values are create, modify, and delete.

 create Enables the HTTP configuration on the device

 modify Modifies the HTTP configuration on the specified device

 deletes Deletes the HTTP configuration on the specified device

 -http_type
 Specifies the type of HTTP to be configured. This argument is
 mandatory. Possible values are client and server.
 client HTTP client

 server HTTP server
HTTP Functions
338

 The default is client.
 -client_profiles
 Specifies the client profile handle returned by the
 sth::emulation_http_profile_config function
 -connected_server
 Specifies the device handle, on which the HTTP server is configured

 -device_handle
 Specifies the device handle. This argument is mandatory when
 -mode is set to modify or delete.
 -dynamic_load
 Load value in units of the load profile, only used when
 -use_dynamic_load is set to true. Possible values range from 1 to
 1000000. The default is 30.
 -endpoint_connection_pattern
 Specifies the method to associate endpoints
 Possible values are:
 pair Pair connections

 backbone_src_first Backbone connections, varying the
 source address first

 backbone_dst_first Backbone connections, varying the
 destination address first

 backbone_interleaved Backbone connections, interleaving
 source and destination addresses

 The default value is pair.
 -load_profiles
 Specifies the load profile handle returned by the
 sth::emulation_http_profile_config function
 -max_request_per_client
 Maximum number of requests from a single client. Possible values
 range from 1 to 4294967295. The default is 10.
 -max_simultaneous_clients
 Maximum number of simultaneous clients supported by the server.
 Possible values range from 1 to 4294967295. The default is
 4294967295.
 -max_transactions_per_server
 Maximum number of transactions between a single client and
 server. Possible values range from 1 to 4294967295. The default
 is 10.
 -port_handle
 Specifies the port handle. If -mode is set to create and
 -device_handle is not specified, it will create a device with
 default values from Spirent TestCenter.
 -server_profiles
 Specifies the server profile returned by the
 sth::emulation_http_profile_config function.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 device_handle The handle of the default device created by -port_handle. Only
 returned when -device_handle is not available.
HTTP Functions
339
 client_handle HTTP client handle
 server_handle HTTP server handle
 status Success (1) or failure (0) of the operation
 log An error message (if the operation failed)
Description:
 The sth::emulation_http_config function creates, modifies, or deletes an emulated
 HTTP client/server on the specified device. Use -mode to specify the action to
 perform, and use -http_type to specify whether you want to configure an HTTP
 server or HTTP client. (See Arguments for more information.)

 Before enabling HTTP server/client on the specified devices, make sure there are
 already HTTP server/client/load profile handles returned by the
 sth::emulation_http_profile_config function.
Examples:
 #### HLTAPI for Tcl ####

 To configure an HTTP client on the specified device:

 set result [sth::emulation_http_config -mode create \
 -port_handle $port1 \
 -http_type client \
 -client_profiles $client_profile \
 -load_profiles $load_profile \
 -device_handle $intf1 \
 -max_transactions_per_server 20\
 -connected_server $intf2]

 Sample Output:
 {client_handle httpclientprotocolconfig1} {status 1}
 To configure an HTTP server on the specified device:

 set result [sth::emulation_http_config -mode create \
 -port_handle $port2 \
 -http_type server \
 -max_request_per_client 20\
 -server_profiles $server_profile \
 -max_simultaneous_clients 10\
 -device_handle $intf2]

 Sample Output:
 {server_handle httpserverprotocolconfig1} {status 1}
 #### HLTAPI for Python ####
 To configure an HTTP client on the specified device:

 result5 = sth.emulation_http_config (
 mode = 'create',
 port_handle = port_handle[0],
 http_type = 'client',
 client_profiles = client_profile,
 load_profiles = load_profile,
 device_handle = dev_handle,
 max_transactions_per_server = 20,
 connected_server = dev_handle1);

 Sample Output:
 {'status': '1', 'client_handle': 'httpclientprotocolconfig1'}
 To configure an HTTP server on the specified device:

 result4 = sth.emulation_http_config (
 mode = 'create',
 port_handle = port_handle[1] ,
 http_type = 'server',
HTTP Functions
340
 max_request_per_client = 20,
 server_profiles = server_profile,
 max_simultaneous_clients = 10,
 device_handle = dev_handle1);

 Sample Output:
 {'status': '1', 'server_handle': 'httpserverprotocolconfig1'}
 #### HLTAPI for Perl ####
 To configure an HTTP client on the specified device:

 my %result5 = sth::emulation_http_config (
 mode => 'create',
 port_handle => "$port[1]",
 http_type => 'client',
 client_profiles => $client_profile,
 load_profiles => $load_profile,
 device_handle => $dev_handle,
 max_transactions_per_server => 20,
 connected_server => $dev_handle1);
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'client_handle';
 $VAR4 = 'httpclientprotocolconfig1';

 To configure an HTTP server on the specified device:
 my %result4 = sth::emulation_http_config (
 mode => 'create',
 port_handle => "$port[2]" ,
 http_type => 'server',
 max_request_per_client => 20,
 server_profiles => $server_profile,
 max_simultaneous_clients => 10,
 device_handle => $dev_handle1);
 Sample Output:
 $VAR1 = 'server_handle';
 $VAR2 = 'httpserverprotocolconfig1';
 $VAR3 = 'status';
 $VAR4 = '1';
sth::emulation_http_phase_config
Name:
 sth::emulation_http_phase_config

Purpose:
 Creates, modifies, or deletes phases for http load profiles. An HTTP test
 consists of a sequence of phases defined in a load profile.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_http_phase_config
 -mode {create | modify | delete}
 [-burst_time <0 - 40000000>]
 [-pause_time <0 - 40000000>]
 [-period <0 - 10000>]
 [-profile_handle <handle>]
 [-phase_handle <handle>]
 [-phase_name <ALPHANUM>]
 [-load_pattern {stair | flat | burst | sinusoid | random | sawtooth}]
 [-duration_units {milliseconds | seconds | minutes | hours}]
HTTP Functions
341
 [-height <0 - 10000000>]
 [-ramp_time <0 - 40000000>]
 [-repetitions <0 - 100>]
 [-steady_time <0 - 40000000>]
Arguments:
 -mode
 Specifies the action to be performed. This argument is mandatory.
 Possible values are create, modify, and delete.

 create Creates the load phase under the specified profile handle

 modify Modifies the specified load phase

 deletes Deletes the specified load phase

 -burst_time
 The duration of the burst, in the unit determined by the
 -duration_units argument. This argument is only valid when
 -load_pattern is set to burst. Possible values range from 0 to
 40000000. The default is 20.

-duration_units
 The unit of time for the load generation of the specified phase.
 Possible values are seconds, milliseconds, minutes, and hours.
 The default is seconds.
 -height
 The total amount of load related to the load type. Possible
 values range from 0 to 10000000. The default is 30.
 -load_pattern
 Determines the traffic pattern in which the load is generated for
 the test phase. Possible values are:

 stair Controls the workload as it climbs or descends
 through a series of steps

 flat Holds the amount of load steady

 burst Introduces sudden increases (spikes) in a load for
 a relatively short period of time, after which the
 load decreases

 sinusoid Defines an arbitrary curve that represents a neutral
 to high workload, then neutral to low, and back to
 neutral

 random Shows the bounds of where values occur in the workload

 sawtooth The ending load height is the same as the beginning

 The default value is stair.

-profile_handle
 Specifies the profile handle on which the HTTP phase is
 configured. This argument is mandatory when -mode is set to
 create.
 -phase_handle
 Specifies the load phase handle to use when -phase_mode is set to
 modify or delete

 -phase_name
 Specifies the name of the load phase to create

 -pause_time
 The pause time between bursts, in the unit specified by
 -duration_units. This argument is only valid when -load_pattern
 is set to burst or sawtooth. Possible values range from 0 to
 40000000. The default is 40.
HTTP Functions
342

 -period
 The amount of time to gradually achieve the total load specified
 by height. -duration_units determines the units for this
 attribute. This argument is only valid when -load_pattern is set
 to sinusoid. Possible values range from 0 to 1000.

 -ramp_time
 The amount of time each step takes to reach the load type applied
 to height. -duration_units determines the units for this
 attribute. This argument is only valid when load_pattern is set
 to flat, random or stair. Possible values range from 0 to
 40000000. The default is 20.

 -repetitions
 The number of times that you want the pattern to repeat. The
 system performs best when you set the values between 1 and 10.
 Values above 50 can cause the display to redraw slowly. This
 argument is only valid when load_pattern is set to burst, random,
 sawtooth, sinusoid or stair. Possible values range from 0 to 100.
 The default is 1.
 -steady_time
 The amount of time that the step takes. -duration_units determines
 the unit for this attribute. This argument is only valid when
 load_pattern is flat, random, sawtooth or stair. Possible values
 range from 0 to 40000000. The default is 20.
Arguments Unsupported by Save as HLTAPI:
 None
Description:
 The sth::emulation_http_profile_config function creates, modifies, or deletes load
 phases for specified HTTP load profiles.

 In the create mode, one or more HTTP phases can be created for the same
 load profile and the corresponding phase handles will be returned.

 If the creation, modification, or deletion fails, Spirent HLTAPI returns an error
 message.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 load_phase_handle The load phase handle created

 status Success (1) or failure (0) of the operation
 log An error message (if the operation failed)
Examples:
 #### HLTAPI for Tcl ####
 To configure an HTTP phase for the specified HTTP load profile:

 set load_profile [keylget result load_profile_handle]

 set load_phase_handle1 [sth::emulation_http_phase_config \
 -mode create \
 -profile_handle $load_profile \
 -phase_name "phase1"\
 -load_pattern burst \
 -repetitions 1\
 -height 30\
 -burst_time 20\
 -pause_time 40\
 -duration_units seconds]

 return value: {status 1}
 
HTTP Functions
343
 #### HLTAPI for Python ####
 To configure an HTTP phase for the specified HTTP load profile:
 load_phase_handle1 = sth.emulation_http_phase_config (
 mode = 'create',
 profile_handle = load_profile,
 phase_name = "phase1",
 load_pattern = 'burst',
 repetitions = 1,
 height = 30,
 burst_time = 20,
 pause_time = 40,
 duration_units = 'seconds');

 Sample Output:
 {'status': '1', 'load_phase_handle': 'clientloadphase1'}

 #### HLTAPI for Perl ####
 To configure an HTTP phase for the specified HTTP load profile:

 my %load_phase_handle1 = sth::emulation_http_phase_config (
 mode => 'create',
 profile_handle => $load_profile,
 phase_name => "phase1",
 load_pattern => 'burst',
 repetitions => 1,
 height => 30,
 burst_time => 20,
 pause_time => 40,
 duration_units => 'seconds');

 Sample Output:
 {'status': '1', 'load_phase_handle': 'clientloadphase1'}

sth::emulation_http_control
Name:
 sth::emulation_http_control

Purpose:
 Starts, stops the configured HTTP traffic, or clears all statistics
 (transmitted and received counters) of the specified handle
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_http_control
 -mode {start | stop | clear_stats}
 -handle <handle>
Arguments:
 -mode
 Specifies the action to be performed. This argument is mandatory.
 Possible values are start, stop, and clear_stats.

 start Starts the HTTP traffic

 stop Stops the HTTP traffic

 clear_stats Clears all statistics (transmitted and received
 counters) on the specified handle
 -handle
 Specifies a list of client handles or server handles, which are
 returned by the sth::emulation_http_config function.
 
HTTP Functions
344
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status Success (1) or failure (0) of the operation
 log An error message (if the operation failed)
Description:
 The sth::emulation_http_control function starts, stops the HTTP traffic, or
 clears all statistics of the specified device handle.
Examples:
 #### HLTAPI for Tcl ####
 Sample Input:

 set result [sth::emulation_http_control -mode start \
 -handle "$client $server"]

 Sample Output:
 {status 1}
 #### HLTAPI for Python ####
 Sample Input:

 result6 = sth.emulation_http_control (
 mode = 'start',
 handle = server_handle);

 Sample Output:
 {'status': '1'}
 #### HLTAPI for Perl ####
 Sample Input:

 my %result6 = sth::emulation_http_control (
 mode => 'start',
 handle => "$server_handle");

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';

sth::emulation_http_stats
Name:
 sth::emulation_http_stats

Purpose:
 Returns HTTP statistics on the specified handle

Synopsis
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_http_stats
 -handle <handle>
Arguments:
 -handle
 Specifies the HTTP client/server handle from which HTTP statistics are
 retrieved. This argument is mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data): 
HTTP Functions
345

 status Success (1) or failure (0) of the operation
 log An error message (if the operation failed)
 The following keys are returned when you specify a client handle:

 aborted_connections
 Total number of aborted connections from the client block

 aborted_connections_per_second
 Total number of aborted connections per second from the client block

 aborted_transactions
 Total number of aborted transactions from the client block

 aborted_transactions_per_second
 Total number of aborted transactions per second from the client block

 active_connections
 Number of connections open or attempting for this client at this instant

 attempted_connections
 Total number of attempted connections from the client block

 attempted_connections_per_second
 Total number of attempted connections per second from the client block

 attempted_transactions
 Total number of attempted transactions from the client block

 attempted_transactions_per_second
 Total number of attempted transactions per second from the client block

 avg_response_time_per_url_msec
 Average response time per URL in milliseconds

 elapsed_seconds
 Time duration in seconds that this client block instance has been running

 goodput_avg_rx_rate_bps
 Average goodput receive rate in bits per second

 goodput_avg_tx_rate_bps
 Average transmitted goodput rate in bits per second

 goodput_max_rx_rate_bps
 Maximum received goodput rate in bits per second

 goodput_max_tx_rate_bps
 Maximum transmitted goodput rate in bits per second

 goodput_min_rx_rate_bps
 Minimum received goodput rate in bits per second

 goodput_min_tx_rate_bps
 Minimum transmitted goodput rate in bits per second

 goodput_rx_bps
 Current received goodput in bits per second

 goodput_rx_bytes
 Total received goodput bytes

 goodput_tx_bps
 Current transmitted goodput in bits per second

 goodput_tx_bytes
 Total transmitted goodput bytes
 
HTTP Functions
346
 intended_load
 Intended load

 max_response_time_per_url_msec
 Maximum response time per URL in milliseconds

 min_response_time_per_url_msec
 Minimum response time per URL in milliseconds

 rx_response_code_200
 Received response codes with a value of 200

 rx_response_code_400
 Received response codes with a value of 400

 rx_response_code_404
 Received response codes with a value of 404

 rx_response_code_405
 Received response codes with a value of 405

 successful_connections
 Total number of successful connections from the client block

 successful_connections_per_second
 Total number of successful connections per second from the client block

 successful_transactions
 Total number of successful transactions from the client block

 successful_transactions_per_second
 Total number of successful transactions per second from the client block

 sum_response_time_per_url_msec
 Sum of response times per URL in milliseconds

 unsuccessful_connections
 Total number of unsuccessful connections from the client block

 unsuccessful_connections_per_second
 Total number of unsuccessful connections per second from the client block

 unsuccessful_transactions
 Total number of unsuccessful transactions from the client block

 unsuccessful_transactions_per_second
 Total number of unsuccessful transactions per second from the client block
 The following keys are returned when you specify a server handle:

 active_connections
 Number of connections open (accepted) for this server at this instant

 elapsed_seconds
 Time duration in seconds that this server block has been running

 goodput_avg_rx_rate_bps
 Average received goodput rate in bits per second

 goodput_avg_tx_rate_bps
 Average transmitted goodput rate in bits per second

 goodput_max_rx_rate_bps
 Maximum received goodput rate in bits per second

 goodput_max_tx_rate_bps
 Maximum transmitted goodput rate in bits per second

 goodput_min_rx_rate_bps
 Minimum received goodput rate in bits per second
HTTP Functions
347

 goodput_min_tx_rate_bps
 Minimum transmitted goodput rate in bits per second

 goodput_rx_bps
 Current received goodput in bits per second

 goodput_rx_bytes
 Total received goodput bytes

 goodput_tx_bps
 Current transmitted goodput in bits per second

 goodput_tx_bytes
 Total transmitted goodput bytes

 successful_transactions
 Total number of successful transactions from the server block

 successful_transactions_per_second
 Total number of successful transactions per second from the server block

 total_connections
 Total number of connections handled by this HTTP server

 total_connections_per_second
 Total number of connections per second from the server block

 tx_response_code_200
 Count of transmitted response codes with value 200

 tx_response_code_400
 Count of transmitted response codes with value 400

 tx_response_code_404
 Count of transmitted response codes with value 404

 tx_response_code_405
 Count of transmitted response codes with value 405

 unsuccessful_transactions
 Total number of unsuccessful transactions from the server block

 unsuccessful_transactions_per_second
 Total number of unsuccessful transactions per second from the server block
Description:
 The sth::emulation_http_stats function provides statistics for the HTTP emulation.
 Use -handle to specify the HTTP server or client handle from which you want to
 retrieve the statistics.

 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message.
Examples:
 #### HLTAPI for Tcl ####

 Sample Input:

 set result [sth::emulation_http_stats -handle $client]

 Sample Output:
 {successful_transactions 2000} {attempted_transactions 2000}
 {successful_transactions_per_second 0} {rx_response_code_404 0}
 {max_response_time_per_url_msec 10} {goodput_min_tx_rate_bps 0}
 {goodput_max_rx_rate_bps 1073536} {attempted_transactions_per_second 0}
 {avg_response_time_per_url_msec 4} {goodput_avg_rx_rate_bps 491327}
 {rx_response_code_405 0} {aborted_transactions_per_second 0}
HTTP Functions
348
 {unsuccessful_transactions 0} {goodput_max_tx_rate_bps 303576}
 {goodput_avg_tx_rate_bps 139617} {aborted_connections_per_second 0}
 {unsuccessful_connections 0} {active_connections 0} {goodput_rx_bps 0}
 {sum_response_time_per_url_msec 9301} {goodput_tx_bps 0} {goodput_rx_bytes
 635900} {aborted_transactions 0} {successful_connections 100} {intended_load 0}
 {attempted_connections 100} {successful_connections_per_second 0}
 {rx_response_code_200 2000} {goodput_tx_bytes 180700} {aborted_connections 0}
 {attempted_connections_per_second 0} {unsuccessful_transactions_per_second 0}
 {elapsed_seconds 10} {rx_response_code_400 0}
 {unsuccessful_connections_per_second 0} {min_response_time_per_url_msec 3}
 {goodput_min_rx_rate_bps 0} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 result11 = sth.emulation_http_stats (handle = server_handle);

 Sample Output:

 {'status': '1', 'goodput_rx_bytes': '184700', 'active_connections': '0',
 'goodput_tx_bytes': '635900', 'total_connections_per_second': '0',
 'total_connections': '100', 'tx_response_code_405': '0', 'tx_response_code_404':
 '0', 'successful_transactions': '2000', 'unsuccessful_transactions': '0',
 'goodput_max_rx_rate_bps': '310606', 'goodput_rx_bps': '0',
 'goodput_avg_rx_rate_bps': '135497', 'goodput_avg_tx_rate_bps': '466501',
 'elapsed_seconds': '10', 'goodput_min_rx_rate_bps': '0',
 'goodput_min_tx_rate_bps': '0', 'tx_response_code_400': '0',
 'tx_response_code_200': '2000', 'goodput_tx_bps': '0',
 'unsuccessful_transactions_per_second': '0',
 'successful_transactions_per_second': '0', 'goodput_max_tx_rate_bps': '1069381'}

### HLTAPI for Perl ####

 Sample Input:

 my %result11 = sth::emulation_http_stats (handle => $server_handle);
 Sample Output:
 $VAR1 = 'unsuccessful_transactions';
 $VAR2 = '0';
 $VAR3 = 'goodput_rx_bps';
 $VAR4 = '0';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'successful_transactions';
 $VAR8 = '2000';
 $VAR9 = 'tx_response_code_404';
 $VAR10 = '0';
 $VAR11 = 'goodput_rx_bytes';
 $VAR12 = '184700';
 $VAR13 = 'goodput_min_rx_rate_bps';
 $VAR14 = '0';
 $VAR15 = 'active_connections';
 $VAR16 = '0';
 $VAR17 = 'tx_response_code_405';
 $VAR18 = '0';
 $VAR19 = 'tx_response_code_200';
 $VAR20 = '2000';
 $VAR21 = 'goodput_avg_rx_rate_bps';
 $VAR22 = '132841';
 $VAR23 = 'goodput_avg_tx_rate_bps';
 $VAR24 = '457358';
 $VAR25 = 'goodput_max_rx_rate_bps';
 $VAR26 = '303231';
 $VAR27 = 'goodput_tx_bps';
 $VAR28 = '0';
 $VAR29 = 'unsuccessful_transactions_per_second';
 $VAR30 = '0';
 $VAR31 = 'successful_transactions_per_second';
 $VAR32 = '0';
 $VAR33 = 'goodput_min_tx_rate_bps';
 $VAR34 = '0';
HTTP Functions
349
 $VAR35 = 'goodput_max_tx_rate_bps';
 $VAR36 = '1064304';
 $VAR37 = 'total_connections';
 $VAR38 = '100';
 $VAR39 = 'elapsed_seconds';
 $VAR40 = '11';
 $VAR41 = 'total_connections_per_second';
 $VAR42 = '0';
 $VAR43 = 'tx_response_code_400';
 $VAR44 = '0';
 $VAR45 = 'goodput_tx_bytes';
 $VAR46 = '635900';
 
IGMP Functions
350
IGMP Functions
Functions:
sth::emulation_igmp_config
sth::emulation_igmp_control
sth::emulation_igmp_group_config
sth::emulation_igmp_info
sth::emulation_igmp_config
Name:
 sth::emulation_igmp_config
Purpose:
 Creates, modifies, or deletes Internet Group Management Protocol (IGMP)
 host(s) for the specified Spirent HLTAPI port or handle.
 The Internet Group Management Protocol (IGMP) is a communications
 protocol that manages the membership of Internet Protocol multicast groups.
 Use IGMP to dynamically register individual hosts in a multicast group on a
 particular LAN. Hosts identify which multicast groups they belong to by
 sending IGMP messages to their local router. Under IGMP, routers listen to
 IGMP messages and send out queries to discover which groups are active on
 a particular subnet. When all hosts leave a group, the router no longer
 forwards packets for that group.
Synopsis:
 sth::emulation_igmp_config
 -mode create {-port_handle {<port_handle> | -handle <session_handle>} |
 -mode {modify {-port_handle <port_handle> | -handle <IGMP_host_handle>} |
 -mode {delete | disable_all}
 [-count <1-65535> ]
 [-filter_mode {include | exclude}]
 [-filter_ip_addr <a.b.c.d>]
 [-general_query 1]
 [-group_query 1]
 [-igmp_version {v1|v2|v3}]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-intf_prefix_len <1-32>]
 [-ip_router_alert {0|1}]
 [-source_mac <aa:bb:cc:dd:ee:ff>]
 [-source_mac_step <aa:bb:cc:dd:ee:ff>]
 [-msg_interval <0-4294967295>]
 [-neighbor_intf_ip_addr <a.b.c.d>]
 [-neighbor_intf_ip_addr_step <a.b.c.d>]
 [-older_version_timeout <0-4294967295>]
 [-qinq_incr_mode {inner|outer|both}]
 [-robustness <2-255>]
 [-suppress_report 1]
 [-vlan_cfi {0|1}]
 [-vlan_outer_cfi {0 | 1}]
 [-vlan_id <0-4095> ]
 [-vlan_id_count <1-4096>]
 [-vlan_id_mode {fixed|increment}]
 [-vlan_id_step <0-32767>]
 [-vlan_user_priority <0-7>]
 [-vlan_id_outer <0-4095>]
 [-vlan_id_outer_mode {fixed|increment}]
 [-vlan_id_outer_count <1-4096>]
 [-vlan_id_outer_step <0-32767>]
 [-vlan_outer_user_priority <0-7>]
IGMP Functions
351
Arguments:
 -count
 Defines the number of IGMP hosts to create on the
 interface. Possible values are 1 to 65535. The default
 is 1.
 -filter_mode
 Specifies an explicit set of sources from which the
 multicast group is interested in receiving data (configures
 IGMPv3 Include Filter mode). Possible values are include and
 exclude. The default is "include".
 include - Data from the specified sources are filtered and
 forwarded to the hosts by the multicast router.
 exclude - Data from the specified sources are filtered and
 not forwarded to the hosts by the multicast router.
 -filter_ip_addr
 Configure the filtered IP address.
 The value must be in IPv4 format. The default value is 192.0.1.0.
 -general_query
 Always enabled. Valid values are 0 (false) and 1 (true).
 When -general_query is set to 1, Spirent HLTAPI responds
 to only general queries received on the interface.
 -group_query
 Always enabled. Valid values are 0 (false) and 1 (true).
 When -group_query is set to 1, Spirent HLTAPI responds
 to only group-specific (and source/group) queries received
 on the interface.
 -handle
 The handle of the IGMP host configured on the port to
 use. You must specify -handle when -mode is set to "modify"
 or "delete". When you use -mode create, it is mandatory that
 you specify -port_handle or -handle, but not both. If you define
 -port_handle and -mode create, Spirent HLTAPI creates an IGMP
 device on the given port. If you specify -handle and -mode create,
 Spirent HLTAPI enables IGMP over the provided PPPoX or L2TP
 session.
 You can use -handle when -mode is set to "create" for
 IGMPoPPPoX or IGMPoL2TP. When specifying a PPPoX/L2TP
 handle, the PPPoX/L2TP options specified in the
 sth::pppox_config/sth::l2tp_config function are used instead of
 the following sth::emulation_igmp_config arguments:
 -intf_ip_addr
 -intf_ip_addr_step
 -intf_prefix_len
 -neighbor_intf_ip_addr
 -neighbor_intf_ip_addr_step
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vlan_id_count
 -vlan_id_outer
 -vlan_id_outer_count
 -vlan_id_outer_step
 -vlan_outer_user_priority
 -vlan_outer_tpid
 The following example specifies a PPPoX handle:

 sth::emulation_igmp_config \
 -mode create \
IGMP Functions
352
 -handle $pppoxHandle \
 -older_version_timeout 400 \
 -robustness 2 \
 -unsolicited_report_interval 100
 The following example enables IGMP protocol on an
 existing L2TP host.
 sth::emulation_igmp_config \
 -mode create \
 -handle $l2tpHandle \
 -older_version_timeout 400 \
 -robustness 2 \
 -unsolicited_report_interval 100
 -igmp_version
 Specifies the multicasting protocol used to manage multicast
 group memberships. Possible values are:
 v1 - The second version of IGMP (supercedes IGMPv0),
 specified in RFC 1112.
 v2 - IGMP version specified in RFC 2236. Improved IGMP
 version that adds "leave" messages, shortening the
 amount of time mandatory for a router to determine
 that no stations are in a particular group. This
 version includes the ability for the receivers to
 gracefully exit from a multicast group.
 v3 - Specified in RFC 3376, this major revision of the
 IGMP protocol adds the ability to specify the
 source(s) to which a receiver is willing to
 listen. Sources can be stipulated with "include"
 filters in the "join" and "report" messages, or
 sources can be specifically rejected with
 "exclude" filters.
 -intf_ip_addr
 Specifies the first IPv4 address in the group. The default
 for IPv4 is 192.85.1.3.
 -intf_ip_addr_step
 Specifies the difference between interface IP addresses of
 consecutive hosts when multiple IGMP hosts are created.
 The default increment is 1 (for example, 0.0.0.1). This
 argument is only applicable in create mode.
 -intf_prefix_len
 Specifies the address prefix length on the emulated host,
 Possible values for IPv4 addresses range from 1 to 32; the
 default is 24,
 -ip_router_alert
 Alerts transit routers to examine the contents of an IP
 packet more closely. When -ip_router_alert is set to 1,
 Spirent HLTAPI enables the IP router alert option. This
 argument is always enabled (1 or true) in Spirent HLTAPI
 whenever hosts send to routers. The IP router alert option
 is useful for new protocols that are addressed to a
 destination but require relatively complex processing in
 routers along the path. (See RFC 2113 for more information.)
 -source_mac
 Specifies the starting MAC address in the address pool. The
 value must be in MAC format. The default value is
 00:10:94:00:00:01.
 -source_mac_step
 Specifies the increment to use when generating the next MAC
 address. The default value is 00:00:00:00:00:01.
IGMP Functions
353
 -mode
 Specifies the action to perform. Possible values are create,
 modify, and delete, This argument is mandatory. The modes are
 described below:
 create - Starts emulating IGMP hosts on the specified port
 or handle.
 modify - Changes the configuration parameters for the IGMP
 hosts identified by either the -port_handle or -handle
 argument.
 delete - Stops the IGMP emulation locally without attempting
 to clear the bound addresses from the IGMP server. In
 addition, all IGMP group sessions information on the
 port is cleared and the connection is restarted.
 disable_all - Disables all the IGMP sessions on the specific port.
 If -port_handle is not specified, all IGMP sessions under
 all ports will be disabled.
 -msg_interval
 Maximum output rate of IGMP message packets generated per
 millisecond. Set this value to 0 to send messages as fast
 as possible. Possible values range from 0 to 4294967295. The
 default is 0.
 -neighbor_intf_ip_addr
 Specifies the IP address of the interface for the IGMP
 neighbor (next hop) that will establish an adjacency with
 the DUT. The default for IPv4 is 192.85.1.1.
 -neighbor_intf_ip_addr_step
 Specifies the difference between the IGMP neighbor's
 interface IP addresses when multiple IGMP hosts are created.
 The default is 0.0.0.0 (that is, the same address).
 -older_version_timeout
 The amount of time (in 1/10 seconds) a host must wait after
 hearing a Version 1 Query before it may send any IGMPv2
 messages. Not used for IGMPv3. Possible values are 0 to
 4294967295. The default is 4000
 milliseconds.
 -port_handle
 The handle of the port on which to create the emulated IGMP
 session. When -mode is set to "create", it is mandatory that
 you specify -port_handle or -handle, but not both.
 -qinq_incr_mode
 Determines which VLAN ID to increment first. Possible values
 are:
 inner - increment the inner VLAN ID before the outer VLAN ID
 outer - increment the outer VLAN ID before the inner VLAN ID
 both - increment both the inner and outer VLAN ID at the
 same time.
 The default is inner.
 Note: For HLTAPI, qinq can only be incremented
 on a per host basis.
 -robustness
 IGMPv3 only. Specifies the number of times to send a State
 Change Report. This number is used in the calculation of
 default values for various timers and counters. Possible
 values are 2 to 255. The default value is 2.
IGMP Functions
354
 -suppress_report
 Always enabled. Valid values are 0 (false) and 1 (true).
 When -suppress_report is set to 1, Spirent HLTAPI
 suppresses the transmission of a listener report that
 duplicates one received on the interface. Multicast hosts
 can suppress the transmission of reports to reduce the
 amount of multicast communication.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 1. If set to 0, it indicates
 Token Ring and packets are dropped by Ethernet ports. If set
 to 0, it indicates the network is Ethernet.
 -vlan_id
 Defines the VLAN ID of the first VLAN sub-interface.
 Possible values range from 0 to 4095. The default is 1. When
 the mode is either "create" or "enable", Spirent HLTAPI
 checks for a vlan object on the port with the given VLAN ID.
 If no VLAN object with that ID exists, Spirent HLTAPI
 creates a VLAN object with the specified VLAN ID.
 -vlan_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of inner VLAN IDs to use when
 generating IGMP clients. Spirent HLTAPI assigns VLAN
 membership in round-robin fashion. Possible values range
 from 1 to 4096. The default is 1.
 -vlan_id_mode
 If you configure more than one interface on Spirent
 HLTAPI with VLAN, you can choose to either automatically
 increment the VLAN tag (mode "increment") or leave it idle
 for each interface (mode "fixed"), in which case the VLAN ID
 is the same for all packets. If you set this argument
 to "increment", you can specify the -vlan_id_step argument to
 indicate the step size. The default is "increment".
 -vlan_id_step
 Defines the step size by which the VLAN value is incremented
 when you set -vlan_id_mode to "increment". Possible values
 range from 0 to 32767. You can specify the step when the
 -count argument is greater than 1. The default is 1.
 -vlan_id_outer
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN ID for a particular outer header.
 Possible values range from 0 to 4095.
 -vlan_id_outer_count
 Spirent Extension (for Spirent HLTAPI only).
 The number of outer VLAN IDs to use when generating IGMP
 clients. Spirent HLTAPI assigns VLAN membership in
 round-robin fashion. Possible values range from 1 to 4096.
 The default is 1.
 -vlan_id_outer_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign VLAN tags to
 packets in the specified outer header. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_id_outer_step argument.
 -vlan_id_outer_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
IGMP Functions
355
 (-vlan_id_outer) for subsequent packets. Possible values
 range from 0 to 32767. The default is 0.
 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the canonical format indicator (cfi) value
 is set for the VLAN outer header. Possible values are 0 or
 1.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -vlan_user_priority
 Defines the VLAN priority for the VLANs on this port.
 Possible values range from 0 to 7. The default is 0.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -qinq_incr_mode
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -emulation_intf_handle
 -group_per_intf
 -group_pool_handle
 -intf_ip_mode
 -max_groups_per_pkts
 -max_response_control
 -max_response_time
 -msg_rate
 -sessions_per_group
 -unsolicited_report_interval
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle Identifies the created device handle.

 handles Identifies the IGMP host configration handle.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_igmp_config function creates, modifies, or deletes one
 or more emulated IGMP hosts. Use the -mode argument to specify the action
 to perform. (See the -mode argument description for information about the
 actions.)
 When you create an IGMP host, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated IGMP host will
 use for IGMP communication. (The port handle value is contained in the
 keyed list returned by the sth::connect function.)
 Before you configure IGMP on a port, you must create the port, and use the
 returned port handle in the call to the sth::emulation_igmp_config
 function. The first time you call sth::emulation_igmp_config for a
 particular port, you must specify "-mode create".
IGMP Functions
356
 Spirent HLTAPI supports the use of IGMP versions 1, 2, or 3 for
 multicast group membership. To test IPv4 traffic with one of the Internet
 Group Management Protocols, you use the Spirent HLTAPI HLT API for:
 - Generating multicast traffic
 - Receiving multicast traffic
 - Retrieving multicast results
 IGMPv3 provides support for secure communication. Hosts can use Include
 filters in the Join and Report messages to identify valid sources, or they
 can use Exclude filters to reject sources. Routers will keep track of the
 valid sources for every multicast group.
 Note when using IGMP over PPPoX/L2TP: Modifying any option during a
 PPPoE/L2TP session which currently is a member of a multicast group will
 sever the PPPoE/L2TP session, IGMP host, and multicast group relationship.
 Therefore, do not use sth::pppox_config/sth::l2tp_config if the PPPoX/L2TP
 engine is not idle. To see if the PPPoX/L2TP engine is not idle, look at the
 aggregate.idle flag returned by "sth::pppox_stats -mode
 aggregate"/"sth::l2tp_stats -mode aggregate". If aggregate.idle is "0", then do
 not send sth::pppox_config/sth::l2tp_config. If the PPPoX/L2TP engine is
 aborted, you will need to reconfigure the PPPoX/L2TP session. If using IGMP
 over PPPoX/L2TP, you will also need to reconfigure the IGMP session. (See
 Examples below).
 For more information about the IGMP protocol, see RFC1112 (IGMPv1), 2236
 (IGMPv2), and 3376 (IGMPv3).
Examples:
 #### HLTAPI for Tcl ####
 To create an IGMP session:
 sth::emulation_igmp_config \
 -port_handle $port_handle1 \
 -mode create \
 -igmp_version v3 \
 -intf_ip_addr 10.41.1.2 \
 -neighbor_intf_ip_addr 10.41.1.1
 Output: {handles $port_handle1} {status 1}
 To create an IGMP over L2TP session:
 set l2tp_rL [sth::l2tp_config -mode create -port_handle port1 ... ]
 # Connect L2TP
 sth::l2tp_control - action connect -handle [keylget l2tp_rL handles]
 #After all L2TP sessions have finished connecting, create IGMP clients.
 set igmp_rL [sth::emulation_igmp_config -handle [keylget l2tp_rL handles]\
 -mode create ...]
 To create an IGMP over PPPoE session:
 set pppox_rL [sth::pppox_config -mode create -port_handle port1 ... ]
 # Connect PPPoX
 sth::pppox_control -action connect -handle [keylget pppox_rL handles]
 #After all PPPoX sessions have finished connecting, create IGMP clients.
 set igmp_rL [sth::emulation_igmp_config -handle [keylget pppox_rL handles]\
 -mode create ...]
 To modify an IGMP over PPPoE session:
 Note: If you must modify the PPPoX configuration, modify
 "sth::emulation_igmp_config" using the handle returned from
 "sth::pppox_config -mode modify." Otherwise, the IGMP configuration
 cannot be updated for the modified PPPoX configuration.
IGMP Functions
357
 set pppox_rL [sth::pppox_config -handle host2 -mode modify... ]
 # Connect PPPoX
 sth::pppox_control -action connect -handle [keylget pppox_rL handles]
 # After all PPPoX sessions have finished connecting, update IGMP using the
 # handle from "sth::pppox_config -mode modify"
 set igmp_rL [sth::emulation_igmp_config -handle [keylget pppox_rL handles]\
 -mode modify ...]
 To create an IGMP over DHCP session:
 # Create DHCP port:
 set dhcpport_rL [sth::emulation_dhcp_config -mode create -port_handle
 port1 ...]
 keylget rL handles dhcpport1
 # Create the DHCP group
 set dhcpgrp_rL [sth::emulation_dhcp_group_config -handle $dhcpport1 \
 -mode create ...]
 keylget rL handles dhcpgrp1
 # Bind DHCP sessions
 sth::emulation_dhcp_control -handle $dhcpgrp1 -action bind
 # After all DHCP sessions have finished binding, create IGMP clients.
 set igmp_rL [sth::emulation_igmp_config -handle $dhcpgrp1 -mode create ...]
 To modify an IGMP over DHCP session:
 # Modify the DHCP group
 set dhcpgrp_rL [sth::emulation_dhcp_group_config -handle $dhcpgrp1 \
 -mode modify ...]
 # Bind DHCP sessions
 sth::emulation_dhcp_control -handle $dhcpgrp1 -action bind
 # After all DHCP sessions have finished binding, create IGMP clients.
 set igmp_rL [sth::emulation_igmp_config -handle $dhcpgrp1 -mode modify ...]
 IGMP Q-in-Q Examples
 The following example shows how to increment by 1 the inner VLAN ID
 five times (vlan_id_count == 5) before incrementing the outer VLAN ID.
 sth::emulation_igmp_config \
 -mode create \
 -port_handle $hostPortHandle \
 -count 23 \
 -qinq_incr_mode "outer" \
 -vlan_id 1111 \
 -vlan_id_count 5 \
 -vlan_id_mode "increment" \
 -vlan_id_step 1 \
 -vlan_user_priority 1 \
 -vlan_id_outer 2222 \
 -vlan_id_outer_count 5 \
 -vlan_id_outer_mode "increment" \
 -vlan_id_outer_step 1 \
 -vlan_outer_user_priority 5
 Output:
 Inner 1111 Outer 2222
 Inner 1111 Outer 2223
 Inner 1111 Outer 2224
 Inner 1111 Outer 2225
 Inner 1111 Outer 2226
 Inner 1112 Outer 2222
 Inner 1112 Outer 2223
 Inner 1112 Outer 2224
IGMP Functions
358
 Inner 1112 Outer 2225
 Inner 1112 Outer 2226
 Inner 1113 Outer 2222
 Inner 1113 Outer 2223
 Inner 1113 Outer 2224
 Inner 1113 Outer 2225
 Inner 1113 Outer 2226
 Inner 1114 Outer 2222
 Inner 1114 Outer 2223
 Inner 1114 Outer 2224
 Inner 1114 Outer 2225
 Inner 1114 Outer 2226
 Inner 1115 Outer 2222
 Inner 1115 Outer 2223
 Inner 1115 Outer 2224
 The following example shows how to increment by 1 the outer VLAN ID
 two times (vlan_id_outer_count == 2) before incrementing the inner VLAN ID.
 sth::emulation_igmp_config \
 -mode create \
 -port_handle $hostPortHandle \
 -count 17 \
 -qinq_incr_mode "inner" \
 -vlan_id 1111 \
 -vlan_id_count 3 \
 -vlan_id_mode "increment" \
 -vlan_id_step 1 \
 -vlan_user_priority 1 \
 -vlan_id_outer 2222 \
 -vlan_id_outer_count 2 \
 -vlan_id_outer_mode "increment" \
 -vlan_id_outer_step 1 \
 -vlan_outer_user_priority 5
 Output:
 Inner 1111 Outer 2222
 Inner 1112 Outer 2222
 Inner 1113 Outer 2222
 Inner 1111 Outer 2223
 Inner 1112 Outer 2223
 Inner 1113 Outer 2223
 Inner 1111 Outer 2222
 Inner 1112 Outer 2222
 Inner 1113 Outer 2222
 Inner 1111 Outer 2223
 Inner 1112 Outer 2223
 Inner 1113 Outer 2223
 Inner 1111 Outer 2222
 Inner 1112 Outer 2222
 Inner 1113 Outer 2222
 Inner 1111 Outer 2223
 Inner 1112 Outer 2223

 The following example increments by 1 both the inner and outer VLAN IDs at
 the same time.
 sth::emulation_igmp_config \
 -mode create \
 -port_handle $hostPortHandle \
 -count 21 \
 -qinq_incr_mode "both" \
 -vlan_id 1111 \
 -vlan_id_count 1 \
 -vlan_id_mode "increment" \
 -vlan_id_step 1 \
 -vlan_user_priority 1 \
 -vlan_id_outer 2222 \
 -vlan_id_outer_count 7 \
 -vlan_id_outer_mode "increment" \
IGMP Functions
359
 -vlan_id_outer_step 1 \
 -vlan_outer_user_priority 5
 Output:
 Inner 1111 Outer 2222
 Inner 1111 Outer 2223
 Inner 1111 Outer 2224
 Inner 1111 Outer 2225
 Inner 1111 Outer 2226
 Inner 1111 Outer 2227
 Inner 1111 Outer 2228
 Inner 1111 Outer 2222
 Inner 1111 Outer 2223
 Inner 1111 Outer 2224
 Inner 1111 Outer 2225
 Inner 1111 Outer 2226
 Inner 1111 Outer 2227
 Inner 1111 Outer 2228
 Inner 1111 Outer 2222
 Inner 1111 Outer 2223
 Inner 1111 Outer 2224
 Inner 1111 Outer 2225
 Inner 1111 Outer 2226
 Inner 1111 Outer 2227
 Inner 1111 Outer 2228
 #### HLTAPI for Python ####
 To create an IGMP session:

 device_ret0 = sth.emulation_igmp_config (
 mode = 'create',
 filter_mode = 'exclude',
 port_handle = port_handle[0],
 msg_interval = '0',
 igmp_version = 'v3',
 robustness = '2',
 older_version_timeout= '400',
 unsolicited_report_interval= '10',
 count = '1',
 source_mac = '00:10:94:00:00:01',
 source_mac_step = '00:00:00:00:00:01',
 neighbor_intf_ip_addr_step= '0.0.0.0',
 neighbor_intf_ip_addr= '192.85.1.1',
 intf_ip_addr = '192.85.1.3',
 intf_prefix_len = '24',
 intf_ip_addr_step = '0.0.0.1');

 Sample Output:
 {'status': '1', 'handles': 'igmphostconfig1', 'handle': 'host3'}

 #### HLTAPI for Perl ####
 To create an IGMP session:

 my %device_ret0 = sth::emulation_igmp_config (
 mode => 'create',
 filter_mode => 'exclude',
 port_handle => "$hport[1]",
 msg_interval => '0',
 igmp_version => 'v3',
 robustness => '2',
 older_version_timeout=> '400',
 unsolicited_report_interval=> '10',
 count => '1',
 source_mac => '00:10:94:00:00:01',
 source_mac_step => '00:00:00:00:00:01',
 neighbor_intf_ip_addr_step=> '0.0.0.0',
 neighbor_intf_ip_addr=> '192.85.1.1',
 intf_ip_addr => '192.85.1.3',
 intf_prefix_len => '24',
 intf_ip_addr_step => '0.0.0.1');
IGMP Functions
360

 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host3';
 $VAR3 = 'handles';
 $VAR4 = 'igmphostconfig1';
 $VAR5 = 'status';
 $VAR6 = '1';
Sample Input:
 See Examples.
Sample output:
 See Examples.
Notes:
 None.
End of Procedure Header
sth::emulation_igmp_control
Name:
 sth::emulation_igmp_control
Purpose:
 Start, stop, or restart the IGMP host on the
 specified port. Leaves and joins group pools.
Synopsis:
 sth::emulation_igmp_control
 -mode {restart|join|leave}
 [-port_handle <handle>]
 [-handle <IGMP_session_handle>]
 [-leave_join_delay <0-4294967295>]
 [-data_duration <0-4294967295>]
 [-calculate_latency {0|1}]
Arguments:
 -handle
 Identifies the groups to stop, start, restart, join, or
 leave. This value is returned by the
 sth::emulation_igmp_group_config function. If you do not
 specify a group, the specified action is applied to all
 groups configured on the port specified by -port_handle.
 This value appears in the keyed list returned by the
 sth::emulation_igmp_group_config function. This argument is
 mandatory when -port_handle is not used.
 -mode
 Specifies the action to perform on the specified handle. If
 you provide a handle (-handle), this argument performs the
 specified action on all groups on this session. If you do
 not provide a handle, this argument performs the specified
 action on all groups on all sessions. Possible values are
 restart, join, and leave. You must specify one of these
 values. The modes are described below:
 restart - Stops and then restarts the groups specified by
 -handle on the specified port. If you do not provide
 a handle, this action stops and restarts all groups
 on all ports.
 join - Joins all groups specified by -handle. If you
 do not provide a handle, this action joins all groups
IGMP Functions
361
 on all ports.
 leave - Leave all groups specified by -handle. If you
 do not provide a handle, this action leaves all groups
 on all ports.
 Note: You must send the "leave" actions before
 disconnecting PPPoX sessions. Otherwise, if you
 disconnect a PPPoX session before sending "leaves",
 HLTAPI will not automatically send the "leaves".
 -calculate_latency
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to calculate latencies when joining or
 leaving multicast groups. Possible values are 0 (do not
 calculate latency) and 1 (calculate latency). If set to 1
 during an IGMP Join, HLTAPI cannot capture the IGMP
 control plane packets because the analyzer stops to collect
 packets so it can calculate latency. The default is 0.
 Note: Background traffic analysis with IGMP is unavailable
 with calculate latency enabled. Also, if you are testing
 multiple joins and leaves with calculate latency enabled,
 you must add a delay (a few seconds) between subsequent
 joins and leaves (see example below):
 The following example does 100 iterations of join and leaves
 on 90 sessions. A 10-second delay is added after each join
 and each leave (using the Tcl command "after"). The delay
 duration to use depends on the number of iterations and
 number of sessions.
 for {set joinleaveidx 0} {$joinleaveidx < 100} \
 {incr joinleaveidx} {

 # IGMP join
 sth::emulation_igmp_control \
 -mode join \
 -calculate_latency 1 \
 -handle $IGMPSessionHandle
 # Adding a delay between join and leave.
 # This value is based on 90 sessions joining.
 # May need to be tweaked when scaling higher.
 after 10000

 # IGMP leave
 sth::emulation_igmp_control \
 -mode leave \
 -calculate_latency 1 \
 -handle $IGMPSessionHandle

 # Adding a delay between the last leave and
 # the next join when this loops.
 # This value is based on 90 sessions leaving.
 # May need to be tweaked when scaling higher.
 after 10000

 }
 -leave_join_delay
 Specifies the amount of time, in seconds, between joins and
 leaves. You can use this argument when -mode is join or
 leave. Possible values range from 0 to 4294967295. The default
 is 0. (This argument was formerly known as "-delay" in
 previous versions of the Spirent HLTAPI.)
 -data_duration
 Spirent Extension (for Spirent HLTAPI only).
IGMP Functions
362
 Specifies the amount of time, in seconds, to wait after
 sending joins or leaves before latencies are calculated. The
 default is 10.
 -port_handle
 Identifies the handle of the port on which to take the
 action. This is the port on which IGMP emulation
 has been configured. This value is returned by the
 sth::emulation_igmp_config function. This argument is
 mandatory when -handle is not used.
Cisco-specific Arguments:
 The -group_member_handle argument is specific to the Cisco HLTAPI but is
 not supported by Spirent HLTAPI.
 -group_member_handle
 -group_pool_handle
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_igmp_control function stops, starts, or restarts the
 IGMP protocol on the hosts on the specified port. You can also use this
 function to send a Join or Leave message from the host to inform a router
 that the host is either joining the multicast group specified by handle or
 port_handle or terminating its membership in the specified multicast group,
 When you call the sth::emulation_igmp_control function, you
 specify a port handle. Spirent HLTAPI applies the specified action to
 all of the emulated IGMP hosts associated with the specified port.
 IPv4 multicast traffic is based on group membership established and
 maintained with IGMP. Hosts and adjacent routers exchange IGMP messages
 to establish multicast group membership.
 When a host wants to participate in a multicast group, it sends an
 IGMP "join" message to its local router. After a router receives one or
 more "joins" for a specific group, it forwards any packets destined for
 that particular group to the appropriate interface(s). The router regularly
 verifies that the hosts want to continue to participate in the
 multicast groups by sending periodic "queries" to the receivers.
 When a host is no longer interested in multicast group participation, it
 sends a "leave" message to the router (IGMPv2 and IGMPv3 only).
Examples:
 #### HLTAPI for Tcl ####
 The following example joins all groups specified by -handle:
 sth::emulation_igmp_control
 -mode join
 -handle $IGMPSessionHandle
 The following example removes the groups specified by -handle
 from the hosts on the specified port:
 sth::emulation_igmp_control
 -mode leave
 -handle $IGMPSessionHandle
 Sample Output:
 {status 1} success or {status 0} fail
 #### HLTAPI for Python ####
 The following example joins all the specified groups:
IGMP Functions
363
 ctrl_ret1 = sth.emulation_igmp_control (
 port_handle = [port_handle[0],port_handle[1]],
 mode = 'join');
 Sample Output:
 {'status': '1'}

 #### HLTAPI for Perl ####
 The following example joins all the specified groups:
 my %ctrl_ret1 = sth::emulation_igmp_control (
 port_handle => "$hport[1] $hport[2] ",
 mode => 'join');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_igmp_group_config
Name:
 sth::emulation_igmp_group_config
Purpose:
 Creates group pools and source pools, and modifies and deletes group and
 source pools from IGMP hosts. This function configures multicast group
 ranges for an emulated IGMP host. You must use the common
 sth::multicast_group_config and sth::multicast_source_config functions with
 this function.
Synopsis:
 sth::emulation_igmp_group_config
 -mode {create|modify|delete|clear_all}
 [-handle <IGMP_group_membership_handle>]
 [-group_pool_handle <multicast_group_pool_handle>]
 [-session_handle <igmp_session_handle>]
 [-source_pool_handle <multicast_source_pool_handle>]
Arguments:
 -group_pool_handle
 Specifies the name of the group (that is, the list of
 multicast IP addresses) to link to the IGMP host during
 create mode. Before specifying the group pool handle, use
 the sth::emulation_multicast_group_config function to add
 the group pool. See "Multicast APIs" in the "Spirent
 TestCenter HLTAPI Command Reference" document for
 information about the sth::emulation_multicast_group_config
 and sth::emulation_multicast_source_config functions.
 -handle
 Sets group membership handle that associates group pools
 with an IGMP host. In modify mode, membership handle must be
 used in conjunction with the session handle to identify the
 multicast group pools.
 For "-mode create", the handle is returned by the
 sth::emulation_igmp_config function. Mode "modify" returns
 the same handle passed in.
IGMP Functions
364
 Note: The IGMP hosts, specified by -handle, join the
 multicast groups, specified by the -group_pool_handle. So,
 both arguments are mandatory for "-mode create", but
 -group_pool_handle is optional for "-mode modify".
 -mode
 Specifies the action to perform. Possible values are create,
 modify, delete, and clear_all. There is no default; you must
 specify a mode. The modes are described below:
 create - Starts emulation on the port specified with
 -handle and associates an existing multicast group
 pool (-group_pool_handle) with the specified IGMP host
 (that is, joins the membership).
 modify - Changes the configuration identified by the -handle
 argument by applying the parameters specified in
 subsequent arguments.
 delete - Remove one group of pools from this session.
 clear_all - Remove all group pools from this session.
 -session_handle
 Specifies the handle of the IGMP host on which to configure
 the IGMP group ranges.
 -source_pool_handle
 Specifies the name of the source pool (that is, the list of
 non-multicast source IP addresses) to associate with the
 groups during create mode. Each multicast group may contain
 0 or more of these source IP addresses. Use this argument if
 the host only wants specific information within the
 specified multicast group (-group_pool_handle). Specifying
 the source pool handle along with the group pool handle in
 the sth::emulation_igmp_group_config function adds the
 range of source IP addresses to each multicast group.
 Before specifying the source pool handle, use the
 sth::emulation_multicast_source_config function to add
 the source pools. See "Multicast APIs" in the "Spirent
 TestCenter HLTAPI Command Reference" document for
 information about the sth::emulation_multicast_source_config
 and sth::emulation_multicast_group_config functions.
 The following example adds two source pools:
 sth::emulation_multicast_source_config \
 -ip_addr_start 1.2.1.2 \
 -mode create \
 -num_sources 1
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle
 Identifies the handle of the group (IGMP_group_config_handle)
 created by the sth::emulation_igmp_group_config function.
 group_pool_handle
 Identifies the group pool handle used by the
 sth::emulation_igmp_group_config function to configure or modify
 the group member.
 source_pool_handle
 Identifies the source pool handle used by the
 sth::emulation_igmp_group_config function to configure or modify
 the group member.
IGMP Functions
365
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_igmp_group_config function configures or
 modifies a group of IGMP hosts where each group share a
 set of common characteristics. Use the -mode argument to specify
 the action to perform. (See the -mode argument description for information
 about the actions.)
 Before using this function, you must specify "-mode create" when
 configuring IGMP host emulation on a port and initialize the port handle
 argument (using the sth::emulation_igmp_config function).
 You can link groups of multicast IP addresses to any interested host or
 just a subset of IP addresses within each group.
 Each multicast IP address directs the information it represents to any host
 interested in subscribing to it. In the following example, the object
 represented by MGroupHandle contains 229.0.0.1 & 229.0.0.2. The host
 handle "hostHandle" has the IP address 3.0.0.1.
 sth::emulation_igmp_group_config \
 -mode create \
 -group_pool_handle $MGroupHandle \
 -session_handle $hostHandle
 The following illustration shows that host 3.0.0.1 subscribes to both
 multicast group 229.0.0.1 and 229.0.0.2.
 Host 3.0.0.1
 *
 *****************
 * *
 ************* *************
 * MGroup1 * * MGroup2 *
 * 229.0.0.1 * * 229.0.0.2 *
 ************* *************
 To subscribe to only one or more particular IP addresses that exist within
 a multicast group, you must use the -source_pool_handle as well. Specifying
 the source_pool_handle along with the group_pool_handle in the
 sth::emulation_igmp_group_config function, adds the range of source IP
 addresses to each multicast group. Adding the source_pool_handle
 SGroupHandle (which contains source IP addresses 1.1.1.1 and 1.1.1.2)
 option to the above example results in:
 sth::emulation_igmp_group_config \
 -mode create \
 -group_pool_handle $MGroupHandle \
 -session_handle $hostHandle \
 -source_pool_handle $SGroupHandle
 The following illustration shows that host 3.0.0.1 subscribes to source
 1.1.1.1 and 1.1.1.2 which exist in both multicast groups 229.0.0.1 and
 229.0.0.2.
 Host 3.0.0.1
 *
 *****************
 * *
 ************* *************
 * MGroup1 * * MGroup2 *
 * 229.0.0.1 * * 229.0.0.2 *
 ************* *************
 ************* *************
 * Source1 * * Source1 *
IGMP Functions
366
 * 1.1.1.1 * * 1.1.1.1 *
 * Source2 * * Source2 *
 * 1.1.1.2 * * 1.1.1.2 *
 ************* *************
Examples:
 #### HLTAPI for Tcl ####
 The following example configures the hosts, represented by "igmpSessionHandle",
 to subscribe to the multicast group(s) represented by
 "multicastGroupPoolHandle(1)":
 sth::emulation_igmp_group_config \
 -mode create \
 -group_pool_handle $multicastGroupPoolHandle(1) \
 -session_handle $igmpSessionHandle
 The following example causes all hosts on the port, represented by the port
 handle "portHandle", to send "leave" messages to the multicast groups to
 which they are currently subscribed. These multicast groups were set using
 the sth::emulation_igmp_group_config function:
 sth::emulation_igmp_group_config \
 -mode clear_all \
 -handle $IGMPgroupconfighandle
Sample output for example 1 shown above:
 {status 1} {handle igmpgroupmembership1}
 #### HLTAPI for Python ####
 Sample Input:
 device_ret0_group_config = sth.emulation_igmp_group_config (
 session_handle = igmp_session,
 mode = 'create',
 group_pool_handle = macstgroup,
 source_pool_handle = macstsource);

 Sample output: {'status': '1', 'handle': 'igmpgroupmembership1'}

 #### HLTAPI for Perl ####
 Sample Input:
 my %device_ret0_group_config = sth::emulation_igmp_group_config (
 session_handle => "$igmp_session",
 mode => 'create',
 group_pool_handle => "$macstgroup",
 source_pool_handle => "$macstsource");

 Sample output:
 $VAR1 = 'handle';
 $VAR2 = 'igmpgroupmembership1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_igmp_info
Name:
 sth::emulation_igmp_info
Purpose:
IGMP Functions
367
 Returns statistics about the IGMP group activity on the specified handle.
 Statistics include the connection status and number and type of messages
 sent and received from the specified port.
Synopsis:
 sth::emulation_igmp_info
 [-handle <igmp_session_handle>]
 [-port_handle <port_handle>]
 [-mode < stats|clear_stats>]
Arguments:
 -handle
 Specifies the IGMP session handle upon which host
 emulation is configured. This value is returned by the
 sth::emulation_igmp_config function.
 -port_handle
 Specifies the port handle on which the IGMP host is
 affiliated to IS-IS router. Either handle or
 port_handle should be provided.
 -mode
 Specifies the action to perform. Possible values are
 stats and clear_stats. The default value is stats.
 The modes are described below:
 stats - If handle is provided, it will return
 transmitted and received statistics of the
 specified IGMP host.
 If port_handle is provided, it will return
 transmitted and received statistics of the
 specified IGMP port.
 clear_stats - If handle is provided, it will clear
 all statistics (transmitted and received
 counters) of the specified port.
 If port_handle is provided, it will clear
 all statistics (transmitted and received
 counters) of the port to which the specified host
 is affiliated.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 The following IGMP host statistics are returned when you specify the -handle
 argument:
 invalid_pkts
 Number of invalid IGMP packets received. Invalid
 IGMP packets include:
 invalid IGMP checksum
 invalid packet length
 invalid IGMP types
 dropped_pkts
 Will always return 0 because Spirent HLTAPI currently
 does not drop valid IGMP packets.
 host_addr
 IP address of host whose group membership stats are being
 displayed.
 group_addr
 Group membership IP address of host whose group membership
 stats are being displayed.
IGMP Functions
368
 group_membership_stats
 List of group membership statistics.
 state
 State of group membership of host whose group membership
 stats are being displayed. Possible returned values
 are:
 UNDEFINED - The state is not defined.
 NON_MEMBER - The host does not belong to the group on the
 interface. Non-member is the initial state for all
 memberships on all network interfaces.
 DELAYING_MEMBER - The host belongs to the group on the
 interface and has a report delay timer running for that
 membership.
 IDLE_MEMBER - The host belongs to the group on the interface
 and does not have a report delay timer running for that
 membership.
 RETRYING_MEMBER - This state applies to IGMPv1/IGMPv2 hosts
 when ForceRobustJoin is True. The host is
 retransmitting its initial "join" before transitioning
 from the NON_MEMBER state to the DELAYING_MEMBER or
 IDLE_MEMBER state.
 INCLUDE - Data from the specified sources are filtered and
 forwarded to the host by the multicast router.
 EXCLUDE - Data from the specified sources are filtered and
 not forwarded to the host by the multicast router.
 join_latency
 The time, in milliseconds, between sending the IGMP join and
 receiving the multicast data for the channel specified in
 the join message. This value is valid only when
 "sth::emulation_igmp_control -calculate_latency" is set to
 1.
 leave_latency
 The time, in milliseconds, between sending the IGMP leave
 for a channel and when multicast data has stopped being
 received. This value is valid only when
 "sth::emulation_igmp_control -calculate_latency" is set to
 1.
 The following IGMP port statistics are returned when you specify the
 -port_handle argument:
 igmpv1_queries_rx Number of IGMPv1 membership query messages
 received.
 igmpv1_group_queries_rx Number of IGMPv1 group queries received.
 igmpv1_mem_reports_tx Number of IGMPv1 membership reports sent.
 igmpv1_mem_reports_rx Number of IGMPv1 membership reports received.
 igmpv2_queries_rx Number of IGMPv2 membership query messages
 received.
 igmpv2_group_queries_rx Number of IGMPv2 group queries received.
 igmpv2_mem_reports_tx Number of IGMPv2 membership reports sent.
 igmpv2_mem_reports_rx Number of IGMPv2 membership reports received
 igmpv2_leave_tx Number of leave group messages sent.
IGMP Functions
369
 igmpv3_queries_rx Number of IGMPv1 membership query messages
 received.
 igmpv3_group_queries_rx Number of IGMPv3 group queries received.
 igmpv3_group_src_queries_rx Number of group- and source-specific
 queries received.
 igmpv3_mem_reports_tx Number of IGMPv3 membership reports sent.
 igmpv3_mem_reports_rx Number of IGMPv3 membership reports received.
 The following session statistics are returned:
 session Session statistics for all multicast groups.
 session.<IGMP session handle>
 Displays all session statistics for the specified
 session handle.
 session.<IGMP session handle>.max_join_latency
 Maximum join latency for the specified session
 handle.
 session.<IGMP session handle>.min_join_latency
 Minimum join latency for the specified session
 handle.
 session.<IGMP session handle>.avg_join_latency
 Average join latency for the specified session
 handle.
 session.<IGMP session handle>.min_leave_latency
 Minimum leave latency for the specified session
 handle.
 session.<IGMP session handle>.max_leave_latency
 Maximum leave latency for the specified session
 handle.
 session.<IGMP session handle>.avg_leave_latency
 Average leave latency for the specified session
 handle.
 The following return values are not supported.
 For IGMP over PPPoX:
 grp.<mcast_addr>.join.min - Minimum join latency per group
 grp.<mcast_addr>.join.max - Maximum join latency per group
 grp.<mcast_addr>.join.avg - Average join latency per group
 grp.<mcast_addr>.leave.min - Minimum leave latency per group
 grp.<mcast_addr>.leave.max - Maximum leave latency per group
 grp.<mcast_addr>.leave.avg - Average leave latency per group
 grp.<mcast_addr>.leave_join.min - Minimum latency to leave a group and to
 join another group
 grp.<mcast_addr>.leave_join.max - Maximum latency to leave a group and to
 join another group
 grp.<mcast_addr>.leave_join.avg - Average latency to leave a group and to
 join another group
 aggregate.join.min - Minimum value across all groups
 aggregate.join.max - Maximum value across all groups
 aggregate.join.avg - Average value across all groups
 aggregate.leave.min
 aggregate.leave.max
 aggregate.leave.avg
 aggregate.leave_join.min
 aggregate.leave_join.max
Description:
IGMP Functions
370
 The sth::emulation_igmp_info function retrieves statistics about the number of
 invalid and dropped packets on the specified host as well as several port and
 session statistics.
Examples:
 #### HLTAPI for Tcl ####
 When you call sth::emulation_igmp_info, the contents of the returned keyed
 list depends on the status of the call. For example:
 sth::emulation_igmp_info -handle $handle1
 Returns a list that contains one of the following:
 a) If the call is successful, the list contains stats and
 command execution status (in this case, a 1 indicating success).
 b) If the call fails, the list contains error log and command
 execution status (in this case, a 0 indicating failure).
 Sample Output:
 {group_membership_stats {{{host_addr 44.1.0.2} {group_addr 239.0.0.1}
 {state IDLE_MEMBER} {join_latency 0.000000} {leave_latency 0.000000}}
 {{host_addr 44.1.0.2} {group_addr 239.0.0.2} {state IDLE_MEMBER}
 {join_latency 0.000000} {leave_latency 0.000000}} {{host_addr 44.1.0.2}
 {group_addr 239.0.0.3} {state IDLE_MEMBER} {join_latency 0.000000}
 {leave_latency 0.000000}} {{host_addr 44.1.0.2} {group_addr 239.0.0.4}
 {state DELAYING_MEMBER} {join_latency 0.000000}
 {leave_latency 0.000000}}}}
 If there is an error, you will see: {status 0} {log {Error message}}

 The following example returns the statistics for the specified port:
 sth::emulation_igmp_info -port_handle $tgen1_port
 Sample Output:
 {port_stats {{port1 {{- {{invalid_pkts 0} {dropped_pkts 0}}}
 {V1 {{igmpv1_mem_reports_rx 0} {igmpv1_mem_reports_tx 2}
 {igmpv1_queries_rx 0}}} {V3 {{igmpv3_mem_reports_rx 0}
 {igmpv3_mem_reports_tx 0} {igmpv3_group_queries_rx 0}
 {igmpv3_queries_rx 0} {igmpv3_group_src_queries_rx 0}}}
 {V2 {{igmpv2_queries_rx 0} {igmpv2_leave_tx 0}
 {igmpv2_mem_reports_rx 0} {igmpv2_mem_reports_tx 0}
 {igmpv2_group_queries_rx 0}}}}}}} {status 1}
 The following example clears all statistics on the specied IGMP session handle:
 sth::emulation_igmp_info -handle $igmpSession -mode clear_stats
Sample Output:
 {status 1}
 #### HLTAPI for Python ####
 The following example returns the statistics for the specified port:
 results_ret1 = sth.emulation_igmp_info (
 port_handle = port_handle[0],
 mode = 'stats');
 Sample Output:
 {'status': '1', 'port_stats': {'port1': {'V1': {'igmpv1_mem_reports_tx': '0',
 'igmpv1_mem_reports_rx': '0', 'igmpv1_queries_rx': '0'}, 'V2':
 {'igmpv2_leave_tx': '0', 'igmpv2_mem_reports_rx': '0', 'igmpv2_group_queries_rx':
 '0', 'igmpv2_queries_rx': '1', 'igmpv2_mem_reports_tx': '0'}, 'V3':
 {'igmpv3_queries_rx': '0', 'igmpv3_mem_reports_tx': '0',
 'igmpv3_group_queries_rx': '0', 'igmpv3_mem_reports_rx': '0',
 'igmpv3_group_src_queries_rx': '0'}, '-': {'dropped_pkts': '0', 'invalid_pkts':
IGMP Functions
371
 '0'}}}}
 #### HLTAPI for Perl ####
 The following example returns the statistics for the specified port:
 my %results_ret1 = sth::emulation_igmp_info (
 port_handle => "$hport[1]",
 mode => 'stats');

 Sample Output:
 $VAR1 = 'port_stats';
 $VAR2 = {
 'port1' => {
 '-' => {
 'dropped_pkts' => '0',
 'invalid_pkts' => '0'
 },
 'V3' => {
 'igmpv3_queries_rx' => '0',
 'igmpv3_group_queries_rx' => '0',
 'igmpv3_mem_reports_rx' => '0',
'igmpv3_group_src_queries_rx' => '0',
 'igmpv3_mem_reports_tx' => '2'
 },
 'V2' => {
 'igmpv2_group_queries_rx' => '0',
 'igmpv2_mem_reports_tx' => '0',
 'igmpv2_mem_reports_rx' => '1',
 'igmpv2_leave_tx' => '0',
 'igmpv2_queries_rx' => '0'
 },
 'V1' => {
 'igmpv1_queries_rx' => '0',
 'igmpv1_mem_reports_rx' => '0',
 'igmpv1_mem_reports_tx' => '0'
 }
 }
 };
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 If you configure over 1000 host-group pairs, the lower layer only returns
 avg/min/max latencies in the returned keyed list. If you configure 1000 or
 less host-group pairs, the returned keyed list contains individual
 latencies.
End of Procedure Header
IGMP Querier Functions
372
IGMP Querier Functions
Functions:
sth::emulation_igmp_querier_config
sth::emulation_igmp_querier_control
sth::emulation_igmp_querier_info
sth::emulation_igmp_querier_config
Name:
 sth::emulation_igmp_querier_config

Purpose:
 The emulation_igmp_querier_config command configures an IGMP router on the
 specified test port.
 Querier is a multicast router that maintains a list of multicast group
 memberships for each attached network. There is normally only one querier per
 physical network. The querier sends out Query messages to determine the multicast
 group memberships for hosts on the attached network.
 The Internet Group Management Protocol (IGMP) is a protocol that provides a way
 for a host computer to report its multicast group membership to adjacent routers.
 A multicast group is configured to receive voice, video, or data traffic sent
 from a multicast server. IGMP is a stateful protocol. The router sends periodic
 queries to the receivers to verify that the hosts want to continue to participate
 in the multicast groups. These queries are transmitted to a well-known multicast
 address (224.0.0.1) that is monitored by all systems. If the receivers are still
 interested in that particular multicast group, they respond with a Membership
 Report message. When the router stops seeing responses to queries, it deletes the
 appropriate group from its forwarding table. For more details on IGMP, please
 refer to the following RFCs:

 RFC 1112 Host Extensions for IP Multicasting
 RFC 2236 Internet Group Management Protocol, Version 2
 RFC 3376 Internet Group Management Protocol, Version 3
Synopsis:
 sth::emulation_igmp_querier_config
 -mode create {-port_handle <port_handle> | -handle <device_handle>} |
 -mode {modify | delete} -handle <igmp_host_handle>}
 [-count <1-65535>]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-intf_prefix_len <1-32>]
 [-source_mac <aa:bb:cc:dd:ee:ff>]
 [-source_mac_step <aa:bb:cc:dd:ee:ff>]
 [-neighbor_intf_ip_addr <a.b.c.d>]
 [-neighbor_intf_ip_addr_step <a.b.c.d>]
 [-igmp_version {v1 | v2 | v3}]
 [-ignore_v1_reports {true | false}]
 [-ipv4_dont_fragment {true | false}]
 [-ipv4_tos <0-255>]
 [-last_member_query_count <0-255>]
 [-last_member_query_interval <0-4294967295>]
 [-qinq_incr_mode {inner | outer | both}]
 [-query_interval <0-4294967295>]
 [-query_response_interval <0-4294967295>]
 [-robustness_variable <2-255>]
 [-startup_query_count <2-255>]
 [-tos_type {tos | diffserv}]
 [-use_partial_block_state {true | false}]
 [-vlan_cfi {0 1}]
 [-vlan_id <0-4095>]
IGMP Querier Functions
373
 [-vlan_id_mode {fixed | increment}]
 [-vlan_id_step <0-32767>]
 [-vlan_id_count <1-4095>]
 [-vlan_user_priority <0-7>]
 [-vlan_outer_cfi {0 1}]
 [-vlan_id_outer <0-4095>]
 [-vlan_id_outer_mode {fixed | increment}]
 [-vlan_id_outer_step <0-32767>]
 [-vlan_id_outer_count <1-4095>]
 [-vlan_outer_user_priority <0-7>]
Arguments:
 -mode
 Specifies the action to perform. Possible values are create,
 modify, and delete. This argument is mandatory. The modes are
 described below:

 create - Starts emulating IGMP routers on the specified port
 or handle.

 modify - Changes the configuration parameters for the IGMP
 router identified by the -handle argument.

 delete - Clears all IGMP group sessions information on the
 port and restarts the connection.
 -port_handle
 The handle of the port on which to create the emulated IGMP
 session. When -mode is set to create, it is mandatory that
 you specify -port_handle or -handle, but not both.
 -handle
 The handle of the IGMP host configured on the port to
 use. You must specify -handle when -mode is set to modify
 or delete. When you use -mode create, it is mandatory that
 you specify -port_handle or -handle, but not both. If you define
 -handle and -mode create, Spirent HLTAPI creates an IGMP
 device on the given device.
 -count
 Defines the number of IGMP routers to create on the interface.
 Applicable only in mode create. Possible values range from 1 to
 65535. The default value is 1
 -intf_ip_addr
 Specifies the starting IPv4 address of the emulated devices.
 The default value is 0.0.0.0.

 -intf_ip_addr_step
 Specifies the difference between interface IP addresses of
 consecutive routers when multiple IGMP hosts are created.
 Applicable only in mode create. The value must be in IPv4 format.
 The default value is 0.0.0.1.

 -intf_prefix_len
 Specifies the address prefix length on the emulated host.
 Possible values range from 1 to 32. The default value is 24.
 -source_mac
 Defines the first MAC address to use when emulating IGMP routers.
 Each client must have a unique source MAC address. The value must
 be in MAC format. The default value is 00:10:94:00:00:02
 -source_mac_step
 Specifies the increment by which to generate additional MAC
 addresses for IGMP routers. Applicable only in mode create. The
 default value is 00:00:00:00:00:01
 -neighbor_intf_ip_addr
 Specifies the IP address of the interface for the IGMP
IGMP Querier Functions
374
 neighbor (next hop) that will establish an adjacency with
 the DUT. The value must be in IPv4 format. The default value is
 192.85.1.1
 -neighbor_intf_ip_addr_step
 Specifies the difference between the IP
 addresses of IGMP neighbor's interfaces when creating multiple
 IGMP routers. Applicable only in create mode.
 The value must be in IPv4 format. The default value is 0.0.0.0.
 -igmp_version
 Specifies the version of IGMP to use for the querier. Possible
 values are:

 v1 - The second version of IGMP (supercedes IGMPv0),
 specified in RFC 1112.

 v2 - IGMP version specified in RFC 2236. Improved IGMP
 version that adds "leave" messages, shortening the
 amount of time mandatory for a router to determine
 that no stations are in a particular group. This
 version includes the ability for the receivers to
 gracefully exit from a multicast group.

 v3 - Specified in RFC 3376, this major revision of the
 IGMP protocol adds the ability to specify the
 source(s) to which a receiver is willing to
 listen. Sources can be stipulated with "include"
 filters in the "join" and "report" messages, or
 sources can be specifically rejected with
 "exclude" filters.
 The default value is v2.
 -ignore_v1_reports
 Specifies whether to ignore IGMPv1 messages on the interface.
 This argument is only valid for IGMPv2. Possible values are true
 and false. The default value is false.
 -ipv4_dont_fragment
 Determines whether to use fragment the IP packets larger than the
 MTU (Maximum Transmission Unit) size. Possible values are true
 and false. The default value is false.
 -ipv4_tos
 Specifies the value of the TOS field in the IPv4 header. Possible
 values range from 0 to 255. The default value is 192.
 -last_member_query_count
 Value for the Max Response Time field (in milliseconds) that is
 inserted in to Group-Specific and Group-and-Source-Specific Query
 messages in response to Leave Group messages. Possible values
 range from 0 to 255. The default value is 2. Note that this
 argument does not work for IGMPv1.
 -last_member_query_interval
 Maximum amount of time between group-specific query messages,
 including those sent in response to leave-group messages.
 Possible values range from 0 to 4294967295. The default value is
 1000. Note that this argument does not work for IGMPv1.
 -query_interval
 Specifies the duration (in seconds) between transmissions of
 General Query messages. General Query messages are used to learn
 which multicast groups have members on a connected network.
 Possible values range from 0 to 4294967295. The default value is
 125.
 -query_response_interval
 Specifies the value for the Max Response Time field (in
 milliseconds), which is inserted into the General Query messages.
IGMP Querier Functions
375
 This time is the maximum amount allowed for a host to send a
 responding report to the General Query message. The interval must
 be less than the Query Interval. This argument does not apply to
 IGMPv1. Possible values range from 0 to 4294967295. The default
 value is 10000.
 -qinq_incr_mode
 Determines which VLAN ID to increment first. Possible values
 are:
 inner - Increments the inner VLAN ID before the outer VLAN ID

 outer - Increments the outer VLAN ID before the inner VLAN ID

 both - Increment both the inner and outer VLAN ID at the
 same time.

 The default value is both. Applicable only in mode create.
 -robustness_variable
 Specifies the variable used in the calculation of default values
 for various timers and counters. Possible values range from 2 to
 255. The default value is 2. Note that this argument does not
 work for IGMPv1.
 -startup_query_count
 Number of queries sent out on startup, separated by the Startup
 Query Interval. Possible values range from 2 to 255. The default
 value is 2.
 -tos_type
 Specifies the formatting of the TOS value. Possible values are:

 tos - Type of Service

 diffserv - Differentiated services
 The default value is tos.
 -use_partial_block_state
 Determines whether to use partial block state. Possible values
 are true and false. The default value is false.
 -vlan_cfi
 Sets the Canonical Format Indicator (CFI) field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). If it is set to 0, it indicates Token Ring and
 packets are dropped by Ethernet ports. If set to 0, it indicates
 the network is Ethernet. The default value is 0.
 -vlan_id
 Defines the VLAN ID of the first VLAN sub-interface.
 Possible values range from 0 to 4095.
 The default value is 100.
 -vlan_id_mode
 Specifies the VLAN generating method when you configure more than
 one interface on Spirent HLTAPI with VLAN. You can choose to
 either automatically increment the VLAN tag (mode increment) or
 leave it idle for each interface (mode fixed), in which case the
 VLAN ID is the same for all packets. If you set this argument to
 increment, you can specify the -vlan_id_step argument to
 indicate the step size. The default value is fixed. Applicable
 only in mode create.
 -vlan_id_step
 Defines the step size by which the VLAN value is incremented when
 you set -vlan_id_mode to increment. Possible values range from 0
 to 32767. The default value is 1. Applicable only in create mode.
 -vlan_id_count
 Spirent Extension (for Spirent HLTAPI only). 
IGMP Querier Functions
376
 Specifies the number of VLAN IDs to use when generating IGMP
 sessions. Possible values range from 1 to 4096. The default value
 is 1. Applicable only in mode create.
 -vlan_user_priority
 Defines the VLAN priority for the VLANs on this port.
 Possible values range from 0 to 7. The default value is 7.
 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to set the CFI value for the VLAN outer
 header. Possible values are 0 and 1. If you set it to 1, a CFI
 value will be automatically assigned. The default value is 0.
 -vlan_id_outer
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN ID for a particular outer header. Possible
 values range from 0 to 4095. The default value is 100.
 -vlan_id_outer_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign VLAN tags to
 packets in the specified outer header. Possible values are:

 fixed - The outer VLAN ID is the same for all packets

 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_id_outer_step argument.

 The default value is fixed. Applicable only in mode create.
 -vlan_id_outer_step
 The amount by which to increment the specified outer VLAN ID
 (-vlan_id_outer) for subsequent packets. Possible values range
 from 0 to 32767. The default value is 1. Applicable only in
 mode create.
 -vlan_id_outer_count
 Spirent Extension (for Spirent HLTAPI only).
 The number of outer VLAN IDs to use when generating IGMP routers.
 Possible values range from 1 to 4096. The default value is 1.
 Applicable only in create mode.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer VLAN header.
 Possible values range from 0 to 7. The default value is 7.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -qinq_incr_mode
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 -handle The IGMP router handle

 status Success (1) or failure (0) of the operation.

 log An error message (if the operation failed).

Description
 The sth::emulation_igmp_querier_config function creates, modifies, or deletes
 IGMP routers for the specified Spirent HLTAPI port or handle. Use the -mode
IGMP Querier Functions
377
 argument to specify the action to perform. (See the -mode argument description
 for information about the actions.)

 When you create an IGMP router, use the -port_handle argument to specify the
 Spirent HLTAPI port that the emulated IGMP router will use for IGMP
 communication. (The port handle value is contained in thekeyed list returned by
 the sth::connect function.)

 Spirent HLTAPI supports the use of IGMPv1, V2 and V3. For details of the IGMP
 protocal, see RFC 1112, RFC 2236 and RFC 3376.
Examples:
 #### HLTAPI for Tcl ####
 # The following example creates and configures an IGMP router
 set returnedString [sth::emulation_igmp_querier_config \
 -mode "create" \
 -port_handle $hltPort \
 -count 1 \
 -igmp_version v2 \
 -intf_ip_addr 1.1.1.40 \
 -intf_ip_addr_step "0.0.0.1" \
 -neighbor_intf_ip_addr 1.1.1.10 \
 -neighbor_intf_ip_addr_step "0.0.0.1" \
 -vlan_id 111\
 -vlan_id_count 3 \
 -vlan_id_step 2\
 -vlan_id_mode increment\
 -vlan_id_outer 101\
 -vlan_id_outer_count 5 \
 -vlan_id_outer_step 2\
 -vlan_id_outer_mode increment\
 -ignore_v1_reports true\
 -last_member_query_count 10\
 -query_interval 5]

 # The following example modifies the created IGMP router:
 set returnedString [sth::emulation_igmp_querier_config \
 -mode "modify" \
 -handle $igmpQuerierRouter\
 -vlan_id 222 \
 -vlan_id_outer 333\
 -ignore_v1_reports true\
 -last_member_query_count 10\
 -query_interval 5]

 # The following example deletes emulated IGMP routers
 set returnedString [sth::emulation_igmp_querier_config \
 -mode delete\
 -handle $igmpQuerierRouterList]
 Sample Output: {handle {router1}} {status 1}
 #### HLTAPI for Python ####
 The following example creates and configures an IGMP router
 device_ret0 = sth.emulation_igmp_querier_config (
 mode = 'create',
 port_handle = port_handle[0],
 ipv4_tos = '192',
 query_interval = '125',
 ipv4_dont_fragment = 'false',
 igmp_version = 'v2',
 last_member_query_interval= '1000',
 robustness_variable = '2',
 startup_query_count = '2',
 query_response_interval= '10000',
 last_member_query_count= '2',
 ignore_v1_reports = 'false',
 use_partial_block_state= 'false',
IGMP Querier Functions
378
 source_mac = '00:10:94:00:00:01',
 neighbor_intf_ip_addr= '192.85.1.1',
 intf_ip_addr = '192.85.1.3',
 intf_prefix_len = '24',
 tos_type = 'tos');

 Sample Output: {'status': '1', 'handle': 'router1'}

 #### HLTAPI for Perl ####
 The following example creates and configures an IGMP router:
 my %device_ret0 = sth::emulation_igmp_querier_config (
 mode => 'create',
 port_handle => "$hport[1]",
 ipv4_tos => '192',
 query_interval => '125',
 ipv4_dont_fragment => 'false',
 igmp_version => 'v2',
 last_member_query_interval=> '1000',
 robustness_variable => '2',
 startup_query_count => '2',
 query_response_interval=> '10000',
 last_member_query_count=> '2',
 ignore_v1_reports => 'false',
 use_partial_block_state=> 'false',
 source_mac => '00:10:94:00:00:01',
 neighbor_intf_ip_addr=> '192.85.1.1',
 intf_ip_addr => '192.85.1.3',
 intf_prefix_len => '24',
 tos_type => 'tos');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'status';
 $VAR4 = '1';

End of Procedure Header
sth::emulation_igmp_querier_control
Name:
 sth::emulation_igmp_querier_control

Purpose:
 Starts or stops sending Query messages from the selected queriers to attached
 hosts on the specified port.

Synopsis:
 sth::emulation_igmp_querier_control
 -mode {start | stop}
 [-port_handle <port_handle>]
 [-handle <handle>]
Arguments:
 -mode
 Specifies the action to perform on the specified handle. If you
 provide a handle (-handle), this argument performs the specified
 action on all groups on this session. If you do not provide a
 handle, this argument performs the specified action on all groups
 on all sessions. Possible values are start and stop.

 start - Starts sending Query message from the selected queriers
 to attached hosts..
 
IGMP Querier Functions
379
 stop - Stops sending Query message from the selected queriers to
 attached hosts. The queriers also stop responding to Report
 and Leave messages from attached hosts.

 This argument is mandatory.
 -port_handle
 Identifies the handle of the port on which to take the
 action. This is the port on which IGMP emulation
 has been configured. This value is returned by the
 sth::emulation_igmp_querier_config function. This argument is
 mandatory when -handle is not used.
 -handle
 Specifies the device handle on which to perform the action. You
 must specify -port_handle or handle, but not both.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_igmp_querier_control function starts or stops sending Query
 message from the selected queriers to attached hosts on the specified port.

 When you call sth::emulation_igmp_querier_control, you must specify either a port
 handle or a device handle, on which Spirent HLTAPI applies the specified action.

Examples:
 #### HLTAPI for Tcl ####
 The following example starts the IGMP Queriers on port $portHandle:
 set returnedString [ sth:: emulation_igmp_querier_control \
 -port_handle $portHandle \
 -action start]
 The following example stops the IGMP Queriers just started
 set returnedString [ sth:: emulation_igmp_querier_control \
 -port_handle $portHandle \
 -action stop]

 Sample Output: {status 1}
 #### HLTAPI for Python ####
 The following example starts the specified IGMP Queriers on the specified ports:
 ctrl_ret1 = sth.emulation_igmp_querier_control (
 port_handle = [port_handle[0],port_handle[1]],
 mode = 'start');

 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 The following example starts the specified IGMP Queriers on the specified ports:
 my %ctrl_ret1 = sth::emulation_igmp_querier_control (
 port_handle => "$hport[1] $hport[2] ",
 mode => 'start');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';

End of Procedure Header
IGMP Querier Functions
380
sth::emulation_igmp_querier_info
Name:
 sth::emulation_igmp_querier_info
Purpose:
 Retrieves statistics for the IGMP Routers configured on the specified test ports.

Synopsis:
 sth::emulation_igmp_querier_info
 [-port_handle <port_handle>]
 [-handle <handle>]
Arguments:
 -port_handle
 Specifies the port on which to retrieve statistics.
 -handle
 Specifies the handle of the device on which to retrieve
 statistics.
 Note: Both handle and port_handle are optional, but at least one should be
 specified. If both are specified, then handle is prioritized.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).


 host_state
 State of the IGMP/MLD host block[JOINING, LEAVING, MEMBER,
 NON_MEMBER, UNDEFINED]

 if_handle
 IL interface handle

 mcast_compatiblity_mode
 IGMP version the router block is currently operating as.[V1, V2, V3]

 router_state
 State of the IGMP/MLD querier block.[NOT_STARTED, UNDEFINED, UP]

 frame_count_rx
 Total number of IGMP frames received
 igmp_check_sum_error_count_rx
 Total number of IGMP messages received with checksum errors

 igmp_length_error_count_rx
 Total number of IGMP messages received with length errors

 unknown_type_count_rx
 Total number of frames of unknown type received
 time_stamp
 Timestamp, in seconds, of last statistic update
 frame_count_tx
 Total number of IGMP frames transmitted
Description:
 The sth::emulation_igmp_querier_info function returns statistics of the IGMP
 router on the specified port. Statistics include the router status and number and
 type of messages sent and received from the specified port.
 
IGMP Querier Functions
381
Example:
 #### HLTAPI for Tcl ####
 The following example retrieves statistics on port $portHandle:
 set returnedString [ sth:: emulation_igmp_querier_info \
 -port_handle $portHandle]
Sample Output:
 {status 1} {results {{router1 {{igmp_check_sum_error_count_rx 0}
 {unknown_type_count_rx 0} {mcast_compatiblity_mode V2}
 {igmp_length_error_count_rx 0} {router_state NOT_STARTED} {if_handle 0}
 {time_stamp 0} {frame_count_rx 0} {host_state NON_MEMBER} {frame_count_tx 0}}}}}
 #### HLTAPI for Python ####
 The following example retrieves statistics on the specified ports:
 results_ret1 = sth.emulation_igmp_querier_info (
 port_handle = [port_handle[0],port_handle[1]]);

 Sample Output:
 {'status': '1', 'results': {'router1': {'igmp_length_error_count_rx': '0',
 'frame_count_rx': '0', 'igmp_check_sum_error_count_rx': '0', 'host_state':
 'UNDEFINED', 'if_handle': '7', 'unknown_type_count_rx': '0', 'router_state': 'UP',
 'mcast_compatiblity_mode': 'V2', 'frame_count_tx': '1', 'time_stamp': '0'}}}
 #### HLTAPI for Perl ####
 The following example retrieves statistics on the specified ports:
 my %results_ret1 = sth::emulation_igmp_querier_info (
 port_handle => "$hport[1] $hport[2] ");
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'results';
 $VAR4 = {
 'router1' => {
 'time_stamp' => '0',
 'igmp_length_error_count_rx' => '0',
 'if_handle' => '2',
 'router_state' => 'UP',
 'frame_count_rx' => '1',
 'frame_count_tx' => '1',
 'mcast_compatiblity_mode' => 'V2',
 'host_state' => 'UNDEFINED',
 'igmp_check_sum_error_count_rx' => '0',
 'unknown_type_count_rx' => '0'
 },
 'router2' => {
 'time_stamp' => '0',
 'igmp_length_error_count_rx' => '0',
 'if_handle' => '7',
 'router_state' => 'UP',
 'frame_count_rx' => '3',
 'frame_count_tx' => '1
 ',
 'mcast_compatiblity_mode' => 'V2',
 'host_state' => 'UNDEFINED',
 'igmp_check_sum_error_count_rx' => '0',
 'unknown_type_count_rx' => '0'
 }
 };

End of Procedure Header
IPv6 Autoconfiguration Functions
382
IPv6 Autoconfiguration Functions
Functions:
sth::emulation_ipv6_autoconfig
sth::emulation_ipv6_autoconfig_control
sth::emulation_ipv6_autoconfig_stats
sth::emulation_ipv6_autoconfig
Name:
 sth::emulation_ipv6_autoconfig

Purpose:
 The emulation_ipv6_autoconfig function creates, modifies, or resets IPv6 auto
 configuration hosts for the specified Spirent HLTAPI port or handle.

 The IPv6 autoconfiguration process includes creating a link-local address and
 verifying its uniqueness on a link, determining what information should be
 autoconfigured (addresses, other information, or both), and in the case of
 addresses, whether they should be obtained through the stateless mechanism, the
 stateful mechanism, or both. Spirent HLTAPI currently only supports stateless
 autoconfiguration .

 The stateless approach is used when a site is not concerned with the exact
 addresses hosts use, as long as they are unique and properly routable. During
 the process, IPv6-capable hosts rely on Router Advertisement (RA) messages
 to obtain the information needed for autoconfiguration. To acquire an IPv6
 address, a host will follow three steps:

 Discover a prefix used on the link: The host can listen to periodic RAs sent
 by routers on the link or it can poll for routers with the help of Router
 Solicitation messages. The prefix information is extracted from the RA
 messages.

 Generate an interface ID. To have a complete IPv6 address, the host must add
 an interface identifier to a prefix learned from the routers on the link.

 Verify the uniqueness of the generated IPv6 address using the Duplicate
 Address Detection (DAD) mechanism.

 For more information about stateless autoconfiguration, please refer to RFC 2462.
Synopsis:
 sth::emulation_ipv6_autoconfig
 -mode create -port_handle <port_handle>
 -mode {modify | reset} -handle <handle>
 [-ip_version {6 | 4_6}]
 [-ipv6_enable_gateway_learning {true | false}]
 [-encap {ethernet_ii | ethernet_vlan}]
 [-count <1-65536>]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-local_ip_addr <a.b.c.d>]
 [-local_ip_addr_step <a.b.c.d>]
 [-local_ip_prefix_len <0-32>]
 [-gateway_ip_addr <a.b.c.d>]
 [-gateway_ip_addr_step <a.b.c.d>]
 [-link_local_ipv6_prefix_len <0-128>]
 [-link_local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-link_local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_prefix_len <0-128>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
IPv6 Autoconfiguration Functions
383
 [-gateway_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-dad_enable {true | false }]
 [-dad_transmit_count <1-255>]
 [-dad_retransmit_delay <1000-4294967295>]
 [-router_solicit_retransmit_delay <1000-4294967295>]
 [-router_solicit_retry <0-4294967295>]
 [-vlan_id <0-4095>]
 [-vlan_id_mode {fixed | increment}]
 [-vlan_id_step <0-4094>]
 [-vlan_id_repeat_count <0-4294967295>]
 [-vlan_id_recycle_count <0-4294967295>]
 [-vlan_cfi {0 | 1}]
 [-vlan_priority <0-7>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_mode {fixed | increment}]
 [-vlan_outer_priority <0-7>]
 [-vlan_id_outer_count <1-4096>]
 [-vlan_id_outer_step <0-4094>]
 [-vlan_outer_id_repeat_count <0-4294967295>]
 [-vlan_outer_id_recycle_count <0-4294967295>]
 [-vlan_outer_cfi {0 | 1}]

Arguments:
 -handle
 Defines an IPv6 autoconfiguration handle to be returned from this
 procedure. This argument is mandatory for modes modify and reset.

 -port_handle
 Specifies the port on which to create the IPv6 autoconfiguration
 emulation. This argument is mandatory for mode create.

 -mode
 Specifies the action to be taken. Possible values are create,
 modify and reset. This argument is mandatory. Possible values
 are described below:

 create - Starts emulating IPv6 autoconfiguration on the specified
 port.

 modify - Changes the configuration for the emulated IPv6
 autoconfiguration hosts identified by the -handle
 argument. You must specify the -handle argument.

 reset - Deletes the emulated IPv6 autoconfiguration hosts. You
 must specify the -handle argument.

 -ip_version
 Defines the IP version to be used. Possible values are 6 for
 IPv6 and 4_6 for dual stack. The default is 6.

 -ipv6_enable_gateway_learning
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables IPv6 learning for gateway IP addresses and MAC
 addresses. Possible values are true (enable) and false (disable).
 The default value is false.

 -encap
 Specifies the type of Layer 2 encapsulation. Possible values are
 described below:

 ethernet_ii - Ethernet II

 ethernet_vlan - Ethernet II with a single VLAN tag

 ethernet_ii_qinq - Ethernet II with two VLAN tags. This option
 supports Ethernet encapsulation.

 The default value is ethernet_ii.

 -count
 Specifies the number of devices to emulate. Possible values
IPv6 Autoconfiguration Functions
384
 range from 1 to 65536. The default value is 1.

 -mac_addr
 Specifies the first MAC address to use when emulating IPv6 auto
 configuration clients. Each client must have a unique source MAC
 address. The value must be in MAC format. The default value is
 00:10:94:00:00:01.

 -mac_addr_step
 Specifies the increment used to generate additional MAC
 addresses for IPv6 autoconfiguration hosts. The default value is
 00:00:00:00:00:01.

 -local_ip_addr
 Specifies the starting IPv4 address of the emulated devices. The
 value must be in IPv4 format. The default value is 192.85.1.3.
 This argument is only available when -ip_version set to 4_6.

 -local_ip_addr_step
 Specifies the increment used to generate IPv4 addresses for
 multiple devices. The value must be in IPv4 format. The default
 value is 0.0.0.1. This argument is only available when
 -ip_version set to 4_6.

 -local_ip_prefix_len
 Specifies the IPv4 address prefix length. Possible values range
 from 0 to 32. The default value is 24. This argument is only
 available when -ip_version set to 4_6.

 -gateway_ip_addr
 Specifies the first IPv4 gateway address for the emulated
 devices. The value must be in IPv4 format. The default value is
 192.85.1.1. This argument is only available when -ip_version set
 to 4_6.

 -gateway_ip_addr_step
 Specifies the increment used to generate IPv4 gateway addresses
 for multiple devices. The value must be in IPv4 format. The
 default value is 0.0.0.0. This argument is only available when
 -ip_version set to 4_6.
 -link_local_ipv6_addr
 Specifies the starting link local IPv6 address for emulated
 devices. The value must be in IPv6 format. The default is
 FE80::1.

 -link_local_ipv6_addr_step
 Specifies the difference between link local IPv6 addresses of
 consecutive devices when multiple emulated devices are created.
 The value must be in IPv6 format. The default is ::1.
 -link_local_ipv6_prefix_len
 Specifies the prefix length for the link local IPv6 address of
 the emulated device. Possible values range from 0 to 128. The
 default is 64.
 -local_ipv6_addr
 Specifies the starting address of the emulated IPv6 devices.
 The value must be in IPv6 format. The default value is 2001::2.

 -local_ipv6_addr_step
 Specifies the increment used to generate IPv6 gateway addresses
 for multiple devices. The value must be in IPv6 format. The
 default value is 0::1.

 -local_ipv6_prefix_len
 Specifies the IPv6 address prefix length. Possible values range
 from 0 to 128. The default value is 64.

 -gateway_ipv6_addr
 Configures the first IPv6 gateway address for the emulated IPv6
IPv6 Autoconfiguration Functions
385
 devices. The value must be in IPv6 format. The default value is
 ::0.

 -gateway_ipv6_addr_step
 Defines the increment used to generate IPv6 gateway addresses
 for multiple devices. The value must be in IPv6 format. The
 default value is ::.

 -dad_enable
 Enables or disables detection of duplicate addresses. Possible
 values are true (enable) and false (disable). The default value
 is false.
 -dad_transmit_count
 Specifies the number of consecutive neighbor solicitation
 messages sent while performing duplicate address detection on a
 tentative address. Possible values range from 1 to 255. The
 default value is 1. This argument is available when -dad_enable
 is set to true.

 -dad_retransmit_delay
 Specifies the delay, in msec, between consecutive neighbor
 solicitation transmissions performed during duplicate address
 detection. Possible values range from 1000 to 4294967295. The
 default value is 1. This argument is available when -dad_enable
 is set to true.

 -router_solicit_retransmit_delay
 Specifies the delay, in msec, between router solicitation
 messages. Possible values range from 1000 to 4294967295. The
 default value is 3000.

 -router_solicit_retry
 Specifies the number of times to resend router solicitation
 messages to the all-routers multicast group. If no valid router
 advertisement is received within this period, the device returns
 to the IDLE state and is considered an RA timeout failure.
 Possible values range from 0 to 4294967295. The default value is 2.

 -vlan_id
 The VLAN ID of the first VLAN sub-interface. Possible values
 range from 0 to 4095. The default value is 1.

 -vlan_id_mode
 Specifies the VLAN ID assignment mode for configurations of
 multiple devices when -count is greater than 1. Possible values
 are described below:

 fixed - The VLAN ID (the value of the -vlan_id argument)
 is the same for all of the devices.

 increment - Spirent HLTAPI assigns unique VLAN IDs.
 When you use this mode, you must also specify
 -vlan_id_step to define the increment value.

 -vlan_id_step
 The value that Spirent HLTAPI uses to increment the VLAN ID.
 Possible values range from 0 to 4094. The default value is 1.
 -vlan_id_repeat_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of times to repeat the same IPv4 address before
 incrementing it for the inner VLAN. The value must be an integer.
 The default value is 0.
 -vlan_id_recycle_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of times to increment the IPv4 address before returning to
 the starting value. The value must be an integer. The default
 value is 0.
 
IPv6 Autoconfiguration Functions
386
 -vlan_cfi
 Sets the Canonical Format Indicator (CFI) field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 1. If set to 0, it indicates
 the network is Ethernet. If set to 1, it indicates the network is
 Token Ring and packets are dropped by Ethernet ports.

 -vlan_priority
 VLAN priority for the VLANs on this port. Possible values
 range from 0 to 7. The default value is 0.
 -vlan_outer_id
 Specifies the starting outer VLAN ID for the QinQ encapsulation.
 Possible values range from 0 to 4095. The default value is 100.
 This argument is available when -encapsulation is set to
 ethernet_ii_qinq.
 -vlan_id_outer_step
 Specifies the step value to increment the outer VLAN IDs.
 Possible values range from 0 to 4095. The default value is 1.
 This argument is available when -encapsulation is set to
 ethernet_ii_qinq.
 -vlan_id_outer_count
 Defines the number of outer VLAN IDs to use when creating
 IPv6 autoconfiguration devices. VLAN membership is assigned in
 round-robin fashion. The number of sessions must be divided
 evenly into the outer VLAN count. Possible values range from 1 to
 4096. The default value is 1. This argument is available when
 -encapsulation is set to ethernet_ii_qinq.

 -vlan_outer_id_repeat_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of times to repeat the same IPv4 address before
 incrementing it for the outer VLAN. The value must be an integer.
 The default value is 0.
 -vlan_outer_id_recycle_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of times to increment the IPv4 address before returning to
 the starting value. The value must be an integer. The default
 value is 0.

 -vlan_outer_cfi
 Specifies the Canonical Format Indicator (CFI) value for the VLAN
 outer header. Possible values are 0 and 1. The default value is
 0. This argument is available when -encapsulation is set to
 ethernet_ii_qinq.
 -vlan_outer_user_priority
 Specifies the VLAN priority to assign to the outer VLAN header.
 Possible values range from 0 to 7. The default value is 0. This
 argument is available when -encapsulation is set to
 ethernet_ii_qinq.
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI assigns VLAN tags to packets in
 the specified outer header when router count is greater than 1.
 Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.

 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.

 This argument is available when -encapsulation is set to
IPv6 Autoconfiguration Functions
387
 ethernet_ii_qinq.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles A list of handles that identify the IPv6 emulation created by the
 sth::emulation_ipv6_autoconfig function

 port_handle The port handle on which IPv6 devices are configured
 status $SUCCESS or $FAILURE
 log An error message (if the operation failed)
Description:
 The sth::emulation_ipv6_autoconfig function creates, modifies or deletes the
 IPv6 autoconfiguration emulation. Use the -mode argument to specify the action
 to perform. (See the -mode argument description for information about the
 actions.) When you create IPv6 devices, you must use the -port_handle argument
 to specify the Spirent HLTAPI port that the emulated IPv6 devices will use for
 IPv6 Auto-configuration. (The port handle value is contained in the keyed list
 returned by the sth::connect function.)
 In addition to specifying the -port_handle, you can provide one or more of
 the following arguments when you create IPv6 supplicants or use their default
 values:
 -count (the number of IPv6 supplicants to emulate)

 -ip_version (IP version, IPv6 or dual stack)

 -dad_enable (Enables or disables detection of duplicate addresses.)

 -dad_transmit_count (The number of consecutive Neighbor Solicitation messages
 sent while performing duplicate address detection on a tentative address.)

 -dad_retransmit_delay (The delay, in msec, between consecutive Neighbor
 Solicitation transmissions performed during duplicate address detection.)

 -router_solcit_retransmit_delay (The delay, in msec, between router solicitation
 messages)

 -router_solicit_retry (The number of times to resend router solicitation to the
 all-routers multicast group.)
 In the modify mode, you can change the configuration of the created IPv6 devices
 except for these arguments: -port_handle, -encap, ip_version and -count. In the
 reset mode, you can remove the created device. If a creation, configuration, or
 deletion fails, Spirent HLTAPI returns an error message. For example, if the
 user tries to modify a non-existing session handle, an error message will be
 returned.
Examples:
 #### HLTAPI for Tcl ####
 # mode create, IPv6 autoconfiguration with IPv6 Stack:
 set returnedString [ sth::emulation_ipv6_autoconfig \
 -mode create \
 -port_handle $hltHostPort \
 -count 1\
 -local_ipv6_addr 2001::2\
 -local_ipv6_addr_step 0000::1\
 -local_ipv6_prefix_len 64\
 -link_local_ipv6_prefix_len 64 \
 -link_local_ipv6_addr_step ::1 \
 -link_local_ipv6_addr fe80::3 \
IPv6 Autoconfiguration Functions
388
 -gateway_ipv6_addr 2001:1213::205:9AFF:FEAD:7090\
 -gateway_ipv6_addr_step 0000::1\
 -dad_enable true\
 -dad_transmit_count 3\
 -dad_retransmit_delay 2000\
 -router_solicit_retransmit_delay 4000\
 -router_solicit_retry 4]
 Output:
 {port_handle port1} {handle host1} {status 1}
 # mode modify, IPv6 autoconfiguration with IPv6 Stack:
 set returnedString [ sth::emulation_ipv6_autoconfig \
 -mode modify \
 -handle $ipv6Handle \
 -dad_enable true\
 -dad_transmit_count 4\
 -dad_retransmit_delay 1000\
 -router_solicit_retransmit_delay 3000\
 -router_solicit_retry 5]
 Output:
 {handle host1} {status 1}
 # mode create, IPv6 autoconfiguration with dual stack:
 set returnedString [ sth::emulation_ipv6_autoconfig \
 -mode create \
 -port_handle $hltHostPort \
 -ip_version 4_6\
 -count 5\
 -local_ip_addr 10.10.10.10\
 -local_ip_addr_step 0.0.0.1\
 -local_ip_prefix_len 24\
 -link_local_ipv6_prefix_len 64 \
 -link_local_ipv6_addr_step ::1 \
 -link_local_ipv6_addr fe80::3 \
 -gateway_ip_addr 192.86.1.1\
 -gateway_ip_addr_step 0.0.0.1\
 -local_ipv6_addr 2001::2\
 -local_ipv6_addr_step 0000::1\
 -local_ipv6_prefix_len 64\
 -gateway_ipv6_addr 2001:1213::205:9AFF:FEAD:7090\
 -gateway_ipv6_addr_step 0000::1\
 -dad_enable true\
 -dad_transmit_count 3\
 -dad_retransmit_delay 2000\
 -router_solicit_retransmit_delay 4000\
 -router_solicit_retry 4]
 Output:
 {port_handle port1} {handle {host1 host2 host3 host4 host5}} {status 1}
Sample Output: See Examples
 #### HLTAPI for Python ####
 # mode create, IPv6 autoconfiguration with IPv6 stack:
 device_ret0 = sth.emulation_ipv6_autoconfig (
 mode = 'create',
 ip_version = '6',
 encap = 'ethernet_ii',
 port_handle = port_handle[0],
 local_ipv6_prefix_len= '64',
 gateway_ipv6_addr_step= '::',
 gateway_ipv6_addr = '2001::1',
 local_ipv6_addr = '2001::2',
 local_ipv6_addr_step= '::1',
 link_local_ipv6_prefix_len ='64',
IPv6 Autoconfiguration Functions
389
 link_local_ipv6_addr_step ='::1',
 link_local_ipv6_addr = 'fe80::3',
 count = '1',
 mac_addr = '00:10:94:00:00:01',
 mac_addr_step = '00:00:00:00:00:01',
 router_solicit_retransmit_delay= '3000',
 router_solicit_retry= '2');
 # mode create, IPv6 autoconfiguration with dual stack:
 device_ret0 = sth.emulation_ipv6_autoconfig (
 mode = 'create',
 ip_version = '4_6',
 encap = 'ethernet_ii',
 port_handle = port_handle[0],
 local_ipv6_prefix_len= '64',
 gateway_ipv6_addr_step= '::',
 gateway_ipv6_addr = '2001::1',
 local_ipv6_addr = '2001::2',
 local_ipv6_addr_step= '::1',
 link_local_ipv6_prefix_len ='64',
 link_local_ipv6_addr_step ='::1',
 link_local_ipv6_addr = 'fe80::3',
 count = '1',
 mac_addr = '00:10:94:00:00:01',
 mac_addr_step = '00:00:00:00:00:01',
 local_ip_addr_step = '0.0.0.1',
 local_ip_prefix_len = '24',
 gateway_ip_addr_step= '0.0.0.0',
 gateway_ip_addr = '192.85.1.1',
 local_ip_addr = '192.85.1.3',
 router_solicit_retransmit_delay= '3000',
 router_solicit_retry= '2');
Sample Output: {'status': '1', 'handle': 'host2', 'port_handle': 'port1'}
 #### HLTAPI for Perl ####
 # mode create, IPv6 autoconfiguration with IPv6 stack:
 my %device_ret0 = sth::emulation_ipv6_autoconfig (
 mode => 'create',
 ip_version => '6',
 encap => 'ethernet_ii',
 port_handle => "$hport[1]",
 local_ipv6_prefix_len=> '64',
 gateway_ipv6_addr_step=> '::',
 gateway_ipv6_addr => '2001::1',
 local_ipv6_addr => '2001::2',
 local_ipv6_addr_step=> '::1',
 link_local_ipv6_prefix_len =>'64',
 link_local_ipv6_addr_step =>'::1',
 link_local_ipv6_addr =>'fe80::3',
 count => '1',
 mac_addr => '00:10:94:00:00:01',
 mac_addr_step => '00:00:00:00:00:01',
 router_solicit_retransmit_delay=> '3000',
 router_solicit_retry=> '2');
 # mode create, IPv6 autoconfiguration with dual stack:
 my %device_ret0 = sth::emulation_ipv6_autoconfig (
 mode => 'create',
 ip_version => '4_6',
 encap => 'ethernet_ii',
 port_handle => "$hport[1]",
 local_ipv6_prefix_len=> '64',
 gateway_ipv6_addr_step=> '::',
 gateway_ipv6_addr => '2001::1',
 local_ipv6_addr => '2001::2',
 local_ipv6_addr_step=> '::1',
 link_local_ipv6_prefix_len =>'64',
IPv6 Autoconfiguration Functions
390
 link_local_ipv6_addr_step =>'::1',
 link_local_ipv6_addr =>'fe80::3',
 count => '1',
 mac_addr => '00:10:94:00:00:01',
 mac_addr_step => '00:00:00:00:00:01',
 local_ip_addr_step => '0.0.0.1',
 local_ip_prefix_len => '24',
 gateway_ip_addr_step=> '0.0.0.0',
 gateway_ip_addr => '192.85.1.1',
 local_ip_addr => '192.85.1.3',
 router_solicit_retransmit_delay=> '3000',
 router_solicit_retry=> '2');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host2';
 $VAR3 = 'port_handle';
 $VAR4 = 'port1';
 $VAR5 = 'status';
 $VAR6 = '1';
Notes: None
End of Procedure Header
sth::emulation_ipv6_autoconfig_control
Name:
 sth::emulation_ipv6_autoconfig_control

Purpose:
 Starts or stops IPv6 autoconfiguration on the specified port.

Synopsis:
 sth::emulation_ipv6_autoconfig_control
 -action {start | stop}
 [-port_handle <port_handle>]
 [-handle <handle>]
Arguments:
 -action
 Specifies the action(s) to be performed on the on the port
 specified by -port_handle. This argument is mandatory.
 Possible values are described below:
 start - Start IPv6 autoconfiguration

 stop - Stop IPv6 autoconfiguration
 -port_handle
 Specifies the port on which to perform the action.
 -handle
 Specifies the handle of the device on which to perform the action.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log An error message (if the operation failed).
Description:
 The sth::emulation_ipv6_autoconfig_control function controls the starting and
 stopping of IPv6 devices.
IPv6 Autoconfiguration Functions
391
Examples:
 #### HLTAPI for Tcl ####
 The following example starts the configured IPv6 autoconfiguration:
 set returnedString [ sth::emulation_ipv6_autoconfig_control \
 -port_handle $portHandle \
 -action start]
 The following example stops the IPv6 autoconfiguration
 set returnedString [ sth::emulation_ipv6_autoconfig_control \
 -port_handle $portHandle \
Sample Output: Success (1)
 #### HLTAPI for Python ####
 The following example starts the configured IPv6 autoconfiguration:
 ctrl_ret1 = sth.emulation_ipv6_autoconfig_control (
 port_handle = port_handle[0],
 action = 'start');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 The following example starts the configured IPv6 autoconfiguration:
 my %ctrl_ret1 = sth::emulation_ipv6_autoconfig_control (
 port_handle => "$hport[1]",
 action => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes: None
End of Procedure Header
sth::emulation_ipv6_autoconfig_stats
Name:
 sth::emulation_ipv6_autoconfig_stats

Purpose:
 Returns statistics about the IPv6 autoconfiguration on the specified port.
 Statistics include the bound status and number and type of messages sent and
 received from the specified port.
Synopsis:
 sth::emulation_ipv6_autoconfig_stats
 [-action {clear | collect }]
 [-handle <handle>]
 [-port_handle <port_handle>]
 [-mode {aggregate | session}]

Arguments:
 -action
 Specifies the action to be taken. Possible values are clear and
 collect.

 collect - Retrieves the statistics from the specified port or
 IPv6 device.

 clear - Removes the statistics from the specified port or IPv6
 device.
IPv6 Autoconfiguration Functions
392
 The default value is collect.

 -handle
 Specifies the handle of the device on which to retrieve
 statistics. If no handle is specified, then the statistics
 for all devices configured on the port will be returned. You
 must specify -handle or -port_handle, but not both.
 -port_handle
 Specifies the port on which to retrieve statistics.
 -mode
 Specifies the kind of information you want to see. Possible
 values are described below:

 aggregate - Returns statistics for the specified port

 session - If -handle is specified, returns statistics for the
 specified IPv6 device. If -handle is not specified,
 then statistics for all IPv6 devices are returned.
 The default value is session.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log An error message (if the operation failed).
 The following port aggregated statistics when you specify -mode to aggregate:

 current_bound
 Number of addresses currently bound to interfaces
 current_idle
 Number of addresses currently not bound to any
 interfaces
 rx_nbr_adv
 Number of neighbor advertisement messages received
 rx_rtr_adv
 Number of router advertisement messages received
 state
 State of an IPv6 autoconfiguration session
 success_percent
 Percent of interfaces successfully bound with an
 address
 total_attempt
 Number of attempts to bind addresses to interfaces
 total_bound
 Total number of addresses bound to interfaces
 total_dad_failures
 Total number of duplicate address detection failures
 total_failed
 Number of failures to bind an address to an interface
 total_ra_timeout_failur
 Total number of router advertisements that timed out
 tx_nbr_sol
 Number of neighbor solicitation messages sent
 tx_rtr_sol
 Number of router solicitation messages sent

 The following port aggregated statistics when you specify -mode to session:
 binding_state
 State of the current binding attempts
 current_attempt
 Number of interfaces attempting to bind to an address
 current_bound
 Number of interfaces currently bound to an address
 current_idle
IPv6 Autoconfiguration Functions
393
 Number of interfaces not currently attempting to
 bind to an address
 state
 State of an IPv6 autoconfiguration session
 total_attempt
 Total number of attempts to bind addresses for all
 interfaces
 total_bound
 Total number of interfaces bound to an address
 total_dad_failures
 Number of duplicate address detection failures
 total_failed
 Total number of interfaces that failed to bind to an
 address

 total_ra_timeout_failure
 Number of router advertisements that timed out
Description:
 The sth::emulation_ipv6_autoconfig_stats function retrieves a list of aggregate
 statistics for the IPv6 devices configured on a specified port, or
 session statistics for a specified IPv6 device.
Examples:
 #### HLTAPI for Tcl ####
 The following example returns aggregate statistics:
 set returnedString [ sth::emulation_ipv6_autoconfig_stats \
 -port_handle $hltSourcePort \
 -mode aggregate]
 Output:
 {port1 {{state BOUND} {tx_nbr_sol 6} {current_bound 1} {total_attempt 1}
 {rx_nbr_adv 0} {tx_rtr_sol 1} {current_idle 0} {total_failed 0}
 {success_percent 100} {rx_rtr_adv 1} {total_bound 1} {total_dad_failures 0}
 {total_ra_timeout_failures 0}}} {status 1}
 The following example returns session statistics:
 set returnedString [ sth::emulation_ipv6_autoconfig_stats \
 -port_handle $hltSourcePort \
 -mode session]
 Sample Output:
 {state BOUND} {current_bound 1} {total_attempt 1} {current_idle 0}
 {total_failed custom_llc 0} {current_attempt 0} {binding_state SUCCESS}
 {total_bound 1} {total_dad_failures 0} {total_ra_timeout_failures 0}
 {status 1}
 If mode is not specified then it returns both aggregate as well as session
 results:
 {port1 {{state BOUND} {tx_nbr_sol 6} {current_bound 1} {total_attempt 1}
 {rx_nbr_adv 0} {tx_rtr_sol 1} {current_idle 0} {total_failed 0}
 {success_percent 100} {rx_rtr_adv 1} {total_bound 1} {total_dad_failures 0}
 {total_ra_timeout_failures 0}}} {state BOUND} {current_bound 1} {total_attempt 1}
 {current_idle 0} {total_failed 0} {current_attempt 0} {binding_state SUCCESS}
 {total_bound 1} {total_dad_failures 0} {total_ra_timeout_failures 0} {status 1}
 #### HLTAPI for Python ####
 The following example returns aggregate statistics:

 results_ret1 = sth.emulation_ipv6_autoconfig_stats (
 port_handle = port_handle[0],
 mode = 'aggregate',
 action = 'collect');
 Sample Output:
 {'status': '1', 'port1': {'success_percent': '0', 'total_failed': '0',
 'rx_rtr_adv': '0', 'total_attempt': '0', 'rx_nbr_adv': '0', 'state': 'IDLE',
 'current_idle': '1', 'total_bound': '0', 'tx_rtr_sol': '0',
 'total_dad_failures': '0', 'total_ra_timeout_failures': '0', 'tx_nbr_sol': '0',
 'current_bound': '0'}}
IPv6 Autoconfiguration Functions
394
 #### HLTAPI for Perl ####
 The following example returns aggregate statistics:
 my %results_ret1 = sth::emulation_ipv6_autoconfig_stats (
 port_handle => "$hport[1]",
 mode => 'aggregate',
 action => 'collect');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'port1';
 $VAR4 = {
 'total_dad_failures' => '0',
 'total_failed' => '0',
 'current_bound' => '0',
 'tx_rtr_sol' => '0',
 'rx_rtr_adv' => '0',
 'current_idle' => '1',
 'state' => 'IDLE',
 'tx_nbr_sol' => '0',
 'success_percent' => '0',
 'rx_nbr_adv' => '0',
 'total_bound' => '0',
 'total_attempt' => '0',
 'total_ra_timeout_failures' => '0'
 };
Notes: None
End of Procedure Header
ISIS Functions
395
ISIS Functions
Functions:
sth::emulation_isis_config
sth::emulation_isis_control
sth::emulation_isis_topology_route_config
sth::emulation_isis_lsp_generator
sth::emulation_isis_info
sth::emulation_isis_config
Name:
 sth::emulation_isis_config
Purpose:
 Creates, enables, disables, modifies, or deletes an emulated IS-IS router
 on a Spirent TestCenter port. You can create one or more IS-IS routers.
 Each IS-IS-enabled port can emulate different types of
 routers: Level 1 (intra-area), Level 2 (inter-area), or Level 1-2 (both).
 The Integrated Intermediate System to Intermediate System (IS-IS) protocol
 is a link state, Interior Gateway Protocol (IGP) for IP and Connectionless
 Network Protocol (CLNP). Routers (Intermediate Systems) use IS-IS to
 exchange routes within a single network (routing domain). Based on the Open
 System Interconnection (OSI) architecture, IS-IS functionality is similar
 to that of IP-based OSPF. Packets or datagrams are forwarded based on the
 best topological path through the network to the destination.
Synopsis:
 sth::emulation_isis_config
 -mode create
 {-port_handle <port_handle> | -handle <device_handle> } |
 -mode {modify|delete|enable|disable|active|inactive}
 -handle <isis_session_handle>
 [-area_id <string>]
 [-atm_encapsulation {0|1}]
 [-authentication_mode {none|simple|md5}]
 [-bfd_registration {1|0}]
 [-count <integer>]
 [-gateway_ip_addr <a.b.c.d> ]
 [-gateway_ip_addr_step <a.b.c.d> ]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-gateway_ipv6_addr_step
 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-graceful_restart {0|1} ]
 [-graceful_restart_restart_time <0-65535>]
 [-hello_interval <1-65535> ]
 [-hello_padding {true|false} ]
 [-holding_time <1-65535> ]
 [-intf_type {broadcast | ptop}]
 [-intf_ip_addr <a.b.c.d> ]
 [-intf_ip_addr_step <a.b.c.d> ]
 [-intf_ip_prefix_length <1-32> ]
 [-intf_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-intf_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-intf_ipv6_prefix_length <1-128> ]
 [-intf_metric <0-16777215> ]
 [-ip_version {4|6|4_6} ]
 [-lsp_life_time <1-65535> ]
 [-lsp_level {L1|L2}]
 [-lsp_refresh_interval <1-65535> ]
 [-mac_address_start <aa:bb:cc:dd:ee:ff>]
 [-md5_key_id <0-255>]
 [-multi_topology {0| 2 | 0,2}]
ISIS Functions
396
 [-overloaded {0|1} ]
 [-psnp_interval <1-20>]
 [-password < password>]
 [-router_id <a.b.c.d>]
 [-router_id_step <integer> ]
 [-routing_level {L1|L2|L1L2}]
 [-system_id {000000000000 - FFFFFFFFFFFF}
 [-system_id_step <integer>]
 [-te_admin_group <1-4294967295> ]
 [-te_enable {0|1} ]
 [-te_max_bw <1-2147383647> ]
 [-te_max_resv_bw <1-2147383647> ]
 [-te_router_id <a.b.c.d> ]
 [-te_router_id_step <a.b.c.d>]
 [-te_unresv_bw_priority0 <1-2147383647> ]
 [-te_unresv_bw_priority1 <1-2147383647> ]
 [-te_unresv_bw_priority2 <1-2147383647> ]
 [-te_unresv_bw_priority3 <1-2147383647> ]
 [-te_unresv_bw_priority4 <1-2147383647> ]
 [-te_unresv_bw_priority5 <1-2147383647> ]
 [-te_unresv_bw_priority6 <1-2147383647> ]
 [-te_unresv_bw_priority7 <1-2147383647> ]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vlan {0|1}]
 [-vlan_cfi {0|1} ]
 [-vlan_id <0-4095> ]
 [-vlan_id_mode {fixed|increment} ]
 [-vlan_id_step <1-4094> ]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_mode {fixed|increment}]
 [-vlan_outer_id_step <1-4094>]
 [-vlan_outer_user_priority <0-7>]
 [-vlan_user_priority <0-7> ]
 [-vpi <0-255>]
 [-vpi_step <0-255>]
 [-wide_metrics {0|1} ]
 [-tunnel_handle <GRE_tunnel_handle>]
Arguments:
 -area_id
 Identifies the area address to use for the IS-IS router.
 Because IS-IS can reside in more than one area, an ID can
 be up to 13 octets long (1 to 13), so you specify each ID as
 a string of 2 to 26 hexadecimal characters. (There must be
 an even number of hex characters.) The default area ID is
 000001. The number of area IDs is vendor dependent.
 -atm_encapsulation
 Specifies the Layer 2 encapsulation of the ATM protocol
 interface associated with the emulated router. Possible
 values are 0 and 1. If it is set to 0, it indicates the
 Layer 2 encapsulation to be used is Ethernet. If it is set
 to 1, it indicates the Layer 2 encapsulation to be used is
 ATM interface.

 -authentication_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of authentication to be used.
 none - No authentication.
 simple - Use simple authentication. The packet is
 authenticated by the receiving router if the password
 matches the authentication key that is included in the
 packet. This method provides little security because
 the authentication key can be learned by capturing
 packets.
 md5- Use the MD-5 key ID for authentication. 
ISIS Functions
397
 The packet contains a cryptographic checksum, but not
 the authentication key itself. The receiving router
 performs a calculation based on the MD-5 algorithm
 and an authentication key ID. The packet is
 authenticated if the calculated checksum matches. This
 method provides a stronger assurance that routing data
 originated from a router with a valid authentication
 key.
 -bfd_registration
 Specifies to enable or disable Bidirectional Forwarding
 Detection (BFD) registration. Possible values are 1 (enable)
 and 0 (disable). The default is 0.
 -count
 The number of emulated routers to create on the interface.
 Possible values are 0 to <max_int>. The default is 1.
 -gateway_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address of the IS-IS router. The
 default for OSPFv2 is 192.85.1.1.
 -gateway_ip_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address for multiple routers.
 This argument is used with the -gateway_ip_addr argument.
 -gateway_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv6 gateway address of the IS-IS router.
 -gateway_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv6 gateway address for multiple routers.
 This argument is used with the -gateway_ip_addr argument.
 -graceful_restart
 Specifies if IS-IS graceful restart is enabled on the
 simulated router. Possible values are 1 (enable Graceful
 Restart) or 0 (disable Graceful Restart). The default is 0.
 See RFC 3847 for more information.
 -graceful_restart_restart_time
 Specifies the maximum amount of time, in seconds, that the
 router will wait for a graceful restart to complete.
 Possible values are 0-65535.
 -handle
 Specifies the IS-IS handle(s) to use.
 This argument is mandatory for modify, delete, enable,
 disable, active and inactive modes. When -mode is set to
 create, Spirent HLTAPI creates IS-IS over the provided
 device. (Please refer to the description of the -mode
 argument for more information)
 -hello_interval
 Specifies the amount of time, in seconds, between
 transmitting Layer 1 and Layer 2 protocol data units (PDUs).
 Possible values range from 1 to 65535. The default is 3.
 -hello_padding
 Specifies whether to insert hello padding in Hello packets for
 IS-IS emulation. Possible values are true (enable) and false
 (disable). The default is true.

 -holding_time
 Specifies the maximum amount of time, in seconds, between
 receipt of Hello PDUs before the link is pronounced down.
 Possible values range from 1 to 65535. The default is 10.
ISIS Functions
398
 -intf_type
 Defines the type of network attached to the interface.
 Possible values are broadcast and ptop.
 broadcast - Defines the network attached to the
 interface is a broadcast network.
 ptop - Defines the network attached to the interface
 is a peer-to-peer (or P2P) network. A peer-to-peer
 computer network uses diverse connectivity between
 participants in a network and the cumulative
 bandwidth of network participants.
 -intf_ip_addr
 Specifies the IPv4 address of the interface for the IS-IS
 emulated router that will establish an adjacency with the
 DUT. The default is 0.0.0.0. Note that both the IPv4 and
 IPv6 addresses can be configured on the interface for
 IPv4_6.
 -intf_ip_addr_step
 Defines the increment used to generate IP addresses for
 emulated routers. Spirent HLTAPI increments the
 -intf_ip_addr value. You must specify the interface
 IP address step when the -count argument is greater than 1.
 The default increment is 0.
 -intf_ip_prefix_length
 Specifies the prefix length on the emulated router. Possible
 values for IPv4 addresses range from 1 to 32; the default is
 24.
 -intf_ipv6_addr
 Specifies the IPv6 address of the interface for the IS-IS
 emulated router that will establish an adjacency with the
 DUT. The default is 0:0:0:0:0:0:0:0.
 -intf_ipv6_addr_step
 Defines the increment used to generate IP addresses for
 emulated routers. Spirent HLTAPI increments the
 -intf_ipv6_addr value. You must specify the interface
 IP address step when the -count argument is greater than 1.
 The range of possible values is 0 to <max_int>. The default
 is 0.
 -intf_ipv6_prefix_length
 Specifies the prefix length on the IPv6 emulated router,
 Possible values for IPv6 addresses range from 1 to 128; the
 default is 64.
 -intf_metric
 The cost metric associated with the route. Possible values
 for wide metrics range from 1 to 16777214. Possible values
 for narrow metrics range from 1 to 63. See -wide_metrics
 for more information.
 -ip_version
 Specifies the IP version of the IS-IS emulated router.
 Possible values are 4 (for IPv4 address format), 6 (for
 IPv6 address format), or 4_6 for both IPv4 and IPv6
 address formats. The default is 4. If you specify 4_6, wide
 metrics (see -wide_metrics) are automatically enabled.
 -lsp_life_time
 Specifies the remaining lifetime (in seconds) of the LSP.
 Possible values range from 1 to 65535. The default is 1200.
 -lsp_level
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the level supported by the LSP. Possible values
 are L1 and L2. The default is L2 when -routing_level is L2 or
ISIS Functions
399
 L1L2, or L1 when -routing level is L1. Use this argument to
 specify the level to use to create the links.
 -lsp_refresh_interval
 Specifies the rate, in seconds, at which LSPs are re-sent.
 Possible values range from 1 to 65535. The default is 900.
 -mac_address_start
 Spirent Extension (for Spirent HLTAPI only).
 Initial MAC address of the interfaces created for the IS-IS
 neighbor configuration.
 -md5_key_id
 Spirent Extension (for Spirent HLTAPI only).
 Indicates MD5 authentication key used by MD5 authentication.
 Possible values range from 0 to 255. The default value
 is 1. You can specify this option when
 the -authentication_mode argument is set to "md5".
 -mode
 Specifies the action to perform. Possible values are create,
 enable, disable, modify, delete, active and inactive. This
 argument is mandatory. The modes are described below:
 create - Creates and starts IS-IS router.
 When -port_handle is provided, Spirent HLTAPI
 creates one or more emulated routers that are
 associated with the specified port.
 When -handle is provided, IS-IS will be created over
 the specified device. In this case, the following
 options will be obsoleted:
 -count
 -mac_address_start
 -intf_ip_addr
 -intf_ip_addr_step
 -intf_ip_prefix_length
 -ip_version
 -vlan
 -gateway_ip_addr
 -gateway_ip_addr_step
 -gateway_ip_addr
 -router_id
 -router_id_step
 -vci
 -vci_step
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vpi
 -vpi_step
 -tunnel_handle
 -vlan_outer_id
 -vlan_outer_id_mode
 -vlan_outer_id_step
 -vlan_outer_user_priority
 -intf_ipv6_addr
 -intf_ipv6_addr_step
 -intf_ipv6_prefix_length
 -gateway_ipv6_addr
 -gateway_ipv6_addr_step
 enable - Creates and starts one or more IS-IS routers on the
 port specified with the -port_handle argument. You must
 specify the -port_handle argument.
 disable - Deletes all of the IS-IS routers from the port
 specified in the -handle argument. You must
 specify the -handle argument.
ISIS Functions
400
 modify - Changes the configuration for the IS-IS router
 identified by the -handle argument. You must
 specify the -handle argument.
 delete - Deletes all of the IS-IS routers from the port
 specified in the -handle argument. You must specify
 the -handle argument.
 active - Enables the ISIS router specified by the -handle
 argument. You must specify a valid IS-IS session
 handle.
 inactive - Disables the IS-IS router specified by the
 -handle argument. You must specify a valid IS-IS
 session handle. The configuration for the router is
 retained, when it is inactive and is available as
 configured if the router is active.
 -multi_topology
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the topology identifier. Possible values are 0, 2 and
 0,2. When you set the value to 0, only IPv4 routing topology is
 supported. When you set the value to 2, only IPv6 routing
 topology is supported. When you set the value to 0,2, both IPv4
 and IPv6 routing topologies are supported. The default value is 0.
 -overloaded
 Sets the LSP database overload bit. This bit indicates that
 the LSP database on this router does not have enough memory
 to store a received LSP (that is, the simulated router is
 overloaded). Routers receiving an LSP with this bit set to 1
 will not use the originating router as a transit router.
 They will destined to the overloaded router's directly
 connected networks. Possible values are 0 (not overloaded)
 and 1 (overloaded). The default is 0.
 -port_handle
 Specifies the handle of the port on which to create the
 IS-IS router.
 -psnp_interval
 Specifies the minimum period between sending Partial
 Sequence Number PDUs over the interface when the session
 router is the DR. Possible values are 1 to 20. The
 default is 10.
 -password
 Spirent Extension (for Spirent HLTAPI only).
 You can specify this argument when -authentication_mode
 is set to "simple" or "md5". Possible values are
 alphanumeric characters. The length of the values ranges
 from 1 to 253 in simple mode, while the length of the values
 ranges from 1 to 16 in md5 mode. The default value is
 "Spirent".
 -router_id
 Specifies the router ID of the emulated IS-IS router.
 -router_id_step
 Specifies the difference between router IDs of consecutive
 routers when multiple IS-IS routers are created with the
 -count argument. In the Spirent implementation, this step
 value is used as the step for -system_id. Possible values
 are 0 to max_int. The default is 1.
 -routing_level
 Specifies the supported routing level: L1 only, L2 only, or
 both L1 and L2 (L1L2). Routing information is exchanged
 between Level 1 routers and other Level 1 routers. Level 2
ISIS Functions
401
 routers only exchange information with other Level 2
 routers. Level 1-2 routers exchange information with both
 levels and are used to connect the inter-area routers with
 the intra-area routers. Possible values are L1, L2, or L1L2.
 The default is L1L2. Use this argument to specify the level
 to use to create the adjacency.
 -system_id
 Specifies the unique system ID used to identify an emulated
 router. A system ID is typically six-octet long; therefore,
 you specify each system ID as a string of 12 hexadecimal
 characters. Possible values range from 000000000000 to
 FFFFFFFFFFFF. The default is 0x0200+intf_ip in hex.
 -system_id_step
 Defines the step size in which the system ID (-system_id) is
 incremented. The default value is 1. You can use this
 argument if the value of -count is larger than 1.
 -te_admin_group
 Specifies the administrative group of the traffic
 engineering link. Possible values range from 1 to
 4294967295. The default is 1.
 -te_enable
 Enables or disables traffic engineering (TE) on all links.
 Possible values are 0 and 1. The default is 0 (disable).
 -te_max_bw
 Specifies the maximum bandwidth of the traffic engineering
 link. Possible values range from 1 to 2147483647. The
 default is 100000 bytes per second.
 -te_max_resv_bw
 Specifies the maximum bandwidth that can be reserved for the
 traffic engineering link. Enter a floating point value. The
 default is 100000 bytes per second. Possible values range
 from 1 to 4294967295.
 -te_router_id
 Specifies the TE router ID. The default is 0.0.0.0.
 -te_router_id_step
 Defines the step size in which the TE router
 ID (-te_router_id ) is incremented. The default is 0.0.0.1.
 -te_unresv_bw_priority0
 Specifies the amount of bandwidth not yet reserved at
 priority level 0. The values corresponds to the
 bandwidth that can be reserved with a setup priority of 0
 through 7. Arranged in ascending order, priority 0 occurs at
 the start of the sub-TLV and priority 7 at the end. The
 initial values, before any bandwidth is reserved, are all
 set to the value specified for the maximum reservable
 bandwidth (-te_max_resv_bw). Each value will be less than or
 equal to the maximum reservable bandwidth. The default is
 100000 bytes per second.
 -te_unresv_bw_priority1
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. The default is 100000 bytes per second.
 -te_unresv_bw_priority2
 Specifies the amount of bandwidth not yet reserved at
 priority level 2. The default is 100000 bytes per second.
 -te_unresv_bw_priority3
 Specifies the amount of bandwidth not yet reserved at
 priority level 3. The default is 100000 bytes per second.
 -te_unresv_bw_priority4
ISIS Functions
402
 Specifies the amount of bandwidth not yet reserved at
 priority level 4. The default is 100000 bytes per second.
 -te_unresv_bw_priority5
 Specifies the amount of bandwidth not yet reserved at
 priority level 5. The default is 100000 bytes per second.
 -te_unresv_bw_priority6
 Specifies the amount of bandwidth not yet reserved at
 priority level 6. The default is 100000 bytes per second.
 -te_unresv_bw_priority7
 Specifies the amount of bandwidth not yet reserved at
 priority level 7. The default is 100000 bytes per second.
 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
 range from 0 to 65535. You can use this
 argument when -atm_encapsulation is set to 1.
 -vci_step
 Specifies the step size in which the VCI value is
 incremented. Possible values range from 0 to 65535.
 You can use this argument when -atm_encapsulation is
 set to 1.
 -vlan
 Disables or enables VLAN on the traffic generation
 tool interfaces. Possible values are 0 (disabled) and
 1 (enabled). The default is 0. You can use this argument
 when -mode is create.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 1. If set to 0, it indicates
 the network is Ethernet. If set to 1, it indicates that
 Token Ring and packets are dropped by Ethernet ports.
 You can use this argument only when -vlan is set to 1.
 -vlan_id
 Specifies the VLAN ID of the first VLAN sub-interface.
 Possible values range from 0 to 4095. The default is 1. When
 the mode is either "create" or "enable", Spirent HLTAPI
 checks for a VLAN object on the port with the given VLAN ID.
 If no VLAN object with that ID exists, Spirent HLTAPI
 creates a VLAN object with the specified VLAN ID.
 You can use this argument only when -vlan is set to 1.
 -vlan_id_mode
 If you configure more than one interface on Spirent
 HLTAPI with VLAN, you can choose to either automatically
 increment the VLAN tag (mode "increment") or leave it idle
 for each interface (mode "fixed"). If you set this argument
 to "increment", then you must also specify the -vlan_id_step
 argument to indicate the step size. The default is
 increment. You can use this argument when -vlan is set to 1.
 -vlan_id_step
 The step size by which the VLAN value is incremented when
 you set -vlan_id_mode to "increment". Possible values range
 from 1 to 4094. You must specify the step when the -count
 argument is greater than 1. The default is 1. You can use
 this argument only when -vlan is set to 1.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id.
ISIS Functions
403
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when router count
 is greater than 1. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values
 range from 1 to 4094. You must specify this step when
 you specify "increment" for the -vlan_outer_id_mode
 argument.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -vlan_user_priority
 VLAN priority for the VLANs on this port. Possible values
 range from 0 to 7. The default is 0. You can use this
 argument only when -vlan is set to 1.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values are 0 to 255. You can use
 this argument only when -atm_encapsulation is set to 1.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are 0 to 255. You can
 use this argument only when -atm_encapsulation is set to 1.
 -wide_metrics
 Enables for disables wide style metrics. Possible values are
 1 (enable) and 0 (disable). If set to 1, enables both narrow
 and wide style metrics. If set to 0, then Spirent HLTAPI
 uses only narrow metrics. The default is 0. Spirent
 HLTAPI needs to use wide metrics for newer features such
 as IPv6 and TE.
 -tunnel_handle
 Specifies the GRE tunnel handle, an array value, initialized
 by the emulation_gre_config command. The router sends
 traffic through this tunnel.
Arguments Unsupported by Save as HLTAPI:
 None

Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -area_authentication_mode
 -area_id_step
 -area_password
 -attach_bit
 -csnp_interval
 -discard_lsp
 -domain_authentication_mode
 -domain_password
 -graceful_restart_mode
ISIS Functions
404
 -hello_password
 -interface_handle
 -l1_router_priority
 -l2_router_priority
 -loopback_bfd_registration
 -loopback_hello_password
 -loopback_ip_addr
 -loopback_ip_addr_count
 -loopback_ip_addr_step
 -loopback_ip_prefix_length
 -loopback_l1_router_priority
 -loopback_l2_router_priority
 -loopback_te_admin_group
 -loopback_te_max_bw
 -loopback_te_max_resv_bw
 -loopback_te_metric
 -loopback_te_unresv_bw_priority0
 -loopback_te_unresv_bw_priority1
 -loopback_te_unresv_bw_priority2
 -loopback_te_unresv_bw_priority3
 -loopback_te_unresv_bw_priority4
 -loopback_te_unresv_bw_priority5
 -loopback_te_unresv_bw_priority6
 -loopback_te_unresv_bw_priority7
 -loopback_metric
 -loopback_routing_level
 -loopback_type
 -max_packet_size
 -multi_topology
 -partition_repair
 -te_metric
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle
 The handle that identifies the IS-IS router created by the
 sth::emulation_isis_config function when you use "-mode
 create" or "-mode enable" to create a new IS-IS router.
 When you want to modify, disable, or delete an IS-IS
 router, you specify the handle as the value to the -handle
 argument.
 session_router
 The handle of the router used in this IS-IS session.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
 neighbor.<neighbor_handle>.area_id
 The area to which the router belongs. Not supported.
 neighbor.<neighbor_handle>.system_id
 The unique ID number of the system to which the router
 belongs. Not supported.
 neighbor.<neighbor_handle>.pseudonode_num
 The unique ID number of the neighboring virtual router.
 Not supported.
 neighbor.<neighbor_handle>.intf_ip_addr
 The IPv4 address of the interface for the IS-IS
 emulated router. Not supported.
 neighbor.<neighbor_handle>.intf_ipv6_addr
 The IPv6 address of the interface for the IS-IS
ISIS Functions
405
 emulated router. Not supported.
 link_local_ipv6_addr
 The IPv6 address of the local interface for this link.
 Not supported.
 link_local_ipv6_prefix_length
 The IPv6 prefix length for the local interface for this
 link. Not supported.
 pseudonode_num
 The unique ID number of the current virtual router.
 Not supported.
Description:
 The sth::emulation_isis_config function creates, enables,
 disables, modifies, or deletes IS-IS routers from the specified port. Use
 the -mode argument to specify the action to perform. (See the -mode
 argument description for information about the actions.)
 When you create an IS-IS router, use the -port_handle argument to specify
 the port handle that the emulated router will use. (The port
 handle value is contained in the keyed list returned by the connect
 function.)
 In addition to specifying the port (-port_handle), you must also provide
 the following arguments when you create an IS-IS router:
 -mode create
 -intf_ip_addr
 -router_id
 -area_id
 -system_id
 When you create a router, Spirent HLTAPI automatically starts the
 router communication.
 Each emulated router establishes adjacency with the neighboring SUT.
 Spirent HLTAPI uses the Hello protocol to discover neighbors and, on
 broadcast links, to elect a designated router, according to IS-IS
 specifications.
 Each Spirent HLTAPI test module hosts an IS-IS stack capable of
 emulating multiple IS-IS routers per port.
 Once you start an IS-IS session by creating routers, Spirent HLTAPI
 handles all of the messages for the emulated routers. During the test, you
 can use the sth::emulation_isis_control function to stop and re-start
 individual routers. To stop and start all of the routers associated with a
 particular port, use the disable and enable modes with the
 sth::emulation_isis_config function. After you have created the routers for
 your test, use the sth::emulation_isis_topology_route_config function to
 set up routes.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates and starts an IS-IS IPv4 configuration:
 sth::emulation_isis_config -count 1 \
 -graceful_restart 0 \
 -graceful_restart_restart_time 33 \
 -hello_interval 15 \
 -holding_time 40 \
 -intf_ip_addr 192.168.1.6 \
 -intf_ip_addr_step 0.0.0.2 \
 -intf_ip_prefix_length 24 \
 -intf_metric 5 \
ISIS Functions
406
 -ip_version 4 \
 -lsp_refresh_interval 3 \
 -port_handle $port_handle1 \
 -psnp_interval 20 \
 -router_id_step 0.0.0.1 \
 -routing_level L2 \
 -te_admin_group 1 \
 -te_max_bw 2000 \
 -te_max_resv_bw 2000 \
 -te_unresv_bw_priority1 1234 \
 -system_id 1234567890ab \
 -system_id_step 16 \
 -te_router_id 11.11.11.11 \
 -te_router_id_step 0.0.0.1 \
 -vlan 1 \
 -vlan_id 5 \
 -vlan_user_priority 2 \
 -wide_metrics 1 \
 - intf_type ptop \
 -mode create
 Output: {{status $SUCCESS | $FAILURE}
 {handle <ISIS_session_handle>}
 {session_router <session_router_handle>}}
 The following example enables IS-IS over a provided device:
 puts "Config LDP--------------------"
 set routerStatus [sth::emulation_ldp_config -mode create \
 -port_handle $port1Handle \
 -intf_ip_addr 13.25.0.2\
 -loopback_ip_addr 13.25.0.1 \

 -gateway_ip_addr 13.25.0.1\
 -remote_ip_addr 13.25.0.2 \

 -graceful_recovery_timer 55 \
 -keepalive_interval 56 \
 -reconnect_time 57 \
 -recovery_time 58 \
 -egress_label_mode exnull \
 -label_adv on_demand \
 -bfd_registration 1 \
 ]
 puts "LDP: $routerStatus"
 keylget routerStatus handle router
 puts "Config IS-IS--------------------"
 set routerStatus [sth::emulation_isis_config \
 -handle $router\
 -mode create \
 -ip_version 4 \
 -area_id 000000000001 \
 ]
 puts "IS-IS: $routerStatus"
 Sample output for example shown above:
 Config LDP--------------------
 LDP: {handle router1} {handles router1} {status 1}
 Config IS-IS--------------------
 IS-IS: {handle router1} {handles router1} {session_router isislspconfig1}
 {status 1}
 The following example stops and deletes the routers from the specified
 port:
 sth::emulation_isis_config -handle $isisSessionHandle -mode delete
 #### HLTAPI for Python ####
ISIS Functions
407
 The following example creates and starts an IS-IS IPv4
 configuration:
 device_ret0 = sth.emulation_isis_config (
 mode = 'enable',
 lsp_level = 'L2',
 overloaded = '0',
 lsp_life_time = '1200',
 te_enable = '1',
 te_unresv_bw_priority0= '100000',
 te_unresv_bw_priority1= '100000',
 te_unresv_bw_priority2= '100000',
 te_unresv_bw_priority3= '100000',
 te_unresv_bw_priority4= '100000',
 te_unresv_bw_priority5= '100000',
 te_unresv_bw_priority6= '100000',
 te_unresv_bw_priority7= '100000',
 authentication_mode = 'none',
 intf_metric = '1',
 port_handle = port_handle[0],
 intf_ipv6_addr = '2000::2',
 intf_ipv6_prefix_length= '64',
 gateway_ipv6_addr = '2000::2',
 router_id = '192.0.0.1',
 mac_address_start = '00:10:94:00:00:01',
 intf_ip_prefix_length= '24',
 intf_ip_addr = '12.85.1.3',
 gateway_ip_addr = '12.85.1.1',
 hello_interval = '10',
 ip_version = '4_6',
 graceful_restart_restart_time= '3',
 routing_level = 'L2',
 lsp_refresh_interval= '900',
 psnp_interval = '2',
 intf_type = 'broadcast',
 holding_time = '3',
 graceful_restart = '0',
 wide_metrics = '1',
 hello_padding = 'true',
 area_id = '000001');
 Sample Output:
 {'status': '1', 'handles': 'router1', 'handle': 'router1',
 'session_router': 'isislspconfig1'}

 #### HLTAPI for Perl ####
 The following example creates and starts an IS-IS IPv4
 configuration:
 my %device_ret0 = sth::emulation_isis_config (
 mode => 'enable',
 lsp_level => 'L2',
 overloaded => '0',
 lsp_life_time => '1200',
 te_enable => '1',
 te_unresv_bw_priority0=> '100000',
 te_unresv_bw_priority1=> '100000',
 te_unresv_bw_priority2=> '100000',
 te_unresv_bw_priority3=> '100000',
 te_unresv_bw_priority4=> '100000',
 te_unresv_bw_priority5=> '100000',
 te_unresv_bw_priority6=> '100000',
 te_unresv_bw_priority7=> '100000',
 authentication_mode => 'none',
 intf_metric => '1',
 port_handle => "$hport[1]",
 intf_ipv6_addr => '2000::2',
 intf_ipv6_prefix_length=> '64',
 gateway_ipv6_addr => '2000::2',
 router_id => '192.0.0.1',
 mac_address_start => '00:10:94:00:00:01',
ISIS Functions
408
 intf_ip_prefix_length=> '24',
 intf_ip_addr => '12.85.1.3',
 gateway_ip_addr => '12.85.1.1',
 hello_interval => '10',
 ip_version => '4_6',
 graceful_restart_restart_time=> '3',
 routing_level => 'L2',
 lsp_refresh_interval=> '900',
 psnp_interval => '2',
 intf_type => 'broadcast',
 holding_time => '3',
 graceful_restart => '0',
 wide_metrics => '1',
 hello_padding => 'true',
 area_id => '000001');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'handles';
 $VAR4 = 'router1';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'session_router';
 $VAR8 = 'isislspconfig1';
Sample Input: See Examples.
Sample Output: See Examples.
Notes:
End of Procedure Header
sth::emulation_isis_control
Name:
 sth::emulation_isis_control
Purpose:
 Starts, stops, and controls flapping operations on an emulated IS-IS
 router. You can also use this function to delete an LSP.
Synopsis:
 sth::emulation_isis_control
 -mode {stop | start | restart | flap}
 [-handle {LSP_session_handle}]
 [-port_handle {port_handle} ]
 [-withdraw {list of topology_elem_handles} ]
 [-advertise { list of topology_elem_handles }]
 [-flap_count <integer>]
 [-flap_down_time <0-10000000>]
 [-flap_interval_time <0-10000000>]
 [-flap_routes <list of route handles>]
Arguments:
 -advertise
 Specifies the LSPs to advertise.
 -flap_count
 Specifies the number of flaps. Each flap includes one
 route to advertise and one route to delete.
 -flap_down_time
 Specifies the amount of time, in seconds, during which the
ISIS Functions
409
 routes are withdrawn from their neighbors.
 -flap_interval_time
 During a flapping operation, the time (in seconds) between
 flap cycles.
 -flap_routes
 Perform periodic route flapping on topology elements.
 -handle
 Identifies the router to start or stop. This argument is
 mandatory.
 -mode
 Specifies the action to be taken. Possible values are
 stop, start, or restart the router. This argument is
 mandatory.
 stop - Stops the router with the specified handle.
 start - Starts the router with the specified handle.
 restart - Stops the router with the specified handle
 and then starts it again.
 flap - Enables route flapping.
 -port_handle
 Identifies the port on which to stop or start the router.
 -withdraw
 Specifies the LSPs to delete.
Cisco-specific Arguments:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_isis_control function controls the starting and
 stopping of routers as well as deleting them. At the same time you can
 delete LSPs.
Examples:
 #### HLTAPI for Tcl ####
 To start an IS-IS router and withdraw the IP route at the same time:
 sth::emulation_isis_control
 -mode start -handle $isisSessionHandle \
 -withdraw $isisRouteHandle
 To stop and delete the routers:
 sth::emulation_isis_control -mode stop -handle $isisSessionHandle
 To restart a router:
 sth::emulation_isis_control -mode restart -handle $isisSessionHandle
 To call route flapping:
 # Perform two full route flaps the ISIS router. Assume that we are already
 # given an ISIS session handle isisSessionHandle and an ISIS IP route 
ISIS Functions
410
 # handle isisRouteHandle. Also assume that the ISIS router is running and
 # in the "Up" state.
 set status [::emulation_isis_control -mode flap -flap_count 2 \
 -flap_down_time 10 -flap_interval_time 10 -flap_routes \
 $isisRouteHandle -handle $isisSessionHandle]
 Sample Output: {status router1}
 #### HLTAPI for Python ####
 To start an IS-IS router:
 ctrl_ret1 = sth.emulation_isis_control (
 handle = device_list,
 mode = 'start');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 To start an IS-IS router:
 my %ctrl_ret1 = sth::emulation_isis_control (
 handle => "$device_list",
 mode => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Sample Input: See Examples.
Notes: None
End of Procedure Header
sth::emulation_isis_topology_route_config
Name:
 sth::emulation_isis_topology_route_config
Purpose:
 Creates or modifies routes on or deletes routes from an emulated IS-IS
 router on a Spirent TestCenter port. This function also configures the
 properties of the IS-IS routes.
 When you add a route (see description for -mode), Spirent HLTAPI
 returns the route handle in a keyed list with "connected_handles" as the
 key.
Synopsis:
 sth::emulation_isis_topology_route_config
 -mode create -handle <isis_session_handle> |
 -mode {modify|delete} -elem_handle <lsp_handle>
 [-external_count <1-4294967295> ]
 [-external_ip_pfx_len <1-32> ]
 [-external_ip_start <a.b.c.d> ]
 [-external_ip_step <1-255> ]
 [-external_ipv6_pfx_len <1-128> ]
 [-external_ipv6_start <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-external_ipv6_step <1-255> ]
 [-external_metric <1-63> ]
 [-external_metric_type {internal|external} ]
 [-external_up_down_bit {0|1} ]
 [-ip_version {4|6|4_6} ]
 [-link_narrow_metric <0-63> ]
ISIS Functions
411
 [-link_te {0|1} ]
 [-link_te_admin_group <1-4294967295> ]
 [-link_te_max_bw <1-2147483647> ]
 [-link_te_max_resv_bw <1-2147483647> ]
 [-link_te_unresv_bw_priority0 <1-4294967295>]
 [-link_te_unresv_bw_priority1 <1-4294967295>]
 [-link_te_unresv_bw_priority2 <1-4294967295>]
 [-link_te_unresv_bw_priority3 <1-4294967295>]
 [-link_te_unresv_bw_priority4 <1-4294967295>]
 [-link_te_unresv_bw_priority5 <1-4294967295>]
 [-link_te_unresv_bw_priority6 <1-4294967295>]
 [-link_te_unresv_bw_priority7 <1-4294967295>]
 [-router_attached_bit {0|1} ]
 [-router_connect { another_elem_handle } ]
 [-router_disconnect { another_elem_handle } ]
 [-router_id <a.b.c.d> ]
 [-router_overload_bit {0|1} ]
 [-router_pseudonode_num <0-255> ]
 [-router_routing_level {L1|L2|L1L2} ]
 [-router_system_id <000000000000-FFFFFFFFFFFF> ]
 [-router_te {0|1} ]
 [-stub_count <1-4294967295> ]
 [-stub_ip_pfx_len <1-32> ]
 [-stub_ip_start <a.b.c.d> ]
 [-stub_ip_step <a.b.c.d> ]
 [-stub_ipv6_pfx_len <1-128> ]
 [-stub_ipv6_start <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-stub_ipv6_step <1-255> ]
 [-stub_metric <0-65535> ]
 [-stub_up_down_bit {0|1} ]
 [-type { router | grid | stub | external} ]
Arguments:
 -elem_handle Specifies which topology element to modify or delete. You
 must specify this argument if the mode is modify or delete
 (see description for -mode).
 -external_count
 Specifies the number of prefixes to be advertised for an
 external network. Possible values range from 1 to
 4294967295. The default is 1. Use this argument to configure
 a consecutive set of network prefixes.
 -external_ip_pfx_len
 The prefix length for the IPv4 external prefix. The IPv4
 external prefixes are advertised by TLV 130 for narrow
 style, and TLV 135 for wide style. Possible values range
 from 1 to 32. The default is 24.
 Note: Use the -external_ip_pfx_len, -external_ip_start,
 -external_ip_step, -external_ip_v6_pfx_len,
 -external_ip_v6_start, -external_ip_v6_step,
 -external_metric, -external_metric_type,
 -external_up_down_bit arguments to add or modify external
 networks behind a session router.
 The IPv4 external prefixes are advertised by TLV 130 for
 narrow style, TLV 135 for wide style. The IPv6 external
 prefixes are advertised by TLV 236 if MT disabled, TLV 237
 if MT enabled. Both have external bit set.
 -external_ip_start
 The first prefix to be advertised in the external network.
 The default is 0.0.0.0. You must specify a prefix length
 (-external_ip_pfx_le) with this argument. See Note in
 -external_ip_pfx_len argument.
 -external_ip_step
 The amount by which the prefix to be advertised should
 be increased. Possible values are 1 to 255. The default is
ISIS Functions
412
 1. You must specify the -external_ip_start argument. You can
 specify the value in either numeric or IPv4 notation.
 -external_ipv6_pfx_len
 The prefix length for the IPv6 external prefix. The IPv6
 external prefixes are advertised by TLV 236. Possible values
 range from 1 to 128. The default is 64. See Note in
 -external_ip_pfx_len argument.
 -external_ipv6_start
 The first prefix to be advertised in the external network.
 The default is 0:0:0:0:0:0:0:0. You must specify a prefix
 length (-external_ipv6_pfx_le) with this argument. See Note
 in -external_ip_pfx_len argument.
 -external_ipv6_step
 The amount by which the prefix to be advertised should
 be increased. Possible values are 1 to 255. The default is
 1. You must specify -external_ipv6_start argument. You can
 specify the value in either numeric or IPv6 notation. See
 Note in -external_ip_pfx_len argument.
 -external_metric
 Specifies the metric value for external links. The range for
 wide style is different from narrow style. Possible values
 range from 1 to 63. See Note in -external_ip_pfx_len
 argument.
 -external_metric_type
 The type of metric element to configure for TLV 130.
 Possible values are 1 (internal) and 2 (external). The
 default is 1.
 1 - internal - Configure internal metrics.
 2 - external - Configure external metrics.
 -external_up_down_bit
 Specifies if the route is advertised from Level 2 to
 Level 1. Possible values are 0 (up) and 1 (down). The
 default is 0 (up). If the external up/down bit is set to
 down, it indicates that the route is advertised from Level 2
 to Level 1. If it is set to up, the route is not advertised
 from Level 2 to Level 1.
 -handle
 Identifies the router on which to create, modify, or
 delete a topology element. This argument is mandatory.
 -ip_version
 The IP version of the topology element. Possible values are
 4, 6, or 4_6. The default value is 4_6. Note that you cannot
 change the IP version for the TE topology elements after you
 create them because Spirent HLTAPI only supports IPv4.
 -link_ip_addr
 Specifies the IP address of the interface corresponding to
 the current link. The default is 0.0.0.0.
 -link_narrow_metric
 Indicates whether to add or modify a narrow metric. Possible
 values range from 0 to 63. The default is 1.
 -link_te
 Indicates whether to enable traffic engineering on the link.
 Possible values are 1 (enable) and 0 (disable). The default
 is 0.
 -link_te_admin_group
 Specifies the link's administrative group membership,
 expressed as the decimal equivalent of a 32-bit bit mask.
ISIS Functions
413
 Each set bit corresponds to one administrative group
 assigned to the interface. A link can belong to multiple
 groups. By convention, the least significant bit is referred
 to as "group 0", and the most significant bit is referred to
 as "group 31". Possible values range from 1 to 4294967295.
 The default is 1. The Administrative Group sub-TLV is TLV
 type 9.
 link_te_max_bw
 Specifies the maximum bandwidth that can be
 used on this traffic engineering link in this direction
 (from the originating router to its neighbor). Possible
 values range from 1 to 2147483647. The default is 100000
 bytes per second.
 link_te_max_resv_bw
 Specifies the maximum reservable bandwidth sub-TLV (type 7),
 in bytes per second, that you can reserve on this link in
 this direction. The default is 100000 bytes per second.
 link_te_remote_ip_addr
 The remote interface IP address sub-TLV (type 4). The
 default is 0.0.0.0.
 link_te_unresv_bw_priority0
 Specifies the amount of bandwidth not yet reserved at
 priority level 0. The values correspond to the bandwidth
 that can be reserved with a setup priority of 0 through 7.
 Arranged in ascending order, priority 0 occurs at the start
 of the sub-TLV and priority 7 at the end. The initial
 values, before any bandwidth is reserved, are all set to the
 value specified for the maximum reservable bandwidth
 (-link_te_max_resv_bw). Each value will be less than or
 equal to the maximum reservable bandwidth. Possible values,
 in bytes per second, are 0 to 4294967295. The default is
 100000 bytes per second.
 link_te_unresv_bw_priority1
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values, in bytes per second, are
 0 to 4294967295. The default is 100000 bytes per second.
 link_te_unresv_bw_priority2
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values, in bytes per second, are
 0 to 4294967295. The default is 100000 bytes per second.
 link_te_unresv_bw_priority3
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values, in bytes per second, are
 0 to 4294967295. The default is 100000 bytes per second.
 link_te_unresv_bw_priority4
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values, in bytes per second, are
 0 to 4294967295. The default is 100000 bytes per second.
 link_te_unresv_bw_priority5
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values, in bytes per second, are
 0 to 4294967295. The default is 100000 bytes per second.
 link_te_unresv_bw_priority6
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values, in bytes per second, are
 0 to 4294967295. The default is 100000 bytes per second.
 link_te_unresv_bw_priority7
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values, in bytes per second, are
 0 to 4294967295. The default is 100000 bytes per second.
ISIS Functions
414
 -mode
 Specifies whether to create, modify, or delete LSPs from
 the emulated router's LSR database. This argument is
 mandatory. Possible values are:
 create - Creates a new LSP for the IS-IS session. The handle
 for the LSP is returned in the lsp_handle key (see
 Return Values).
 modify - Modifies the setup for the LSP specified in the
 -lsp_handle argument.
 delete - Removes the LSP specified in the -lsp_handle
 argument.
 -router_attached_bit
 Specifies whether to set the 0th LSP's attached bit.
 Possible values are 1 (true) and 0 (false). The default
 is 0. The attached bit enables an L1 router to figure out
 who its closest L2 router is. You should set this bit if you
 are connected to either 1) other areas, or 2) other domains.
 -router_connect
 Specifies the handle of the IS-IS router to which you
 want to connect the current session router.
 -router_disconnect
 Specifies the handle of the IS-IS router from which you
 want to disconnect the current session router.
 -router_id
 Specifies the TE router ID. The default is 0.0.0.0.
 -router_overload_bit
 Specifies whether to enable the LSP's overload bit on the
 router to add or modify. If enabled (1), sets the 0th LSP's
 overload bit. The default is 0.
 -router_pseudonode_num
 Specifies the ID of the virtual router to add or modify.
 Possible values range from 0 to 255. The default is 0. A
 pseudo node is not a real router. It is an extra LSP in the
 LSP database that is created by the designated router.
 -router_routing_level
 Specifies the supported routing level: L1 , L2, or L1L2
 (both). IS-IS has two layers of hierarchy: the backbone is
 called level-2, and the areas are called level-1. The
 default is L1L2.
 -router_system_id
 Specifies the system ID of the router to add or modify. A
 system ID is typically 6-octet long thus each ID is
 specified as a string of 12 hex characters. Possible values
 range from 000000000000 to FFFFFFFFFFFF. The default is
 000001000003.
 -router_te
 Specifies whether the TE router ID is set. Possible values
 are 1 (true) and 0 (false). The default is 0.
 -stub_count
 Configures a consecutive set of network prefixes when adding
 or modifying internal (stub) networks behind a session
 router. The IPv4 stub networks are advertised by TLV 128 for
 narrow metric style and TLV 135 for wide metric style. The
 IPv6 stub networks are advertised by TLV 236. Possible
 values range from 1 to 4294967295. The default is 1.
 -stub_ip_pfx_len
ISIS Functions
415
 Specifies the prefix length of the stub network. Possible
 values for IPv4 addresses range from 1 to 32; the default is
 24,
 -stub_ip_start
 The first prefix to be advertised in the IPv4 network.
 The default is 0.0.0.0. You must specify a prefix
 length (-stub_ip_pfx_le) with this argument,
 -stub_ip_step
 The amount by which the prefix to be advertised should
 be increased. Possible values are 1 to 255. The default is
 1. You must specify the -stub_ip_start argument.
 -stub_ipv6_pfx_len
 Specifies the prefix length of the stub network. Possible
 values for IPv6 addresses range from 1 to 128; the default
 is 64.
 -stub_ipv6_start
 The first prefix to be advertised in the IPv6 network.
 The default is 0:0:0:0:0:0:0:0. You must specify a prefix
 length (-stub_ipv6_pfx_le) with this argument.
 -stub_ipv6_step
 The amount by which the prefix to be advertised should
 be increased. Possible values are 1 to 255. The default is
 1. You must specify the -stub_ipv6_start argument.
 -stub_metric
 Specifies the metric value for stub links. The range for
 wide style is different from narrow style. Possible values
 range from 0 to 65535.
 -stub_up_down_bit
 Specifies whether the route is advertised from Level 2 to
 Level 1. Possible value are 1 (true) and 0 (false). The
 default is 0. If this argument is set to 1, the route is
 advertised from Level 2 to Level 1. If this argument is set
 to 0, the route is not advertised from Level 2 to Level 1.
 -type
 Specifies the type of topology element to be created.
 Possible values are router, grid, external, or stub.
 - router: an IS-IS router
 - grid: a rectangular grid of IS-IS routers
 - stub: a stub network with a number of reachable network
 prefixes
 - external: external network with a number of reachable
 network prefixes
Arguments Unsupported by Save as HLTAPI:
 The sth::emulation_isis_topology_route_config function is currently not supported
 by Save to HLTAPI. To test with this function, you must configure it manually in
 the generated Spirent HLTAPI scripts.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -external_connect
 -grid_col
 -grid_connect
 -grid_connect_session
 -grid_disconnect
 -grid_interface_metric
 -grid_router_ip_pfx_len
 -grid_router_metric
 -grid_router_origin
ISIS Functions
416
 -grid_router_up_down_bit
 -grid_system_id_step
 -grid_te_admin
 -grid_te_ip_step
 -grid_te_max_bw
 -grid_te_max_resv_bw
 -grid_te_metric
 -grid_te_unresv_bw_priority0
 -grid_te_unresv_bw_priority1
 -grid_te_unresv_bw_priority2
 -grid_te_unresv_bw_priority3
 -grid_te_unresv_bw_priority4
 -grid_te_unresv_bw_priority5
 -grid_te_unresv_bw_priority6
 -grid_te_unresv_bw_priority7
 -grid_user_wide_metric
 -link_te_metric
 -router_system_id
 -grid_ip_pfx_len
 -grid_ip_start
 -grid_ip_step
 -grid_ipv6_pfx_len
 -grid_ipv6_start
 -grid_ipv6_step
 -grid_link_type
 -grid_router_id
 -grid_router_id_step
 -grid_row
 -grid_start_system_id
 -grid_start_te_ip
 -grid_stub_per_router
 -grid_te
 -link_enable
 -link_external
 -link_ip_prefix_length
 -link_ipv6_addr
 -link_ipv6_prefix_length
 -link_multi_topology
 -link_te_remote_ip_addr
 -link_te_remote_ipv6_addr
 -link_up_down_bit
 -link_wide_metric
 -router_area_id
 -router_host_name
 -stub_connect
 -te_router_id
 -te_router_id_step
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 elem_handle
 <ISIS_elem_handle>
 The handle that identifies the router created by the
 sth::emulation_isis_topology_route_config function.
 version
 {4|6|4_6}
 The IP version of the IS-IS emulated router: IPv4, IPv6, or
 IPv4/6.
 router
 connected_handles <connected_elem_handles>
 The number of elements to which the router is connected.
 grid
 connected_session.$session.row<row>.col<col>
 The location of the session by row and column number in the grid.
 router.$row.$col <router_handle>
ISIS Functions
417
 The row and column number of the router in the grid.
 network stub
 num_networks <num_networkstub_prefixes>
 The number of internal (stub) network prefixes advertised.
 external
 num_networks <num_external_prefixes>
 The number of external network prefixes advertised.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 Each emulated IS-IS router simulates a topology of inter-
 connected routers behind itself. It accomplishes this by advertising Link
 State Protocol Data Units (LSPs), with the IS Neighbors TLV
 (Type/Length/Value) or the Extended Reachability TLV, to the SUT.
 The sth::emulation_isis_topology_route_config function creates and
 configures IP routes for the IS-IS protocol. Use the -elem_handle argument
 to identify the router for which to create, modify, or delete a route. (The
 router handle value is contained in the keyed list returned by the
 sth::emulation_isis_config function.) Use the -mode argument to specify the
 action to perform. See the -mode argument for a description of the actions.
Examples:
 The following example creates a route for each IS-IS router on
 port1. This example assumes you have created the ISIS session handle
 isisSessionHandle and LSP handle isisLspHandle:
 sth::emulation_isis_topology_route_config -mode create \
 -external_ip_pfx_len 24 \
 -external_ip_start 1.2.3.4 \
 -external_ip_step 0.0.0.3 \
 -external_ipv6_pfx_len 64 \
 -external_ipv6_start 3FFE:1111::1\
 -external_ipv6_step 0000::05 \
 -external_metric 10 \
 -external_metric_type internal \
 -handle $isisSessionHandle \
 -ip_version 4 \
 -router_routing_level L2 \
 -router_system_id 1234567890ab \
 -type external
Sample Input: See Examples.
Sample Output: See Examples.
Notes: None
End of Procedure Header
sth::emulation_isis_lsp_generator
Name:
 sth::emulation_isis_lsp_generator
Purpose:
 Creates or modifies the router topology under the specified ISIS emulated
 router, matching the operation of the ISIS LSP Generator from Spirent
 TestCenter GUI.
Synopsis:
ISIS Functions
418
 sth::emulation_isis_lsp_generator
 -mode create -handle <isis_session_handle> |
 -mode {delete|modify} -elem_handle <lsp_handle>
 [-loopback_adver_enable <false|true>]
 [-ipv4_addr_end <a.b.c.d>]
 [-ipv4_addr_start <a.b.c.d>]
 [-ipv6_addr_end <0:0:0:0:0:0:0:0>]
 [-ipv6_addr_start <0:0:0:0:0:0:0:0>]
 [-isis_level <LEVEL1|LEVEL2|LEVEL1_AND_2>]
 [-router_id_start <a.b.c.d>]
 [-router_id_step <0-0xFFFFFFFF>]
 [-system_id_start <000000000000-FFFFFFFFFFFF>]
 [-system_id_step <000000000000-FFFFFFFFFFFF>]
 [-traffic_engineered_enabled <false|true>]
 [-traffic_engineered_band_width_unit <BITS_PER_SEC|BYTES_PER_SEC
 |MBYTES_PER_SEC>]
 [-traffic_engineered_group <1-4294967295>]
 [-traffic_engineered_max_bw <1-4294967295>]
 [-traffic_engineered_max_resv_bw <1-4294967295>]
 [-traffic_engineered_ip_addr <a.b.c.d>]
 [-traffic_engineered_remote_ip_addr <a.b.c.d>]
 [-traffic_engineered_unresv_bw_priority0 <1-4294967295>]
 [-traffic_engineered_unresv_bw_priority1 <1-4294967295>]
 [-traffic_engineered_unresv_bw_priority2 <1-4294967295>]
 [-traffic_engineered_unresv_bw_priority3 <1-4294967295>]
 [-traffic_engineered_unresv_bw_priority4 <1-4294967295>]
 [-traffic_engineered_unresv_bw_priority5 <1-4294967295>]
 [-traffic_engineered_unresv_bw_priority6 <1-4294967295>]
 [-traffic_engineered_unresv_bw_priority7 <1-4294967295>]
 [-handle <isis_session_handle>]
 [-type <fullmesh|grid|hubspoke|ring|tree|none>]
 [-hubspoke_num_routers <1-100>]
 [-hubspoke_emulated_router_pos <ATTACHED_TO_HUB|ATTACHED_TO_SPOKE
 |MEMBER_HUB|MEMBER_SPOKE>]
 [-fullmesh_num_routers <1-100>]
 [-fullmesh_emulated_router_pos <ATTACHED_TO_MESH|MEMBER_OF_MESH>]
 [-ring_num_routers <1-1000>]
 [-ring_emulated_router_pos <ATTACHED_TO_RING|MEMBER_OF_RING>]
 [-tree_if_type <POINT_TO_POINT|BROADCAST>]
 [-tree_max_if_per_router <0-100>]
 [-tree_max_routers_per_transit_network <2-10000>]
 [-tree_num_simulated_routers <1-10000>]
 [-grid_attach_column_index <1-10000>]
 [-grid_attach_row_index <1-10000>]
 [-grid_columns <1-10000>]
 [-grid_rows <1-10000>]
 [-grid_emulated_router_pos <ATTACHED_TO_GRID|MEMBER_OF_GRID>]
 [-internal_count <0-0xFFFFFFFF>]
 [-internal_disable_route_aggregation <false|true>]
 [-internal_duplication_percentage <0-100>]
 [-internal_emulated_routers <NONE|ALL>]
 [-internal_enable_ip_addr_override <0-100>]
 [-internal_iproute_ip_addr_end <a.b.c.d>]
 [-internal_iproute_ipv6_addr_end <0:0:0:0:0:0:0:0>]
 [-internal_ip_addr_increment <0-0xFFFFFFFF>]
 [-internal_iproute_ip_addr_start <a.b.c.d>]
 [-internal_iproute_ipv6_addr_start <0:0:0:0:0:0:0:0>]
 [-internal_prefix_length_dist <0-100....>]
 [-internal_prefix_length_dist_type <FIXED LINEAR|EXPONENTIAL|INTERNET|CUSTOM>]
 [-internal_prefix_length_end <1-32>]
 [-internal_prefix_length_start <1-32>]
 [-internal_prefix_v6_length_end <1-128>]
 [-internal_prefix_v6_length_start <1-128>]
 [-internal_simulated_routers <NONE|ALL|EDGE>]
 [-internal_use_ip_addr_increment <false|true>]
 [-internal_weight_route_assignment <BYPORTS|BYSPEED|BYROUTERS>]
 [-internal_primary_metric <1-65535>]
 [-internal_secondary_metric <1-65535>]
 [-external_count <0-0xFFFFFFFF>]
 [-external_disable_route_aggregation <false|true>]
 [-external_duplication_percentage <0-100>]
ISIS Functions
419
 [-external_emulated_routers <NONE|ALL>]
 [-external_enable_ip_addr_override <0-100>]
 [-external_iproute_ip_addr_end <a.b.c.d>]
 [-external_iproute_ipv6_addr_end <0:0:0:0:0:0:0:0>]
 [-external_ip_addr_increment <0-0xFFFFFFFF>]
 [-external_iproute_ip_addr_start <a.b.c.d>]
 [-external_iproute_ipv6_addr_start <0:0:0:0:0:0:0:0>]
 [-external_prefix_length_dist <0-100....>]
 [-external_prefix_length_dist_type <FIXED LINEAR|EXPONENTIAL|INTERNET|CUSTOM>]
 [-external_prefix_length_end <1-32>]
 [-external_prefix_length_start <1-32>]
 [-external_prefix_v6_length_end <1-128>]
 [-external_prefix_v6_length_start <1-128>]
 [-external_simulated_routers <NONE|ALL|EDGE>]
 [-external_use_ip_addr_increment <false|true>]
 [-external_weight_route_assignment <BYPORTS|BYSPEED|BYROUTERS>]
 [-external_primary_metric <1-65535>]
 [-external_secondary_metric <1-65535>]
 [-segment_routing_enabled <true|false>]
 [-sr_adj_sid_enabled <true|false>]
 [-sr_adj_flags { bbit | vbit | lbit | sbit } ]
 [-sr_adj_value <integer>]
 [-sr_adj_value_step <integer>]
 [-sr_adj_weight <0-255>]
 [-sr_algorithms <string>]
 [-sr_cap_range <0-16777215>]
 [-sr_cap_value <integer>]
 [-sr_cap_value_type {label | sid}]
 [-sr_config_prefix_sid_route_enabled {true | false}]
 [-sr_sid <integer>]
 [-sr_sid_step <integer>]
Arguments:
 -elem_handle
 Specifies which topology element to modify or delete. You
 must specify this argument if the mode is modify or delete
 (see description for -mode).
 -loopback_adver_enable
 Generates a 32-bit internal route that is equal to the LSP TE
 router ID TLV. This enables a simulated ISIS router to advertise
 its router ID (loopback address) as a 32-bit route in a
 self-originated LSP, as required for MPLS, Martini, and TE tests.
 The default value is false.
 -ipv4_addr_end
 Specifies the global/default ending IPv4 address value used for
 routes and interface addresses. The default value is
 223.255.255.255.
 -ipv4_addr_start
 Specifies the global/default starting IPv4 address value used for
 routes and interface addresses. The default value is 1.0.0.0.
 -ipv6_addr_end
 Specifies the global/default ending IPv6 address value used for
 routes and interface addresses. The default value is 3ffe::.
 -ipv6_addr_start
 Specifies the global/default starting IPv6 address value used for
 routes and interface addresses. The default value is 2000::.
 -isis_level
 Specifies the ISIS levels on which LSPs are created. The default
 value is LEVEL2.
 -router_id_start
 Specifies the first 32-bit router ID to be used.
 The default value is 1.0.0.1.
ISIS Functions
420
 -router_id_step
 Specifies the step applied to the router ID for each subsequent
 router. The default value is 0.0.0.1.
 -system_id_start
 Specifies the first system ID to be used.
 The default value is 10:00:00:00:00:01.
 -system_id_step
 Specifies the step applied to the system ID for each subsequent
 router. The default value is 00:00:00:00:00:01.
 -traffic_engineered_enabled
 Enables or disables traffic engineering on the link.
 Possible values are 1 (enable) and 0 (disable). The default
 is 0.
 -traffic_engineered_band_width_unit
 Specifies bandwidth units of measurement in traffic engineering
 configurations. Possible values are BITS_PER_SEC,BYTES_PER_SEC and
 MBYTES_PER_SEC. The default is BYTES_PER_SEC.
 -traffic_engineered_group
 Specifies the link's administrative group membership,
 expressed as the decimal equivalent of a 32-bit bit mask.
 Each set bit corresponds to one administrative group
 assigned to the interface. A link can belong to multiple
 groups. By convention, the least significant bit is referred
 to as "group 0", and the most significant bit is referred to
 as "group 31". Possible values range from 1 to 4294967295.
 The Administrative Group sub-TLV is TLV type 9.
 -traffic_engineered_max_bw
 Specifies the maximum bandwidth that can be used on this traffic
 engineering link in this direction (from the originating router
 to its neighbor). Possible values range from 1 to 4294967295.
 -traffic_engineered_max_resv_bw
 Specifies the maximum reservable bandwidth sub-TLV (type 7),
 in bytes per second, that you can reserve on this link in
 this direction. Possible values range from 1 to 4294967295.
 -traffic_engineered_ip_addr
 Specifies the interface IP address sub-TLV (type 4). The
 The default is 0.0.0.0.
 -traffic_engineered_remote_ip_addr
 Specifies the remote interface IP address sub-TLV (type 4). The
 The default is 0.0.0.0.
 -traffic_engineered_unresv_bw_priority0
 Specifies the amount of bandwidth not yet reserved at
 priority level 0. The values correspond to the bandwidth
 that can be reserved with a setup priority of 0 through 7.
 Arranged in ascending order, priority 0 occurs at the start
 of the sub-TLV and priority 7 at the end. The initial
 values, before any bandwidth is reserved, are all set to the
 value specified for the maximum reservable bandwidth
 (-traffic_engineered_max_resv_bw). Each value will be less than or
 equal to the maximum reservable bandwidth. Possible values,
 in bytes per second, range from 1 to 4294967295.
 -traffic_engineered_unresv_bw_priority1
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values, in bytes per second, are
 1 to 4294967295.
 -traffic_engineered_unresv_bw_priority2
 Specifies the amount of bandwidth not yet reserved at
 priority level 2. Possible values, in bytes per second, are
 1 to 4294967295. 
ISIS Functions
421
 -traffic_engineered_unresv_bw_priority3
 Specifies the amount of bandwidth not yet reserved at
 priority level 3. Possible values, in bytes per second, are
 1 to 4294967295.
 -traffic_engineered_unresv_bw_priority4
 Specifies the amount of bandwidth not yet reserved at
 priority level 4. Possible values, in bytes per second, are
 1 to 4294967295.
 -traffic_engineered_unresv_bw_priority5
 Specifies the amount of bandwidth not yet reserved at
 priority level 5. Possible values, in bytes per second, are
 1 to 4294967295.
 -traffic_engineered_unresv_bw_priority6
 Specifies the amount of bandwidth not yet reserved at
 priority level 6. Possible values, in bytes per second, are
 1 to 4294967295.
 -traffic_engineered_unresv_bw_priority7
 Specifies the amount of bandwidth not yet reserved at
 priority level 7. Possible values, in bytes per second, are
 1 to 4294967295.
 -handle
 Identifies the router on which to create, modify, or
 delete a topology element. This argument is required for
 modes create and modify.
 -type
 Specifies the type of topology element to be created.
 Possible values are fullmesh, grid, hubspoke,
 ring, tree, and none. The default value is tree.

 Note: This argument cannot be used with mode modify. If you want
 to modify, delete the IsisLspHandle and create it again with new
 configurations.
 -hubspoke_num_routers
 Specifies the total number of routers in the hub and spoke
 topology. This argument is only valid when -type is set to
 hubspoke. Possible values range from 1 to 100. The default value
 is 10.
 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.

 -hubspoke_emulated_router_pos
 Specifies the location of the emulated router in the hub and
 spoke topology. This argument is only valid when -type is set to
 hubspoke.

 Possible values are described below:
 ATTACHED_TO_HUB - The emulated router is attached
 to a hub simulated router

 ATTACHED_TO_SPOKE - The emulated router is attached
 to a spoke simulated router

 MEMBER_HUB - The emulated router is a member as a hub

 MEMBER_SPOKE - The emulated router is a member as a spoke

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.

 -fullmesh_num_routers
ISIS Functions
422
 Specifies the total number of routers in the full mesh.
 This argument is only valid when -type is set to
 fullmesh. Possible values range from 1 to 100. The default value
 is 10.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -fullmesh_emulated_router_pos
 Specifies the location of the emulated router in the full mesh
 topology. This argument is only valid when -type is set to
 fullmesh. Possible values are described below:

 ATTACHED_TO_MESH - The emulated router is attached to one of the
 simulated routers in the full mesh

 MEMBER_OF_MESH - The emulated router is a member of
 the full mesh

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -ring_num_routers
 Specifies the total number of routers in the ring topology
 This argument is only valid when -type is set to ring. Possible
 values range from 1 to 1000. The default value is 10.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -ring_emulated_router_pos
 Specifies the location of the emulated router in the ring topology
 This argument is only valid when -type is set to ring.

 Possible values are described below:

 ATTACHED_TO_RING - The emulated router is attached
 to a ring simulated router

 MEMBER_OF_RING - The emulated router is a member as a ring

 The default is ATTACHED_TO_RING.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -tree_if_type
 Specifies the interface type used to connect simulated routers.
 This argument is only valid when -type is tree.
 Possible values are POINT_TO_POINT and BROADCAST.
 The default value is POINT_TO_POINT

 Note:
 (1) This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.

 (2) Only tree topologies support broadcast/transit networks.
 Other topologies only support point-to-point links.
 -tree_max_if_per_router
 Specifies the maximum number of interfaces per router
 This argument is only valid when -type is tree
 Possible values range from 0 to 100. The default value is 4

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
ISIS Functions
423
 again with new configurations.

 -tree_max_routers_per_transit_network
 Specifies the maximum number of routers per transit network.
 This argument is only valid when -type is tree and -tree_if_type
 is BROADCAST. Possible values range from 2 to 10000. The default
 value is 5.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -tree_num_simulated_routers
 Specifies the total number of simulated routers that will be
 created on all emulated routers. Possible values range from 1 to
 10000. The default value is 50.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -grid_attach_column_index
 For an emulated router attached to a simulated router,
 specifies the column index in the grid of the simulated router to
 which the emulated router is attached.

 For an emulated router that is a member of the grid, specifies
 the column index in the grid where the emulated router is
 located.

 This argument is only valid when -type is grid.
 Possible values range from 1 to 10000. The default value is 1.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -grid_attach_row_index
 For an emulated router attached to a simulated router,
 the row index in the grid of the simulated router to which
 the emulated router is attached.

 For an emulated router that is a member of the grid, the row
 index in the grid where the emulated router is located.
 valid when type is grid.

 This argument is only valid when -type is grid.
 Possible values range from 1 to 10000. The default value is 1.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -grid_columns
 Specifies the number of columns in the grid. This argument is
 only valid when -type is grid.

 Possible values range from 1 to 10000. The default value is 4.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -grid_rows
 Specifies the number of rows in the grid. This argument is
 only valid when -type is grid.
 Possible values range from 1 to 10000. The default value is 4.

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations. 
ISIS Functions
424
 -grid_emulated_router_pos
 Specifies the location of the emulated router in the grid topology
 Possible values are belows. The default is ATTACHED_TO_GRID.

 ATTACHED_TO_GRID - The emulated router is attached
 to a grid simulated router

 MEMBER_OF_GRID - The emulated router is a member
 as a grid

 Note: This argument cannot be used for mode modify. If you want
 to modify, you should delete the IsisLspHandle and create it
 again with new configurations.
 -internal_count
 Specifies the total number of routes to generate.
 The value must be an integer. The default value is 0.
 This is used for internal route configuration.
 -internal_disable_route_aggregation
 Set this argument to true to prevent route aggregation
 by distributing routes to the ports non-sequentially. Possible
 values are true (enable) and false (disable). The default value
 is false.

 This is used for internal route configuration.
 -internal_duplication_percentage
 Determines the percentage of routes that will be duplicated to
 another port. The duplicate routes are assigned the secondary
 category. Possible values range from 1 to 100. The default value
 is 0.
 This is used for internal route configuration.

 -internal_emulated_routers
 Specifies the type of emulated router locations where routes
 will be added. Possible values are described below:

 NONE - Do not add routes to any emulated routers

 ALL - Add routes to all emulated routers

 The default value is NONE.

 This is used for internal route configuration.
 -internal_enable_ip_addr_override
 Determines whether to use the starting/ending IP address.
 Possible values are true and false. The default value is false.
 This is used for internal route configuration.
 -internal_iproute_ip_addr_end
 Specifies the ending IPv4 address to use for generating routes.
 If there are not enough addresses between the starting and ending
 IP address to generate the specified number of routes, the route
 generator will generate as many routes as possible. This argument
 is only valid when -internal_enable_ip_addr_override is set to
 true. The default value is 223.255.255.255.
 This is used for internal route configuration.
 -internal_iproute_ipv6_addr_end
 Specifies the ending IPv6 address to use for generating the
 routes. If there are not enough addresses between the starting and
 ending IP address to generate the specified number of routes, the
 route generator will generate as many routes as possible. This
 attribute is only valid when -internal_enable_ip_addr_override is
 set to true. The default value is 3ffe::.
 This is used for internal route configuration.
 
ISIS Functions
425
 -internal_ip_addr_increment
 Specifies the increment of IPv4 addresses used for internal route
 configuration. The value must be an integer. The default value
 is 1. This is used for internal route configuration.
 -internal_iproute_ip_addr_start
 Specifies the starting IPv4 address to use for generating
 routes. If more than one IPv4 route generation parameters
 Ipv4RouteGenParams are used, the route generator will skip the
 addresses it has already used, and generate the specified number
 of routes, if possible. This attribute is only valid when
 -internal_enable_ip_addr_override is set to true. The default
 value is 1.0.0.0.
 This is used for internal route configuration.
 -internal_iproute_ipv6_addr_start
 Specifies the starting IPv6 address to use for generating
 the routes. If multiple IPv6 route generation parameters are
 used, the route generator will skip the addresses it has already
 used, but will generate the specified number of routes, if
 possible. This argument is only valid when
 -internal_enable_ip_addr_override is set to true. The default
 value is 2000::.
 This is used for internal route configuration.

 -internal_prefix_length_dist
 Specifies the percentage of routes to create for each prefix
 length. You can specify no more than 32 values, the sum of which
 must be eqaul to 100. This attribute is only valid when
 -internal_prefix_length_dist_type is CUSTOM. This is
 used for internal route configuration.
 For example:
 -PrefixLengthDist "100 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0" \
 -PrefixLengthDistType "CUSTOM" \
 -internal_prefix_length_dist_type
 Specifies the type of prefix length distribution to use to generate
 routes. The prefix length distribution determines how many
 routes are created for each prefix length. Possible values are
 LINEAR, EXPONENTIAL, INTERNET and CUSTOM. The default value is
 FIXED.

 FIXED - All routes are generated with the prefix length specified
 by PrefixLengthStart

 LINEAR - Routes are distributed equally across prefix lengths from
 PrefixLengthStart to PrefixLengthEnd. If the number of
 routes cannot be divided equally over the specified
 prefix range, remaining routes are distributed on prefix
 24.

 EXPONENTIAL - Routes are distributed across prefix lengths
 using an exponential algorithm. The algorithm starts
 by placing half the total number of routes you enter
 on the specified ending prefix length, and then taking
 half the remaining routes and placing those on the next
 prefix length up, and so on. This exponentially
 distributes routes up toward the starting prefix length
 in a ratio of 1:2:4:8, etc. Remaining routes are
 distributed on the ending prefix length.

 INTERNET - Routes are distributed across prefix lengths in a
 manner typical of the Internet's default-free
 router prefix distribution

 CUSTOM - The custom prefix length distribution allows you to
 define the percentage of routes for each prefix length

 This is used for internal route configuration. 
ISIS Functions
426
 -internal_prefix_length_end
 Specifies the maximum prefix length for the generated routes.
 This attribute is only valid when
 -internal_prefix_length_dist_type is FIXED, LINEAR, or
 EXPONENTIAL.
 Possible values range from 1 to 32. The default value is 24.
 This is used for internal route configuration.
 -internal_prefix_length_start
 Specifies the minimum prefix length for the generated routes.
 This argument is only valid when
 -internal_prefix_length_dist_type is FIXED, LINEAR, or
 EXPONENTIAL.
 Possible values range from 1 to 32. The default value is 24.
 This is used for internal route configuration.
 -internal_prefix_v6_length_end
 Specifies the maximum prefix length for the generated routes.
 This argument is only valid when
 -internal_prefix_length_dist_type is FIXED, LINEAR, or
 EXPONENTIAL.
 Possible values range from 1 to 128. The default value is 64.
 This is used for internal route configuration.
 -internal_prefix_v6_length_start
 Specifies minimum prefix length for the generated routes.
 This attribute is valid when -internal_prefix_length_dist_type is
 set to FIXED, LINEAR, or EXPONENTIAL. Possible values range from
 1 to 128. The default value is 64.
 This is used for internal route configuration.
 -internal_simulated_routers
 Specifies the type of simulated router locations where routes
 will be added. The SimulatedRouters option is only available
 for protocols that are capable of advertising topologies
 (OSPF, ISIS) and when topology generation parameters are specified.
 This is used for internal route configuration.

 NONE - Do not add routes to any simulated routers

 ALL - Add routes to all simulated routers

 EDGE - Add routes to all simulated routers at the edge of
 the generated topology. This option is only available
 for tree topologies.

 The default value is ALL.
 -internal_use_ip_addr_increment
 Enables or disables increment for IPv4 addresses.
 This is used for internal route configuration.
 The default value is false.
 -internal_weight_route_assignment
 Determines how the total number of routes will be distributed
 This is used for internal route configuration. Possible values
 are BYPORTS, BYSPEED and BYROUTERS.

 BYPORTS - Equal number of routes are assigned to each
 port

 BYSPEED - The number of routes assigned to each port is
 proportional to the speed (line rate) of the port.
 For example, a port with a speed of 100 Mbps will
 receive 10 times more routes than a port with a speed
 of 10 Mbps.

 BYROUTERS - Equal number of routes are assigned to each router.

 The default value is BYROUTERS.
ISIS Functions
427
 This is used for internal route configuration.
 -internal_primary_metric
 Specifies the ISIS route metric used for primary routes
 Possible values range from 1 to 65535. The default value is 1.
 This is used for internal route configuration.
 -internal_secondary_metric
 Specifies the ISIS route metric used for secondary routes
 Possible values range from 1 to 65535. The default value is 2.
 This is used for internal route configuration.
 -external_count
 Specifies the total number of routes to generate.
 The value must be an integer. The default value is 0.
 This is used for external route configuration.
 -external_disable_route_aggregation
 Enable this option to prevent route aggregation
 by distributing routes to the ports non-sequentially.
 Prevent aggregation to stress the SUT's routing
 table capacity and processing power each time a
 packet arrives.
 This is used for external route configuration.
 The default value is false.
 -external_duplication_percentage
 Determines the percentage of routes that will be
 duplicated to another port. The duplicate routes
 are assigned the secondary category.
 Possible values range from 0 to 100. The default value is 0.
 This is used for external route configuration.
 -external_emulated_routers
 Specifies the type of emulated router locations where routes
 will be added. Possible values are:

 NONE - Do not add routes to any emulated routers

 ALL - Add routes to all emulated routers

 The default value is NONE.
 This is used for external route configuration.

 -external_enable_ip_addr_override
 Determines if the starting/ending IP address values or
 will be used. Possible values are true and false.
 This is used for external route configuration.
 -external_iproute_ip_addr_end
 Specifies the ending IPv4 address to use for generating the
 routes. If there are not enough addresses between the starting and
 the ending IP address to generate the specified number of routes,
 the route generator will generate as many routes as possible.
 This attribute is only valid when
 -external_enable_ip_addr_override is set to true. The default
 value is 223.255.255.255.
 This is used for external route configuration.
 -external_iproute_ipv6_addr_end
 Specifies the ending IPv6 address to use for generating the
 routes. If there are not enough addresses between the starting and
 the ending IP address to generate the specified number of routes,
 the route generator will generate as many routes as possible.
 This argument is only valid when
 -external_enable_ip_addr_override is set to true. The default
 value is 3ffe::.
 This is used for external route configuration.
 -external_ip_addr_increment
 Specifies the increment for IPv4 addresses. The default value is 1.
ISIS Functions
428
 This is used for external route configuration.
 -external_iproute_ip_addr_start
 Specifies the starting IPv4 address to use for generating
 the routes. If multiple IPv4 route generation parameters are
 used, the route generator will skip addresses it has already
 used, but will generate the specified number of routes, if
 possible. This argument is only valid when
 -external_enable_ip_addr_override is set to true.
 The default value is 1.0.0.0.
 This is used for external route configuration.
 -external_iproute_ipv6_addr_start
 Specifies the starting IPv6 address to use for generating
 the routes. If multiple IPv6 route generation parameters are used,
 the route generator will skip addresses it has already used, but
 will generate the specified number of routes, if possible. This
 argument is only valid when -external_enable_ip_addr_override is
 set to true. The default value is 2000::.
 This is used for external route configuration.
 -external_prefix_length_dist
 Specifies the percentage of routes to create for each prefix length.
 This argument is valid when -external_prefix_length_dist_type is
 CUSTOM. You can specify no more than 32 values, the sum of which
 must be equal to 100.
 This is used for external route configuration.

 For example:
 -PrefixLengthDist "100 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0" \
 -PrefixLengthDistType "CUSTOM" \
 -external_prefix_length_dist_type
 Specifies the type of prefix length distribution to use to
 generate the routes. The prefix length distribution determines
 how many routes are created for each prefix length.

 Possible values are described below:

 FIXED - All routes are generated with the prefix length specified
 by PrefixLengthStart

 LINEAR - Routes are distributed equally across prefix lengths
 from PrefixLengthStart to PrefixLengthEnd. If the number
 of routes cannot be divided equally over the specified
 prefix range, remaining routes are distributed on prefix
 24.

 EXPONENTIAL - Routes are distributed across prefix lengths
 using an exponential algorithm. The algorithm starts
 by placing half the total number of routes you enter
 on the specified ending prefix length, and then taking
 half the remaining routes and placing those on the next
 prefix length up, and so on. This exponentially
 distributes routes up toward the starting prefix length
 in a ratio of 1:2:4:8, etc. Remaining routes are
 distributed on the ending prefix length.

 INTERNET - Routes are distributed across prefix lengths in a
 manner typical of the Internet's default-free
 router prefix distribution.

 CUSTOM - The custom prefix length distribution allows you to
 define the percentage of routes for each prefix length.

 The default value is FIXED.
 This is used for external route configuration.
 -external_prefix_length_end
 Specifies the maximum prefix length for the generated routes.
ISIS Functions
429
 This attribute is valid when -external_prefix_length_dist_type is
 FIXED, LINEAR, or EXPONENTIAL. Possible values range from 1 to
 32. The default value is 24.
 This is used for external route configuration.
 -external_prefix_length_start
 Specifies the minimum prefix length for the generated routes. This
 attribute is only valid when -external_prefix_length_dist_type is
 FIXED, LINEAR, or EXPONENTIAL. Possible values range from 1 to
 32. The default value is 24.
 This is used for external route configuration.
 -external_prefix_v6_length_end
 Specifies the maximum prefix length for the generated routes. This
 argument is only valid when -external_prefix_length_dist_type is
 FIXED, LINEAR, or EXPONENTIAL. Possible values range from 1 to
 128. The default value is 64.
 This is used for external route configuration.
 -external_prefix_v6_length_start
 Specifies the minimum prefix length for the generated routes.
 This argument is only valid when
 -external_prefix_length_dist_type is FIXED, LINEAR, or
 EXPONENTIAL. Possible values range from 1 to
 128. The default value is 64.
 This is used for external route configuration.
 -external_simulated_routers
 Specifies the type of simulated router locations where routes
 will be added. This argument is only available for
 protocols that are capable of advertising topologies
 (OSPF, ISIS) and when topology generation parameters are
 specified.

 Possible values are described below:

 NONE - Do not add routes to any simulated routers

 ALL - Add routes to all simulated routers

 EDGE - Add routes to all simulated routers at the edge of
 the generated topology. This option is only available
 for tree topologies.

 The default value is ALL.
 This is used for external route configuration.
 -external_use_ip_addr_increment
 Enables or disables increment of IPv4 addresses. Possible values
 are true (Enable) and false (Disable). The default value is false.
 This is used for external route configuration.
 -external_weight_route_assignment
 Determines how the total number of routes will be distributed.
 Possible values are:

 BYPORTS - Equal number of routes are assigned to each port

 BYSPEED - The number of routes assigned to each port is
 proportional to the speed (line rate) of the port.
 For example, a port with a speed of 100 Mbps will
 receive 10 times more routes than a port with a speed
 of 10 Mbps

 BYROUTERS - Equal number of routes are assigned to each router

 The default value is BYROUTERS.
 This is used for external route configuration.
 -external_primary_metric
 Specifies the ISIS route metric for primary routes.
ISIS Functions
430
 Possible values range from 1 to 65535. The default value is 1.
 This is used for external route configuration.
 -external_secondary_metric
 Specifies the ISIS route metric for secondary routes
 Possible values range from 1 to 65535. The default value is 2.
 This is used for external route configuration.
 Use the following arguments to configure Segment Routing (SR) on ISIS routes. You
 must set -loopback_adver_enable to true.

 -segment_routing_enabled
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables Segment Routing (SR) on ISIS routes. Possible
 values are true (enable) and false (disable). The default is
 false.

 -sr_adj_sid_enabled
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables the SR Adjacent Segment ID (Adj-SID) sub-TLV to
 carry the SR IGP-Adjacency-SID. Possible values are true (enable)
 and false (disable). The default is false.

 -sr_adj_flags
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the required octet fields for the SR Adj-SID sub-TLV.
 Possible values are described below:

 bbit Backup flag. Set if the Adj-SID refers to an adjacency
 being protected.

 vbit Value/Index flag. If set, the Prefix-SID carries an absolute
 value. If not set, the Prefix-SID carries an index.

 lbit Local/Global flag. If set, the value/index carried
 by the Prefix-SID has local significance. If not set,
 the value/index carried by this sub-TLV has global
 significance.

 sbit Set Flag. If set, it indicates that the Adj-SID refers to
 a set of adjacencies

 Use "|" to specify multiple flags. The default value is vbit|lbit.

 -sr_adj_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the SID value for the SR Adj-SID
 sub-TLV. The value must be an integer. The default value is 16.

 -sr_adj_value_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step applied to the -sr_adj_value for
 subsequent routes. The value must be an integer. The default
 value is 1.

 -sr_adj_weight
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the weight to be used for load balancing purposes.
 Possible values range from 1 to 255. The default value is 1.

 -sr_algorithms
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the algorithm to use to calculate reachability.
 The available value is 0. The default value is 0.

 -sr_cap_range
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the ending value that, along with the starting value
 set by -sr_cap_value, defines the range of the SR Capabilities
 sub-TLV. The default value is 100.
 
ISIS Functions
431
 -sr_cap_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting SID for the SR Capabilities sub-TLV. The
 value must be an integer. The default value is 100.

 -sr_cap_value_type
 Spirent Extension (for Spirent HLTAPI only).
 Type of the segment identifier. Possible values are label and
 sid.

 label 20-bit label
 sid 32-bit SID

 The default value is label.

 -sr_config_prefix_sid_route_enabled
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables Prefix-SID sub-TLV to preserve the IP
 Reachability TLV while propagating across level boundaries.
 Possible values are true (enable) and false (disable). The
 default value is false.

 -sr_sid
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the global index for the Prefix-SID TLV. The value must
 be an integer. The default value is 0.

 -sr_sid_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step applied to -sr_sid for subsequent routes. The value must
 be an integer. The default value is 1.
Arguments Unsupported by Save as HLTAPI:
 The sth::emulation_isis_lsp_generator function is currently not supported by Save
 to HLTAPI. To test with this function, you must configure it manually in the
 generated Spirent HLTAPI scripts.
Return Values
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 elem_handle The handle that identifies ISIS LSP generator parameters.
 Can be used for modes delete or modify as elem_handle.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).

 lsp_handle The handle list of IsisLspConfig under certain isis router.
 This can be used to create traffic.
Description:
 Each emulated IS-IS router simulates a topology of inter-connected routers behind
 itself. It accomplishes this by advertising Link State Protocol Data Units
 (LSPs), with the IS Neighbors TLV (Type/Length/Value) or the Extended
 Reachability TLV, to the SUT.
 The sth::emulation_isis_lsp_generator function creates and configures IP routes
 for the IS-IS protocol. Use the -handle/elem_handle argument to identify the
 router for which to create, modify, or delete a route. (The router handle value
 is contained in the keyed list returned by the emulation_isis_config function.)
 Use the -mode argument to specify the action to perform. See the -mode argument
 for a description of the actions.
Examples:
 The following example creates a route tree topology for each IS-IS
 router specified by [lindex $hSession1($i) 0]:

 ##Creates lsp topology:grid
 set lspStatus [sth::emulation_isis_lsp_generator \
ISIS Functions
432
 -mode create \
 -handle [lindex $hIsisRouter($port,$i) $r] \
 -type grid \
 -router_id_start $ipAddr \
 -ipv4_addr_start $ipPrefix \
 -system_id_start $isisSystemId \
 -level LEVEL2\
 -enable_loopback_adver false\
 ]
 ##Output lspStatus:
 {elem_handle isislspgenparams1}
 {status 1}
 {lsp_handle ipv4networkblock1 ipv4networkblock2 ...}
 set lspGenHandle [keylget lspStatus elem_handle]
 The following example modifies any parameter under elem_handle

 set lspStatus [HLTCRS sth::emulation_isis_lsp_generator \
 -mode modify \
 -elem_handle $lspGenHandle \
 -internal_count 1000\
 -external_count 2000\
 ]
 The following example deletes the elem_handle
 set lspStatus [HLTCRS sth::emulation_isis_lsp_generator \
 -mode delete \
 -elem_handle $lspGenHandle \
 ]
The following example configures Segment Routing on ISIS routes:
 set lspStatus [sth::emulation_isis_lsp_generator \
 -mode create \
 -handle $isis_hnd1 \
 -type tree \
 -loopback_adver_enable true\
 -tree_if_type POINT_TO_POINT\
 -internal_emulated_routers NONE\
 -internal_simulated_routers ALL\
 -internal_count 0 \
 -tree_max_if_per_router 1\
 -tree_num_simulated_routers 2\
 -router_id_start 3.0.0.1 \
 -ipv4_addr_start 3.0.0.0 \
 -system_id_start 100000000001 \
 -isis_level LEVEL2\
 -segment_routing_enabled true\
 -sr_algorithms 0\
 -sr_cap_range 100\
 -sr_cap_value 100\
 -sr_cap_value_type label]

 Output:
 {elem_handle isislspgenparams1} {status 1} {lsp_handle {ipv4networkblock1
 ipv4networkblock2}}
Sample Input: See Examples
Sample Output: See Examples
Notes: None
End of Procedure Header
ISIS Functions
433
sth::emulation_isis_info
Name:
 sth::emulation_isis_info
Purpose:
 Retrieves statistics for the ISIS router configured on the specified test
 port.
Synopsis:
 sth::emulation_isis_info
 -handle <isis_router_handle>
 -mode { stats|clear_stats }
Arguments:
 -handle
 The router for which you want the information. This argument
 is mandatory.
 -mode
 Specifies the action to perform. Possible values are stats
 and clear_stats. The default value is stats. The modes are
 described below:
 stats - Returns transmitted and received statistics of the
 specified ISIS router.
 clear_stats - Clears all statistics (transmitted and
 received counters) of the specified ISIS router.
Return values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 The following keys are returned when you specify -mode stats:
 aggregated_l1_csnp_rx Number of L1 Complete Sequence Number
 PDUs (CSNPs) received from the SUT
 aggregated_l1_lan_hello_rx Number of L1 Local Area Network (LAN)
 hellos received from the SUT
 aggregated_l1_lsp_rx Number of L1 LSPs received from the SUT
 aggregated_l1_psnp_rx Number of L1 Partial Sequence Number
 PDUs(PSNPs) received from the SUT
 aggregated_l2_csnp_rx Number of L2 CSNPs received from the SUT
 aggregated_l2_lan_hello_rx Number of L2 LAN hellos received from the SUT
 aggregated_l2_lsp_rx Number of L2 Layered Service Providers
 (LSPs) received from the SUT
 aggregated_l2_psnp_rx Number of L2 PSNPs received from the SUT
 aggregated_p2p_hello_rx Number of point-to-point hellos received
 from the SUT
 aggregated_l1_csnp_tx Number of L1 CSNPs sent to the SUT
 aggregated_l1_lan_hello_tx Number of L1 LAN hellos sent to the SUT
 aggregated_l1_lsp_tx Number of L1 LSPs sent to the SUT
 aggregated_l1_psnp_tx Number of L1 PSNPs sent to the SUT
 aggregated_l2_csnp_txf Number of L2 CSNPs sent to the SUT
 aggregated_l2_lan_hello_tx Number of L2 LAN hellos sent to the SUT
 aggregated_l2_lsp_tx Number of L2 LSPs sent to the SUT
 aggregated_l2_psnp_tx Number of L2 PSNPs sent to the SUT
 aggregated_p2p_hello_tx Number of point-to-point hellos sent to the SUT
Description:
 The sth::emulation_isis_info function provides information about
 the routers specified for the ISIS configuration.
ISIS Functions
434
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0).
 Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input:
 puts "-------------ISIS info-----------------"
 set isis_stats [sth::emulation_isis_info -handle $isis_handle ]
 puts "stats: $isis_stats "
 set isis_stats [sth::emulation_isis_info -handle $isis_handle -mode
 clear_stats] puts "clear_stats: $isis_stats "

 Sample Output:
 stats: {status 1} {aggregated_l1_psnp_rx 0} {aggregated_p2p_hello_rx 0}
 {aggregated_l2_lsp_tx 0} {aggregated_l2_psnp_rx 0}
 {aggregated_p2p_hello_tx 0} {aggregated_l1_psnp_tx 0}
 {aggregated_l2_psnp_tx0} {aggregated_l1_csnp_rx 0}
 {aggregated_l2_csnp_rx 0} {aggregated_l1_csnp_tx 0}
 {aggregated_l2_csnp_tx 0} {aggregated_l1_lsp_rx 0}
 {aggregated_l2_lan_hello_rx 0} {aggregated_l2_lan_hello_tx 1}
 {aggregated_l1_lsp_tx 0} {aggregated_l1_lan_hello_rx 0}
 {aggregated_l1_lan_hello_tx 1} {aggregated_l2_lsp_rx 0}
 {procName emulation_isis_info} {handles router1}

 clear_stats: {status 1} {procName emulation_isis_info} {handles router1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_isis_info (
 handle = device,
 mode = 'stats');
 Sample Output:
 {'status': '1', 'aggregated_l1_lsp_rx': '0', 'aggregated_l2_lan_hello_tx': '0',
 'aggregated_l2_csnp_tx': '0', 'aggregated_l1_lsp_tx': '0',
 'aggregated_l2_lsp_tx': '0', 'aggregated_l2_lsp_rx': '0', 'procName':
 'emulation_isis_info', 'aggregated_l1_psnp_rx': '0', 'aggregated_l2_psnp_rx':
 '0', 'aggregated_p2p_hello_tx': '0', 'aggregated_l1_psnp_tx': '0', 'handles':
 'router1', 'aggregated_l2_psnp_tx': '0', 'aggregated_l1_csnp_rx': '0',
 'aggregated_l1_csnp_tx': '0', 'aggregated_p2p_hello_rx': '0',
 'aggregated_l1_lan_hello_tx': '0', 'aggregated_l2_lan_hello_rx': '0',
 'aggregated_l1_lan_hello_rx': '0', 'aggregated_l2_csnp_rx': '0'}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::emulation_isis_info (
 handle => "$device",
 mode => 'stats');
 Sample Output:
 $VAR1 = 'aggregated_l1_lsp_rx';
 $VAR2 = '0';
 $VAR3 = 'aggregated_l1_csnp_tx';
 $VAR4 = '0';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'aggregated_l2_lsp_rx';
 $VAR8 = '0';
 $VAR9 = 'aggregated_l2_psnp_tx';
 $VAR10 = '0';
 $VAR11 = 'procName';
 $VAR12 = 'emulation_isis_info';
 $VAR13 = 'aggregated_l1_lan_hello_rx';
 $VAR14 = '0';
 $VAR15 = 'aggregated_l1_csnp_rx';
 $VAR16 = '0';
ISIS Functions
435
 $VAR17 = 'handles';
 $VAR18 = 'router2';
 $VAR19 = 'aggregated_l2_csnp_tx';
 $VAR20 = '0';
 $VAR21 = 'aggregated_l2_lsp_tx';
 $VAR22 = '0';
 $VAR23 = 'aggregated_l2_csnp_rx';
 $VAR24 = '0';
 ...
Notes:
 None.
End of Procedure Header
L2TP Functions
436
L2TP Functions
Functions:
sth::l2tp_config
sth::l2tp_control
sth::l2tp_stats
sth::l2tp_config
Name:
 sth::l2tp_config
Purpose:
 Creates, enables, modifies, or deletes an emulated L2TP session or tunnel
 on the specified test port of a Spirent HLTAPI chassis. Each port can have
 up to 32000 sessions and 32000 tunnels.
 Layer Two Tunneling Protocol (L2TP) is a tunneling protocol that supports
 virtual private networks (VPNs). L2TP helps tunnel PPP packets across a
 network transparently. It combines the features of Cisco's Layer 2
 Forwarding (L2F) and Microsoft's Point-to-Point Tunneling (PPTP) protocol.
 L2TP is an extension of PPP. Spirent TestCenter supports L2TPv2.
Synopsis:
 sth::l2tp_config
 -port_handle {l2tp_port_handle}
 [-l2_encap { ethernet_ii | ethernet_ii_vlan | ethernet_ii_qinq | atm_snap |
 atm_vc_mux }]
 [-num_tunnels <1-32000>]
 [-l2tp_src_addr { ip } ]
 [-l2tp_src_count <1-112> ]
 [-l2tp_src_step <a.b.c.d>]
 [-l2tp_dst_addr { ip } ]
 [-l2tp_dst_count <1-112> ]
 [-l2tp_dst_step <a.b.c.d>]
 [-l2tp_mac_addr < aa:bb:cc:dd:ee:ff >]
 [-l2tp_mac_step < aa:bb:cc:dd:ee:ff >]
 [-sessions_per_tunnel <1-32000>]
 [-udp_src_port <1-65535>]
 [-attempt_rate <1-1000>]
 [-auth_mode {none|pap|chap|pap_or_chap}]
 [-username <username>]
 [-username_wc {0|1}]
 [-password <password>]
 [-password_wc {0|1}]
 [-wildcard_pound_start<0-65535>]
 [-wildcard_pound_end<0-65535>]
 [-wildcard_question_start <0-65535>]
 [-wildcard_question_end <0-65535>]
 [-wildcard_bang_end <0-65535>]
 [-wildcard_bang_start <0-65535>]
 [-wildcard_dollar_end <0-65535>]
 [-wildcard_dollar_start <0-65535>]
 [-auth_req_timeout <1-65535>]
 [-avp_framing_type { sync | async }]
 [-avp_hide_list ]
 [-avp_tx_connect_speed <1 - 65535>]
 [-config_req_timeout <1-65535>]
 [-max_auth_req <1-65535>]
 [-max_ipcp_req <1-65535>]
 [-max_terminate_req <1-65535>]
 [-domain_group_map ]
 [-echo_req {1|0|TRUE|FALSE}]
 [-echo_req_interval <1-65535>]
L2TP Functions
437
 [-max_echo_acks <0-65535>]
 [-enable_magic {1|0}]
 [-hello_interval <1-1024>]
 [-hello_req {1|0|TRUE|FALSE}]
 [-hostname <pppox_host_name>]
 [-hostname_wc {1|0}]
 [ -mode {lac | lns}
 [-ppp_client_ip <a.b.c.d>]
 [-ppp_client_step <a.b.c.d>]
 [-ppp_server_ip <a.b.c.d>]
 [-ppp_server_step <a.b.c.d>]
 [-pvc_incr_mode {vpi | vci | both}]
 [-redial {0 | 1 }]
 [-redial_max <1-20>]
 [-redial_timeout <1-20>]
 [-rws <1-2048>]
 [-secret <wildcard>]
 [-secret_wc {1|0}]
 [-session_id_start <1-65535>]
 [-sessions_per_tunnel <1-65535>]
 [-terminate_req_timeout <1-65535>]
 [-tunnel_id_start <1-65535>]
 [-vci <0-65535>]
 [-vci_count <0-65535>]
 [-vci_step <0-65535>]
 [-vpi <0-4096>]
 [-vpi_count <1-4096>]
 [-vpi_step <0-4096>]
 [-pvc_incr_mode {vpi|vci|both}]
 [-vlan_id <1-4095>]
 [-vlan_count <1-4095>]
 [-vlan_id_step <0-4095>]
 [-vlan_user_priority <0-7>]
 [-vlan_id_outer <1-4096>]
 [-vlan_count_outer <integer>]
 [-vlan_id_step_outer <0-4095>]
 [-vlan_user_priority_outer <0-7>]
 [-ppp_auto_retry { TRUE | FALSE }]
 [-ppp_retry_count <1-65535>]
 [-qinq_incr_mode {inner|outer|both}]
 [-force_lcp_renegotiation { TRUE | FALSE }]
 [-lcp_proxy_mode {none|authentication|lcponly}]
Arguments:
 -attempt_rate
 Specifies the time interval, in seconds, that
 Spirent TestCenter attempts to bring up sessions or connect
 to tunnels. Possible values range from 1 to 1000. The
 default value is 100.
 -auth_mode
 Specifies the authentication mode. During the Link Control
 Protocol (LCP) phase, one peer may send an authentication
 challenge to the other. LCP supports two authentication
 protocols:
 - Password Authentication Protocol (PAP). PAP is a simple
 authentication protocol in which a peer sends a
 password in response to the challenge.
 - Challenge Handshake Authentication Protocol (CHAP).
 CHAP is based on the message digest concept in which
 the PPPoE peers share a secret password value but do
 not send that value across the connection. A peer sends
 a challenge (containing a random number value), the
 challenged peer uses the challenge value together with
 the password to calculate a message digest value. The
 challenged peer returns a response containing the
 message digest. If the transmitted message digest
 matches the same calculation performed by the
 challenging peer, the connection setup can continue.
L2TP Functions
438
 Possible values are:
 none - No authentication.
 pap - PAP
 chap - CHAP MD5
 pap_or_chap - Automatically negotiated; accepts both PAP
 and CHAP offered by the DUT.
 The default is none.
 -auth_req_timeout
 Specifies the timeout wait period, in seconds, for the
 server to acknowledge either a Configure Request or a
 Terminate Request. Possible values range from 1 to 65535.
 The default is 3 seconds.
 -avp_framing_type
 Sets AVP value to be sent as framing type. Possible values
 are sync or async. The default is sync.
 sync - Indicates that the synchronous framing is supported.
 async - Indicates that the asynchronous framing is supported.
 -avp_hide_list
 A list of integers corresponding to AVP. The default is 0.
 -avp_tx_connect_speed
 Sets AVP value to be sent as tx connect speed. Possible
 values range from 1 to 65535. The default is 56000.
 -config_req_timeout
 Specifies the timeout value in seconds for acknowledgement
 of a Configure Request or Terminate Request. When this
 expires, another Configure-Request packet is sent, until the
 value defined for the -max_configure_req argument is
 reached. After that, the session is terminated. This is a
 port-wide option. Any subsequent use of this option on a
 port after the initial "-mode create" will overwrite any
 previous setting. Possible values range from 1 to 65535. The
 default is 3. See also -max_configure_req.
 -domain_group_map
 A list of domain groups to LNS IP mapping. Each domain group
 can have thousands of domains. With the help of domain group
 it is very easy to map thousands of domains to one or more
 LNS IP addresses. Each domain group is defined as:
 { { domain_name } {lnsIP1 lnsIP2} }, where domain_name is
 defined as
 {name wc wc_start wc_end <wc_repeat(default 1)>}.
 - name <string> : name to be used for the domain(s).
 - wc {1|0} : enables wildcard substitution in the name
 field. (default 0)
 - wc_start <0-65535> : starting value for wildcard symbol
 for the name (%) substitution
 - wc_end <0-65535> : ending value for wildcard symbol for
 the name (%) substitution
 - lnsIP <a.b.c.d> : LNS IP address list to be used for this
 domain.
 For example, if you want to set up 20 domains out of which
 cisco1.com to cisco10.com go to 192.1.1.1 and 192.1.1.2, and
 cisco11.com to cisco20.com go to 192.1.2.1. Assuming
 the number of sessions per tunnel is 5, your domain group
 list looks like this:
 { { {cisco%.com 1 1 10} {192.1.1.1 192.1.1.2} }
 { {cisco%.com 1 11 20} {192.1.2.1} } }
 Tunnel allocation looks like this:
L2TP Functions
439
 Sessions 1-5, tunnel1 dst 192.1.1.1;
 Sessions 5-10, tunnel2 dst 192.1.1.2;
 Sessions 11-15, tunnel3 dst 192.1.2.1;
 Sessions 16-20, tunnel4 dst 192.1.2.1.
 -echo_req
 When set to 1 or TRUE, enables Echo Requests. When set to 0
 or FALSE, disables Echo Requests. The default is 0.

 -echo_req_interval
 Specifies the time interval in seconds for sending LCP echo
 requests. Valid only if -echo_req is set to 1. Possible
 values range from 1 to 65535. The default is 10.
 -max_echo_acks
 Specifies The number of consecutive, unanswered echo
 requests to send before failing the subscriber session.
 Valid only if -echo_req is set to 1. Possible
 values range from 0 to 65535. The default is 10.
 -enable_magic
 Enables or disables negotiation of magic numbers. Possible
 values are 0 (disabled) and 1 (enabled). The default is 1.
 -hello_interval
 Sets time interval between sending of the hello request.
 Only applicable if the -hello_req is set to 1. Possible
 values range from 1 to 65535. The default is 60.
 -hello_req
 Enables or disables sending of HELLO messages. Possible values
 are 0 (FALSE) and 1 (TRUE). The default is 0.

 -hostname
 The name of the host to use during the tunnel setup. The
 default is server.spirent.com.
 -hostname_wc
 Enables wildcard substitution in the hostname field.
 Possible values are 0 (disable) and 1 (enable). The default
 is 0.
 -l2_encap
 Identifies the type of Layer2 encapsulation to use for a stream.
 Possible values are ethernet_ii, ethernet_ii_vlan, ethernet_ii_qinq,
 atm_snap, and atm_vc_mux.
 The ethernet_ii_vlan and ethernet_ii_qinq options support VLAN
 tagging on Ethernet networks; ethernet_ii does not. The atm_snap
 and atm_vc_mux options support ATM networks. If you use the
 -vlan_* arguments to define a VLAN interface, you must set the L2
 encapsulation type to ethernet_ii_vlan. If you use the
 -vlan_outer_* arguments to define a Q-in-Q interface, you must
 set the L2 encapsulation type to ethernet_ii_qinq. If you use the
 -vci_* and -vpi_* arguments to define an ATM interface, you must
 set the L2 encapsulation type to atm_vc_mux or atm_snap.
 -l2tp_src_addr
 Specifies the base IP address to use for the local IP
 interface on the port. The default is 192.85.1.3.
 -l2tp_src_count
 Number of source IP addresses to simulate on the port.
 Possible values range from 1 to 65535.
 When the -mode argument is set to "lac", the value of this option
 represents the number of the L2TP client, then if the value of
 -l2_encap is set to "ethernet_ii_vlan", the value of this option
 must be divided evenly by the value of -vlan_count. If the value
L2TP Functions
440
 of -l2_encap is set to "ethernet_ii_qinq", the value of this
 option must be divided evenly by the least common multiple of
 vlan_count and vlan_count_outer. Likewise, if the value of
 -l2_encap is set to "atm_snap" or "atm_vc_mux" then the value of
 this option must be divided evenly by the least common multiple
 of vpi_count and vci_count.
 -l2tp_src_step
 The modifier for the L2TP source address for multiple source
 addresses. The default is 0.0.0.1.
 -l2tp_dst_addr
 Specifies the base destination IP address to use for setting
 up tunnels. The default is 192.85.1.3.
 -l2tp_dst_count
 Number of destination IP addresses to simulate on the port.
 Possible values range from 1 to 65535.
 When the -mode argument is set to lns, the value of this option
 represents the number of the L2TP client. Then if the value of
 -l2_encap is set to "ethernet_ii_vlan", then the value of this
 option must be divided evenly by the value of -vlan_count. If the
 value of -l2_encap is set to "ethernet_ii_qinq", then the value
 of this option must be divided evenly by the least common
 multiple of vlan_count and vlan_count_outer. Likewise, if the
 value of -l2_encap is set to "atm_snap" or "atm_vc_mux", then the
 value of this option must be divided evenly by the least common
 multiple of vpi_count and vci_count.
 -l2tp_dst_step
 The modifier for the L2TP destination address for multiple
 destination addresses. The default is 0.0.0.1.
 -l2tp_mac_addr
 Spirent Extension (for Spirent HLTAPI only).
 Defines the MAC address of L2TP device
 (L2TP Network Server or L2TP Access Concentrator).
 The default is 00:10:94:00:00:02.
 -l2tp_mac_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the modifier for the L2TP MAC address. The default is
 00:00:00:00:00:01.
 -max_auth_req
 Specifies the maximum number of authentication requests that
 can be sent without getting an authentication response from
 the DUT. Possible values range from 1 to 65535.
 -max_ipcp_req
 Specifies the maximum number of NCP Configure-Requests that
 can be sent without acknowledgement before a session fails.
 Possible values range from 1 to 65535. The default is 10.
 See also -terminate_req_timeout.
 -max_terminate_req
 Specifies the maximum number of times a Terminate
 Requests that can be sent before a session fails. Possible
 values range from 1 to 65535. The default is 10. See also
 -terminate_req_timeout.
 -mode
 Specifies whether the port will be acting as an LAC or LNS.
 LAC - Hosts will emulate an L2TP Access Concentrator
 LNS - Hosts will emulate an L2TP Network Server
 The default is LAC.
 -num_tunnels
 Sets the number of tunnels to configure on the port.
L2TP Functions
441
 Possible values range from 1 to 32000. The default is 1.
 -password
 Specifies the string base from which the passwords are
 generated (for example, Password#) when the authentication
 mode is pap, chap, or pap_or_chap (see -auth_mode). The
 default is "pass". See Notes for information about using
 wildcards in passwords.
 -password_wc
 Enables wildcard substitution in the -password argument.
 Possible values are 0 (false) and 1 (true). If the value is
 set to 1, any wildcards used in -password are replaced with
 the corresponding values for -wildcard_pound_start,
 wildcard_pound_end, wildcard_question_start and
 -wildcard_question_end. If the value is 0, wildcards are not
 replaced in the specified password. The default is 0.
 -port_handle
 Specifies the handle of the port on which to create the
 L2TP sessions and tunnels. This argument is mandatory.
 This port handle is returned by the [sth::interface_config]
 function.
 -ppp_client_ip
 Base IP address of the client IP pool allocated by the LNS.
 Only valid if the mode is lns.
 -ppp_client_step
 Step size to use for allocating client IP addresses. Only
 valid if the mode is lns.
 -ppp_server_ip
 Local IP address of the PPP server. Only valid if the mode
 is lns.
 -ppp_server_step
 Step size to use for allocating server IP addresses. Only
 valid if the mode is lns. See "sth::traffic_config" for the
 step format.
 -pvc_incr_mode
 Specifies the increment to be used when selecting the next
 VPI value to use to emulate clients over ATM interfaces.
 Valid for ATM interfaces only. Valid values are vpi, vci, or
 both.
 -redial
 Determines whether to redial the DUT to reestablish an L2TP link
 Possible values are 0 (false) and 1 (true). If you set it to 0,
 Spirent HLTAPI will redial the DUT to reestablish an L2TP link
 before declaring a failure. The default value is 0.
 -redial_max
 Specifies the maximum number of times Spirent TestCenter
 will redial the DUT to reestablish an L2TP link before
 declaring a failure. Possible values are 1 to 20. The
 default is 1.
 -redial_timeout
 Sets number of seconds to wait between successive attempts
 to redial the DUT to reestablish an L2TP link. Possible
 values are 1 to 20. The default is 1.
 -rws
 Sets the receive window size. Possible values are 1 to 2048.
 The default is 4.
 -tun_auth
 Enables tunnel authentication during the tunnel setup. The
 default is false
L2TP Functions
442
 -secret
 Sets the secret to use during the tunnel setup. You can set a
 range of secrets using the autoincrement feature.
 See also -secret_wc.
 -secret_wc
 Enables wildcard substitution in the -secret argument.
 Possible values are 0 (false) and 1 (true). If the value is
 set to 1, any wildcards used in -secret are replaced with
 the corresponding values for -wildcard_pound_start,
 wildcard_pound_end, wildcard_question_start and
 -wildcard_question_end. If the value is 0, wildcards are not
 replaced in the specified secret. The default is 0.
 -session_id_start
 Sets the starting session ID to be used as local call ID.
 Possible values range from 1 to 65535. The default is 1.
 -sessions_per_tunnel
 Sets the number of sessions number of PPP sessions over each
 tunnel. Possible values range from 1 to 65535. The default
 is 1.
 -terminate_req_timeout
 The maximum amount of time (in seconds) that the
 termination process can take before another Terminate-
 Request packet is sent. If there is no response, another
 packet is sent until the value defined for the
 -max_terminate_req argument is reached, and then the session
 is terminated. Possible values range from 1 to 65535.
 The default is 10. See also -max_terminate_req.
 -tunnel_id_start
 Sets starting tunnel ID to be used as local tunnel ID.
 Possible values range from 1 to 65535. The default is 1.
 -udp_src_port
 Defines the source UDP port to use for setting up tunnels.
 Possible values range from 1 to 65535. The default is 1701.
 -username
 The string base from which the usernames are generated
 (for example, User#) when the authentication mode is
 pap, chap, or pap_or_chap (see -auth_mode). The default is
 "anonymous". See Notes for information about using wildcards
 in passwords.
 -username_wc
 Enables wildcard substitution in the -username argument.
 Possible values are 0 (false) and 1 (true). If the value is
 set to 1, any wildcards used in -username are replaced with
 the corresponding values for -wildcard_pound_start,
 wildcard_pound_end, wildcard_question_start and
 -wildcard_question_end. If the value is 0, wildcards are not
 replaced in the specified username. The default is 0.
 -pvc_incr_mode
 Determines which ID to increment first. Possible values are:
 vci - Increments the Virtual Circuit (VC) ID before the VP ID
 vpi - Increments the Virtual Path (VP) ID before the VC ID
 both - Increments both the VP and VC ID at the same time.
 -vci
 Sets the starting VCI for L2TPoA . Possible values
 range from 0 to 65535.
 -vci_count
 Sets the number of VC IDs to use when generating L2TPoA.
 Possible values range from 1 to 65535. The default is 1.
L2TP Functions
443
 -vci_step
 Sets the step value applied to VCI, L2TPoA only.
 Possible values range from 0 to 65535.
 -vpi
 Sets the starting VPI for L2TPoA. Possible values
 range from 0 to 4096.
 -vpi_count
 Sets the number of VP IDs to use when generating L2TPoA.
 Possible values range from 1 to 4096. The default is 1.
 -vpi_step
 Sets the step value applied to VPI, L2TPooA only. Possible values
 range from 0 to 4096.
 -vlan_count
 Sets the number of VLAN IDs to use when generating L2TPoE
 sessions or tunnels. Spirent HLTAPI assigns VLAN membership in
 round-robin fashion. Possible values range from 1 to 4095. The
 default is 1. Applies only to L2TPoE.
 -vlan_id
 The VLAN ID of the first VLAN sub-interface. Used to
 configure refresh reduction capabilities per RFC 2961.
 Possible values range from 1 to 4095. The default is 1.
 -vlan_id_step
 The value that Spirent HLTAPI uses to increment the VLAN ID.
 Possible step values range from 0 to 4095. The default value is 0.

 -vlan_user_priority
 VLAN user priority assigned to emulated L2TPoE nodes.
 Possible values range from 0 to 7. The default is 0.
 -vlan_count_outer
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of outer VLAN IDs to use when
 generating L2TP clients. Spirent HLTAPI assigns VLAN
 membership in round-robin fashion. Possible values
 range from 0 to 4096. The default is 1.
 -vlan_id_outer
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 1 to 4096. The default is 1. When you use
 -vlan_id_outer, you must specify -vlan_id.
 -vlan_id_step_outer
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_id_outer) for subsequent packets. Possible values
 range from 0 to 4095. You must specify this step when
 you specify the -qinq_incr_mode argument.
 -vlan_user_priority_outer
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -wildcard_bang_start
 Starting value for wildcard symbol 1 (!) substitution
 associated with username and password. Possible values range
 from 0 to 65535. The default is 1. See Notes for more about
 using wildcards.
 -wildcard_bang_end
 Ending value for wildcard symbol 1 (!) substitution
 associated with username and password. Possible values range
 from 0 to 65535. The default is 1. See Notes for more about
 using wildcards.
L2TP Functions
444
 -wildcard_dollar_start
 Starting value for wildcard symbol 2 ($) substitution
 associated with username and password. Possible values range
 from 0 to 65535. The default is 1. See Notes for more about
 using wildcards.
 -wildcard_dollar_end
 Ending value for wildcard symbol 2 ($) substitution
 associated with username and password. Possible values range
 from 0 to 65535. The default is 1. See Notes for more about
 using wildcards.
 -wildcard_pound_start
 Starting numerical value to replace the wildcard pound (#)
 character in user names and passwords, such as user# or
 pwd#. Possible values range from 0 to 65535. The default is
 1. See Notes for more about using wildcards.
 -wildcard_pound_end
 Final numerical value to replace the wildcard pound (#)
 character in user names and passwords, such as user# or
 pwd#. Possible values range from 0 to 65535. The default is
 1. See Notes for more about using wildcards.
 -wildcard_question_start
 Starting numerical value to replace the wildcard question
 mark character in user names and passwords. Possible values
 range from 0 to 65535. The default is 1. See Notes for more
 about using wildcards.
 -wildcard_question_end
 Final numerical value to replace the wildcard question
 mark character in user names and passwords. Possible values
 range from 0 to 65535. The default is 1. See Notes for more
 about using wildcards.
 -ppp_auto_retry
 Enable/disable automatic retry to connect failed PPP sessions.
 Possible values are TRUE and FALSE. The default is FALSE.
 -ppp_retry_count
 The maximum number of automatic retry attempts. Possible values
 range from 0 to 65535. The default is 1. ppp_retry_count
 depends on ppp_auto_retry. Only when ppp_auto_retry is TRUE can
 ppp_retry_count be set
 -qinq_incr_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the increment mode for ethernet_ii_qinq
 encapsulation. This parameter only applies to Q-in-Q
 Ethernet interfaces. Possible values are "inner", "outer"
 and "both". The default is "both". The modes are described below:

 inner - When the number of sessions is greater than
 the inner VLAN count times the outer VLAN count, the
 inner VLAN ID is incremented first until the specified
 number of inner VLANs is exhausted, then the outer
 VLAN ID is incremented. This continues in a
 round-robin fashion until the number of
 sessions is exhausted.
 outer - When the number of sessions is greater than the
 inner VLAN count times the outer VLAN count, the outer
 VLAN ID is incremented first until the specified number
 of outer VLANs is exhausted, and then the inner VLAN ID is
 incremented. This continues in a round-robin fashion
 until the number of sessions is exhausted.
 both - When the number of sessions is greater than the
 inner VLAN count times the outer VLAN count, the 
L2TP Functions
445
 inner VLAN ID and outer VLAN ID increment at the
 same time. This continues in a round-robin fashion
 until the number of sessions is exhausted.
 -force_lcp_renegotiation
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the LCP Renegotiation. Possible values
 are "TRUE" and "FALSE". The default is "FALSE".
 -lcp_proxy_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the proxy mode for lcp. Possible values
 are "none", "lcponly" and "authentication". The default is "none".
 When it is set to "authentication", argument "-auth_mode"
 must be PAP or CHAP.
 Note: This argument is only available whent the "-mode" is set
 to LAC.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the
 Save as HLTAPI function. They will not be generated when you save Spirent
 TestCenter configurations to HLTAPI scripts using Save as HLTAPI. To test
 with these arguments, you must specify them manually as necessary.
 -qinq_incr_mode
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by the Spirent HLTAPI.
 -avp_hide
 -echo_rsp
 -udp_dst_port
 -avp_rx_connect_speed
 -ctrl_chksum
 -ctrl_retries
 -data_chksum
 -disconnect_rate
 -init_ctrl_timeout
 -ipcp_req_timeout
 -length_bit
 -max_ctrl_timeout
 -max_outstanding
 -no_call_timeout
 -offset_bit
 -offset_byte
 -offset_len
 -sequence_bit
 -sess_distribution
 -tun_distribution
 -vlan_user_priority_count
 -vlan_user_priority_step
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles A list of L2TP handles that identify the sessions and tunnels
 created by the sth::l2tp_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::l2tp_config function creates, enables, disables,
 modifies, or deletes an emulated L2TP session or tunnel
 on the specified test port of a Spirent HLTAPI chassis. Use the -mode
 argument to specify whether the port will be acting as a LAC or LNS. (See
 the -mode argument description for information about the modes.)
L2TP Functions
446
 The Spirent TestCenter L2TPv2 Base Package emulates PPPoX clients using
 LAC and LNS devices to distribute traffic through tunnels across a network.
 The access concentrator (LAC) and Network Server (LNS) test devices accept
 incoming PPPoX clients. The DUT also terminates these clients and routes
 IP packets through tunnels. You can use L2TP to test an access concentrator
 with an external or built-in PPP server and an LNS server.
 L2TP has two main components: 1) the L2TP Access Concentrator (LAC),
 which is the device that usually initiates calls, and 2) the L2TP Network Server
 (LNS), which is the server that terminates a call and authenticates the PPP
 stream.
 L2TP uses control messages, which are used in the establishment,
 maintenance, and clearing of tunnels (that is, connections between the L2TP
 Access Concentrator and the L2TP Network Server), to accomplish L2TP over
 UDP on IP. The current implementation of L2TP supports data messages
 to encapsulate PPP frames carried over the tunnel for PPP on L2TP over UDP
 on IP.
 Tunnels are set up through a process of negotiation in which the devices
 responsible for establishing the security arrive at an agreement on the
 authentication, integrity, and confidentiality methods that will be used to
 secure the data during communication across the tunnel.
 If the creation/configuration/delete fails, Spirent TestCenter returns an
 error message. For example, if you try to configure a non-existing session
 handle using Modify mode, an error message is returned.
Example:
 #### HLTAPI for Tcl ####
 There must already exist ports with handle hltLNSPort and hltLACPort
 puts "\n #### #### #### Config LNS... #### #### #### "
 set returnedString_lns [sth::l2tp_config \
 -port_handle $hltLNSPort \
 -mode "lns" \
 -num_tunnels 1 \
 -tunnel_id_start 1 \
 -session_id_start 1 \
 -sessions_per_tunnel 1 \
 -l2tp_dst_addr "5.5.5.55" \
 ]
 puts "\n #### #### #### Config LAC... #### #### #### "
 set returnedString_lac [sth::l2tp_config \
 -port_handle $hltLACPort \
 -mode "lac" \
 -tunnel_id_start 1 \
 -session_id_start 1 \
 -sessions_per_tunnel 1 \
 -l2tp_dst_addr "5.5.5.55" \
 -l2tp_src_addr "5.5.5.66" \
 ]
 Sample Output:
 {{handles l2tp1} {status 1}}
 #### HLTAPI for Python ####
 To configure L2TP on the specified port
 device_ret0 = sth.l2tp_config (
 l2_encap = 'ethernet_ii_vlan',
 l2tp_src_count = '10',
 l2tp_src_addr = '192.85.1.3',
 l2tp_src_step = '0.0.0.1',
 l2tp_dst_addr = '192.85.1.1',
 l2tp_dst_step = '0.0.0.0',
 username_wc = '1',
 password_wc = '1',
L2TP Functions
447
 hostname_wc = '1',
 wildcard_pound_start= '10',
 wildcard_pound_end = '11',
 wildcard_question_start= '4',
 wildcard_question_end= '8',
 wildcard_bang_start = '3',
 wildcard_bang_end = '6',
 port_handle = port_handle[0],
 max_outstanding = '100',
 disconnect_rate = '1000',
 mode = 'lac',
 attempt_rate = '100',
 vlan_id = '100',
 vlan_user_priority = '7',
 vlan_id_step = '0',
 ppp_auto_retry = 'FALSE',
 max_terminate_req = '10',
 auth_req_timeout = '3',
 username = 'spirent#',
 ppp_retry_count = '65535',
 max_ipcp_req = '10',
 echo_req_interval = '10',
 password = 'spirent?',
 config_req_timeout = '3',
 terminate_req_timeout= '3',
 max_echo_acks = '0',
 auth_mode = 'chap',
 echo_req = 'FALSE',
 enable_magic = 'TRUE',
 l2tp_mac_addr = '00:10:94:00:00:05',
 l2tp_mac_step = '00:00:00:00:00:01',
 hello_interval = '60',
 hello_req = 'FALSE',
 force_lcp_renegotiation= 'FALSE',
 tunnel_id_start = '1',
 num_tunnels = '20',
 tun_auth = 'TRUE',
 session_id_start = '1',
 redial = 'FALSE',
 avp_framing_type = 'sync',
 redial_max = '1',
 redial_timeout = '1',
 sessions_per_tunnel = '30',
 avp_tx_connect_speed= '56000',
 udp_src_port = '1701',
 lcp_proxy_mode = 'none',
 secret = 'spirent',
 hostname = 'server.spirent.com!',
 rws = '4');

 Sample Output:
 {'status': '1', 'procName': 'l2tp_config', 'handles': 'host3', 'handle': 'host3'}
 #### HLTAPI for Perl ####
 To configure L2TP on the specified port

 my %device_ret0 = sth::l2tp_config (
 l2_encap => 'ethernet_ii_vlan',
 l2tp_src_count => '10',
 l2tp_src_addr => '192.85.1.3',
 l2tp_src_step => '0.0.0.1',
 l2tp_dst_addr => '192.85.1.1',
 l2tp_dst_step => '0.0.0.0',
 username_wc => '1',
 password_wc => '1',
 hostname_wc => '1',
 wildcard_pound_start=> '10',
 wildcard_pound_end => '11',
 wildcard_question_start=> '4',
 wildcard_question_end=> '8',
 wildcard_bang_start => '3',
L2TP Functions
448
 wildcard_bang_end => '6',
 port_handle => "$hport[1]",
 max_outstanding => '100',
 disconnect_rate => '1000',
 mode => 'lac',
 attempt_rate => '100',
 vlan_id => '100',
 vlan_user_priority => '7',
 vlan_id_step => '0',
 ppp_auto_retry => 'FALSE',
 max_terminate_req => '10',
 auth_req_timeout => '3',
 username => 'spirent#',
 ppp_retry_count => '65535',
 max_ipcp_req => '10',
 echo_req_interval => '10',
 password => 'spirent?',
 config_req_timeout => '3',
 terminate_req_timeout=> '3',
 max_echo_acks => '0',
 auth_mode => 'chap',
 echo_req => 'FALSE',
 enable_magic => 'TRUE',
 l2tp_mac_addr => '00:10:94:00:00:05',
 l2tp_mac_step => '00:00:00:00:00:01',
 hello_interval => '60',
 hello_req => 'FALSE',
 force_lcp_renegotiation=> 'FALSE',
 tunnel_id_start => '1',
 num_tunnels => '20',
 tun_auth => 'TRUE',
 session_id_start => '1',
 redial => 'FALSE',
 avp_framing_type => 'sync',
 redial_max => '1',
 redial_timeout => '1',
 sessions_per_tunnel => '30',
 avp_tx_connect_speed=> '56000',
 udp_src_port => '1701',
 lcp_proxy_mode => 'none',
 secret => 'spirent',
 hostname => 'server.spirent.com!',
 rws => '4');
 Sample Output:
 $VAR1 = 'procName';
 $VAR2 = 'l2tp_config';
 $VAR3 = 'handles';
 $VAR4 = 'host4';
 $VAR5 = 'handle';
 $VAR6 = 'host4';
 $VAR7 = 'status';
 $VAR8 = '1';

Notes:
 You can generate outgoing usernames and passwords based on wildcard
 replacements. The following example generates 50 user names and passwords:
 sth::l2tp_config -port_handle $hltLACPort \
 -mode "lac" \
 -num_tunnels $num_tunnels \
 -username User# \
 -password Pass? \
 -wildcard_pound_start 1 \
 -wildcard_pound_end 50 \
 -wildcard_question_start 1 \
 -wildcard_question_end 50 \
 The # character represents a counter. For example, define a counter to
 start at 1 (-wildcard_pound_start 1), run to 50 (-wildcard_pound_end), and
 increment by 1. Then, in the -username argument, specify user#, which would
L2TP Functions
449
 be replaced with User1, User2,and so on, when authentication begins.
 The # wildcard is replaced with a counter, starting at 1. For example,
 User# becomes User1, User2, and so on. If you do not specify #, then
 no substitution will take place.
End of Procedure Header
sth::l2tp_control
Name:
 sth::l2tp_control
Purpose:
 Starts, stops, and restarts the emulated L2TP session or tunnel.
Synopsis:
 sth::l2tp_control
 -action {connect|disconnect|reset|clear|pause|resume|retry}
 -handle <l2tpox_handle>
Arguments:
 -handle
 Specifies the handle for the L2TP session or tunnel to be
 controlled. That is, the L2TP session or tunnel to start,
 stop, or restart. This argument is mandatory.
 -mode
 Specifies the action to be taken. This argument is
 mandatory. Possible values are:
 connect - Start the configured sessions and tunnels.
 disconnect - Tears down established sessions and tunnels.
 reset - Stops and then starts all L2TpoX sessions on the
 specified device. A session is not notified of
 termination, and a Terminate Request packet
 is not sent to the peers.
 clear - Clears the status and statistics of the PPP
 sessions.
 pause - Pauses all the sessions.
 resume - Resumes all the sessions.
 retry - Attempts to connect PPP sessions that have
 previously failed to establish.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 none
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::l2tp_control function controls the starting and of L2TP sessions,
 and restoring and tearing down of L2TP tunnels. When you call the
L2TP Functions
450
 sth::l2tp_control function, you specify either a handle. Spirent HLTAPI
 applies the specified action to the specified session or tunnel.
Examples:
 #### HLTAPI for Tcl ####
 #Assume that we are already given L2TP LAC/LNS Session
 handle lacSessionHandle or lnsSessionHandle
 #To start the LAC/LNS
 set lacStatus [::sth::l2tp_control -mode connect -handle $lacSessionHandle]
 set lnsStatus [::sth::l2tp_control -mode connect -handle $lnsSessionHandle]
 #To stop the LAC/LNS
 set lacStatus [::sth::l2tp_control -mode stop -handle $lacSessionHandle]
 set lnsStatus [::sth::l2tp_control -mode stop -handle $lnsSessionHandle]
 Sample Output: {status 1}
 #### HLTAPI for Python ####
 To start the configured sessions and tunnels
 my %ctrl_ret1 = sth::l2tp_control (
 handle => "$device_list",
 action => 'connect');

 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 To start the configured sessions and tunnels
 my %ctrl_ret3 = sth::l2tp_control (
 handle => "$device_list",
 action => 'connect');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None
End of Procedure Header
sth::l2tp_stats
Name:
 sth::l2tp_stats
Purpose:
 Returns information about the L2TPoX sessions configured on the
 specified test port. Statistics include the connection status and number
 and type of messages sent and received from the specified port.
Synopsis:
 sth::l2tp_stats
 -handle <l2tp_handle>
 [-mode { aggregate | session | tunnel}]
Arguments:
 -handle
 The L2TP session or tunnel for which you want information. This
 argument is mandatory.
 -mode
 Specifies the kind of information you want to see. Possible
 values are aggregate, session, and tunnel. 
L2TP Functions
451
 aggregate - returns transmitted and received statistics for
 all configured L2TP sessions associated with the
 specified port and a status value (1 for success).
 session - returns transmitted and received statistics for only
 the L2TP sessions specified with -handle.
 Note: Session statistics are only valid after the L2TP
 sessions are established. They will not be returned nor
 accessible until you are connected.
 tunnel - returns transmitted and received statistics for only
 the L2TP tunnels specified with -handle.
Cisco-specific Arguments:
 The following keys are specific to the Cisco HLTAPI but are not
 supported by the Spirent HLTAPI.
 aggregate.out_of_order_rx.......
 aggregate.out_of_win_rx
 aggregate.duplicate_rx
 aggregate.in_order_rx
 aggregate.retransmits
 aggregate.tunnels_neg
 session.<session ID>.chap_auth_chal_rx
 session.<session ID>.chap_auth_fail_rx
 session.<session ID>.chap_auth_rsp_tx
 session.<session ID>.chap_auth_succ_rx
 session.<session ID>.completed
 session.<session ID>.connect_success
 session.<session ID>.echo_req_rx
 session.<session ID>.echo_rsp_tx
 session.<session ID>.failed_connect
 session.<session ID>.failed_disconnect
 session.<session ID>.ip_addr
 session.<session ID>.ipcp_cfg_ack_rx
 session.<session ID>.ipcp_cfg_ack_tx
 session.<session ID>.ipcp_cfg_nak_rx
 session.<session ID>.ipcp_cfg_nak_tx
 session.<session ID>.ipcp_cfg_rej_rx
 session.<session ID>.ipcp_cfg_rej_tx
 session.<session ID>.ipcp_cfg_req_rx
 session.<session ID>.ipcp_cfg_req_tx
 session.<session ID>.lcp_cfg_ack_rx
 session.<session ID>.lcp_cfg_ack_tx
 session.<session ID>.lcp_cfg_nak_rx
 session.<session ID>.lcp_cfg_nak_tx
 session.<session ID>.lcp_cfg_rej_rx
 session.<session ID>.lcp_cfg_rej_tx
 session.<session ID>.lcp_cfg_req_rx
 session.<session ID>.lcp_cfg_req_tx
 session.<session ID>.pap_auth_ack_rx
 session.<session ID>.pap_auth_nak_rx
 session.<session ID>.pap_auth_req_tx
 session.<session ID>.setup_time
 session.<session ID>.term_ack_rx
 session.<session ID>.term_ack_tx
 session.<session ID>.term_req_rx
 session.<session ID>.term_req_tx
 session.<session ID>.tx_pkt_acked
 tunnel.<tunnel ID>.zlb_tx
 tunnel.<tunnel ID>.icrq_tx
 tunnel.<tunnel ID>.icrp_tx
 tunnel.<tunnel ID>.iccn_tx
 tunnel.<tunnel ID>.cdn_tx
 tunnel.<tunnel ID>.icrq_rx
 tunnel.<tunnel ID>.icrp_rx
 tunnel.<tunnel ID>.iccn_rx
L2TP Functions
452
 tunnel.<tunnel ID>.cdn_rx
 tunnel.<tunnel ID>.zlb_rx
 tunnel.<tunnel ID>.out_of_order_rx
 tunnel.<tunnel ID>.out_of_win_rx
 tunnel.<tunnel ID>.duplicate_rx
 tunnel.<tunnel ID>.in_order_rx
 tunnel.<tunnel ID>.retransmits
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null
 The following keys are returned when you specify -mode aggregate:
 *** Aggregate stats ***
 aggregate.atm_mode......Specifies whether the port is in ATM mode
 (currently not supported)
 aggregate.avg_setup_time........Average time mandatory to bring a session
 up
 aggregate.chap_auth_rsp_tx......Number of CHAP messages sent
 aggregate.chap_auth_chal_rx.....The number of CHAP messages received*
 aggregate.chap_auth_succ_rx......The number of CHAP messages received*
 aggregate.chap_auth_fail_rx......The number of CHAP messages received*
 aggregate.connecting............PPPoE clients that are connecting. If
 aggregate.connecting is 1, then there are
 sessions connecting on the port.
 aggregate.connected.............All sessions that have finished with NCP
 negotiation. If aggregate.connected is 1,
 then PPPoX has finished attempting all
 configured PPPoX sessions.
 aggregate.idle..................The sessions have been disconnected or
 terminated. If aggregate.idle is 1, then
 the port state is idle.
 aggregate.disconnecting.........If aggregate.disconnecting is 1, then L2TP
 sessions are disconnecting.
 aggregate.connect_attempts......Number of sessions attempted
 aggregate.connect_success.......Number of sessions that connected
 successfully
 aggregate.disconnect_failed.....Number of sessions that failed to
 disconnect
 aggregate.disconnect_success....Number of sessions that disconnected
 successfully
 aggregate.echo_req_rx...........Number of Echo Requests received
 aggregate.echo_rsp_tx...........Number of Echo Replies sent
 aggregate.lcp_cfg_req_rx........Number of LCP Configure-Request messages
 received
 aggregate.lcp_cfg_req_tx........Number of LCP Configure-Request messages
 sent
 aggregate.lcp_cfg_rej_rx........Number of LCP Configure-Reject messages
 received
 aggregate.lcp_cfg_rej_tx........Number of LCP Configure-Reject messages
 sent
 aggregate.lcp_cfg_ack_rx........Number of LCP Configure-ACK messages
 received
 aggregate.lcp_cfg_ack_tx........Number of LCP Configure-ACK messages
 sent
 aggregate.lcp_cfg_nak_rx........Number of LCP Configure-NAK messages
L2TP Functions
453
 received
 aggregate.lcp_cfg_nak_tx........Number of LCP Configure-NAK messages sent
 aggregate.max_setup_time........Maximum time to bring a session up
 aggregate.min_setup_time........Minimum time to bring a session up
 aggregate.num_sessions..........Number of sessions configured
 aggregate.sessions_up...........Number of sessions currently active
 aggregate.sessions_down.........Number of sessions that failed to connect
 aggregate.success_setup_rate....Number of sessions per second that have
 been established
 aggregate.term_ack_rx...........Number of LCP Terminate-ACK messages
 received
 aggregate.term_ack_tx...........Number of LCP Terminate-ACK messages
 sent
 aggregate.term_req_rx...........Number of LCP Terminate-Request messages
 received
 aggregate.term_req_tx...........Number of LCP Terminate-Request messages
 sent
 aggregate.zlb_tx............... Number of Zero-Length Body (ZLB) Messages sent.
 aggregate.sccrq_tx..............Number of Start-Control-Connection-Request
 (SCCRQ) packets transmitted.
 aggregate.scccn_tx..............Number of Start-Control-Connection-
 Connected (SCCCN) packets transmitted.
 aggregate.sccrp_tx..............Number of Start-Control-Connection-Reply
 (SCCRP) packets transmitted.
 aggregate.stopccn_tx............Number of Stop-Control-Connection-
 Notification (StopCCN)
 packets transmitted.
 aggregate.hello_tx..............Number of Hello packets transmitted
 aggregate.icrq_tx...............Number of Incoming-Call-Request (ICRQ)
 packets transmitted
 aggregate.icrp_tx...............Number of Incoming-Call-Reply (ICRP)
 packets transmitted
 aggregate.iccn_tx...............Number of Incoming-Call-Connected (ICCN)
 packets transmitted
 aggregate.cdn_tx................Number of Call-Disconnect-Notify (CDN)
 packets transmitted
 aggregate.wen_tx............... Number of WAN-Error-Notify (WEN) packets
 transmitted
 aggregate.sli_tx................Number of Set-Link-Info (SLI) packets
 transmitted
 aggregate.zlb_rx................ Number of Zero-Length Body (ZLB) Messages
 received
 aggregate.sccrp_rx..............Number of Start-Control-Connection-Reply
 (SCCRP) packets received
 aggregate.scccn_rx..............Number of Start-Control-Connection-
 Connected (SCCCN) packets received
 aggregate.sccrq_rx..............Number of Start-Control-Connection-Request
 (SCCRQ) packets received
 aggregate.stopccn_rx............Number of Stop-Control-Connection-
 Notification (StopCCN) packets received
 aggregate.hello_rx..............Number of Hello packets received
 aggregate.icrq_rx...............Number of Incoming-Call-Request (ICRQ)
 packets received
 aggregate.icrp_rx...............Number of Incoming-Call-Reply (ICRP)
 packets received.
 aggregate.iccn_rx...............Number of Incoming-Call-Connected (ICCN)
 packets received
 aggregate.cdn_rx................Number of Call-Disconnect-Notify (CDN)
 packets received
 aggregate.wen_rx................Number of WAN-Error-Notify (WEN) packets
 received.
 aggregate.sli_rx................Number of Set-Link-Info (SLI) packets
 received.
 aggregate.tx_pkt_acked......... Number of ACK packets received.
 aggregate.tunnels_up........... Number of tunnels on this port that are in
 the established state
 The following keys are returned when you specify -mode session:
 session.<session ID>.icrq_tx....
 Number of Incoming-Call-Request (ICRQ)
L2TP Functions
454
 packets transmitted
 session.<session ID>.icrp_tx.....
 Number of Incoming-Call-Reply (ICRP)
 packets transmitted
 session.<session ID>.iccn_tx...............
 Number of Incoming-Call-Connected (ICCN)
 packets transmitted
 session.<session ID>.cdn_tx................
 Number of Call-Disconnect-Notify (CDN)
 packets transmitted
 session.<session ID>.icrq_rx...............
 Number of Incoming-Call-Request (ICRQ)
 packets received
 session.<session ID>.icrp_rx...............
 Number of Incoming-Call-Reply (ICRP)
 packets received
 session.<session ID>.iccn_rx...............
 Number of Incoming-Call-Connected (ICCN)
 packets received
 session.<session ID>.cdn_rx................
 Number of Call-Disconnect-Notify (CDN)
 packets received
 The following keys are returned when you specify -mode tunnel:
 tunnel.<tunnel ID>.scccn_tx.....
 Number of Start-Control-Connection-
 Connected (SCCCN) packets transmitted.
 tunnel.<tunnel ID>.sccrp_tx.....
 Number of Start-Control-Connection-Reply
 (SCCRP) packets transmitted.
 tunnel.<tunnel ID>.stopccn_tx............
 Number of Stop-Control-Connection-
 Notification (StopCCN) packets transmitted.
 tunnel.<tunnel ID>.hello_tx..............
 Number of Hello packets transmitted
 tunnel.<tunnel ID>.wen_tx...............
 Number of WAN-Error-Notify (WEN) packets
 transmitted
 tunnel.<tunnel ID>.sli_tx................
 Number of Set-Link-Info (SLI) packets
 transmitted
 tunnel.<tunnel ID>.sccrp_rx..............
 Number of Start-Control-Connection-Reply
 (SCCRP) packets received
 tunnel.<tunnel ID>.scccn_rx..............
 Number of Start-Control-Connection-
 Connected (SCCCN) packets received
 tunnel.<tunnel ID>.sccrq_rx..............
 Number of Start-Control-Connection-Request
 (SCCRQ) packets received
 tunnel.<tunnel ID>.stopccn_rx............
 Number of Stop-Control-Connection-
 Notification (StopCCN) packets received
 tunnel.<tunnel ID>.hello_rx..............
 Number of Hello packets received
 tunnel.<tunnel ID>.wen_rx................
 Number of WAN-Error-Notify (WEN) packets
 received.
 tunnel.<tunnel ID>.sli_rx................
 Number of Set-Link-Info (SLI) packets
 received.
 tunnel.<tunnel ID>.tx_pkt_acked..Number of ACK packets received.
Description:
 Use the sth::l2tp_stats function to specify statistics retrieval mode as
 either aggregate for all configured sessions, on a per session (call)
 basis, or on a per tunnel basis. When specifying per session stats, the
 session ID is the local call assigned by the local node. Similarly, when
 specifying per tunnel stats, the tunnel ID is the local tunnel ID assigned by 
L2TP Functions
455
 the local node.
Examples:
 When you call sth::l2tp_stats, the contents of the returned keyed list
 depends on the mode you specified and the status of the call. For example:
 #### HLTAPI for Tcl ####
##############################################################################
 Assume we already have the L2TP LNS session handle lnsSessionHandle
 puts "\n #### #### #### LNS aggregate info...#### #### ####"
 set returnString_lns [sth::l2tp_stats -handle $ lnsSessionHandle -mode
 aggregate]
##############################################################################
 The example above returns a list that contains one of the following:
 a) If the call is successful, the list contains aggregate stats and
 command execution status (in this case, a 1 indicating success).
 b) If the call fails, the list contains error log and command
 execution status (in this case, a 0 indicating failure).
Sample Input:
 sth::l2tp_stats -handle $ lnsSessionHandle -mode aggregate
Sample Output:
 {status 1} {aggregate {{term_req_rx 0} {tunnels_up 0} {scccn_tx 0} {cdn_rx 0}
 {tx_pkt_acked 0} {lcp_cfg_rej_tx 0} {icrq_tx 0} {stopccn_rx 0} {iccn_tx 0}
 {zlb_rx 0} {term_req_tx 0} {sccrp_rx 0} {lcp_cfg_ack_rx 0} {hello_rx 0}
 {echo_req_rx 0} {cdn_tx 0}{wen_rx 0} {max_setup_time 0} {stopccn_tx 0}
 {echo_rsp_tx 0} {icrp_rx 0} {sli_rx 0}{sessions_up 0} {zlb_tx 0}
 {lcp_cfg_req_rx 0} {sccrp_tx 0} {lcp_cfg_ack_tx 0}
 {hello_tx 0} {lcp_cfg_nak_rx 0} {min_setup_time 0} {success_setup_rate 0}
 {wen_tx 0} {sccrq_rx 0} {term_ack_rx 0} {icrp_tx 0} {sli_tx 0} {scccn_rx 0}
 {sessions_down 1}{lcp_cfg_rej_rx 0} {icrq_rx 0} {lcp_cfg_req_tx 0}
 {lcp_cfg_nak_tx 0} {avg_setup_time 0} {iccn_rx 0} {term_ack_txv 0}
 {sccrq_tx 1} {connecting 0} {connected 0} {disconnecting 0}
 {idle 1}}} {procName l2tp_status} {handles host2}
 If there is an error, you will see: {status 0} {log {Error message }}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.l2tp_stats (
 handle = device,
 mode = 'aggregate');

 Sample Output:
 {'status': '1', 'procName': 'l2tp_status', 'handles': 'host4', 'aggregate':
 {'tunnels_up': '0', 'hello_tx': '0', 'cdn_rx': '0', 'cdn_tx': '0',
 'lcp_cfg_ack_rx': '0', 'lcp_cfg_ack_tx': '0', 'chap_rx': '0',
 'disconnect_success': '0', 'max_setup_time': '0', 'stopccn_rx': '0',
 'term_ack_rx': '0', 'stopccn_tx': '0', 'icrq_rx': '0', 'min_setup_time': '0',
 'avg_setup_time': '0', 'icrq_tx': '0', 'scccn_tx': '0', 'echo_reply_rx': '0',
 'ipcp_rx': '0', 'sli_rx': '0', 'lcp_cfg_rej_rx': '0', 'lcp_cfg_req_tx': '0',
 'iccn_rx': '0', 'ipcp_tx': '0', 'sli_tx': '0', 'tx_pkt_acked': '0', 'scccn_rx':
 '0', 'connect_success': '0', 'disconnecting': '0', 'lcp_cfg_rej_tx': '0',
 'lcp_cfg_req_rx': '0', 'session_status': 'CONNECTING', 'icrp_rx': '0',
 'echo_req_tx': '0', 'sccrq_rx': '0', 'echo_req_rx': '0', 'icrp_tx': '0',
 'sessions_up': '0', 'connecting': '1', 'connected': '0', 'sccrp_tx': '0',
 'iccn_tx': '0', 'wen_rx': '0', 'sccrp_rx': '0', 'success_setup_rate': '0',
 'wen_tx': '0', 'term_ack_txv': '0', 'term_req_tx': '0', 'lcp_cfg_nak_rx': '0',
 'term_req_rx': '0', 'sccrq_tx': '0', 'idle': '0', 'hello_rx': '0',
 'sessions_down': '240', 'zlb_tx': '0', 'chap_tx': '0', 'lcp_cfg_nak_tx': '0',
 'zlb_rx': '0'}}
 #### HLTAPI for Perl ####
L2TP Functions
456
 Sample Input:
 my %results_ret1 = sth::l2tp_stats (
 handle => "$device",
 mode => 'aggregate');
 Sample Output:
 $VAR1 = 'procName';
 $VAR2 = 'l2tp_status';
 $VAR3 = 'handles';
 $VAR4 = 'host4';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'aggregate';
 $VAR8 = {
 'hello_tx' => '0',
 'echo_req_rx' => '0',
 'term_req_tx' => '0',
 'iccn_rx' => '0',
 'tunnels_up' => '0',
 'lcp_cfg_req_rx' => '0',
 'sessions_up' => '0',
 'disconnect_success' => '0',
 'cdn_tx' => '0',
 'lcp_cfg_nak_rx' => '0',
 'cdn_rx' => '0',
 'scccn_tx' => '0',
 'sccrp_rx' => '0',
 'lcp_cfg_rej_tx' => '0',
 'icrq_tx' => '0',
 'icrq_rx' => '0',
 'wen_tx' => '0',
 'echo_reply_rx' => '0',
 'session_status' => 'CONNECTING',
 'connecting' => '1',
 'min_setup_time' => '0',
 'stopccn_tx' => '0',
 'tx_pkt_acked' => '0',
 'iccn_tx' => '0',
 'connect_success' => '0',
 'term_ack_rx' => '0',
 'lcp_cfg_ack_rx' => '0',
 'sli_tx' => '0',
 'idle' => '0',
 'hello_rx' => '0',
 'chap_rx' => '0',
 'scccn_rx' => '0',
 'disconnecting' => '0',
 'lcp_cfg_req_tx' => '0',
 'zlb_rx' => '0',
 'wen_rx' => '0',
 'ipcp_rx' => '0',
 'sccrq_tx' => '0',
 'term_req_rx' => '0',
 'stopccn_rx' => '0',
 'ipcp_tx' => '0',
 'icrp_rx' => '0',
 'connected' => '0',
 'icrp_tx' => '0',
 'echo_req_tx' => '0',
 'lcp_cfg_ack_tx' => '0',
 'sessions_down' => '240',
 'sccrp_tx' => '0',
 'lcp_cfg_rej_rx' => '0',
 'sccrq_rx' => '0',
 'chap_tx' => '0',
 'success_setup_rate' => '0',
 'lcp_cfg_nak_tx' => '0',
 'max_setup_time' => '0',
 'zlb_tx' => '0',
 'term_ack_txv' => '0',
 'avg_setup_time' => '0',
L2TP Functions
457
 'sli_rx' => '0'
 };
Notes:
 None
End of Procedure Header
LACP Functions
458
LACP Functions
Functions:
sth::emulation_lacp_config
sth::emulation_lacp_control
sth::emulation_lacp_info
sth::emulation_lacp_config
Name:
 sth::emulation_lacp_config
Purpose:
 Enables, modifies, or disables an emulated Link Aggregation Control
 Protocol (LACP) session on a Spirent HLTAPI port.
 LACP uses multiple network cables/ports in parallel to increase the link
 speed beyond the limits of any one single cable or port, and to increase
 the redundancy for higher availability.
Synopsis:
 sth::emulation_lacp_config
 -mode { enable | modify | disable }
 -port_handle < port_handle>
 [-act_port_key <integer>]
 [-act_lacp_port_priority <integer>]
 [-act_port_number <integer>]
 [-act_lacp_timeout {long|short}]
 [-act_system_priority <integer>]
 [-act_system_id < aa:bb:cc:dd:ee:ff >]
 [-lacp_activity {passive|active}]
 [-local_mac_addr < aa:bb:cc:dd:ee:ff >]
Arguments:
 -mode
 Specifies the function to be performed on the test port.
 This argument is mandatory. Possible values are enable,
 modify and disable. The modes are described below:
 enable - Enables LACP session on the test port. You must
 specify the -port_handle argument.

 modify - Modifies the LACP session on the test port. You
 must specify the -port_handle argument.
 disable - Disables the LACP session on the test port. You
 must specify the -port_handle argument.
 -act_port_key
 Operational key value assigned to the actor port. Possible
 values range from 0 to 65535. The default value is 1. This
 actor port key is encoded as a 16-bit integer.
 -act_lacp_port_priority
 Defines the priority assigned to this port (writable).
 Possible values range from 0 to 65535. The default value
 is 1. The actor port priority is encoded as a 16-bit integer.
 -act_port_number
 Specifies the port number assigned to the port (writable).
 Possible values range from 0 to 65535. The default value
 is 1. The actor port number is encoded as a 16-bit integer.
LACP Functions
459
 -act_lacp_timeout
 Indicates the timeout value for this link. Possible values
 are described below:

 long - Indicates the timeout value is 90 seconds. This is
 the default value.
 short - Indicates the timeout value is 3 seconds.
 -act_system_priority
 Indicates the priority of the group. Possible
 values range from 0 to 65535. The default is 1. The
 priority of the system is encoded as a 16-bit integer.
 -act_system_id
 Indicates the MAC address of the group. The default
 value is 00:00:00:00:00:01. The value of this argument
 must be in MAC address format.
 -lacp_activity
 Specifies the activity control value for this link. Possible
 values are described below:
 active - Indicates the Spirent HLTAPI will form an
 aggregate link, and initiate the negotiation. The link
 aggregate will be formed if the other end is running
 in LACP active or passive mode.
 passive - Indicates the Spirent HLTAPI will not initiate
 the channel, but does understand incoming LACP
 packets. The peer (in active state) initiates
 negotiation (by sending out an LACP packet) which
 we receive and reply to, eventually forming the
 aggregation channel with the peer.
 -local_mac_addr
 Specifies the MAC address of the test port. The
 default value is 00:10:94:00:00:02. The value should be in
 MAC address format.
 -port_handle
 Specifies the test port to be used. This argument is
 mandatory.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_lacp_config function enables, modifies, or disables a
 LACP session on the specified test port. Use the -mode argument to specify
 the action to perform. (See the -mode argument description for information
 about the actions.)
 When you enable a LACP session, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated port will
 use for LACP communication.
 Before you configure LACP on a port, you must create the port, and use the
 returned port handle in the call to the sth::emulation_lacp_config
 function. 
LACP Functions
460
Examples:
 #### HLTAPI for Tcl ####
 The following example enables LACP session on the port. There must
 already exist a port with the handle of port_handle1.
 sth::emulation_lacp_config -port_handle port_handle1 \
 -mode enable \
 -local_mac_addr "00:94:01:00:00:01" \
 -act_port_key 100 \
 -act_lacp_port_priority 101 \
 -act_port_number 10 \
 -act_lacp_timeout short \
 -lacp_activity active \
 -act_system_priority 1000 \
 -act_system_id "00:00:00:00:01:01"
 Sample output for the example above:
 Sample SUCCESS output
 {status 1}
 Sample FAILURE output
 {status 0} {log XXX}
 #### HLTAPI for Python ####
 The following example enables LACP session on the specified port:
 device_ret0 = sth.emulation_lacp_config (
 mode = 'enable',
 port_handle = port_handle[0],
 local_mac_addr = '00:94:01:00:00:01',
 act_system_priority = '1000',
 act_system_id = '00:00:00:00:01:01',
 lacp_activity = 'active',
 act_port_number = '10',
 act_lacp_port_priority= '101',
 act_port_key = '100',
 act_lacp_timeout = 'short');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 The following example enables LACP session on the specified port:
 my %device_ret0 = sth::emulation_lacp_config (
 mode => 'enable',
 port_handle => "$hport[1]",
 local_mac_addr => '00:94:01:00:00:01',
 act_system_priority => '1000',
 act_system_id => '00:00:00:00:01:01',
 lacp_activity => 'active',
 act_port_number => '10',
 act_lacp_port_priority=> '101',
 act_port_key => '100',
 act_lacp_timeout => 'short');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None.
End of Procedure Header
LACP Functions
461
sth::emulation_lacp_control
Name:
 sth::emulation_lacp_control
Purpose:
 Starts or stops the LACP protocol on a port.
Synopsis:
 sth::emulation_lacp_control
 -action {start|stop}
 -port_handle <port_handle>

Arguments:
 -action
 Specifies the action to be performed. This argument is
 mandatory. Possible values are described below:

 start - Starts the LACP session on the specified port.
 stop - Stops the LACP session on the specified port.
 -port_handle
 Specifies the port on which LACP is enabled. This
 argument is mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_lacp_control function stops, or starts the
 LACP session on the specified port.
 When you call the sth::emulation_lacp_control function, you
 specify a port handle. Spirent HLTAPI applies the specified action to
 the emulated LACP session on the specified port.
Examples:
 #### HLTAPI for Tcl ####
 The following example starts an enabled LACP session on the specified port.
 sth::emulation_lacp_control -port_handle port_handle1\
 -action start
 The following example stops an enabled LACP session on the specified port.

 sth::emulation_lacp_control -port_handle port_handle1\
 -action stop
 Sample Output:
 {status 1} success or {status 0} {log XXX} fail
 #### HLTAPI for Python ####
 The following example starts an enabled LACP session on the specified port:
 ctrl_ret1 = sth.emulation_lacp_control (
 port_handle = port_handle[0],
 action = 'start');
 Sample Output: {'status': '1'}
LACP Functions
462
 #### HLTAPI for Perl ####
 The following example starts an enabled LACP session on the specified port:
 my %ctrl_ret1 = sth::emulation_lacp_control (
 port_handle => "$hport[1]",
 action => 'start');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_lacp_info
Name:
 sth::emulation_lacp_info
Purpose:
 Gets or clears statistics about LACP session on the specified port. Statistics
 include the running status and number and type of PDU packets sent to and
 received from the specified port.
Synopsis:
 sth::emulation_lacp_info
 -action { collect | clear }
 -port_handle <port_handle>
 [-mode { aggregate | state | stats }]
Arguments:
 -action
 Specifies the action to be executed. This argument is
 mandatory. Possible values are described below:
 collect - Collects statistics from the specified port.
 clear - Clears the statistics on the specified port.
 -port_handle
 Specifies the port on which the LACP session is enabled
 and from which statistics has to be obtained. This
 argument is mandatory.

 -mode
 Specifies the types of LACP session information to be
 retrieved. Possible values are described below:

 aggregate - Aggregates information of state and stats.
 This is the default value.
 state - Indicates that the information to be retrieved
 is the state information of the LACP session.
 stats - Indicates that the information to be retrieved
 is the statistics of the LACP session.
Return values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
LACP Functions
463
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 The statistics that will be returned are listed below:
 actor_operational_key
 Local operational key.
 actor_port
 Local port ID.
 actor_systemid
 Local system ID.
 marker_response_pdus_rx
 Number of received Marker Response PDU packets.
 marker_pdus_rx
 Number of received Marker PDU packets.
 marker_response_pdus_tx
 Number of sent Marker Response PDU packets.
 marker_pdus_tx
 Number of sent Marker PDU packets.
 pdus_tx
 Number of sent PDU packets.
 pdus_rx
 Number of received PDU packets.
 partner_collector_max_delay
 Max delay time value of collecting the Partner packets.
 partner_operational_key
 Partner's operational key.
 partner_port
 Partner port ID.
 partner_port_priority
 Partner port priority value.
 partner_system_id
 Partner system ID.
 partner_system_priority
 Partner system priority value.
Description:
 The sth::emulation_lacp_info function provides information about
 the configured LACP session.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0).
 Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input:
 # There must be an existing port on which there is an enabled LACP:
 set cmdReturn [sth::emulation_lacp_info -port_handle port_handle1\
 -action collect\
 -mode aggregate]
Sample Output:
 # Sample SUCCESS output
 {lacp_state UP} {partner_port 10} {actor_state 63}
 {partner_system_priority 1000} {actor_systemid 00:00:00:00:01:01}
 {partner_state 63} {actor_port 10} {actor_operational_key 500}
 {partner_port_priority 101} {partner_operational_key 100}
 {partner_system_id 00:00:00:00:01:01} {status 1}
 #Sample FAILURE output
 {status 0} {log XXX}
 #### HLTAPI for Python ####
 Sample Input:
 # There must be an existing port on which there is an enabled LACP:
 results_ret1 = sth.emulation_lacp_info (
LACP Functions
464
 port_handle = port_handle[0],
 mode = 'aggregate',
 action = 'collect');
 Sample Output:
 {'status': '1', 'lacp_state': 'NO_STATE', 'partner_collector_max_delay': '0',
 'partner_port_priority': '0', 'marker_response_pdus_rx': '0', 'pdus_tx': '0',
 'pdus_rx': '0', 'marker_pdus_rx': '0', 'partner_state': '0',
 'partner_system_priority': '0', 'actor_operational_key': '0', 'partner_port':
 '0', 'marker_pdus_tx': '0', 'actor_systemid': '00:00:00:00:00:00',
 'partner_system_id': '00:00:00:00:00:00', 'partner_operational_key': '0',
 'actor_port': '0', 'actor_state': '0', 'marker_response_pdus_tx': '0'}

 #### HLTAPI for Perl ####
 Sample Input:
 # There must be an existing port on which there is an enabled LACP:
 my %results_ret1 = sth::emulation_lacp_info (
 port_handle => "$hport[1]",
 mode => 'aggregate',
 action => 'collect');

 Sample Output:
 $VAR1 = 'partner_state';
 $VAR2 = '0';
 $VAR3 = 'actor_state';
 $VAR4 = '0';
 $VAR5 = 'partner_system_id';
 $VAR6 = '00:00:00:00:00:00';
 $VAR7 = 'status';
 $VAR8 = '1';
Notes:
 None.
End of Procedure Header
LDP Functions
465
LDP Functions
Functions:
sth::emulation_ldp_config
sth::emulation_ldp_control
sth::emulation_ldp_info
sth::emulation_ldp_route_config
sth::emulation_lsp_switching_point_tlvs_config
sth::emulation_ldp_config
Name:
 sth::emulation_ldp_config
Purpose:
 Creates, enables, disables, modifies, or deletes an emulated Label Switched
 Router (LSR) on a Spirent HLTAPI chassis.
 LDP (Label Distribution Protocol) is a protocol that defines a set of
 procedures and messages by which one LSR informs another of the label
 bindings it has made. LDP enables LSRs to find each other and establish
 communication.
Synopsis:
 sth::emulation_ldp_config
 -mode { create | enable }
 {-port_handle <port_handle> | -handle <device_handle>}
 -mode { disable | modify | delete }
 -handle <lsr_handle>
 -mode { active| inactive }
 -handle <ldp_session_handle>
 [-affiliated_router_target <router_session_handle>]
 [-adjacency_version {ipv4 | ipv6 | ipv4_and_ipv6}]
 [-bfd_registration {1|0}]
 [-count <integer>]
 [-directed_hello_interval <1-21845>]
 [-egress_label_mode {nextlabel | imnull | exnull}]
 [-enable_lsp_results {0 | 1}]
 [-enable_stateful_pseudowire_lsp_results {0 | 1}]
 [-generalized_pwid_lsp_label_binding_mode {tx_and_rx | tx_only | rx_only | none}]
 [-graceful_restart {0|1}
 -reconnect_time <0-4294967>
 -graceful_recovery_timer <0-4294967> ]
 [-gateway_ip_addr <a.b.c.d> ]
 [-gateway_ip_addr_step <a.b.c.d> ]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-hello_version {ipv4 | ipv6| ipv4_and_ipv6}]
 [-hello_interval <1-65535> ]
 [-intf_ip_addr <a.b.c.d> ]
 [-intf_ip_addr_step <a.b.c.d>]
 [-intf_prefix_length <1-32> ]
 [-intf_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_prefix_length <0-128>]
 [-ip_version {ipv4 | ipv6 | ipv46}]
 [-ipv6_router_id <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_router_id_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-keepalive_interval <1-21845> ]
 [-label_adv {unsolicited|on_demand} ]
 [-label_start <0-1046400> ]
 [-label_step <integer> ]
 [-label_request_retry_count <0-65535>]
 [-label_request_retry_interval <0-65535>]
LDP Functions
466
 [-ldp_version {version_1 | version_2}]
 [-liveness_time <120-600>]
 [-link_local_ipv6_add <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-link_local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-link_local_ipv6_prefix_length <0-128>]
 [-lsr_id <a.b.c.d> ]
 [-lsr_id_step <a.b.c.d>]
 [-mac_address_init <aa:bb:cc:dd:ee>]
 [-peer_discovery {link|targeted} ]
 [-prefix_lsp_label_binding_mode {tx_and_rx | tx_only | rx_only | none}]
 [-pseudowire_redundancy_mode {none | independent | master | slave}]

 [-remote_ip_addr <a.b.c.d> ]
 [-remote_ip_addr_step <a.b.c.d>]
 [-remote_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-remote_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-transport_tlv_mode {none | tester_ip | router_id}]
 [-use_static_flow_label {0 | 1}]
 [-vc_lsp_label_binding_mode {tx_and_rx | tx_only | rx_only | none}]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vlan_id <0-4095> ]
 [-vlan_cfi {0|1} ]
 [-vlan_id_mode {fixed|increment} ]
 [-vlan_id_step <1-4094> ]
 [-vlan_user_priority <0-7> ]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_mode {fixed|increment}]
 [-vlan_outer_id_step <1-4094>]
 [-vlan_outer_user_priority <0-7>]
 [-vpi <0-255>]
 [-vpi_step <0-255>]
 [-tunnel_handle <GRE_tunnel_handle>]
 [-loopback_ip_addr <a.b.c.d>]
 [-loopback_ip_addr_step < a.b.c.d>]
Arguments:
 -adjacency_version
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of adjacency to create. This argument available
 when -hello_version is set to ipv4_and_ipv6.
 Possible values are ipv4, ipv6, and ipv4_and_ipv6. The default
 value is ipv4.
 -affiliated_router_target
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the router to which the indirectly connected
 router will be connected. The value for the router session
 handle is alphanumeric. This option is used to support LDP
 testing with peer discovery (-peer_discovery) in targeted
 mode. For example, you could create an OSPF router to
 advertise IP routes. From this router, you could then create
 an indirectly connected router to run LDP.
 set retKeyList [::sth::emulation_ldp_config -mode create \
 -port_handle $p0 \
 -peer_discovery targeted \
 -affiliated_router_target $ospf_router_handle\
 -count 1
 The value of "mac_address_init <mac_addr>" will be ignored
 when you pass in a value for the -affiliated_router_target
 argument. Spirent HLTAPI fills in the MAC address of
 the indirectly connected router using the MAC address
 obtained from the router pointed to by the
 affiliated router target handle. Note that there is no
 support for the retrieval of the MAC address for a
 router in the HLTAPI framework.
 -bfd_registration
 Specifies to enable or disable Bidirectional Forwarding 
LDP Functions
467
 Detection (BFD) registration. Possible values are 1 (enable)
 and 0 (disable). The default is 0.
 -count
 Defines the number of sessions to create on the interface by
 incrementing the interface IP address (-intf_ip_addr), Label
 Switched Router ID (-lsr_id), and remote IP address
 (-remote_ip_addr). Possible values are 0 to <max_int>. The
 default is 1. If you specify a count greater than 1, then
 the -intf_ip_addr_step, -gateway_ip_addr_step, -lsr_id_step,
 and -remote_ip_addr_step arguments are mandatory.
 -directed_hello_interval
 Spirent Extension (for Spirent HLTAPI only).
 Time interval used by the peer for Direct Hello packet transmission
 Possible values range from 1 to 21845. The default value is 5.
 -egress_label_mode
 Specifies the mode for egress-targeted label assignment. Possible
 values are described below:

 nextlabel - For each FEC, the LSR advertises the next available
 label starting from -label_start.

 imnull - Implicit null is used for all LSPs. This label value is
 used in an LDP or RSVP packet to enable penultimate hop
 label popping.

 exnull - Explicit null is used for all LSPs. Explicit null
 instructions are signaled to the penultimate router by
 the egress router.
 -enable_lsp_results
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether to generate LSP-level results. Possible values
 are 0 and 1. When it is set to 1, LSP-level results will be
 generated. The default value is 0.

 -enable_stateful_pseudowire_lsp_results
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether to generate stateful PW LSP-level
 results. Possible values are 0 and 1. When it is set to 1,
 stateful pseudowire LSP-level results will be generated. The
 default value is 0.

 -generalized_pwid_lsp_label_binding_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the generalized PW ID LSP label binding mode.
 Possible values are tx_and_rx, tx_only, rx_only, and none.
 The default value is tx_and_rx.

 -hello_version
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the version of Hello messages to send. This argument is
 available when -ip_version is set to ipv46. Possible values
 are ipv4, ipv6, and ipv4_and_ipv6. The default value is ipv4.
 -gateway_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address of the label
 switched router.
 -gateway_ip_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address for multiple routers.
 This argument is used with the -gateway_ip_addr argument.
 -gateway_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 gateway address of the label switched router. 
LDP Functions
468
 -gateway_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 gateway address for multiple routers. You must
 use this argument with the -gateway_ ipv6_addr argument.
 -graceful_recovery_timer
 Specifies the amount of time, in seconds, it takes Spirent
 HLTAPI to recover after a graceful restart. To use
 this option, you must also enable -graceful restart and
 specify a value for the -reconnect_time argument. Possible
 values are 0 to 4294967. The default is 140.

 -graceful_restart
 Spirent Extension (for Spirent HLTAPI only).
 Specifies if LDP graceful restart is enabled on the
 emulated router. Possible values are 1 (enable Graceful
 Restart) or 0 (disable Graceful Restart). The default is 0.
 To use -graceful_restart in LDP, you must also specify
 values for the -reconnect_time and -graceful_recovery_timer
 arguments.
 Example usage:
 sth::emulation_ldp_config -mode create \
 -port_handle $p0 \
 -graceful_restart <0|1>
 -reconnect_time <0-4294967>
 -graceful_recovery_timer <0-4294967>
 -handle
 Specifies the LDP handle to use. This argument is mandatory for
 the modify, delete, enable, disable, active and inactive modes.
 When -mode is set to create, Spirent HLTAPI creates LDP over the
 provided device. (Please refer to the description of the -mode
 argument for more information)
 -hello_interval
 Specifies the amount of time, in seconds, between HELLO messages.
 Possible values range from 1 to 65535. The default is 5.
 -intf_ip_addr
 Specifies the IP address of the interface for the LSR that
 will establish an adjacency with the DUT. The default for
 IPv4 is 192.85.1.3.
 -intf_ip_addr_step
 Defines the interface IP addresses of consecutive routers
 when multiple routers are created. The default is 0.0.0.0.
 -intf_prefix_length
 Specifies the prefix length on the emulated router. Possible
 values for IPv4 addresses range from 1 to 32. The default is
 24.

 -intf_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 address of the router created.
 -intf_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the difference between interface IPv6 addresses of
 consecutive routers when multiple emulated routers are created.

 -intf_ipv6_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length for the IPv6 address of the emulated
 router. Possible values range from 0 to 128. The default is 64.
 -ip_version
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IP version of the device to be created. 
LDP Functions
469
 Possible values are ipv4, ipv6, and ipv46.
 The default value is ipv4.

 -ipv6_router_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 router ID of the emulated router. The value
 must be in IPv6 format.
 -ipv6_router_id_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the difference between IPv6 router IDs when multiple
 emulated routers are created. The value must be in IPv6 format.
 -keepalive_interval
 Specifies the amount of time, in seconds, between KEEPALIVE
 messages. Possible values range from 1 to 21845. The default
 is 60.
 -label_adv
 Specifies the label advertisement mode for the router,
 the mode by which the emulated router advertises its FEC
 ranges. Possible values are:
 unsolicited - The router distributes FEC ranges whenever it
 has a new one. This is the default value.
 on_demand - The router only distributes FEC ranges when
 requested by a peer.
 The default is unsolicited.
 -label_start
 Specifies the starting value for the first label of the
 route. Possible values range from 0 to 1046400. The default
 is 16.
 -label_step
 Specifies how to increment the next label.The default is 1.

 -label_request_retry_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of times to send a label request. This argument is
 available when -label_adv is set to on_demand. Possible values
 range from 0 to 65535. The default is 0.

 -label_request_retry_interval
 Spirent Extension (for Spirent HLTAPI only).
 Number of seconds to wait between label request attempts.
 This argument is available when-label_adv is set to on_demand.
 Possible values range from 0 to 65535. The default is 60.

 -ldp_version
 Spirent Extension (for Spirent HLTAPI only).
 Version of LDP to use for this device block. This argument is
 available when -ip_version is set to ipv6, or when -ip_version
 is ipv46 and -hello_version is ipv6. Possible values are
 version_1 and version_2. The default value is version_1.

 -liveness_time
 Spirent Extension (for Spirent HLTAPI only).
 Neighbor liveness time interval, in second. Possible values range
 from 120 to 600. The default is 360.
 -link_local_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting link local IPv6 address for emulated
 routers. The value must be in IPv6 format. The default is FE80::0.

 -link_local_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the difference between link local IPv6 addresses of 
LDP Functions
470
 consecutive routers when multiple emulated routers are created.
 The value must be in IPv6 format. The default is ::1.

 -link_local_ipv6_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length for the link local IPv6 address of
 the emulated router. Possible values range from 0 to 128.
 The default is 64.
 -lsr_id
 Specifies the router ID of the Label Switched Router (LSR)
 to be emulated by the Spirent HLTAPI port. The LSR ID is a
 32-bit value represented in dot notation. The default is
 192.85.1.3.
 -lsr_id_step
 Defines the router ID of consecutive routers when multiple
 routers are created. You must specify a step value when the
 -count value is greater than 1. The default is 0.0.0.0.
 -mac_address_init
 Specifies the MAC address to use for the first session. When
 -count is greater than 1, the MAC address is automatically
 incremented by one on the last octet.
 -mode
 Specifies the action to perform. Possible values are create,
 enable, disable, modify, or delete. This argument is
 mandatory. The modes are described below:
 create - Creates one or more emulated label switched
 routers, and then starts all of the routers. When
 -port_handle is provided, Spirent HLTAPI creates one or more
 emulated routers that are associated with the specified port.
 When -handle is provided, LDP will be created over the
 specified device. In this case, the following options will be
 obsoleted:
 -count
 -affiliated_router_target
 -mac_address_init
 -intf_ip_addr
 -intf_ip_addr_step
 -gateway_ip_addr
 -gateway_ip_addr_step
 -intf_prefix_length
 -cfi
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vlan_outer_id
 -vlan_outer_id_mode
 -vlan_outer_id_step
 -vlan_outer_user_priority
 -tunnel_handle
 -vci
 -vci_step
 -vpi
 -vpi_step
 -loopback_ip_addr
 -loopback_ip_addr_step
 enable - Same as "create".
 disable - Same as "delete".
 modify - Changes the configuration for the LSR identified by
 the -handle argument.
LDP Functions
471
 delete - Deletes the LSR specified in the -handle argument.
 active - Enables the LDP router specified by the -handle
 argument. You must specify a valid LDP session handle.
 inactive - Disables the LDP router specified by the -handle
 argument. You must specify a valid LDP session handle.
 The configuration for the router is retained,
 when it is inactive and is available as configured if the
 router is active.
 -peer_discovery
 Specifies whether the emulated router sends a link or a
 targeted hello. Possible values are:
 link - A Basic Discovery mechanism used to locate directly-
 connected neighbors. "Link" is the default.
 targeted - An Extended Discovery mechanism used to locate
 neighbors not directly connected.
 -port_handle
 Specifies the handle of the port on which to create the label
 switched router (LSR). (Please refer to the description of the
 -mode argument for more information)
 -reconnect_time
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of time, in seconds, it takes Spirent
 HLTAPI to reconnect after a graceful restart. To use
 this option, you must also enable -graceful_restart and
 specify a value for the -graceful_recovery_timer argument.
 Possible values are 0 to 4294967. The default is 60.
 -prefix_lsp_label_binding_mode
 Spirent Extension (for Spirent HLTAPI only).
 Label binding mode for the Prefix FEC type. Possible values are
 tx_and_rx, tx_only, rx_only, and none. The default value is
 tx_and_rx.

 -pseudowire_redundancy_mode
 Spirent Extension (for Spirent HLTAPI only).
 Pseudowire redundancy mode. Possible values are:
 none No mode specified

 independent PW endpoint nodes independently select which PW
 they intend to make active and which PWs they
 intend to make standby

 master Responsible for selecting which PW both endpoints
 must use to forward user traffic

 slave Follows the decision of the Master node based on
 the received status bits

 The default value is none.

 -remote_ip_addr
 Specifies either the IPv4 address of the DUT interface that
 is connected to the Spirent HLTAPI port for the emulated
 LSR or the DUT router ID. The default is 192.85.1.1.
 -remote_ip_addr_step
 Configures either the IPv4 address of the DUT interface for
 multiple routers or the DUT router ID. You must specify the
 -remote_ip_address_step when the -count argument is greater
 than 1. The format of the remote_ip_addr_step value is an IP
 address, for example, 0.0.0.1.
 -remote_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
LDP Functions
472
 IPv6 address of the DUT interface.
 -remote_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the difference between IPv6 interface addresses of
 consecutive routers when multiple emulated routers are created.
 The value must be in IPv6 format. The default value is ::1.
 -transport_tlv_mode
 Spirent Extension (for Spirent HLTAPI only).
 Transport TLV mode. Possible values are:

 none Transport Address TLV will not be included in LDP Hellos
 tester_ip Emulated router interface address
 router_id Emulated router ID
 The default value is none.

 -use_static_flow_label
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables the use of static labels. Possible values
 are 0 (disable) and 1 (enable). The default value is 0.
 -vc_lsp_label_binding_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the label binding mode for the VC FEC type.
 Possible values are tx_and_rx, tx_only, rx_only, and none.
 The default value is tx_and_rx.
 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
 range from 0 to 65535.
 -vci_step
 Specifies the step size in which the VCI value is
 incremented. Possible values range from 0 to 65535.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). If set to 0, it indicates the network is
 Ethernet. If set to 1, it indicates that Token Ring and
 packets are dropped by Ethernet ports.
 -vlan_id
 The VLAN ID of the first VLAN sub-interface. Possible values
 range from 0 to 4095. When the mode is either "create" or
 "enable", Spirent HLTAPI checks for a VLAN object on the
 port with the given VLAN ID. If no VLAN object with that ID
 exists, Spirent HLTAPI creates a VLAN object with the
 specified VLAN ID.
 -vlan_id_mode
 If you configure more than one interface on Spirent
 HLTAPI with VLAN, you can choose to either automatically
 increment the VLAN tag (mode "increment") or leave it idle
 for each interface (mode "fixed"). If you set this argument
 to "increment", then you must also specify the -vlan_id_step
 argument to indicate the step size. The default is
 increment.
 -vlan_id_step
 The step size by which the VLAN value is incremented when
 you set -vlan_id_mode to "increment". Possible values range
 from 1 to 4094. You must specify the step when the -count
 argument is greater than 1. The default is 1.
 -vlan_user_priority
 VLAN priority for the VLANs on this port. Possible values
 range from 0 to 7. The default is 0.
 -vlan_outer_id
LDP Functions
473
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id.
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when router count
 is greater than 1. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values
 range from 1 to 4094. You must specify this step when
 you specify "increment" for the -vlan_outer_id_mode argument.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values are 0 to 255.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are 0 to 255.
 -tunnel_handle
 Specifies the GRE tunnel handle, an array value, initialized
 by the emulation_gre_config command. The router sends traffic
 through this tunnel.
 -loopback_ip_addr
 Defines the loopback IP address. The value must be in IPv4
 format.
 -loopback_ip_addr_step
 Specifies the step size in which the loopback IP address is
 incremented.The default is 0.0.1.0. The value must be in IPv4
 format.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -loopback_ip_addr
 Note: -lsr_id is supported by Save as HLTAPI and provides the same
 functionality as -loopback_ip_addr.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -atm_merge_cap
 -atm_range_max_vci
 -atm_range_max_vpi
 -atm_range_min_vci
LDP Functions
474
 -atm_range_min_vpi
 -atm_vc_dir
 -cfi
 -config_seq_no
 -discard_self_adv_fecs
 -hello_hold_time
 -keepalive_holdtime
 -label_space
 -label_type
 -loop_detection
 -max_lsps
 -max_pdu_length
 -max_peers
 -message_aggregation
 -mtu
 -path_vector_limit
 -timeout
 -transport_ip_addr
 -user_priofity
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The handle that identifies the LDP router created by the
 sth::emulation_ldp_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_ldp_config function creates, enables,
 disables, modifies, or deletes the specified LSR. Use the -mode argument to
 specify the action to perform. (See the -mode argument description for
 information about the actions.)
 To create an LSR, use the create or enable modes with the
 sth::emulation_ldp_config function along with the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated LSR will use. (The port
 handle value is contained in the keyed list returned by the connect
 function.)
 In addition to specifying the port, you must also provide one or more of
 the following pieces of information when you create an LSR:
 - The port handle (-port_handle argument)
 - The IP address for the router (the -intf_ip_addr argument)
 - The IP address for the router (DUT) to communicate with (the
 -gateway_ip_add and -remote_ip_addr arguments)
 For Spirent HLTAPI to start the router communication, use the
 sth::emulation_ldp_control mode "start" to start either an individual
 router or all emulated routers.
 Two LSRs (Label Switched Routers) which use LDP to exchange label
 mapping information are known as LDP peers and they have an LDP session
 between them. In a session, each peer learns about the other's label
 mappings.
 LDP has four types of LDP messages: discovery (HELL0), adjacency
 (KEEPALIVE), label advertisement, and notification (error messages).
 LSRs announce their presence in the network by sending HELLO messages
 at specified intervals. HELLO messages are transmitted as UDP packets. All
 other messages are sent over TCP.
 Once you start an LDP session, Spirent HLTAPI handles all of the
 messages for the emulated routers. During the test, use the
LDP Functions
475
 sth::emulation_ldp_control function to stop and re-start individual
 routers. To delete all of the routers associated with a particular
 port, use the disable or delete modes with the sth::emulation_ldp_config
 function. After you have created the routers for your test, use the
 sth::emulation_ldp_route_config function to set up routes.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates and starts an LSR on an LDP port:
 sth::emulation_ldp_config \
 -mode create \
 -count 5 \
 -hello_interval 15 \
 -intf_ip_addr 192.168.1.11 \
 -intf_ip_addr_step 0.0.1.0 \
 -intf_prefix_length 24 \
 -keepalive_interval 70 \
 -label_adv on_demand\
 -label_start 7 \
 -label_step 7 \
 -lsr_id 12.1.1.1 \
 -lsr_id_step 0.0.0.1 \
 -peer_discovery link \
 -port_handle $port_handle1 \
 -gateway_ip_addr 192.168.1.1 \
 -gateway_ip_addr_step 0.0.1.0 \
 -remote_ip_addr 1.1.1.4 \
 -remote_ip_addr_step 0.0.0.0 \
 -vlan_cfi 0 \
 -vlan_id 7 \
 -vlan_id_mode increment \
 -vlan_id_step 7 \
 -vlan_user_priority 7
 Output: {handle router1} {handles router1} {status 1}
 Modify the created LDP router:
 sth::emulation_ldp_config -handle $ldpRouterHandle \
 -hello_interval 5 \
 -mode modify
 Output: {handle router1} {handles router1} {status 1}
 Delete the created LDP router:
 sth::emulation_ldp_config -handle $ldpRouterHandle \
 -mode delete
 Output: {status 1}
 The following example enables LDP over a provided device:
 puts "Config IS-IS-------------------"
 set routerStatus [sth::emulation_isis_config \
 -port_handle $port\
 -mode create \
 -ip_version 4 \
 -area_id 000000000001 \
 -count 1 \
 -hello_interval 11 \
 -holding_time 40 \
 -intf_ip_addr 13.25.0.2\
 -intf_ip_prefix_length 16 \
 -intf_metric 10 \
 -bfd_registration 1\
 -gateway_ip_addr 13.25.0.1 \
 -vlan_id 100 \
 -vlan_outer_id 200 \
 ]
LDP Functions
476
 puts "IS-IS: $routerStatus"
 keylget routerStatus handle router
 puts "Config LDP--------------------"
 set routerStatus [sth::emulation_ldp_config -mode create \
 -handle $router\
 -graceful_recovery_timer 55 \
 -egress_label_mode exnull \
 -label_adv on_demand \
 -bfd_registration 1 \
 ]
 puts "LDP: $routerStatus\n"
 Sample output for example shown above:
 Config IS-IS--------------------
 IS-IS: {handle router1} {handles router1} {session_router isislspconfig1}
 {status 1}
 Config LDP--------------------
 LDP: {handle router1} {handles router1} {status 1}
 #### HLTAPI for Python ####
 The following example creates and starts an LSR on an LDP port:
 device_ret0 = sth.emulation_ldp_config (
 mode = 'create',
 vlan_id_mode = 'increment',
 port_handle = port_handle[0],
 vlan_user_priority = '7',
 vlan_cfi = '0',
 vlan_id = '7',
 vlan_id_step = '7',
 lsr_id = '12.1.1.1',
 mac_address_init = '00:10:94:00:00:04',
 intf_ip_addr = '192.168.1.11',
 gateway_ip_addr = '192.168.1.1',
 intf_prefix_length = '24',
 hello_interval = '15',
 label_adv = 'on_demand',
 keepalive_interval = '70',
 peer_discovery = 'link',
 label_start = '7',
 recovery_time = '140',
 remote_ip_addr = '1.1.1.4',
 reconnect_time = '60',
 egress_label_mode = 'nextlabel',
 graceful_restart = '0',
 graceful_recovery_timer= '140');

 Sample Output: {'status': '1', 'handles': 'router1', 'handle': 'router1'}
 #### HLTAPI for Perl ####
 The following example creates and starts an LSR on an LDP port:
 my %device_ret0 = sth::emulation_ldp_config (
 mode => 'create',
 vlan_id_mode => 'increment',
 port_handle => "$hport[1]",
 vlan_user_priority => '7',
 vlan_cfi => '0',
 vlan_id => '7',
 vlan_id_step => '7',
 lsr_id => '12.1.1.1',
 mac_address_init => '00:10:94:00:00:04',
 intf_ip_addr => '192.168.1.11',
 gateway_ip_addr => '192.168.1.1',
 intf_prefix_length => '24',
 hello_interval => '15',
 label_adv => 'on_demand',
 keepalive_interval => '70',
LDP Functions
477
 peer_discovery => 'link',
 label_start => '7',
 recovery_time => '140',
 remote_ip_addr => '1.1.1.4',
 reconnect_time => '60',
 egress_label_mode => 'nextlabel',
 graceful_restart => '0',
 graceful_recovery_timer=> '140');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'handles';
 $VAR4 = 'router1';
 $VAR5 = 'handle';
 $VAR6 = 'router1';
Notes:
End of Procedure Header
sth::emulation_ldp_control
Name:
 sth::emulation_ldp_control
Purpose:
 Starts, stops, or restarts an LSR.
Synopsis:
 sth::emulation_ldp_control
 -handle <LDP_session_handle>
 -mode {stop | start | restart }
 [-port_handle <port_handle> ]
Arguments:
 -handle
 Identifies the router handle, returned from the
 emulation_ldp_config function when creating an LSR. This
 argument is mandatory. The router handle value is
 alphanumeric.
 -port_handle
 Identifies the port on which to stop, start, or restart the
 routers.
 -mode
 Specifies the action to be taken. Possible values are
 stop, start, or restart the LSR, This argument is mandatory.
 stop - Stops the router with the specified handle.
 start - Starts the router with the specified handle.
 restart - Stops the router with the specified handle
 and then starts it again. If graceful restart is
 enabled (sth::emulation_ldp_config -graceful_restart 1),
 the restart mode restarts the router without stopping
 the router first.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
LDP Functions
478
 -advertise
 -flap_count
 -flap_down_time
 -flap_interval_time
 -flap_router
 -withdraw
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_ldp_control function controls the starting and
 stopping of LSRs as well as deleting them.
Examples:
 #### HLTAPI for Tcl ####
 To start an LSR:
 sth::emulation_ldp_control -mode start -handle $ldpRouterHandle
 To stop an LSR:
 sth::emulation_ldp_control -mode stop -handle $ldpRouterHandle
 To restart an LSR:
 sth::emulation_ldp_control -mode restart -handle $ldpRouterHandle
 Sample Output: {status 1}
 #### HLTAPI for Python ####
 To start an LSR:
 ctrl_ret1 = sth.emulation_ldp_control (
 handle = device_list,
 mode = 'start');

 Sample Output: {'status': '1'}

 #### HLTAPI for Perl ####
 To start an LSR:
 my %ctrl_ret1 = sth::emulation_ldp_control (
 handle => "$device_list",
 mode => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes: None
End of Procedure Header
sth::emulation_ldp_info
Name:
 sth::emulation_ldp_info
Purpose:
LDP Functions
479
 Returns information about the LDP session.
Synopsis:
 sth::emulation_ldp_info
 -handle <ldp_handle>
 -mode {state|stats|settings|lsp_labels}
Arguments:
 -handle
 The handle of the LDP session for which you want
 information.
 -mode
 Specifies the kind of information you want to see.
 Possible values are state, stats, settings, and lsp_labels.
 You must specify a mode; there is no default.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 state
 Returns the state of an LSR and a summary of LSPs
 configured on each LSR (see list below). This is a
 Spirent-added key.
 stats
 Retrieves the IP address of the specified port and the
 number of messages transmitted and received (see list
 below).
 settings
 Retrieves the IP address of the specified port and the
 configuration settings for the LDP session (see list
 below).
 lsp_labels
 Retrieves the list of LSP labels, information about
 them, and their FEC type (see list below).
 status
 Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log
 Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null
 The following keys are returned when you specify "-mode state":
 session_state
 State of the LDP router:
 LDP_SESSION_STATE_NO_ STATE ------ >nonexist
 LDP_SESSION_STATE_DOWN -----> init
 LDP_SESSION_STATE_UP -----> operational
 LDP_SESSION_STATE_FAILED -----> disabled
 LDP_SESSION_STATE_OPEN ------> opensent
 LDP_SESSION_STATE_CONNECT -----> openrec
 num_incoming_ingress_lsps
 Specifies number of opened ingress LSPs.
 num_incoming_egress_lsps
 Specifies number of opened egress LSPs.
 lsp_pool_handle
 Specifies LSP handles.
LDP Functions
480
 type
 Type of LSP: egress or ingress.
 num_opened_lsps
 Specifies number of opened LSPs.
 The following keys are returned when you specify "-mode stats":
 routing_protocol Not supported in Spirent HLTAPI.
 elapsed_time Time in seconds measured when the router
 session is started until the time the
 statistics are retrieved or when the router
 session has stopped.
 ip_address IP address of the port on the interface card.
 linked_hellos_tx Number of direct HELLO messages sent.
 linked_hellos_RX Number of direct HELLO messages received.
 targeted_hellos_tx Number of targeted HELLO messages sent.
 targeted_hellos_RX Number of targeted HELLO messages received.
 total_setup_time Not supported in Spirent HLTAPI.
 min_setup_time Not supported in Spirent HLTAPI.
 max_setup_time Not supported in Spirent HLTAPI.
 num_lsps_setup Number of LSPs configured on the LDP session.
 req_rx Number of label requests received.
 req_tx Number of label requests sent.
 map_rx Number of label mappings sent.
 map_tx Number of label mappings received.
 release_rx Number of label release received.
 release_tx Number of label release sent.
 withdraw_rx Number of label withdraws received.
 withdraw_tx Number of label withdraws sent.
 abort_rx Number of label aborts received.
 abort_tx Number of label aborts sent.
 notif_rx Number of notifications received.
 notif_tx Number of notifications sent.
 The following keys are returned when you specify "-mode settings":
 intf_ip_address
 IP address of the port on the interface card:
 a.b.c.d.
 label_type
 Not supported in Spirent HLTAPI.
 transport_address
 Not supported in Spirent HLTAPI.
LDP Functions
481
 targeted_hello
 Not supported in Spirent HLTAPI.
 label_adv
 Specified type of label advertisement.
 Spirent HLTAPI always runs in unsolicited mode
 loop_detection
 Not supported in Spirent HLTAPI.
 hello_hold_time
 Not supported in Spirent HLTAPI.
 hello_interval
 Number of seconds between HELLO messages.
 keepalive_interval
 Number of seconds between KEEPALIVE messages.
 keepalive_holdtime
 Not supported in Spirent HLTAPI.
 path_vector_limit
 Not supported in Spirent HLTAPI.
 max_pdu_length
 Not supported in Spirent HLTAPI.
 label_space
 Not supported in Spirent HLTAPI.
 vpi
 Not supported in Spirent HLTAPI.
 vci
 Not supported in Spirent HLTAPI.
 vc_direction
 Not supported in Spirent HLTAPI.
 atm_merge_capability
 Not supported in Spirent HLTAPI.
 fr_merge_capability
 Not supported in Spirent HLTAPI.
 atm_range_min_vci
 Not supported in Spirent HLTAPI.
 atm_range_max_vci
 Not supported in Spirent HLTAPI.
 atm_range_min_vpi
 Not supported in Spirent HLTAPI.
 atm_range_max_vpi
 Not supported in Spirent HLTAPI.
 The following keys are returned when you specify "-mode lsp_labels":
 source
 The list of LSP pool handles.
 fec_type
 The list of FEC types belonging to each source.
 (The FEC type specified in the -fec_type
 argument for the sth::emulation_ldp_route_config
 function.)
 prefix
 The list of prefixes belonging to each source.
LDP Functions
482
 prefix_length
 The list of prefix lengths belonging to each
 source.
 label
 The list of MPLS labels belonging to each source.
Description:
 The sth::emulation_ldp_info function provides information about
 either the state of the LDP session, the settings specified for the LDP
 configuration, the statistics returned by it, or the list of LSP labels.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples:
 #### HLTAPI for Tcl ####
 Assume we already have the LDP router handle ldpSessionHnd
 sth::emulation_ldp_info \
 -mode stats \
 -handle $ldpSessionHnd
 Output:
 {ip_address 41.1.0.2} {abort_rx 0.000000} {map_tx 5.000000} {abort_tx
 0.000000}
 {withdraw_rx 0.000000} {withdraw_tx 0.000000} {linked_hellos_rx
 27.000000}
 {targeted_hellos_rx 0.000000} {linked_hellos_tx 24.000000} {notif_rx
 0.000000}
 {targeted_hellos_tx 0.000000} {req_rx 0.000000} {release_rx 0.000000}
 {notif_tx 0.000000} {req_tx 0.000000} {release_tx 0.000000} {map_rx
 1774.000000} {elapsed_time 123.418951035} {num_lsps_setup 5} {status
 1}
 Assume we already have the LDP router handle ldpSessionHnd
 sth::emulation_ldp_info -mode state -handle $ldpSessionHnd
 Output:
 {type egress} {session_state operational} {lsp_pool_handle
 ipv4prefixlsp1} {num_incoming_ingress_lsps 0.000000} {num_opened_lsps
 5.000000} {num_incoming_egress_lsps 5.000000} {status 1}
 Assume we already have the LDP router handle ldpSessionHnd
 sth::emulation_ldp_info -mode lsp_labels -handle $ldpSessionHnd
 Output:
 {source {ldplspresults1 ldplspresults2 ldplspresults3 ldplspresults4
 ldplspresults5}} {label {50 51 52 53 54}} {prefix_length {24 24 24 24
 24}} {prefix {10.0.0.0 10.0.1.0 10.0.2.0 10.0.3.0 10.0.4.0}}
 {fec_type {ipv4_prefix ipv4_prefix ipv4_prefix ipv4_prefix
 ipv4_prefix}} {status 1}
 #### HLTAPI for Python ####
 Assume we already have the LDP router handle device
 results_ret1 = sth.emulation_ldp_info (
 handle = device,
 mode = 'state');
 Sample Output:
 {'status': '1', 'session_state': 'nonexist', 'num_opened_lsps': '0',
 'lsp_pool_handle': 'ipv4prefixlsp1', 'num_incoming_egress_lsps': '0',
 'num_incoming_ingress_lsps': '0', 'type': ''}
 
LDP Functions
483
 #### HLTAPI for Perl ####
 Assume we already have the LDP router handle $device:
 my %results_ret1 = sth::emulation_ldp_info (
 handle => "$device",
 mode => 'state');
 Sample Output:
 $VAR1 = 'num_incoming_ingress_lsps';
 $VAR2 = '0';
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'type';
 $VAR6 = '';
 $VAR7 = 'lsp_pool_handle';
 $VAR8 = 'ipv4prefixlsp1';
 $VAR9 = 'num_opened_lsps';
 $VAR10 = '0';
 $VAR11 = 'num_incoming_egress_lsps';
 $VAR12 = '0';
 $VAR13 = 'session_state';
 $VAR14 = 'nonexist';
Notes: None
End of Procedure Header
sth::emulation_ldp_route_config
Name:
 sth::emulation_ldp_route_config
Purpose:
 Creates, modifies, or deletes Link State Path (LSP) pools or Forwarding
 Equivalent Class (FEC) ranges on an emulated Label Switched Router
 (LSR) on a Spirent HLTAPI chassis.
Synopsis:
 sth::emulation_ldp_route_config
 -mode create -handle <ldp_handle> |
 -mode { modify|delete } -lsp_handle <lsp_handle>
 [-lsp_type {ipv4_egress | ipv4_ingress | ipv6_egress | ipv6_ingress |
 pwid | generalized_pwid}]
 [-num_lsps <integer>]
 [-num_routes <integer>]
 [-fec_type ipv4_prefix | host_addr | vc}]
 [-fec_ip_prefix_length <1-32>
 [-fec_ip_prefix_start <a.b.c.d.>
 [-fec_ip_prefix_step <integer>]
 [-fec_host_addr <a.b.c.d>
 [-fec_host_step <integer>
 [-fec_host_prefix_length <1-32>]
 [-fec_vc_cbit {0|1}]
 [-fec_vc_group_id <0 to 0xFFFFFFFFF>]
 [-fec_vc_id_start <0 to 0xFFFFFFFFF>]
 [-fec_vc_id_step <integer>]
 [-fec_vc_intf_mtu <integer>]
 [-fec_vc_count <integer>]
 [-fec_vc_id_count <1 - 65535 >]
 [-fec_vc_mac_start <aa:bb:cc:dd:ee:ff>]
 [-fec_type {prefix | host_addr | vc }]
 [-fec_ip_prefix_length <1-128>]
 [-fec_ip_prefix_start <a.b.c.d>]
 [-fec_ip_prefix_step <integer>]
 [-fec_vc_group_id <0-0xFFFFFFFFF>]
 [-fec_vc_id_start <0-0xFFFFFFFFF>]
 [-fec_vc_id_step <0-0xFFFFFFFFF>]
LDP Functions
484
 [-fec_vc_intf_mtu <0-65535>]
 [-fec_vc_type none {fr_dlci | eth_vlan | eth | hdlc | ppp | cem | eth_vpls}]
 [-fec_vc_id_count <1-65535>]
 [-fec_vc_bfd_msg_format {bfd_cc | bfd_cv}]
 [-fec_vc_bfd_my_dis <0-4294967295>]
 [-fec_vc_ctrl_pre {not_preferred | preferred}]
 [-fec_vc_custom_status_en {true | false}]
 [-fec_vc_custom_status <integer>]
 [-fec_vc_dst_ipv4_addr <a.b.c.d>]
 [-fec_vc_bfd_enable {true | false}]
 [-fec_vc_gal_enable {true | false}]
 [-fec_vc_label_sub_tlv_en {true | false}]
 [-fec_vc_label_sub_tlv {0 | 1 | 2 | 3}
 [-fec_vc_if_des <ANY>]
 [-fec_vc_status_tlv_en {true | false}]
 [-fec_vc_redundant_set_role {none|primary_pseudowire|secondary_pseudowire}]
 [-fec_vc_req_vlan_id <0-4095>]
 [-fec_vc_req_vlan_id_incr <0-4095>]
 [-fec_vc_signal_req_switchover_status_bit {true | false}]
 [-fec_vc_vccv_connectivity_verification {0 |icmp_ping|lsp_ping|
 bfd_ip_udp_pw_fault_detection_only
|bfd_ip_udp_pw_fault_detection_with_status_signaling
|bfd_pw_ach_pw_fault_detection_only|
bfd_pw_ach_pw_fault_detection_with_status_signaling}]
 [-fec_vc_vccv_ctrl_channel {0|mpls_pw_label_with_ttl|
 mpls_router_alert_label
 |pwe3_control_word_with_0001b_as_first_nibble}]
 [-fec_vc_count <integer>]
 [-fec_vc_mac_start <aa:bb:cc:dd:ee:ff>]
 [-fec_gen_pwid_attachment_group_id <integer::integer>]
 [-fec_gen_pwid_attachment_group_id_incr <integer::integer>]
 [-fec_gen_pwid_target_individual_id <a.b.c.d>]
 [-fec_gen_pwid_target_individual_id_incr <a.b.c.d>]
 [-fec_gen_pwid_src_individual_id <a.b.c.d>]
 [-fec_gen_pwid_src_individual_id_incr <a.b.c.d>]
 [-fec_gen_pwid_ctrl_pre {not_preferred | preferred}]
 [-fec_gen_pwid_type {none|fr_dlci|eth_vlan|eth|hdlc|ppp|cem|eth_vpls}]
 [-fec_gen_pwid_group_id <0-0xFFFFFFFFF>]
 [-fec_gen_pwid_intf_mtu <0-65535>]
 [-fec_gen_pwid_id_count <0-5000000>]
 [-fec_gen_pwid_bfd_my_dis <0-4294967295.>]
 [-fec_gen_pwid_custom_status_en {true | false}]
 [-fec_gen_pwid_custom_status <integer>]
 [-fec_gen_pwid_dst_ipv4_addr <a.b.c.d>]
 [-fec_gen_pwid_bfd_enable {true | false}]
 [-fec_gen_pwid_bfd_msg_format{ bfd_cc | bfd_cv}]
 [-fec_gen_pwid_gal_enable {true | false}]
 [-fec_gen_pwid_label_sub_tlv_en {true | false}]
 [-fec_gen_pwid_label_sub_tlv {0 | 1 | 2 | 3}]
 [-fec_gen_pwid_if_des <ANY>]
 [-fec_gen_pwid_status_tlv_en {true | false}]
 [-fec_gen_pwid_redundant_set_role {none|primary_pseudowire|secondary_pseudowire}]
 [-fec_gen_pwid_req_vlan_id <0-4095 >]
 [-fec_gen_pwid_req_vlan_id_incr <0-4095>]
 [-fec_gen_pwid_signal_req_switchover_status_bit {true | false}]
 [-fec_gen_pwid_vccv_connectivity_verification {0 icmp_ping|lsp_ping|
 bfd_ip_udp_pw_fault_detection_only
|bfd_ip_udp_pw_fault_detection_with_status_signaling
|bfd_pw_ach_pw_fault_detection_only|
bfd_pw_ach_pw_fault_detection_with_status_signaling}]

 [-fec_gen_pwid_vccv_ctrl_channe
 {0|mpls_pw_label_with_ttl|mpls_router_alert_label|
 pwe3_control_word_with_0001b_as_first_nibble}]
 [-fec_gen_pwid_pw_count <0-5000000>]
Arguments:
 -fec_host_addr
 The first host address to be advertised. You must specify
 "-fec_type host_addr" with this argument. The default is
 192.0.1.0.
LDP Functions
485
 -fec_host_step
 The amount by which the host address to be advertised should
 be increased. The default is 1. You must specify -fec_type
 host_addr with this argument. When -num_lsps is greater than
 1, you must also specify this argument.
 -fec_host_prefix_length
 Defines the prefix length for the host address to be advertised.
 Possible values range from 1 to 32. The default value is 24.
 You must specify "-fec_type host_addr" with this argument.
 -fec_ip_prefix_length
 The prefix length for the IPv4-prefix FEC range to be
 advertised. Possible values are from 1 to 32. The default is
 24. You must specify -fec_type ipv4_prefix with this
 argument.
 -fec_ip_prefix_start
 The first prefix to be advertised in the IPv4-prefix FEC
 range. The default is 192.0.1.0. You must specify -fec_type
 ipv4_prefix with this argument.
 -fec_ip_prefix_step
 The amount by which the prefix to be advertised should
 be increased. The default is 1. You must specify -fec_type
 ipv4_prefix with this argument. When -num_lsps is greater
 than 1, you must also specify this argument.
 -fec_type
 The type of FEC element to use. Valid types are:
 ipv4_prefix - Configure FECs to be advertised by the
 emulated LSR. This is the default value.
 host_addr - Configure FECs to be advertised by a single
 host.
 vc - Indicates a virtual circuit ID with a label assigned to it.

 You cannot modify this option with -mode modify.
 -fec_vc_cbit
 Enables the generation of a control bit in the VC. Possible
 values are 0 (disable) and 1 (enable). The default is 0
 (disabled). You must specify -fec_type vc with this
 argument.
 -fec_vc_group_id
 The group ID associated with all VC FEC elements for this
 interface. Possible values range from 0 to 0xFFFFFFFFF. The
 default is 0. You must specify -fec_type vc with this
 argument.
 -fec_vc_id_start
 The virtual circuit ID, together with the value of the
 fec_vc_type option, identifies a unique VC. Possible values
 range from 0 to 0xFFFFFFFFF. The default is 1. You must
 specify -fec_type vc with this argument.
 -fec_vc_id_step
 The step value applied between uses of VC ID. The default is
 1. You must specify -fec_type vc with this argument.
 -fec_vc_intf_mtu
 The size of the interface MTU (maximum transmission unit),
 in bytes, for the vc. The default is 1500. You must specify
 "-fec_type vc" with this argument.
 -fec_vc_count
 Indicates the number of pseudowires to be configured on
LDP Functions
486
 each LDP VC range. You must specify "-fec_type vc" with
 this argument.
 -fec_vc_id_count
 Indicates the number of VC IDs to be configured.
 VC ID is the connection ID that together with the VC
 type identifies a particular VC. Possible values range
 from 1 to 65535. The default value is 0.
 You must specify "-fec_type vc" with this argument.
 -fec_vc_mac_start
 Indicates the first MAC address in the MAC range.
 The default value is 00:00:00:00:00:00. You must
 specify "-fec_type vc" with this argument.
 -fec_vc_type
 The type of virtual circuit used. Valid values are:
 Value Description
 none - Do not use a virtual circuit
 fr_dlci - Frame Relay DLCI
 eth_vlan - Ethernet VLAN (This is the default value.)
 eth - Ethernet
 hdlc - HDLC
 ppp - PPP
 cem - CEM
 eth_vpls - Ethernet VPLS
 -fec_type
 Spirent Extension (for Spirent HLTAPI only).
 The type of FEC element to use. Possible values are:
 prefix Configure FECs to be advertised by the
 emulated LSR

 host_addr Configure FECs to be advertised by a single host

 vc VC ID with a label assigned to it

 The default value is prefix.

 -fec_ip_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 The prefix length for the IPv4-prefix or IPv6-prefix FEC range
 to be advertised. This argument is available when -lsp_type is
 set to ipv4_egress, ipv4_ingress, ipv6_egress, or ipv6_ingress.
 Possible values range from 1 to 128.
 -fec_ip_prefix_start
 Spirent Extension (for Spirent HLTAPI only).
 The first prefix to be advertised in the IPv4-prefix and
 IPv6-prefix FEC range. This argument is available when -lsp_type
 is set to ipv4_egress, ipv4_ingress, ipv6_egress or ipv6_ingress.
 The value must be in IPv4 format.
 -fec_ip_prefix_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which the prefix to be advertised should be
 increased. This argument is available when -lsp_type is set to
 ipv4_egress, ipv4_ingress, ipv6_egress, or ipv6_ingress.

 The following group of arguments configure VC LSPs. You must specify -lsp_type pwid.
 -fec_vc_group_id
 Spirent Extension (for Spirent HLTAPI only).
 The group ID associated with all VC FEC elements for this
 interface. Possible values range from 0 to 0xFFFFFFFFF. The
 default is 0.
 -fec_vc_id_start
 Spirent Extension (for Spirent HLTAPI only).
 The virtual circuit ID, together with the value of the
LDP Functions
487
 fec_vc_type option, identifies a unique VC. Possible values range
 from 0 to 0xFFFFFFFFF. The default is 1.
 -fec_vc_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The step value applied between uses of VC ID. Possible values
 range from 0 to 0xFFFFFFFFF. The default value is 1.
 -fec_vc_intf_mtu
 Spirent Extension (for Spirent HLTAPI only).
 The size of the interface MTU, in bytes, for the VC. Possible
 values range from 0 to 65535. The default value is 1500.
 -fec_vc_type
 Spirent Extension (for Spirent HLTAPI only).
 The type of virtual circuit to be used. Possible values are:
 Value Description
 none Do not use a virtual circuit
 fr_dlci Frame Relay Data Link Connection Identifier (DLCI)
 eth_vlan Ethernet VLAN
 eth Ethernet
 hdlc High-Level Data Link Control (HDLC)
 ppp PPP
 cem CEM
 eth_vpls Ethernet VPLS

 The Default value is eth_vlan.
 -fec_vc_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VC IDs to be configured. Possible values
 range from 1 to 65535. The default value is 0.
 -fec_vc_bfd_msg_format
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the BFD message format. This argument is available when
 -fec_vc_bfd_enable is set to true.
 Possible values are:
 bfd_cc BFD Control Channel (CC) message format
 bfd_cv BFD Connection Verification (CV) message format

 The default value is bfd_cc.
 -fec_vc_bfd_my_dis
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the beginning discriminator value for the BFD. This
 argument is available when -fec_vc_bfd_enable is set to true.
 Possible values range from 0 to 4294967295. The default value is 1.

 -fec_vc_ctrl_pre
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the control word preference (C bit) in the FEC TLV.
 Possible values are not_preferred and preferred. The default value
 is not_preferred.
 -fec_vc_custom_status_en
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables custom status code. Possible values are true
 (enable) and false (disable). The default value is false.
 -fec_vc_custom_status
 Spirent Extension (for Spirent HLTAPI only).
 Custom status code. This argument is available when
 -fec_vc_custom_status_en is set to true. The default value is 0.
 -fec_vc_dst_ipv4_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the destination IPv4 address. This argument is
 available when -fec_vc_bfd_enable is set to true. The default
 value is 127.0.0.1.
 
LDP Functions
488
 -fec_vc_bfd_enable
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables BFD for the VC LSP.. Possible values are true
 (enable) and false (disable). The default value is false.

 -fec_vc_gal_enable
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables Generic Associated Label (GAL) for the VC LSP.
 Possible values are true (enable) and false (disable). The
 default value is false.
 -fec_vc_label_sub_tlv_en
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether to include the flow label sub-TLV. Possible
 values are true and false. If it is set to true, flow label
 sub-TLV will be included in the PDU. The default value is false.

 -fec_vc_label_sub_tlv
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the flags for the flow label sub-TLV. This argument is
 available when -fec_vc_label_sub_tlv_en is set to true.
 Possible values are:
 Value Description
 0 none
 1 Tbit
 2 RBit
 3 Tbit.RBit

 The default value is 0.

 -fec_vc_if_des
 Spirent Extension (for Spirent HLTAPI only).
 User-defined interface description

 -fec_vc_status_tlv_en
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to include or exclude the pseudowire status
 TLV. Possible values are true (include) and false (exclude).
 The default value is false.

 -fec_vc_redundant_set_role
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the backup role that the LSP plays.
 Possible values are:
 none No role set
 primary_pseudowire Primary pseudowire
 secondary_pseudowire Secondary pseudowire

 The default value is none.

 -fec_vc_req_vlan_id
 Spirent Extension (for Spirent HLTAPI only).
 ID of the first requested VLAN. Possible values range from 0 to
 4095.

 -fec_vc_req_vlan_id_incr
 Spirent Extension (for Spirent HLTAPI only).
 Step value for additional VLAN IDs. Possible values range from 0
 to 4095.
 -fec_vc_signal_req_switchover_status_bit
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the value for the Signal Request Switchover Status
 bit. Possible values are true and false. The default value is
 false.

 -fec_vc_vccv_connectivity_verification
 Spirent Extension (for Spirent HLTAPI only).
 Control verification type of Virtual Circuit Connectivity
 Verification (VCCV) as specified in RFC 5085. Possible values are
 listed below:
LDP Functions
489
 0
 icmp_ping
 lsp_ping
 bfd_ip_udp_pw_fault_detection_only
 bfd_ip_udp_pw_fault_detection_with_status_signaling
 bfd_pw_ach_pw_fault_detection_only
 bfd_pw_ach_pw_fault_detection_with_status_signaling
 Value 0 indicates no type is specified. The default is 0.

 -fec_vc_vccv_ctrl_channel
 Spirent Extension (for Spirent HLTAPI only).
 Control channel type of VCCV as specified in RFC 5085.
 Possible values are listed below:
 0
 mpls_pw_label_with_ttl
 mpls_router_alert_label
 pwe3_control_word_with_0001b_as_first_nibble

 Value 0 indicates no type is specified. The default is 0.

 -fec_vc_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of pseudowires to be configured on each LDP
 VC range.
 -fec_vc_mac_start
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the first MAC address. The default value is
 00:00:00:00:00:00.
 The following group of arguments configure Generalized PWid LSPs. You must
 specify -lsp_type generalized_pwid.
 -fec_gen_pwid_attachment_group_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting value for the attachment group identifier
 field of the generalized PWid FEC (FEC 129). The value must be in the
 format of integer::integer. The default value is 100::1.

 -fec_gen_pwid_attachment_group_id_incr
 Spirent Extension (for Spirent HLTAPI only).
 Increment value for the attachment group identifier field. The
 value must be in the format of integer::integer. The default
 value is 0::1.

 -fec_gen_pwid_target_individual_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting value for the target attachment individual
 identifier (TAII) field of the generalized PWid FEC (FEC 129). The
 value must be in IPv4 format. The default value is 192.0.0.1.

 -fec_gen_pwid_target_individual_id_incr
 Spirent Extension (for Spirent HLTAPI only).
 Increment value for the TAAI field. The value must be in
 IPv4 format. The default value is 0.0.0.1.

 -fec_gen_pwid_src_individual_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting value for the source attachment individual
 identifier (SAII) field of the generalized PWid FEC (FEC 129). The
 value must be in IPv4 format. The default value is 192.0.0.1.

 -fec_gen_pwid_src_individual_id_incr
 Spirent Extension (for Spirent HLTAPI only).
 Increment value for the SAAI field. The value must be in IPv4
 format. The default value is 0.0.0.1.
 -fec_gen_pwid_ctrl_pre
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the control word preference (C bit) in the FEC TLV.
LDP Functions
490
 Possible values are not_preferred and preferred. The default value
 is not_preferred.

 -fec_gen_pwid_type
 Spirent Extension (for Spirent HLTAPI only).
 The type of virtual circuit used. Possible values are:
 Value Description
 none Do not use a virtual circuit
 fr_dlci Frame Relay DLCI
 eth_vlan Ethernet VLAN
 eth Ethernet
 hdlc HDLC
 ppp PPP
 cem CEM
 eth_vpls Ethernet VPLS

 The default value is eth_vlan.

 -fec_gen_pwid_group_id
 Spirent Extension (for Spirent HLTAPI only).
 Pseudowire group ID of the generalized PWid FEC
 (FEC 129). Possible values range from 0 to 0xFFFFFFFFF. The
 default is 0.
 -fec_gen_pwid_intf_mtu
 Spirent Extension (for Spirent HLTAPI only).
 The size of the interface MTU, in bytes. Possible values range
 from 0 to 65535. The default value is 1500.
 -fec_gen_pwid_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of generalized PWid (FEC 129) PWs to advertise. Possible
 values range from 0 to 5000000. The default value is 1.
 -fec_gen_pwid_bfd_my_dis
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the beginning discriminator value. Possible values
 range from 0 to 4294967295. The default value is 1.
 -fec_gen_pwid_custom_status_en
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables custom status code. This argument is available
 when -fec_gen_pwid_status_tlv_en is set to true. Possible values
 are true (enable) and false (disable). The default value is false.

 -fec_gen_pwid_custom_status
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the status code. This argument is available when
 -fec_gen_pwid_custom_status_en is set to true.

 -fec_gen_pwid_dst_ipv4_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the destination IPv4 address. This argument is
 available when -fec_gen_pwid_bfd_enable is set to true. The
 default value is 127.0.0.1.

 -fec_gen_pwid_bfd_enable
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables BFD for the Generalized PWid LSP. Possible
 values are true (enable) and false (disable). The default value
 is false.

 -fec_gen_pwid_bfd_msg_format
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the BFD message format. This argument is available when
 -fec_vc_bfd_enable is set to true.
 Possible values are:
 bfd_cc BFD Control Channel (CC) message format
 bfd_cv BFD Connection Verification (CV) message format

 The default value is bfd_cc.
LDP Functions
491

 -fec_gen_pwid_gal_enable
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables Generic Associated Label (GAL) for the
 generalized PWid LSP. Possible values are true (enable) and false
 (disable). The default value is false.

 -fec_gen_pwid_label_sub_tlv_en
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether to include the flow label sub-TLV in the PDU.
 Possible values are true and false. If it is set to true, flow
 label sub-TLVs will be included in the PDU. The default value is
 false.

 -fec_gen_pwid_label_sub_tlv
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the flags for the flow label sub-TLV. This argument is
 available when -fec_gen_pwid_label_sub_tlv_en is set to true.
 Possible values are:
 Value Description
 0 None
 1 Tbit
 2 RBit
 3 Tbit.RBit

 The default value is 0.
 -fec_gen_pwid_if_des
 Spirent Extension (for Spirent HLTAPI only).
 User-generated interface description. This argument is available
 when -fec_gen_pwid_label_sub_tlv_en is set to true.

 -fec_gen_pwid_status_tlv_en
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to include or exclude the pseudowire status TLV
 in the label mapping message. Possible values are true (include)
 and false (exclude). The default value is false.

 -fec_gen_pwid_redundant_set_role
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the backup role that the LSP plays.
 Possible values are:
 none No role set
 primary_pseudowire Primary pseudowire
 secondary_pseudowire Secondary pseudowire

 The default value is none.

 -fec_gen_pwid_req_vlan_id
 Spirent Extension (for Spirent HLTAPI only).
 ID of the first requested VLAN. Possible values range from 0 to
 4095.

 -fec_gen_pwid_req_vlan_id_incr
 Spirent Extension (for Spirent HLTAPI only).
 Step value for additional VLAN IDs. Possible values range from 0
 to 4095.

 -fec_gen_pwid_signal_req_switchover_status_bit
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the value for the Signal Request Switchover Status
 bit. Possible values are true and false. The default value is
 false.

 -fec_gen_pwid_vccv_connectivity_verification
 Spirent Extension (for Spirent HLTAPI only).
 Control verification type of VCCV as specified in RFC 5085.
 Possible values are listed below:
 0
 icmp_ping
 lsp_ping 
LDP Functions
492
 bfd_ip_udp_pw_fault_detection_only
 bfd_ip_udp_pw_fault_detection_with_status_signaling
 bfd_pw_ach_pw_fault_detection_only
 bfd_pw_ach_pw_fault_detection_with_status_signaling

 Value 0 indicates no type is specified. The default is 0.

 -fec_gen_pwid_vccv_ctrl_channel
 Spirent Extension (for Spirent HLTAPI only).
 Control channel type of VCCV as specified in RFC 5085. Possible
 values are listed below:

 0
 mpls_pw_label_with_ttl
 mpls_router_alert_label
 pwe3_control_word_with_0001b_as_first_nibble

 Value 0 indicates no type is specified. The default is 0.

 -fec_gen_pwid_pw_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of generalized PWid (FEC 129) pseudowires (PW) to
 advertise. Possible values range from 0 to 5000000. The default
 value is 1.
 -handle
 Identifies the router on which to create, modify, or
 delete LSP (FEC) pools or FEC ranges. This argument is
 mandatory. The value is alphanumeric.
 -lsp_handle
 Specifies the LSP for which to configure the LSP pools and FEC
 range options. This argument is mandatory for modify and delete
 modes, but not for create mode. When you use -mode create, Spirent
 HLTAPI will return a handle for the newly created LSP.
 -mode
 Specifies whether to create, modify, or delete LSPs from the
 emulated router's LSR database. Possible values are:
 create - Creates a new LSP for the LDP session. The handle
 for the LSP is returned in the lsp_handle key (see
 Return Values).
 modify - Modifies the setup for the LSP specified in the
 -lsp_handle argument.
 delete - Removes the LSP specified in the -lsp_handle
 argument.
 -lsp_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of LSP to create. Possible values are:
 ipv4_egress IPv4 prefix/host LSP

 ipv4_ingress IPv4 ingress prefix LSP

 ipv6_egress IPv6 prefix/host LSP

 ipv6_ingress IPv6 ingress prefix LSP

 pwid Virtual Circuit (VC) LSP

 generalized_pwid Generalized PWid (FEC129) LSP

 The default value is ipv4_egress.

 -num_lsps
 The number of label bindings to be advertised. The default
 is 1. When -num_lsps is greater than 1, you must also
 specify the -fec_host_step, and -fec_ip_prefix_step 
LDP Functions
493
 arguments.
 -num_routes
 Indicates the number of routes per LSP that will be advertised
 when -fec_type is set to ipv4_egress, ipv4_ingress, ipv6_egress,
 or ipv6_ingress.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.

 -egress_label_mode
 -fec_vc_intf_desc
 -fec_vc_intf_mtu_enable
 -hop_count_tlv_enable
 -hop_count_value
 -label_msg_type
 -path_vector_tlv
 -path_vector_tlv_lsr
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 lsp_handle
 The handle that identifies the LSP created by the
 sth::emulation_ldp_route_config function.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_ldp_route_config function creates and
 configures LSPs. Use the -lsp_handle argument to identify the router
 for which to create, modify, or delete an LSP. (The router handle value is
 contained in the keyed list returned by the sth::emulation_ldp_config
 function.) Use the -mode argument to specify the action to perform. See the
 -mode argument for a description of the actions.
 FEC is a group of IP packets which are forwarded in the same way, over the
 same path, and with the same forwarding treatment. An FEC (Forwarding
 Equivalence Class) is associated with each LSP created. The FEC specifies
 which packets are mapped to that LSP.
Examples:
 #### HLTAPI for Tcl ####
 Assume we already have the LDP router handle ldpRouterHandle
 sth::emulation_ldp_route_config -mode create \
 -handle $ldpRouterHandle \
 -fec_type vc \
 -fec_vc_cbit 1 \
 -fec_vc_group_id 77 \
 -fec_vc_id_start 7 \
 -fec_vc_id_step 7 \
 -fec_vc_intf_mtu 1200 \
 -fec_vc_type eth_vlan \
 -num_lsps 2
 The following example creates an LSP pool with two LSPs in it on the
 LDP router (ldpRouterHandle) on port1:
 sth::emulation_ldp_route_config -mode create \
 -handle $ldpRouterHandle \
 -num_lsps 2 \
 -fec_type ipv4_prefix \
LDP Functions
494
 -fec_ip_prefix_step 1 \
 -fec_ip_prefix_length 24 \
 -fec_ip_prefix_start 32.25.0.0
 Sample Output: {lsp_handle ipv4prefixlsp1} {status 1}
 #### HLTAPI for Python ####
 Assume we already have the LDP router handle device_ret0_hdl:
 The following example creates an LSP pool with two LSPs in it on the
 LDP router:
 device_ret0_route0 = sth.emulation_ldp_route_config (
 mode = 'create',
 handle = device_ret0_hdl,
 fec_type = 'ipv4_prefix',
 fec_ip_prefix_step = '1',
 fec_ip_prefix_start = '32.25.0.0',
 num_lsps = '2',
 fec_ip_prefix_length= '24');
 Sample Output: {'lsp_handle': 'ipv4prefixlsp1', 'status': '1'}
 #### HLTAPI for Perl ####
 Assume we already have the LDP router handle device_ret0_hdl:
 The following example creates an LSP pool with two LSPs in it on the
 LDP router:
 my %device_ret0_route0 = sth::emulation_ldp_route_config (
 mode => 'create',
 handle => "$device_ret0_hdl",
 fec_type => 'ipv4_prefix',
 fec_ip_prefix_step => '1',
 fec_ip_prefix_start => '32.25.0.0',
 num_lsps => '2',
 fec_ip_prefix_length=> '24');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'lsp_handle';
 $VAR4 = 'ipv4prefixlsp1';
Notes:
 The -fec_vc_intf_mtu_enable is not supported in the Spirent HLTAPI.
 The VC Fec interface MTU option (-fec_vc_intf_mtu) is always enabled
 in the Spirent HLTAPI.
End of Procedure Header
sth::emulation_lsp_switching_point_tlvs_config
Name:
 sth::emulation_lsp_switching_point_tlvs_config
Purpose
 Creates, modifies, or deletes switching point TLVs for VC LSP (FEC128)
 or generalized PWid (FEC129) LSP

Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_lsp_switching_point_tlvs_config
 -mode create -lsp_handle <lsp_handle>
 -mode {modify | delete} [-tlv_handle <tlv_handle>
 [-attachment_group_id <integer::integer>]
LDP Functions
495
 [-attachment_group_id_incr <integer::integer>]
 [-last_segment_traversed_subtlv_enable {true | false}]
 [-last_pseudowire_segment_fec_type {fec_128 | fec_129}]
 [-local_ipv4_addr <a.b.c.d>]
 [-pseudowire_addr_enable {true | false}]
 [-pseudowire_addr_attachment_circuit_id <a.b.c.d>]
 [-pseudowire_addr_attachment_circuit_id_incr <a.b.c.d>]
 [-pseudowire_addr_global_id <integer>]
 [-pseudowire_addr_prefix <a.b.c.d>]
 [-remote_ipv4_addr <a.b.c.d>]
 [-remote_ipv4_addr_increment <a.b.c.d>]
 [-remote_ipv4_addr_repeat_count <integer>]
 [-remote_ipv4_unique_addr_count <integer>]
 [-start_vc_id <integer>]
 [-src_attachment_individual_id <a.b.c.d>]
 [-src_attachment_individual_id_incr <a.b.c.d>]
 [-switching_point_description <string>]
 [-target_attachment_individual_id <a.b.c.d>]
 [-target_attachment_individual_id_incr <a.b.c.d>]
 [-vc_id_incr <integer>]
Arguments:
 -mode
 Specifies the action to perform. This argument is mandatory.
 Possible values are:

 create Creates a new S-PE TLV. The handle
 for the TLV is returned in the tlv_handle key (see
 Return Values)

 modify Modifies the setup for the Switching point TLV specified
 in the -tlv_handle argument

 delete Removes the Switching point TLV specified in the
 -tlv_handle argument

 -tlv_handle
 Specifies the switching point TLV under which to configure the
 TLV options. This argument is mandatory for the modify and delete
 modes, but not for create mode. When you use -mode create,
 Spirent HLTAPI will return a handle for the newly created
 switching point TLV.

 -lsp_handle
 Specifies the LSP under which to create the switching point TLV.
 This argument is required for -mode create. The LSP handle is
 returned from the sth::emulation_ldp_route_config function, with
 -lsp_type set to pwid or generalized_pwid.

 -attachment_group_id
 Starting attachment group identifier for the last pseudowire
 segment traversed. This argument is available when
 -last_pseudowire_segment_fec_type is set to fec_129. The value
 must be in the format of integer::integer. The default value is
 100:1.

 -attachment_group_id_incr
 Attachment Group Identifier (AGI) increment for the last
 pseudowire segment traversed. This argument is available when
 -last_pseudowire_segment_fec_type is set to fec_129. The value
 must be in the format of integer::integer. The default value is
 0:1.
 -last_segment_traversed_subtlv_enable
 Enables/disables sub-TLV to specify the FEC of the last
 pseudowire segment traversed for the multi-segment pseudowire
 (MS-PW). Possible value are true (enable) and false (disable).
 The default value is true.
 -last_pseudowire_segment_fec_type
 FEC type of the last pseudowire segment traversed. This argument
LDP Functions
496
 is available when -last_segment_traversed_subtlv_enable is set to
 true. Possible values are:
 fec_128 VC/PWid FEC (FEC 128)
 fec_129 Generalized PWid FEC (FEC 129)

 The default value is fec_128.

 -local_ipv4_addr
 A sub-TLV to specify the router ID/loopback IPv4 address of the
 local switching point. The value must be in IPv4 format.
 -pseudowire_addr_enable
 Enables/Disables sub-TLV for specifying Layer 2 address of the PW
 switching point. Possible values are true (enable) and false
 (disable). The default value is false.
 -pseudowire_addr_attachment_circuit_id
 Starting value for the attachment circuit ID. It is used
 in the sub-TLV for specifying Layer 2 address of the PW switching
 point. This argument is available when
 pseudowire_addr_subtlv_enable is set to true. The value must be
 in IPv4 format. The default value is 0.0.0.1.

 -pseudowire_addr_attachment_circuit_id_incr
 Increment value for subsequent attachment circuit IDs. This
 argument is available when -pseudowire_addr_subtlv_enable is set
 to true. The value must be in IPv4 format. The default value is
 0.0.0.1.

 -pseudowire_addr_global_id
 Global ID that should be used in the sub-TLV for specifying Layer
 2 address of the PW switching point. This argument is available
 when -pseudowire_addr_subtlv_enable is set to true. The value
 must an integer. The default value is 1.

 -pseudowire_addr_prefix
 Pseudowire address prefix used in the sub-TLV for specifying
 Layer 2 address of the PW switching point. This argument is
 available when -pseudowire_addr_subtlv_enable is set to true. The
 value must be in IPv4 format. The default value is 192.0.0.1.

 -remote_ipv4_addr
 Specifies the router ID/loopback IPv4 address of the last PW
 switching point traversed or of the T-PE.

 -remote_ipv4_addr_increment
 Increment value for subsequent remote IPv4 addresses. The value
 must be in IPv4 format. The default value is 0.0.0.0.

 -remote_ipv4_addr_repeat_count
 Number of times a created remote IPv4 address should be repeated
 as the TLV value of the remote IPv4 sub-TLV, before the next
 created remote IPv4 address is used. Value 0 indicates no
 repetition. The default value is 0.

 -remote_ipv4_unique_addr_count
 Number of remote IPv4 unique addresses. The default value is 0.
 -start_vc_id
 Starting VC ID of the last pseudowire segment traversed. This
 argument is available when -last_pseudowire_segment_fec_type is
 set to fec_128. The default value is 1.

 -src_attachment_individual_id
 Starting source attachment individual identifier (SAII) for the
 last pseudowire segment traversed. This argument is available
 when -last_pseudowire_segment_fec_type is set to fec_129. The
 default value is 192.0.0.1.

 -src_attachment_individual_id_incr
LDP Functions
497
 Source SAII increment for the last pseudowire segment traversed.
 This argument is available when -last_pseudowire_segment_fec_type
 is set to fec_129. The value must be in IPv4 format. The default
 value is 0.0.0.0.

 -switching_point_description
 PW switching point description, in string format. 0 to 80
 characters are supported. This argument is available when
 -pseudowire_addr_subtlv_enable is set to true.
 -target_attachment_individual_id
 Starting target attachment individual identifier (TAII) for the
 last pseudowire segment traversed. This argument is available
 when -last_pseudowire_segment_fec_type is set to fec_129. The
 value must be in IPv4 format. The default value is 192.0.0.1

 -target_attachment_individual_id_incr
 Target TAII increment for the last pseudowire segment traversed.
 This argument is available when -last_pseudowire_segment_fec_type
 is set to fec_129. The value must be in IPv4 format. The default
 value is 0.0.0.0.
 -vc_id_incr
 VC ID increment for the last pseudowire segment traversed. This
 argument is available when -last_pseudowire_segment_fec_type is
 set to fec_128. The default value is 1.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 tlv_handle The handle that identifies the switching point TLV created by
 the sth::emulation_lsp_switching_point_tlvs_config function

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)
Description:
 The emulation_lsp_switching_point_tlvs_config function creates, modifies, or
 deletes switching point TLVs for VC LSP (FEC128) or generalized PWid
 (FEC129) LSP. (The LSP handle value is contained in the keyed list returned
 by the sth::emulation_ldp_route_config function). Use the -mode argument to
 specify the action to perform. See the -mode argument for a description of
 the actions.
Examples:
 The following examples create a generalized PWid LSP, and then the switching
 point TLV using the LSP handle returned:

 set device_ret0_route0 [sth::emulation_ldp_route_config\
 -mode create \
 -handle $device_ret0_hdl \
 -lsp_type generalized_pwid \
 -fec_gen_pwid_label_sub_tlv_en false \
 -fec_gen_pwid_custom_status_en false \
 -fec_gen_pwid_ctrl_pre not_preferred \
 -fec_gen_pwid_src_individual_id 192.0.0.1 \
 -fec_gen_pwid_label_sub_tlv 0 \
 -fec_gen_pwid_custom_status 0 \
 -fec_gen_pwid_src_individual_id_incr 0.0.0.0 \
 -fec_gen_pwid_redundant_set_role none \
 -fec_gen_pwid_gal_enable false \
 -fec_gen_pwid_type eth_vlan \
 -fec_gen_pwid_signal_req_switchover_status_bit false \
 -fec_gen_pwid_target_individual_id_incr 0.0.0.0 \
 -fec_gen_pwid_req_vlan_id_incr 1 \
LDP Functions
498
 -fec_gen_pwid_pw_count 1 \
 -fec_gen_pwid_attachment_group_id 100:1 \
 -fec_gen_pwid_bfd_enable false \
 -fec_gen_pwid_bfd_msg_format bfd_cc \
 -fec_gen_pwid_status_tlv_en false \
 -fec_gen_pwid_dst_ipv4_addr 127.0.0.1 \
 -fec_gen_pwid_vccv_connectivity_verification 0 \
 -fec_gen_pwid_attachment_group_id_incr 0:1 \
 -fec_gen_pwid_id_count 1 \
 -fec_gen_pwid_group_id 0 \
 -fec_gen_pwid_vccv_ctrl_channel 0 \
 -fec_gen_pwid_intf_mtu 1500 \
 -fec_gen_pwid_target_individual_id 192.0.0.1 \
 ]

 set device_ret0_lsp0_hdl [lindex [keylget device_ret0_route0 lsp_handle] 0]
 set device_ret0_route0_tlv0 [sth::emulation_lsp_switching_point_tlvs_config\
 -mode create \
 -lsp_handle $device_ret0_lsp0_hdl \
 -remote_ipv4_addr_repeat_count 0 \
 -last_pseudowire_segment_fec_type fec_128 \
 -remote_ipv4_addr_increment 0.0.0.0 \
 -remote_ipv4_unique_addr_count 0 \
 -vc_id_incr 1 \
 -last_segment_traversed_subtlv_enable true \
 -start_vc_id 1 \
 -pseudowire_addr_enable false \
 ]

 Output:
 {tlv_handle pseudowireswitchingpointtlv1} {status 1}
Notes: None
End of Procedure Header
LLDP Functions
499
LLDP Functions
Functions:
sth::emulation_lldp_config
sth::emulation_lldp_optional_tlv_config
sth::emulation_lldp_dcbx_tlv_config
sth::emulation_lldp_control
sth::emulation_lldp_info
sth::emulation_lldp_config
Name:
 sth::emulation_lldp_config
Purpose:
 Creates, modifies, or deletes emulated Link Layer Discovery Protocol (LLDP)
 routers and resets the optional TLVs on a Spirent HLTAPI chassis.

 The LLDP is a vendor-neutral Data Link Layer protocol used by network
 devices to advertise their identity, capabilities, and interconnections
 on an IEEE 802 LAN network. Please refer to the standards document
 802.1AB for more details.
Synopsis:
 sth::emulation_lldp_config
 -mode create -port_handle <port_handle> |
 -mode { modify | reset_tlv | delete } -handle <lldp_router_handle>
 [-count <integer>]
 [-loopback_ip_addr <a.b.c.d>]
 [-loopback_ip_addr_step <a.b.c.d>]
 [-local_mac_addr <aa:bb:cc:dd:ee:ff>]
 [-local_mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-vlan_id <1-4095>]
 [-vlan_id_step <1-4095>]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-intf_ip_prefix_length <0-32>]
 [-gateway_ip_addr <a.b.c.d>]
 [-gateway_ip_addr_step <a.b.c.d>]
 [-intf_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_prefix_length <0-128>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-enable_ipv6_gateway_learning {1|0}]
 [-intf_ipv6_link_local_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-msg_tx_interval <5-32768>]
 [-msg_tx_hold_multiplier <2-10>]
 [-reinitialize_delay <1-10>]
 [-tx_delay <1-8192>]
 [-tlv_chassis_id_subtype {chassis_component | intf_alias |
 port_component | mac_addr | network_addr_4 |
 network_addr_6 | intf_name | locally_assigned |customized}]
 [-tlv_chassis_id_value <chassis_id>]
 [-tlv_port_id_subtype {intf_alias | port_component|
 mac_addr | network_addr_4 | network_addr_6 | intf_name|
 agent_circuit_id | locally_assigned | customized}
 [-tlv_port_id_value <port_id>]
 [-tlv_ttl_value <0-65535>]
 [-reset_tlv_type {lldp | dcbx | both}
 [-lldp_optional_tlvs <ANY>]
 [-dcbx_tlvs <ANY>]

Arguments:
LLDP Functions
500
 -mode
 Specifies the action to be taken. Possible values are described below:

 create - Creates the LLDP devices on the port specified by the
 -port_handle argument.
 modify - Modifies the LLDP devices specified by the -handle argument.
 reset_tlv - Deletes the optional TLVs included in the LLDP messages.
 delete - Deletes the created LLDP devices.
 -handle
 Specifies the LLDP handle returned from sth::emulation_lldp_config.
 This argument is mandatory in the mode of modify, delete, or reset_tlv.

 -count
 Defines the number of devices to create on the interface. This
 argument is used when you increment these addresses:

 intf_ip_addr, gateway_ip_addr, loopback_ip_addr, local_mac_addr,
 vlan_id, intf_ipv6_addr, gateway_ipv6_addr

 The default value is 1.

 -loopback_ip_addr
 Defines the starting Loopback IPv4 address for the emulated LLDP
 devices. The default value is 192.0.0.1. The value
 must be in IPv4 format.
 -loopback_ip_addr_step
 Defines the increment used to generate Loopback IPv4 addresses of
 multiple LLDP devices. The default value is 0.0.0.1.

 -local_mac_addr
 Specifies the starting local interface MAC address for the emulated
 LLDP devices. The value must be in MAC address format. The
 default value is 00:10:94:00:00:01.
 -local_mac_addr_step
 Defines the increment used to generate the MAC addresses of the
 multiple emulated LLDP devices. The value must be in
 MAC address format. The default value is 00:00:00:00:00:01.

 -vlan_id
 Indicates the VLAN ID of the local logical interface of the emulated
 LLDP devices. Possible values range from 1 to 4095. The default value
 is 1.
 -vlan_id_step
 Defines the increment used to generate the VLAN ID of multiple
 emulated LLDP devices. This argument is used with the -vlan_id argument.
 -intf_ip_addr
 Defines the starting Ipv4 address of the local interface of the
 emulated LLDP device. The default value is 192.85.1.3.

 -intf_ip_addr_step
 Defines the increment used to generate the IPv4 addresses for multiple
 emulated devices. The default value is 0.0.0.1.
 -intf_ip_prefix_length
 Specifies the prefix length for the IPv4 address of local interface on
 emulated LLDP device. Possible values range from 0 to 32. The default
 value is 24.

 -gateway_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the gateway under IP interface object of the device. The
 default value is 192.85.1.1. 
LLDP Functions
501

 -gateway_ip_addr_step
 Defines the increment used to generate gateway addresses for multiple
 devices. The default value is 0.0.0.0.
 -intf_ipv6_addr
 Specifies the local Interface IPv6 addresses of the emulated LLDP
 devices. The value must be in IPv6 format. The default
 value is 2000::2.
 -intf_ipv6_addr_step
 Defines the increment used to generate the local Interface IPv6
 addresses of the emulated LLDP devices. The default value is 0000::1.
 -intf_ipv6_prefix_length
 Defines the prefix length for the IPv6 address of local interface on
 emulated LLDP device. Possible values range from 0 to 128. The
 default value is 64.

 -gateway_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the gateway under IP interface object of the device. The
 default value is ::0.
 -gateway_ipv6_addr_step
 Defines the increment used to generate the gateway addresses for
 multiple emulated devices. The default value is 0000::0000.
 -enable_ipv6_gateway_learning
 Determines whether to enable IPv6 learning for the gateway IP and MAC
 addresses or not. Possible values are 1 and 0. The default value is 0.
 When it is set to 1, the learning begins when the ARP/ND command is
 issued. If the learned value is not as same as the configured IPv6
 gateway address, the learned value is used instead of the configured
 IPv6 gateway address.
 -intf_ipv6_link_local_addr
 Specifies the IPv6 link-local address for emulated LLDP devices. The
 value must be in IPv6 format.
 -msg_tx_interval
 Defines the interval (in seconds) between successive transmit cycles.
 Possible values range from 5 to 32768. The default value is 30.

 -msg_tx_hold_multiplier
 Used to calculate how long to retain information. This value is
 multiplied by the Message Tx Interval (-msg_tx_interval) to establish the
 Time To Live value. Possible values range from 2 to 10. The default
 value is 4.
 -reinitialize_delay
 Specifies the delay (in seconds) after LLDP adminStatus becomes
 disabled before re-initialization is attempted. Possible values range
 from 1 to 10. The default value is 2.
 -tx_delay
 Specifies the minimum delay (in seconds) between successive LLDP
 message transmissions. Possible values range from 1 to 8192. The
 default value is 2.
 -tlv_chassis_id_subtype
 Specifies the Subtype Field value in LLDP Chassis ID TLV. The Chassis
 ID TLV is a mandatory TLV that identifies the chassis containing the
 IEEE 802 LAN station associated with the transmitting LLDP agent. The
 Subtype field defines the type of LLDP chassis ID which would be given
 in the Value Field in this TLV. The default value is network_addr_4.
 Possible values described below:

 chassis_component - Chassis component, subtype id is 1.
 intf_alias - Interface alias, subtype id is 2.
LLDP Functions
502
 port_component - Port component, subtype id is 3.
 mac_addr - MAC address, subtype id is 4.
 network_addr_4 - IPv4 network address, subtype id is 5.
 network_addr_6 - IPv6 network address, subtype id is 5.
 intf_name - Interface name, subtype id is 6.
 locally_assigned - Locally assigned, subtype id is 7.
 customized - Subtype id is 0.
 -tlv_chassis_id_value
 Defines the Value Field value in LLDP Chassis ID TLV. This argument
 defines the value of the chassis ID.

 -tlv_port_id_subtype
 The Subtype Field value in LLDP Port ID TLV. The Port ID TLV is a
 mandatory TLV that identifies the port component of the MAC service
 access point (MSAP) identifier associated with the transmitting LLDP agent.
 The Subtype Field value defines the type of LLDP port ID which would be
 given in the Value Field in this TLV.
 Possible values are intf_alias, port_component, mac_addr,
 network_addr_4, network_addr_6, intf_name, agent_circuit_id,
 locally_assigned, and customized. The default value is mac_addr.

 intf_alias - Interface alias, subtype ID is 1.
 port_component - Port component, subtype ID is 2.
 mac_addr - MAC address, subtype ID is 3.
 network_addr_4 - IPv4 network address, subtype ID is 4.
 network_addr_6 - IPv6 network address, subtype ID is 4.
 intf_name - Interface name, subtype ID is 5.
 agent_circuit_ID - Agent circuit ID, subtype ID is 6.
 locally_assigned - Locally assigned, subtype ID is 7.
 customized - Subtype ID is 0.
 -tlv_port_id_value
 Value Field value in LLDP Port ID TLV. Defines the value of port ID.
 -tlv_ttl_value
 Value Field value in LLDP TTL TLV. Defines the TTL value. Possible
 value range from 0 to 65535.

 -reset_tlv_type
 Defines the type of TLVs when you reset optional TLVs in
 reset_tlv mode. This argument is available when you set mode
 -reset_tlv. Possible values are described below:

 lldp - Deletes all LLDP optional TLVs configured in the session.
 dcbx - Deletes all Data Center Bridging Capability Exchange Protocol
 (DCBX) TLVs configured.
 both - Both of LLDP Optional TLVs and DCBX TLVs will be removed..
 -lldp_optional_tlvs
 Defines the optional LLDP TLVs. The value should be the returned
 handle of the sth::emulation_lldp_optional_tlv_config command.
 This argument is available when you set the -mode argument to create
 or modify.
LLDP Functions
503
 -dcbx_tlvs
 Defines the DCBX TLVs. The value should be the returned handle of the
 sth::emulation_lldp_dcbx_tlv_config command.
Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 None.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 SUCCESS:
 {{status 1} {handle XXX}}
 FAILURE
 {{status 0} {log XXX}}
Description:
 The sth::emulation_lldp_config command configures LLDP emulation on the
 specified test port. This command can create, modify, and delete an
 emulated LLDP router and resets optional TLVs on a Spirent HLTAPI chassis.

 In create mode, you can create and configure one or more routers with LLDP
 protocol. And the handle of LLDP router will be returned. The LLDP
 devices can be further configured in modify mode and removed in
 delete mode. You can modify only one router once, but you can create or
 delete one or more routers at one time. Use the -mode argument to specify
 the action to perform.(See the -mode argument description for information
 about the actions.)

 If the performed action fails, Spirent HLTAPI returns an error message.
 For example, if the user tries to configure a nonexistent session handle in
 modify mode, Spirent HLTAPI will return an error message.
Examples:
 #### HLTAPI for Tcl ####
 There must be a port with the handle of port_handle1. The following
 examples use the port with the handle of port_handle1.
 To create and configure a new LDP router:
 set returnKlist [::sth::emulation_lldp_config
 -port_handle port_handle1\
 -mode create\
 -count 1\
 -loopback_ip_addr 192.2.0.1\
 -loopback_ip_addr_step 0.0.0.1\
 -local_mac_addr 00:94:01:00:00:01\
 -local_mac_addr_step 00:00:00:00:00:01\
 -vlan_id 110\
 -vlan_id_step 2\
 -intf_ip_addr 192.168.1.254\
 -intf_ip_addr_step 0.0.1.0\
 -intf_ip_prefix_length 24\
 -gateway_ip_addr 192.168.1.1\
 -gateway_ip_addr_step 0.0.1.0\
 -intf_ipv6_addr 2000::100]

 set lldpRouterHandle [lindex [keylget returnKlist handle] 0]
 To modify the created LLDP router(s).
 set returnKlist [::sth::emulation_lldp_config -handle $lldpRouterHandle \
 -msg_tx_interval 5 \
 -mode modify]
LLDP Functions
504
 To reset optional TLVs in the created LLDP router.
 set returnKlist [::sth::emulation_lldp_config -handle $lldpRouterHandle \
 -mode reset_tlv]
 To delete the created LLDP router.
 set returnKlist [::sth::emulation_lldp_config -handle $lldpRouterHandle \
 -mode delete]

Sample output:
 {{status 1} {handle $lldpRouterHandle}}
 #### HLTAPI for Python ####
 There must be a port with handle port_handle[0], an optional LLDP TLV with
 handle lldp_optional_tlv_hdl, and a DCBX TLV ith handle lldp_dcbx_tlv_hdl.

 The following example creates and configures a LLDP router:
 device_ret0 = sth.emulation_lldp_config (
 mode = 'create',
 lldp_optional_tlvs = lldp_optional_tlv_hdl,
 dcbx_tlvs = lldp_dcbx_tlv_hdl,
 reset_tlv_type = 'both',
 tlv_chassis_id_subtype= 'network_addr_4',
 tlv_chassis_id_value= '192.168.1.1',
 tlv_port_id_subtype = 'mac_addr',
 tlv_port_id_value = '00:00:00:00:00:00',
 tlv_ttl_value = '0',
 port_handle = port_handle[0],
 tx_delay = '2',
 msg_tx_hold_mutiplier= '4',
 msg_tx_interval = '30',
 reinitialize_delay = '2',
 loopback_ip_addr = '192.0.0.1',
 local_mac_addr = '00:10:94:00:00:01',
 intf_ip_prefix_length= '24',
 intf_ip_addr = '192.85.1.3',
 gateway_ip_addr = '192.85.1.1');
Sample Output: {'status': '1', 'handle': 'router1'}
 #### HLTAPI for Perl ####
 There must be a port with handle port_handle[0], an optional LLDP TLV with
 handle lldp_optional_tlv_hdl, and a DCBX TLV ith handle lldp_dcbx_tlv_hdl.

 The following example creates and configures a LLDP router:

 my %device_ret1 = sth::emulation_lldp_config (
 mode => 'create',
 lldp_optional_tlvs => "$lldp_optional_tlv_hdl",
 dcbx_tlvs => "$lldp_dcbx_tlv_hdl",
 reset_tlv_type => 'both',
 tlv_chassis_id_subtype=> 'network_addr_4',
 tlv_chassis_id_value=> '192.168.1.1',
 tlv_port_id_subtype => 'mac_addr',
 tlv_port_id_value => '00:00:00:00:00:00',
 tlv_ttl_value => '0',
 port_handle => "$hport[2]",
 tx_delay => '2',
 msg_tx_hold_mutiplier=> '4',
 msg_tx_interval => '30',
 reinitialize_delay => '2',
 loopback_ip_addr => '192.0.0.2',
 local_mac_addr => '00:10:94:00:00:02',
 intf_ip_prefix_length=> '24',
 intf_ip_addr => '193.85.1.3',
 gateway_ip_addr => '193.85.1.1');

Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
LLDP Functions
505
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None.
End of Procedure Header
sth::emulation_lldp_optional_tlv_config
Name:
 sth::emulation_lldp_optional_tlv_config
Purpose:
 Configures the LLDP optional TLVs. The LLDP Optional TLVs are organizationally
 specific extension sets of TLVs that are defined by standards groups such as
 IEEE 802.1, IEEE 802.3, and others, to enhance management of network stations
 that are operating with particular media and/or protocols.

Synopsis:
 sth::emulation_lldp_optional_tlv_config
 [-tlv_port_description_enable {1|0}]
 [-tlv_port_description_value {alphanum}]
 [-tlv_system_name_enable {1|0}]
 [-tlv_system_name_value <ANY>]
 [-tlv_system_description_enable {1|0}]
 [-tlv_system_description_value <ANY>]
 [-tlv_system_capabilities_enable {1|0}]
 [-tlv_system_capabilities_value <8-bit binary>]
 [-tlv_enabled_capabilities_value <8-bit binary>]
 [-tlv_management_addr_enable {1|0}]
 [-tlv_management_addr_count <integer>]
 [-tlv_management_addr_subtype_list <ANY>]
 [-tlv_management_addr_value_list <ANY>]
 [-tlv_management_addr_intf_numbering_subtype_list <ANY>]
 [-tlv_management_addr_intf_number_value_list <ANY>]
 [-tlv_management_addr_oid_value_list <ANY>]
 [-tlv_port_vlanid_enable {1|0}]
 [-tlv_port_vlanid_value <hexadecimal>]
 [-tlv_port_and_protocol_vlanid_enable {1|0}]
 [-tlv_port_and_protocol_vlanid_count <integer>]
 [-tlv_port_and_protocol_vlanid_value_list <hexadecimal>]
 [-tlv_port_and_protocol_vlanid_enabled_flag_list <list of flags>]
 [-tlv_port_and_protocol_vlanid_supported_flag_list <list of flags>]
 [-tlv_vlan_name_enable {1|0}]
 [-tlv_vlan_name_count <integer>]
 [-tlv_vlan_name_vid_list <ANY>]
 [-tlv_vlan_name_value_list <ANY>]
 [-tlv_protocol_identity_enable {1|0}]
 [-tlv_protocol_identity_count <integer>]
 [-tlv_protocol_identity_value_list <ANY>]
 [-tlv_mac_phy_config_status_enable {1|0}]
 [-tlv_mac_phy_config_status_auto_negotiation_supported_flag {1|0}]
 [-tlv_mac_phy_config_status_auto_negotiation_status_flag {1|0}]
 [-tlv_mac_phy_config_status_auto_negotiation_advertised_capability
 <hexadecimal>]
 [-tlv_mac_phy_config_status_operational_mau_type <hexadecimal>]
 [-tlv_power_via_mdi_enable {1|0}]
 [-tlv_power_via_mdi_power_support_bits <4-bit binary>]
 [-tlv_power_via_mdi_pse_power_pair {signal | spare}]
 [-tlv_power_via_mdi_pse_power_class
 {class1|class2|class3|class4|class5}
 [-tlv_link_aggregation_enable {1|0}]
 [-tlv_link_aggregation_status_flag {1|0}]
 [-tlv_link_aggregation_capability_flag {1|0}]
 [-tlv_link_aggregation_aggregated_port_id <hexadecimal>]
LLDP Functions
506
 [-tlv_maximum_frame_size_enable {1|0}]
 [-tlv_maximum_frame_size_value <integer>]
 [-tlv_customized_enable {1|0}]
 [-tlv_customized_type <integer>]
 [-tlv_customized_value <hexadecimal>]
Arguments:
 -tlv_port_description_enable
 Determines whether to enable Port Description TLVs in the created LLDP
 devices. The Port Description TLVs allows network management to advertise
 the IEEE 802 LAN station's port description. Possible values are 0 and 1.
 When it is set to 1, Spirent HLTAPI will add or enable the Port
 Description TLVs in the created LLDP devices. The default value is 0.

 -tlv_port_description_value
 Specifies the Value Field of Port Description TLVs. The default value
 is "Spirent Port".
 -tlv_system_name_enable
 Determines whether to enable System Name TLVs in the created LLDP
 devices. The System Name TLVs
 allows network management to advertise the system's assigned name.
 Possible values are 1 and 0. When it is set to 1, Spirent HLTAPI adds
 or enables System Name TLVs in the created LLDP devices. The default
 value is 0.

 -tlv_system_name_value
 Specifies the Value Field of System Name TLVs. The default value is
 "Spirent Test Center".
 -tlv_system_description_enable
 Determines whether to enable System Description TLVs in the created
 LLDP devices. The System
 Description TLVs allows network management to advertise the system's
 description. Possible values are 1 and 0. The default value is
 0.

 -tlv_system_description_value
 Specifies the Value Field of System Description TLVs. The default value
 is "Spirent Test Center".
 -tlv_system_capabilities_enable
 Determines whether to enable System Capabilities TLVs in the created
 LLDP devices. The System
 Capabilities TLVs is an optional TLV that identifies the primary
 function(s) of the system and whether or not these primary functions
 are enabled. Possible values are 1 and 0. When it is set to 1, the
 System Capabilities TLVs is enabled. The default value is 0.
 -tlv_system_capabilities_value
 Specifies the Value Field of System Capabilities Flags in System
 Capabilities TLVs. The System Capabilities Flags has 16 binary bits
 (two bytes). The bit position is listed below.

 Bit Capability Reference:
 0 Other
 1 Repeater
 2 Bridge
 3 WLAN Access Point
 4 Router
 5 Telephone
 6 DOCSIS cable device
 7 Station Only
 8-15 Reserved
 Spirent HLTAPI supports the first 8 bits. Please input an 8-bit
 binary number according to the bit position. The default value is
 10000.
 -tlv_enabled_capabilities_value
 Specifies the Value Field of Enabled Capabilities Flags in System
LLDP Functions
507
 Capabilities TLVs. The Enabled Capabilities Flags has 16 binary bits
 (two bytes). The bit position is listed below:

 Bit Capability Reference
 0 Other
 1 Repeater
 2 Bridge
 3 WLAN Access Point
 4 Router
 5 Telephone
 6 DOCSIS cable device
 7 Station Only
 8-15 Reserved

 Spirent HLTAPI supports the first 8 bits, please input an 8-bit
 binary number for this argument according to the bit position above.
 The default value is 10000.
 -tlv_management_addr_enable
 Determines whether to enable Management Address TLVs in the created
 LLDP devices. The Management Address TLVs identifies an address
 associated with the local LLDP agent that may be used to reach
 higher layer entities to assist discovery by network management.
 The TLV also provides room for the inclusion of both the
 system interface number and an object identifier (OID) that are
 associated with this management address, if either or both are known.
 Possible values are 1 and 0. When it is set to 1, Spirent HLTAPI
 enables Management Address TLVs in the created LLDP devices.
 The default value is 0.
 -tlv_management_addr_count
 Defines the number of Management Address TLVs. The default value is 1.
 -tlv_management_addr_subtype_list
 Defines the list of Address Subtype Field values in Management Address
 TLVs. The number of listed values must be equal to the value of
 -tlv_management_addr_count. Each of the values will be set to one
 Management Address TLVs according to the list order. Possible Values
 for each Subtype Field are listed below:

 Value Description
 00 Other
 01 IPv4
 02 IPv6
 03 nsap
 04 hdlc
 05 bbn1822
 06 All 802
 07 e163
 08 e164
 09 f69
 0A x121
 0B IPX
 0C Apple Talk
 0D DEC Net IV
 0E Banyan Vines
 0F E164 with NSAP
 10 DNS
 11 Distinguished Name
 12 AS Number
 13 XTP over IPv4
 14 XTP over IPv6
 15 XTP native mode XTP
 16 Fibre Channel WWPN
 17 Fibre Channel WWNN
 18 Gateway Identifier
 19 AFI


 -tlv_management_addr_value_list
 Defines the list of Address Field values in Management Address
LLDP Functions
508
 TLVs. The number of listed values must be equal to the value of
 -tlv_management_addr_count. Each value on the list will be set to
 one Management Address TLVs according to the list order. If the
 corresponding address subtype is a value in IPv4 or IPv6 format,
 please input the relevant IPv4 or IPv6 address value; if not, please
 input a hexadecimal value.

 -tlv_management_addr_intf_numbering_subtype_list
 Defines the list of Interface Numbering Subtype Field values in
 Management Address TLVs. The number of listed values must be equal
 to the number defined by the -tlv_management_addr_count argument.
 Each the value on the list will be set to one Management Address TLVs
 according to the list order. Possible values and their descriptions
 are listed below:

 Value Description
 01 Unknown
 02 IfIndex
 03 SystemPortNumber

 -tlv_management_addr_intf_number_value_list
 Specifies Interface Number Field values in Management Address TLVs.
 The value of this argument can be an integer or a list of integers.
 Each integer defined by this argument indicates an interface number
 that is an assigned number within the system identifying the specific
 interface associated with this management address.
 The number of integers defined by this argument must be equal to the
 number defined by -tlv_management_addr_count. Each integer
 will be set to the corresponding Management Address TLV according to
 the list order.

 -tlv_management_addr_oid_value_list
 Specifies the list of Object Identifier (OID) Field values in
 Management Address TLVs. The number of values on the list
 must be equal to the number defined by -tlv_management_addr_count.
 Each value on the list will be set to one Management Address TLVs
 according to the order. The individual OID Field value must be an
 octet string.

 -tlv_port_vlanid_enable
 Determines whether to enable Port VLAN ID TLVs in the created LLDP
 devices. Possible values are 0 and 1. When it is set to 1, Spirent
 HLTAPI will enable the Port VLAN ID TLVs in the created LLDP devices.
 The default value is 0.
 -tlv_port_vlanid_value
 Specifies the Value Field of Port VLAN ID TLVs. The value should be a
 hexadecimal value. The value length may be from 1 to 4
 bits. The default value is 1.
 -tlv_port_and_protocol_vlanid_enable
 Determines whether to enable Port and Protocol VLAN ID TLVs in the
 created LLDP devices. Possible values are 1 and 0. When it is set to
 1, Spirent HLTAPI will enable Port and Protocol VLAN ID TLVs in the
 created LLDP devices. The default value is 0.
 -tlv_port_and_protocol_vlanid_count
 Specifies the number of Port VLAN ID TLVs to be added. The value of
 this argument must be an integer. The default value is 1.
 -tlv_port_and_protocol_vlanid_value_list
 Specifies Value Field values in Port and Protocol VLAN ID
 TLVs. The value of this argument can be a hexadecimal value or a list
 of hexadecimal values. The number of hexadecimal values defined by
 this argument must be equal to the number defined by
 -tlv_port_and_protocol_vlanid_count. You should use spaces to
 separate the hexadecimal values on the list. Each value on the list
 will be set to one Port and Protocol VLAN ID TLV according to the
 order of values on the list. The possible length of the hexadecimal
 values are from 1 to 4 bits. The default value is 0. 
LLDP Functions
509
 -tlv_port_and_protocol_vlanid_enabled_flag_list
 Specifies the Enabled Flag Field values in the Port and
 Protocol VLAN ID TLVs. The value of this argument can be a flag or a
 list of flags. The flags indicate whether the corresponding Port and
 Protocol VLAN is enabled or not. The number of values defined by this
 argument must be equal to the number defined by
 -tlv_port_and_protocol_vlanid_count. You must use spaces to separate
 the flags on the list. Each value on the list must be 0 or 1. The
 flags will be set to the corresponding Protocol VLAN ID TLV according
 to the order of the Port and Protocol VLAN ID on the list defined by
 the -tlv_port_and_protocol_vlanid_value_list argument. The default
 value is 1.
 -tlv_port_and_protocol_vlanid_supported_flag_list
 Indicates the Supported Flag Field values in Port and Protocol VLAN ID
 TLVs. The value of this argument can be a flag (0 or 1) or a list of
 flags. The number of flags defined by this argument must be equal to the
 number defined by the -tlv_port_and_protocol_vlanid_count argument. You
 should use spaces to separate the flags on the list. Each flag on the list
 indicates whether the corresponding Port and Protocol VLAN ID is supported
 or not. The default value is 1.
 -tlv_vlan_name_enable
 Determines whether to enable VLAN Name TLVs in the created LLDP
 devices. Possible values are 0 and 1. When it is set to 1, the VLAN
 Name TLVs will be enabled. The default value is 0.
 -tlv_vlan_name_count
 Defines the number of VLAN Name TLVs to be enabled. The value of this
 argument must be an integer. The default value is 1.
 -tlv_vlan_name_vid_list
 Specifies the VLAN ID Field values in VLAN Name TLVs. The value of this
 argument can be an integer or a list of integers. Each integer indicates a
 VLAN ID. The number of integers on the list must be equal to the number
 defined by -tlv_vlan_name_count. You should use spaces to separate the
 integers on the list. Each integer on the list indicates the VLAN ID Field
 value in its corresponding VLAN Name TLV.
 -tlv_vlan_name_value_list
 Specifies the VLAN Name Field values in VLAN Name TLVs. The value of
 this argument can be an alphanumeric value or a list of alphanumeric
 values. Each alphanumeric value defines a VLAN Name. The number of
 alphanumeric values defined by this argument must be equal to the number
 defined by -tlv_vlan_name_count. You should use spaces to separate the
 alphanumeric values on the list.
 -tlv_protocol_identity_enable
 Determines whether to enable Protocol Identity TLVs in the created LLDP
 devices. Possible values are 0 and 1. When it is set to 1, Spirent HLTAPI
 will enable Protocol Identity TLVs in the created LLDP devices. The
 default value is 0.

 -tlv_protocol_identity_count
 Defines the number of Protocol Identity TLVs to be enabled. The value of
 this argument must be an integer. The default value is 1.

 -tlv_protocol_identity_value_list
 Defines the Value Field values in Protocol Identity TLVs. The value of
 this argument can be a hexadecimal value or a list of hexadecimal values.
 Each hexadecimal value defines a protocol identity. The number of
 hexadecimal values defined by this argument must be equal to the number
 defined by -tlv_protocol_identity_count. You should use spaces to separate
 the hexadecimal values on the list.
 -tlv_mac_phy_config_status_enable
 Determines whether to enable MAC/PHY Configuration/Status TLVs in the
 created LLDP devices. PHY indicates the physical sublayer. Possible values
 are 1 and 0. When it is set to 1, the MAC/PHY Configuration/Status TLVs
 are enabled. The default value is 0. 
LLDP Functions
510
 -tlv_mac_phy_config_status_auto_negotiation_supported_flag
 Specifies the Auto-negotiation support Flag Field of MAC/PHY
 Configuration/Status TLVs. Possible values are 1 and 0. When it is set to
 1, the Auto-negotiation function is supported. The default value is 0.
 -tlv_mac_phy_config_status_auto_negotiation_status_flag
 Specifies the Auto-negotiation status Flag Field of MAC/PHY
 Configuration/Status TLVs. Possible values are 1 and 0. When it is set to
 1, the Auto-negotiation is enabled. The default value is 0.
 -tlv_mac_phy_config_status_auto_negotiation_advertised_capability
 Specifies the PMD auto-negotiation advertised capability Field of MAC/PHY
 Configuration/Status TLVs. PMD indicates the physical media dependent
 sublayer. The value of this argument must be a 4-bit hexadecimal value.
 The default value is 800.
 -tlv_mac_phy_config_status_operational_mau_type
 Specifies the Operational MAU Type Field of MAC/PHY Configuration/Status
 TLVs. MAU indicates the Medium Attachment Unit. The value of this argument
 must be a 4-bit hexadecimal value. The default value is 0000.

 -tlv_power_via_mdi_enable
 Determines whether to enable Power Via Media Dependent Interface (MDI)
 TLVs in the created LLDP devices. Possible values are 0 and 1. When it is
 set to 1, Spirent HLTAPI will enable Power Via MDI TLVs in the created
 LLDP devices. The default value is 0.
 -tlv_power_via_mdi_power_support_bits
 Specifies the MDI power support Field of Power Via MDI TLVs. The value
 of this argument must be a 4-bit binary. The default value is 0. The MDI
 power support field shall contain a bit-map of the MDI power capabilities
 and status as defined below:

 Bit Function Value/meaning 0 Port class 1 = PSE
 0 = PD
 1 PSE MDI power support 1 = supported
 0 = not supported
 2 PSE MDI power state 1 = enabled
 0 = disabled
 3 PSE pairs control 1 = pair selection can be controlled
 ability 0 = pair selection cannot be controlled
 4-7 Reserved

 Spirent HLTAPI supports the first 4 bits.

 -tlv_power_via_mdi_pse_power_pair
 Specifies the power sourcing equipment (PSE) power pair Field of
 Power Via MDI TLVs. Possible values are signal and spare. The default
 value is signal.

 signal - Type value of 0x01. Indicates only the signal pairs are in
 use.
 spare -Type value of 0x02. Indicates only the spare pairs are in use.
 -tlv_power_via_mdi_pse_power_class
 Specifies the PSE power class Field of Power Via MDI TLVs. Possible
 values are class1, class2, class3, class4, and class5. The default
 value is class1.

 class1 - class type of 0x01
 class2 - class type of 0x02
 class3 - class type of 0x03
 class4 - class type of 0x04
 class5 - class type of 0x05
 -tlv_link_aggregation_enable
 Determines whether to enable Link Aggregation TLVs in the created LLDP
 devices. Possible values are 0 and 1. When it is set to 1, Spirent HLTAPI
 will enable Link Aggregation TLVs in the created LLDP devices. The
 default value is 0. 
LLDP Functions
511
 -tlv_link_aggregation_status_flag
 Specifies the status Field of Link Aggregation TLVs. The Link Aggregation
 TLV informs the remote port whether or not the sending port believes it is
 currently in a link aggregation. It also provides Port ID information for
 the aggregated port so a management station can efficiently access the
 link aggregation management objects. Possible values are 0 and 1. When it
 is set to 1, the link is currently in aggregation. When it is set to 0,
 the link is not currently in aggregation. The default value is 1.
 -tlv_link_aggregation_capability_flag
 Specifies the capability Field of Link Aggregation TLV. Possible values
 are 0 and 1. When it is set to 1, the link is capable of being aggregated.
 When it is set to 0, the link is capable of being aggregated. The default
 value is 1.
 -tlv_link_aggregation_aggregated_port_id
 Specifies the port ID Field of Link Aggregation TLVs. The value of this
 argument must be an 8-bit hexadecimal value. The default value is
 0000000E.
 -tlv_maximum_frame_size_enable
 Determines whether to enable Maximum Frame Size TLVs in the created
 LLDP devices. Possible values are 0 and 1. When it is set to 1, Spirent
 HLTAPI will enable Maximum Frame Size TLVs. The default value is 0.
 -tlv_maximum_frame_size_value
 Specifies the Maximum Frame Size Field of Link Aggregation TLVs.
 Possible values range from 0 to 65535. The default value is 1518.
 -tlv_customized_enable
 Determines whether to enable customized TLVs in the created LLDP
 devices. Possible values are 0 and 1. When it is set to 1, Spirent HLTAPI
 will enable customized TLVs in the created LLDP devices. The default
 value is 0.
 -tlv_customized_type
 Specifies the type Field of customized TLV. Possible values range from 0
 to 127. The default value is 9.

 -tlv_customized_value
 Specifies the value Field of customized TLV. The default value is 0. The
 value of this argument must be hexadecimal.

Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 None.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 SUCCESS:
 {{status 1} {handle xxxxx}}
 FAILURE:
 {{status 0} {log XXX}}
Description:
 The sth::emulation_lldp_optional_tlv_config configures LLDP optional TLVs.
 You can use this command to specify the content of the following TLVs for
 a test:
 Port Description TLV
 System Name TLV
 System Description TLV
 System Capabilities TLV
LLDP Functions
512
 Management Address TLV
 Port VLAN ID TLV
 Port and Protocol VLAN ID TLV
 VLAN Name TLV
 Protocol Identity TLV
 MAC/PHY Configuration/Status TLV
 Power Via MDI TLV
 Link Aggregation TLV
 Maximum Frame Size TLV
 Customized TLV

 All the arguments of this command are optional.

 Please refer to 802.1AB-2005, "Station and Media Access Control
 Connectivity Discovery", for more information.
Examples:
 #### HLTAPI for Tcl ####
 sth::emulation_lldp_optional_tlv_config -tlv_port_description_enable 1\
 -tlv_port_description_value "AT Test Port"\
 -tlv_system_name_enable 1\
 -tlv_system_name_value "AT Test System"\
 -tlv_system_description_enable 1\
 -tlv_system_description_value "AT Test"\
 -tlv_system_capabilities_enable 1\
 -tlv_system_capabilities_value "11111111"\
 -tlv_enabled_capabilities_value "11111111"\
 -tlv_management_addr_enable 1\
 -tlv_management_addr_count 2\
 -tlv_management_addr_subtype_list "ipv4 ipv6"\
 -tlv_management_addr_value_list "192.168.1.1 2000::1"\
 -tlv_management_addr_intf_numbering_subtype_list "01 02"\
 -tlv_management_addr_intf_number_value_list "100 101"\
 -tlv_management_addr_oid_value_list "0e 0a"

Sample output:
 {{status 1} {handle XXXXX}}
 #### HLTAPI for Python ####
 The following example creates multiple LLDP optional TLVs:
 device_ret0_optional_tlv_config = sth.emulation_lldp_optional_tlv_config (
 tlv_enabled_capabilities_value= '00001000',
 tlv_management_addr_count= '2',
 tlv_management_addr_enable= '1',
 tlv_management_addr_intf_number_value_list= ['0','0'],
 tlv_management_addr_intf_numbering_subtype_list= ['01','01'],
 tlv_management_addr_oid_value_list= ['0A','0'],
 tlv_management_addr_subtype_list= ['ipv4','ipv4'],
 tlv_management_addr_value_list= ['00','00'],
 tlv_port_and_protocol_vlanid_count= '2',
 tlv_port_and_protocol_vlanid_enable= '1',
 tlv_port_and_protocol_vlanid_enabled_flag_list= ['1','1'],
tlv_port_and_protocol_vlanid_supported_flag_list= ['1','1'],
 tlv_port_and_protocol_vlanid_value_list= ['0000','0000'],
 tlv_port_description_enable= '1',
 tlv_port_description_value= ['Spirent','Port'],
 tlv_port_vlanid_enable= '1',
 tlv_port_vlanid_value= '0001',
 tlv_protocol_identity_count= '2',
 tlv_protocol_identity_enable= '1',
 tlv_protocol_identity_value_list= ['0000','0000'],
 tlv_system_capabilities_enable= '1',
 tlv_system_capabilities_value= '00001000',
 tlv_system_description_enable= '1',
 tlv_system_description_value= ['Spirent','Test','Center'],
 tlv_system_name_enable= '1',
 tlv_system_name_value= ['Spirent','Test','Center']);
LLDP Functions
513
Sample Output: {'status': '1', 'handle': 'XXXXX'}
 #### HLTAPI for Perl ####
 The following example creates multiple LLDP optional TLVs:
 my %device_ret2_optional_tlv_config = sth::emulation_lldp_optional_tlv_config (
 tlv_enabled_capabilities_value=> '11111111',
 tlv_management_addr_count=> '1',
 tlv_management_addr_enable=> '1',
 tlv_management_addr_intf_number_value_list=> '10',
 tlv_management_addr_intf_numbering_subtype_list=> '01',
 tlv_management_addr_oid_value_list=> '01',
 tlv_management_addr_subtype_list=> 'ipv4',
 tlv_management_addr_value_list=> '0.0.0.1',
 tlv_port_description_enable=> '1',
 tlv_port_description_value=> 'Spirent Port ',
 tlv_port_vlanid_enable=> '1',
 tlv_port_vlanid_value=> '0002',
 tlv_system_capabilities_enable=> '1',
 tlv_system_capabilities_value=> '11111111',
 tlv_system_description_enable=> '1',
 tlv_system_description_value=> 'Spirent Test Center ',
 tlv_system_name_enable=> '1',
 tlv_system_name_value=> 'Spirent Test Center ');
Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'XXXXX';
 $VAR3 = 'status';
 $VAR4 = 1;
Notes:
 None.
End of Procedure Header
sth::emulation_lldp_dcbx_tlv_config
Name:
 sth::emulation_lldp_dcbx_tlv_config
Purpose:
 Configures the DCBX TLVs.
 The data center discovery and capability exchange protocol(DCBX) is a
 protocol that is used by DCB devices to exchange configuration information
 with directly connected peers. The protocol may also be used for
 misconfiguration detection and for configuration of the peer.

 You can use the DCBX to achieve the following goals: Discovery of DCB
 capability in a peer, DCB feature misconfiguration detection, and Peer
 configuration of DCB features.
Synopsis:
 sth::emulation_lldp_dcbx_tlv_config
 [-version_num {Ver_100 | Ver_103}]
 [-control_tlv_oper_version <0-255>]
 [-control_tlv_max_version <0-255>]
 [-pg_feature_tlv1_enable {1|0}]
 [-pg_feature_tlv1_oper_version <0-255>]
 [-pg_feature_tlv1_max_version <0-255>]
 [-pg_feature_tlv1_enabled_flag {1|0}]
 [-pg_feature_tlv1_willing_flag {1|0}]
 [-pg_feature_tlv1_error_flag {1|0}]
 [-pg_feature_tlv1_subtype <0-255>]
 [-pg_feature_tlv1_bwg_percentage_list <list of integers>]
 [-pg_feature_tlv1_prio_alloc_bwg_id_list <list of integers>]
LLDP Functions
514
 [-pg_feature_tlv1_prio_alloc_strict_prio_list <list of integers>]
 [-pg_feature_tlv1_prio_alloc_bw_percentage_list <list of integers>]
 [-pfc_feature_tlv1_enable {1|0}]
 [-pfc_feature_tlv1_oper_version <0-255>]
 [-pfc_feature_tlv1_max_version <0-255>]
 [-pfc_feature_tlv1_enabled_flag {1|0}]
 [-pfc_feature_tlv1_willing_flag {1|0}]
 [-pfc_feature_tlv1_error_flag {1|0}]
 [-pfc_feature_tlv1_subtype <0-255>]
 [-pfc_feature_tlv1_admin_mode_bits <8-bit binary>]
 [-application_feature_tlv1_enable {1|0}]
 [-application_feature_tlv1_oper_version <0-255>]
 [-application_feature_tlv1_max_version <0-255>]
 [-application_feature_tlv1_enabled_flag {1|0}]
 [-application_feature_tlv1_error_flag {1|0}]
 [-application_feature_tlv1_subtype <0-255>]
 [-application_feature_tlv1_prio_map <8-bit binary>]
 [-bcn_feature_tlv1_enable {1|0}]
 [-bcn_feature_tlv1_oper_version <0-255>]
 [-bcn_feature_tlv1_max_version <0-255>]
 [-bcn_feature_tlv1_enabled_flag {1|0}]
 [-bcn_feature_tlv1_willing_flag {1|0}]
 [-bcn_feature_tlv1_error_flag {1|0}]
 [-bcn_feature_tlv1_subtype <0-255>]
 [-bcn_feature_tlv1_bcna_value <hexadecimal>]
 [-bcn_feature_tlv1_cp_admin_mode_list <list of flags>]
 [-bcn_feature_tlv1_rp_admin_mode_list <list of flags>]
 [-bcn_feature_tlv1_rp_oper_mode_list <list of flags>]
 [-bcn_feature_tlv1_rem_tag_oper_mode_list <list of flags>]
 [-bcn_feature_tlv1_rp_w <integer>]
 [-bcn_feature_tlv1_rp_tmax <integer>]
 [-bcn_feature_tlv1_rp_rmin <integer>]
 [-bcn_feature_tlv1_rp_td <integer>]
 [-bcn_feature_tlv1_rp_rd <integer>]
 [-bcn_feature_tlv1_cp_sf <integer>]
 [-lld_feature_tlv1_enable {1|0}]
 [-lld_feature_tlv1_oper_version <0-255>]
 [-lld_feature_tlv1_max_version <0-255>]
 [-lld_feature_tlv1_enabled_flag {1|0}]
 [-lld_feature_tlv1_willing_flag {1|0}]
 [-lld_feature_tlv1_error_flag {1|0}]
 [-lld_feature_tlv1_subtype <0-255>]
 [-lld_feature_tlv1_status_value {1|0}]
 [-customized_feature_tlv1_enable {1|0}]
 [-customized_feature_tlv1_oper_version <0-255>]
 [-customized_feature_tlv1_max_version <0-255>]
 [-customized_feature_tlv1_enabled_flag {1|0}]
 [-customized_feature_tlv1_willing_flag {1|0}]
 [-customized_feature_tlv1_error_flag {1|0}]
 [-customized_feature_tlv1_subtype <0-255>]
 [-customized_feature_tlv1_type <0-255>]
 [-customized_feature_tlv1_value <hexadecimal>]
 [-pg_feature_tlv2_enable {1|0}]
 [-pg_feature_tlv2_oper_version <0-255>]
 [-pg_feature_tlv2_max_version <0-255>]
 [-pg_feature_tlv2_enabled_flag {1|0}]
 [-pg_feature_tlv2_willing_flag {1|0}]
 [-pg_feature_tlv2_error_flag {1|0}]
 [-pg_feature_tlv2_subtype <0-255>]
 [-pg_feature_tlv2_prio_alloc_pgid_list <list of integers>]
 [-pg_feature_tlv2_pg_alloc_bw_percentage_list <list of integers>]
 [-pg_feature_tlv2_num_tcs_supported <0-7>]
 [-pfc_feature_tlv2_enable {1|0}]
 [-pfc_feature_tlv2_oper_version <0-255>]
 [-pfc_feature_tlv2_max_version <0-255>]
 [-pfc_feature_tlv2_enabled_flag {1|0}]
 [-pfc_feature_tlv2_willing_flag {1|0}]
 [-pfc_feature_tlv2_error_flag {1|0}]
 [-pfc_feature_tlv2_subtype <0-255>]
 [-pfc_feature_tlv2_admin_mode_bits <8-bit binary>]
 [-pfc_feature_tlv2_num_tcpfcs_supported <0-7>]
LLDP Functions
515
 [-app_protocol_tlv2_enable {1|0}]
 [-app_protocol_tlv2_oper_version <0-255>]
 [-app_protocol_tlv2_max_version <0-255>]
 [-app_protocol_tlv2_enabled_flag {1|0}]
 [-app_protocol_tlv2_willing_flag {1|0}]
 [-app_protocol_tlv2_error_flag {1|0}]
 [-app_protocol_tlv2_subtype <0-255>]
 [-app_protocol_tlv2_protocol_count <integer>]
 [-app_protocol_tlv2_app_id_list <list of integers>]
 [-app_protocol_tlv2_oui_upper_6_bits_list <list of binaries>]
 [-app_protocol_tlv2_sf_list <list of binaries>]
 [-app_protocol_tlv2_oui_lower_2_bytes_list <list of binaries>]
 [-app_protocol_tlv2_prio_map_list <list of binaries>]
 [-customized_feature_tlv2_enable {1|0}]
 [-customized_feature_tlv2_oper_version <0-255>]
 [-customized_feature_tlv2_max_version <0-255>]
 [-customized_feature_tlv2_enabled_flag {1|0}]
 [-customized_feature_tlv2_willing_flag {1|0}]
 [-customized_feature_tlv2_error_flag {1|0}]
 [-customized_feature_tlv2_subtype <0-255>]
 [-customized_feature_tlv2_type <0-255>]
 [-customized_feature_tlv2_value <hexadecimal>
Arguments:
 -version_num
 Specifies the standard version of DCBX Protocol (CIN-DCBX). Possible
 values are described below:

 Ver_100 - version 1.00 whose TLV subtype is 1. This is the default
 value.
 Ver_103 - version 1.03 whose TLV subtype is 2.
 -control_tlv_oper_version
 Defines the Operation Version value in DCBX Control TLVs.
 Possible values range from 0 to 255. The default value is 0.
 -control_tlv_max_version
 Defines the Max Version value in DCBX Control TLVs.
 Possible values range from 0 to 255. The default value is 0.
 -pg_feature_tlv1_enable
 Determines whether to enable Priority Group Feature TLVs. Possible
 values are 1 and 0. When it is set to 1, the Priority Group Feature
 TLVs will be enabled. The default value is 0. This argument is
 available when -version_num is set to ver_100.
 -pg_feature_tlv1_oper_version
 Defines the Operation Version value in DCBX Priority Group TLVs.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -pg_feature_tlv1_max_version
 Defines the Max Version value in DCBX Priority Group TLVs.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -pg_feature_tlv1_enabled_flag
 Defines the Enabled Flag value in DCBX Priority Group TLVs. Possible
 values are 1 and 0. When it is set to 1, the DCB feature is enabled in
 the DCBX Priority Group TLVs. This argument is available when
 -version_num is set to ver_100. The default value is 1.
 -pg_feature_tlv1_willing_flag
 Defines the Willing Flag value in DCBX Priority Group TLVs. This
 argument indicates whether this feature accepts its configuration
 from the peer or not. Possible values are 1 and 0. When it is set to
 1, this feature accepts its configuration from the peer. This
 argument is available when -version_num is set to ver_100. The
 default value is 0.
 -pg_feature_tlv1_error_flag
LLDP Functions
516
 Defines the Error Flag value in DCBX Priority Group TLVs. Possible
 values are 1 and 0. When it is set to 1, it indicates an error has
 occurred during the configuration exchange with the peer. This
 argument is available when -version_num is set to ver_100. The
 default value is 0.
 -pg_feature_tlv1_subtype
 Defines the Subtype Field value in DCBX Priority Group TLVs. The value
 of this argument must be an integer. Possible values range from 0 to
 255. The default value is 0. This argument is available when
 -version_num is set to ver_100.
 -pg_feature_tlv1_bwg_percentage_list
 Defines the list of Bandwidth (BW) Percentages Field values in DCBX
 Priority Group TLVs. The list should have 8 elements. Each element
 is the bandwidth percentage value for the BW group (BWG) which has
 same ID as the element's index in the list. Each value on the list
 should range from 0 to 100. This argument is available when
 -version_num is set to ver_100.

 -pg_feature_tlv1_prio_alloc_bwg_id_list
 Defines the list of Bandwidth Group ID values in Priority Allocation
 Field in DCBX Priority Group (PG) TLV. The list should have 8 elements.
 Each element is the BWG ID value for the group which has the same
 priority value as the element's index in the list. The individual
 value should range from 0 to 7. This switch is available when
 -version_num is ver_100.
 -pg_feature_tlv1_prio_alloc_strict_prio_list
 Defines the list of Strict Priority values in Priority Allocation
 Field in DCBX Priority Group TLV. The list should have 8 elements.
 Each element is the strict priority value for the group which has
 the same priority value as the element's index in the list. Each
 value should range from 0 to 2.
 Strict priority possible values:
 0 - no strict priority
 1 - Group Strict Priority (GSP)
 2 - Link Strict Priority (LSP)
 This switch is available when -version_num is set to ver_100.
 -pg_feature_tlv1_prio_alloc_bw_percentage_list
 Defines the list of Bandwidth Percentage values in Priority
 Allocation Field in DCBX Priority Group TLV. The list should have 8
 elements. Each element is the BWG Percentage value for the group
 which has same priority value as the element's index in the list.
 Each value in the list should range from 0 to 100. This switch is
 available when -version_num is set to ver_100.

 -pfc_feature_tlv1_enable
 Determines whether to enable Priority Flow Control (PFC) TLVs. Possible
 values are 1 and 0. When it is set to 1, the PFC TLVs will be
 enabled. The default value is 0.
 -pfc_feature_tlv1_oper_version
 Defines the Operation Version value in DCBX PFC TLVs. Possible values
 range from 0 to 255. The default value is 0. The argument is
 available when -version_num is set to ver_100.
 -pfc_feature_tlv1_max_version
 Defines the Max Version value in DCBX PFC TLVs. Possible values
 range from 0 to 255. The default value is 0. The argument is
 available when -version_num is set to ver_100.
 -pfc_feature_tlv1_enabled_flag
 Defines the Enabled Flag value in DCBX PFC TLVs. Possible values are
 1 and 0. When it is set to 1, the DCB feature is enabled in the
 DCBX PFC TLVs. This switch is available when -version_num is ver_100.

 -pfc_feature_tlv1_willing_flag
LLDP Functions
517
 Defines the Willing Flag value in DCBX PFC TLVs. Possible values are
 1 and 0. The default value is 0. This argument is available when
 -version_num is set to ver_100.
 -pfc_feature_tlv1_error_flag
 Defines the Error Flag value in DCBX PFC TLVs. Possible values are
 1 and 0. The default value is 0. This switch is available when
 -version_num is set to ver_100.
 -pfc_feature_tlv1_subtype
 Defines the Subtype Field value in DCBX PFC TLVs. Possible values
 range from 0 to 255. The default value is 0. This argument is
 available when -version_num is set to ver_100.
 -pfc_feature_tlv1_admin_mode_bits
 Specifies the Admin Mode Field Value in PFC TLVs. The value of the
 Admin Mode Field is a 8-bit binary. The binary value of each bit
 means the flow control on flow, which has the priority as the bit's
 position index, is enabled or disabled. If the flow control is
 enabled, it means the flow control is in both directions (received
 and sent) is enabled. The input value should be an 8-bit binary. This
 argument is available when -version_num is set to ver_100. The
 default value is 0.
 -application_feature_tlv1_enable
 Determines whether to enable Application TLVs. Possible values are 0
 and 1. When it is set to 1, Application TLVs are enabled. The
 default value is 0. This switch is available when -version_num is set
 to ver_100.
 -application_feature_tlv1_oper_version
 Defines the Operation Version values in DCBX Application TLVs.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -application_feature_tlv1_max_version
 Defines the Max version value in DCBX Application TLVs.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -application_feature_tlv1_enabled_flag
 Defines the Enabled Flag value in DCBX Application TLVs.
 Possible values are 1 and 0. When it is set to 1, the DCB feature
 is enabled. This switch is available when -version_num is ver_100.
 The default value is 1.

 -application_feature_tlv1_error_flag
 Defines the Error Flag value in DCBX Application TLVs. Possible
 values are 1 and 0. The default value is 0. This switch is available
 when -version_num is set to ver_100.
 -application_feature_tlv1_subtype
 Defines the Subtype Field value in DCBX Application TLVs. Possible
 values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -application_feature_tlv1_prio_map
 Specifies the Priority Map Field value in DCBX Application TLVs. The
 value of this argument must be an 8-bit binary. This argument is
 available when -version_num is set to ver_100. The default value is
 1000.
 -bcn_feature_tlv1_enable
 Determines whether to enable Backward Congestion Notification (BCN)
 TLVs. Possible values are 1 and 0. The default value is 0. This
 switch is available when -version_num is set to ver_100.
 -bcn_feature_tlv1_oper_version
 Defines the Operation Version value in DCBX BCN TLVs. Possible
 values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_100.
LLDP Functions
518
 -bcn_feature_tlv1_max_version
 Defines the Max Version value in DCBX BCN TLVs. Possible
 values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -bcn_feature_tlv1_enabled_flag
 Defines the Enabled Flag value in DCBX BCN TLVs. Possible
 values are 1 and 0. The default value is 1. This
 argument is available when -version_num is set to ver_100.
 -bcn_feature_tlv1_willing_flag
 Defines the Willing Flag value in DCBX BCN TLVs. Possible
 values are 1 and 0. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -bcn_feature_tlv1_error_flag
 Defines the Error Flag value in DCBX BCN TLVs. Possible
 values are 1 and 0. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -bcn_feature_tlv1_subtype
 Defines the Subtype Field value in DCBX BCN TLVs. Possible
 values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -bcn_feature_tlv1_bcna_value
 Defines the BCNA Field value in DCBX BCN TLVs. The value of this
 argument must be a hexadecimal value. Possible length for the value
 is from 1 to 16 bits. The default value is 0. The argument is
 available when -version_num is set to ver_100.
 -bcn_feature_tlv1_cp_admin_mode_list
 Defines the list of Congestion Point (CP) Admin Mode values of BCN
 Mode Field in DCBX BCN TLVs. There must be 8 elements in the list.
 Each element is the CP Admin Mode value which has the same index in
 BCN Mode Field as the index of the element in the list. Each element must
 be a flag value. This argument is available when -version_num is set
 to ver_100.
 -bcn_feature_tlv1_rp_admin_mode_list
 Defines the list of Reaction Point (RP) Admin Mode values of BCN Mode
 Field in DCBX BCN TLVs. There must be 8 elements in the list. Each
 element is the RP Admin Mode value which has the same index in BCN
 Mode Field as the element's index on the list. Each element must be
 a flag value. This argument is available when -version_num is set to
 ver_100.

 -bcn_feature_tlv1_rp_oper_mode_list
 Defines the list of RP Operation Mode values of BCN Mode Field in
 DCBX BCN TLVs. There must be 8 elements in the list. Each element is
 the RP Admin Mode value which has the same index in BCN Mode Field as
 the element's index in the input list. Each element must be a flag
 value. This argument is available when -version_num is set to ver_100.

 -bcn_feature_tlv1_rem_tag_oper_mode_list
 Defines the list of the Remove Tag Oper Mode values of BCN Mode Field
 in DCBX BCN TLVs. There must be 8 elements in the list. Each element
 is the Remove Tag Oper Mode value which has the same index in BCN
 Mode Field as the element's index in the input list. Each element
 must be a flag value. This argument is available when -version_num
 is set to ver_100.
 -bcn_feature_tlv1_rp_w
 Defines the Derivative Weight value in DCBX BCN TLVs. The value of
 this argument must be an integer. The default value is 0. This
 argument is available when -version_num is set to ver_100.
 -bcn_feature_tlv1_rp_tmax
 Defines the Maximum Time to backoff after BCN0 value in DCBX BCN
 TLVs. The value of this argument must be an integer. The default value is
LLDP Functions
519
 0. This argument is available when -version_num is set to ver_100.
 -bcn_feature_tlv1_rp_rmin
 Defines the Default Rate to resume after first BCN0 value in DCBX BCN
 TLVs. The value of this argument must be an integer. The default
 value is 0. This argument is available when -version_num is set to
 ver_100.
 -bcn_feature_tlv1_rp_td
 Defines the Drift Interval value in DCBX BCN TLVs. The value of this
 argument must be an integer. The default value is 0. This argument is
 available when -version_num is set to ver_100.
 -bcn_feature_tlv1_rp_rd
 Defines the Drift factor value in DCBX BCN TLVs. The value of this
 argument must be an integer. The default value is 0. This argument is
 available when -version_num is set to ver_100.
 -bcn_feature_tlv1_cp_sf
 Defines the Random portion of the sampling interval Fixed (as a % of Sf)
 value in DCBX BCN TLVs. The value of this argument must be an integer. The
 default value is 0. This argument is available when -version_num is set to
 ver_100.
 -lld_feature_tlv1_enable
 Determines whether to enable Logic Link Down (LLD) TLVs. Possible values
 are 1 and 0. The default value is 0. This argument is available when
 -version_num is set to ver_100.
 -lld_feature_tlv1_oper_version
 Defines the Operation Version value in DCBX LLD TLVs. Possible values
 range from 0 to 255. The default value is 0. This argument is available
 when -version_num is set to ver_100.
 -lld_feature_tlv1_max_version
 Defines the Max Version value in DCBX LLD TLVs. Possible values range from
 0 to 255. The default value is 0. This argument is available when
 -version_num is set to ver_100.
 -lld_feature_tlv1_enabled_flag
 Defines the Enabled Flag value in DCBX LLD TLVs. Possible values are 1 and
 0. The default value is 1. This argument is available when -version_num is
 set to ver_100.
 -lld_feature_tlv1_willing_flag
 Defines the Willing Flag value in DCBX LLD TLVs. Possible values are 1 and
 0. The default value is 0. This argument is available when -version_num is
 set to ver_100.
 -lld_feature_tlv1_error_flag
 Defines the Error Flag value in DCBX LLD TLVs. Possible values are 1 and
 0. The default value is 0. This argument is available when -version_num is
 set to ver_100.
 -lld_feature_tlv1_subtype
 Defines the Subtype Field value in DCBX LLD TLVs. Possible values range
 from 0 to 255. The default value is 0. This argument is available when
 -version_num is set to ver_100.
 -lld_feature_tlv1_status_value
 Specifies the Status Field value in DCBX LLD TLVs. Possible values
 are 1 and 0. The default value is 1. The argument is available when
 -version_num is set to ver_100.
 -customized_feature_tlv1_enable
 Determines whether to enable customized TLV. Possible values are
 1 and 0. When it is set to 1, the customized TLVs are enabled. The
 default value is 0.

 -customized_feature_tlv1_oper_version
 Defines the Operation Version value in DCBX customized TLVs. Possible
LLDP Functions
520
 values range from 0 to 255. The default value is 0. This argument is
 available when -version_num is set to ver_100.
 -customized_feature_tlv1_max_version
 Defines the Max Version value in DCBX customized TLVs. Possible values
 range from 0 to 255. The default value is 0. This argument is available
 when -version_num is set to ver_100.
 -customized_feature_tlv1_enabled_flag
 Defines the Enabled Flag value in DCBX customized TLVs. Possible
 values are 1 and 0. The default value is 1. This
 argument is available when -version_num is set to ver_100.
 -customized_feature_tlv1_willing_flag
 Defines the Willing Flag value in DCBX customized TLVs. Possible values
 are 1 and 0. The default value is 0. This argument is available when
 -version_num is set to ver_100.
 -customized_feature_tlv1_error_flag
 Defines the Error Flag value in DCBX customized TLVs. Possible values are
 1 and 0. The default value is 0. This argument is available when
 -version_num is set to ver_100.
 -customized_feature_tlv1_subtype
 Defines the Subtype Field value in DCBX BCN TLVs. Possible values range
 from 0 to 255. The default value is 0. This argument is available when
 -version_num is set to ver_100.
 -customized_feature_tlv1_type
 Defines the Type Field value in DCBX customized TLVs. Possible values
 range from 0 to 255. The default value is 10. This argument is available
 when -version_num is set to ver_100.
 -customized_feature_tlv1_value
 Defines the Value Field value in DCBX customized TLVs. The value of
 this argument must be a hexadecimal. The default value is 0. This argument
 is available when -version_num is set to ver_100.
 -pg_feature_tlv2_enable
 Determines whether to enable Priority Group Feature TLVs. Possible values
 are 1 and 0. When it is set to 1, the Priority Group Feature TLVs will be
 enabled. The default value is 0. This argument is available when
 -version_num is set to ver_103.
 -pg_feature_tlv2_oper_version
 Defines the Operation Version value in DCBX Priority Group TLVs. Possible
 values range from 0 to 255. The default value is 0. This argument is
 available when -version_num is set to ver_103.
 -pg_feature_tlv2_max_version
 Defines the Max Version value in DCBX Priority Group TLVs. Possible values
 range from 0 to 255. The default value is 0. This argument is available
 when -version_num is set to ver_103.
 -pg_feature_tlv2_enabled_flag
 Defines the Enabled Flag value in DCBX Priority Group TLVs. Possible
 values are 1 and 0. When it is set to 1, the DCB feature is enabled. This
 argument is available when -version_num is set to ver_103. The default
 value is 1.
 -pg_feature_tlv2_willing_flag
 Defines the Willing Flag value in DCBX Priority Group TLVs. This
 argument indicates whether this feature accepts its configuration from the
 peer or not. Possible values are 1 and 0. When it is set to 1, this
 feature accepts its configuration from the peer. This argument is
 available when -version_num is set to ver_103. The default value is 0.
 -pg_feature_tlv2_error_flag
 Defines the Error Flag valueq in DCBX Priority Group TLVs. Possible
 values are 1 and 0. When it is set to 1, it indicates an error has
 occurred during the configuration exchange with the peer. This
LLDP Functions
521
 argument is available when -version_num is set to ver_103. The
 default value is 0.
 -pg_feature_tlv2_subtype
 Defines the Subtype Field value in DCBX Priority Group TLVs. The value
 of this argument must be an integer. Possible values range from 0 to 255.
 The default value is 0. This argument is available when -version_num is
 set to ver_103.
 -pg_feature_tlv2_prio_alloc_pgid_list
 Defines the list of Priority Group ID values in DCBX Priority Group TLV.
 There must be 8 elements on the list. Each element is the Priority Group
 ID and must be within the range from 0 to 15. This argument is available
 when -version_num is set to ver_103.
 -pg_feature_tlv2_pg_alloc_bw_percentage_list
 Defines the list of Priority Group Percentage values in DCBX Priority
 Group TLV. There must be 8 elements on the list. Each element is the PG
 Percentage and must be within the range from 0 to 100. This argument is
 available when -version_num is set to ver_103.
 -pg_feature_tlv2_num_tcs_supported
 Defines the Num TCs Supported Field value in DCBX Priority Group TLVs. The
 value of this argument indicates the number of TCs that can simultaneously
 support PFC. Possible values range from 0 to 7. The default value is 0.
 This argument is available when -version_num is set to ver_103.
 -pfc_feature_tlv2_enable
 Determines whether to enable Priority Flow Control (PFC) TLVs. Possible
 values are 1 and 0. When it is set to 1, the Priority Group Feature TLVs
 will be enabled. The default value is 0. This argument is available when
 -version_num is set to ver_103.
 -pfc_feature_tlv2_oper_version
 Defines the Operation Version value in DCBX PFC TLVs. Possible values
 range from 0 to 255. The default value is 0. This argument is available
 when -version_num is set to ver_103.
 -pfc_feature_tlv2_max_version
 Defines the Max Version value in DCBX PFC TLVs. Possible values range from
 0 to 255. The default value is 0. This argument is available when
 -version_num is set to ver_103.
 -pfc_feature_tlv2_enabled_flag
 Defines the Enabled Flag value in DCBX PFC TLVs. Possible values are 1 and
 0. When it is set to 1, the DCB feature is enabled in the DCBX PFC TLVs.
 This argument is available when -version_num is set to ver_103. The
 default value is 1.
 -pfc_feature_tlv2_willing_flag
 Defines the Willing Flag value in DCBX PFC TLVs. This argument indicates
 whether this feature accepts its configuration from the peer or not.
 Possible values are 1 and 0. When it is set to 1, this feature accepts its
 configuration from the peer. This argument is available when -version_num
 is set to ver_103. The default value is 0.
 -pfc_feature_tlv2_error_flag
 Defines the Error Flag value in DCBX PFC TLVs. Possible values are 1 and
 0. When it is set to 1, it indicates an error has occurred during the
 configuration exchange with the peer. This argument is available when
 -version_num is set to ver_103. The default value is 0.
 -pfc_feature_tlv2_subtype
 Defines the Subtype Field value in DCBX PFC TLVs. The value
 of this argument must be an integer. Possible values range from 0 to
 255. The default value is 0. This argument is available when
 -version_num is set to ver_103.
 -pfc_feature_tlv2_admin_mode_bits
 Specifies the Admin Mode Field Value in PFC TLVs. The value of the Admin
 Mode Field is an 8-bit binary. The binary value of each bit means the flow
LLDP Functions
522
 control, which has the priority as the bit's position index, is enabled or
 disabled. If the flow control is enabled, it means the flow control is in
 both directions (received and sent) is enabled. This argument is available
 when -version_num is set to ver_103. The default value is 0.
 -pfc_feature_tlv2_num_tcpfcs_supported
 Indicates the Num TC PFC Supported Field value in DCBX PFC TLVs. It
 Indicates the Number of TCs supported by device. Possible values range
 from 0 to 7. The default value is 0. This argument is available when
 -version_num is set to ver_103.
 -app_protocol_tlv2_enable
 Determines whether to enable Application Protocol TLVs. This TLV
 allows DCB node to announce upper layer protocols and associated
 priority map over DCB link. Possible values are 1 and 0. When it
 is set to 1, Application Protocol TLVs are enabled. The default value
 is 0. This argument is available when -version_num is set to ver_103.
 -app_protocol_tlv2_oper_version
 Defines the Operation Version value in DCBX Application Protocol TLVs.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_103.
 -app_protocol_tlv2_max_version
 Defines the Max Version value in DCBX Application Protocol TLVs.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_103.
 -app_protocol_tlv2_enabled_flag
 Defines the Enabled Flag value in DCBX Application Protocol TLVs. Possible
 values are 1 and 0. When it is set to 1, the DCB feature is enabled. This
 argument is available when -version_num is set to ver_103. The default
 value is 1.
 -app_protocol_tlv2_willing_flag
 Defines the Willing Flag value in DCBX Application Protocol TLVs. This
 argument indicates whether this feature accepts its configuration from the
 peer or not. Possible values are 1 and 0. When it is set to 1, this
 feature accepts its configuration from the peer. This argument is
 available when -version_num is set to ver_103. The default value is 0.
 -app_protocol_tlv2_error_flag
 Defines the Error Flag value in DCBX Application Protocol TLVs. Possible
 values are 1 and 0. When it is set to 1, it indicates an error has
 occurred during the configuration exchange with the peer. This argument is
 available when -version_num is set to ver_103. The default value is 0.
 -app_protocol_tlv2_subtype
 Defines the Subtype Field value in DCBX Application Protocol TLVs. The
 value of this argument must be an integer. Possible values range from 0
 to 255. The default value is 0. This argument is available when
 -version_num is set to ver_103.
 -app_protocol_tlv2_protocol_count
 Defines the number of Application Protocol Parameters Structure Field in
 DCBX Application Protocol TLVs. The value of this argument must be an
 integer. This switch is available when -version_num is set to ver_103. The
 default value is 0.
 -app_protocol_tlv2_app_id_list
 Defines Application Protocol ID values of Application Protocol
 parameters structure Field in DCBX Application Protocol TLVs. The value of
 this argument can be an integer or a list of integers. Each integer
 identifies the protocol supported by DCB nodes. The number of integers on
 the list must be equal to the number defined by
 -app_protocol_tlv2_protocol_count. Possible Application Protocol ID values
 range from 0 to 65535. This argument is available when -version_num is set
 to ver_103.
 -app_protocol_tlv2_oui_upper_6_bits_list
 Defines the upper 6 bits values of OUI of Application Protocol parameters
LLDP Functions
523
 structure Field in DCBX Application Protocol TLVs. The value of this
 argument can be a list. The number of elements on the list must be equal
 to the number defined by -app_protocol_tlv2_protocol_count. Each element
 must be a 6-bit binary which indicates the upper 6 bits of OUI for each
 Application Protocol parameters structure. This argument is available when
 -version_num is set to ver_103.
 -app_protocol_tlv2_sf_list
 Defines the Selector Field values of Application Protocol Parameters
 Structure Field in DCBX Application Protocol TLVs. The value of this
 argument can be a 2-bit binary or a list of 2-bit binaries. The number of
 2-bit binaries must be equal to the number defined by
 -app_protocol_tlv2_protocol_count. Each 2-bit binary is set to the
 Selector Field for each Application Protocol Parameters Structure. This
 switch is available when -version_num is set to ver_103.
 -app_protocol_tlv2_oui_lower_2_bytes_list
 Defines the upper 2 bits values of OUI of Application Protocol
 Parameters Structure Field in DCBX Application Protocol TLVs. The value
 of this argument can be a 2-bit binary or a list of 2-bit binaries. The
 number of binaries on the list must be equal to the number defined by
 -app_protocol_tlv2_protocol_count. Each binary on the list is the
 upper 2 bits of OUI for each Application Protocol Parameters Structure.
 This switch is available when -version_num is set to ver_103.
 -app_protocol_tlv2_prio_map_list
 Defines Priority Map values of Application Protocol Parameters
 Structure Field in DCBX Application Protocol TLVs. The value
 of this argument can be an 8-bit binary or a list of 8-bit binaries.
 The number of list elements must be equal to the number defined by
 -app_protocol_tlv2_protocol_count. Each binary is the Priority Map
 value for the corresponding Application Protocol Parameters Structure.
 This argument is available when -version_num is set to ver_103.
 -customized_feature_tlv2_enable
 Determines whether to enable customized TLVs. Possible values are 0
 and 1. When it is set to 1, customized TLVs were enabled. The
 default value is 0. This argument is available when -version_num is set
 to ver_100.
 -customized_feature_tlv2_oper_version
 Defines the Operation Version values in DCBX customized TLVs.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_103.

 -customized_feature_tlv2_max_version
 Defines the Max version value in DCBX customized TLVs.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -version_num is set to ver_103.
 -customized_feature_tlv2_enabled_flag
 Defines the Enabled Flag value in DCBX customized TLVs.
 Possible values are 1 and 0. When it is set to 1, the DCB feature
 is enabled. This switch is available when -version_num is ver_103.
 The default value is 1.
 -customized_feature_tlv2_willing_flag
 Defines the Willing Flag value in DCBX customized TLVs. Possible
 values are 1 and 0. The default value is 0. This argument is available
 when -version_num is set to ver_103.
 -customized_feature_tlv2_error_flag
 Defines the Error Flag value in DCBX customized TLVs. Possible values
 are 1 and 0. The default value is 0. This switch is available when
 -version_num is set to ver_103.
 -customized_feature_tlv2_subtype
 Defines the Subtype Field value in DCBX customized TLVs. Possible
 values range from 0 to 255. The default value is 0. This argument is
 available when -version_num is set to ver_103.
LLDP Functions
524
 -customized_feature_tlv2_type
 Defines the Type Field value in DCBX customized TLVs. Possible values
 range from 0 to 255. The default value is 10. This argument is
 available when -version_num is set to ver_103.
 -customized_feature_tlv2_value
 Defines the Value Field value in DCBX customized TLVs. The value of
 this argument must be a hexadecimal. The default value is 0. This
 argument is available when -version_num is set to ver_103.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 None.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 SUCCESS:
 {{status 1} {handle XXXXX}}
 FAILURE:
 {{status 0} {log XXX}}
Description:
 The sth::emulation_lldp_dcbx_tlv_config configures DCBX TLVs.
 You can use this command to specify the content of the following TLVs for
 a test:

 Control TLV
 Priority Group Feature TLV
 Priority Group TLV
 PFC TLV
 Application TLV
 BCN TLV
 LLD TLV
 customized TLV
 Priority Group Feature TLV
 All the arguments of this command are optional.

 Please refer to "DCB Capability Exchange Protocol Base Specification
 Rev 1.0" and "DCB Capability Exchange Protocol Base Specification
 Rev 1.03" for more information.
Examples:
 #### HLTAPI for Tcl ####
 sth::emulation_lldp_dcbx_tlv_config
 -version_num "ver_103"\
 -control_tlv_oper_version 1\
 -control_tlv_max_version 1\
 -pg_feature_tlv2_enable 1\
 -pg_feature_tlv2_oper_version 1\
 -pg_feature_tlv2_max_version 1\
 -pg_feature_tlv2_enabled_flag 1\
 -pg_feature_tlv2_willing_flag 1\
 -pg_feature_tlv2_error_flag 1\
 -pg_feature_tlv2_subtype 1\
 -pg_feature_tlv2_prio_alloc_pgid_list "0 1 2 3 0 1 2 3"\
 -pg_feature_tlv2_pg_alloc_bw_percentage_list "0 1 2 3 0 1 2 3"\
 -pg_feature_tlv2_num_tcs_supported 1\
 -pfc_feature_tlv2_num_tcpfcs_supported 1\
 -pfc_feature_tlv2_enable 1\
 -pfc_feature_tlv2_oper_version 1\
 -pfc_feature_tlv2_max_version 1\
 -pfc_feature_tlv2_enabled_flag 1\
 -pfc_feature_tlv2_willing_flag 1\
 -pfc_feature_tlv2_error_flag 1\
LLDP Functions
525
 -pfc_feature_tlv2_subtype 1\
 -pfc_feature_tlv2_admin_mode_bits "11111111"
 Sample output:
 {{status 1} {handle xxxxx}}
 #### HLTAPI for Python ####
 device_ret0_dcbx_tlv_config = sth.emulation_lldp_dcbx_tlv_config (
 application_feature_tlv1_enable= '1',
 application_feature_tlv1_prio_map= '00001000',
 bcn_feature_tlv1_cp_admin_mode_list= ['0','0','0','0','0','0','0','0'],
 bcn_feature_tlv1_enable= '1',
 bcn_feature_tlv1_rem_tag_oper_mode_list= ['0','0','0','0','0','0','0','0'],
 bcn_feature_tlv1_rp_admin_mode_list= ['0','0','0','0','0','0','0','0'],
 bcn_feature_tlv1_rp_oper_mode_list= ['0','0','0','0','0','0','0','0'],
 control_tlv_max_version= '0',
 control_tlv_oper_version= '0',
 customized_feature_tlv1_enable= '1',
 customized_feature_tlv1_value= '0',
 lld_feature_tlv1_enable= '1',
 lld_feature_tlv1_status_value= '1',
 pfc_feature_tlv1_admin_mode_bits= '00000000',
 pfc_feature_tlv1_enable= '1',
 pg_feature_tlv1_bwg_percentage_list= ['0','0','0','0','0','0','0','0'],
 pg_feature_tlv1_enable= '1',
 pg_feature_tlv1_prio_alloc_bw_percentage_list= ['0','0','0','0','0','0','0','0'],
 pg_feature_tlv1_prio_alloc_bwg_id_list= ['0','0','0','0','0','0','0','0'],
 pg_feature_tlv1_prio_alloc_strict_prio_list= ['0','0','0','0','0','0','0','0'],
 version_num = 'ver_100');
 Sample Output:
 {'status': '1', 'handle': 'XXXXX'}
 #### HLTAPI for Perl ####
 my %device_ret2_dcbx_tlv_config = sth::emulation_lldp_dcbx_tlv_config (
 pg_feature_tlv1_oper_version=> '1',
 pg_feature_tlv1_subtype=> '1',
 pg_feature_tlv1_max_version=> '1',
 pg_feature_tlv1_error_flag=> '1',
 pfc_feature_tlv1_max_version=> '1',
 pfc_feature_tlv1_error_flag=> '1',
 pfc_feature_tlv1_oper_version=> '1',
 pfc_feature_tlv1_subtype=> '1',
 application_feature_tlv1_max_version=> '1',
 application_feature_tlv1_oper_version=> '1',
 bcn_feature_tlv1_subtype=> '1',
 bcn_feature_tlv1_error_flag=> '1',
 bcn_feature_tlv1_bcna_value=> '0000000000000011',
 application_feature_tlv1_enable=> '1',
 application_feature_tlv1_prio_map=> '00001000',
 bcn_feature_tlv1_cp_admin_mode_list=> '0 0 0 0 0 0 0 0 ',
 bcn_feature_tlv1_enable=> '1',
 bcn_feature_tlv1_rem_tag_oper_mode_list=> '0 0 0 0 0 0 0 0 ',
 bcn_feature_tlv1_rp_admin_mode_list=> '0 0 0 0 0 0 0 0 ',
 bcn_feature_tlv1_rp_oper_mode_list=> '0 0 0 0 0 0 0 0 ',
 control_tlv_max_version=> '0',
 control_tlv_oper_version=> '0',
 customized_feature_tlv1_enable=> '1',
 customized_feature_tlv1_value=> '0',
 lld_feature_tlv1_enable=> '1',
 lld_feature_tlv1_status_value=> '1',
 pfc_feature_tlv1_admin_mode_bits=> '00000000',
 pfc_feature_tlv1_enable=> '1',
 pg_feature_tlv1_bwg_percentage_list=> '0 0 0 0 0 0 0 0 ',
 pg_feature_tlv1_enable=> '1',
 pg_feature_tlv1_prio_alloc_bw_percentage_list=> '0 0 0 0 0 0 0 0 ',
 pg_feature_tlv1_prio_alloc_bwg_id_list=> '0 0 0 0 0 0 0 0 ',
 pg_feature_tlv1_prio_alloc_strict_prio_list=> '0 0 0 0 0 0 0 0 ',
 version_num => 'ver_100');
LLDP Functions
526
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'XXXXX';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None.
End of Procedure Header
sth::emulation_lldp_control
Name:
 sth::emulation_lldp_control

Purpose:
 Starts, stops, pauses or resumes the emulated LLDP devices.
Synopsis:
 sth::emulation_lldp_control
 -mode {stop | start | pause | resume}
 -handle <lldp_device_handle>
 Arguments:
 -mode
 Specifies the action to be taken. This argument is mandatory. Possible
 values are described below:
 stop - Stops the LLDP protocol on the specified devices.
 start - Starts the LLDP protocol on the specified devices.
 pause - Pauses the LLDP protocol on the specified devices.
 resume - Resumes the LLDP protocol on the specified devices.

 -handle
 Specifies the LLDP device(s) on which to take the actions specified by
 the -mode argument. The value of this argument can be a handle or a
 list of handles. This argument is mandatory.

Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 None.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The LLDP handle on which to take the action.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_lldp_control command controls the LLDP emulation on the
 specified devices. This command can start, stop, pause or resume the LLDP
 protocol on the emulated LLDP devices.

 In the mode of stop, start, pause, or resume, you can stop, start, pause, or
 resume one or more devices with LLDP protocol. Use the -mode argument to
 specify the action to perform. (See the -mode argument description for
 information about the actions.)

 If the action performed fails, Spirent HLTAPI returns an error message.
LLDP Functions
527
 For example, if the user tries to configure a nonexistent session handle in
 start mode, Spirent HLTAPI will return an error message.
Examples:
 #### HLTAPI for Tcl ####
 There must be a port with the handle of lldpRouterHandle. The following
 examples use the port with the handle of lldpRouterHandle.

 To start the LLDP router
 set status [::sth::emulation_lldp_control -mode start \
 -handle $lldpRouterHandle]
 To stop the LLDP router
 set status [::sth::emulation_lldp_control -mode stop \
 -handle $lldpRouterHandle]
 To pause the LLDP router
 set status [::sth::emulation_lldp_control -mode pause \
 -handle $lldpRouterHandle]
 To resume the LLDP router
 set status [::sth::emulation_lldp_control -mode resume \
 -handle $lldpRouterHandle]

 Sample output:
 {{status 1} {handle $lldpRouterHandle}}
 #### HLTAPI for Python ####
 There must be a port with the handle of device_list.
 To start the LLDP router:
 ctrl_ret1 = sth.emulation_lldp_control (
 handle = device_list,
 mode = 'start');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 There must be a port with the handle of device_list.
 To start the LLDP router:
 my %ctrl_ret1 = sth::emulation_lldp_control (
 handle => "$device_list",
 mode => 'start');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None.
End of Procedure Header
sth::emulation_lldp_info
Name:
 sth::emulation_lldp_info
Purpose:
 Returns the status and statistics of an LLDP session.

Synopsis:
 sth::emulation_lldp_info
 -handle <LLDP_device_handle>
 -mode { lldp | dcbx | both }
 [-dcbx_info_types { basic|feature_basic|prio_alloc|bw_alloc|pfc|
LLDP Functions
528
 fcoe_prio|logic_link|bcn_parameter|bcn_mode }]

Arguments:
 -handle
 Specifies the device from which to extract session
 data. This argument is mandatory.

 -mode
 Specifies the type of results to be fetched. This argument is mandatory.
 Possible values are described below:

 lldp - Returns LLDP session data. This is the default value. dcbx -
 Returns DCBX session data. both - Returns both LLDP and DCBX session data.
 -dcbx_info_type
 Defines type of DCBX results to be fetched. You can specify one or
 more values for this argument. When you input a list of values,
 separate the values with "|". You can specify this argument when you
 specify -mode dcbx or -mode both. The default value is
 "basic|feature_basic". Possible values are described below:

 basic - Basic results (frame/TLV status) of DCBX PDUs and Control TLVs.
 feature_basic - Basic feature TLV results (frame/TLV header
 information of local and neighbor node) of DCBX Feature TLVs.
 prio_alloc - Priority Group status in Priority Group TLVs.
 bw_alloc - Bandwidth allocation status in DCBX Priority Group TLVs.
 pfc - Priority Flow Control status.
 fcoe_prio - FCOE protocol priority status in Application TLVs.
 logic_link - Logic Link status.
 bcn_parameter - Parameter Value & status in BCN (Backward Congestion
 Notification) TLVs.
 bcn_mode - Mode status in BCN TLVs.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null

 The following keys are returned if you specify -mode lldp:

 *****LLDP Results*****
 lldp.lldp_session_state
 LLDP device state. Possible return values are described below:
 LLDP_SESSION_STATE_NONE: No state.
 LLDP_SESSION_STATE_DOWN: The Session is down.
 LLDP_SESSION_STATE_UP: The Session is up.
 LLDP_SESSION_STATE_PAUSE: The Session is paused.
 lldp.tx_port_frame_count
 Number of LLDP frames sent from the transmit port.
 lldp.rx_port_frame_discarded_count
 Number of LLDP frames discarded on the receive port.
 lldp.rx_port_error_frame_count
 Number of LLDP errored frames received on the receive port.
 lldp.rx_port_frame_count
 Number of LLDP frames received on the receive port.
 lldp.rx_port_tlvs_discarded_count
 Number of LLDP TLVs discarded on the receive port. 
LLDP Functions
529
 lldp.rx_port_tlvs_unrecognized_count
 Number of unrecognized LLDP TLVs received on the receive port.
 lldp.rx_port_age_outs_count
 Number of the neighbors whose information is received on the port that
 has aged out (TTL timer expires).

 *****LLDP Neighbor Results*****
 lldp_neighbor.xxx.neighbor_chassis_id_subtype
 Chassis ID subtype of the neighbor
 lldp_neighbor.xxx.neighbor_chassis_id
 Chassis ID of the neighbor
 lldp_neighbor.xxx.neighbor_port_id_subtype
 Port ID subtype of the neighbor
 lldp_neighbor.xxx.neighbor_port_id
 Port ID of the neighbor
 lldp_neighbor.xxx.neighbor_time_to_live
 Number of seconds the neighbor information remains valid without
 receiving an update.

 The following keys are returned when basic is indicated in -dcbx_info_type:

 *****DCBX Basic Results*****
 dcbx.max_version
 Maximum DCBX version supported by the emulated device
 dcbx.peer_max_version
 Maximum DCBX version supported by the DUT
 dcbx.operating_version
 Negotiated DCBX version for the session
 dcbx.seq_number
 Next sequence number for the emulated device
 dcbx.ack_number
 Next acknowledge number for the emulated device
 dcbx.peer_seq_number
 Next sequence number for the DUT
 dcbx.peer_ack_number
 Next acknowledge number for the DUT

 The following keys are returned when feature_basic is indicated in
 -dcbx_info_type:
 *****DCBX Feature Basic Results*****
 dcbx.feature_basic.xxx.type
 Feature type
 dcbx.feature_basic.xxx.subtype
 Feature subtype
 dcbx.feature_basic.xxx.max_version
 Maximum supported version for the emulated device
 dcbx.feature_basic.xxx.peer_max_version
 Maximum supported version for the DUT
 dcbx.feature_basic.xxx.operating_version
 Negotiated operating version for the session
 dcbx.feature_basic.xxx.enable
 Value of the enable bit for the emulated device
 dcbx.feature_basic.xxx.advertise
 Value of the advertise bit for the emulated device
 dcbx.feature_basic.xxx.peer_advertise
 Value of the advertise bit for the DUT
 dcbx.feature_basic.xxx.willing
 Value of the willing bit for the emulated device
 dcbx.feature_basic.xxx.error
 Value of the error bit for the emulated device
 dcbx.feature_basic.xxx.operating_mode
 Value of the operating mode bit for the emulated device
 dcbx.feature_basic.xxx.syncd
 Value of the Synced bit for the emulated device
 dcbx.feature_basic.xxx.feature_seq_number
 When Synced is false, the value that SeqNo must become equal to before
 Synced can become True
 dcbx.feature_basic.xxx.peer_willing
 Value of the willing bit for the emulated device
 dcbx.feature_basic.xxx.peer_error
 Value of the error bit for the emulated device
LLDP Functions
530
 dcbx.feature_basic.xxx.peer_enable
 Value of the enable bit for the emulated device

 The following keys are returned when prio_alloc is indicated in
 -dcbx_info_type:
 *****DCBX Priority Allocation Results*****
 dcbx.prio_alloc.xxx.priority
 Priority of the session
 dcbx.prio_alloc.xxx.priority_group_id
 Operating priority group ID
 dcbx.prio_alloc.xxx.desired_priority_group_id
 Desired priority group ID for the emulated device
 dcbx.prio_alloc.xxx.peer_priority_group_id
 Priority group ID from the DUT TLV

 The following keys are returned when bw_alloc is indicated in
 -dcbx_info_type:
 *****DCBX Bandwidth Allocation Results*****
 dcbx.bw_alloc.xxx.priority_group_id
 ID of the priority group
 dcbx.bw_alloc.xxx.bandwidth_percentage
 Operating bandwidth allocation of the session
 dcbx.bw_alloc.xxx.desired_bandwidth_percentage
 Desired bandwidth allocation of the emulated device
 dcbx.bw_alloc.xxx.peer_bandwidth_percentage
 Bandwidth allocation from the peer TLV

 The following keys are returned when pfc is indicated in
 -dcbx_info_type:
 *****DCBX Priority Flow Control Results*****
 dcbx.pfc.xxx.priority
 Priority Flow Control (PFC) priority
 dcbx.pfc.xxx.status
 Operating PFC status of the session
 dcbx.pfc.xxx.desired_status
 Desired PFC status of the emulated device
 dcbx.pfc.xxx.peer_status
 PFC status of the DUT

 The following keys are returned when fcoe_prio is indicated in
 -dcbx_info_type:
 *****DCBX FCOE Priority Results*****
 dcbx.fcoe_prio.xxx.selector_field
 Value of the selector field
 dcbx.fcoe_prio.xxx.protocol_id
 Value of the protocol ID field
 dcbx.fcoe_prio.xxx.priority_map
 Operational priority map for the session
 dcbx.fcoe_prio.xxx.desired_priority_map
 Desired priority map for the emulated device
 dcbx.fcoe_prio.xxx.peer_priority_map
 Priority map in the TLV from the DUT

 The following keys are returned when logic_link is indicated in
 -dcbx_info_type:
 *****DCBX Logic Link results*****
 dcbx.logic_link.xxx.type
 Type of link
 dcbx.logic_link.xxx.status
 Link status of the emulated device
 dcbx.logic_link.xxx.peer_status
 Link status of the DUT

 The following keys are returned when bcn_parameter is indicated in
 -dcbx_info_type:
 *****DCBX BCN Parameter Results*****
 dcbx.bcn_parameter.xxx.type
 BCN type value
 dcbx.bcn_parameter.xxx.bcna
 BCNA Port + MAC Address
 dcbx.bcn_parameter.xxx.rp_alpha
LLDP Functions
531
 Max Decrease Factor
 dcbx.bcn_parameter.xxx.rp_beta
 Max Increase Factor
 dcbx.bcn_parameter.xxx.rp_gd
 Decrease Gain
 dcbx.bcn_parameter.xxx.rp_gi
 Increase Gain
 dcbx.bcn_parameter.xxx.rp_tmax
 Severe Congestion Backoff Timer Range
 dcbx.bcn_parameter.xxx.cp_sf
 CP sampling interval fixed
 dcbx.bcn_parameter.xxx.rp_td
 Drift Interval Timer
 dcbx.bcn_parameter.xxx.rp_rmin
 Severe Congestion Restart Rate
 dcbx.bcn_parameter.xxx.rp_w
 Derivative Weight
 dcbx.bcn_parameter.xxx.rp_rd
 Drift Increase
 The following keys are returned when bcn_mode is indicated in
 -dcbx_info_type:
 *****DCBX BCN Mode results*****
 dcbx.bcn_mode.xxx.priority
 BCN priority
 dcbx.bcn_mode.xxx.cp_admin_mode
 Cp admin mode in the TLV from the DUT
 dcbx.bcn_mode.xxx.rp_admin_mode
 Operating Rp admin mode
 dcbx.bcn_mode.xxx.rp_operating_mode
 Operating Rp operating mode
 dcbx.bcn_mode.xxx.remove_tag_operational_mode
 Operating remove tag operational mode
 dcbx.bcn_mode.xxx.peer_cp_admin_mode
 Cp admin mode in the TLV from the DUT
 dcbx.bcn_mode.xxx.peer_rp_admin_mode
 Rp admin mode in the TLV from the DUT
 dcbx.bcn_mode.xxx.peer_rp_operating_mode
 Rp operating mode in the TLV from the DUT
 dcbx.bcn_mode.xxx.peer_remove_tag_operational_mode
 Remove tag operational mode in the TLV from the DUT
 dcbx.bcn_mode.xxx.desired_cp_admin_mode
 Desired Cp admin mode of the emulated device
 dcbx.bcn_mode.xxx.desired_rp_admin_mode
 Desired Rp admin mode of the emulated device
 dcbx.bcn_mode.xxx.desired_rp_operating_mode
 Desired Rp operating mode of the emulated device
 dcbx.bcn_mode.xxx.desired_remove_tag_operational_mode
 Desired remove tag operational mode of the emulated device
Description:
 The sth::emulation_lldp_info function provides information about devices
 specified for the LLDP configuration.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)

Examples:
 #### HLTAPI for Tcl ####
 #Assume we already have the LLDP device handle lldpRouterHandle
 sth::emulation_ldp_info -mode lldp \
 -handle $lldpRouterHandle
 Sample output:
 {{status 1} {handle $lldpRouterHandle}}
 #### HLTAPI for Python ####
LLDP Functions
532
 Sample Input:
 results_ret1 = sth.emulation_lldp_info (
 handle = device,
 mode = 'lldp');
 Sample Output:
 {'lldp': {'rx_port_age_outs_count': '0', 'rx_port_tlvs_unrecognized_count': '0',
 'rx_port_error_frame_count': '0', '_session_state': 'LLDP_SESSION_STATE_UP',
 'rx_port_frame_discarded_count': '0', 'tx_port_frame_count': '1',
 'rx_port_tlvs_discarded_count': '0', 'rx_port_frame_count': '2'},
 'lldp_neighbor': {'1': {'neighbor_port_id': 'N/A', 'neighbor_chassis_id_subtype':
 'N/A', 'neighbor_chassis_id': 'N/A', 'neighbor_time_to_live': 'N/A',
 'neighbor_port_id_subtype': 'N/A'}}, 'status': '1'}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::emulation_lldp_info (
 handle => "$device",
 mode => 'lldp');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'lldp_neighbor';
 $VAR4 = {
 '1' => {
 'neighbor_time_to_live' => 'N/A',
 'neighbor_port_id_subtype' => 'N/A',
 'neighbor_chassis_id' => 'N/A',
 'neighbor_chassis_id_subtype' => 'N/A',
 'neighbor_port_id' => 'N/A'
 }
 };
 $VAR5 = 'lldp';
 $VAR6 = {
 'rx_port_age_outs_count' => '0',
 'tx_port_frame_count' => '1',
 'rx_port_tlvs_discarded_count' => '0',
 'rx_port_frame_discarded_count' => '0',
 'lldp_session_state' => 'LLDP_SESSION_STATE_UP',
 'rx_port_tlvs_unrecognized_count' => '0',
 'rx_port_error_frame_count' => '0',
 'rx_port_frame_count' => '2'
 };

Notes:
 The "xxx" in return values are the indexes for the records.
End of Procedure Header
MLD Functions
533
MLD Functions
Functions:
sth::emulation_mld_config
sth::emulation_mld_group_config
sth::emulation_mld_control
sth::emulation_mld_info

sth::emulation_mld_config
Name:
 sth::emulation_mld_config
Purpose:
 Creates, modifies, or deletes a Multicast Listener Discovery Protocol
 (MLD) session on the specified Spirent HLTAPI port or handle.
 MLD is a communications protocol that manages IPv6 multicast groups. Use
 MLD to track IPv6 multicast membership.
Synopsis:
 sth::emulation_mld_config
 -mode create { -port_handle <port_handle> | -handle <device_handle> } |
 -mode { modify | delete } -handle <mld_session_handle>]
 [-count <1-65535> ]
 [-filter_mode {include | exclude}]
 [-filter_ip_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-force_leave {0|1}]
 [-force_robust_join {0|1}]
 [-general_query 1]
 [-group_query 1]
 [-insert_checksum_errors {0|1}]
 [-intf_ip_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ip_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_prefix_len <1-128>]
 [-insert_length_errors {0|1}]
 [-ip_router_alert 1 ]
 [-link_local_intf_ip_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-link_local_intf_prefix_len <1-128>]
 [-max_response_control 0 ]
 [-mld_version {v1|v2} ]
 [-msg_interval <0-4294967295>]
 [-neighbor_intf_ip_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-neighbor_intf_ip_addr_step
 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-qinq_incr_mode {inner|outer|both}]
 [-robustness <2-255>]
 [-suppress_report 1]
 [-unsolicited_report_interval <0-4294967295>]
 [-use_partial_block_state {0|1}]
 [-vlan_cfi {0|1}]
 [-vlan_outer_cfi {0 | 1}]
 [-vlan_id <0-4095> ]
 [-vlan_id_count <1-4096>]
 [-vlan_id_mode {fixed|increment}]
 [-vlan_id_step <0-4094>]
 [-vlan_user_priority <0-7>]
 [-vlan_id_outer <0-4095>]
 [-vlan_id_outer_mode {fixed|increment}]
 [-vlan_id_outer_count <1-4096>]
 [-vlan_id_outer_step <0-4094>]
 [-vlan_outer_user_priority <0-7>]
Arguments:
MLD Functions
534
 -count
 Defines the number of MLD sessions to create on the
 interface. Possible values are 1 to 65535. The default
 is 1. You can configure up to 8192 sessions per port.
 -filter_mode
 Specifies an explicit set of sources from which the
 multicast group is interested in receiving data (configures
 MLDv2 Include Filter mode). Possible values are include and
 exclude. The default is "include".
 include - Data from the specified sources are filtered and
 forwarded to the hosts by the multicast router.
 exclude - Data from the specified sources are filtered and
 not forwarded to the hosts by the multicast router.
 -filter_ip_addr
 Configure the filtered IP address. The values
 must be in IPv6 format. The default value is 2008::8.
 -force_leave
 Spirent Extension (for Spirent HLTAPI only).
 Controls whether all hosts are mandatory to send leave
 reports when leaving the multicast group. Valid values are 0
 (false) and 1 (true). The default is 0. If set to 0, hosts
 are not mandatory to send a Leave Group message when leaving
 a multicast group. If set to 1, hosts are mandatory to send
 a Leave Group message when leaving a multicast group. This
 argument affects all hosts except the last one, which is
 always mandatory to send an MLDv1 leave report. MLDv1 hosts
 leaving a multicast group may optionally send a leave report
 to the all-routers multicast group.
 -force_robust_join
 Spirent Extension (for Spirent HLTAPI only).
 Controls whether a second unsolicited join report is
 transmitted by the MLDv1 host. Valid values are 0 (false)
 and 1 (true). The default is 0. If set to 0, MLDv1 hosts do
 not transmit a second join report. If set to 1, MLDv1
 hosts do transmit a second join report.
 When an MLDv1 host joins a multicast group, it immediately
 transmits an initial unsolicited membership report for that
 group, in case it is the first member of that group on the
 network. In case the initial report gets damaged or lost,
 it is recommended that you send a second unsolicited report.
 -general_query
 Always enabled. When -general_query is set to 1, Spirent
 HLTAPI responds to only general queries received on the
 interface.
 -group_query
 Always enabled. When -group_query is set to 1, Spirent
 HLTAPI responds to only group-specific (and source/group)
 queries received on the interface.
 -handle
 The handle of the MLD host configured on the port to
 use when -mode is set to either modify or delete. When mode is
 create, Spirent HLTAPI creates MLD over the provided device.
 (Please refer to -mode for more information)
 -insert_checksum_errors
 Spirent Extension (for Spirent HLTAPI only).
 Controls the insertion of checksum errors into the MLD
 messages by the hardware. Valid values are 0 (false) and 1
 (true). The default is 0. If set to 0, the MLD checksum of
 the transmitted packet is not modified. If set to 1, the
MLD Functions
535
 MLD checksum of the transmitted packet is flipped by the
 protocol stack (that is, the least significant bit is
 inverted.)
 -insert_length_errors
 Spirent Extension (for Spirent HLTAPI only).
 Controls the insertion of message length errors into the MLD
 messages by the MLD stack. Valid values are 0 (false) and 1
 (true). The default is 0. If set to 1, every MLD packet
 transmitted by the host will be two bytes shorter than
 normal If set to 0, the MLD packet lengths will not be
 modified.
 -intf_ip_addr
 Specifies the first IPv6 address in the group. This argument
 is mandatory.
 -intf_ip_addr_step
 Specifies the difference between interface IP addresses of
 consecutive hosts when multiple MLD hosts are created.
 The default increment is 1. This argument is only applicable
 in create mode.
 -intf_prefix_len
 Specifies the address prefix length on the emulated host,
 Possible values for IPv6 addresses range from 1 to 128; the
 default is 64,
 -ip_router_alert
 Alerts transit routers to examine the contents of an IP
 packet more closely. When -ip_router_alert is set to 1,
 Spirent HLTAPI enables the IP router alert option. This
 argument is always enabled (1 or true) in Spirent HLTAPI
 whenever hosts send to routers. The IP router alert option
 is useful for new protocols that are addressed to a
 destination but require relatively complex processing in
 routers along the path. (See RFC 2113 for more information.)
 -link_local_intf_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the first link local IPv6 address in the group.
 -link_local_intf_prefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the address prefix length on the emulated host,
 Possible values for link local IPv6 addresses range from 1
 to 128; the default is 128.
 -max_response_control
 Always set to 0 (false).
 -mld_version
 Specifies the multicasting protocol used to manage multicast
 group memberships. Possible values are:
 v1 - Initial multicasting protocol version for IPv6,
 similar to IGMPv2. It is specified in RFC 2710.
 v2 - Version of MLD, specified in draft-vida-mld-
 v2-08.txt, that adds the "include" and "exclude"
 filter functionality.
 -mode
 Specifies the action to perform. Possible values are create,
 modify, and delete. This argument is mandatory. The modes
 are described below:
 create - Creates MLD hosts on the specified port or handle,
 but does not start them.
 modify - Changes the configuration parameters for the MLD
MLD Functions
536
 hosts identified by the -handle argument. When -port_handle
 is provided, Spirent HLTAPI creates one or more emulated
 hosts that are associated with the specified port. When
 -handle is provided, Spirent HLTAPI creates MLD over the
 specified device, in which case the following options will
 be obsoleted:
 -intf_ip_addr
 -intf_ip_addr_step
 -intf_prefix_len
 -neighbor_intf_ip_addr
 -neighbor_intf_ip_addr_step
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vlan_outer_cfi
 -vlan_id_count
 -vlan_id_outer
 -vlan_id_outer_count
 -vlan_id_outer_step
 -vlan_id_outer_mode
 -vlan_outer_user_priority
 -qinq_incr_mode
 -link_local_intf_ip_addr
 -link_local_intf_ip_addr_step
 -link_local_intf_prefix_len
 delete - Stops the MLD emulation locally without attempting
 to clear the bound addresses from the MLD server. In
 addition, all MLD group sessions information on the
 port is cleared and the connection is restarted.
 -msg_interval
 Maximum output rate of MLD message packets generated per
 millisecond. Set this value to 0 to send messages as fast
 as possible. Possible values range from 0 to 4294967295. The
 default is 0.
 -neighbor_intf_ip_addr
 Specifies the IP address of the interface for the MLD
 neighbor (next hop) that will establish an adjacency with
 the DUT. The default for IPv6 is 2000::1.
 -neighbor_intf_ip_addr_step
 Specifies the difference between the MLD neighbor's
 interface IP addresses when multiple MLD hosts are created.
 The default is 0000:0000:0000:0000:0000:0000:0000:0000 (that
 is, the same address).
 -port_handle
 The handle of the port on which to create the MLD session.
 -qinq_incr_mode
 Determines which VLAN ID to increment first. Possible values
 are:
 inner - Increments the inner VLAN ID before the outer VLAN ID

 outer - Increments the outer VLAN ID before the inner VLAN ID

 both - Increment both the inner and outer VLAN ID at the
 same time.

 The default value is inner.
 -robustness
 Specifies the number of times to send a State
 Change Report. This number is used in the calculation of
 default values for various timers and counters. Possible
 values are 2 to 255. The default value is 2. For MLDv1, you
MLD Functions
537
 must set -force_robust_join to 1.
 -suppress_report
 Suppresses the transmission of a listener report that
 duplicates one received on the interface. Multicast hosts
 can suppress the transmission of reports to reduce the
 amount of multicast communication. This argument is
 always enabled.
 -unsolicited_report_interval
 Sets the interval (in 1/10 seconds) to wait before re-
 sending the host's initial report of membership in a group.
 Possible values are 0 to 4294967295. The default value is
 100 for MLDv1 and 10 for MLDv2. Set it to 0 if you do not
 want to send an unsolicited report.
 -use_partial_block_state
 Spirent Extension (for Spirent HLTAPI only).
 Controls the use of a partial block state. Possible values
 are 1 (true) and 0 (false). When set to 1, this argument
 enables using a partial block state. When set to 0, it
 disables the use of a partial block state.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 1. If set to 0, it indicates
 Token Ring and packets are dropped by Ethernet ports. If set
 to 0, it indicates the network is Ethernet.
 -vlan_id
 Defines the VLAN ID of the first VLAN sub-interface.
 Possible values range from 0 to 4095. The default is 1. When
 the mode is either "create" or "enable", Spirent HLTAPI
 checks for a vlan object on the port with the given VLAN ID.
 If no VLAN object with that ID exists, Spirent HLTAPI
 creates a VLAN object with the specified VLAN ID.
 -vlan_id_count
 Specifies the number of inner VLAN tags to generate for the
 stream. Possible values range from 1 to 4096. The default
 is 1.
 -vlan_id_mode
 If you configure more than one interface on Spirent
 HLTAPI with VLAN, you can choose to either automatically
 increment the VLAN tag (mode "increment") or leave it idle
 for each interface (mode "fixed"), in which case the VLAN ID
 is the same for all packets. If you set this argument
 to "increment", then you must also specify the -vlan_id_step
 argument to indicate the step size. The default is
 increment.
 -vlan_id_step
 Defines the step size by which the VLAN value is incremented
 when you set -vlan_id_mode to "increment". Possible values
 range from 0 to 4094. You must specify the step when the
 -count argument is greater than 1. The default is 1.
 -vlan_id_outer
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN ID for a particular outer header.
 Possible values range from 0 to 4095.
 -vlan_id_outer_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN tags to generate for the
 outer header. Possible values range from 1 to 4096.
 The default is 1. You must set the -vlan_id_outer_mode
 argument to increment.
MLD Functions
538
 -vlan_id_outer_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent Test Center will assign VLAN tags to
 packets in the specified outer header. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_id_outer_step argument.
 -vlan_id_outer_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_id_outer) for subsequent packets. Possible values
 range from 0 to 4094. The default is 0.
 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the canonical format indicator (cfi) value is
 set for the VLAN outer header. Possible values are 0 or 1.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -vlan_user_priority
 Defines the VLAN priority for the VLANs on this port.
 Possible values range from 0 to 7. The default is 0.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -qinq_incr_mode
 -vlan_id_outer_count
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -max_groups_per_pkts
 -max_response_time
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 handle MLD session handle. A handle to the MLD host block is returned on
 success.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mld_config function creates, modifies, enables,
 or deletes one or more emulated MLD hosts. Use the -mode argument
 to specify the action to perform. (See the -mode argument description for
 information about the actions.)
 When you create an MLD host, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated MLD host will
 use for MLD communication. (The port handle value is contained in the
 keyed list returned by the sth::connect function.)
MLD Functions
539
 Use the -mode create function to define the characteristics of an MLD
 host.
 Spirent HLTAPI supports the use of MLD versions 1 and 2 for
 multicast group membership.
 For more information about the MLD protocol, see RFC 2710 (MLDv1) and
 draft-vida-mld-v2-08.txt (MLDv2).
Examples:
 #### HLTAPI for Tcl ####
 The following example creates an MLD session:
 sth::emulation_mld_config \
 -port_handle $port_handle1 \
 -mode create \
 -mld_version v1 \
 -intf_ip_addr 2001::3 \
 -neighbor_intf_ip_addr 2001::1
 Sample output for example shown above:
 {handle host1} {status 1}
 #### HLTAPI for Python ####
 The following example creates an MLD session:
 device_ret0 = sth.emulation_mld_config (
 mode = 'create',
 link_local_intf_ip_addr= 'fe80::1',
 link_local_intf_ip_addr_step= '::1',
 link_local_intf_prefix_len= '64',
 port_handle = port_handle[0],
 msg_interval = '0',
 neighbor_intf_ip_addr_step= '::',
 neighbor_intf_ip_addr= '2001::1',
 intf_ip_addr = '2001::2',
 intf_prefix_len = '64',
 intf_ip_addr_step = '::1',
 insert_length_errors= 'FALSE',
 mld_version = 'v1',
 unsolicited_report_interval= '10',
 insert_checksum_errors= 'FALSE',
 force_leave = 'FALSE',
 use_partial_block_state= 'FALSE',
 force_robust_join = 'FALSE',
 count = '1');
 Sample Output: {'status': '1', 'handles': 'mldhostconfig1', 'handle': 'host2'}
 #### HLTAPI for Perl ####
 The following example creates an MLD session:
 my %device_ret0 = sth::emulation_mld_config (
 mode => 'create',
 link_local_intf_ip_addr=> 'fe80::1',
 link_local_intf_ip_addr_step=> '::1',
 link_local_intf_prefix_len=> '64',
 port_handle => "$hport[1]",
 msg_interval => '0',
 neighbor_intf_ip_addr_step=> '::',
 neighbor_intf_ip_addr=> '2001::1',
 intf_ip_addr => '2001::2',
 intf_prefix_len => '64',
 intf_ip_addr_step => '::1',
 insert_length_errors=> 'FALSE',
 mld_version => 'v1',
 unsolicited_report_interval=> '10',
 insert_checksum_errors=> 'FALSE',
 force_leave => 'FALSE',
 use_partial_block_state=> 'FALSE',
 force_robust_join => 'FALSE',
MLD Functions
540
 count => '1');

 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host2';
 $VAR3 = 'handles';
 $VAR4 = 'mldhostconfig1';
 $VAR5 = 'status';
 $VAR6 = '1';
Notes:
 When first configuring MLD emulation on a port, you must specify
 "-mode create" and initialize the port handle before calling the
 sth::emulation_mld_config function.
End of Procedure Header
sth::emulation_mld_group_config
Name:
 sth::emulation_mld_group_config
Purpose:
 Creates group pools and source pools and modifies group and
 source pools from MLD hosts. This function configures multicast
 group ranges for an emulated MLD host. You must use the common
 sth::multicast_group_config and sth::multicast_source_config functions with
 this function.
Synopsis:
 sth::emulation_mld_group_config
 -mode create
 -session_handle <mld_session_handle>
 -group_pool_handle <multicast_group_pool_handle> |
 -mode {modify|delete}
 -handle <group_member_handle>
 -source_pool_handle <multicast_source_pool_handle>
Arguments:
 -group_pool_handle
 Specifies the name of the group (that is, the list of
 multicast IP addresses) to link to the MLD host during
 create mode. Before specifying the group pool handle, use
 the sth::emulation_multicast_group_config function to add
 the group pool. See "Multicast APIs" in this documentation
 set for information about the
 sth::emulation_multicast_group_config and
 sth::emulation_multicast_source_config functions. This
 argument is mandatory in mode create.
 -handle
 Sets the group membership handle that associates group pools
 with an MLD host. In modify mode, the membership handle must
 be used in conjunction with the session handle to identify
 the multicast group pools. Mode "modify" returns the same
 handle passed in. This argument is mandatory in modes modify and
 delete.
 -mode
 Specifies the action to perform. Possible values are create,
 modify, and delete. There is no default; you must specify a
 mode. This argument is mandatory. The modes are described below:
 create - Starts emulation on the port specified with
 -session_handle and associates an existing multicast
 group pool (-group_pool_handle) with the specified MLD
MLD Functions
541
 host (that is, joins the membership). You must specify
 a session handle with "-mode create".
 modify - Changes the configuration identified by the -handle
 argument by applying the parameters specified in
 subsequent arguments.
 delete - Remove one group of pools from this session.
 -session_handle
 Specifies the handle of the MLD host on which to configure
 the MLD group ranges. This argument is mandatory in mode create.
 -source_pool_handle
 Specifies the name of the source pool (that is, the list of
 non-multicast source IP addresses) to associate with the
 groups during create mode. Each multicast group may contain
 0 or more of these source IP addresses. Use this argument if
 the host only wants specific information within the
 specified multicast group (-group_pool_handle). Specifying
 the source pool handle along with the group pool handle in
 the sth::emulation_mld_group_config function adds the
 range of source IP addresses to each multicast group.
 Before specifying the source pool handle, use the
 sth::emulation_multicast_source_config function to add
 the source pools. See "Multicast APIs" in this documentation
 set for information about the
 sth::emulation_multicast_source_config and
 sth::emulation_multicast_group_config functions.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 handle
 Identifies the handle of the group (group_member_handle) created
 by the sth::emulation_mld_group_config function.
 group_pool_handle
 Identifies the group pool handle used by the
 sth::emulation_mld_group_config function to configure or modify
 the group member.
 source_pool_handle
 Identifies the source pool handle used by the
 sth::emulation_mld_group_config function to configure or modify
 the group member.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_mld_group_config function configures or
 modifies a group of MLD hosts where each group share a
 set of common characteristics. Use the -mode argument to specify
 the action to perform. (See the -mode argument description for information
 about the actions.)
 Before using this function, you must specify "-mode create" when
 configuring MLD host emulation on a port and initialize the port handle
 argument (using the sth::emulation_mld_config function).
 When calling sth::emulation_mld_group_config using "-mode create",
 this function will return the group member handle for use with the -handle
 argument.
MLD Functions
542
 You can link groups of multicast IP addresses to any interested host or
 just a subset of IP addresses within each group.
 Each multicast IP address directs the information it represents to any host
 interested in subscribing to it.
 To subscribe to only one or more particular IP addresses that exist within
 a multicast group, you must use the -source_pool_handle as well. Specifying
 the source_pool_handle along with the group_pool_handle in the
 sth::emulation_mld_group_config function, adds the range of source IP
 addresses to each multicast group.
Examples:
 #### HLTAPI for Tcl ####
 The following example configures the hosts, represented by
 "mldSessionHandle", to subscribe to the multicast group(s) represented by
 "McGroupHandle":
 sth::emulation_mld_group_config \
 -mode create \
 -group_pool_handle $McGroupHandle \
 -session_handle $mldSessionHandle
 Sample output for example shown above:
 {status 1} {handle mldhostconfig1}
 #### HLTAPI for Python ####
 The following example configures the hosts, represented by
 "mld_host", to subscribe to the multicast group(s) represented by
 "mld_group":
 device_ret0_group = sth.emulation_mld_group_config (
 mode = 'create',
 session_handle = mld_host,
 group_pool_handle = mld_group);

 Sample Output: {'status': '1', 'handle': 'mldgroupmembership1'}
 #### HLTAPI for Perl ####
 The following example configures the hosts, represented by
 "$mld_host", to subscribe to the multicast group(s) represented by
 "$mld_group":
 my %device_ret0_group = sth::emulation_mld_group_config (
 mode => 'create',
 session_handle => "$mld_host",
 group_pool_handle => "$mld_group");

 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'mldgroupmembership1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_mld_control
Name:
 sth::emulation_mld_control
Purpose:
 Start, stop, or restart the MLD host on the
MLD Functions
543
 specified port. Leaves and joins group pools.
Synopsis:
 sth::emulation_mld_control
 -mode {join|leave|leave_join}
 [-group_member_handle <handle>]
 [-port_handle < port_handle >]
 [-handle <MLD_session_handle>]
 [-delay <seconds>]
 [-data_duration <seconds>]
 [-calculate_latency {0|1} ]
Arguments:
 -calculate_latency
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to calculate latencies when joining or
 leaving multicast groups. Possible values are 0 (do not
 calculate latency) and 1 (calculate latency). If set to 1
 during an MLD Join, HLTAPI cannot capture the MLD
 control plane packets because the analyzer stops to collect
 packets so it can calculate latency.
 Note: Background traffic analysis with MLD is unavailable
 with calculate latency enabled. Also, if you are testing
 multiple joins and leaves with calculate latency enabled,
 you must add a delay (a few seconds) between subsequent
 joins and leaves (see example below):
 The following example does 100 iterations of join and leaves
 on 90 sessions. A 10-second delay is added after each join
 and each leave (using the Tcl command "after"). The delay
 duration to use depends on the number of iterations and
 number of sessions.
 for {set joinleaveidx 0} {$joinleaveidx < 100} \
 {incr joinleaveidx} {
 # MLD join
 sth::emulation_mld_control \
 -mode join \
 -calculate_latency 1 \
 -handle $MLDSessionHandle
 # Adding a delay between join and leave.
 # This value is based on 90 sessions joining.
 # May need to be adjusted when scaling higher.
 after 10000
 # MLD leave
 sth::emulation_mld_control \
 -mode leave \
 -calculate_latency 1 \
 -handle $MLDSessionHandle
 # Adding a delay between the last leave and
 # the next join when this loops.
 # This value is based on 90 sessions leaving.
 # May need to be adjusted when scaling higher.
 after 10000
 }
 -delay
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of time, in seconds, between joins and
 leaves. The default is 0.
 -data_duration
MLD Functions
544
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of time, in seconds, to wait before
 latencies are calculated. The default is 10.
 -group_member_handle
 Identifies the MLD (one or more) group member handle.
 -port_handle
 Specifies the port on which to take the MLD actions.
 This argument is mandatory when the -mode argument is "start",
 "stop", or "restart".
 -handle
 Identifies the groups to stop, start, restart, join, or
 leave. This value is returned by the
 sth::emulation_mld_group_config function. If you do not
 specify a group, the specified action is applied to all
 groups configured on the port specified by -port_handle.
 This value appears in the keyed list returned by the
 sth::emulation_mld_group_config function.
 -mode
 Specifies the action to perform on the specified handle. If
 you provide a handle (-handle), this argument performs the
 specified action on all groups on this session. If you
 provide a group member handle (-group_member_handle), this
 argument performs the specified action on the specified
 group pool(s). If you do not provide either a handle or
 a group member handle, this argument performs the specified
 action on all groups on all sessions. Possible values are
 start, stop, join, leave and leave_join. You must specify one of
 these values. The modes are described below:
 join - Joins all groups specified by -handle or joins
 group pools specified by -group_member_handle. If you
 do not provide a handle, this action joins all groups
 on all ports. This action only affects the status of
 the groups, it will not start the MLD protocol.
 leave - Leave (or unjoin) all groups specified by -handle or
 group pools specified by -group_member_handle. If you
 do not provide a handle, this action leaves all groups
 on all ports. This action only affects the status of
 the groups, it will not start or stop the protocol.
 leave_join - Rejoins all groups specified by -handle or
 rejoins group pools specified by -group_member_handle.
 The device specified by -handle or
 -group_member_handle will resend IGMP/MLD Reports.

 Note: There is a critical limitation for MLD Latency
 tests. For MLD Latency tests (IgmpMldLeaveGroupsCommand),
 the Spirent TestCenter analyzer only filters on the upper
 two and lower two bytes of the IPv6 group address.
 Therefore, if you step any of the 12 bytes in between, these
 streams will get aggregated based on the values of the upper
 and lower two bytes. The Spirent TestCenter analyzer does
 not have enough filter space to filter on the entire 16-byte
 IPv6 group address.
 Example: The following IPv6 group addresses are sent
 from port1:
 FF1E:1111:0:0:0:0:0:1
 FF1E:1111:0:0:0:0:0:2
 FF1E:2222:0:0:0:0:0:1
 FF1E:2222:0:0:0:0:0:2
 Suppose an MLD host on port 2 joins all the groups. You will
MLD Functions
545
 be receiving packets from all four group addresses, but
 notice how the groups will be aggregated onto two streams on
 the analyzer due to the limitation of not being able to
 differentiate the middle 12 bytes of the packets.
 First, analyzer looks at the upper and lower two bytes of
 each packet and ignore the middle 12 bytes.

 FF1E:1111:0:0:0:0:0:1
 FF1E:1111:0:0:0:0:0:2
 FF1E:2222:0:0:0:0:0:1
 FF1E:2222:0:0:0:0:0:2

 Next, packets are aggregated based on the values of the
 upper and lower two bytes.

 Upper Lower
 FF1E 1 * represents (FF1E:1111:0:0:0:0:0:1 and
 FF1E:2222:0:0:0:0:0:1)
 FF1E 2 * represents (FF1E:1111:0:0:0:0:0:2 and
 FF1E:1111:0:0:0:0:0:2)
Cisco-specific Arguments:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mld_control function sends a Join or Leave message from
 the host to inform a router that the host is either joining the multicast
 group specified by handle or group_member_handle or terminating its
 membership in the specified multicast group.
 When you call the sth::emulation_mld_control function, you
 specify a handle. Spirent HLTAPI applies the specified action to
 all of the emulated MLD hosts associated with the specified port.
 When a host wants to participate in a multicast group, it sends a
 "join" message to its local router. After a router receives one or
 more "joins" for a specific group, it forwards any packets destined for
 that particular group to the appropriate interface(s). The router regularly
 verifies that the hosts want to continue to participate in the
 multicast groups by sending periodic "queries" to the receivers.
 When a host is no longer interested in multicast group participation, it
 sends a "leave" message.
Examples:
 #### HLTAPI for Tcl ####
 The following example joins all groups specified by -handle:
 sth::emulation_mld_control \
 -mode join \
 -handle $MLDSessionHandle
 The following example removes the groups specified by -handle
 from the hosts on the specified port:
 sth::emulation_mld_control \
 -mode leave \
 -handle $MLDSessionHandle
 The following example starts the groups specified by -handle
MLD Functions
546
 sth::emulation_mld_control \
 -handle $MLDSessionHandle
 The following example rejoins the groups specified by -handle
 sth::emulation_mld_control \
 -mode leave_join \
 -handle $MLDSessionHandle
 Sample Output:
 {status 1} success or {status 0} fail
 #### HLTAPI for Python ####
 The following example joins all groups specified by handle:
 ctrl_ret1 = sth.emulation_mld_control (
 handle = device_list,
 mode = 'join');
Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 The following example joins all groups specified by handle:
 my %ctrl_ret1 = sth::emulation_mld_control (
 handle => "$device_list",
 mode => 'join');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_mld_info
Name:
 sth::emulation_mld_info
Purpose:
 Returns statistics about the MLD group activity on the
 specified handle. Statistics include the connection status and number and
 type of messages sent and received from the specified port.
Synopsis:
 sth::emulation_mld_info
 -handle <MLD_session_handle>
Arguments:
 -handle Specifies the MLD session handle upon which host emulation is
 configured. This argument is mandatory. This value is returned by
 the sth::emulation_mld_config function.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 invalid_pkts
 Number of invalid MLD packets received. Invalid
MLD Functions
547
 MLD packets include:
 invalid MLD checksum
 invalid packet length
 invalid MLD types
 dropped_pkts
 Will always return 0 because Spirent HLTAPI currently
 does not drop valid MLD packets dropped.
 host_addr
 IP address of host whose group membership stats are
 being displayed.
 group_addr
 Group membership IP address of host whose group membership
 stats are being displayed.
 group_membership_stats
 List of group membership statistics.
 state
 State of group membership of host whose group membership
 stats are being displayed. Possible returned values are:
 UNDEFINED - The state is not defined.
 NON_MEMBER - The host does not belong to the group on the
 interface. Non-member is the initial state for all
 memberships on all network interfaces.
 DELAYING_MEMBER - The host belongs to the group on the
 interface and has a report delay timer running for that
 membership.
 IDLE_MEMBER - The host belongs to the group on the interface
 and does not have a report delay timer running for that
 membership.
 RETRYING_MEMBER - This state applies to MLDv1 hosts
 when ForceRobustJoin is True. The host is
 retransmitting its initial "join" before transitioning
 from the NON_MEMBER state to the DELAYING_MEMBER or
 IDLE_MEMBER state.
 INCLUDE - Data from the specified sources are filtered and
 forwarded to the host by the multicast router.
 EXCLUDE - Data from the specified sources are filtered and
 not forwarded to the host by the multicast router.
 join_latency
 The time, in milliseconds, between sending the MLD join and
 receiving the multicast data for the channel specified in
 the join message. This value is valid only when
 "sth::emulation_igmp_control -calculate_latency" is set to
 1.
 leave_latency
 The time, in milliseconds, between sending the MLD leave
 for a channel and when multicast data has stopped being
 received. This value is valid only when
 "sth::emulation_igmp_control -calculate_latency" is set to
 1.
 In addition, the following MLD port statistics are returned:
 mldv1_queries_rx Routers use Multicast Listener Query messages to
 query a subnet for multicast listeners.
 mldv1_group_queries_rx MLDv1 Group specific Queries received.
MLD Functions
548
 mldv1_queries_tx MLDv1 Membership Queries are sent by IP multicast
 routers to query the multicast reception state of
 neighboring interfaces.
 mldv1_mem_reports_tx MLDv1 reports are sent to multicast routers to
 indicate that hosts have listeners interested in
 joining multicast groups whose multicast address
 is listed in the router's list.
 mldv1_mem_reports_rx MLDv1 reports are sent to multicast routers to
 indicate that hosts have listeners interested in
 joining multicast groups whose multicast address
 is listed in the router's list.
 mldv1_leave_tx MLDv1 Leaves transmitted.
 mldv2_queries_rx Routers use Multicast Listener Query messages to
 query a subnet for multicast listeners.
 mldv2_group_queries_tx This statistic is included in the
 TxV2QueryCount. MLDv2 Membership Queries are sent
 by IP multicast routers to query the multicast
 reception state of neighboring interfaces.
 mldv2_group_src_queries_rx
 Routers use Multicast Listener Query messages to
 query a subnet for multicast listeners
 mldv2_mem_reports_rx MLDv2 are used to report interest in receiving
 multicast traffic for a specific multicast address
 or to respond to a Multicast Listener Query
 message.
 mldv2_mem_reports_tx MLDv2 reports are sent to multicast routers to
 indicate that hosts have listeners interested in
 joining multicast groups whose multicast address
 is listed in the router's list.
 mld_frames_rx Total number of MLD frames received.
 mld_general_queries_rx
 Total number of multicast general queries
 received.
 mld_group_src_queries_rx
 Group- and source-specific queries are sent by a
 multicast router whenever a host leave a specific
 source of a group. This is to make sure that there
 are no other hosts of that source and group.
 mld_group_queries_rx
 The Group-Specific Query is used to learn if a
 particular group has any members on an attached
 network.
 mld_checksum_errors_rx
 Total number of MLD messages received with
 checksum errors.
 mld_length_errors_rx
 Total number of MLD messages received with length
 errors.
 mld_unknown_rx
 Total number of MLD frames of unknown type
 received.
 mld_timestamp
 Timestamp in seconds of last statistic update.
 mld_frames_tx
MLD Functions
549
 Total number of MLD frames transmitted.
 mld_general_queries_tx
 General Queries are used to learn which multicast
 addresses have listeners on an attached link.
 mld_group_src_queries_tx
 Group- and source-specific queries are sent by a
 multicast router whenever a host leave a specific
 source of a group. This is to make sure that there
 are no other hosts of that source and group.
 mld_group_queries_tx
 The Group-Specific Query is used to learn if a
 particular group has any members on an attached
 network.
 mldv2_allow_new_src_tx
 A Source-List-Change Record (SLCR) indicating the
 group's associated sources have changed such that
 data from a new set of sources are to be received
 mldv2_block_old_src_tx
 A Source-List-Change Record (SLCR) indicating the
 group's associated sources have changed such that
 data from an existing set of sources are not
 mandatory.
 mldv2_filter_exclude_tx
 A Filter-Mode-Change Record (FMCR) indicating the
 filter-mode of the reception state has changed to
 exclude mode.
 mldv2_filter_include_tx
 A Filter-Mode-Change Record (FMCR) indicating the
 filter-mode of the reception state has changed to
 include mode.
 mldv2_exclude_tx
 A Current-State Record (CSR) indicating the
 current reception state with respect to 1
 multicast group at a given interface. The state
 contains the exclude filter mode.
 mldv2_include_tx
 A Current-State Record (CSR) indicating the
 current reception state with respect to 1
 multicast group at a given interface. The state
 contains the include filter mode
Description:
 The sth::emulation_mld_info function retrieves statistics about the
 number of invalid and dropped packets on the specified host as well as
 several port statistics.
Examples:
 #### HLTAPI for Tcl ####
 When you call sth::emulation_mld_info, the contents of the returned keyed
 list depends on the status of the call. For example:
 sth::emulation_mld_info -handle $handle1
 Returns a list that contains one of the following:
 a) If the call is successful, the list contains stats and
 command execution status (in this case, a 1 indicating success).
 b) If the call fails, the list contains error log and command
 execution status (in this case, a 0 indicating failure).
Sample Input:
MLD Functions
550
 See Examples.
Sample Output:
 {group_membership_stats {{group_addr {{ff1e::1 {{host_addr
 {{fe80:1:1:1:1:1:1:2 {{state IDLE_MEMBER} {join_latency 0.000000}
 {leave_latency 0.000000}}}}}}} {ff1e::2 {{host_addr {{fe80:1:1:1:1:1:1:2
 {{state IDLE_MEMBER} {join_latency 0.000000}
 {leave_latency 0.000000}}}}}}}
 {ff1e::3 {{host_addr {{fe80:1:1:1:1:1:1:2 {{state IDLE_MEMBER}
 {join_latency 0.000000} {leave_latency 0.000000}}}}}}} {ff1e::4
 {{host_addr {{fe80:1:1:1:1:1:1:2 {{state IDLE_MEMBER} {join_latency
 0.000000} {leave_latency 0.000000}}}}}}} {ff1e::5 {{host_addr
 {{fe80:1:1:1:1:1:1:2 {{state IDLE_MEMBER} {join_latency 0.000000}
 {leave_latency 0.000000}}}}}}} {ff1e::6 {{host_addr {{fe80:1:1:1:1:1:1:2
 {{state IDLE_MEMBER} {join_latency 0.000000}
 {leave_latency 0.000000}}}}}}}
 {ff1e::7 {{host_addr {{fe80:1:1:1:1:1:1:2 {{state IDLE_MEMBER}
 {join_latency 0.000000} {leave_latency 0.000000}}}}}}} {ff1e::8
 {{host_addr {{fe80:1:1:1:1:1:1:2 {{state IDLE_MEMBER} {join_latency
 0.000000} {leave_latency 0.000000}}}}}}} {ff1e::9 {{host_addr
 {{fe80:1:1:1:1:1:1:2 {{state IDLE_MEMBER} {join_latency 0.000000}
 {leave_latency 0.000000}}}}}}} {ff1e::a {{host_addr
 {{fe80:1:1:1:1:1:1:2 {{state IDLE_MEMBER} {join_latency 0.000000}
 {leave_latency 0.000000}}}}}}}}}}} {session {{mldhostconfig1
 {{min_join_latency 0.000000} {max_join_latency 0.000000} {avg_join_latency
 0.000000} {min_leave_latency 0.000000} {max_leave_latency 0.000000}
 {avg_leave_latency 0.000000}}}}} {status 1}
 If there is an error, you will see: {status 0} {log {Error message }}
 #### HLTAPI for Python ####

 device = device_ret0['handle'].split()[0]
 results_ret1 = sth.emulation_mld_info (
 handle = device);
 Sample Output:
 {'status': '1', 'session': {'mldhostconfig1': {'avg_join_latency': '0',
 'max_leave_latency': '0', 'min_join_latency': '0', 'min_leave_latency': '0',
 'max_join_latency': '0', 'avg_leave_latency': '0'}}, 'group_membership_stats':
 ''}
 #### HLTAPI for Perl ####

 $device = "$device_ret0{handle}[0]";
 my %results_ret1 = sth::emulation_mld_info (
 handle => "$device");
 Sample Output:
 $VAR1 = 'session';
 $VAR2 = {
 'mldhostconfig1' => {
 'min_leave_latency' => '0',
 'max_join_latency' => '0',
 'max_leave_latency' => '0',
 'min_join_latency' => '0',
 'avg_leave_latency' => '0',
 'avg_join_latency' => '0'
 }
 };
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'group_membership_stats';
 $VAR6 = '';
Notes:
 If you configure over 1000 host-group pairs, the lower layer only returns
 avg/min/max latencies in the returned keyed list. If you configure 1000 or
MLD Functions
551
 less host-group pairs, the returned keyed list contains individual
 latencies.
End of Procedure Header
MPLS-TP Functions
552
MPLS-TP Functions
Functions:
sth::emulation_mpls_tp_config
sth::emulation_mpls_tp_port_config
sth::emulation_mpls_tp_control
sth::emulation_lsp_ping_info
sth::emulation_mpls_tp_config
Name:
 sth::emulation_mpls_tp_config
Purpose:
 Spirent Extension (for Spirent HLTAPI only).
 Configures the emulation of a Multiprotocol Label Switching Protocol-Transport
 Profile (MPLS-TP) network, or a Martini style Pseudo Wire Emulation Edge-to-Edge
 (PWE3) network topologies (as in Spirent Test Center) on the specified port.

 A PWE3 VPN uses extended Virtual Circuit (VC) Label Switched Path (LSP) of
 Label Protocol (LDP) or BGP signaling in the MPLS architecture to exchange
 Layer 2 switching information between VPN sites on the service provider network.

 The system includes two types of topologies - Single Segment and Multi Segment.
 In a single-segment test, only Provider Edge (PE) routers and a Provider (P)
 router are involved; while in a multi -segment test, the DUT serves as an S-PE
 router or an Ingress/Egress router.

 The different parts of a PWE3 VPN are described as:

 Provider (P) router ---- Router in the core of the provider network. P routers
 run MPLS switching, and do not attach VPN labels (assigned by PE routers) to
 routed packets between VPN sites.

 Provider-Edge (PE) router ---- Edge router of the MPLS network that attaches
 the VPN label to the incoming packets based on the interface or sub-interface
 on which they are received. A PE router directly attaches to a Customer Edge
 (CE) device. VPN labels are used to direct data packets to the correct egress
 router of MLPS network.

 Customer Edge (CE) device ---- Edge device on the network of a VPN site that
 connects to the PE router on the ISP network. A CE must interface with a PE
 router.

 Pseudo Wire Switching Provider Edge (S-PE) ---- The switching router in a
 multi-segment PW.
 Pseudowire Terminating Provider Edge (T-PE) --- The ingress/egress router
 in a multi-segment PW, which connects directly to a CE.

 The parameter also supports LSP Ping.

 Spirent HLTAPI supports the types of PWE3 VPN listed below:
 Ethernet over MPLS (EoMPLS or Martini Traffic)
 ---- Point-to-Point connection of Ethernet VPN over MPLS
 network.
 LDP-Virtual Private LAN Services (VPLS)
 ---- LDP signaled multipoint-to-multipoint Ethernet VPN
 over MPLS network.
 BGP- Virtual Private LAN Services(VPLS)
 ---- BGP signaled multipoint-to-multipoint Ethernet VPN
 over MPLS network.
 Spirent HLTAPI also supports MPLS over GRE for PWE3 VPN.
 
MPLS-TP Functions
553
Synopsis:
 sth::emulation_mpls_tp_config
 -mode create -port_handle <port_handle> | -mode delete -handle <handle>
 -ports <handle>
 [-attachment_group_id (100:1)]
 [-attachment_group_id_assignment {use_rt | manual}]
 [-attachment_group_id_increment <xx:xx>]
 [-attachment_group_id_increment_simulated_segment <xx:xx>]
 [-attachment_group_id_simulated_segment <xx:xx>]
 [-cbit { 0 | 1 }]
 [-core_host_percent <0 - 100>]
 [-core_hosts_per_ce <1 - 2147483647>]
 [-core_igp_protocol {ospf | isis | rip}]
 [-core_ldp_hello_type {directed | targeted}]
 [-core_mpls_protocol {none | ldp | rsvp}]
 [-core_p_enable { 0 | 1 }]
 [-core_p_if_ip_addr {a.b.c.d}]
 [-core_p_if_prefix_length <0 - 30>]
 [-core_p_loopback_ip_addr {a.b.c.d}]
 [-core_p_loopback_ip_addr_step {a.b.c.d}]
 [-core_p_per_sub_if <1 - 65535>]
 [-core_p_rsvp_bandwidth_per_link <1 - 2147483647>]
 [-core_p_rsvp_bandwidth_per_tunnel <0 - 2147483647>]
 [-core_p_topology_type {tree | grid}]
 [-core_pe_loopback_ip_addr {a.b.c.d}]
 [-core_pe_loopback_ip_addr_step {a.b.c.d}]
 [-core_pe_per_sub_if <1 - 65535>]
 [-create_unused_vpn_hosts_core_ports { 0 | 1 }]
 [-cust_host_percent <0 - 100>]
 [-cust_hosts_per_ce <1 - 2147483647>]
 [-dut_as {a.b.c.d}]
 [-dut_loopback_ip_addr {a.b.c.d}]
 [-enable_bgp_auto_discovery { 0 | 1 }]
 [-enable_nil_fec_label { 0 | 1 }]
 [-encap {ldp_lsp_encap_frame_relay_dlci | ldp_lsp_encap_atm_aal5_vcc |
 ldp_lsp_encap_atm_transparent_cell | ldp_lsp_encap_ethernet_vlan |
 ldp_lsp_encap_ethernet | ldp_lsp_encap_hdlc | ldp_lsp_encap_ppp |
 ldp_lsp_encap_cem | ldp_lsp_encap_atm_vcc | ldp_lsp_encap_atm_vpc |
 ldp_lsp_encap_ethernet_vpls}]
 [-encap_override { 0 | 1 }]
 [-group_id <0 - 65535>]
 [-host_num_core_vlans <0 - 9>]
 [-host_num_cust_vlans <0 - 9>
 [-host_num_left_site_vlans <0 - 9>]
 [-host_num_right_site_vlans <0 - 9>]
 [-host_vlan_id <0 - 65535>]
 [-host_vlan_id_step_per_host <0-65535>]
 [-host_vlan_id_step_per_vpn <0 - 65535>]
 [-hosts_per_vpn < 1- 2147483647>]
 [-include_status_tlv { 0 | 1 }]
 [-ldp_fec_type {fec_128 | fec_129}]
 [-ldp_fec_type_simulated_segment {fec_128 | fec_129}]
 [-left_site_host_percent <1 - 100>]
 [-left_site_hosts_per_ce <1 - 2147483647>]
 [-mtu <512 - 65535>]
 [-multi_segment_topology_type {dut_spe | dut_ingress_egress}]
 [-pseudowire_type {multi_segment | single_segment}]
 [-pw_count <1 - 4294967295>]
 [-right_site_host_percent <0 - 100>]
 [-right_site_hosts_per_ce <1 - 2147483647>]
 [-route_distinguisher <XX:XX>]
 [-route_distinguisher_assignment {manual | use_rt}]
 [-route_distinguisher_increment <xx:xx>]
 [-route_target <xx:xx >]
 [-route_target_increment <xx:xx>]
 [-s_pe_enable { 0 | 1]]
 [-simulated_pe_loopback_ip_addr <a.b.c.d>]
 [-simulated_pe_loopback_ip_addr_step <a.b.c.d>]
 [-simulated_pe_per_core_pe <1 - 65535>]
 [-simulated_t_pe_per_core_pe <1 - 65535>]
 [-src_attachment_individual_id <a.b.c.d>]
MPLS-TP Functions
554
 [-src_attachment_individual_id_increment <a.b.c.d>]
 [-src_attachment_individual_id_increment_simulated_segment <a.b.c.d>]
 [-src_attachment_individual_id_simulated_segment <a.b.c.d>]
 [-status_code {attachment_circuit_rx_fault | attachment_circuit_tx_fault |
 not_forwarding | pseudowire_rx_fault | pseudowire_tx_fault}]
 [-stream_block_group_method {aggregate | vpn}]
 [-stream_block_use_single_stream_number_per_endpoint_pair { 0 | 1 }]
 [-t_pe_per_sub_if <0 - 1000>]
 [-target_attachment_individual_id <a.b.c.d>]
 [-target_attachment_individual_id_increment <a.b.c.d>]
 [-target_attachment_individual_id_increment_simulated_segment <a.b.c.d>]
 [-target_attachment_individual_id_simulated_segment <a.b.c.d>]
 [-traffic_flow {bidirectional | core_to_customer | customer_to_core}]
 [-traffic_load_percent_from_core_ports <0 - 100>]
 [-traffic_load_percent_from_customer_ports <0 - 100>]
 [-traffic_load_percent_from_left_site_ports <0 - 100>]
 [-traffic_load_percent_from_right_site_ports <0 - 100>]
 [-vc_count <1 - 65535>]
 [-vc_id_pe_overlap_enable { 0 | 1 }]
 [-vc_id_start <1 - 4294967295>]
 [-vc_id_start_simulated_segment <1 - 4294967295>]
 [-vc_id_step <1 - 4294967295>]
 [-vc_id_step_simulated_segment <1 - 4294967295>]
 [-vlan_enable { 0 | 1 }]
 [-enable_core_tunnel_lsp_ping { 0 | 1 }]
 [-core_tunnel_lsp_ping_config]
 [-dst_addr {a.b.c.d}]
 [-experimental_bits <0 - 7>]
 [-pad_data]
 [-pad_mode {request_copy_pad_tlv | request_drop_pad_tlv | no_pad_tlv}]
 [-ping_interval <0 - 3999999999>]]
 [-ping_timeout <0 - 99>]
 [-time_to_live <1 - 255>]]
 [-validate_fec_stack { 0 | 1 }]
 [-enable_vpn_to_dut_tunnel_lsp_ping { 0 | 1 }]
 [-vpn_to_dut_tunnel_lsp_ping_config]
 [-dst_addr {a.b.c.d}]
 [-experimental_bits <0 - 7>]
 [-pad_data]
 [-pad_mode {tlvrequest_copy_pad_tlv | request_drop_pad_tlv | no_pad_tlv}]
 [-ping_interval <0 - 3999999999>]]
 [-ping_timeout <0 - 99>]
 [-time_to_live <1 - 255>]]
 [-validate_fec_stack { 0 | 1 }]
 [-vpn_host_assignment {hosts_per_ce | hosts_per_vpn}]
 [-vpn_host_id_format_enable { 0 | 1 }]
 [-vpn_host_id_format_offset_bytes <0 - 4>]
 [-vpn_host_id_format_port_bytes <0 - 4>]
 [-vpn_host_id_format_router_bytes <0 - 4>]
 [-vpn_host_mac_start <aa:bb:cc:dd:ee:ff>]
 [-vpn_host_mac_step <aa:bb:cc:dd:ee:ff>]
 [-vpn_host_overlap { 0 | 1 }]

Arguments:
 -mode
 Specifies the action to perform. Possible values are create
 and delete. This argument is mandatory.
 create - Configures PWE3 VPN on the port specified with
 the -port_handle argument.
 delete - Deletes the PWE3 configurations identified by the
 -handle argument.
 -attachment_group_id
 Specifies the first attachment group identifier across the
 provider network. Input value should be in format xx:xx. The
 default value is 100:1.
 This argument is available when -enable_bgp_auto_discovery
 is set to 0 and argument -ldp_fec_type is set to fec_129. 
MPLS-TP Functions
555
 -attachment_group_id_assignment
 Defines the Attachment Group ID (AGI) assignment mode.
 Possible values are use_rt and manual.
 user_rt - Sets AGI to the RT value that is specified by
 route_target.
 manual - Sets AGI to the value that is specified by
 attachment_group_id.
 The default value is use_rt.
 This argument is available when -enable_bgp_auto_discovery
 is set to 1 and -ldp_fec_type is set to fec_129.
 -attachment_group_id_increment
 The step value for subsequent AGIs. Input value should be in
 format xx:xx. The default value is 0:1.
 This argument is available when -enable_bgp_auto_discovery is
 set to 0 and -ldp_fec_type is set to fec_129.

 -attachment_group_id_simulated_segment
 Specifies the first attachment group identifier across a
 simulated segment. Input value should be in format xx:xx.
 The default value is 100:1.
 This argument is available when -pseudowire_type is set to
 multi_segment and -ldp_fec_type is set to fec_129.
 -attachment_group_id_increment_simulated_segment
 The step value for subsequent AGIs in a simulated segment.
 Input value should be in format xx:xx. The default value is
 0:1.
 This argument is available when -pseudowire_type is set to
 multi_segment and -ldp_fec_type_simulated_segment is set to
 fec_129.

 -create_unused_vpn_hosts_core_ports
 Enables or disables the creation of provider hosts for unused
 VPNs. Possible values are 1 (enabled) and 0 (disabled). The
 default value is 0.

 -core_pe_per_sub_if
 Number of Provider Edge (PE) routers per port or sub-interface.
 Possible values range from 1 to 65535. The default value is 1.

 This argument is available when -pseudowire_type is set to
 single_segment and -core_p_enable is set to 1.
 -core_pe_loopback_ip_addr
 Specifies the loopback IP address of the PE router that the
 configured PWE3 connection attaches to. Input value
 must be in the IPv4 format. The default value is 10.0.0.2.

 -core_pe_loopback_ip_addr_step
 The increment value for the next loopback address.
 Input value must be in the IPv4 format.
 The default value is 0.0.0.1.

 -core_p_enable
 Enables or disables emulation of provider routers in the test.
 Possible values are 1 (enabled) and 0 (disabled). If it is
 set to 0, only provider edge routers will be simulated.
 The default value is 1.

 -core_p_loopback_ip_addr
 Specifies the starting loopback IP address of P routers.
 This argument must be in the IPv4 format. The default 
MPLS-TP Functions
556
 value is 192.0.1.1.
 This argument is available when -core_p_enable is set to 1.
 -core_p_loopback_ip_addr_step
 The increment value for the next loopback address for provider
 routers. Input value must be in the IPv4 format.
 The default value is 0.0.1.0.
 This argument is available when -core_p_enable is set
 to 1.
 -core_p_if_ip_addr
 Specifies the starting IP address of the interface between the
 P and PE routers. This argument must be in the IPv4 format.
 The default value is 1.0.0.1.
 This argument is available when -core_p_enable is set to 1.
 -core_p_if_prefix_length
 Specifies the IP prefix length on the P-to-PE interface.
 Possible values range from 0 to 30. The default value is 24.
 This argument is available when -core_p_enable is set to 1.
 -core_p_topology_type
 Specifies the topology of the provider network. Possible
 values are tree and grid. The default value is tree.
 This argument is available when -core_p_enable is set to 1.

 -core_p_per_sub_if
 Number of P routers per port or sub-interface. Possible values
 range from 1 to 65535. The default value is 1.
 This argument is available when -core_p_enable is set to 1.

 NOTE: Only one emulated P router is created on each port or
 sub-interface. Additional P routers are simulated through
 the IGP protocol.

 -core_mpls_protocol
 Specifies the signaling protocol to be used by the provider
 side. MPLS refers to a mechanism which directs and transfers
 data between Wide Area Networks (WANs) nodes with high
 performance, regardless of the content of the data. Possible
 values are none, ldp, and rsvp. The default value is ldp.

 The possible values are described below:

 none - Specifies that there is no MPLS protocol to be used
 by the provider side.

 ldp - Indicates the Label Distribution Protocol (LDP).

 rsvp - Indicates the resource reservation setup
 protocol (RSVP).

 -core_ldp_hello_type
 Specifies the type of Hello messages for the LDP session in
 the provider network. Possible values are directed and targeted.
 The default value is direct.
 directed - A Basic Discovery mechanism that is used to locate
 directly-connected neighbors. The Peer IP address
 is the DUT interface address.

 targeted - An Extended Discovery mechanism that is used
 to locate neighbors which are not directly connected.
 The Peer IP address is the DUT loopback address.
 
MPLS-TP Functions
557
 This argument is available when -core_mpls_protocol is set
 to ldp.

 -core_igp_protocol
 Specifies the Interior Gateway Protocol (IGP) used by the
 provider side. Networks within an autonomous system communicate
 routing information to each other using an IGP protocol.
 Possible values are ospf, isis, and rip. The default value
 is ospf.

 ospf - Indicates Open Shortest Path First (OSPF), which is
 a router protocol used within larger autonomous
 system networks.
 isis - Specifies the Intermediate System to Intermediate
 system (IS-IS) protocol. Routers (Intermediate Systems)
 use IS-IS to exchange routes within a single
 network (routing domain).

 rip - Specifies the Routing Information Protocol (RIP).

 -core_p_rsvp_bandwidth_per_link
 Specifies the maximum bandwidth per ISIS/OSPFv2 TE link for
 simulated Provider router topology links. The value is
 measured in bytes per second. Possible values range from 1
 to 2147483647. The default value is 100000.
 This argument is available when -core_mpls_protocol is set
 to rsvp.
 -core_p_rsvp_bandwidth_per_tunnel
 Specifies the RSVP-TE T-Spec Bandwidth rate in bytes/sec
 Possible values range from 1 to 2147483647. The default
 value is 100000.
 This argument is available when -core_mpls_protocol is set
 to rsvp.
 -core_hosts_per_ce
 Specifies the number of hosts assigned to each provider-side
 or right-side CE router. Possible values range from 1 to
 2147483647. The default value is 1.
 This argument is available when -pseudowire_type is set to
 single_segment and -vpn_host_assignment is set to
 hosts_per_ce.
 -cust_hosts_per_ce
 Specifies the number of hosts assigned to each customer-side
 or right-side CE router. Possible values range from 1 to
 2147483647. The default value is 1.
 This argument is available when -pseudowire_type is set to
 single_segment and -vpn_host_assignment is set to
 hosts_per_ce.
 -core_host_percent
 Specifies the percentage of hosts on the provider or right side.
 Possible values range from 0 to 100. The default value is 50.
 This argument is available when -pseudowire_type is set to
 single_segment and -vpn_host_assignment is set to hosts_vpn.
 -cust_host_percent
 Specifies the percentage of hosts on the customer or left side.
 Possible values range from 0 to 100. The default value is 50.
 This argument is available when -pseudowire_type is set to
 single_segment and -vpn_host_assignment is set to hosts_vpn.
MPLS-TP Functions
558
 -cbit
 Enables setting the control bit to 1. Possible values are
 1 (enabled) and 0 (disabled). The default value is 0.
 -dut_as
 Specifies the number of autonomous systems (AS) of DUT.
 Possible values range from 1 to 65535. The default value is 1.

 This argument is available when -enable_bgp_auto_discovery is
 set to 1. and ldp_fec_type is set to fec_129.
 -dut_loopback_ip_addr
 Defines the loopback IP address. The value must be in the
 IPv4 format. The default value is 10.0.0.1

 -encap_override
 Enables or disables the Encap parameters. Possible values are 1
 (enabled) and 0 (disabled). The default value is 0.
 -encap
 Specifies the Layer 2 encapsulation type. The values are
 described below:
 ldp_lsp_encap_frame_relay_dlci Frame Relay DLCI
 ldp_lsp_encap_atm_aal5_vcc ATM AAL5 Cell Transport
 ldp_lsp_encap_atm_transparent_cell ATM Transparent Cell Transport
 ldp_lsp_encap_ethernet_vlan Ethernet VLAN
 ldp_lsp_encap_ethernet Ethernet
 ldp_lsp_encap_hdlc HDLC
 ldp_lsp_encap_ppp PPP
 ldp_lsp_encap_cem CEM
 ldp_lsp_encap_atm_vcc ATM VCC cell transport
 ldp_lsp_encap_atm_vpc ATM VPC cell transport
 ldp_lsp_encap_ethernet_vpls Ethernet VPLS
 Data traffic generation is only supported for encapsulation
 types 4 (Ethernet VLAN), 5 (Ethernet), and 11 (VPLS). All
 other encapsulations can be advertised in label messages,
 but data traffic is not generated. The default value is
 ldp_lsp_encap_ethernet_vlan.
 -enable_core_tunnel_lsp_ping
 Enables or disables LSP Ping on the core tunnel. Possible
 values are 1 (enabled) and 0 (disabled). The default value
 is 0.
 -core_tunnel_lsp_ping_config
 A list of sub-options that configure core tunnel LSP Ping.
 This argument is available when -enable_core_tunnel_lsp_ping
 is set to 1.
 -enable_vpn_to_dut_tunnel_lsp_ping
 Enables or disables LSP Ping on PE-to-DUT VPN tunnels. Possible
 values are 1 (enabled) and 0 (disabled). The default value is 0.
 -vpn_to_dut_tunnel_lsp_ping_config
 A list of sub-options that configure LSP Ping for VPN-to-DUT
 tunnels.
 This argument is available when
 -enable_vpn_to_dut_tunnel_lsp_ping is set to 1.
 -enable_bgp_auto_discovery
 Enables or disables BGP auto-discovery in the provider network.
 Possible values are 1 (enabled) and 0 (disabled). The default
 value is 0.
 This argument is available when -ldp_fec_type is set to fec_129.
 -group_id
 Specifies a unique identifier for the virtual tunnel. Possible 
MPLS-TP Functions
559
 values range from 0 to 65535. The default value is 0.
 -hosts_per_vpn
 Specifies the number of hosts assigned to each VPN or PW.
 Possible values range from 1 to 2147483647. The default value
 is 100.
 This argument is available when -vpn_host_assignment is set to
 hosts_per_vpn
 -host_num_cust_vlans
 Specifies the number of customer side VLAN headers. Possible
 values range from 0 to 9. The default is 1.

 This argument is available when -pseudowire_type is set to
 single_segment and -vlan_enable is set to 1.
 -host_num_core_vlans
 Specifies the number of provider side VLAN headers. Possible
 values range from 0 to 9. The default is 1.

 This argument is available when -pseudowire_type is set to
 single_segment and -vlan_enable is set to 1.

 -host_vlan_id
 Specifies the value of the first Host VLAN ID. Possible values
 range from 0 to 65535. The default value is 100.
 This argument is available when -vlan_enable is set to 1.

 -host_vlan_id_step_per_vpn
 Specifies the increment value for subsequent VLAN IDs for each
 VPN. Possible values range from 0 to 65535. The default value
 is 1.

 This argument is available when -vlan_enable is set to 1.

 -host_vlan_id_step_per_host
 Specifies the increment value for subsequent VLAN IDs for each
 host. Possible values range from 0 to 65535. The default value
 is 1.

 This argument is available when -vlan_enable is set to 1.

 -host_num_left_site_vlans
 Specifies the number of customer side VLAN headers. Possible
 values range from 0 to 9. The default value is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment.

 -host_num_right_site_vlans
 Specifies the number of customer side VLAN headers. Possible
 values range from 0 to 9. The default value is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment.
 -include_status_tlv
 Determines whether to include the Status TLV in the PDU.
 Possible values are 0 and 1. When it is set to 1, Spirent
 HLTAPI will include the Status TLV in the PDU. The default
 value is 0.
 -enable_nil_fec_label
 Determines whether to allow labels from the reserved range to be
 added to the label stack for diagnostic purposes. Possible
 values are 0 and 1. The default value is 0.
 -ldp_fec_type
 Defines the type of Forward Equivalency Class (FEC). Possible 
MPLS-TP Functions
560
 values are described below:
 fec_128 - manually configured pseudowires.

 fec_129 - Virtual Private LAN Service (VPLS) autodiscovery.

 The default value is fec_128

 -ldp_fec_type_simulated_segment
 Defines Type of Forward Equivalency Class (FEC) in the
 simulated segment. Possible values are described below:
 fec_128 - manually configured pseudowires.

 fec_129 - Virtual Private LAN Service (VPLS) autodiscovery.

 The default value is fec_128.
 This argument is available when -pseudowire_type is set to
 multi_segment.

 -left_site_hosts_per_ce
 Specifies the number of hosts assigned to each customer-side
 or left-side CE router. Possible values range from 1 to
 2147483647. The default value is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -vpn_host_assignment is set to hosts_per_ce.

 -left_site_host_percent
 Specifies the percentage of hosts on the provider or left side.
 Possible values range from 0 to 100. The default value is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -vpn_host_assignment is set to
 hosts_per_vpn.

 -mtu
 Specifies the maximum allowable frame size, or Maximum
 Transmission Unit (MTU), to traverse a given VPLS instance.
 Possible values range from 512 to 65535. The default value is
 1500.
 -multi_segment_topology_type
 Determines the DUT to serve as an S-PE router or an
 ingress/egress router. Possible values are described below:

 dut_spe - The DUT serves as an S-PE router; Spirent
 TestCenter emulates routers running IGP/MPLS
 protocols and configures bound streams based on
 the configuration parameters in the traffic step.
 The left side is the customer VPN side, the right
 side is the provider side and the DUT is a S-PE
 router.
 dut_ingress_egress - Spirent TestCenter emulates hosts and
 configures traffic. The left side and right side
 are providers and the DUT can be either an
 S-PE or T-PE router.
 The default value is dut_spe.
 This argument is available when -pseudowire_type is set to
 multi_segment.
 -port_handle
 Specifies the port on which to create the
 -pseudowire_type
 Specifies either a single-segment or multi-segment test.
 Possible values are single_segment and multi_segment. The
 default value is single_segment.
MPLS-TP Functions
561
 -pw_count
 Specifies the number of pseudowires across the provider.
 Possible values range from 1 to 4294967295. The default
 value is 1.
 This argument is available when -ldp_fec_type is set to
 fec_129.

 -route_target
 Specifies the Route Target extended community attribute. The
 Route Target identifies a set of sites to which a PE router
 distributes. Input value should be in format xx:xx. The
 default value is 1:0.
 This argument is available when -enable_bgp_auto_discovery is
 set to 1 and -ldp_fec_type is set to fec_129.
 -route_target_increment
 Specifies the step value for additional route targets. Input
 value should be in format xx:xx. The default value is 0:1.
 This argument is available when -enable_bgp_auto_discovery is
 set to 1 and -ldp_fec_type is set to fec_129.
 -route_distinguisher_assignment
 Defines the Route Distinguisher assignment. Possible values
 are use_rt and manual. The default value is use_rt.
 use_rt - Use the Route Target field for all Route
 Distinguishers in the VPLS.
 manual - Manually configure Route Distinguishers by setting
 customer/provider RD start, step per VPLS,
 step per CE.

 This argument is available when -enable_bgp_auto_discovery is
 set to 1 and -ldp_fec_type is set to fec_129.

 -route_distinguisher
 Specifies the Route Distinguisher for the LSP route. The
 distinguisher is an 8-byte value that is concatenated with an
 IPv4 prefix to create a unique LSP IPv4 prefix. The default
 value is 1:0.
 This argument is available when -enable_bgp_auto_discovery is
 set to 1 and -ldp_fec_type set to fec_129 and
 -route_distinguisher_assignment is set to manual.
 -route_distinguisher_increment
 Specifies the step value for Route Distinguishers. Input value
 should be in format xx:xx. The default value is 0:1.

 This argument is available when -enable_bgp_auto_discovery
 is set to 1, -ldp_fec_type is set to fec_129 and
 -route_distinguisher_assignment is set to manual.
 -right_site_hosts_per_ce
 Specifies the number of hosts assigned to each provider-side
 or right-side CE router. Possible values range from 1 to
 2147483647. The default value is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -vpn_host_assignment is set to hosts_per_ce.

 -right_site_host_percent
 Specifies the percent of hosts on the provider or right side.
 Possible values range from 0 to 100. The default value is 1.
 This argument is available when -pseudowire_type is set to
 multi_segment and -vpn_host_assignment is set to hosts_per_vpn.
MPLS-TP Functions
562
 -status_code
 Specifies the status code in the Status TLV. Possible values
 are attachment_circuit_rx_fault, attachment_circuit_tx_fault,
 not_forwarding, pseudowire_rx_fault and pseudowire_tx_fault.
 -src_attachment_individual_id
 Specifies the first source attachment interface identifier.
 Input value must be in the IPv4 format.
 The default value is 10.0.0.2.

 This argument is available when -ldp_fec_type set to fec_129.

 -src_attachment_individual_id_increment
 Specifies the step value of source attachment interface
 identifier. The default value is 0.0.0.1.

 This argument is available when -ldp_fec_type set to fec_129.
 -src_attachment_individual_id_simulated_segment
 Specifies the first source attachment interface identifier
 in the simulated segment. Input value must be in the IPv4 format.
 The default value is 10.0.0.1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -ldp_fec_type_simulated_segment is set to
 fec_129.

 -src_attachment_individual_id_increment_simulated_segment
 Specifies the step value for source attachment interface
 identifiers in the simulated segment. Input value
 must be in the IPv4 format. The default value is 0.0.0.1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -ldp_fec_type_simulated_segment is set to
 fec_129.

 -s_pe_enable
 Enables or disables S-PE in the provider network. Possible
 values are 1 (enabled) and 0 (disabled). The default value
 is 0.

 This argument is available when -pseudowire_type is set to
 multi_segment

 -simulated_pe_per_core_pe
 Specifies the number of simulated S-PE routers per emulated
 PE. Possible values range from 1 to 65535. The default value
 is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -s_pe_enable is set to 1.

 -simulated_t_pe_per_core_pe
 Specifies the number of simulated T-PE routers per emulated
 S-PE. Possible values range from 1 to 65535. The default
 value is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -s_pe_enable is set to 1.

 -simulated_pe_loopback_ip_addr
 Specifies the starting loopback IP address of the Simulated
 PE routers. Input value must be in the IPv4 format.
 The default value is 100.0.0.2.

 This argument is available when -pseudowire_type is set to
 multi_segment and -s_pe_enable is set to 1.
 -simulated_pe_loopback_ip_addr_step
 Specifies the increment value for the next loopback address 
MPLS-TP Functions
563
 of simulated PE routers. Input value must be in the IPv4
 format. The default value is 0.0.0.1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -s_pe_enable is set to 1.

 -stream_block_group_method
 Defines the mode of Stream Block Grouping. Possible values
 are aggregate and VPN. The default value is aggregate.

 aggregate - Aggregates all streams into a single stream block.

 VPN - Aggregates all streams for a single VPN into a single
 stream block.

 -stream_block_use_single_stream_number_per_endpoint_pair
 Determines whether to use single stream number per endpoint
 pair. Possible values are 1 and 0. If it is set to 1, each
 endpoint is assigned a single stream ID; if it is set to 0,
 each flow between endpoint pairs is assigned a single stream
 ID. The default value is 0.

 -target_attachment_individual_id
 Specifies the first target attachment interface identifier.
 Input value must be in the IPv4 format.
 The default value is 10.0.0.1.

 This argument is available when- ldp_fec_type is set to fec_129.

 -target_attachment_individual_id_increment
 Specifies the step value of the next target attachment
 interface identifier. Input value must be in the IPv4
 format. The default value is 0.0.0.1.

 This argument is available when -ldp_fec_type set to fec_129.
 -target_attachment_individual_id_simulated_segment
 Specifies the first target attachment interface identifier in
 the simulated segment. Input value must be in the IPv4 format.
 The default value is 192.0.0.1.
 This argument is available when -pseudowire_type is set to
 multi_segment and -ldp_fec_type_simulated_segment is set to
 fec_129.

 -target_attachment_individual_id_increment_simulated_segment
 Specifies the step value of the target attachment interface
 identifier in the simulated segment. Input value must be
 in the IPv4 format. The default value is 0.0.0.1.

 This argument is available when -pseudowire_type is set to
 multi_segment and -ldp_fec_type_simulated_segment is set
 to fec_129.
 -t_pe_per_sub_if
 Specifies the number of simulated T-PE routers per port or
 sub-interface.
 Possible values range from 0 to 1000. The default value is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment.

 -traffic_flow
 Defines the traffic flow. Possible values are bidirectional,
 core_to_customer and customer_to_core. The default value is
 bidirectional. The values are described below:
 CUSTOMER_TO_CORE - Emulated CE devices > emulated PE devices,
 through the DUT.

 CORE_TO_CUSTOMER - Emulated PE devices > emulated P device 
MPLS-TP Functions
564
 > the emulated CE, through the DUT.

 BIDIRECTIONAL - Bidirectional, traffic flow in both
 directions between the emulated CE and the
 simulated CE devices behind the PEs.
 -traffic_load_percent_from_core_ports
 Defines the traffic load percentage from provider ports.
 Possible values range from 0 to 100. The default value is 10.

 This argument is available when -pseudowire_type is set to
 single_segment.

 -traffic_load_percent_from_customer_ports
 Defines the traffic load percentage from customer ports.
 Possible values range from 0 to 100. The default value is 10.

 This argument is available when -pseudowire_type is set to
 single_segment.
 -traffic_load_percent_from_left_site_ports
 Defines the traffic load percentage from customer ports.
 Possible values range from 0 to 100. The default value is 10.

 This argument is available when -pseudowire_type is set to
 multi_segment.

 -traffic_load_percent_from_right_site_ports
 Defines the traffic load percentage from provider ports. Possible
 values range from 0 to 100. The default value is 10.

 This argument is available when -pseudowire_type is set to
 multi_segment.
 -vc_count
 Defines the number of virtual circuits across the provider.
 Possible values range from 1 to 65535. The default value is 10.
 This argument is available when -ldp_fec_type is set to fec_128.

 -vc_id_start
 Defines the first virtual circuit identifier. Possible values
 range from 1 to 4294967295. The default value is 1.

 This argument is available when -ldp_fec_type is set to fec_128.
 -vc_id_step
 Defines the step value for additional VC IDs. Possible values
 range from 1 to 4294967295. The default value is 1.

 This argument is available when -ldp_fec_type is set to fec_128.
 -vc_id_start_simulated_segment
 Defines the first virtual circuit identifier. Possible values
 range from 1 to 4294967295. The default value is 1.

 This argument is available when -pseudowire_type is set to
 multi_segment and ldp_fec_type_simulated_segment is set to
 fec_128.
 -vc_id_step_simulated_segment
 Defines the step value for additional VC IDs. Possible values
 range from 1 to 4294967295. The default value is 1.
 This argument is available when -pseudowire_type is set to
 multi_segment and -ldp_fec_type_simulated_segment is set to
 fec_128.
 -vc_id_pe_overlap_enable
 Specifies whether VC IDs are assigned per PE or per VPN.
 Overlapped VC IDs are allowed on different PEs. Possible 
MPLS-TP Functions
565
 values are 1 and 0. If it is set to 1, VC IDs are assigned
 on a per PE basis. The default value is 0.
 -vlan_enable
 Enables or disables configurations on VPN host VLANs.
 Possible values are 1 (enabled) and 0 (disabled). The default
 value is 0.
 -vpn_host_mac_start
 Specifies the first host MAC address in the VPN in the MAC address
 range. The default value is 00:00:01:00:00:01.
 -vpn_host_mac_step
 Defines the increment value for subsequent MAC addresses.
 The default value is 00:00:00:00:00:01.
 -vpn_host_overlap
 Enables or disables overlapping hosts across VPNs. Possible
 values are 1 (enabled) and 0 (disabled). The default value
 is 0.

 -vpn_host_id_format_enable
 Enables or disables the function to specify the step bytes
 of the MAC address per port and/or per router.
 Enable this option to track the source and destination of
 traffic. Possible values are 1 (enabled) and 0 (disabled).
 The default value is 0.
 -vpn_host_id_format_offset_bytes
 Specifies the number of bytes to offset the tracking numbers
 and the number of bytes used for tracking ports and routers.
 This defines the starting bytes of the customized MAC address.
 Possible values range from 0 to 4. The default value is 1.
 This argument is available when -vpn_host_id_format_enable
 is set to 1.
 -vpn_host_id_format_port_bytes
 Specifies the number of bytes to offset the tracking numbers
 and the number of bytes used for tracking ports and routers.
 This defines the increment to add to the starting bytes of the
 customized MAC address for each port. Possible values range
 from 0 to 4. The default value is 1.
 This argument is available when -vpn_host_id_format_enable
 is set to 1.
 -vpn_host_id_format_router_bytes
 Specifies the number of bytes to offset the tracking numbers
 and the number of bytes used for tracking ports and routers.
 This defines the increment to add to the starting bytes of the
 customized MAC address for each router. Possible values range
 from 0 to 4. The default value is 1.
 This argument is available when -vpn_host_id_format_enable
 is set to 1.
 -vpn_host_assignment
 Specifies the host MAC assignment mode. Possible values are
 hosts_per_ce, and hosts_per_vpn. The default value
 is hosts_per_ce. The values are described below:

 HOSTS_PER_CE - Specifies the hosts per customer CE device
 and the hosts per provider CE device.
 (Hosts per customer and per provider CE device
 fields become visible)

 HOSTS_PER_VPN - Specifies the hosts per VPN, customer CE
 percentage, and provider CE percentage.
 (Customer and provider host % fields become
 visible) 
MPLS-TP Functions
566

 -ports
 Specifies ports, their types and interface parameters,
 which are the handle key values returned by function
 -emulation_mpls_tp_port_config. This argument is mandatory.

Following are the sub-options for -core_tunnel_lsp_ping_config:
 -dst_addr
 Specifies the IPv4 address for the destination of the
 request. The default value is 127.0.1.
 -ping_interval
 Specifies the number of seconds to wait between ping
 messages. Possible values range from 0 to 3999999999.
 The default value is 5.

 -ping_timeout
 Specifies the number of seconds to wait for a reply
 before timing out. Possible values range from 0 to 99.
 The default value is 2.

 -time_to_live
 The MPLS IP TLL value. Possible values range from 1 to
 255.
 -experimental_bits
 Specifies the value of the EXP bits. Possible values
 range from 0 to 7. The default value is 0.
 -validate_fec_stack
 Determines whether to perform FEC stack validation.
 Possible values are 1 and 0. Set to 1 if the sender
 wants the receiver to perform FEC Stack validation.
 Set to 0 to leave the choice to the receiver. The default
 value is 0.
 -enable_nil_fec_label
 Determines whether to allow labels from the reserved
 range to be added to the label stack. Possible values are 1
 and 0. Set to 1 to allow labels from the reserved range to
 be added to the label stack for various diagnostic purposes.
 The default value is 0.
 -pad_mode
 Sets the value of the Pad TLV; can be omitted. Possible
 values are described below:
 NO_PAD_TLV Transmit without Pad TLV
 REQUEST_DROP_PAD_TLV Request peer to drop Pad TLV
 REQUEST_COPY_PAD_TLV Request peer to copy Pad TLV

 The default value is no_pad_tlv.
 -pad_data
 Pad data. The default value is none.
Following are the sub-options for -vpn_to_dut_tunnel_lsp_ping_config:
 -dst_addr
 Specifies the IPv4 address for the destination of the request.
 The default value is 127.0.1.
 -ping_interval
 Specifies the number of seconds to wait between ping
 messages. Possible values range from 0 to 3999999999.
 The default value is 5.

 -ping_timeout
MPLS-TP Functions
567
 Specifies the number of seconds to wait for a reply
 before timing out. Possible values range from 0 to 99.
 The default value is 2.

 -time_to_live
 The MPLS IP TLL value. Possible values range from 1 to
 255.
 -experimental_bits
 Specifies the value of the EXP bits. Possible values
 range from 0 to 7. The default value is 0.
 -validate_fec_stack
 Determines whether to perform FEC stack validation.
 Possible values are 1 and 0. Set to 1 if the sender
 wants the receiver to perform FEC Stack validation.
 Set to 0 to leave the choice to the receiver.
 The default value is 0.
 -enable_nil_fec_label
 Determines whether to allow labels from the reserved range
 to be added to the label stack. Possible values are 1 and 0.
 Set to 1 to allow labels from the reserved range to be
 added to the label stack for various diagnostic purposes.
 The default value is 0.
 -pad_mode
 Sets the value of the Pad TLV; can be omitted. Possible
 values are described below:
 NO_PAD_TLV Transmit without Pad TLV
 REQUEST_DROP_PAD_TLV Request peer to drop Pad TLV
 TLVREQUEST_COPY_PAD_TLV Request peer to copy Pad TLV

 The default value is no_pad_tlv.
 -pad_data
 Pad data. The default value is none.
Arguments Unsupported by Save as HLTAPI:
 The sth::emulation_mpls_tp_config function is not currently supported by Save as
 HLTAPI. To test with this function, you must configure it manually in the script
 generated using Save to HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 sth::emulation_mpls_tp_config
 status $SUCCESS | $FAILURE
 handle.traffic <traffic handle>
 handle.vpn <vpn group handle>
 handle.vpnsite <vpn site info handle>
 handle.host <host handle>
 handle.router <router handle>
 handle.s-pe <s-pe router handle>
 handle.t-pe <t-pe router handle>
 handle.pe <pe router handle>
 handle.p <p router handle>
 handle.ospf <ospf router handle>
 handle.isis <isis router handle>
 handle.ldp <ldp router handle>
 handle.rsvp <rsvp router handle>
 handle.bgp <bgp router handle>
 handle.lsp-ping <lsp-ping handle>
Description:
 The sth::emulation_mpls_tp_config function creates or deletes the specified
 configurations for an MPLS-TP emulation. Use the -mode argument to specify
 the action to perform. (See the -mode argument description for information 
MPLS-TP Functions
568
 about the actions.)
 To setup an emulated MPLS-TP VPN, you must specify the mode create and the
 -ports function of the sth::emulation_mpls_tp_config function.
 To enable LSP Ping in the emulated VPN, you must set either
 -enable_vpn_to_dut_tunnel_lsp_ping or -enable_core_tunnel_lsp_ping to true
 and configure the function with the -vpn_to_dut_tunnel_lsp_ping_config or
 -core_tunnel_lsp_ping_config function respectively.

Examples:
 The following example configures the core port:
 set cmdReturn [sth::emulation_mpls_tp_port_config -type core \
 -port_handle port1 \
 -dut_ipv4_addr "10.1.1.1"\
 -dut_ipv4_addr_step "0.0.1.0"\
 -ipv4_prefix 24\]
 set cmdReturn [keylget cmdReturn handle]
 Output:
 {handle {-port_handle port2 -type cust -subif 1
 -subif_count 1 -vlan_id 100 -vlan_id_step 10}} {status 1}

 The following example configures the customer port:
 set cmdReturn [sth::emulation_mpls_tp_port_config
 -type cust \
 -port_handle port2 \
 -subif "1" \
 -subif_count 2 \
 -vlan_id 100 \
 -vlan_id_step 10]
 set mpls_tp_port2 [keylget cmdReturn handle]
 Output:
 {handle {-port_handle port2 -type cust -subif 1 -subif_count 1
 -vlan_id 100 -vlan_id_step 10}} {status 1}

 The following example configures the Core side LSP Ping:
 set core_lsp_ping [list -dst_addr 100.0.0.1\
 -ping_interval 150\
 -ping_timeout 50\
 -time_to_live 25\
 -experimental_bits 1\
 -validate_fec_stack 1\
 -enable_nil_fec_label 1\
 -pad_mode request_drop_pad_tlv\
 -pad_data 0102]
 The following example configures VPN side LSP Ping:
 set vpn_lsp_ping [list -dst_addr 100.0.0.1\
 -ping_interval 150\
 -ping_timeout 50\
 -time_to_live 25\
 -experimental_bits 1\
 -validate_fec_stack 1\
 -enable_nil_fec_label 1\
 -pad_mode request_drop_pad_tlv\
 -pad_data 0102]
 The following example configures MPLS-TP:
 set cmdReturn [sth::emulation_mpls_tp_config
 -mode create \
 -ports [list $mpls_tp_port1 $mpls_tp_port2]\
 -dut_loopback_ip_addr 1.1.1.4\
 -core_igp_protocol ospf\
 -core_mpls_protocol ldp\
 -core_p_loopback_ip_addr 99.1.1.1\
 -core_p_loopback_ip_addr_step 0.0.0.0\
 -core_pe_loopback_ip_addr 100.1.1.1\
MPLS-TP Functions
569
 -core_pe_loopback_ip_addr_step 0.0.0.0\
 -cust_hosts_per_ce 1\
 -vc_count 1\
 -core_p_topology_type tree\
 -route_distinguisher_assignment use_rt\
 -route_target 1:0\
 -stream_block_group_method aggregate\
 -traffic_flow core_to_customer\
 -enable_core_tunnel_lsp_ping 1\
 -core_tunnel_lsp_ping_config $core_lsp_ping\
 -enable_vpn_to_dut_tunnel_lsp_ping 1\
 -vpn_to_dut_tunnel_lsp_ping_config $vpn_lsp_ping\]
 set mplsTpHandle [keylget cmdReturn handle]
 set routerlist [keylget cmdReturn handle.router]
 set hostlist [keylget cmdReturn handle.host]
 set stream_id [keylget mplsTpHandle traffic]
 Output:
 {handle {{vpn {vpnidgroup1 vpnidgroup2 vpnidgroup3 vpnidgroup4 vpnidgroup5
 vpnidgroup6 vpnidgroup7 vpnidgroup8 vpnidgroup9 vpnidgroup10}}
 {vpnsite {vpnsiteinfovplsldp1 vpnsiteinfovplsldp2 vpnsiteinfovplsldp3
 vpnsiteinfovplsldp4 vpnsiteinfovplsldp5 vpnsiteinfovplsldp6
 vpnsiteinfovplsldp7 vpnsiteinfovplsldp8 vpnsiteinfovplsldp9
 vpnsiteinfovplsldp10 vpnsiteinfovplsldp11}} {host
 {host5 host6 host7 host8 host9 host10 host11 host12 host13 host14 host15}}
 {router {router1 router2}} {s-pe {}} {t-pe {}} {pe router2} {p router1}
 {ospf {{} {}}} {isis {{} {}}} {ldp {{} ldprouterconfig1}}
 {rsvp {rsvprouterconfig1 {}}} {bgp {{} {}}} {lsp-ping {{} {}}}
 {traffic {streamblock1 streamblock2}}}} {status 1}
 The following example starts MPLS-TP:
 set cmdReturn [sth::emulation_mpls_tp_control -handle $mplsTpHandle\
 -action start]
 The following example starts traffic:
 set cmdReturn [sth::traffic_control -mode start \
 -port_handle port1 \]
Sample Input: See Examples.
Sample Output: See Examples
Notes: None
End of Procedure Header
sth::emulation_mpls_tp_port_config
Name:
 sth::emulation_mpls_tp_port_config
Purpose:
 Spirent Extension (for Spirent HLTAPI only).
 Creates the port on which the MPLS-TP emulation is performed.
Synopsis
 sth::emulation_mpls_tp_port_config
 -port_handle <handle>
 -type {cust | core}
 [-dut_ipv4_addr <a.b.c.d>]
 [-dut_ipv4_addr_step <a.b.c.d>]
 [-ipv4_prefix <0 - 32>]
 [-subif { 0 | 1 }]
 [-subif_count <1 - 10>]
 [-vlan_id <1 - 4095>] 
MPLS-TP Functions
570
 [-vlan_id_step <1 - 4095>]
Arguments
 -type
 Defines the type of port. Possible values are cust and core.
 This argument is mandatory.
 cust - Customer side router
 core - Core router
 -port_handle
 Defines the handle of the port on which the MPLS-TP emulation
 is performed. This argument is mandatory.

 -dut_ipv4_addr
 Defines the starting IP address of the DUT. Input value must be
 in the IPv4 format. The default value is 0.0.0.0.

 This argument is available when -type is set to core.
 -dut_ipv4_addr_step
 Defines the increment value for subsequent DUT addresses.
 Input value must be in the IPv4 format. The default value
 is 0.0.1.0. This argument is available when -type is set to core.

 -ipv4_prefix
 Specifies the IPv4 address prefix length for the created
 device. Possible values range from 0 to 32. The default is 24.
 This argument is available when -type is set to core.

 -subif
 Enables or disables VLANs. Possible values are 1 (enabled)
 and 0 (disabled). The default value is 0.

 -subif_count
 Defines the number of VLANs. Possible values range from 1 to
 10. The default value is 1.

 -vlan_id
 Defines the first VLAN ID for a range of customer VLANs.
 Possible values range from 1 to 4095. The default value is 1.

 -vlan_id_step
 Defines the step value by which VLAN ID is incremented.
 Possible values range from 1 to 4095. The default value is 1.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 -------------
 keyed list:
 status $SUCCESS | $FAILURE
 log Error message if command returns {status 0}
 handle <handle>

Description:
 The sth::emulation_mpls_tp_port_config function creates an emulated MPLS-TP
 port (for either customer side or provider side) on which the MPLS-TP
 emulation is configured. Use the -type argument to specify the type of the
 port, and use the -port_handle argument to specify the port to be added.
 You can use -dut_ipv4_addr, -dut_ipv4_addr, and -ipv4_prefix to configure
 the DUT interface that is connected to the test port.
 Use -subif to determine whether to enable sub-interface on the DUT interface.
 -subif_count, -vlan_id, and -vlan_id_step are applicable only when
 -subif is set to true.
Examples
MPLS-TP Functions
571
 The following example configures MPLS-TP Core Port configuration:
 set cmdReturn [sth::emulation_mpls_tp_port_config
 -type core \
 -port_handle port1 \
 -dut_ipv4_addr "10.1.1.1"\
 -dut_ipv4_addr_step "0.0.1.0"\
 -ipv4_prefix 24\]

 set mpls_tp_port1 [keylget cmdReturn handle]

 The following example configures MPLS-TP Customer Port configuration:
 set cmdReturn [sth::emulation_mpls_tp_port_config
 -type cust \
 -port_handle port2 \
 -subif "1" \
 -subif_count 2 \
 -vlan_id 100 \
 -vlan_id_step 10]

 set mpls_tp_port2 [keylget cmdReturn handle]

Sample Input: See Examples.
Sample Output: See Examples
Notes: None
End of Procedure Header
sth::emulation_mpls_tp_control
Name:
 sth::emulation_mpls_tp_control

Purpose:
 Spirent Extension (for Spirent HLTAPI only).
 Starts or stops an MPLS-TP emulation.
Synopsis
 sth::emulation_mpls_tp_control
 [-handle <handle>]
 [-action {start | stop | start_lsp_ping | stop_lsp_ping}]
Arguments:
 -handle
 The MPLS-TP handle returned by sth:: emulation_mpls_tp_config.
 -action
 The action to be performed. Possible values are stop, start,
 start_lsp-ping and stop_lsp_ping. The default value is start.
 The values are described below:
 start - Starts the MPLS-TP emulation.

 stop -Stops the MPLS-TP emulation.

 start_lsp_ping - Starts LSP Ping.

 stop_lsp_ping - Stops LSP Ping.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status $SUCCESS | $FAILURE
MPLS-TP Functions
572
 log Error message if command returns {status 0}
Description:
 The function controls the MPLS-TP emulation configured on the specified
 port. With the -handle value returned by the sth::emulation_mpls_tp_config
 function, you can use this function to start or stop the MPLS-TP VPN
 topology. You can also start or stop LSP Ping in the MPLS-TP VPN. (See
 sth:: emulation_mpls_tp_config for more information.)
Examples
 This example starts the configured MPLS-TP emulation:
 set cmdReturn [sth::emulation_mpls_tp_control -handle $mplsTpHandle\
 -action start]
 This example stops the configured MPLS-TP emulation:
 set cmdReturn [sth::emulation_mpls_tp_control -handle $mplsTpHandle\
 -action stop]

 This example starts LSP Ping:
 set cmdReturn [sth::emulation_mpls_tp_control -handle $mplsTpHandle\
 -action start_lsp_ping]

 This example stops LSP Ping:
 set cmdReturn [sth::emulation_mpls_tp_control -handle $mplsTpHandle\
 -action stop_lsp_ping]

Sample Input: See Examples.

Sample Output: {status 1}
Notes: None
End of Procedure Header
sth::emulation_lsp_ping_info
Name:
 sth::emulation_lsp_ping_info
Purpose:
 Spirent Extension (for Spirent HLTAPI only).
 Gets information about LSPPing in MPLS-TP emulation.
Synopsis
 sth::emulation_lsp_ping_info
 -mode {aggregate | ping}
 -port_handle <handle>

Arguments:
 -mode
 Specifies the mode to get the LSP Ping results. Possible
 values are aggregate and ping. The default value is
 aggregate. This argument is mandatory.
 aggregate - Gets all LSP Ping statistics per router.

 ping - Gets LSP Ping statistics associated with each Ping.

 -port_handle
 Specifies the port on which LSP Ping is performed to get
 information. This argument is mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status $SUCCESS | $FAILURE
MPLS-TP Functions
573
 log Error message if command returns {status 0}

 These statistics are returned for the aggregate mode:
 --------
 port_handle
 device_handle
 lsp_ping_down_count
 lsp_ping_up_count
 rx_echo_reply_count
 rx_echo_request_count
 tx_echo_reply_count
 tx_echo_request_count

 These statistics are returned for the ping mode:
 --------
 port_handle
 device_handle
 avg_ping_latency
 fail_count
 lsp_fec_info
 lsp_path_down
 lsp_path_up
 max_ping_latency
 min_ping_latency
 rx_return_code
 state
 success_count

Description:
 The sth::emulation_lsp_ping_info function provides Ping information in the
 emulated MPLS-TP VPN. See the examples in sth:: emulation_mpls_tp_config
 for more information on LSP Ping configurations.

 This function returns the requested data and a status value ($SUCCESS or
 $FAILURE). If there is an error, the function returns the status value
 $FAILURE and an error message. Function return values are formatted as a
 keyed list (supported by the Tcl extension software - TclX). Use the TclX
 function keylget to retrieve data from the keyed list. (See Return Values)
Examples
 This example gets aggregate LSP Ping information:
 set cmdReturn [sth::emulation_lsp_ping_info -port_handle [list port1 port2]\
 -mode aggregate\
 ]
 set portHandle [kelget cmdReturn 1.port_handle]
 set deviceHandle [kelget cmdReturn 1.device_handle]
 set lspPingUpCount [kelget cmdReturn 1.lsp_ping_up_count]
 set txEchoReply_count [keylget cmdReturn 1.tx_echo_reply_count]
 set portHandle [kelget cmdReturn 2.port_handle]
 set deviceHandle [kelget cmdReturn 2.device_handle]
 set lspPingUpCount [kelget cmdReturn 2.lsp_ping_up_count]
 set txEchoReply_count [keylget cmdReturn 2.tx_echo_reply_count]

 This example gets ping LSP Ping information:
 set cmdReturn [sth::emulation_lsp_ping_info -port_handle [list port1 port2]\
 -mode ping\
 ]
 set state [keylget cmdReturn 1.state]
 set lspDownCount [keylget cmdReturn 1.lsp_path_down]
 set lspFecInfo [keylget cmdReturn 1. lsp_fec_info]
 set state [keylget cmdReturn 2.state]
 set lspDownCount [keylget cmdReturn 2.lsp_path_down]
 set lspFecInfo [keylget cmdReturn 2. lsp_fec_info]

Sample Input: See Examples.

Sample Output: See Examples.
Notes: None
End of Procedure Header
MPLS VPN Functions
574
MPLS VPN Functions
Functions:
sth::emulation_mpls_l2vpn_pe_config
sth::emulation_mpls_l2vpn_site_config
sth::emulation_mpls_l3vpn_pe_config
sth::emulation_mpls_l3vpn_site_config
sth::emulation_mpls_l2vpn_pe_config
Name:
 sth::emulation_mpls_l2vpn_pe_config
Purpose:
 Enables or disables a Provider-Edge Router in an Multiprotocol Label
 Switching (MPLS) Layer2 Virtual Private Network (VPN) network
 topology on a Spirent HLTAPI chassis.
 MPLS Layer2 VPN network is a set of sites
 that are allowed to communicate with each other privately over the
 MPLS-based public infrastructure or Internet. The sites within the VPN
 are distinguished using Layer2 Encapsulation of their packets by the
 network devices.
 MPLS Layer2 VPN network uses extended Virtual Circuit (VC) Label
 Switched Path (LSP) of Label Distribution Protocol (LDP) or BGP
 signaling in MPLS architecture to exchange Layer2 switching information
 of VPN sites among service provider network.
 The different parts of MPLS L2 VPN are described as:

 Provider (P) router ---- Router in the core of the provider network. P
 routers run MPLS switching, and do not attach VPN labels
 (assigned by PE routers) to routed packets between VPN sites.
 Provider-Edge (PE) router ---- Edge router of the MPLS network that
 attaches the VPN label to the incoming packets based on the
 interface or sub-interface on which they are received. A PE router
 directly attaches to a Customer Edge (CE) device. VPN labels are
 used to direct data packets to the correct egress router of MLPS
 network.
 Customer Edge (CE) device ---- Edge device on the network of VPN site
 that connects to the PE router on the ISP network. A CE must
 interface with a PE router.
 Spirent HLTAPI supports different types of MPLS L2 VPN below:
 Ethernet over MPLS (EoMPLS or Martini Traffic)
 ---- Point-to-Point connection of Ethernet VPN over MPLS
 network.
 LDP-Virtual Private LAN Services (VPLS)
 ---- LDP signaled multipoint-to-multipoint Ethernet VPN
 over MPLS network.
 BGP- Virtual Private LAN Services(VPLS)
 ---- BGP signaled multipoint-to-multipoint Ethernet VPN
 over MPLS network.
 Spirent HLTAPI also supports MPLS over GRE for MPLS Layer2 VPN.
Synopsis:
 sth::emulation_mpls_l2vpn_pe_config
MPLS VPN Functions
575
 -mode { enable | disable }
 [-enable_p_router {1 | 0 }]
 [-handle { pe_handle }]
 [-igp_session_handle <igp_session_handle>]
 [-mpls_session_handle <mpls_session_handle>]
 [-pe_count < integer>]
 [-port_handle <port_handle>]
 [-targeted_ldp_session_handle <targeted_ldp_session_handle>]
 [-tunnel_handle <gre_tunnel_handle>]
 [-vpls_bgp_session_handle <bgp_signal_session_handle>]
 [-vpn_type { martini_pwe | ldp_vpls | bgp_vpls }]
Arguments:

 -mode
 Specifies the action to perform. Possible values are
 enable and disable. This argument is mandatory. The
 modes are described below:
 enable - Enables one or more PE routers. You must
 also specify some of the switches below:
 -vpn_type
 -port_handle
 -igp_session_handle
 -targeted_ldp_session_handle
 -vpls_bgp_session_handle
 -mpls_session_handle
 -tunnel_handle

 The selections you make in the -vpn_type option
 determine which arguments you must specify..
 disable - Disables one or more PE routers. You must
 specify the -handle argument.

 This switch has no default value.
 -enable_p_router
 Specifies whether the Provider router, which the
 configured PE attaches to, is emulated or not. Possible
 values are 0 (disable) and 1 (enable). When it is set to
 0, no P router would be emulated. When it is set to 1,
 depending on the attendance of -tunnel, different
 processes would be done:
 When the -tunnel_handle argument is specified: as in
 this case, -mpls_session_handle would be ignored, the
 -igp_session_handle would be treated as working
 on P router, and GRE tunnel interface -tunnel_handle
 would be treated on P router too.
 When the -tunnel_handle argument is not specified: the
 -igp_session_handle and -mpls_session_handle are
 both treated working on P router.
 When you enable multiple PEs by using this command
 once, only one P router will be emulated and all
 enabled PEs will attach to the P router.
 The default value is 0.
 -handle
 Specifies the PE handle enabled by this command. This
 is required by -mode disable. This switch has no default
 value.
 -igp_session_handle
 Specifies the IGP Protocol session connecting to the
 SUT to advertise routing information of the emulated
 PE. Input handle value is created and returned by
MPLS VPN Functions
576
 relevant protocol commands of Spirent HLTAPI.
 When you enable multiple PE routers, input IGP
 session handle number based on the value of
 -enable_p_router. If -enable_p_router is set to 0, input
 IGP session handle number must equal to -pe_count. If
 -enable_p_router set to 1, only one IGP session handle
 is required to emulated IGP protocol session on one P
 router.
 The IGP session should be controlled (started or
 stopped) and fetched information from by using
 relevant protocol's Spirent HLTAPI commands. For
 example, if the IGP session is OSPF, it can be created,
 modified and deleted by the
 sth::emulation_ospf_config command, and
 can be controlled by the
 sth::emulation_ospf_control command, can be fetched
 information from when you use
 the sth::emulation_ospf_info command.
 This switch has no default value.
 -mpls_session_handle
 Specifies the MPLS session of the MPLS core network
 connecting to the SUT. The inputted handle is created
 and returned by relevant MPLS protocol commands in
 Spirent HLTAPI. If -tunnel_handle is specified, this
 switch will be ignored, and MPLS over GRE topology
 will be emulated. This switch is available, when the
 -tunnel_handle option is not specified, each input pair
 of MPLS session and IGP session should be created on
 the same emulated device.
 When you enable multiple PEs by using this command
 once , the number of inputted MPLS session handles
 depends on the value of -enable_p_router:
 If -enable_p_router is set to 0, input MPLS session
 handle number must equal to the value of -pe_count.
 If -enable_p_router is set to 1, only one MPLS session
 handle is needed to emulate IGP protocol session on
 one P router.
 The input MPLS session should be controlled (started
 or stopped) and fetched information from by using
 relevant protocol's Spirent HLTAPI commands. For
 example, if the MPLS session is LDP, it can be created,
 modified and deleted by the
 sth::emulation_ldp_config function, can be controlled
 by the sth::emulation_ldp_control function, can be
 fetched information from using the
 sth::emulation_ldp_info command.
 This switch has no default value.
 -pe_count
 Specifies the number of PEs to be enabled at one time.
 The default value is 1. Possible values range from 0 to
 <max_int>.
 -port_handle
 Specifies the handle of the port on which the
 PE router is enabled. This argument is required only by
 the enable mode.
 -targeted_ldp_session_handle
 Specifies the Targeted LDP session connecting to the
 peer PE, which establishes the VC (or Pseudo Wire)
 LSP and assigns VPN labels. The inputted 
MPLS VPN Functions
577
 handle is created and returned by
 sth::emulation_ldp_config, the LDP command of
 Spirent HLTAPI. When you enable multiple PEs at
 once, the number of inputted handles must be equal to
 the value of the -pe_handle option.
 When the -tunnel_handle switch is specified to emulate
 the MPLS over GRE topology, each pair of IGP session
 and Targeted LDP session (or BGP session for VPN)
 emulating one PE router should be created on the same
 emulated devices.
 The MPLS session should be configured to advertise
 LDP prefix LSP with implicit null label when
 emulating MPLS over GRE topology.
 The specified Targeted LDP session should be
 controlled (started or stopped) and be fetched
 information from by using LDP protocol's Spirent
 HLTAPI commands. For example, it can be created,
 modified and deleted if you specify the
 sth::emulation_ldp_config function, can be controlled
 by the sth::emulation_ldp_control command, and can
 be fetched information from if you use the
 sth::emulation_ldp_info command.
 This switch is required when -vpn_type set to
 martini_pwe or ldp_vpls.
 This switch has no default value.
 -tunnel_handle
 Specifies the GRE tunnel interface connecting to the
 none-MPLS provider network of the SUT. The inputted
 handle is created and returned by
 sth::emulation_gre_config that is a relevant GRE
 command of Spirent HLTAPI. When this switch is
 attended, MPLS over GRE topology will be emulated,
 and the -mpls_session_handle option is ignored.
 When this switch is specified, each inputted pair of IGP
 session and Targeted LDP session (or BGP session for
 VPN) emulating the same PE router should be created
 on same emulated devices.
 -vpls_bgp_session_handle
 Specifies the BGP session connecting to the peer PE,
 which establishes VPN LSP and assigns VPN labels.
 The inputted handle is created and returned by
 sth::emulation_bgp_config that is a BGP protocol
 command of Spirent HLTAPI. When you enable
 multiple PEs at one time, the number of input handles
 must be equal to the value of the -pe_handle argument.
 When the -tunnel_handle switch is specified to emulate
 MPLS over GRE topology, each inputted pair of IGP
 session and Targeted LDP session (or BGP session for
 VPN) emulating one PE router should be created on
 the same emulated devices.
 The specified BGP session should be controlled (started
 or stopped) and be fetched information from by using
 BGP protocol's Spirent HLTAPI commands. For
 example, it can be created, modified and deleted using
 the sth::emulation_bgp_config function, can be
 controlled by using the sth::emulation_bgp_control
 command, and can be fetched information from by
 using the sth::emulation_bgp_info command.
 This argument must be specified when
 -vpn_type is set to bgp_vpls.
MPLS VPN Functions
578

 -vpn_type
 Specifies the type of L2 VPN network topology, in
 which the PE router works. Possible values are
 martini_pwe, ldp_vpls, and bgp_vpls.

 martini_pwe - Indicates the Pseudo-Wire Emulation
 Edge-to-Edge (PWE3) network or the Ethernet
 over MPLS VPN, both of which use Martini
 style network topologies.
 ldp_vpls - Indicates the type of L2 VPN network
 topology is LDP signaled Virtual Private LAN
 Services (VPLS) network that uses the LDP
 protocol to assign VPN labels.
 bgp_vpls - Indicates that the type of L2 VPN network
 topology is BGP signaled Virtual Private LAN
 Services (VPLS) network that uses the BGP
 protocol to assign VPN labels.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -tunnel_handle
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The handle that identifies the PE handle enabled by the
 sth::emulation_mpls_l2vpn_pe_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mpls_l2vpn_pe_config function enables, disables the
 specified MPLS L2VPN PE router. Use the -mode argument to specify the
 action to perform. (See the -mode argument description for information
 about the actions.)
 To enable a PE router, you must specify -mode enable and the
 -port_handle argument of the sth::emulation_mpls_l2vpn_pe_config
 function. The specified -port_handle argument indicate the Spirent
 HLTAPI port that the emulation will use. (The port handle value is
 contained in the keyed list returned by the connect function.)
Examples:
 #### HLTAPI for Tcl ####
 The following example enables an L2VPN PE on a port:
 There must already exist a port with the handle of port_handle1, a targeted
 LDP session with the handle of ldp_handle1, and an OSPF session with
 the handle of ospf_handle1 and a GRE handle gre_handle1.
 sth::emulation_mpls_l2vpn_pe_config \
 -mode enable \
 -port_handle port_handle1 \
 -vpn_type martini_pwe \
 -targeted_ldp_session_handle ldp_handle1 \
 -igp_session_handle ospf_handle1 \
 -tunnel_handle greTunnel1 \
 -pe_count 1
 The following example disables an L2VPN PE on a port:
 sth::emulation_mpls_l2vpn_pe_config \
MPLS VPN Functions
579
 -mode disable \
 -handle $peHandle1
Sample Output:
 Success: {status 1} {handle pe_handle1}
 Failure: {status 0} {log XXX}
 #### HLTAPI for Python ####
 The following example enables an L2VPN PE on a port:
 There must already exist a port with the handle of port_handle[1], a targeted
 LDP session with the handle of targeted_ldp_session_handle, and an MPLS session with
 the handle of mpls_session_handle and an IGP session handle igp_session_handle.
 pe_router = sth.emulation_mpls_l2vpn_pe_config (
 vpn_type = 'ldp_vpls',
 mode = 'enable',
 port_handle = port_handle[1],
 pe_count = '1',
 targeted_ldp_session_handle = targeted_ldp_session_handle,
 mpls_session_handle = mpls_session_handle,
 igp_session_handle = igp_session_handle);

Sample Output: {'status': '1', 'handle': 'router2'}
 #### HLTAPI for Perl ####
 There must already exist a port with the handle of port_handle[1], a targeted
 LDP session with the handle of targeted_ldp_session_handle, and an MPLS session
 with the handle of mpls_session_handle and an IGP session handle
 igp_session_handle.
 my %pe_router = sth::emulation_mpls_l2vpn_pe_config (
 vpn_type => 'ldp_vpls',
 mode => 'enable',
 port_handle => "$hport[2]",
 pe_count => '1',
 targeted_ldp_session_handle => "$targeted_ldp_session_handle",
 mpls_session_handle => "$mpls_session_handle",
 igp_session_handle => "$igp_session_handle");

Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router2';
 $VAR3 = 'status';
 $VAR4 = '1';

Notes: None
End of Procedure Header
sth::emulation_mpls_l2vpn_site_config
Name:
 sth::emulation_mpls_l2vpn_site_config
Purpose:
 Creates, modifies or deletes a Customer Site of an MPLS Layer2 VPN
 network topology on a Spirent HLTAPI chassis. The configured Customer
 Site may attach to the SUT (through CE device or not) or attach to an
 emulated PE router enabled by the
 sth::emulation_mpls_l2vpn_pe_config command.
MPLS VPN Functions
580
Synopsis:
 sth::emulation_mpls_l2vpn_site_config
 -mode create -port_handle <port_handle> |
 -mode {modify | delete} -handle <site_handle>
 [-mac_addr <aa:bb:cc:dd:ee:ff >]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff >]
 [-mac_addr_count < integer>]
 [-pe_handle <pe_handle>]
 [-pe_loopback_ip_addr <a.b.c.d>]
 [-pe_loopback_ip_step <a.b.c.d>]
 [-pe_loopback_ip_prefix <0 - 32 >]
 [-rd_start <admin:assigned>]
 [-rd_step <admin:assigned>]
 [-site_count <integer >]
 [-vc_type { 4 | 5 | b}]
 [-vc_id <0 - 4294967295 >]
 [-vc_id_step <0 - 4294967295 >]
 [-vc_id_count <0 - 4294967295 >]
 [-ve_id <0 - 4294967295 >]
 [-ve_id_step <0 - 4294967295 >]
 [-vpn_block_count <1 - 4294967295 >]
 [-vpn_id <1 - 4294967295>]
 [-vpn_id_step < 1 - 4294967295 >]
 [-vlan_id <1 - 4095>]
 [-vlan_id_step <0 - 4095>]
 [-vlan_id_count <1 - 4095>]
 [-vlan_id_outer <1 - 4095>]
 [-vlan_id_outer_step <0 - 4095>]
 [-vlan_id_outer_count <1 - 4095>]
 [-vpn_type { martini_pwe | ldp_vpls | bgp_vpls }]
Arguments:
 -mode
 Specifies the action to perform. Possible values are
 create, modify, and delete. This argument is mandatory.
 The modes are described below:
 create - Creates one or more VPN customer site(s).You
 must specify -port_handle. Besides, when you set
 the -vpn_type argument to a type, you must
 specify the options required by the certain VPN
 type.
 modify - Modifies the configuration of one VPN
 customer site. You must specify the -handle
 argument when you set the -mode option to
 modify.
 delete - Deletes one or more VPN customer site(s). You
 must input -handle when you set the -mode
 argument to delete.
 -port_handle
 Specifies the handle of the port on which to create the
 VPN customer site. This argument is mandatory only
 for the create mode.
 -handle
 Specifies the VPN customer site handle created by this
 command. This is required by -mode modify and
 delete.
 -mac_addr
 Specifies the starting MAC address in the address pool
 of VPN sites. This switch has no default value.
 If this argument is not specified, Spirent HLTAPI will
 automatically configure a MAC Address using the
 template of 00:94:01:xx:xx:xx. The value of this
 argument should be in MAC address format. 
MPLS VPN Functions
581
 -mac_addr_step
 Specifies the step value of MAC address when you use
 multiple MAC address with in one VPN site or creating
 multiple VPN site one time. The default value is
 00:00:00:00:00:01.
 -mac_addr_count
 Specifies the number of MAC addresses in the address
 pool within each VPN site. Possible values range from
 1 to <max_int>. The default value is 1.
 -pe_handle
 Specifies the PE router handle which the configured
 VPN customer sites attach to. The specified handle is
 enabled and returned by the
 sth::emulation_mpls_l2vpn_pe_config function. If
 you specify this switch, the configured VPN sites will
 be treated as the sites attach to the emulated PE router
 specified by the -handle argument on Spirent HLTAPI
 test port; If not, the configured VPN sites will be
 treated as those directly attach to the SUT which works
 as the PE for the VPN site.
 -pe_loopback_ip_addr
 Specifies the loopback IP address of the PE router that
 the configured VPN sites attach to. This option must
 be specified when the -pe_handle argument is not
 attended. The default value is 10.1.1.1. The value of
 this argument must be in the IPv4 format.
 -pe_loopback_ip_prefix
 Specifies the loopback IP address prefix length of the
 PE router that the configured VPN sites attach to.
 Possible values range from 0 to 32.The default value is
 32.
 -pe_loopback_ip_step
 Specifies the step value of loopback IP address of the
 PE router that the configured VPN sites attach to when
 creating multiple VPN sites. The default value is
 0.0.0.0. The value of this argument must be in the
 format of IPv4.
 -rd_start
 Specifies the Route Distinguisher of VPN route for the
 VPN site. There are two types of Route Distinguisher
 (RD) value:
 If you use Type 0: The administrator sub-field is a 2
 byte AS number and the assigned sub-field is a 4
 byte number assigned by the service provider.
 The format must be "n:n (admin:assigned)"
 If you use Type 1: The administrator sub-field is a
 4-byte IPv4 address and assigned sub-field is a 2
 byte number assigned by the service provider.
 The format must be "n.n.n.n:n (admin:assigned)".
 This switch is available when the -vpn_type switch is
 set to bgp_vpls. The default value is 0:0.
 -rd_step
 Specifies the step value of Route Distinguisher of VPN
 route for the VPN site. The format must be
 "admin:assigned". This switch is applicable only when
 the -vpn_type switch is set to bgp_vpls. The default
 value is 0:0.
 -site_count
 Specifies the number of VPN sites to create one time.
 The default value is 1. Possible values range from 0 to
MPLS VPN Functions
582
 <max_int>.
 -vc_type
 Specifies the type of the Virtual Circuit (VC) LSP that
 the VPN site uses in the provider network for VPN
 packer routing. This switch is applicable only when the
 value of the -vpn_type argument is set to martini_pwe
 or ldp_vpls. The default value is 5. Possible values are:
 4- Remote sites are connected through Ethernet VLAN
 VC.
 5- Remote sites are connected through Ethernet VC.
 B- Remote sites are connected through Ethernet VPLS
 VC.
 -vc_id
 Specifies the starting ID of the VC LSP that the VPN
 site used in provider network for VPN packer routing.
 This switch is available when the value of the
 -vpn_type option is set to martini_pwe or ldp_vpls.
 Possible values range from 0 to 4294967295. The
 default value is 1.
 -vc_id_step
 Specifies the step value of the ID of VC LSP that the
 VPN site uses in the provider network
 for VPN packer routing, when one VPN site uses
 multiple VC or multiple VPN sites are created at one
 time. This switch is available when the value of the
 -vpn_type option is martini_pwe or ldp_vpls. Possible
 values range from 0 to 4294967295. The default value
 is 1.
 -vc_id_count
 Specifies the number of the VC LSPs that the VPN site
 uses in the provider network for VPN packer routing,
 when one VPN site uses multiple VC. This switch is
 available when the value of -vpn_type is set to
 martini_pwe or ldp_vpls. Possible values range from 1
 to 4294967295. The default value is 1.
 -ve_id
 Specifies the starting value of VPLS Edge (VE )
 Identifier for the local PE or represented u-PE(s). In
 Spirent HLTAPI the VE identifier represents an
 emulated endpoint (can be either a PE or a u-PE) that is
 being advertised by the BGP speaker (DUT). This
 switch is available when the -vpn_type switch is set to
 bgp_vpls. Possible values range from 0 to 65535. The
 default value is 1.
 -ve_id_step
 Specifies the step value of the VE Identifier for the
 local PE or represented u-PE(s). In Spirent HLTAPI the
 VE identifier represents an emulated endpoint (can be
 either a PE or a u-PE) that is being advertised by the
 BGP speaker (DUT). Possible values range from 0 to
 65535. This switch is available when the -vpn_type
 switch is set to bgp_vpls. The default value is 1.
 -vlan_id
 Specifies the starting value of the VLAN ID for the
 VPN site. Possible values range from 1 to 4095. This
 switch has no default value. If it is specified, Spirent
 HLTAPI will add VLAN interface to configured VPN
 site; if not, no VLAN interface will be on the VPN site.
 -vlan_id_step
 Specifies the step value of VLAN ID for the VPN site
MPLS VPN Functions
583
 when you create multiple VPN sites or there are
 multiple VLAN interfaces within one VPN site.
 Possible values range from 0 to 4095. The default value
 is 0. This switch is available when -vlan_id is inputted.
 -vlan_id_count
 Specifies the number of VLAN interfaces for the VPN
 site within one VPN site. Possible values range from 1
 to 4095. The default value is 1. This switch is available
 when -vlan_id is inputted.
 -vlan_id_outer
 Specifies the first value of the outer VLAN interface
 IDs for the VPN site, when you use Q-in-Q
 encapsulation on VPN site. Possible values range from
 0 to 4095. This switch has no default value. If it is
 specified, Spirent HLTAPI will add Q-in-Q VLAN
 interface to configured VPN site; If not, no Q-in-Q
 VLAN interface will be on the VPN site.
 -vlan_id_outer_step
 Specifies the step value of the outer VLAN ID for the
 VPN site when you create multiple VPN sites with
 Q-in-Q encapsulation or there are multiple Q-in-Q
 VLAN interfaces within one VPN site. Possible values
 range from 0 to 4095. The default value is 0. This
 switch is available when -vlan_id_outer is specified.
 -vlan_id_outer_count
 Specifies the number of outer VLAN interfaces within
 one VPN site. Possible values range from 1 to 4095.
 The default value is 1. This switch is applicable only
 when -vlan_id_outer is attended.
 -vpn_block_count
 Specifies the number of VPLS blocks to configure of
 the VPN site in the BGP signaled VPLS network. This
 switch is applicable when the -vpn_type switch is set to
 bgp_vpls. Possible values range from 1 to 4294967295.
 The default value is 1.
 -vpn_id
 Specifies the VPN ID of the VPN site. VPN ID is a
 global identifier of VPN in Spirent HLTAPI. Emulated
 customer site with the same VPN ID would be treated
 as those in the same VPN. Possible values range from
 1 to 4294967295. The default value is 1.
 -vpn_id_step
 Specifies the step value of VPN ID, when you create
 multiple VPN sites at one time. VPN ID is a global
 identifier of VPN in Spirent HLTAPI. The emulated
 customer site with the same VPN ID would be treated
 as those in the same VPN. Possible values range from
 1 to 4294967295. The default value is 1.
 -vpn_type
 Specifies the topology technology of the VPN network
 where the created VPN site is. Possible values are
 martini_pwe, ldp_vpls, and bgp_vpls.
 Specifies the type of L2 VPN network topology, in
 which the PE router works. Possible values are
 martini_pwe, ldp_vpls, and bgp_vpls.

 martini_pwe - Indicates the Pseudo-Wire Emulation
 Edge-to-Edge (PWE3) network or the Ethernet
 over MPLS VPN, both of which use Martini
 style network topologies.
 ldp_vpls - Indicates the type of L2 VPN network
MPLS VPN Functions
584
 topology is LDP signaled VPLS network that
 uses the LDP protocol to assign VPN labels.
 This is the default value.
 bgp_vpls - Indicates that the type of L2 VPN network
 topology is BGP signaled VPLS network that
 uses the BGP protocol to assign VPN labels.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -vpn_id_step
 -vc_type

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 handle The handle that identifies the VPN site handle created by the
 sth::emulation_mpls_l2vpn_site_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mpls_l2vpn_site_config function creates, modifies,
 and deletes the specified MPLS L2VPN Customer sites. Use the -mode
 argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)
 To create a VPN site, you can use create mode of the function
 sth::emulation_mpls_l2vpn_site_config along with the -port_handle to
 specify the Spirent HLTAPI port that the emulation will use. (The port
 handle value is contained in the keyed list returned by the connect
 function.)
 In addition to specifying the port, you must also provide one or more of
 the following pieces of information when you create a VPN site:
 -vpn_type
 -pe_handle
 -pe_loopback_ip_addr
 -pe_loopback_ip_prefix
Examples:
 #### HLTAPI for Tcl ####
 The following example enables an L2 VPN site on a port:

 There must already exist a port with the handle of port_handle1 and a PE
 router session with the handle of pe_handle1.
 sth::emulation_mpls_l2vpn_site_config -mode create \
 -port_handle port_handle1 \
 -pe_handle pe_handle1 \
 -pe_loopback_ip_prefix 32 \
 -site_count 5 \
 -vpn_type martini_pwe \
 -vc_id $vc_id \
 -vc_id_step $vc_step \
 -vpn_id $vpn_id \
 -vpn_id_step $vpn_step \
 -mac_addr $site_mac_addr \
 -mac_addr_count 100 \
 -mac_addr_step $site_mac_step \
 -vlan_id $vlan_id \
 -vlan_id_step 1-pe_count 5
 The following example modifies an L2 VPN site:
MPLS VPN Functions
585

 There must already exist a VPN site vpnSiteHandle1.

 sth::emulation_mpls_l2vpn_site_config -mode modify \
 -handle $vpnSiteHandle1 \
 -pe_loopback_ip_addr "1.10.1.2" \
 -pe_loopback_ip_prefix 32 \
 -vpn_type martini_pwe \
 -vc_id 1501 \
 -vpn_id 101 \
 -mac_addr 12:22:33:44:55:66 \
 -vlan_id 1700

 The following example deletes two L2VPN sites:
 sth::emulation_mpls_l2vpn_site_config\
 -mode delete \
 -handle "$vpnSiteHandle1 $vpnSiteHandle2"

Sample Output:
 Success{status 1} {handle pe_handle1}
 Failure {status 0} {log XXX}
 #### HLTAPI for Python ####
 The following example enables an L2 VPN site on a port:

 There must already exist a port with the handle of port_handle[1] and a PE
 router session with the handle of pe_handle.
 device_ret3 = sth.emulation_mpls_l2vpn_site_config (
 mode = 'create',
 pe_handle = pe_handle,
 vpn_id = '100',
 vpn_type = 'ldp_vpls',
 pe_loopback_ip_prefix = '32',
 vc_id = '1500',
 vc_id_step = '1',
 pe_loopback_ip_addr = '2.2.2.4',
 vc_id_count = '1',
 port_handle = port_handle[1],
 vlan_id = '2071',
 vlan_id_step = '0',
 vlan_id_count = '1',
 mac_addr = '00:10:94:00:00:32',
 mac_addr_step = '00:00:00:00:00:01',
 mac_addr_count = '1');
Sample Output: {'status': '1', 'handle': 'host4'}
 #### HLTAPI for Perl ####
 The following example enables an L2 VPN site on a port:

 There must already exist a port with the handle of hport[2] and a PE
 router session with the handle of pe_handle.
 my %device_ret3 = sth::emulation_mpls_l2vpn_site_config (
 mode => 'create',
 pe_handle => "$pe_handle",
 vpn_id => '100',
 vpn_type => 'ldp_vpls',
 pe_loopback_ip_prefix=> '32',
 vc_id => '1500',
 vc_id_step => '1',
 pe_loopback_ip_addr => '2.2.2.4',
 vc_id_count => '1',
 port_handle => "$hport[2]",
 vlan_id => '2071',
 vlan_id_step => '0',
 vlan_id_count => '1',
MPLS VPN Functions
586
 mac_addr => '00:10:94:00:00:32',
 mac_addr_step => '00:00:00:00:00:01',
 mac_addr_count => '1');
Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host4';
 $VAR3 = 'status';
 $VAR4 = '1';

Notes: None
End of Procedure Header
sth::emulation_mpls_l3vpn_pe_config
Name:
 sth::emulation_mpls_l3vpn_pe_config
Purpose:
 Enables or disables a Provider-Edge Router in an MPLS Layer3 VPN
 network topology on a Spirent HLTAPI chassis.
 MPLS Layer3 VPN (Virtual Private Network) network is a set of sites
 that are allowed to communicate with each other privately over the
 MPLS-based public infrastructure or Internet. The sites within the VPN
 are distinguished using Layer3 Encapsulation of their packets by the
 network devices. Spirent HLTAPI support a topology of MPLS Layer3
 VPN defined in RFC 2547.
 MPLS Layer3 VPN network uses BGP signaling in MPLS architecture to
 exchange Layer3 switching information of VPN sites among service
 provider network.
 The different parts of the MPLS VPN are described as follows:
 Provider (P) router - Router in the core of the provider network. P routers
 run MPLS switching, and do not attach VPN labels (MPLS label in each
 route assigned by the PE router) to routed packets. VPN labels are used to
 direct data packets to the correct egress router.
 PE router - Router that attaches the VPN label to incoming packets based
 on the interface or sub-interface on which they are received. A PE router
 attaches directly to a CE router.

 Customer (C) router - A router in the ISP or enterprise network.
 Customer edge (CE) router - Edge router on the network of the ISP that
 connects to the PE router on the network. A CE router must interface with
 a PE router.
 Spirent HLTAPI also supports MPLS over GRE for MPLS Layer3 VPN.
Synopsis:
 sth::emulation_mpls_l3vpn_pe_config
 -mode { enable | disable }
 [-bgp_session_handle <bgp_signal_session_handle>]
 [-enable_p_router {1 | 0 }]
 [-handle { pe_handle }]
 [-igp_session_handle <igp_session_handle>]
 [-mpls_session_handle <mpls_session_handle>]
 [-pe_count < integer>]
 [-port_handle <port_handle>]
 [-tunnel_handle <gre_tunnel_handle>]
MPLS VPN Functions
587
Arguments:
 -mode
 Specifies the action to perform. Possible values are
 enable and disable. This argument is mandatory. The
 modes are described below:
 enable - Enables one or more PE routers. You must
 input -port_handle, -igp_session_handle,
 bgp_session_handle, and -mpls_session_handle
 or -tunnel_handle, depending on whether you
 want to use MPLS over GRE.
 disable - Disables one or more PE routers. You must
 specify the -handle argument.
 -bgp_session_handle
 Specifies the BGP session connecting to the peer PE,
 which establishes VPN LSP and assigns VPN labels.
 The handle you specified is created and returned by the
 BGP protocol command (sth::emulation_bgp_config)
 of Spirent HLTAPI. When you enable multiple PEs at
 one time, the number of handles must be equal to
 the value of the PE number (-pe_handle).
 When the -tunnel_handle switch is defined to emulate
 MPLS over GRE topology, each pair of IGP session
 and BGP session that emulates one PE router for
 a VPN should be created on the same emulated devices.
 The BGP session should be controlled (started or
 stopped) and be fetched information from by using
 Spirent HLTAPI commands of BGP protocol. For
 example, it can be created, modified, and deleted
 by the sth::emulation_bgp_config function; it can be
 controlled by the sth::emulation_bgp_control function;
 it can be fetched information from by the
 sth::emulation_bgp_info function.
 -enable_p_router
 Specifies whether the Provider router, which the
 configured PE attaches to, is emulated or not. Possible
 values are 0 (disable) and 1 (enable). When it is set to
 0, no P router would be emulated. When it is set to 1,
 which process would be done depends on whether
 the -tunnel_handle argument is specified:
 If -tunnel_handle is specified (as in this case,
 -mpls_session_handle would be ignored), the inputted
 -igp_session_handle would be treated as working on P
 router, and GRE tunnel interface (-tunnel_handle)
 would be treated on P router too.
 If -tunnel_handle is absent: The IGP session
 (-igp_session_handle) and the MPLS session
 (-mpls_session_handle) you specified are
 both treated like sessions working on P router.
 When you enable multiple PEs at once, only one P
 router is emulated and all enabled PEs will attach to
 that router.
 The default value is 0.
 -handle
 Specifies the PE handle enabled by this command. This
 is required by disable mode.
 -igp_session_handle
 Specifies the IGP Protocol session connecting to the
 SUT to advertise routing information of the emulated
 PE. The inputted handle value is created and
MPLS VPN Functions
588
 returned by relevant protocol commands of Spirent
 HLTAPI. When you enable multiple PE routers, input
 IGP session handle number according to the value of
 the -enable_p_router option. If the -enable_p_router
 switch is set to 0, the number of IGP sessions must be
 equal to the PE number (-pe_count). If the
 -enable_p_router option is set to 1, only one IGP
 session handle is required to emulate IGP protocol
 session on one P router.
 The IGP session should be controlled (started or
 stopped) and be fetched information from by using
 relevant protocols of Spirent HLTAPI commands. For
 example, if the IGP session is OSPF, it can be created,
 modified, and deleted by the
 sth::emulation_ospf_config function; it can be
 controlled by using the sth::emulation_ospf_control
 function; and it can be fetched information from by
 using the sth::emulation_ospf_info command.
 -mpls_session_handle
 Specifies the MPLS session of the MPLS core network
 connecting to the SUT. The Input handle is created and
 returned by relevant MPLS protocol commands of
 Spirent HLTAPI. If the -tunnel_handle is attendant, this
 switch will be ignored and MPLS over GRE topology will be
 emulated. When the -tunnel_handle option is absent,
 you can specify this switch. Each pair of MPLS session
 and IGP session should be created on the same
 emulated device.
 When you enable multiple PEs at once, the number of
 MPLS session handles will be determined by the value
 of the -enable_p_router argument:
 If the -enable_p_router option is set to 0, IGP session
 handle number must be equal to the PE number which
 is defined by the -pe_count option.
 If the -enable_p_router argument is set to 1, only one
 IGP session handle is needed to emulated IGP protocol
 session on one P router.
 The MPLS session should be controlled (started or
 stopped) and be fetched information from by using the
 Spirent HLTAPI commands of other relevant protocols.
 For example, if the MPLS session is LDP, it can be
 created, modified, and deleted by using the
 sth::emulation_ldp_config function; it can be controlled
 by specifying the sth::emulation_ldp_control function;
 it can be fetched information from by using the
 sth::emulation_ldp_info command.
 -pe_count
 Specifies the number of PEs to be enabled at one time.
 Possible values range from 0 to <max_int>. The default
 value is 1.
 -port_handle
 Specifies the handle of the port on which the PE router
 is enabled. This argument is required only by the
 enable modes.
 -tunnel_handle
 Specifies the GRE tunnel interface connecting to the
 none-MPLS provider network of the SUT. The handle
 you specified by this argument is created and returned
 by the relevant GRE commands of Spirent HLTAPI
 (such as
 sth::emulation_gre_config.). When this switch is defined, MPLS over 
MPLS VPN Functions
589
 GRE topology will be emulated, and the -mpls_session_handle option
 is ignored.
 When this switch is specified, each pair of IGP session
 and BGP session for VPN that emulates one PE router
 must be created on the same emulated devices.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent
 TestCenter configurations to HLTAPI scripts using Save as HLTAPI. To test
 with these arguments, you must specify them manually as necessary.
 -tunnel_handle
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The handle that identifies the PE handle enabled by the
 sth::emulation_mpls_l3vpn_pe_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mpls_l3vpn_pe_config function enables and disables
 the specified MPLS Layer3 VPN PE router. Use the -mode argument to specify
 the action to perform. (See the -mode argument description for
 information about the actions.)
 To enable a PE router, you can use enable mode of the function
 sth::emulation_mpls_l3vpn_pe_config function along with the
 -port_handle argument to specify the Spirent HLTAPI port that the
 emulation will use. (The port handle value is contained in the keyed list
 returned by the connect function.)
Examples:
 #### HLTAPI for Tcl ####
 The following example enables an Layer3 VPN PE on a port:
 There must be an existed port with the handle of port_handle1, a BGP
 session handle that is bgp_handle1, an OSPF session handle that is
 ospf_handle1 and a GRE handle that is gre_handle1.
 sth::emulation_mpls_l3vpn_pe_config \
 -mode enable \
 -port_handle port_handle1 \
 -bgp_session_handle bgp_handle1 \
 -igp_session_handle ospf_handle1 \
 -tunnel_handle greTunnel1 \
 -pe_count 1

 The following example disables an Layer3 VPN PE on a port:
 sth::emulation_mpls_l3vpn_pe_config \
 -mode disable \
 -handle $peHandle1
 Sample Output:
 Success: {status 1} {handle pe_handle1}
 Failure: {status 0} {log XXX}
 #### HLTAPI for Python ####
 The following example enables an Layer3 VPN PE on a port:
 There must be an existed port with the handle of port_handle[1], a BGP
 session handle that is bgp_session_handle, an MPLS session handle that is
 mpls_session_handle and a IGP session handle that is igp_session_handle.
MPLS VPN Functions
590
 pe_router = sth.emulation_mpls_l3vpn_pe_config (
 mode = 'enable',
 port_handle = port_handle[1],
 pe_count = '1',
 bgp_session_handle = bgp_session_handle,
 mpls_session_handle = mpls_session_handle,
 igp_session_handle = igp_session_handle);
Sample Output: {'status': '1', 'handle': 'emulateddevice2'}
 #### HLTAPI for Perl ####
 The following example enables an Layer3 VPN PE on a port:
 There must be an existed port with the handle of port_handle[1], a BGP
 session handle that is bgp_session_handle, an MPLS session handle that is
 mpls_session_handle and an IGP session handle that is igp_session_handle.
 my %pe_router = sth::emulation_mpls_l3vpn_pe_config (
 mode => 'enable',
 port_handle => "$hport[2]",
 pe_count => '1',
 bgp_session_handle => "$bgp_session_handle",
 mpls_session_handle => "$mpls_session_handle",
 igp_session_handle => "$igp_session_handle");
Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'handle';
 $VAR4 = 'emulateddevice2';
Notes: None
End of Procedure Header
sth::emulation_mpls_l3vpn_site_config
Name:
 sth::emulation_mpls_l3vpn_site_config
Purpose:
 Enables or disables a Customer Site in an MPLS Layer3 VPN
 network topology on a Spirent HLTAPI chassis.
Synopsis:
 sth::emulation_mpls_l3vpn_site_config
 -mode create {-port_handle <port_handle> |
 -mode {modify | delete} -handle <site_handle>
 [-ce_session_handle <ce_session_handle>]
 [-device_count < integer>]
 [-interface_ip_addr < a.b.c.d >]
 [-interface_ip_step < a.b.c.d >]
 [-interface_ip_prefix < 0 - 32 >]
 [-pe_handle < pe_handle >]
 [-pe_loopback_ip_addr < a.b.c.d >]
 [-pe_loopback_ip_step < a.b.c.d >]
 [-pe_loopback_ip_prefix < 0 - 32 >]
 [-rd_start <admin:assigned>]
 [-rd_step <admin:assigned>]
 [-site_count <0-max_int>]
 [-vpn_id < 1 - 4294967295 >]
 [-vpn_id_step < 1 - 4294967295>]
 [-vlan_id < 1 - 4095>]
MPLS VPN Functions
591
 [-vlan_id_step < 0 - 4095>]
Arguments:
 -mode
 Specifies the action to perform. Possible values are
 create, modify, and delete. This argument is mandatory.
 The modes are described below:
 create - Creates one or multiple VPN customer sites.
 You must input -port_handle and other switches
 which depends on the value of the -vpn_type
 option.
 modify - Modifies the configuration of one VPN
 customer site. You must specify the -handle
 argument.
 delete - Deletes one or more VPN customer site. You
 must specify the -handle argument.
 -port_handle
 Specifies the handle of the port on which to create the
 VPN customer site. This argument is required only by
 create modes. This switch has no default value.
 -handle
 Specifies the VPN customer site handle created by this
 command. You must specify this argument when the
 -mode argument is set to modify or delete.
 -ce_session_handle
 Specifies the IGP of BGP protocol session worked on
 and emulated a CE device, interacting with the DUT to
 exchange VPN routes. The handle is created or returned
 by Spirent HLTAPI commands of relevant IGP or BGP
 protocol.
 The session should also be controlled (started or stopped) and be
 fetched information from by using Spirent HLTAPI commands of
 relevant protocol. For example, if the IGP session is OSPF, it
 can be created, modified, and deleted by the
 sth::emulation_ospf_config function; it can be controlled by
 using the sth::emulation_ospf_control function, can be fetched
 information from by using the sth::emulation_ospf_info command.
 -device_count
 Specifies the number of hosts to be emulated within
 one VPN site. The default value is 1.
 -interface_ip_addr
 Specifies the first IP address of the address pool with in
 the VPN sites. The default value is 192.85.1.1.
 -interface_ip_step
 Specifies the step value of IP address of the VPN site
 when you create multiple hosts within one VPN site or
 create multiple VPN sites at once. The default value is
 0.0.1.0.
 -interface_ip_prefix
 Specifies the prefix length of IP address of the address
 pool with in the VPN sites. Possible values range from
 0 to 32. The default value is 32.
 -pe_handle
 Specifies the handle of the PE router which the
 configured VPN customer sites attach to. The handle is
 enabled and returned by
 the sth::emulation_mpls_l2vpn_pe_config function. If
 this switch is specified, the configured VPN sites will 
MPLS VPN Functions
592
 be treated as those attaching to the emulated PE router
 specified by this option. If you don't define this
 argument, the configured VPN sites will be treated
 as that directly attaches to the SUT which works as the
 PE for the VPN site.
 -pe_loopback_ip_addr
 Specifies the loopback IP address of the PE router that
 the configured VPN sites attach to. You must specify
 this option when you don't define the -pe_handle
 argument. The default value is 10.1.1.1. The value of
 this argument must be in IPv4 format.
 -pe_loopback_ip_prefix
 Specifies the loopback IP address prefix length of the
 PE router that the configured VPN sites attach to.
 Possible values range from 0 to 32.The default value is
 32.
 -pe_loopback_ip_step
 Specifies the step value of the loopback IP address of
 the PE router that the configured VPN sites attach to
 when you create multiple
 VPN sites at one time. The default value is 0.0.0.0. The
 value of this argument must be in IPv4 format.
 -rd_start
 Specifies the first RD of VPN route for the VPN site.
 There are two types of RD value:
 type 0 - The administrator sub-field is a 2 byte AS
 number and the assigned sub-field is a 4 byte
 number assigned by the service provider. The
 format should be like "n:n (admin:assigned)"
 type 1 - The administrator sub-field is a 4-byte IPv4
 address and assigned sub-field is a 2 byte number
 assigned by the service provider. The format
 should be like "n.n.n.n:n (admin:assigned)".
 This switch is applicable when the -vpn_type\
 switch is set to bgp_vpls. The default value is
 0:0.
 -rd_step
 Specifies the step value of the RD of the VPN Route
 for the VPN site. This switch is available when the
 -vpn_type switch is set to bgp_vpls. The default value
 is 0:0.
 -site_count
 Specifies the number of VPN sites to create at once.
 The default value is 1. Possible values range from 0 to
 <max-int>
 -vlan_id
 Specifies the first VLAN ID for the VPN site. Possible
 values range from 1 to 4095. If you specify this option,
 Spirent HLTAPI will add VLAN interface to
 configured VPN site; if not, no VLAN interface will be
 on the VPN site.
 -vlan_id_step
 Specifies the step value of the VLAN ID for the VPN
 site when you create multiple VPN sites or there are
 multiple VLAN interfaces within one VPN site.
 Possible values range from 0 to 4095. The default value
 is 0. This switch is applicable when the -vlan_id option
 is defined.
 -vpn_id 
MPLS VPN Functions
593
 Specifies the VPN ID of the VPN site. VPN ID is a
 global identifier of VPN in Spirent HLTAPI. The
 emulated customer site with the same VPN ID would
 be treated as in same VPN. Possible values range from
 1 to 4294967295.The default value is 1.
 -vpn_id_step
 Specifies the step value of the VPN ID of the VPN site,
 when you create multiple VPN sites at one time. The
 VPN ID is the global identifier of a VPN in Spirent
 HLTAPI. Emulated customer site with same VPN ID
 would be treated as in same VPN. Possible values range from
 1 to 4294967295. The default value is 1.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -vpn_id_step
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The handle that identifies the VPN site handle created
 by the sth::emulation_mpls_l3vpn_site_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mpls_l3vpn_pe_config function creates, modifies, and
 deletes the specified MPLS L3VPN Customer sites. Use the -mode
 argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)
 To create a VPN site, use create mode of the function
 sth::emulation_mpls_l2vpn_site_config along with the -port_handle to
 specify the Spirent HLTAPI port that the emulation will use. (The port
 handle value is contained in the keyed list returned by the connect
 function.)
 In addition to specifying the port, you must also specify one or more of
 the following arguments when you create a VPN site:
 -vpn_type
 -pe_handle
 -pe_loopback_ip_addr
 -pe_loopback_ip_prefix
Examples:
 #### HLTAPI for Tcl ####
 The following example enables an Layer3 VPN site on a port:
 There must already exist a port with handle port_handle1 and a CE router
 session handle pe_handle1.
 sth::emulation_mpls_l3vpn_site_config -mode create \
 -port_handle port_handle1 \
 -pe_handle pe_handle1 \
 -pe_loopback_ip_prefix 32 \
 -site_count 5 \
 -vpn_type martini_pwe \
 -vc_id $vc_id \
 -vc_id_step $vc_step \
 -vpn_id $vpn_id \
 -vpn_id_step $vpn_step \
 -mac_addr $site_mac_addr \
MPLS VPN Functions
594
 -mac_addr_count 100 \
 -mac_addr_step $site_mac_step \
 -vlan_id $vlan_id \
 -vlan_id_step 1-pe_count 5
 The following example modifies an Layer3 VPN site:
 There must already exist a VPN site vpnSiteHandle1
 sth::emulation_mpls_l3vpn_site_config -mode modify \
 -handle $vpnSiteHandle1 \
 -pe_loopback_ip_addr "1.10.1.2" \
 -pe_loopback_ip_prefix 32 \
 -vpn_type martini_pwe \
 -vc_id 1501 \
 -vpn_id 101 \
 -mac_addr 12:22:33:44:55:66 \
 -vlan_id 1700
 The following example deletes two L3VPN sites:

 sth::emulation_mpls_l3vpn_site_config\
 -mode delete \
 -handle "$vpnSiteHandle1 $vpnSiteHandle2"

 Sample Output:
 Success: {status 1} {handle pe_handle1}
 Failure: {status 0} {log XXX}
 #### HLTAPI for Python ####
 The following example enables an Layer3 VPN site on a port:
 There must already exist a port with handle port_handle[0] and a PE router
 session handle ce_session_handle.
 device_ret3 = sth.emulation_mpls_l3vpn_site_config (
 mode = 'create',
 ce_session_handle = ce_session_handle,
 vpn_id = '100',
 pe_loopback_ip_prefix= '32',
 pe_loopback_ip_addr = '220.1.1.1',
 rd_start = '123:1',
 port_handle = port_handle[0],
 interface_ip_addr = '13.31.0.11',
 interface_ip_prefix = '16');
 Sample Output: {'status': '1', 'handle': 'host3'}
 #### HLTAPI for Perl ####
 The following example enables an Layer3 VPN site on a port:
 There must already exist a port with handle port_handle[0] and a PE router
 session handle ce_session_handle.
 my %device_ret3 = sth::emulation_mpls_l3vpn_site_config (
 mode => 'create',
 ce_session_handle => "$ce_session_handle",
 vpn_id => '100',
 pe_loopback_ip_prefix=> '32',
 pe_loopback_ip_addr => '220.1.1.1',
 rd_start => '123:1',
 port_handle => "$hport[1]",
 interface_ip_addr => '13.31.0.11',
 interface_ip_prefix => '16';
 Sample Output:
MPLS VPN Functions
595
 $VAR1 = 'handle';
 $VAR2 = 'host3';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes: None
End of Procedure Header
Multicast Functions
596
Multicast Functions
Functions:
sth::emulation_multicast_group_config
sth::emulation_multicast_source_config
sth::emulation_multicast_group_config
Name:
 sth::emulation_multicast_group_config
Purpose:
 Creates, modifies, or deletes multicast groups on Spirent HLTAPI. Use
 these multicast functions with the HLTAPI functions for the IGMP (for
 IPv4), MLD (for IPv6), and PIM protocols.
Synopsis:
 sth::emulation_multicast_group_config
 -mode {modify|delete} -handle <multicast_group_pool_handle> | -mode create
 [-ip_addr_start {<a.b.c.d> | <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}]
 [-ip_addr_step <integer>]
 [-ip_prefix_len <1-128>]
 [-num_groups <1-65535>]
 [-pool_name <group_pool_name>]
Arguments:
 -handle
 The handle of the multicast group to modify or delete.
 This argument is mandatory for modify or delete mode but is
 not used for create mode.
 -ip_addr_start
 Specifies the first multicast group address in the group
 pool. The default for IPv4 is 224.0.0.1. If you do not enter
 an IPv6 address, the default IPv4 address is used.
 -ip_addr_step
 Specifies the amount by which to increment the first
 multicast group address to generate each subsequent
 group address in the group pool. This argument must
 be in integer format. The default value is 1.
 -ip_prefix_len
 Sets the bit in the address by which to change the step
 value to generate each subsequent address in the pool.
 Possible values range from 1 to 128. The default for IPv4
 addresses is 32. The default for IPv6 is 128.
 -mode Specifies the action to perform. Possible values are create,
 modify, or delete, This argument is mandatory. The modes are
 described below:
 create - Creates a multicast group pool.
 modify - Changes the configuration parameters for the
 multicast group identified by the -handle argument.
 delete - Deletes the multicast group pool specified by
 -handle.
 -num_groups
 Specifies the number of multicast groups in the group pool.
 Possible values range from 1 to 65535. The default is 1.
Multicast Functions
597
 -pool_name
 Assigns a name to the group pool.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle Identifies the handle of the multicast group pool that you
 configured using the sth::emulation_multicast_group_config
 function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_multicast_group_config function creates, modifies,
 or deletes multicast groups. A multicast group is a set of recipients that
 all want to receive a particular data stream.
 You specify the starting IP address (-ip_addr_start) for this multicast
 group as well as the increment value by which other IP addresses will be
 created (-ip_addr_step), the prefix length (ip_prefix_len), the number of
 groups in the pool (-num_groups), and the name of the group pool
 (-pool_name).
 Data addressed to the starting IP address is forwarded to all members of
 the multicast group.
 Use the -mode argument to specify the action to perform. (See the -mode
 argument description for information about the actions.)
 Note: This function is mandatory by sth::emulation_igmp_group_config to
 configure IGMP groups.
 Use this function to configure groups that will all receive the same data
 packets.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a multicast group containing five groups:
 sth::emulation_multicast_group_config
 -mode create \
 -num_groups 5
Sample Output: {handles group01} {status 1}
 #### HLTAPI for Python ####
 The following example creates a multicast group containing one group:
 my %device_ret0_macstgroup_1 = sth::emulation_multicast_group_config (
 mode => 'create',
 ip_prefix_len => '32',
 ip_addr_start => '225.0.0.1',
 ip_addr_step => '1',
 num_groups => '1',
 pool_name => 'Ipv4Group_1');
 Sample Output: {'status': '1', 'handle': 'ipv4group1'}
 #### HLTAPI for Perl ####
 The following example creates a multicast group containing one group:
 my %device_cfg_ret5_macstgroup_1 = sth::emulation_multicast_group_config (
Multicast Functions
598
 mode => 'create',
 ip_prefix_len => '32',
 ip_addr_start => '225.0.0.1',
 ip_addr_step => '1',
 num_groups => '1',
 pool_name => 'Ipv4Group_1');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'ipv4group1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 The use of IGMP or MLD messages in host-router communication is
 determined by the IP version of the traffic. If hosts are sending IPv4 traffic,
 then hosts and routers use IGMP for multicast group membership communication. If
 hosts are sending IPv6 traffic, then MLD is used. A Spirent HLTAPI test
 configuration can use either PIM-SM or PIM-SSM for router-to-router
 communication.
 Spirent HLTAPI supports the use of IGMP versions 1, 2, or 3 for
 multicast group membership.
End of Procedure Header
sth::emulation_multicast_source_config
Name:
 sth::emulation_multicast_source_config
Purpose:
 Creates, modifies, or deletes multicast sources on Spirent HLTAPI. Use
 this procedure with the sth::emulation_igmp_group_config (IGMPv3),
 sth::emulation_mld_group_config (MLD), and
 sth::emulation_pim_group_config (PIM) procedures. Source pool definitions
 might be shared among ports if supported by vendor.
Synopsis:
 sth::emulation_multicast_source_config
 -mode {modify|delete} -handle <multicast_group_pool_handle> | -mode create
 [-ip_addr_start {<a.b.c.d> | <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}
 [-ip_addr_step {<a.b.c.d> | <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}
 [-ip_prefix_len <1-128>]
 [-num_sources <1-65535>]
 [-pool_name <source_pool_name>]
Arguments:
 -handle
 The handle of the multicast source pool to modify or
 delete. This argument is mandatory for modify or delete mode
 but is not used for create mode.
 -ip_addr_start
 Specifies the first multicast source address in the source
 pool. The default for IPv4 is 224.0.0.1. If you do not enter
 an IPv6 address, the default IPv4 address is used.
 -ip_addr_step
 Specifies the amount by which to increment the source
 address to generate each subsequent address in the pool. The
 default increment is 1 (for example, 0.0.0.1).
 -ip_prefix_len
 Sets the bit in the address by which to change the step
Multicast Functions
599
 value to generate each subsequent address in the pool.
 Possible values range from 1 to 128. The default for IPv4
 addresses is 32. The default for IPv6 is 128.
 -mode Specifies the action to perform. Possible values are create,
 modify, or delete, This argument is mandatory. The modes are
 described below:
 create - Creates a multicast source pool.
 modify - Changes the configuration parameters for the
 multicast source identified by the -handle argument.
 delete - Deletes the multicast source pool specified by
 -handle.
 -num_sources
 Specifies the number of multicast sources in the source
 pool. Possible values range from 1 to 65535. The default is
 1.
 -pool_name
 Assigns a name to the source pool.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle Identifies the handle of the multicast source pool that you
 configured using the sth::emulation_multicast_source_config
 function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_multicast_source_config function creates, modifies,
 or deletes multicast sources (that is, the sources of multicast traffic). A
 multicast source is a host that sends data to a multicast group.
 A source host sends data to a multicast group by setting the destination
 IP address of the datagram to be the multicast group address.
 Before a host can send data to a multicast group, or join the list of
 recipients for a group, it must know the address of the multicast group.
 Use the sth::emulation_multicast_source_config function to specify the
 source IP addresses from which the host systems will receive multicast
 traffic.
 Hosts who want to receive data from the multicast group join the group by
 sending a message to a multicast router on a local interface, using either
 IGMP (for IPv4 addresses) or MLD (for IPv6 addresses).
 Use the -mode argument to specify the action to perform. (See the -mode
 argument description for information about the actions.)
 Note: This function is mandatory by the sth::emulation_igmp_source_config
 function to configure IGMP sources.
 Multicast routers communicate among themselves using a multicast routing
 protocol such as PIM.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a multicast source configuration:
Multicast Functions
600
 sth::emulation_multicast_source_config \
 -mode "create" \
 -ip_addr_start $source_ip \
 -ip_addr_step 1 \
 -ip_prefix_len 32 \
 -num_sources $num_sources \
 -pool_name " PoolName "
Sample Output: {handles multicastSourcePool1} {status 1}

 #### HLTAPI for Python ####
 The following example creates a multicast source configuration:
 device_ret0_macstsource_1 = sth.emulation_multicast_source_config (
 mode = 'create',
 ip_addr_start = '2.0.1.0',
 ip_prefix_len = '32',
 ip_addr_step = '1',
 num_sources = '1');
 Sample Output: {'status': '1', 'handle': 'multicastSourcePool(0)'}
 #### HLTAPI for Perl ####
 The following example creates a multicast source configuration:
 my %device_ret0_macstsource_1 = sth::emulation_multicast_source_config (
 mode => 'create',
 ip_addr_start => '2.0.1.0',
 ip_prefix_len => '32',
 ip_addr_step => '1',
 num_sources => '1');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'multicastSourcePool(0)';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None
End of Procedure Header
MVPN Functions
601
MVPN Functions
Functions:
sth::emulation_mvpn_provider_port_config
sth::emulation_mvpn_customer_port_config
sth::emulation_mvpn_config
sth::emulation_mvpn_control
sth::emulation_mvpn_info
sth::emulation_mvpn_provider_port_config
Name:
 sth::emulation_mvpn_provider_port_config
Purpose:
 Adds or deletes an emulated provider-side test port.
 Multicast VPN (MVPN) is a technology to deploy the multicast
 service in an existing Multiprotocol Label Switching (MPLS)/ Border
 Gateway Protocol (BGP) VPN. It transmits multicast
 data between private networks by encapsulating the original
 multicast packets.
 If the creation fails, Spirent HLTAPI returns an error message.
Synopsis:
 sth::emulation_mvpn_provider_port_config
 -port_handle < port_handle >
 -action {add|delete}
 [-dut_interface_ipv4_addr <a.b.c.d>]
 [-dut_interface_ipv4_addr_step <a.b.c.d>]
 [-dut_interface_ipv4_prefix_length <0-32>]
 [-sub_interface_enable {1|0}]
 [-sub_interface_count <1-95>]
 [-vlan_id <0-4095>]
 [-vlan_id_step <0-4095>]
Arguments:
 -port_handle
 Specifies the test port to be added to MVPN provider side. This
 argument is mandatory.
 -action
 Specifies the action to be performed. This argument is
 mandatory. Possible values are described below:
 add - Adds a provider-side test port.
 delete - Deletes a provider-side test port.
 -dut_interface_ipv4_addr
 Defines the first IPv4 address of the DUT interfaces connected
 to the port. The default value is "0.0.0.0".
 -dut_interface_ipv4_addr_step
 Specifies the step size in which the DUT IPv4 address is
 incremented. The default value is 0.0.1.0. The number of times
 that the step repeats is same as the number of sub-interfaces.
 This argument is only applicable when -sub_interface_enable is
 enabled.

 -dut_interface_ipv4_prefix_length
 IPv4 address prefix length of DUT interface connected to the
MVPN Functions
602
 port. Possible values range from 0 to 32. The default value is
 24.
 -sub_interface_enable
 Determines whether the sub-interface on the DUT interface is
 enabled. Possible values are 0 (disabled) and 1 (enabled). The
 default value is 0. Sub-interfaces allow multiple routers and
 multiple VLANs to be created on each port. When this
 argument is enabled, you can specify the following arguments:
 -sub_interface_count, -dut_interface_ipv4_addr_step,
 -vlan_id, and -vlan_id_step.

 -sub_interface_count
 Defines the number of sub-interfaces (VLANs) of the DUT
 interface. Possible values range from 1 to 95. The default
 value is 1. This argument is only applicable when
 -sub_interface_enable is enabled.
 -vlan_id
 Specifies the starting VLAN ID of DUT interfaces.
 Possible values range from 0 to 4095. The default value is 1.
 This argument is only applicable when -sub_interface_enable
 is enabled.
 -vlan_id_step
 Defines the step size in which the VLAN ID is incremented.
 Possible values range from 0 to 4095. The default is 1. This
 argument is only applicable when -sub_interface_enable is
 enabled.
Cisco-specific Arguments:
 None
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mvpn_provider_port_config function adds or
 deletes an emulated MVPN provider-side test port. Use the -port_handle
 argument to specify the port to be added. Use the -action
 argument to specify the action to perform. (See the -action argument
 description for information about the actions.)
 Use -action add to add one provider-side test port with the MVPN protocol.
 The added port can be removed with delete mode.
 You can use -dut_interface_ipv4_addr, -dut_interface_ipv4_addr_step, and
 -dut_interface_ipv4_prefix_length to configure the DUT interface that is
 connected to the test port.
 Use the -sub_interface_enable argument to determine whether the
 sub-interface on the DUT interface is enabled. -sub_interface_count,
 -dut_interface_ipv4_addr_step, -vlan_id, and -vlan_id_step are applicable
 only when the -sub_interface_enable option is enabled.
Examples:
 The following example adds a test port to MVPN provider side:
 sth::emulation_mvpn_provider_port_config -port_handle $p1 \
 -action add \
 -dut_interface_ipv4_addr 6.145.1.1 \
 -dut_interface_ipv4_prefix_length 24 \
 -dut_interface_ipv4_addr_step 0.0.1.0
 Sample output for example shown above: {status 1}
 The following example deletes a test port from MVPN provider side:
MVPN Functions
603
 sth::emulation_mvpn_provider_port_config -port_handle $p1 \
 -action delete \
 Sample output for example shown above: {status 1}
Sample Input: See Examples.
Sample Output: See Examples.
Notes: None
End of Procedure Header
sth::emulation_mvpn_customer_port_config
Name:
 sth::emulation_mvpn_customer_port_config
Purpose:
 Adds or deletes a Multicast VPN emulation test port on the MVPN
 customer side.
Synopsis:
 sth::emulation_mvpn_customer_port_config
 -port_handle < port_handle >
 -action {add|delete}
 [-dut_interface_ipv4_addr <a.b.c.d>]
 [-dut_interface_ipv4_addr_step <a.b.c.d>]
 [-dut_interface_ipv4_prefix_length <0-32>]
 [-sub_interface_enable {1|0}]
 [-sub_interface_count <1-95>]
 [-vlan_id <0-4095>]
 [-vlan_id_step <0-4095>]
Arguments:
 -port_handle
 Specifies the test port to be added to the MVPN customer side.
 This argument is mandatory.
 -action
 Specifies the action to be performed. This argument is mandatory.
 Possible values are described below:
 add - Adds a customer-side test port.
 delete - Deletes a customer-side test port.
 -dut_interface_ipv4_addr
 Defines the first IPv4 address of the DUT interfaces that are connected
 to the port. The default value is "0.0.0.0".
 -dut_interface_ipv4_addr_step
 Specifies the step size in which the DUT IPv4 address is
 incremented. The default value is 0.0.1.0. The number of times that the
 step repeats is same as the number of sub-interfaces. This
 argument is only applicable when -sub_interface_enable is
 enabled.

 -dut_interface_ipv4_prefix_length
 Specifies the IPv4 address prefix length of DUT interface
 that is connected to the
 port. Possible values range from 0 to 32. The default value is
 24.
 -sub_interface_enable
MVPN Functions
604
 Determines whether the sub-interface on the DUT interface is
 enabled. Possible values are 0 (disabled) and 1 (enabled). The
 default value is 0. Sub-interfaces allow multiple routers and
 multiple VLANs to be created on each port. When this
 argument is enabled, you can specify the following arguments:
 -sub_interface_count, -dut_interface_ipv4_addr_step,
 -vlan_id, and -vlan_id_step.

 -sub_interface_count
 Defines the number of sub-interfaces (VLANs) of the DUT
 interface. Possible values range from 1 to 95. The default
 value is 1. This argument is only applicable when
 -sub_interface_enable is enabled.
 -vlan_id
 Specifies the starting VLAN ID of DUT interfaces.
 Possible values range from 0 to 4095. The default value is 1.
 This argument is only applicable when -sub_interface_enable
 is enabled.
 -vlan_id_step
 Defines the step size in which the VLAN ID is incremented.
 Possible values range from 0 to 4095. The default is 1. This
 argument is only applicable when -sub_interface_enable is
 enabled.
Cisco-specific Arguments:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mvpn_customer_port_config function adds or
 deletes an emulated MVPN customer-side test port. Use the -port_handle
 argument to specify the port to be added. Use the -action
 argument to specify the action to perform. (See the -action argument
 description for information about the actions.)
 For more information, you can refer to the description of the
 sth::emulation_mvpn_provider_port_config command.
 The usage of sth::emulation_mvpn_customer_port_config options
 is similar to that of the sth::emulation_mvpn_provider_port_config
 options.
Examples:
 The following example adds a test port to MVPN customer side:
 sth::emulation_mvpn_customer_port_config -port_handle $p2 \
 -action add \
 -dut_interface_ipv4_addr 6.146.1.1 \
 -dut_interface_ipv4_prefix_length 24 \
 -dut_interface_ipv4_addr_step 0.0.1.0
 Sample output for example shown above: {status 1}
 The following example deletes a test port from MVPN customer side:
 sth::emulation_mvpn_provider_port_config -port_handle $p2 \
 -action delete \
 Sample output for example shown above: {status 1}
Sample Input: See Examples.
Sample Output: See Examples.
MVPN Functions
605
Notes: None
End of Procedure Header
sth::emulation_mvpn_config
Name:
 sth::emulation_mvpn_config
Purpose:
 The sth::emulation_mvpn_config function configures an RFC 2547bis style
 MPLS IP VPN network topologies, creates emulated and simulated CE, P, and
 PE routers, selects and enables routing and labeling protocols, configures
 multicast VPNs, and creates the traffic that is sent between VPNs.
Synopsis:
 sth::emulation_mvpn_config
 [-dut_loopback_ipv4_addr <a.b.c.d>]
 [-dut_as <1-65535>]
 [-dut_4byte_as_enable {1|0}]
 [-dut_4byte_as <65535:65535>]
 [-igp_protocol { ospf | isis | rip }]
 [-mpls_protocol { ldp | rsvp }]
 [-bgp_bfd_enable {1|0}]
 [-mpls_rsvp_bandwidth_per_link {1-2147483647}]
 [-mpls_rsvp_bandwidth_per_tunnel {1-2147483647}]
 [-mpls_rsvp_egress_label { next_available | implicit_null |
 explicit_null }]
 [-mpls_rsvp_transit { accept_all | accept_configured }]
 [-mpls_rsvp_min_label {1-65535}]
 [-mpls_rsvp_max_label {1-65535}]
 [-mpls_rsvp_graceful_restart_enable {1|0}]
 [-mpls_rsvp_recover_time <0-4294967295>]
 [-mpls_rsvp_restart_time <0-4294967295>]
 [-mpls_rsvp_bfd_enable {1|0}]
 [-mpls_ldp_hello_type { direct | targeted}]
 [-mpls_ldp_transport_mode { none | tester_ip | router_id }]
 [-mpls_ldp_hello_interval <1-21845>]
 [-mpls_ldp_keepalive_interval <1-21845>]
 [-mpls_ldp_egress_label { next_available | implicit_null | explicit_null }
 [-mpls_ldp_min_label <1-65535>]
 [-mpls_ldp_graceful_restart_enable {1|0}]
 [-mpls_ldp_recover_time <0-4294967>]
 [-mpls_ldp_reconnect_time <0-4294967>]
 [-mpls_ldp_bfd_enable {1|0}]
 [-igp_ospfv2_area_id <a.b.c.d>]
 [-igp_ospfv2_network_type {native | broadcast | p2p}]
 [-igp_ospfv2_router_priority <0-255>]
 [-igp_ospfv2_interface_cost <1-65535>]
 [-igp_ospfv2_options {tbit | ebit | mcbit | npbit | eabit | dcbit |
 obit | unused7}]
 [-igp_ospfv2_authentication_mode {none | simple | md5}]
 [-igp_ospfv2_authentication_password <password>]
 [-igp_ospfv2_authentication_md5_key <0-255>]
 [-igp_ospfv2_graceful_restart_enable {1|0}]
 [-igp_ospfv2_graceful_restart_type {none | rfc_standard | ll_signalling}]
 [-igp_ospfv2_bfd_enable {1|0}]
 [-igp_isis_level {level1 | level2 | level1_and_2}]
 [-igp_isis_network_type {broadcast | p2p}]
 [-igp_isis_router_priority <0-127>]
 [-igp_isis_area1 <ANY>]
 [-igp_isis_area2 <ANY>]
 [-igp_isis_area3 <ANY>]
 [-igp_isis_circuit_id <0-255>]
 [-igp_isis_authentication_mode {none | simple | md5 }]
MVPN Functions
606
 [-igp_isis_authentication_password <ANY>]
 [-igp_isis_authentication_md5_key <0-255>]
 [-igp_isis_metric_mode {narrow | wide | narrow_and_wide}]
 [-igp_isis_l1_metric <1-63>]
 [-igp_isis_l1_wide_metric <0-16777215>]
 [-igp_isis_l2_metric <1-63>]
 [-igp_isis_l2_wide_metric <0-16777215>]
 [-igp_isis_graceful_restart_enable {1|0}]
 [-igp_isis_hello_padding {1|0}]
 [-igp_isis_bfd_enable {1|0}]
 [-p_router_enable {1|0}]
 [-p_router_number_per_sub_interface <1-65535>]
 [-p_router_topology_type {tree | grid}
 [-p_router_loopback_ipv4_addr <a.b.c.d>]
 [-p_router_loopback_ipv4_addr_step <a.b.c.d>]
 [-p_router_interface_ipv4_addr <a.b.c.d>]
 [-p_router_interface_ipv4_addr_prefix_length <0-32>]
 [-pe_router_number_per_sub_interface <1-65535>]
 [-pe_router_loopback_ipv4_addr <a.b.c.d>]
 [-pe_router_loopback_ipv4_addr_step <a.b.c.d>]
 [-bgp_route_reflector_enable {1|0}]
 [-bgp_route_reflector_per_sub_interface <1-65535>]
 [-bgp_route_reflector_per_pe <1-65535>]
 [-bgp_route_reflector_loopback_ipv4_addr <a.b.c.d>]
 [-bgp_route_reflector_loopback_ipv4_addr_step <a.b.c.d>]
 [-bgp_route_reflector_cluster_id <a.b.c.d>]
 [-bgp_route_reflector_cluster_id_step <a.b.c.d>]
 [-vrf_number <1-65535>]
 [-vrf_rd_assignment {use_rt | manual}]
 [-vrf_route_target_start <ANY>]
 [-vrf_route_target_step <ANY>]
 [-customer_ce_vrf_assignment {round_robin | sequential}]
 [-customer_ce_bgp_as <1-65535>]
 [-customer_ce_bgp_as_step_per_ce_enable {1|0}]
 [-customer_ce_bgp_as_step_per_ce <0-65535>]
 [-customer_ce_bgp_as_step_per_vrf_enable {1|0}]
 [-customer_ce_bgp_as_step_per_vrf <0-65535>]
 [-customer_ce_bgp_4byte_as_enable {1|0}]
 [-customer_ce_bgp_4byte_as <ANY>]
 [-customer_ce_bgp_4byte_as_step_per_ce_enable {1|0}]
 [-customer_ce_bgp_4byte_as_step_per_ce <0-65535>]
 [-customer_ce_bgp_4byte_as_step_per_vrf_enable {1|0}]
 [-customer_ce_bgp_4byte_as_step_per_vrf <0-65535>]
 [-customer_ce_routing_protocol {bgp |ospf |rip |isis |
 static_route |mixed}]
 [-customer_ce_bgp_percent <0-100>]
 [-customer_ce_rip_percent <0-100>]
 [-customer_ce_ospf_percent <0-100>]
 [-customer_ce_isis_percent <0-100>]
 [-customer_ce_static_route_percent <0-100>]
 [-customer_rd_start <ANY>]
 [-customer_rd_step_per_vrf_enable {1|0}]
 [-customer_rd_step_per_vrf <ANY>]
 [-customer_rd_step_per_ce_enable {1|0}]
 [-customer_rd_step_per_ce <ANY>]
 [-provider_pe_vrf_assignment {vpn_per_pe | pe_per_vpn}]
 [-provider_pe_vrf_count <integer>]
 [-provider_pe_vrf_all_assign {1|0}]
 [-provider_ce_bgp_as_enable {1|0}]
 [-provider_ce_bgp_as <1-65535>]
 [-provider_ce_bgp_as_step_per_ce_enable {1|0}]
 [-provider_ce_bgp_as_step_per_ce <1-65535>]
 [-provider_ce_bgp_as_step_per_vrf_enable {1|0}]
 [-provider_ce_bgp_as_step_per_vrf <1-65535>]
 [-provider_ce_bgp_4byte_as_enable {1|0}]
 [-provider_ce_bgp_4byte_as <ANY>]
 [-provider_ce_bgp_4byte_as_step_per_ce_enable {1|0}]
 [-provider_ce_bgp_4byte_as_step_per_ce <1-65535>]
 [-provider_ce_bgp_4byte_as_step_per_vrf_enable {1|0}]
 [-provider_ce_bgp_4byte_as_step_per_vrf <1-65535>]
 [-provider_rd_start <ANY>]
MVPN Functions
607
 [-provider_rd_step_per_vrf_enable {1|0}]
 [-provider_rd_step_per_vrf <ANY>]
 [-provider_rd_step_per_ce_enable {1|0}]
 [-provider_rd_step_per_ce <ANY>]
 [-multicast_default_mdt_addr <a.b.c.d>]
 [-multicast_default_mdt_increment <a.b.c.d>]
 [-multicast_data_mdt_enable {1|0}]
 [-multicast_data_mdt_addr <a.b.c.d>]
 [-multicast_data_mdt_increment <a.b.c.d>]
 [-multicast_receiver_have_same_group {1|0}]
 [-multicast_group_count <1-65535>]
 [-multicast_group_addr_start <a.b.c.d>]
 [-multicast_group_addr_increment <a.b.c.d>]
 [-multicast_group_increment_per_interface {1|0}]
 [-multicast_group_addr_increment_per_vlan <a.b.c.d>]
 [-multicast_group_addr_increment_per_port <a.b.c.d>]
 [-multicast_multiple_sender_enable {1|0}]
 [-multicast_multiple_sender_count <1-65535>]
 [-multicast_provider_pim_protocol{ pim_sm | pim_ssm}]
 [-multicast_provider_bsr_enable {1|0}]
 [-multicast_provider_rp_addr <a.b.c.d>]
 [-multicast_customer_pim_protocol {pim_sm | pim_ssm}]
 [-multicast_customer_bsr_enable {1|0}]
 [-multicast_customer_rp_addr <a.b.c.d>]
 [-multicast_customer_rp_increment <a.b.c.d>]
 [-customer_route_type{ internal | external}]
 [-customer_route_count_per_ce <1-2147483647>]
 [-customer_route_start <a.b.c.d>]
 [-customer_route_step <a.b.c.d>]
 [-customer_route_prefix_length <1-32>]
 [-customer_route_overlap {1|0}]
 [-provider_route_count_per_ce <1-2147483647>]
 [-provider_route_start <a.b.c.d>]
 [-provider_route_step <a.b.c.d>]
 [-provider_route_prefix_length <1-32>]
 [-provider_route_overlap {1|0}]
 [-vrf_route_mpls_label_type {label_per_site | label_per_route}]
 [-vrf_route_mpls_label_start <1-1048575>]
 [-traffic_frame_size <12-16383>]
 [-traffic_analyzer_enable {1|0}]
 [-traffic_load_percent_from_provider_port <0-100>]
 [-traffic_load_percent_from_customer_port <0-100>]
 [-multicast_traffic_flow_direction {customer_to_provider |
 customer_to_customer | customer_to_all_other |
 provider_to_customer}]
 [-multicast_traffic_source_count <1-65535>]
 [-multicast_traffic_all_source_enable {1|0}]
 [-multicast_traffic_receiver_count <integer>]
 [-multicast_traffic_all_receiver_enable {1|0}]
 [-mdt_switch_over_traffic_enable {1|0}]
 [-mdt_switch_over_interval <0-65535>]
 [-mdt_switch_over_delay <0-65535>]
 [-unicast_traffic_enable {1|0}]
 [-unicast_traffic_flow_direction {customer_to_core |
 core_to_customer | bidirectional | fully_meshed}]
 [-unicast_traffic_stream_group_method {aggregate | vpn }]
 [-unicast_traffic_use_single_stream_per_endpoint_pair {1|0}]

Arguments:
 -dut_loopback_ipv4_addr
 Specifies the loopback IPv4 address of DUT. Loopback
 IPv4 address of DUT Loopback address is a special IP
 number that is designated for the software loopback
 interface of a machine. You must specify the value of this
 argument in IPv4 format. The default value is 10.0.0.1.
 -dut_as
 The autonomous system (AS) number of DUT.
 Possible values range from 1-65535. The default value
 is 1. 
MVPN Functions
608
 -dut_4byte_as_enable
 Determines whether 4-byte AS number is enabled on DUT.
 When it is set to 1, you can specify the 4-byte AS number.
 Possible values are 0 and 1. The default values is 0.
 -dut_4byte_as
 Specifies the 4-byte AS number of DUT. You should set it
 in the format of "<integer>:<integer>". The integer used
 must be smaller than 65535. The default value is 1:1.
 -igp_protocol
 Specifies the Interior Gateway
 Protocol (IGP) used by DUT. Networks
 within an autonomous system communicate routing
 information to each other using an IGP protocol. Possible
 values are ospf, isis, and rip. The default value is ospf.
 ospf - Indicates Open Shortest Path First(OSPF) that is a
 router protocol used within larger autonomous
 system networks.
 isis - Specifies the Intermediate System to Intermediate
 System(IS-IS) protocol. Routers (Intermediate
 Systems) use IS-IS to exchange routes within a single
 network (routing domain).
 rip - Specifies the Routing Information Protocol (RIP).

 -mpls_protocol
 Specifies the MPLS protocol to be used by DUT. MPLS refers to a
 mechanism which directs and
 transfers data between Wide Area Networks (WANs) nodes
 with high performance, regardless of the content of the
 data. The default value is ldp. Possible values are described
 below: <unicast >

 none - Specifies that there is no MPLS protocol to be used
 by DUT.
 ldp - Indicates the Label Distribution Protocol(LDP).
 rsvp - Indicates the resource reservation setup protocol
 (RSVP).
 -bgp_bfd_enable
 Determines whether the Bidirectional Forwarding
 Detection (BFD) is enabled on BGP on DUT. Possible values are 0
 and 1. The default is 0.
 -mpls_rsvp_bandwidth_per_link
 Specifies the maximum bandwidth per ISIS/OSPFv2 TE
 link for simulated Provider router topology links. The value
 is measured in bytes per second. Possible values range
 from 1 to 2147483647. The default value is 100000.
 This option is only applicable when you specify
 -mpls_protocol rsvp.
 -mpls_rsvp_bandwidth_per_tunnel
 RSVP-TE Bandwidth rate, measured in bytes per second,
 for provider tunnels. Possible values range from 1 to
 2147483647. The default value is 0. This option is only
 applicable when you specify -mpls_protocol rsvp.
 -mpls_rsvp_egress_label
 Specifies the label advertised if the emulated router is at
 the tail-end of the tunnel. Possible values are
 next_available, implicit_null, and explicit_null. The default
 is next_available. This option is only applicable when you
 specify -mpls_protocol rsvp.
MVPN Functions
609
 next_available - Advertises the next available label.
 For each Forwarding Equivalence Class (FEC), the
 Label Switching Router (LSR) advertises the next
 available label from the label pool (Min Label to
 Max Label).
 implicit_null - Advertises label 3, the implicit null label.
 This label value (three) is used in a RSVP
 packet to enable penultimate hop label popping. The
 egress LSR signals a request to its upstream neighbor
 to pop the top label in the stack and forward the rest
 of the packet. This value does not appear in the
 encapsulation.
 explicit_null - Advertise label 9, the explicit null label.
 A zero (IPv4 datagram) or two (IPv6 datagram)
 MPLS label value indicates to the penultimate router
 that it is to pop the label upon receipt and forward the
 IP packet to the egress router for Layer 3 forwarding.
 Explicit null instructions are signaled to the
 penultimate router by the egress router.
 -mpls_rsvp_transit
 Defines the reservation message sent when the
 emulated router is not the tail-end router for PATH
 messages it receives. Possible values are accept_all and
 accept_configured. The default value is accept_configured.
 This option is only applicable when you specify
 -mpls_protocol rsvp. Possible values are described below:
 accept_all - The router sends a reservation message
 with the next available label for every PATH
 message received by the unique MAC/VLAN
 combination on the port.
 accept_configured - The router sends a reservation
 message with the next available label in
 response to PATH messages that match one
 of its egress tunnels.
 -mpls_rsvp_min_label
 Defines the minimum label number used by the RSVP
 session. Possible values range from 1 to 65535. The
 default value is 16. This option is only applicable
 when you specify -mpls_protocol rsvp.
 -mpls_rsvp_max_label
 Defines the maximum label number used by the RSVP
 session. Possible values range from 1 to 65535. The
 default value is 65535. This option is only applicable
 when you specify -mpls_protocol rsvp.
 -mpls_rsvp_graceful_restart_enable
 Enables or disables the RSVP graceful restart. Possible
 values are 0 (disable) and 1 (enable). If it is set to 1, enables
 graceful restart which adds a RESTART_CAP object in HELLO
 messages. Enabling graceful restart will automatically enable
 HELLO messages. This option is only applicable when
 you specify -mpls_protocol rsvp. The default value
 is 0.
 -mpls_rsvp_recover_time
 Specifies the length of time (in milliseconds) that the
 sender desires for the recipient to re-synchronize RSVP and
 MPLS forwarding state with the sender after the re-
 establishment of Hello synchronization. Possible values are
 0 to 4294967295. A value of zero (0) indicates that MPLS
 forwarding state was not preserved across a particular
 reboot. The default value is 0. This option is applicable
 only when you enable the
 -mpls_rsvp_graceful_restart_enable argument. 
MVPN Functions
610
 -mpls_rsvp_restart_time
 Specifies the sum of the time, in milliseconds, it takes the
 sender of the object to restart its RSVP component (to the
 point where it can exchange RSVP HELLO with its
 neighbors) and the communication channel that is used for
 RSVP communication. Possible values are 0 to
 4294967295. The default is 3000. This option is applicable
 only when you enable the
 -mpls_rsvp_graceful_restart_enable argument.
 -mpls_rsvp_bfd_enable
 Enables or disables the Bidirectional Forwarding Detection
 (BFD) on RSVP session. Possible values are 1 (enable) and
 0 (disable). When it is set to 1, Spirent HLTAPI creates a
 BFD session with IP addressing matching provider-side
 routers. The default value is 0. To use this argument,
 you must specify -mpls_protocol rsvp.
 -mpls_ldp_hello_type
 Specifies the type of Hello packet on LDP. This option is
 only applicable when you specify -mpls_protocol ldp.
 Possible values are:

 direct - A Basic Discovery mechanism that is used to locate
 directly-connected neighbors. The Peer IP address is the DUT
 interface address.

 targeted - An Extended Discovery mechanism that is used to
 locate neighbors which are not directly connected. The Peer IP
 address is the DUT loopback address.
 The default value is direct. This argument is only applicable
 when you specify -mpls_protocol ldp.
 -mpls_ldp_transport_mode
 Specifies the mode of LDP Transport Address TLV.
 Possible values are none, tester_ip, and router_id. The
 default value is tester_ip. This option is
 only applicable when you specify -mpls_protocol ldp.
 none - Specifies that the Transport Address TLV will not be
 included in LDP Hello messages.
 tester_ip - Indicates that the LSR will take the emulated
 router interface address as the transport address and
 include the Transport Address TLV in LDP Hello
 messages.
 router_id - Indicates that the LSR will take the emulated
 router ID, that is, the loopback address as the
 transport address and include the Transport Address
 TLV in LDP Hello messages.
 -mpls_ldp_hello_interval
 Specifies the amount of time, in seconds, between HELLO
 messages in LDP session. Possible values range from 1 to
 21845. The default value is 5. This option is
 only applicable when you specify -mpls_protocol ldp.
 -mpls_ldp_keepalive_interval
 Specifies the amount of time, in seconds, between
 KEEPALIVE messages. Possible values range from 1 to
 21845. The default is 60. This option is
 only applicable when you specify -mpls_protocol ldp.
 -mpls_ldp_egress_label
 Specifies the emulated label advised by the emulated peer.
 The default is next_available. This option is only applicable
 when you specify -mpls_protocol ldp. Possible values are
 described below:
MVPN Functions
611

 next_available - Advertises the next available label.
 For each Forwarding Equivalence Class (FEC), the
 Label Switching Router (LSR) advertises the next
 available label from the label pool (Min Label to
 Max Label).
 implicit_null - Advertises label 3, the implicit null label.
 This label value (three) is used on an LDP
 packet to enable penultimate hop label popping. The
 egress LSR signals a request to its upstream neighbor
 to pop the top label in the stack and forward the rest
 of the packet. This value does not appear in the
 encapsulation.
 explicit_null - Advertise label 9, the explicit null label.
 A zero (IPv4 datagram) or two (IPv6 datagram)
 MPLS label value indicates to the penultimate router
 that it is to pop the label upon receipt and forward the
 IP packet to the egress router for Layer 3 forwarding.
 Explicit null instructions are signaled to the
 penultimate router by the egress router.
 -mpls_ldp_min_label
 Defines the minimum label number used by the LDP
 session. Possible values range from 1 to 65535. The
 default value is 16. This option is only applicable
 when you specify -mpls_protocol ldp.
 -mpls_ldp_graceful_restart_enable
 Enables or disables the LDP graceful restart. Possible
 values are 0 (disable) and 1 (enable). If it is set to 1, enables
 graceful restart which adds a
 RESTART_CAP object in HELLO messages.
 Enabling graceful restart will automatically enable
 HELLO messages. This option is only applicable when
 you specify -mpls_protocol ldp. The default value
 is 0.
 -mpls_ldp_recover_time
 Specifies the length of time (in milliseconds) that the
 sender desires for the recipient to re-synchronize LDP and
 MPLS forwarding state with the sender after the re-
 establishment of Hello synchronization. Possible values are
 0 to 4294967. A value of zero (0) indicates that MPLS
 forwarding state was not preserved across a particular
 reboot. The default value is 140. This option is applicable
 only when you enable the
 -mpls_ldp_graceful_restart_enable argument.
 -mpls_ldp_reconnect_time
 Specifies the amount of time, in seconds, it takes Spirent
 HLTAPI to reconnect after a graceful restart. To use
 this option, you must also enable
 -mpls_ldp_graceful_restart_enable and
 specify a value for the -mpls_ldp_recover_time argument.
 Possible values are 0 to 4294967. The default is 60.
 -mpls_ldp_bfd_enable
 Enables or disables the Bidirectional Forwarding Detection
 (BFD) on LDP session. Possible values are 1 (enable) and
 0 (disable). When it is set to 1, Spirent HLTAPI creates a
 BFD session with IP addressing matching provider-side
 routers. The default value is 0. To use this argument,
 you must specify -mpls_protocol ldp.
 -igp_ospfv2_area_id
 Specifies the IP address indicating the customer-side area to
 which the emulated router belongs. You must specify it in
 the IPv4 format. The default value is 0.0.0.0. To use this
 argument, you must specify -igp_protocol ospf.
MVPN Functions
612
 -igp_ospfv2_network_type
 Specifies the type of network link. Possible values are
 native, broadcast, and p2p. The default value is native. To
 use this argument, you must specify -igp_protocol ospf.
 native - Specifies the interface on OSPF session uses the
 adjacency implied by the port-type. Use this setting
 to override the physical link type to emulate a
 broadcast adjacency over POS, or a point-to-point
 adjacency over Ethernet.
 broadcast - Ethernet links use a Broadcast adjacency.
 p2p - POS links use a P2P (point-to-point) adjacency.
 -igp_ospfv2_router_priority
 Specifies the router priority of the emulated router. Set the
 router priority to a higher or lower value to influence the
 designated router (DR) and backup designated router
 (BDR) selection process. Possible values range from 0
 to 255. The default is 0. To use this argument, you must
 specify -igp_protocol ospf.
 -igp_ospfv2_interface_cost
 Indicates the cost of the interface connecting the emulated
 router to the neighbor DUT router. Possible values range
 from 1 to 65535. The default is 1. To use this argument, you
 must specify -igp_protocol ospf.

 -igp_ospfv2_options
 A bit mask that specifies the settings of the Options field
 in Hello packets sent to the DUT. The Options field
 describes the optional OSPF capabilities of the router.
 Section A.2 in RFC 2328 describes the Options field for
 OSPFv2. Only OSPFv2 is involved in MVPN, so not all the
 values for v3 of this switch are available in this
 command. To use this argument, you must
 specify -igp_protocol ospf.
 Use hexadecimal for this value. The default for OSPFv2 is
 0x02, which sets the E-bit (binary 00000010).
 TOS: 0x01: bit of "Type Of Service". This bit is not
 available in this command.
 E: 0x02: External Routing: This bit specifies the way
 AS-external-LSAs are flooded. When this bit is
 set, the area type is external_capable; when this
 bit is cleared, the area type is stub.
 MC: 0x04: Multicast: This bit specifies whether IP
 multicast datagrams are forwarded.
 NP: 0x08: This bit specifies the handling of Type-7
 LSAs.
 EA: 0x10: External Attribute: This bit specifies the
 router's willingness to receive and forward
 External-Attributes-LSAs.
 R: 0x10: This bit indicates if the originator is an active
 router.
 DC: 0x20: Demand Circuit: This bit specifies the router's
 handling of demand circuits.
 O: 0x40: Opaque: This bit specifies the router's
 willingness to receive and forward Opaque
 LSAs.
MVPN Functions
613
 -igp_ospfv2_authentication_mode
 Specifies the type of authentication to be used. To use this
 argument, you must specify -igp_protocol ospf.
 Possible values are none, simple and md5. The default
 value is none.
 none - Indicates that no attributes have been set (no
 authentication).
 simple - Indicates the simple authentication will be used.
 The packet is authenticated by the receiving router if
 the password matches the authentication key that is
 included in the packet. This method provides little
 security because the authentication key can be
 learned by capturing packets.
 md5 - Use the MD5 key ID for authentication.
 The packet contains a cryptographic checksum, but
 not the authentication key itself. The receiving router
 performs a calculation based on the MD5 algorithm
 and an authentication key ID. The packet is
 authenticated if the calculated checksum matches.
 This method provides a stronger assurance that
 routing data originated from a router with a valid
 authentication key.
 -igp_ospfv2_authentication_password
 Indicates the password used in OSPFv2 authentication. Use this
 argument only if -igp_ospfv2_authentication_mode is set to simple
 or md5. When you specify -igp_ospfv2_authentication_mode
 simple, the value of this argument should be of 1-8
 alphanumeric characters. When you specify
 -igp_ospfv2_authentication_mode md5, the value of this
 argument should be of 1-16 alphanumeric characters.
 The default value is "spirent".
 -igp_ospfv2_authentication_md5_key
 Specifies the MD5 key used in OSPFv2 authentication.
 Possible values range from 0 to 255. The default is 1.
 Use this argument only if the
 -igp_ospfv2_authentication_mode option is set to md5.
 -igp_ospfv2_graceful_restart_enable
 Enables or disables the ospfv2 graceful restart. Possible
 values are 0 (disable) and 1 (enable). If it is set to 1, enables
 graceful restart which adds a RESTART_CAP object in HELLO
 messages. Enabling graceful restart will automatically enable
 HELLO messages. This option is only applicable when
 you specify -igp_protocol ospf. The default value
 is 0.
 -igp_ospfv2_graceful_restart_type
 Specifies the type of graceful restart to be used by ospfv2
 session. Possible values are none, rfc_standard, and
 ll_signalling. The default value is none. Use this argument
 only if -igp_ospfv2_graceful_restart_enable is enabled.
 none - Indicates there is no graceful restart.
 rfc_standard - Defines that the graceful restart follows RFC
 3623.

 ll_signalling - Indicates the Link-Layer Signaling.
 -igp_ospfv2_bfd_enable
 Enables or disables BFD on the OSPF interface on the DUT.
 Possible values are 1 (enable) and 0 (disable). The default
 value is 0. This argument is applicable only when
 -igp_protocol is set to ospf. 
MVPN Functions
614
 -igp_isis_level
 Specifies the IS-IS level used in the customer side. It
 defines the type of adjacency Spirent HLTAPI establishes
 with the DUT. The default value is level2. Use this
 argument only if the -igp_protocol is set to isis. Possible
 values are described below:
 level1 - Specifies that Spirent HLTAPI will establish
 adjacency on Level 1 (intra-area).
 level2 - Specifies that Spirent HLTAPI will establish
 adjacency on Level 2 (inter area).
 level1_and_2 - Specifies that Spirent HLTAPI will
 establish adjacency on both Level 1 and Level 2.
 -igp_isis_network_type
 Specifies the IS-IS network type at the customer side.
 Possible values are broadcast and p2p. The default value is
 broadcast. Use this argument only if the -igp_protocol is set
 to isis.
 broadcast - Indicates that the network is a broadcast
 network, as in an Ethernet connection. This is the
 default.
 ptop - Point-to-point (PTOP). A network formed by a
 point-to-point link between two routers.
 -igp_isis_router_priority
 Sets the priority for the emulated IS-IS router. IS-IS routers
 use the priority to elect the designated and back-up
 designated routers. The default is 0. Possible
 values are 0 to 127. Use this argument only if the
 -igp_protocol is set to isis.
 -igp_isis_area1
 Specifies the mandatory area address. You must specify at
 least one address. Spirent HLTAPI supports up to three
 addresses per emulated router. Use this argument only if the
 -igp_protocol is set to isis.
 -igp_isis_area2
 Specifies the optional area address. Use this argument only
 if the -igp_protocol is set to isis. The default is "".
 -igp_isis_area3
 Specifies the optional area address. Use this argument only
 if the -igp_protocol is set to isis. The default is "".
 -igp_isis_circuit_id
 Specifies the circuit ID for the IS-IS session. Possible
 values range from 0 to 255. The default value is 1. Use this
 argument only when the -igp_protocol is set to isis.
 -igp_isis_authentication_mode
 Specifies the type of authentication to be used. To use this
 argument, you must specify -igp_protocol isis.
 Possible values are none, simple and md5. The default
 value is none.
 none - Indicates that no attributes have been set (no
 authentication).
 simple - Indicates that simple authentication will be used.
 The packet is authenticated by the receiving router if
 the password matches the authentication key that is
 included in the packet. This method provides little
 security because the authentication key can be
 learned by capturing packets.
MVPN Functions
615
 md5 - Use the MD5 key ID for authentication.
 The packet contains a cryptographic checksum, but
 not the authentication key itself. The receiving router
 performs a calculation based on the MD5 algorithm
 and an authentication key ID. The packet is
 authenticated if the calculated checksum matches.
 This method provides a stronger assurance that
 routing data originated from a router with a valid
 authentication key.
 -igp_isis_authentication_password
 Indicates the password used in IS-IS authentication. Use this argument
 only if -igp_isis_authentication_mode is set to simple
 or md5. When you specify -igp_isis_authentication_mode
 simple, the value of this argument should be of 1-8
 alphanumeric characters. When you specify
 -igp_isis_authentication_mode md5, the value of this
 argument should be of 1-16 alphanumeric characters.
 The default value is "spirent".
 -igp_isis_authentication_md5_key
 Specifies the MD5 key used in IS-IS authentication.
 Possible values range from 0 to 255. The default is 1.
 Use this argument only when the
 -igp_isis_authentication_mode option is set to md5.

 -igp_isis_metric_mode
 Specifies the length of the metric field in the Link State
 Path (LSP) packet. To use this argument, you must specify
 -igp_protocol isis. The default value is narrow_and_wide.
 Possible values are described below:

 narrow - Router advertises routes with a narrow (6-bit)
 metric.

 wide - Router advertises routes with a wide (24- or 32-bit)
 metric (required for IS-IS TE).
 narrow_and_wide - Router advertises the same route with
 both metrics.
 -igp_isis_l1_metric
 Metric of the emulated router interface. It is advertised in
 the Level 1 IS Neighbors metric TLV and is used for Level 1
 LSPs. It is blank and disabled if -igp_isis_level is set to
 level2 or if -igp_isis_metric_mode is set to wide. Use this
 argument only when you specify -igp_protocol isis. Possible
 values range from 1 to 63. The default is 1.
 -igp_isis_l1_wide_metric
 Indicates the three-octet metric of a link from the emulated
 router to the DUT. It is advertised in the Extended IS
 Reachability TLV of the L1 LSP originated by the emulated
 router. It is blank and disabled if -igp_isis_level is set to
 level2 or if -igp_isis_metric_mode is set to narrow. Possible
 values range from 0 to 16777215. The default is 1.
 -igp_isis_l2_metric
 Metric of the emulated router interface. It is advertised in
 the Level 2 IS Neighbors metric TLV and is used for Level
 2 LSPs. It is blank and disabled if -igp_isis_level is set to
 level1 or if -igp_isis_metric_mode is set to wide. Use this
 argument only when you specify -igp_protocol isis.
 Possible values range from 1 to 63. The default is 1.
 -igp_isis_l2_wide_metric
 Indicates the three-octet metric of a link from the emulated
 router to the DUT. It is advertised in the Extended IS
 Reachability TLV of the L2 LSP originated by the emulated
 router. It is blank and disabled if -igp_isis_level is set to
MVPN Functions
616
 level1 or if -igp_isis_metric_mode is set to narrow. Possible
 values range from 0 to 16777215. The default is 1.
 -igp_isis_graceful_restart_enable
 Enables or disables the IS-IS graceful restart. Possible
 values are 0 (disable) and 1 (enable). If it is set to 1, enables
 graceful restart which adds a
 RESTART_CAP object in HELLO messages.
 Enabling graceful restart will automatically enable
 HELLO messages. This option is only applicable when
 you specify -igp_protocol isis. The default value
 is 0.
 -igp_isis_hello_padding
 Enables or disables hello padding. When you enable this
 option, Spirent HLTAPI pads all Hello packets to the ISO
 standard sized Protocol Data Unit (PDU). When you
 disable this option, Spirent HLTAPI pads the initial Hello
 packet and use a smaller PDU for subsequent Hello
 packets. This option is only applicable when you specify
 -igp_protocol isis. Possible values are 1 (enable) and 0
 (disable). The default is 1.
 -igp_isis_bfd_enable
 Enables or disables the Bidirectional Forwarding Detection
 (BFD) on IS-IS session. Possible values are 1 (enable) and
 0 (disable). When it is set to 1, Spirent HLTAPI creates a
 BFD session with IP addressing matching provider-side
 routers. The default value is 0. To use this argument,
 you must specify -igp_protocol isis.

 -p_router_enable
 Enables or disables the emulation of provider routers in the
 test. When it is set to 0, only provider edge routers will be
 emulated or simulated. Possible values are 1 and 0. The
 default is 1.
 -p_router_number_per_sub_interface
 The number of provider routers per provider-side
 sub-interface. Only 1 emulated provider router (P router) is
 created per sub-interface. If this number is greater than 1,
 the additional P routers are simulated through the IGP
 protocol routes. The topology for the additional P routers is
 determined by the -p_router_topology_type option. Possible
 values range from 1 to 65535. The default is 1. Use this
 argument only when -p_router_enable is enabled.
 -p_router_topology_type
 Defines the topology of the provider network. Possible
 values are tree and grid. The default value is tree. Use this
 argument only when -p_router_enable is enabled.
 -p_router_loopback_ipv4_addr
 Defines the first loopback address of emulated P routers.
 The value of this option should be in IPv4 format. The
 default value is 192.0.1.1. Use this argument only when
 -p_router_enable is enabled.
 -p_router_loopback_ipv4_addr_step
 Indicates the step applied to the loopback addresses for the
 emulated P routers. The value of this option should be in
 IPv4 format. The default is 0.0.1.0. Use this argument
 only when -p_router_enable is enabled.
 -p_router_interface_ipv4_addr
 Specifies the starting IPv4 interface address of the
 emulated P routers. The default is 1.0.0.1. Use this argument
 only when -p_router_enable is enabled.
 -p_router_interface_ipv4_addr_prefix_length
 Specifies the IP prefix length on the simulated P router IPv4
MVPN Functions
617
 interfaces. Possible values range from 0 to 32. The default
 is 24. Use this argument only when -p_router_enable is enabled.
 -pe_router_number_per_sub_interface
 Defines the number of provider-edge (PE) routers created
 on each provider-side sub-interface. Possible values range
 from 1 to 65535. The default is 1. Use this argument
 only when -p_router_enable is enabled.
 -pe_router_loopback_ipv4_addr
 Specifies the starting provider-side PE router IPv4 address.
 The default is 10.0.0.2. Use this argument only when
 -p_router_enable is enabled.
 -pe_router_loopback_ipv4_addr_step
 Defines the step size by which the provider-side PE router
 is incremented. The default is 0.0.0.1. Use this argument
 only when -p_router_enable is enabled.

 -bgp_route_reflector_enable
 Enables the usage of core side route reflectors. When this
 attribute is enabled, Spirent HLTAPI emulates a BGP
 route reflector on one (or more) of the generated P routers.
 The DUT should be set up to peer with the route reflector
 instead of the PE routers (which Spirent HLTAPI
 simulates through advertised routes). Possible values are 1
 (enable) and 0 (disable). The default is 0.
 -bgp_route_reflector_per_sub_interface
 Specifies the number of route reflectors per provider-side
 sub-interface. Possible values are 1 to 65535. The default is
 1. You can use this argument only when
 -bgp_route_reflector_enable is enabled.
 -bgp_route_reflector_per_pe
 Specifies the number of route reflectors per provider edge
 router. Possible values are 1 to 65535. The default is
 1. You can use this argument only when
 -bgp_route_reflector_enable is enabled.

 -bgp_route_reflector_loopback_ipv4_addr
 Specifies the starting loopback IPv4 address of the route
 reflectors. The default is 7.7.7.7. You can use this argument
 only when -bgp_route_reflector_enable is enabled.
 -bgp_route_reflector_loopback_ipv4_addr_step
 The amount by which to increment provider-side route
 reflector loopback IP address
 (-bgp_route_reflector_loopback_ipv4_addr) for each
 subsequent route reflector. The default value is 0.0.0.1. You
 can use this argument only when
 -bgp_route_reflector_enable is enabled.
 -bgp_route_reflector_cluster_id
 Specifies the starting cluster ID of the route reflectors. A
 router reflector cluster normally has a single route reflector.
 To avoid a single point of failure, you can configure a
 cluster with more than one route reflector. If
 more than one route reflector is configured for a cluster, all
 the route reflectors in the cluster must be configured with a
 cluster ID. This ID enables route reflectors to recognize
 route updates from route reflectors in the same cluster. The
 default value is 0.0.0.0. The value of this option should be
 in IPv4 format. You can use this argument only
 when -bgp_route_reflector_enable is enabled.
 -bgp_route_reflector_cluster_id_step
 The amount by which to increment cluster ID
 (-bgp_route_reflector_cluster_id) for each
 subsequent route reflector. The default value is 0.0.0.1.
MVPN Functions
618
 You can use this argument only
 when -bgp_route_reflector_enable is enabled.
 -vrf_number
 Specifies the number of VPN Routing and
 Forwarding tables (VRFs) to be configured. VPN Routing
 and Forwarding table, on the PE router, that is configured
 for a particular interface or sub-interface. The table
 includes the routing information that defines a customer
 VPN site attached to a PE router. Possible values range
 from 1 to 65535. The default is 1.
 -vrf_rd_assignment
 Specifies the route distinguisher assignment mode.
 Possible values are use_rt and manual. The default value is
 use_rt.
 use_rt - Uses the Route Target field for all Route
 Distinguishers in the VPN.

 manual - Manually configures Route Distinguishers by
 setting customer or provider RD start, step per VPN,
 step per CE.

 -vrf_route_target_start
 Specifies the starting route target for the VPN. The Route
 Target identifies a set of sites to which a PE router
 distributes routes. The format should be
 "AS-Number:value" or "IPv4-Address:value". The default
 value is 1:00.
 -vrf_route_target_step
 Specifies the step size in which the route target is
 incremented. The format should be
 "AS-Number:value" or "IPv4-Address:value". The default
 value is 1:00.

 -customer_ce_vrf_assignment
 Determines how VRFs are assigned to customer side
 Customer Edge routers (CE).
 round_robin - The first CE that is created is assigned to the
 first VRF. The second CE that is created is assigned
 to the second VRF, and so forth. When the specified
 number of VRFs is reached, the VRF assignment
 repeats from the first VRF.

 sequential - CEs that are created are assigned to the first
 VRF until the calculated number of CEs per VRF is
 reached. Additional CEs are assigned to the second
 and subsequent VRFs in the same fashion.
 -customer_ce_bgp_as
 Specifies the starting number of BGP AS on customer side.
 Possible values range from 1 to 65535. The default is 1.
 -customer_ce_bgp_as_step_per_ce_enable
 Enables or disables the step value for AS numbers across CE
 routers on customer side. Possible values are 0 and 1. The
 default is 0. You can use this argument when
 -customer_ce_routing_protocol is set to bgp or mixed.

 -customer_ce_bgp_as_step_per_ce
 Indicates the step value for AS numbers across CE routers
 on customer side. Possible values range from 0 to 65535.
 The default is 1. Use this argument only when
 -customer_ce_bgp_as_step_per_ce_enable is enabled.
 -customer_ce_bgp_as_step_per_vrf_enable
 Enables or disables the step value for CE AS numbers across VPNs.
 Possible values are 1 (enable) and 0 (disable). The default is 1.
MVPN Functions
619
 You can use this argument when -customer_ce_routing_protocol is
 set to bgp or mixed.
 -customer_ce_bgp_as_step_per_vrf
 Specifies the step value for AS numbers across VPNs.
 Possible value range from 0 to 65535. The default is 1. Use
 this option only when
 -customer_ce_bgp_as_step_per_vrf_enable is enabled.
 -customer_ce_bgp_4byte_as_enable
 Enables or disables 4-byte AS numbers on customer side.
 Possible values are 1 (enable) and 0 (disable). When it is set
 to 1, you can specify 4-byte AS numbers. The default value
 is 0. You can use this argument when
 -customer_ce_routing_protocol is set to bgp or mixed.
 -customer_ce_bgp_4byte_as
 Specifies the starting CE 4-byte AS number on customer
 side. The default value is 1:01. You can specify this
 argument only when the
 -customer_ce_bgp_4byte_as_enable option is enabled.
 -customer_ce_bgp_4byte_as_step_per_ce_enable
 Enables or disables step value for CE 4-byte AS numbers
 across CE routers. Possible values are 1 (enable) and 0
 (disable). If it is set to 1, you can specify the step value for
 CE 4-byte AS numbers across CE routers. The default is 0. You can
 use this argument when -customer_ce_routing_protocol is set to
 bgp or mixed and -customer_ce_bgp_4byte_as_enable is enabled.
 -customer_ce_bgp_4byte_as_step_per_ce
 Specifies the step value for CE 4-byte AS numbers
 across CE routers. Possible values range from 0 to 65535. The
 default value is 1. Use this option only when the
 -customer_ce_bgp_4byte_as_step_per_ce_enable option is enabled.
 -customer_ce_bgp_4byte_as_step_per_vrf_enable
 Enables or disables step value for CE 4-byte AS numbers
 across VPNs. Possible values are 1 (enable) and 0
 (disable). If it is set to 1, you can specify the step value for
 CE 4-byte AS numbers across VPNs. The default is 1. You can use
 this argument when -customer_ce_routing_protocol is set to bgp or
 mixed and -customer_ce_bgp_4byte_as_enable is enabled.
 -customer_ce_bgp_4byte_as_step_per_vrf
 Specifies the step value for CE 4-byte AS numbers
 across VPNs. Possible values range from 0 to 65535.
 The default value is 1. Use this option only when the
 -customer_ce_bgp_4byte_as_step_per_vrf_enable option is
 enabled.
 -customer_ce_routing_protocol
 Defines the interior gateway routing protocol used by CEs on the
 customer side. Possible values are bgp, ospf, rip, isis,
 static_route, and mixed. The default value is bgp.

 Possible values are described below:
 bgp - Border Gateway Protocol (BGP).
 ospf - Open Shortest Path First (OSPF) protocol.
 rip - Routing Information Protocol (RIP).

 isis - Intermediate System to Intermediate System (IS-IS)
 protocol.
 static_route - Indicates routes through a data network are
 described by fixed paths (statically). These routes are
 usually entered into the router by the system
 administrator.
MVPN Functions
620

 mixed - Indicates the route between DUT and CE routes are
 described by fixed paths (statically). If it is set to
 mixed, you can specify -customer_ce_bgp_percent,
 -customer_ce_rip_percent,
 -customer_ce_ospf_percent, and
 -customer_ce_isis_percent. The options above are
 used to indicate the percentage of routes to be
 advertised over the protocols to be used.
 -customer_ce_bgp_percent
 Specifies the percentage of customer side CEs using BGP. This
 attribute is only applicable when the
 -customer_ce_routing_protocol attribute is set to mixed. Possible
 values range from 0 to 100. The default value is 0.
 -customer_ce_rip_percent
 Specifies the percentage of customer side CEs using RIP. This
 attribute is only applicable when the
 -customer_ce_routing_protocol attribute is set to mixed. Possible
 values range from 0 to 100. The default value is 0.
 -customer_ce_ospf_percent
 Specifies the percentage of customer side CEs using
 OSPFv2. This attribute is only applicable when the
 -customer_ce_routing_protocol attribute is set to mixed. Possible
 values range from 0 to 100. The default value is 0.
 -customer_ce_isis_percent
 Specifies the percentage of customer side CEs using IS-IS.
 This attribute is only applicable when the
 -customer_ce_routing_protocol attribute is set to mixed.
 Possible values range from 0 to 100. The default value is 0.
 -customer_ce_static_route_percent
 Specifies the percentage of customer side CEs using static
 routes. This attribute is only applicable when the
 -customer_ce_routing_protocol attribute is set to mixed.
 Possible values range from 0 to 100. The default value is 0.
 -customer_rd_start
 Indicates the starting Route Distinguisher for the VPN route
 on customer side. An 8-byte value that is concatenated with
 an IPv4 prefix to create a unique VPN IPv4 prefix.

 There are two types that you can use:

 Type 0 - The administrator sub-field is a 2-byte AS number
 and the assigned sub-field is a 4-byte number
 assigned by the service provider. The format will be:
 n:n, which indicates "administrator:assigned".

 Type 1 - The administrator sub-field is a 4-byte IPv4
 address and assigned sub-field is a 2-byte number
 assigned by the service provider. The format will be
 n.n.n.n:n, which indicates "administrator:assigned".

 The default value is 1:00.
 -customer_rd_step_per_vrf_enable
 Enables or disables the route distinguisher step across VPNs
 on customer side. Possible values are 1 (enable) and 0 (disable).
 When it is set to 1, you can specify the
 -customer_rd_step_per_vrf argument. The default is 1. Use this
 argument only when the -vrf_rd_assignment argument is set to
 manual.
 -customer_rd_step_per_vrf
 Specifies the step size in which the route distinguisher
 across VPNs is incremented. The administrator field of the
 step value is added to the administrator field of the starting
MVPN Functions
621
 route distinguisher and the assigned field of the step value is
 added to the assigned field of the starting route distinguisher.
 The type of the route distinguishers do not have to match,
 although it is desirable for ease of administration. The default
 value is 1:00. Use this argument only when
 -customer_rd_step_per_vrf_enable is enabled.
 -customer_rd_step_per_ce_enable
 Enables or disables the route distinguisher step across CE routers
 on the customer side. Possible values are 1 (enable) and 0
 (disable). When it is set to 1, you can specify
 the -customer_rd_step_per_ce argument. The default is 0.
 Use this argument only when the -vrf_rd_assignment
 argument is set to manual.
 -customer_rd_step_per_ce
 Specifies the step value for additional route distinguishers for
 each CE router. The administrator field of the step value is
 added to the administrator field of the starting route
 distinguisher and the assigned field of the step value is added
 to the assigned field of the starting route distinguisher. The
 type of the route distinguishers do not have to match, although
 it is desirable for ease of administration. The default value is
 0:00. Use this argument only when -customer_rd_step_per_ce_enable
 is enabled.
 -provider_pe_vrf_assignment
 Indicates how VPNs are assigned to Provider Edge routers
 (PEs). Possible values are vpn_per_pe and pe_per_vpn. The
 default value is vpn_per_pe.
 vpn_per_pe - Indicates VPNs will be distributed across a
 set of PEs.
 pe_per_vpn - Indicates PEs will be distributed across a set
 of VPNs.
 -provider_pe_vrf_count
 Specifies the number of items (VPNs or PEs) assigned to each
 target (VPN or PE). When the -provider_pe_vrf_assignment argument
 is set to vpn_per_pe, this argument indicates the number of VPNs
 assigned to each PE and possible values range from 1 to the
 number of VPNs. When the -provider_pe_vrf_assignment argument is
 set to pe_per_vpn, this argument indicates the number of PEs
 assigned to each VPN and possible values range from 1 to the
 number of PEs. The default is 1.

 If this number is less than the maximum number of items, and if
 there is more than one target, the specified number of items is
 assigned in round-robin fashion to each target.
 Use this argument only when -provider_pe_vrf_all_assign
 is set to 0.
 -provider_pe_vrf_all_assign
 Determines whether each PE uses all VPNs.
 Possible values are 1 (enable) and 0 (disable). If it is set to
 0, you can manually set the number of VPNs for each PE
 will advertise routes for. The default value is 0.
 -provider_ce_bgp_as_enable
 Enables or disables the BGP AS number of the CEs on the provider
 side. Possible values are 1 (enable) and 0 (disable). When it is
 set to 1, you can use CE BGP AS related options. The default
 value is 0.
 -provider_ce_bgp_as
 Indicates the starting BGP AS number on customer side.
 Possible values range from 1 to 65535. The default value is
 1. Use this argument only when you enable the
 -provider_ce_bgp_as_enable argument.
MVPN Functions
622
 -provider_ce_bgp_as_step_per_ce_enable
 Enables or disables the step value for additional CE BGP
 AS number across CEs on the provider side. Possible values are 1
 (enable) and 0 (disable). The default is 0.
 -provider_ce_bgp_as_step_per_ce
 Defines the step value for the additional CE BGP AS
 number across CEs on the provider side. Possible values range
 from 1 to 65535. The default value is 1. This argument is only
 applicable when the -provider_ce_bgp_as_step_per_ce_enable option
 is enabled.
 -provider_ce_bgp_as_step_per_vrf_enable
 Enables or disables the step value for additional CE BGP AS
 number across VPNs. Possible values are 1 (enable) and 0
 (disable). The default is 1.
 -provider_ce_bgp_as_step_per_vrf
 Defines the step value for the additional CE BGP AS number across
 VPNs. Possible values range from 1 to 65535. The default value is
 1. This argument is only applicable when the
 -provider_ce_bgp_as_step_per_vrf_enable option is enabled.
 -provider_ce_bgp_4byte_as_enable
 Enables or disables the 4-byte AS numbers on the provider side.
 Possible values are 1 (enable) and 0 (disable). The default value
 is 0.
 -provider_ce_bgp_4byte_as
 Defines the first 4-byte AS number of CEs on the provider side.
 The default value is 1:01. Use this argument only when the
 -provider_ce_bgp_4byte_as_enable attribute is enabled.
 -provider_ce_bgp_4byte_as_step_per_ce_enable
 Enables or disables the 4-byte AS step value for additional CE
 BGP ASs across CEs on the provider side. Possible values are 1
 (enable) and 0 (disable). The default is 0.

 -provider_ce_bgp_4byte_as_step_per_ce
 Specifies the 4-byte AS step value for the additional CE ASs
 across CEs on the provider side. Possible values range from 1 to
 65535. The default value is 1. This argument is applicable only
 when -provider_ce_bgp_4byte_as_step_per_ce_enable is enabled.
 -provider_ce_bgp_4byte_as_step_per_vrf_enable
 Enables or disables the CE BGP 4-byte AS step per VPN on the
 provider side. Possible values are 1 (enable) and 0 (disable).
 When it is set to 1, you can specify the
 -provider_ce_bgp_4byte_as_step_per_vrf attribute. The default
 value is 1.

 -provider_ce_bgp_4byte_as_step_per_vrf
 Indicates the step value for the additional CE 4-byte AS numbers
 across VPNs on the provider side. Possible values range from 1 to
 65535. The default value is 1.
 -provider_rd_start
 Indicates the starting Route Distinguisher for the VPN route on
 the provider side. An 8-byte value that is concatenated with an
 IPv4 prefix to create a unique VPN IPv4 prefix.

 There are two types that you can use:

 Type 0 - The administrator sub-field is a 2-byte AS number
 and the assigned sub-field is a 4-byte number
 assigned by the service provider. The format will be:
 n:n, which indicates "administrator:assigned".

 Type 1 - The administrator sub-field is a 4-byte IPv4
MVPN Functions
623
 address and assigned sub-field is a 2-byte number
 assigned by the service provider. The format will be
 n.n.n.n:n, which indicates "administrator:assigned".

 The default value is 1:00.
 -provider_rd_step_per_vrf_enable
 Enables or disables the step value for additional route
 distinguishers in each VRF on the provider side. The
 administrator field of value is added to the administrator field
 of the starting route distinguisher, and the assigned field of
 the step value is added to the assigned field of the starting
 route distinguisher. The type of the route distinguishers do not
 have to match, although it is desirable for ease of
 administration. Possible values are 1 (enable) and 0 (disable).
 The default is 1. This argument is applicable only when the
 -vrf_rd_assignment argument is set to manual.

 -provider_rd_step_per_vrf
 Specifies the step value for the provider-side additional route
 distinguisher across VPNs. The default value is 1:00. Use this
 argument only when -provider_rd_step_per_vrf_enable is enabled.
 -provider_rd_step_per_ce_enable
 Enables or disables the step value for the additional
 provider-side route distinguisher across CEs. Possible values are
 0 and 1. When it is set to 1, you can specify the step value for
 the additional provider-side route distinguisher across CEs. The
 default value is 0.
 -provider_rd_step_per_ce
 Specifies the step value for the additional
 provider-side route distinguisher across CEs. The default
 value is 1:00. Use this argument only when
 -provider_rd_step_per_ce_enable is enabled.
 -multicast_default_mdt_addr
 Specifies the IP address of the first default multicast
 distribution tree (MDT) for multicast traffic. MDT provides the
 information needed to interconnect the same MVRFs that exist on
 the different PE routers. MVPN supports two MDT types: the
 default MDT and data MDT. The default MDT is a permanent channel
 for Protocol Independent Multicast (PIM) control messages and
 low-bandwidth streams between all PE routers in a particular
 multicast domain. The values of this argument should be in IPv4
 format. The default value is 239.1.1.1.
 -multicast_default_mdt_increment
 Defines the increment used to generate default MDT addresses for
 multicast traffic. The default value is 0.0.0.1.
 -multicast_data_mdt_enable
 Enables or disables the data MDT address for multicast
 traffic. Data MDTs are optional. If enabled, they are
 dynamically created to provide optimal paths for
 high-bandwidth transmissions, such as full-motion video,
 that do not need to be sent to every PE router. Possible
 values are 1 (enable) and 0 (disable). The default value is 0.
 -multicast_data_mdt_addr
 Specifies the IP address of the first MDT for multicast traffic.
 The value of this argument must be in IPv4 format. The default
 value is 230.1.1.2. Use this argument only when
 -multicast_data_mdt_enable is enabled.
 -multicast_data_mdt_increment
 Defines the increment used to generate data MDT addresses for
 multicast traffic. The default value is 0.0.0.1. Use this
 argument only when -multicast_data_mdt_enable is enabled. 
MVPN Functions
624
 -multicast_receiver_have_same_group
 Enables or disables that all receivers are subscribed to all
 groups. Possible values are 1 (enable) and 0 (disable). When it
 is set to 1, you can subscribe all the receivers to all groups,
 which allows the receivers to receive the PIM control messages
 and multicast traffic that are sent by other receivers. The
 default value is 1.
 -multicast_group_count
 Defines the number of multicast groups. Possible values
 range from 1 to 65535. The default value is 1.
 -multicast_group_addr_start
 Defines the starting multicast group address. The value of
 this argument must be in IPv4 format. The default value is
 225.0.0.1.
 -multicast_group_addr_increment
 Defines the increment used to generate multicast group addresses.
 The value of this argument must be in IPv4 format. The default
 value is 0.0.0.1.
 -multicast_group_increment_per_interface
 Enables or disables the increment used to generate
 multicast group addresses across interfaces (ports or
 VLANs). Possible values are 1 (enable) and 0 (disable).
 The default value is 0. This argument is only applicable
 only when the -multicast_receiver_have_same_group
 argument is disabled.
 -multicast_group_addr_increment_per_vlan
 Specifies increment used to generate multicast group
 addresses across VLANs. This argument is applicable
 only when -multicast_group_increment_per_interface is
 enabled. The default value is 0.0.1.0. The value of this
 argument must be in IPv4 format.
 -multicast_group_addr_increment_per_port
 Specifies increment used to generate multicast group addresses
 across ports. This argument is applicable only when
 -multicast_group_increment_per_interface is enabled. The default
 value is 0.0.1.0. The value of this argument must be in IPv4
 format.
 -multicast_multiple_sender_enable
 Enables or disables multiple multicast senders. Possible values
 are 1 (enable) and 0 (disable). When it is set to 0, Spirent
 HLTAPI creates a single source (a host). When it is set to 0,
 Spirent HLTAPI creates multicast sources (a host block), and you
 can determine the number of hosts in the host block by specifying
 the -multicast_multiple_sender_count argument. The default value
 is 0.
 -multicast_multiple_sender_count
 Defines the number of multiple multicast senders. Possible
 values range from 1 to 65535. The default value is 1.This
 argument is applicable only when the
 -multicast_multiple_sender_enable argument is enabled.
 -multicast_provider_pim_protocol
 Specifies the PIM protocol to be used on provider side. Possible
 values are pim_sm and pim_ssm. The default value is pim_sm.
 pim_sm - All three group types are supported: (S,G), (*,G),
 and (*,*,RP).
 pim_ssm - Join/Prune messages are only sent for (S, G)
 groups. (*,*,RP) or (*,G) groups cannot be added.
 -multicast_provider_bsr_enable
 Enables or disables Bootstrap messages on multicast provider
MVPN Functions
625
 side. Possible values are 1 (enable) and 0 (disable). The default
 value is 0. When it is set to 1, PIM routers enabled for
 bootstrap routing functionality that generates Bootstrap messages
 periodically. This argument is only applicable when you specify
 -multicast_provider_pim_protocol pim_sm.
 -multicast_provider_rp_addr
 Specifies the IP address of the provider-side Rendezvous Point (RP)
 router, a PIM CSM router configured as the root of a multicast
 distribution tree. Required for (*,G) and (*,*,RP) groups. The
 value of this argument must be in IPv4 format. The default value
 is 192.0.2.0. This argument is only applicable when you specify
 -multicast_provider_pim_protocol pim_sm.
 -multicast_customer_pim_protocol
 Specifies the PIM protocol to be used on customer side.
 Possible values are pim_sm and pim_ssm. The default
 value is pim_sm.
 pim_sm - All three group types are supported: (S,G), (*,G),
 and (*,*,RP).
 pim_ssm - Join/Prune messages are only sent for (S, G)
 groups. (*,*,RP) or (*,G) groups cannot be added.
 -multicast_customer_bsr_enable
 Enables or disables Bootstrap messages on multicast customer
 side. Possible values are 1 (enable) and 0 (disable). The default
 value is 0. When it is set to 1, PIM routers enabled for
 bootstrap routing functionality that generates Bootstrap messages
 periodically. This argument is applicable only when
 -multicast_customer_pim_protocol is set to pim_sm.

 -multicast_customer_rp_addr
 Specifies the IP address of the customer-side Rendezvous Point
 (RP) router, a PIM CSM router configured as the root of a
 multicast distribution tree. Required for (*,G) and (*,*,RP)
 groups. The value of this argument must be in IPv4 format. The
 default value is 192.0.2.0. This argument is applicable only when
 -multicast_customer_pim_protocol is set to pim_sm.
 -multicast_customer_rp_increment
 Specifies the increment value used to generate RP addresses on
 the customer side. The value of this argument must be in IPv4
 format. The default value is 0.0.0.1. This argument is applicable
 only when -multicast_customer_pim_protocol is set to pim_sm.
 -customer_route_type
 Specifies the type of the route advertised by emulated CEs on
 customer side. Possible values are internal and external. The
 default value is internal. This argument is applicable only when
 the -customer_ce_routing_protocol option includes OSPF and IS-IS.
 internal - Indicates that the route and the CE that advertises
 the route are in the same AS.
 external - Indicates that the route and the CE that advertises
 the route are not in the same AS.
 -customer_route_count_per_ce
 Specifies the number of routers to be added to each CE on
 customer side. Possible values range from 1 to
 2147483647. The default is 1.
 -customer_route_start
 Indicates the first route advertised by emulated CE routers on
 customer side. Each subsequent route is incremented by the values
 specified by the -customer_route_step argument and the
 -customer_route_prefix_length argument. The default value is
 10.1.1.0. The value of this argument must be in IPv4 format.
MVPN Functions
626
 -customer_route_step
 Specifies the step size in which the route address on customer
 side is incremented. The value of this argument is IPv4 format.
 The default value is 0.0.1.0.
 -customer_route_prefix_length
 Specifies the prefix length of route addresses on customer side.
 Possible values range from 1 to 32. The default value is 24.
 -customer_route_overlap
 Enables or disables route overlap on customer side. Possible
 values are 1 (enable) and 0 (disable). When it is set to 1, all
 VPNs advertise the same routes. For example, a CE in VPN1
 advertises Route0 and Route1, and a CE in VPN2 also advertises
 Route0 and Route1. When it is set to 0, each VPN advertises
 unique routes. For example, a CE in VPN1 advertises Route0 and
 Route1, and a CE in VPN 2 advertises Route2 and Route3. The
 default value is 0.
 -provider_route_count_per_ce
 Specifies the number of simulated CE routes that appear to
 be connected behind the PE. Possible values range from 1 to
 2147483647. The default value is 1.
 -provider_route_start
 Specifies the starting route address on provider side. The value
 of this argument must be in IPv4 format. The default value is
 110.1.1.0.
 -provider_route_step
 Specifies the step size in which the route address on provider
 side is incremented. The value of this argument is IPv4 format.
 The default value is 0.0.1.0.
 -provider_route_prefix_length
 Specifies the prefix length of route addresses on provider side.
 Possible values range from 1 to 32. The default value is 24.
 -provider_route_overlap
 Enables or disables route overlap on provider side. Possible
 values are 1 (enable) and 0 (disable). When it is set to 1, all
 VPNs advertise the same routes. For example, a CE in VPN1
 advertises Route0 and Route1, and a CE in VPN2 also advertises
 Route0 and Route1. When it is set to 0, each VPN advertises
 unique routes. For example, a CE in VPN1 advertises Route0 and
 Route1, and a CE in VPN 2 advertises Route2 and Route3. The
 default value is 0.
 -vrf_route_mpls_label_type
 Defines the method by which labels are assigned within a traffic
 block. Possible values are label_per_site and label_per_route.
 The default is label_per_site.
 label_per_site - Specifies that all routes in one traffic route
 are advertised with the same label.
 label_per_route - Indicates that each route in one traffic
 route is advertised with a unique label.
 -vrf_route_mpls_label_start
 Specifies the first MPLS label to be assigned to VPN routes on
 provider side. Possible value range from 1 to 1048575. The
 default value is 16.
 -traffic_frame_size
 Indicates the traffic frame size. Possible values range from 12
 to 16383. The default value is 1280.
 -traffic_analyzer_enable
 Determines whether traffic analyzers on the provider side ports
 are created. Possible values are 1 (enable) and 0 (disable). When
MVPN Functions
627
 it is set to 1, Spirent HLTAPI creates traffic analyzers on the
 provider side ports. The default value is 0. Use this option only
 when -multicast_traffic_flow_direction is set to
 customer_to_provider or customer_to_all_other.
 -traffic_load_percent_from_provider_port
 Specifies the load percentage for test traffic from each
 provider-side port. Possible values range from 0 to 100. The
 default value is 10.
 -traffic_load_percent_from_customer_port
 Specifies the load percentage for test traffic from each customer
 side port. Possible values range from 0 to 100. The default value
 is 10.
 -multicast_traffic_flow_direction
 Defines the traffic flow to be created. Possible values are
 described below:
 customer_to_provider - Indicates that the traffic flow is
 from the emulated customer CE devices to the
 emulated provider CE devices, through the DUT.
 This is the default value.

 customer_to_customer - Indicates that the traffic flow is
 from the emulated customer CE devices to other
 emulated customer CE devices, through the DUT.
 customer_to_all_other - Indicates that the traffic flow is
 from the emulated customer CE devices to other
 emulated customer CE devices and provider CE
 devices, through the DUT.
 provider_to_customer - Indicates that the traffic flow is
 from the emulated provider CE devices to the
 emulated customer CE devices, through the DUT.
 -multicast_traffic_source_count
 Defines the number of sources for multicast traffic.
 Possible values range from 1 to 65535. The default value is
 65535.

 -multicast_traffic_all_source_enable
 Determines whether Spirent HLTAPI enables all sources for
 multicast traffic. When it is set to 1, you can enable all
 sources. Possible values are 0 ( disable) and 1 (enable). The
 default value is 1.
 -multicast_traffic_receiver_count
 Defines the number of the receivers for multicast traffic.
 The default value is 1.

 -multicast_traffic_all_receiver_enable
 Determines whether Spirent HLTAPI enables all receivers for
 multicast traffic. When it is set to 1, you can enable all
 sources. Possible values are 0 (disable) and 1 (enable). The
 default value is 1.
 -mdt_switch_over_traffic_enable
 Determines to switch traffic from default MDT to data MDT. When
 it is set to 1, you can switch traffic from default MDT to data
 MDT. Possible values are 1 (enable) and 0 (disable). The default
 is 0. Use this argument only when you enable
 -multicast_default_mdt_addr and specify
 -multicast_traffic_flow_direction provider_to_customer.
 -mdt_switch_over_interval
 Defines the duration between the first MDT join and switching
 from the default MDT to the data MDT. Possible values range from
 0 to 65535. The default value is 60.This argument is applicable
MVPN Functions
628
 only when the -mdt_switch_over_traffic_enable argument is
 enabled.
 -mdt_switch_over_delay
 Specifies the MDT switch over delay time. Possible values
 range from 0 to 65535. The default value is 3. This argument is
 applicable only when the -mdt_switch_over_traffic_enable argument
 is enabled.
 -unicast_traffic_enable
 Determines whether the unicast traffic can be used. Possible
 values are 1 (enable) and 0 (disable). When it is set to 1, you
 can specify the -unicast_traffic_flow_direction argument, the
 -unicast_traffic_stream_group_method argument, and the
 -unicast_traffic_use_single_stream_per_endpoint_pair argument.
 The default is 0.
 -unicast_traffic_flow_direction
 Specifies the type of unicast traffic flows to create. This
 argument is applicable only when the -unicast_traffic_enable
 argument is enabled. Possible values are described below:

 customer_to_core - The traffic flow is from the emulated
 CE devices to the emulated PE devices, through the
 DUT.

 core_to_customer - The traffic flow is from the emulated
 PE devices to the emulated CE device. It runs
 through the emulated P device and the DUT.

 bidirectional - Traffic flow in both directions between the
 emulated CE and the simulated CE devices behind
 the PEs. This is the default value.
 fully_meshed - Traffic flows are created between all CE
 sites within the same VRF that are on different ports.
 -unicast_traffic_stream_group_method
 Determines how to aggregate streams in a stream block. This
 argument is applicable only when the -unicast_traffic_enable
 argument is enabled.

 aggregate - Aggregates all streams into a single stream
 block.
 vpn - Aggregates all streams for a single VPN into a single
 stream block.
 -unicast_traffic_use_single_stream_per_endpoint_pair
 Determines whether to assign a single stream ID to each endpoint
 pair. Possible values are 1 (enable) and 0 (disable). The default
 value is 1 (enable) and 0 (disable). When it is set to 1, each
 endpoint is assigned a single stream ID. When it is set to 0,
 each flow between endpoint pairs is assigned a single stream ID.
 The default value is 0. This argument is applicable only when the
 -unicast_traffic_enable argument is enabled.
Cisco-specific Arguments:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 handle Identifies the handle of the MVPN network topology
 configured by the sth::emulation_mvpn_config
 function.
 traffic_handle Defines the handle of the traffic created by the
 sth::emulation_mvpn_config function.
MVPN Functions
629
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mvpn_config function configures an RFC 2547bis style
 MPLS IP VPN network topologies, creates emulated and simulated CE, P, and
 PE routers, selects and enables routing and labeling protocols, configures
 multicast VPNs, and creates the traffic that is sent between VPNs.
 This command emulates MPLS IP VPN topologies from two points-of-view:
 customer side and provider side. The customer side includes the CE routers
 and routes and IP traffic sent from those devices. This side of the network also
 includes the routing between CE and PE devices (the DUT). The provider side
 includes P and PE devices, IGP and BGP routing, VPN or VRF mapping, and
 labeled IP traffic sent from the provider side to the customer side of the
 network.
 When you write an HLT API that uses Spirent HLTAPI Automation software
 for MVPN tests, you configure a test configuration to emulate MVPN
 networks.
 During a MVPN test, the DUT works as a PE router of the VPN network. Spirent
 HLTAPI customer-side port sets up a control plane session and sends data
 plan packets to PE-CE interface of the DUT. Spirent HLTAPI provider-side
 port sets up a control plane session and sends data plane packets to the
 provider network interface.
 In this context, you can create MVPN test configuration with emulation
 customer-side port and provider-side port. The emulation customer-side port
 acts as a CE device connecting to the local VPN site of DUT PE router. The
 emulation provider-side port acts as the provider network of the MPLS VPN
 connected to the remote VPN site. Each of the two emulated sides can send
 emulated VPN traffic to the DUT, from the local VPN site or from the Remote
 VPN site.
Examples:
 The following example configures a MVPN network topology.
 set cmdStatus [sth::emulation_mvpn_config
 -mode create \
 -dut_loopback_ipv4_addr 220.1.1.1 \
 -dut_as 123 \
 -igp_protocol ospf \
 -mpls_protocol none \
 -p_router_enable 0 \
 -pe_router_number_per_sub_interface 1 \
 -pe_router_loopback_ipv4_addr 1.10.1.1 \
 -pe_router_loopback_ipv4_addr_step 0.0.0.1 \
 -vrf_number 1 \
 -vrf_rd_assignment use_rt \
 -vrf_route_target_start 200:1 \
 -vrf_route_target_step 200:1 \
 -customer_ce_vrf_assignment round_robin \
 -customer_ce_bgp_as 211 \
 -customer_ce_bgp_as_step_per_vrf_enable 1 \
 -customer_ce_bgp_as_step_per_vrf 1 \
 -customer_ce_routing_protocol bgp \
 -provider_pe_vrf_assignment vpn_per_pe \
 -provider_pe_vrf_count 1 \
 -multicast_provider_pim_protocol pim_sm \
 -multicast_provider_rp_addr 220.1.1.1 \
 -multicast_customer_pim_protocol pim_sm \
 -multicast_customer_rp_addr 6.146.1.1 \
 -multicast_customer_rp_increment 0.0.0.1 \
 -multicast_default_mdt_addr 239.192.1.1 \
 -multicast_default_mdt_increment 0.0.0.1 \
 -multicast_data_mdt_enable 0 \
 -multicast_group_count 1 \
 -multicast_group_addr_start 225.0.0.1 \
 -multicast_group_addr_increment 0.0.0.1 \
 -multicast_receiver_have_same_group 1 \
MVPN Functions
630
 -customer_route_type internal \
 -customer_route_count_per_ce 1 \
 -customer_route_start 19.1.1.0 \
 -customer_route_step 0.0.0.1 \
 -customer_route_prefix_length 24 \
 -provider_route_count_per_ce 1 \
 -provider_route_start 119.1.1.0 \
 -provider_route_step 0.0.0.1 \
 -provider_route_prefix_length 24 \
 -multicast_traffic_flow_direction customer_to_provider \
 -multicast_traffic_all_source_enable 1\
 -multicast_traffic_all_receiver_enable 1\
 -unicast_traffic_enable 0\
 -unicast_traffic_flow_direction bidirectional \
 -unicast_traffic_stream_group_method aggregate \
 -traffic_frame_size 1280 \
 -traffic_load_percent_from_provider_port 0.1 \
 -traffic_load_percent_from_customer_port 0.1]
 Sample SUCCESS output
 {status 1} {handle mvpnhandle1} {traffic_handle mvpntraffic1}
 Sample FAILURE output
 {status 0} {log XXX}
Sample Input: See Examples.
Sample Output: See Examples.
Notes: None
End of Procedure Header
sth::emulation_mvpn_control
Name:
 sth::emulation_mvpn_control

Purpose:
 The sth::emulation_mvpn_control function starts or stops a configured MVPN
 topology.
Synopsis:
 sth::emulation_mvpn_control
 -action { start | stop }
 [-handle <mvpn_topology_handle>]

Arguments:
 -action
 Specifies the action to be performed. This argument is
 mandatory. Possible values are described below:
 start - Starts the MVPN network.
 stop - Stops the MVPN network.

 -handle
 Specifies the MVPN network topology to be started or
 stopped.
Cisco-specific Arguments:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
MVPN Functions
631
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mvpn_control function controls the configured MVPN
 topology. You can use the function to perform two actions: starting MVPN
 topology and stopping MVPN topology.
Examples:
 The following example starts a MVPN network topology.
 sth::emulation_mvpn_control -action start -handle $mvpnHdl
 The following example stops a MVPN network topology.
 sth::emulation_mvpn_control -action stop -handle $mvpnHdl
 Sample output for the examples above:
 Success {{status 1} }
 Failure {{status 0} {log xxxxxxx}}
Sample Input: See Examples.
Sample Output: See Examples.
Notes: None
End of Procedure Header
sth::emulation_mvpn_info
Name:
 sth::emulation_mvpn_info
Purpose:
 Retrieves statistics for the configured MVPN topology.
Synopsis:
 sth::emulation_mvpn_info
 -handle <mvpn_topology_handle>
 -mode { bgp | rsvp | ldp | ospfv2 | isis | pim | aggregate }
Arguments:
 -handle
 Specifies the MVPN network on which the information will be
 retrieved. This argument is mandatory.
 -mode
 Determines the information about which protocol will be
 retrieved. This argument is mandatory. Possible values are
 bgp, rsvp, ldp, ospfv2, isis, pim, and aggregate. The default
 value is aggregate. When you specify aggregate, the
 information about all the protocols above will be retrieved.
Return values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
MVPN Functions
632
 port.xxx.device_handle Returns an emulated device handle which
 has protocols running on it for the purpose
 of gathering detailed protocol results.
 The pattern of a certain protocol return key will be
 "port.xxx.device.yyy.protocolxx.ooxx". xxx represents the port handle the
 emulated device is on; yyy represents the emulated device handle the
 protocol running on; protocolxx represents the protocol name like bgp and ldp;
 ooxx represents detailed return key of a certain protocol.
 The statistics that will be returned are listed below:
 BGP protocol information

 port.xxx.device.yyy.bgp.router_state
 Router state
 port.xxx.device.yyy.bgp.bgp_type
 BGP type
 port.xxx.device.yyy.bgp.tx_advertised_route
 Number of the sent advertised routes.
 port.xxx.device.yyy.bgp.tx_withdrawn_route
 Number of the sent withdrawn routes.
 port.xxx.device.yyy.bgp.tx_advertised_update
 Number of sent advertised update messages.
 port.xxx.device.yyy.bgp.tx_keepalive
 Number of sent keepalive messages.
 port.xxx.device.yyy.bgp.tx_notification
 Number of sent notification messages.
 port.xxx.device.yyy.bgp.tx_notify_code
 Number of sent notify codes.
 port.xxx.device.yyy.bgp.tx_notify_subcode
 Number of sent notify subcodes.
 port.xxx.device.yyy.bgp.tx_open
 Number of sent open messages.
 port.xxx.device.yyy.bgp.tx_route_refresh
 Number of sent route refresh messages.
 port.xxx.device.yyy.bgp.tx_withdrawn_update
 Number of sent withdrawn update messages.
 port.xxx.device.yyy.bgp.last_rx_update_route
 Number of received withdrawn update routes.
 port.xxx.device.yyy.bgp.outstanding_route
 Number of outstanding routes.
 port.xxx.device.yyy.bgp.rx_advertised_route
 Number of received advertised routes.
 port.xxx.device.yyy.bgp.rx_advertised_update
 Number of received advertised update messages.
 port.xxx.device.yyy.bgp.rx_keepalive
 Number of received keepalive messages.
 port.xxx.device.yyy.bgp.rx_notification
 Number of received notification messages.
 port.xxx.device.yyy.bgp.rx_notify_code
 Number of received notify codes.
 port.xxx.device.yyy.bgp.rx_notify_subcode
 Number of received notify subcodes.
 port.xxx.device.yyy.bgp.rx_open
 Number of received open messages.
 port.xxx.device.yyy.bgp.rx_route_refresh
 Number of received route refresh messages.
 port.xxx.device.yyy.bgp.rx_withdrawn_route
 Number of received withdrawn routes.
 OSPFv2 protocol information
 port.xxx.device.yyy.ospfv2.router_state
 Router state.
 port.xxx.device.yyy.ospfv2.neighbor_state
 Neighbor state.
 port.xxx.device.yyy.ospfv2.rx_ack
 Number of received acknowledge messages.
 port.xxx.device.yyy.ospfv2.rx_asbr_summary_lsa
 Number of received Autonomous System
MVPN Functions
633
 Boundary Router (ASBR) summary LSA.
 port.xxx.device.yyy.ospfv2.rx_as_external_lsa
 Number of received AS external Link-State
 Advertisements (LSAs)
 port.xxx.device.yyy.ospfv2.rx_dd
 Number of received Database Description
 packets.
 port.xxx.device.yyy.ospfv2.rx_hello
 Number of received hello messages.
 port.xxx.device.yyy.ospfv2.rx_network_lsa
 Number of received network LSAs.
 port.xxx.device.yyy.ospfv2.rx_nssa_lsa
 Number of received NSSA LSAs.
 port.xxx.device.yyy.ospfv2.rx_request
 Number of received request messages.
 port.xxx.device.yyy.ospfv2.rx_router_lsa
 Number of received router LSAs.
 port.xxx.device.yyy.ospfv2.rx_summary_lsa
 Number of received summary LSAs.
 port.xxx.device.yyy.ospfv2.rx_telsa
 Number of received TE LSAs.
 port.xxx.device.yyy.ospfv2.rx_update
 Number of received update messages.
 port.xxx.device.yyy.ospfv2.tx_ack
 Number of sent acknowledge messages.
 port.xxx.device.yyy.ospfv2.tx_asbr_summary_lsa
 Number of sent ASBR summary LSAs.
 port.xxx.device.yyy.ospfv2.tx_as_external_lsa
 Number of sent AS external LSAs.
 port.xxx.device.yyy.ospfv2.tx_dd
 Number of sent Database Description packets.
 port.xxx.device.yyy.ospfv2.tx_hello
 Number of sent hello messages.
 port.xxx.device.yyy.ospfv2.tx_network_lsa
 Number of sent network LSAs.
 port.xxx.device.yyy.ospfv2.tx_nssa_lsa
 Number of sent NSSA LSAs.
 port.xxx.device.yyy.ospfv2.tx_request
 Number of sent request messages.
 port.xxx.device.yyy.ospfv2.tx_router_lsa
 Number of sent router LSAs.
 port.xxx.device.yyy.ospfv2.tx_summary_lsa
 Number of sent summary LSAs.
 port.xxx.device.yyy.ospfv2.tx_telsa
 Number of sent TE LSAs.
 port.xxx.device.yyy.ospfv2.tx_update
 Number of sent update messages.
 IS-IS protocol information
 port.xxx.device.yyy.isis.router_state
 Router state.
 port.xxx.device.yyy.isis.adjacency_level
 Adjacency level.
 port.xxx.device.yyy.isis.rx_l1_csnp
 Number of received L1 Complete Sequence
 Number PDUs (CSNPs).
 port.xxx.device.yyy.isis.rx_l1_lan_hello
 Number of L1 LAN Hellos sent to the DUT
 port.xxx.device.yyy.isis.rx_l1_lsp
 Number of L1 LSPs received from the DUT
 port.xxx.device.yyy.isis.rx_l1_psnp
 Number of L1 Partial Sequence Number PDUs
 (PSNPs) received from the DUT
 port.xxx.device.yyy.isis.rx_l2_csnp
 Number of received L2 CSNPs.
 port.xxx.device.yyy.isis.rx_l2_lan_hello
 Number of L2 LAN Hellos received from the
 DUT.
 port.xxx.device.yyy.isis.rx_l2_lsp
 Number of L2 LSPs received from the DUT.
MVPN Functions
634
 port.xxx.device.yyy.isis.rx_l2_psnp
 Number of L2 PSNPs received from the DUT
 port.xxx.device.yyy.isis.rx_ptp_hello
 Number of Peer to peer hellos received from the DUT
 port.xxx.device.yyy.isis.tx_l1_csnp
 Number of the sent L1 CSNPs.
 port.xxx.device.yyy.isis.tx_l1_lan_hello
 Number of L1 LAN Hellos sent to the DUT.
 port.xxx.device.yyy.isis.tx_l1_lsp
 Number of L1 LSPs sent to the DUT.
 port.xxx.device.yyy.isis.tx_l1_psnp
 Number of L1 PSNPs sent to the DUT.
 port.xxx.device.yyy.isis.tx_l2_csnp
 Number of L2 CSNPs sent to the DUT.
 port.xxx.device.yyy.isis.tx_l2_lan_hello
 Number of L2 LAN Hellos sent to the DUT.
 port.xxx.device.yyy.isis.tx_l2_lsp
 Number of L2 LSPs sent to the DUT.
 port.xxx.device.yyy.isis.tx_l2_psnp
 Number of L2 PSNPs sent to the DUT.
 port.xxx.device.yyy.isis.tx_ptp_hello
 Number of peer to peer Hellos sent to the DUT.
 RIP protocol information
 port.xxx.device.yyy.rip.router_state
 Router State.
 port.xxx.device.yyy.rip.rx_advertised_update
 Number of received advertised update messages.
 port.xxx.device.yyy.rip.rx_withdrawn_update
 Number of received withdrawn update messages.
 port.xxx.device.yyy.rip.tx_advertised_update
 Number of sent advertised update messages.
 port.xxx.device.yyy.rip.tx_withdrawn_update
 Number of sent withdrawn update messages.
 LDP protocol information
 port.xxx.device.yyy.ldp.router_state
 Router state.
 port.xxx.device.yyy.ldp.lsp_up_num
 Number of LSPs in the up state.
 port.xxx.device.yyy.ldp.lsp_down_num
 Number of LSPs in the down state.
 port.xxx.device.yyy.ldp.rx_direct_hello
 Number of the received direct Hellos.
 port.xxx.device.yyy.ldp.rx_keepalive
 Number of the received keepalive messages
 port.xxx.device.yyy.ldp.rx_label_abort
 Number of label abort requests received.
 port.xxx.device.yyy.ldp.rx_label_mapping
 Number of label mapping messages received.
 port.xxx.device.yyy.ldp.rx_label_release
 Number of label release messages received
 port.xxx.device.yyy.ldp.rx_label_request
 Number of label requests received.
 port.xxx.device.yyy.ldp.rx_label_withdraw
 Number of label withdraw messages received.
 port.xxx.device.yyy.ldp.rx_notification
 Number of notification messages received.
 port.xxx.device.yyy.ldp.rx_notify_code
 Number of notify codes received.
 port.xxx.device.yyy.ldp.rx_targeted_hello
 Number of targeted Hellos received.
 port.xxx.device.yyy.ldp.tx_direct_hello
 Number of direct Hellos sent.
 port.xxx.device.yyy.ldp.tx_keepalive
 Number of keepalive messages sent.
 port.xxx.device.yyy.ldp.tx_label_abort
 Number of label abort requests sent.
 port.xxx.device.yyy.ldp.tx_label_mapping
MVPN Functions
635
 Number of label mapping messages sent.
 port.xxx.device.yyy.ldp.tx_label_release
 Number of label release messages sent.
 port.xxx.device.yyy.ldp.tx_label_request
 Number of label requests sent.
 port.xxx.device.yyy.ldp.tx_notification
 Number of notification messages sent.
 port.xxx.device.yyy.ldp.tx_notify_code
 Number of notify codes sent.
 port.xxx.device.yyy.ldp.tx_targeted_hello
 Number of targeted Hellos sent.
 RSVP protocol information
 port.xxx.device.yyy.rsvp.router_state
 Router State.
 port.xxx.device.yyy.rsvp.avg_lsp_setup_time
 Average time to set up an LSP on the session.
 port.xxx.device.yyy.rsvp.egress_lsp_up
 Number of egress LSPs in up state.
 port.xxx.device.yyy.rsvp.last_rx_path_error_code
 Number of Path Error messages received.
 port.xxx.device.yyy.rsvp.last_rx_resv_error_code
 Number of Reservation Error messages received.
 port.xxx.device.yyy.rsvp.last_tx_path_error_code
 Number of Path Error messages sent.
 port.xxx.device.yyy.rsvp.last_tx_resv_error_code
 Number of Reservation Error messages sent.
 port.xxx.device.yyy.rsvp.lsp_connecting
 Number of LSPs in connecting state.
 port.xxx.device.yyy.rsvp.lsp_down
 Number of LSPs in the down state.
 port.xxx.device.yyy.rsvp.lsp_up
 Number of LSPs in the up state.
 port.xxx.device.yyy.rsvp.max_lsp_setup_time
 Maximum time to set up an LSP on the session.
 port.xxx.device.yyy.rsvp.min_lsp_setup_time
 Minimum time to set up an LSP on the session.
 port.xxx.device.yyy.rsvp.rx_hello
 Number of received Hellos.
 port.xxx.device.yyy.rsvp.rx_path
 Number of path messages sent.
 port.xxx.device.yyy.rsvp.rx_path_error
 Number of Path Error messages received.
 port.xxx.device.yyy.rsvp.rx_path_recovery
 Number of PATH Recovery packets received
 port.xxx.device.yyy.rsvp.rx_path_teardown
 Number of Path Teardown messages received.
 port.xxx.device.yyy.rsvp.rx_resv
 Number of Reservation messages received.
 port.xxx.device.yyy.rsvp.rx_resv_confirmation
 Number of Reservation Confirmation messages received
 port.xxx.device.yyy.rsvp.rx_resv_error
 Number of Reservation Error messages received.
 port.xxx.device.yyy.rsvp.rx_resv_teardown
 Number of Reservation Teardown messages received.
 port.xxx.device.yyy.rsvp.tx_hello
 Number of Hellos sent.
 port.xxx.device.yyy.rsvp.tx_path
 Number of path messages sent.
 port.xxx.device.yyy.rsvp.tx_path_error
 Number of Path Error messages sent.
 port.xxx.device.yyy.rsvp.tx_path_recovery
 Number of PATH Recovery packets sent.
 port.xxx.device.yyy.rsvp.tx_path_teardown
 Number of Path Teardown messages sent.
 port.xxx.device.yyy.rsvp.tx_resv
 Number of Reservation messages sent.
 port.xxx.device.yyy.rsvp.tx_resv_confirmation
 Number of Reservation Confirmation messages sent.
 port.xxx.device.yyy.rsvp.tx_resv_error
MVPN Functions
636
 Number of Reservation Error messages sent.
 port.xxx.device.yyy.rsvp.tx_resv_teardown
 Number of Reservation Teardown messages sent.
 PIM protocol information
 port.xxx.device.yyy.pim.router_state
 Router state.
 port.xxx.device.yyy.pim.neighbor_num
 Number of PIM neighbors for the router.
 port.xxx.device.yyy.pim.rx_assert
 Number of Assert messages received.
 port.xxx.device.yyy.pim.rx_boot_strap
 Number of Bootstrap messages received.
 port.xxx.device.yyy.pim.rx_cand_rp_advert
 Number of candidate RP Advertisements received
 port.xxx.device.yyy.pim.rx_group_rp
 Number of (*,*,RP) groups received.
 port.xxx.device.yyy.pim.rx_group_s_g
 Number of (S,G) groups received.
 port.xxx.device.yyy.pim.rx_group_s_g_rpt
 Number of (S,G,rpt) groups received.
 port.xxx.device.yyy.pim.rx_group_star_g
 Number of (*,G) groups received.
 port.xxx.device.yyy.pim.rx_hello
 Number of received Hellos.
 port.xxx.device.yyy.pim.rx_join_prune
 Number of Join/Prune messages received.
 port.xxx.device.yyy.pim.rx_register
 Number of Register messages received.
 port.xxx.device.yyy.pim.rx_register_stop
 Number of Register Stop messages received.
 port.xxx.device.yyy.pim.tx_assert
 Number of Assert messages sent.
 port.xxx.device.yyy.pim.tx_boot_strap
 Number of Bootstrap messages sent.
 port.xxx.device.yyy.pim.tx_cand_rp_advert
 Number of candidate RP Advertisements sent.
 port.xxx.device.yyy.pim.tx_group_rp
 Number of (*,*,RP) groups sent.
 port.xxx.device.yyy.pim.tx_group_s_g
 Number of (S,G) groups sent.
 port.xxx.device.yyy.pim.tx_group_s_g_rpt
 Number of (S,G,rpt) groups sent.
 port.xxx.device.yyy.pim.tx_group_star_g
 Number of (*,G) groups sent.
 port.xxx.device.yyy.pim.tx_hello
 Number of Hellos sent.
 port.xxx.device.yyy.pim.tx_join_prune
 Number of Join/Prune messages sent.
 port.xxx.device.yyy.pim.tx_register
 Number of Register messages sent.
 port.xxx.device.yyy.pim.tx_register_stop
 Number of Register Stop messages sent.
 BFD protocol information

 port.xxx.device.yyy.bfd.session_up
 Number of BFD sessions in the Up state.
 port.xxx.device.yyy.bfd.session_down
 Number of BFD session in the down state.
 port.xxx.device.yyy.bfd.tx_bfd_pdu
 Number of BFD PDUs sent.
 port.xxx.device.yyy.bfd.rx_bfd_pdu
 Number of BFD PDUs received.
Description:
 The sth::emulation_mvpn_info function provides information about
 the configured MVPN network topology.
 This function returns the requested data and a status value (1 for
MVPN Functions
637
 success). If there is an error, the function returns the status value (0).
 Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
Sample Input:
 puts "get mvpn configuration BGP info"
 set cmdStatus [sth::emulation_mvpn_info -mode bgp -handle $mvpnHdl]
Sample Output:
 {port {{port2 {{devices router4} {device {{router4 {{bgp
 {{rx_advertised_route 2} {rx_open 1} {rx_notify_code 0}
 {tx_advertised_route 1} {last_rx_update_route 1} {tx_open 1}
 {tx_withdrawn_update 0} {rx_notify_subcode 0}
 {rx_advertised_update 2} {tx_notify_code 0} {rx_withdrawn_route 0}
 {rx_notification 0} {tx_advertised_update 1} {tx_notify_subcode 0}
 {router_state ESTABLISHED} {tx_withdrawn_route 0} {bgp_type EBGP}
 {tx_notification 0} {rx_route_refresh 0} {outstanding_route 1}
 {rx_keepalive 4}{tx_keepalive_ 5} {tx_route_refresh 0}}}}}}}}}
 {port1 {{devices router2} {device {{router2 {{bgp
 {{rx_advertised_route 29} {rx_open 1} {rx_notify_code 0}
 {tx_advertised_route 2} {last_rx_update_route 3} {tx_open 1}
 {tx_withdrawn_update 0} {rx_notify_subcode 0}
 {rx_advertised_update 11} {tx_notify_code 0} {rx_withdrawn_route 0}
 {rx_notification 0} {tx_advertised_update 2} {tx_notify_subcode 0}
 {router_state ESTABLISHED} {tx_withdrawn_route 0} {bgp_type IBGP}
 {tx_notification 0} {rx_route_refresh 0} {outstanding_route 2}
 {rx_keepalive 4} {tx_keepalive_ 4} {tx_route_refresh 0}}}}}}}}}}} {status 1}
Notes:
 None.
End of Procedure Header
OpenFlow Functions
638
OpenFlow Functions
Functions:
sth::emulation_openflow_config
sth::emulation_openflow_control
sth::emulation_openflow_stats
sth::emulation_openflow_config
Name:
 sth::emulation_openflow_config
Purpose:
 Creates or modifies OpenFlow protocol emulation with Spirent HLTAPI. The OpenFlow
 protocol is based on the software-defined networking (SDN) concept, which fosters
 greater flexibility and extensibility in network switching through open
 interfaces and increases predictability in network control by separating the
 control plane from the data plane.

 OpenFlow uses two primary components, a controller and a switch, which
 communicate via a standard open programming interface. Currently Spirent HLTAPI
 supports the open controller emulation.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_openflow_config
 -mode {enable | modify | add}
 [-handle <handle>]
 [-count <numeric>]
 [-barrier_request_timeout <250-6000000>]
 [-connection_type {passive_tcp | passive_tcp_tls}]
 [-enable_barrier {0 | 1}]
 [-add_flows_discovery {0 | 1}]
 [-add_flows_on_connect {0 | 1}]
 [-add_meters_on_connect {0 | 1}]
 [-clear_flows_on_connect {0 | 1}]
 [-clear_meters_on_connect {0 | 1}]
 [-discovery_dstmacaddr <aa:bb:cc:dd:ee:ff>]
 [-discovery_msg_interval <5-32768>]
 [-desired_role {EQUAL | MASTER | SALVE}]
 [-desired_generation_id <0-18446744073709551615>]
 [-openflow_version {VERSION_1_0 | VERSION_1_3}]
 [-send_role_connect {0 | 1}]
 [-max_flow_rate <0.0-65535.0>]
 [-tcp_port <1-65535>]
 [-flow_cmd_type {add | delete | modify}]
 [-flow_block_type {bound | custom | flow_table_text}]
 [-flow_switch_handle <handle>]
 [-flow_table_text <string >]
 [-stream_ids <alphanum>]
 [-match_fields {ingress_port | eth_src_mac | eth_dst_mac | eth_type | vlan_id
 | vlan_priority | ipv4_src_addr | ipv4_dst_addr | ipv4_tos ipv4_protocol
 | tcp_udp_src_port | tcp_udp_dst_port | ipv6_src_addr | ipv6_dst_addr
 | ipv6_flow_label | ipv6_protocol | ipv6_traffic_class}]
 [-hard_timeout <0-65535>]
 [-idle_timeout <0-65535>]
 [-transport_type {<modify_vlanid | flow_forward}]
 [-first_vlan_id <0-4095>]
 [-action_type {forward_to_port | drop}]
 [-modify_dst_device {eth_mac | vlan_id | ipv4_addr | ipv6_addr}]
 [-meter_id <0-4294967295>]
 [-enable_burst_size {0 | 1}]
 [-rate_type {pktps | kbps}]
 [-meter_switch_handle <any>]
OpenFlow Functions
639
 [-band_type {dscp_remark | experimenter | drop}]
 [-burst_size <numeric>]
 [-rate <numeric>]
 [-experimenter <numeric>]
 [-precedence_level <0-255>]
Arguments:
 -handle
 Specifies the OpenFlow device/host handle when -mode is
 set to enable, modify, or add;
 Specifies the OpenFlow flow/meter handle when -mode is set
 to modify
 -mode
 Specifies the action to perform. Possible values are enable,
 modify, and add. This argument is mandatory. The modes are
 described below:

 enable Configures the OpenFlow devices specified by -handle

 modify Modifies the existing OpenFlow flow blocks or meters

 add Adds OpenFlow devices, flows, or meters to the current
 configuration


 -barrier_request_timeout
 Maximum number of milliseconds to wait for a Barrier Reply after
 sending a Barrier Request message before timing out. Possible
 values range from 250 to 6000000. The default value is 10000.
 -connection_type
 Specifies the TCP connection type. Possible values are:

 passive_tcp Controller acts as a TCP server and listens for
 incoming switch connections

 passive_tcp_tls Passive TCP with Transport Layer Security (TLS)

 The default value is passive_tcp.

 -enable_barrier
 Determines whether the OpenFlow controller will send out a
 Barrier Request message after adding flows to the switch.
 Possible values are 0 and 1. When it is set to 1, the OpenFlow
 controller will send out a Barrier Request after adding flows to
 the switch. The default value is 0.

 -add_default_discovery
 Determines whether to add default flows for discovery.
 Possible values are 0 and 1. When it is set to 1, a default flow
 to forward LLDP packets to the controller will be added to every
 switch after discovery is started. These flows will be removed
 when discovery is stopped. When it is set to 0, no flows will be
 added when discovery is stopped or started. Discovery will still
 work on switches that default to forward unknown packets to the
 controller. The default value is 1.

 -add_flows_on_connect
 Determines whether the flows will be automatically added when the
 OpenFlow controller is started and the switches are connected.
 Possible values are 0 and 1. When it is set to 1, flows will be
 sent when the OpenFlow controller is started and switches are
 connected. The default value is 1.

 -add_meters_on_connect
 Determines whether the meters will be automatically added when
 the OpenFlow controller is started and the switches are
 connected. Possible values are 0 and 1. When it is set to 1,
 meters will be sent when the OpenFlow controller is started and
 switches are connected. The default value is 1.
OpenFlow Functions
640

 -clear_flows_on_connect
 Determines whether to clear all existing flows after connecting.
 Possible values are 0 and 1. When it is set to 1, Spirent HLTAPI
 will clear all existing flows after connecting. The default value
 is 1.

 -clear_meters_on_connect
 Determines whether to clear all existing meters after connecting.
 Possible values are 0 and 1. When it is set to 1, Spirent HLTAPI
 will clear all existing meters after connecting. The default value
 is 1.
 -discovery_dstmacaddr
 Specifies the destination MAC address used for LLDP discovery
 messages. The default value is 01:80:C2:00:00:0E.
 -discovery_msg_interval
 Number of seconds between consecutive LLDP discovery messages
 that are sent to the connected switches. This argument is only
 valid when LLDP discovery is running. Possible values range from 5
 to 32768. The default value is 30.

 -desired_role
 Specified the desired role of the controller for all the switches
 that connect to it. You must set -send_role_connect to 1. Possible
 values are EQUAL, MASTER and SLAVE.
 The default value is EQUAL.
 -desired_generation_id
 Specifies the value of the Generation ID field in the Role Request
 message. Possible values range from 0 to 18446744073709551615. The
 default value is 0.

 -openflow_version
 Specifies the version of the OpenFlow specification to use for the
 test. Possible values are version_1_0 and version_1_3.

 version_1_0 OpenFlow version 1.0

 version_1_3 OpenFlow version 1.3

 The default value is version_1_0.

 -send_role_connect
 Determines whether to send the desired role of the controller
 when a switch connects to this controller. Possible values are 0
 and 1. The default value is 0.

 -max_flow_rate
 Specifies the maximum flow message rate limit in flows per second.
 The value must be a float. Possible values range from 0.0 to
 65535.0. The default value is 0.0.
 -tcp_port
 Specifies the TCP port number used by the OpenFlow controller.
 Possible values range from 1 to 65535. The default value is 6633.
 -flow_cmd_type
 A list of commands that the flow block will support. Possible
 values are add, delete and modify. For each flow in the block,
 any combination of the three values is allowed. Use "|" to
 combine multiple types. For example, -flow_cmd_type "add|delete
 modify add|modify".

 -flow_block_type
 Specifies the list of types for the flows in the block. Possible
 values are bound and flow_table_text.

 bound Flows created from the specified bound streamblocks
 
OpenFlow Functions
641
 flow_table_text Flows created from flow table texts

 The default value is bound.
 -flow_switch_handle
 Specifies a list of handles for the affiliated OpenFlow switches
 that are discovered after you run the
 sth::emulation_openflow_control function with -action
 start_discovery.
 -flow_table_text
 Specifies a list of flow table texts where each flow is defined by
 a line of text. This argument is only valid when -flow_block_type
 is set to flow_table_text. The default value is ""(empty string).
 -match_fields
 A list of specified fields to match against the packets
 for the flow. Fields can be combined to form sub-lists.
 Possible values are:

 ingress_port Ingress port
 eth_src_mac Ethernet source MAC
 eth_dst_mac Ethernet destination MAC
 eth_type Ethernet type
 vlan_id VLAN ID
 vlan_priority VLAN priority
 ipv4_src_addr IPv4 source address
 ipv4_dst_addr IPv4 destination address
 ipv4_tos IPv4 TOS
 ipv4_protocol IPv4 protocol
 tcp_udp_src_port TCP/UDP source port
 tcp_udp_dst_port TCP/UDP destination port
 ipv6_src_addr IPv6 source address
 ipv6_dst_addr IPv6 destination address
 ipv6_flow_label IPv6 flow label
 ipv6_protocol IPv6 next header protocol
 ipv6_traffic_class IPv6 traffic class

 This example shows a configuration with a single list:

 match_fields "{{ingress_port eth_type ipv4_src_addr ipv4_dst_addr}}"

 When there are multiple sub-lists, the outer braces can be omitted.
 For example:

 match_fields "{ingress_port}{ipv4_dst_addr}
 {eth_type vlan_id vlan_priority} "

 The default field is eth_dst_mac.
 -hard_timeout
 Number of seconds after which an entry should be removed regardless
 of any activity. Possible values range from 0 to 65535. The default
 value is 0.
 -idle_timeout
 Number of seconds after which an entry should be removed due to a
 lack of activity. Possible values range from 0 to 65535. The
 default value is 0.

 -transport_type
 Specifies the transport type used for multiple switch
 configurations. Possible values are flow_forward and
 modify_vlanid.

 flow_forward Forward packets unchanged

 modify_vlanid Add/remove a transport VLAN for multiple switch
 configurations

 The default value is flow_forward.
OpenFlow Functions
642

 -first_vlan_id
 Specifies the ID of the first VLAN used for transport flows.
 Possible values range from 0 to 4095. The default value is 0.

 -action_type
 Specifies the flow action to take. Possible values are
 forward_to_port and drop.

 forward_to_port Forward packets that match the flow definitions

 drop Drop packets that match the flow definitions
 The default value is forward_to_port.

 -modify_dst_device
 A list of fields in the packets to modify to match the
 destination device. Possible values are:

 eth_mac Modify the MAC destination to match the destination device

 vlan_id Modify the VLAN ID to match the destination device

 ipv4_addr Modify the IPv4 destination address to match the
 destination device

 ipv6_addr Modify the IPv6 destination address to match the
 destination device

 The default value is ipv4_addr.

 -stream_ids
 Specifies the streamblock IDs for the flow block

 Note: The configuration list of the flow-specific arguments above must be of the
 same length. If the value is empty, use a dash (-) as the placeholder. Values are
 separated by spaces (" ").

 For example:
 -flow_cmd_type "add|delete modify add|modify" \
 -flow_block_type "flow_table_text bound bound" \
 -flow_table_text "aaabbbccc - -" \
 -flow_switch_handle "$myhandle - -" \
 -stream_ids "- - $mystream" \
 -match_fields "{ingress_port eth_type ipv4_src_addr ipv4_dst_addr}\
 {ipv4_dst_addr} {eth_type vlan_id vlan_priority}" \
 -hard_timeout "- 30 15" \
 -idle_timeout "- 10 4" \
 -transport_type "- flow_forward modify_vlanid" \
 -first_vlan_id "- - 22" \
 -action_type "- forward_to_port drop" \
 -modify_dst_device "- - ipv4_addr"
 -meter_id
 Specifies the meter ID. Possible values range from 0 to
 4294967295. The default value is 1.
 -enable_burst_size
 Enables/disables burst size. Possible values are 0 (disable) and 1
 (enable). The default value is 0.
 -rate_type
 Type of rate for the meter block. Possible values are pktps and kbps.

 pktps Rate value in packet/sec
 kbps Rate value in kb/sec

 The default value is pktps.

 -meter_switch_handle
 The handle for the affiliated OpenFlow switch that is discovered
OpenFlow Functions
643
 after you run the sth::emulation_openflow_control function with
 action start_discovery.
 -band_type
 Defines how packets are processed for each meter. Possible values
 are:

 dscp_remark Increase the drop precedence of the DSCP field
 in the IP header of the packet

 experimenter Pass through the value specified by -experimenter

 drop Drop the packet

 The default value is drop.
 -burst_size
 Size of the burst based on the units set by -rate_type.
 The default value is 0.
 -rate
 Lowest rate at which the band applies using the unit set by
 -rate_type. The default value is 0.

 -experimenter
 Specifies the value for the experimenter field. This argument is
 only valid when -band_type is set to experimenter. The default
 value is 0.

 -precedence_level
 Specifies the amount by which to drop the precedence level. This
 argument is only valid when -band_type is set to dscp_remark.
 Possible values range from 0 to 255. The default value is 0.
 Note: The configuration list of the meter-specific arguments above must be of the
 same length. If the value is empty, use a dash (-) as the placeholder. Values are
 separated by spaces (" ").

 For example:
 -band_type "{dscp_remark experimenter drop}"\
 -rate "{70 55 20}" \
 -experimenter "{- - 1}" \
 -precedence_level "{- 3 -}" \
 -burst_size "{15 20 80}"
Arguments Unsupported by Save as HLTAPI:
 The sth:: emulation_openflow_config function is currently not supported
 by Save to HLTAPI. To test with this function, you must configure it manually in
 the generated Spirent HLTAPI scripts.
Description:
 The sth::emulation_openflow_config function configures emulated OpenFlow
 controller, and modifies or adds flows and meters. Use the -mode
 argument to specify the actions to perform. (See the -mode argument description
 for information about the actions.)

 When you configure an OpenFlow controller, use the sth::emulation_device_config
 function to create an emulated device, on which you enable the OpenFlow
 controller with -mode enable of the current function.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The OpenFlow host/device/flow/meter handle returned from the function

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)
OpenFlow Functions
644
Examples:
 To configure an OpenFlow controller:

 set device_port4 [::sth::emulation_device_config\
 [-port_handle $port1\
 [-mode create\
 [-count 1\
 [-router_id 192.0.0.1\
 [-mac_addr 00:10:94:00:00:01 \
 [-intf_prefix_len 24 \
 [-intf_ip_addr 192.85.1.3 \
 [-gateway_ip_addr 192.85.1.1 \
 ]

 set dev_handle [keylget device_port4 handle]

 set device_ret11 [::sth::emulation_openflow_config \
 [-mode enable \
 [-handle $dev_handle\
 [-openflow_version VERSION_1_3 \
 [-discovery_dstmacaddr "01:80:C2:00:00:0E" \
 [-barrier_request_timeout 10000\
 [-connection_type passive_tcp \
 ]
 Output: {handle OpenFlowcontrollerprotocolconfig1} {status 1}
 To configure bound flows:
 set device_ret11 [::sth::emulation_openflow_config \
 -mode add \
 -handle $dev_handle\
 -flow_cmd_type "add|delete|modify" \
 -flow_block_type bound \
 -stream_ids $stream_handle2 \
 -match_fields "{{ingress_port eth_type ipv4_src_addr ipv4_dst_addr}}" \
 -transport_type flow_forward \
 -flow_switch_handle $of_switch_handle\
 -action_type forward_to_port\
 ]
 Output: {flow_handles openflowflowblock1} {status 1}

 To modify bound flows:
 set flow_handle1 [keylget device_ret11 flow_handles]
 set device_ret11 [::sth::emulation_openflow_config \
 -mode modify \
 -handle $flow_handle1\
 -flow_switch_handle $of_switch_handle\
 -action_type drop\
 ]

 Output: {flow_handles openflowflowblock1} {status 1}

 To configure a meter block:
 set device_ret12 [::sth::emulation_openflow_config \
 -mode add \
 -handle $dev_handle\
 -meter_id 2 \
 -meter_switch_handle $of_switch_handle\
 -enable_burst_size TRUE \
 -rate_type kbps \
 -band_type "{drop dscp_remark experimenter}"\
 -rate "{100 50 10}" \
 -experimenter "{- - 2}" \
 -precedence_level "{- 6 -}" \
 -burst_size "{1 10 10}"
 ]
OpenFlow Functions
645
 Output: {meter_handles openflowmeterconfig1} {status 1}

 To modify the specified meter block:
 set meter_handle2 [keylget device_ret12 meter_handles]
 set device_ret12 [::sth::emulation_openflow_config \
 -mode modify \
 -handle $meter_handle\
 -meter_id 3 \
 -meter_switch_handle $of_switch_handle \
 -band_type "{dscp_remark experimenter drop}"\
 -rate "{70 55 20}" \
 -experimenter "{- - 1}" \
 -precedence_level "{- 3 -}" \
 -burst_size "{15 20 80}"]

 Output: {meter_handles openflowmeterconfig1} {status 1}

sth::emulation_openflow_control
Name:
 sth::emulation_openflow_control
Purpose:
 Starts, stops the OpenFlow emulation, starts, stops sending LLDP discovery
 messages, or updates switch configurations, flow blocks or meter blocks.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_openflow_control
 [-port_handle <port_handle>]
 [-handle <handle>]
 [-action {start_controller | stop_controller | start_discovery |
 stop_discovery | update_switch | add_flows | remove_flows |
 add_meters | remove_meters}]
Arguments:
 -port_handle
 The port on which the action will be performed. You must specify
 either -port_handle or -handle, but not both.

 -handle
 Specifies the OpenFlow device/flow/meter handle on which to perform
 the action. You must specify either -port_handle or -handle, but not
 both.

 -action
 The action to perform on the specified ports or handles.
 Possible values are:

 start_controller Starts the OpenFlow protocol emulation

 stop_controller Stops the OpenFlow protocol emulation

 start_discovery Starts sending LLDP discovery messages to the
 connected switches

 stop_discovery Stops sending LLDP discovery messages

 update_switch Updates the switch configuration and port links.
 You must use sth::emulation_lldp_config
 before this mode to discover traffic ports.

 add_flows Adds flows to flow blocks

 remove_flows Removes flows from flow blocks
 
OpenFlow Functions
646
 add_meters Adds meters in meter blocks

 remove_meters Removes meters from meter blocks

 The default value is start_controller.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles Identifies the list of handles for the discovered switches when you
 update the switch configurations. Only valid for -action update_switch.
 status Success (1) or failure (0) of the operation
 log An error message (if the operation failed)
Description:
 The sth::emulation_openflow_control function controls the OpenFlow emulation on
 the specified devices. See the -action argument for more details about the
 actions.

 If the action is performed successfully, Spirent HLTAPI returns status 1. For
 -action update_switch, a switch handle will also be returned. If the action
 fails, Spirent HLTAPI returns status 0 with an error message.
Examples:
 To discover traffic ports:
 set device_ret0 [sth::emulation_lldp_config\
 -mode create\
 -tlv_chassis_id_subtype intf_alias\
 -tlv_port_id_subtype mac_addr\
 -tlv_port_id_value 00:00:00:00:00:00\
 -tlv_ttl_value 0\
 -tlv_chassis_id_value SPIRENT\
 -port_handle $port1\
 -tx_delay 2 \
 -msg_tx_hold_mutiplier 4 \
 -msg_tx_interval 30 \
 -reinitialize_delay 2 \
 -loopback_ip_addr 192.0.0.4 \
 -local_mac_addr 00:10:94:00:00:04 \
 -intf_ip_prefix_length 24 \
 -intf_ip_addr 192.85.1.6 \
 -gateway_ip_addr 192.85.1.1 \
 ]
 To start sending LLDP discovery messages:
 set ctrl_ret2 [::sth::emulation_openflow_control \
 -port_handle $port1 \
 -action start_discovery\
 ]

 Output: {status 1}

 To update the switch configuration:
 set ctrl_ret2 [::sth::emulation_openflow_control \
 -port_handle $port1 \
 -action update_switch\
 ]
 Output: {openflowcontrollerprotocolconfig1 {{switch_handles
 {openflowswitchconfig1 openflowswitchconfig2 openflowswitchconfig3}}}}
 {status 1}
 
OpenFlow Functions
647
sth::emulation_openflow_stats
Name:
 sth::emulation_openflow_stats
Purpose:
 Retrieves statistics for the OpenFlow devices configured on the specified test
 port
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_openflow_stats
 [-port_handle <port_handle>]
 [-handle <device_handle>]
 [-mode { controller | switch_result | switchport_result}]
Arguments:
 -port_handle
 Specifies the port handle from which to retrieve the statistics.
 You must specify either -port_handle or -handle, but not both.

 -handle
 Specifies the OpenFlow device handle from which to retrieve the
 statistics. You must specify either -port_handle or -handle, but
 not both.

 -mode
 Specifies the results mode. Possible values are:

 controller Returns controller related statistics

 switch_result Returns switch related statistics

 switchport_result Returns switch port related statistics

 The default is controller.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)

 Following are the keys returned by the result mode.

 When -mode is controller:

 -Name Name of the device
 -OpenflowVersion OpenFlow version

 -ControllerState State of the controller

 -DiscoveryState State of the discovery state engine

 -SwitchUpdateState State of the OpenFlow controller updating the
 flows on the switch

 -ConnectedSwitchCount Number of switches connected currently

 -TotalConnectedSwitchCount Total number of switches connected

 -DiscoveredPortCount Number of ports discovered

 -DefinedFlowCount Number of flows defined
OpenFlow Functions
648

 -ActiveFlowCount Number of active flows

 -TxPacketOutCount Number of packet-out messages sent

 -TxFlowModAddCount Number of flows added through an add command

 -TxFlowModModifyCount Number of flows modified through a modify command

 -TxFlowModDeleteCount Number of flows deleted through a remove command

 -RxPacketInCount Number of packet-in messages received

 -RxFlowRemoveCount Number of flows removed

 -RxFlowModifyErrors Number of flow modify errors received
 -TxBarrierRequestCount Number of Barrier Requests transmitted to the switch

 -RxBarrierReplyCount Number of Barrier Replies received from the switch

 -BarrierRequestTimeoutCount Number of Barrier Requests that have timed out
 after a Barrier Reply was not received

 -BarrierRemainingCount Number of outstanding Barrier Requests for which a
 Barrier Reply has not been received

 -BarrierResponseTime Time in microseconds between sending the Barrier
 Request and receiving the most recent Barrier Reply

 -TxRoleRequestCount Number of Role Requests sent

 -RxRoleReplyCount Number of Role Requests received

 -DefinedMeterCount Number of meters defined

 -ActiveMeterCount Number of active meters

 -TxMeterModAddCount Number of meters added through an add command

 -TxMeterModModifyCount Number of meters modified through a modify command

 -TxMeterModDeleteCount Number of meters deleted through a delete command

 -RxMeterModErrors Number of meter modify errors received

 When -mode is switch_result:

 -Name Name of the device
 -OpenflowVersion Version of the OpenFlow specification
 -SwitchName Name of the switch
 -DpidNum Data path ID
 -Dpid Data path ID in hexadecimal
 -SwitchState State of the switch
 -SwitchIp IP address of the switch
 -DefinedFlowCount Number of defined flows
 -ActiveFlowCount Number of active flows
 -TxPacketOutCount Number of packet-out messages sent
 -TxFlowModAddCount Number of flows added through an add command
 -TxFlowModModifyCount Number of flows modified through a modify command
OpenFlow Functions
649
 -TxFlowModDeleteCount Number of flows deleted through a remove command
 -RxPacketInCount Number of packet-in messages received
 -RxFlowModifyErrors Number of flow modify errors message received
 -RxFlowRemoveCount Number of flows removed
 -TxBarrierRequestCount Number of Barrier Requests transmitted to the switch
 -RxBarrierReplyCount Number of Barrier Replies received from the switch
 -BarrierResponseTime Time in microseconds between sending the Barrier
 Request and receiving the most recent Barrier Reply
 -FlowUpdateAddCount Number of flows added to the switch for the most
 recent flow adding operation
 -FlowUpdateAddTime Time in microseconds to add the flows
 to the switch
 -FlowUpdateAddRate Number of flows added to the switch per second for
 the most recent flow adding operation
 -FlowUpdateAddSetupTime Time in microseconds between sending the Barrier
 Request and receiving the most recent Barrier Reply

 -FlowUpdateModifyCount Number of flows modified for the most recent
 flow updating operation
 -ControllerRole Desired role of the controller
 -GenerationId Value of the generation ID field used in
 Role Request messages
 -TxRoleRequestCount Number of Role Requests sent
 -RxRoleReplyCount Number of Role Requests received
 -DefinedMeterCount Number of meters defined
 -ActiveMeterCount Number of active meters
 -TxMeterModAddCount Number of meters added through an add command
 -TxMeterModModifyCount Number of meters modified through a modify command
 -TxMeterModDeleteCount Number of meters deleted through a delete command
 -RxMeterModErrors Number of meter modify errors received
 When -mode is switchport_result:

 -Name Name of the device

 -SwitchName Name of the switch

 -Dpid DPID of the switch on which the port exists

 -DiscoveredPort Name of discovered ports
 Description:
 The sth::emulation_openflow_stats function retrieves statistics for the OpenFlow devices
 configured on the specified test port. Use -mode to specify the scope of results
 that you want to retrieve.

 This function returns the requested data and a status value (1 for success). If
 there is an error, the function returns the status value (0) and an error
 message.(See Return Values for a description of each key.)

Examples:
OpenFlow Functions
650
 To get controller statistics:

 set stats_ret [::sth::emulation_openflow_stats \
 -handle $dev_handle \
 -mode controller\
 ]

 Sample Output:

 {status 1} {host1 {{controller_result {{-parent openflowcontrollerprotocolconfig1}
 {-resultchild-Sources {openflowcontrollerprotocolconfig1 resultdataset1}}
 {-Name {}} {-OpenflowVersion VERSION_1_3} {-ControllerState STARTED}
 {-DiscoveryState RUNNING} {-SwitchUpdateState COMPLETED} {-ConnectedSwitchCount
 3} {-TotalConnectedSwitchCount 3} {-DiscoveredPortCount 7} {-DefinedFlowCount 4}
 {-ActiveFlowCount 4} {-TxPacketOutCount 14} {-TxFlowModAddCount 4}
 {-TxFlowModModifyCount 0} {-TxFlowModDeleteCount 0} {-RxPacketInCount 121}
 {-RxFlowRemoveCount 0} {-RxFlowModifyErrors 0} {-TxBarrierRequestCount 0}
 {-RxBarrierReplyCount 0} {-BarrierRequestTimeoutCount 0} {-BarrierRemainingCount
 0} {- BarrierResponseTime 0} {-TxRoleRequestCount 0} {-RxRoleReplyCount 0}
 {-DefinedMeterCount 1} {-ActiveMeterCount 0} {-TxMeterModAddCount 2}
 {-TxMeterModModifyCount 1} {-TxMeterM odDeleteCount 0} {-RxMeterModErrors 3}
 {-Active true}}}}}

 To retrieve values from the keyed list:

 set ctrl_state [keylget stats_ret $dev_handle.controller_result.-ControllerState]
 set sw_count [keylget stats_ret $dev_handle.controller_result.-ConnectedSwitchCount]
 set flow_count [keylget stats_ret $dev_handle.controller_result.-ActiveFlowCount]
 set defined_count [keylget stats_ret $dev_handle.controller_result.-DefinedFlowCount]

 To get switch statistics:
 set stats_ret [::sth::emulation_openflow_stats \
 -handle $dev_handle \
 -mode switch_result\
 ]

 Sample Output:
 {status 1} {host1 {{switch_result {{openflowswitchconfig3 {{-parent
 openflowcontrollerprotocolconfig1} {-resultchild-Sources
 {openflowcontrollerprotocolconfig1 r esultdataset2}} {-Name {}}
 {-OpenflowVersion VERSION_1_3} {-SwitchName SwitchDpid_C29AE3B3E}
 {-DpidNum 52238891838} {-Dpid C29AE3B3E} {-SwitchState CONNECTED}
 {-SwitchIp 192.8 5.1.1} {-DefinedFlowCount 2} {-ActiveFlowCount 2}
 {-TxPacketOutCount 6} {-TxFlowModAddCount 2} {-TxFlowModModifyCount 0}
 {-TxFlowModDeleteCount 0} {-RxPacketInCount 39} {-RxFl owModifyErrors 0}
 {-RxFlowRemoveCount 0} {-TxBarrierRequestCount 0} {-RxBarrierReplyCount 0}
 {-BarrierResponseTime 0} {-FlowUpdateAddCount 0} {-FlowUpdateAddTime 0}
 {-FlowUpdateAddRate 0} {-FlowUpdateAddSetupTime 0} {-FlowUpdateModifyCount 0}
 {-ControllerRole EQUAL} {-GenerationId 0} {-TxRoleRequestCount 0}
 {-RxRoleReplyCount 0} {-DefinedMeterCount 0} {-ActiveMeterCount 0}
 {-TxMeterModAddCount 0} {-TxMeterModModifyCount 0} {-TxMeterModDeleteCount 0}
 {-RxMeterModErrors 0} {-Active true}}} {openflowswitchconfig2
 {{-parent openflowcontrollerprotocolconfig1} {-resultchild-Sources
 {openflowcontrollerprotocolconfig1 resultdataset2}} {-Name {}}
 {-OpenflowVersion VERSION_1_3} {-SwitchName SwitchDpid_C2976CBE8} {-DpidNum
 52235258856} {-Dpid C2976CBE8} {-SwitchState CONNECTED} {-SwitchIp 192.85.1.12}
 {-DefinedFlowCount 1} {-ActiveFlowCount 1} {-TxPacketOutCount 4} {-TxFlow
 ModAddCount 1} {-TxFlowModModifyCount 0} {-TxFlowModDeleteCount 0}
 {-RxPacketInCount 31} {-RxFlowModifyErrors 0} {-RxFlowRemoveCount 0}
 {-TxBarrierRequestCount 0} {-RxBarrierR eplyCount 0} {-BarrierResponseTime 0}
 {-FlowUpdateAddCount 0} {-FlowUpdateAddTime 0} {-FlowUpdateAddRate 0}
 {-FlowUpdateAddSetupTime 0} {-FlowUpdateModifyCount 0} {-Controller Role EQUAL}
 {-GenerationId 0} {-TxRoleRequestCount 0} {-RxRoleReplyCount 0}
 {-DefinedMeterCount 0} {-ActiveMeterCount 0} {-TxMeterModAddCount 0}
 {-TxMeterModModifyCount 0} {-TxMeterModDeleteCount 0} {-RxMeterModErrors 0}
 {-Active true}}} {openflowswitchconfig1 {{-parent
 openflowcontrollerprotocolconfig1} {-resultchild-Sources {openflowcontrollerpro
 tocolconfig1 resultdataset2}} {-Name {}} {-OpenflowVersion VERSION_1_3}
 {-SwitchName SwitchDpid_C291C8FD8} {-DpidNum 52229345240} {-Dpid C291C8FD8}
OpenFlow Functions
651
 {-SwitchState CONNECTED} {- SwitchIp 192.85.1.11} {-DefinedFlowCount 1}
 {-ActiveFlowCount 1} {-TxPacketOutCount 4} {-TxFlowModAddCount 1}
 {-TxFlowModModifyCount 0} {-TxFlowModDeleteCount 0} {-RxPacketInC ount 61}
 {-RxFlowModifyErrors 0} {-RxFlowRemoveCount 0} {-TxBarrierRequestCount 0}
 {-RxBarrierReplyCount 0} {-BarrierResponseTime 0} {-FlowUpdateAddCount 0}
 {-FlowUpdateAddTim e 0} {-FlowUpdateAddRate 0} {-FlowUpdateAddSetupTime 0}
 {-FlowUpdateModifyCount 0} {-ControllerRole EQUAL} {-GenerationId 0}
 {-TxRoleRequestCount 0} {-RxRoleReplyCount 0} {-De finedMeterCount 1}
 {-ActiveMeterCount 0} {-TxMeterModAddCount 2} {-TxMeterModModifyCount 1}
 {-TxMeterModDeleteCount 0} {-RxMeterModErrors 3} {-Active true}}}}}}}
OSPF Functions
652
OSPF Functions
Functions:
sth::emulation_ospf_config
sth::emulation_ospf_control
sth::emulation_ospf_lsa_config
sth::emulation_ospf_tlv_config
sth::emulation_ospf_topology_route_config
sth::emulation_ospfv2_info
sth::emulation_ospfv3_info
sth::emulation_ospf_route_info

sth::emulation_ospf_config
Name:
 sth::emulation_ospf_config
Purpose:
 Creates, enables, disables, modifies, or deletes one or more emulated Open
 Shortest Path First (OSPF) routers on the specified test port. OSPF is an
 Interior Gateway Protocol (IGP) that is designed to manage communications
 in large IP networks by dividing them into smaller networks called "areas."
 An individual router maintains a local state that represents the router's
 interfaces and adjacent neighbors. OSPF routers use link state
 advertisements (LSAs) to exchange the local state information. Within an
 AS, the combined LSA data produces a link-state database. Routers maintain
 a representation of the AS topology in a link-state database. Each router
 has a separate link-state database for each area to which it is connected.
 A router uses the topology information to create a shortest-path tree for
 the routing table.
 OSPFv2 is designed to work with IPv4. OSPFv3 uses IPv6. The two OSPF
 protocols are based on the same concepts of LSA communication. In general,
 OSPFv3 introduces new LSA types, and it modifies the packet format to
 support IPv6 addresses, IPv6 authentication, and multiple instances per
 link. (For detailed information about the differences between the
 protocols, see RFC 2740, "OSPF for IPv6".)
Synopsis:
 sth::emulation_ospf_config
 -mode create { -port_handle <port_handle> | -handle <device_handle> } |
 -mode { modify|disable|enable|delete|active|inactive } -handle <ospf_handle>
 [-area_id <a.b.c.d>]
 [-area_id_step <a.b.c.d>]
 [-area_type {external_capable | stub | nssa} ]
 [-authentication_mode simple -password <password>
 [-authentication_mode {none | md5} ]
 [-bfd_registration {1|0}]
 [-count <1-100> ]
 [-dead_interval <1-65535>]
 [-demand_circuit {1|0} ]
 [-gateway_ip_addr <a.b.c.d> ]
 [-gateway_ip_addr_step <a.b.c.d> ]
 [-hello_interval <1-65535>]
 [-graceful_restart_enable {0|1}]
 [-interface_cost <1-65535>]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <integer>]
 [-intf_prefix_length <1-128>]
 [-lsa_retransmit_delay <1-65535>]
 [-mac_address_start <aa:bb:cc:dd:ee:ff>]
 [-md5_key_id <1-255>]
 [-network_type {broadcast|ptop|native} ]
OSPF Functions
653
 [-option_bits <hexadecimal>]
 [-router_id <a.b.c.d> ]
 [-router_id_step <integer>]
 [-router_priority <0-255>] for broadcast and nba networks only
 [-session_type {ospfv2 | ospfv3}]
 [-te_admin_group <1-4294967295>]
 [-te_max_bw <1-4294967295>]
 [-te_max_resv_bw <1-4294967295>]
 [-te_metric <0-2147483647>]
 [-te_unresv_bw_priority0 <1-4294967295>]
 [-te_unresv_bw_priority1 <1-4294967295>]
 [-te_unresv_bw_priority2 <1-4294967295>]
 [-te_unresv_bw_priority3 <1-4294967295>]
 [-te_unresv_bw_priority4 <1-4294967295>]
 [-te_unresv_bw_priority5 <1-4294967295>]
 [-te_unresv_bw_priority6 <1-4294967295>]
 [-te_unresv_bw_priority7 <1-4294967295>]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vlan_cfi {0|1} ]
 [-vlan_id <0-4095>]
 [-vlan_id_mode {fixed|increment}]
 [-vlan_id_step <0-4095>]
 [-vlan_user_priority <0-7>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_mode {fixed|increment}]
 [-vlan_outer_id_step <0-4095>]
 [-vlan_outer_user_priority <0-7>]
 [-vpi <0-255>]
 [-vpi_step <0-255>]
 [-tunnel_handle <GRE_tunnel_handle>]
Arguments:
 -area_id
 Identifies the OSPF area to which the router belongs.
 Areas are groups of contiguous networks and attached hosts.
 A network belongs to only one area. Each area has an area
 ID, designated as a.b.c.d. The area ID is NOT an IP address
 although it looks like one. Areas should be kept to a
 maximum of 100 routers. The default area ID is 0.0.0.0.
 -area_id_step
 The increment between consecutive area IDs when multiple
 emulated OSPF routers are created. The value must be in IPv4
 format. The default value is 0.0.0.1.
 -area_type
 Specifies the type of area to which the OSPF router belongs
 and sets two option bits: the E bit and the NP bit. If you
 also specify the -option_bits argument, the -option_bit
 setting overwrites any previous value (the -area_type
 argument is processed before the -option_bit argument).
 Possible values are external_capable, stub, and nssa. The
 default is external_capable.
 external_capable - An area in which non-AS boundary routers
 can handle routes to destinations outside of the
 autonomous system. In an external_capable area,
 boundary routers will flood the area with AS-external
 LSAs describing the external routes. Specifying
 -area_type external capable sets the E bit
 stub - An area that does not handle external routes. AS-
 external LSAs are not flooded into stub areas, so you
 cannot redistribute routing data from another protocol
 into a stub area. Specifying -area_type stub clears the
 E bit
 nssa - (not so stubby area) An area that supports NSSA-
 encoded route information area. It allows external
OSPF Functions
654
 routes to be flooded within the area but does not allow
 external routes from other areas to enter it.
 Specifying -area_type nssa sets the NP bit.
 -authentication_mode
 (OSPFv2 only) Specifies the authentication mode for an
 interface. Possible values are none, simple, and md5.
 none - No authentication
 simple - Simple authentication uses a password (key) that is
 configured on each router and is included in plain text
 in each OSPF packet originated by that router
 md5 - MD5 authentication is based on shared secret keys that
 are configured in all routers in the area
 All OSPF protocol exchanges are authenticated. The
 authentication type is configurable on a per-area basis.
 -bfd_registration
 Specifies to enable or disable Bidirectional Forwarding
 Detection (BFD) registration. Possible values are 1 (enable)
 and 0 (disable). The default is 0.
 -count
 Defines the number of OSPF routers to create on the
 interface. Possible values are 1 to 100. The default is 1.
 -dead_interval
 Specifies the number of seconds after receiving the most
 recent Hello message, at which point neighboring routers
 will declare the emulated router down. Possible values range
 from 1 to 65535. The default is 40 on broadcast networks;
 otherwise, it is 120.
 -demand_circuit
 Enables the demand circuit bit. Pertains to handling of
 demand circuits (DCs) by the router. Possible values are 0
 and 1. If true (1), sets the DC bit(0x20) in the Options
 field of all LSAs generated.
 -gateway_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address of the OSPF router. The
 default for OSPFv2 is 192.85.1.1. The default for OSPFv3 is
 2000:0:0:0:0:0:0:1.
 -gateway_ip_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address for multiple routers.
 This argument is used with the -gateway_ip_addr argument.
 -gateway_ipv4_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address of the OSPFv3 router. The
 default value is 192.85.1.1. It only works when -ip_version
 set to 4_6.
 -gateway_ipv4_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Configures the step value to increment IPv4 gateway addresses for
 multiple OSPFv3 routers. This argument is used with the
 -gateway_ipv4_addr argument. The default value is 1. It
 only works when -ip_version set to 4_6.
 -graceful_restart_enable
 Spirent Extension (for Spirent HLTAPI only).
 Specifies if OSPF graceful restart is enabled on the
 simulated router. Possible values are 1 (enable Graceful
 Restart) or 0 (disable Graceful Restart). The default is 0.
OSPF Functions
655
 Example usage:
 sth::emulation_ospf_config -mode create \
 -port_handle $p0 \
 -graceful_restart_enable 1
 -handle
 Specifies the OSPF handle(s) to use.
 This argument is mandatory for modify, delete, enable, disable,
 active and inactive modes. When mode is create, Spirent HLTAPI
 creates OSPF over the provided device. (Please refer to the
 description of the -mode argument for more information)
 -hello_interval
 Specifies the amount of time, in seconds, between Hello
 messages. Possible values range from 1 to 65535. The default
 is 10 on broadcast networks; otherwise, it is 30.
 -interface_cost
 The metric associated with sending packets over the OSPF
 interface. Possible values range from 1 to 65535. The
 default is 1.
 -intf_ip_addr
 Specifies the IP address of the interface for the OSPF
 emulated router that will establish an adjacency with the
 DUT. The default for IPv4 is 192.85.1.3. The default for
 IPv6 is 0:0:0:0:0:0:0:0.
 -intf_ip_addr_step
 Specifies the difference between interface IP addresses of
 consecutive routers when multiple OSPF routers are created.
 The default increment is 1.
 -intf_prefix_length
 Specifies the prefix length on the emulated router. Possible
 values for IPv4 addresses range from 1 to 32. The default is
 24. Possible values for IPv6 addresses range from 1 to 128;
 the default is 64.
 -intf_ipv4_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv4 address of the interface for the OSPFv3
 emulated router that will establish an adjacency with the
 DUT. The default value is 192.85.1.3. It only works when
 -ip_version is 4_6.
 -intf_ipv4_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the difference between interface IPv4 addresses of
 consecutive routers when multiple OSPFv3 routers are created. The
 default value is 1. It only works when -ip_version set to 4_6.
 -intf_ipv4_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the ipv4 prefix length on the OSPFv3 emulated router.
 Possible values range from 1 to 32. The default value is 24.It
 only works when -ip_version set to 4_6.
 -ip_version
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IP version of OSPFv3. Possible values are 6 and
 4_6. You can create the dual stack for OSPFv3 by set this
 argument to 4_6. The default value is 6.
 -lsa_retransmit_delay
 Specifies the number of seconds between retransmission of
 unacknowledged link state updates. Possible values range
 from 1 to 65535. The default is 5.
OSPF Functions
656
 -mac_address_start
 Initial MAC address of the interfaces created for the OSPF
 configuration. The default is 00:10:94:00:00:02 when
 sth::emulation_ospf_config is first called. For the second or
 later uses of this function, the default value would increment
 by 00:00:00:00:00:01 based on the MAC address of last router
 created. This argument is mandatory when -count is greater than 1.
 -mac_address_step
 Specifies the step value to generate interface MAC addresses for
 consecutive OSPF routers. The default value is 00:00:00:00:00:01.
 -md5_key_id (OSPFv2 only)
 Specifies the MD5 key ID to use for MD5
 authentication mode. To use this argument, you must specify
 -authentication_mode MD5. Possible values range from 1
 to 255. The default is 1.
 -mode
 Specifies the action to be performed. Possible values
 are create, modify, delete, disable, enable, active and
 inactive. There is no default, you must specify a mode.
 The modes are described below:
 create - Creates an emulated router.
 When -port_handle is provided, Spirent HLTAPI
 creates one or more emulated routers that are associated
 with the specified port. When -handle is provided, OSPF will
 be created over the specified device. In this case, the
 following options will be obsoleted:
 -count
 -intf_ip_addr
 -intf_ip_addr_step
 -intf_prefix_length
 -gateway_ip_addr
 -gateway_ip_addr_step
 -loopback_ip_addr
 -loopback_ip_addr_step
 -router_id
 -router_id_step
 -vci
 -vci_step
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vpi
 -vpi_step
 -tunnel_handle
 -vlan_outer_id
 -vlan_outer_id_mode
 -vlan_outer_id_step
 -vlan_outer_user_priority
 -gre_checksum
 -gre_local_ip
 -gre_remote_ip
 -gre_tunnel
 modify - Changes the configuration for the OSPF router
 specified in the -handle argument.
 delete - Deletes the OSPF router specified in the -handle
 argument.
 disable - Stops the OSPF router specified in the -handle
 argument.
 enable - Starts the OSPF router specified in the -handle.
OSPF Functions
657
 active - Enables the OSPF router specified by the -handle
 argument. You must specify a valid OSPF session handle.
 inactive - Disables the OSPF router specified by the -handle
 argument. You must specify a valid OSPF session handle. The
 configuration for the router is retained, when it is
 inactive and is available as configured if the router is
 active.
 -network_type
 Indicates the type of network for the interface. Possible
 values are:
 broadcast - Indicates that the network is a broadcast
 network, as in an Ethernet connection. This is the
 default.
 ptop - Point-to-point (PTOP). A network formed by a
 point-to-point link between two routers.
 native - Specifies that the interface on OSPF session uses the
 default adjacency implied by the port-type. Use this setting
 to override the physical link type to emulate a broadcast
 adjacency over POS, or a point-to-point adjacency over
 Ethernet.
 The default value is native.
 -option_bits
 A bit mask that specifies the settings of the Options field
 in Hello packets sent to the DUT. The Options field
 describes the optional OSPF capabilities of the router.
 Section A.2 in RFC 2328 describes the Options field for
 OSPFv2; Section A.2 in RFC 2740 describes the Options field
 for OSPFv3.
 Use hexadecimal for this value. The default for OSPFv2 is
 0x02, which sets the E-bit (binary 00000010). The default
 for OSPFv3 is 0x13.
 The value specified for this argument overwrites the initial
 value specified by the -area_type and -demand_circuit
 arguments:
 V6: 0x01: If this bit is clear, the router/link should be
 excluded from IPv6 routing calculations.
 E: 0x02: External Routing: This bit specifies the way
 AS-external-LSAs are flooded. When this bit is
 set, the area type is external_capable; when this
 bit is cleared, the area type is stub.
 MC: 0x04: Multicast: This bit specifies whether IP multicast
 datagrams are forwarded.
 NP: 0x08: NSSA: This bit specifies the handling of Type-7
 LSAs.
 EA: 0x10: External Attribute: This bit specifies the
 router's willingness to receive and forward
 External-Attributes-LSAs. Used only for OSPFv2
 sessions.
 R: 0x10: This bit indicates if the originator is an active
 router.
 DC: 0x20: Demand Circuit: This bit specifies the router's
 handling of demand circuits.
 O: 0x40: Opaque: This bit specifies the router's
OSPF Functions
658
 willingness to receive and forward Opaque LSAs as
 specified in RFC 2370. Used only for OSPFv2
 sessions.
 -password
 (OSPFv2 only) Assigns a password that is used by neighboring
 OSPF routers on an area that is using OSPF's simple password
 authentication. The default is "Spirent". To use this
 argument, you must specify -authentication_mode simple.
 For OSFPv3, the password for OSPF authentication mode is
 enabled and set to "simple".
 -port_handle
 Specifies the port on which to create the OSPF router.
 (Please refer to the description of the -mode argument
 for more information)
 -router_id
 Identifies the emulated router. The router ID is a 32-bit
 value, represented in dot notation. (It is not an IP
 address.) The default is 192.85.1.3.
 -router_id_step
 The step size is the increment used to assign IDs to
 routers. Use the -router_id_step argument along with the
 -router_id and -count arguments to create routers on the
 interface. You must specify a step value when the -count
 value is greater than 1.
 -router_priority
 Sets the priority for the emulated router. OSPF routers use
 the priority to elect the designated and back-up designated
 routers. If you do not want the router to act as a
 designated router, set this value to 0. The default is 0
 for broadcast and NBMA networks. For other networks, this
 argument is ignored. For OSPFv2 sessions, if designated
 routers are not supported, this value is always 0. Possible
 values are 0 to 255.
 -session_type
 Specifies the OSPF version to be emulated. Possible values
 are ospfv2 or ospfv3. The default is ospfv2.
 -te_admin_group
 (OSPFv2 only) Specifies the administrative group of the
 traffic engineering link. Possible values range from 1 to
 4294967295. The default is 1.
 -te_max_bw
 (OSPFv2 only)
 Specifies the maximum bandwidth that can be
 used on the traffic engineering link. Possible values
 range from 1 to 2147483647. The
 default is 100000 bytes per second.
 -te_max_resv_bw
 (OSPFv2 only)
 Specifies the maximum bandwidth that may be reserved
 on the traffic engineering link. Possible values
 range from 1 to 2147483647. The default is
 100000 bytes per second.
 -te_metric
 (OSPFv2 only)
 Specifies the link metric for traffic engineering purposes.
 Possible values range from 0 to 2147483647.
 -te_unresv_bw_priority0
 (OSPFv2 only) Specifies the amount of bandwidth not yet
 reserved at priority level 0. The values corresponds to the
 bandwidth that can be reserved with a setup priority of 0
OSPF Functions
659
 through 7. Arranged in ascending order, priority 0 occurs at
 the start of the sub-TLV and priority 7 at the end. The
 initial values, before any bandwidth is reserved, are all
 set to the value specified for the maximum reservable
 bandwidth (-te_max_resv_bw). Each value will be less than or
 equal to the maximum reservable bandwidth. The default is
 100000 bytes per second.
 -te_unresv_bw_priority1 (OSPFv2 only)
 Specifies the amount of bandwidth not yet
 reserved at priority level 1. Possible values
 range from 1 to 2147483647. The default is 100000 bytes
 per second.
 -te_unresv_bw_priority2 (OSPFv2 only)
 Specifies the amount of bandwidth not yet
 reserved at priority level 2. Possible values
 range from 1 to 2147483647. The default is 100000 bytes
 per second.
 -te_unresv_bw_priority3 (OSPFv2 only)
 Specifies the amount of bandwidth not yet
 reserved at priority level 3. Possible values
 range from 1 to 2147483647. The default is 100000 bytes
 per second.
 -te_unresv_bw_priority4 (OSPFv2 only)
 Specifies the amount of bandwidth not yet
 reserved at priority level 4. Possible values
 range from 1 to 2147483647. The default is 100000 bytes
 per second.
 -te_unresv_bw_priority5 (OSPFv2 only)
 Specifies the amount of bandwidth not yet
 reserved at priority level 5. Possible values
 range from 1 to 2147483647. The default is 100000 bytes
 per second.
 -te_unresv_bw_priority6 (OSPFv2 only)
 Specifies the amount of bandwidth not yet
 reserved at priority level 6. Possible values
 range from 1 to 2147483647. The default is 100000 bytes
 per second.
 -te_unresv_bw_priority7 (OSPFv2 only)
 Specifies the amount of bandwidth not yet
 reserved at priority level 7. Possible values
 range from 1 to 2147483647. The default is 100000 bytes
 per second.
 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
 range from 0 to 65535.
 -vci_step
 Specifies the step size in which the VCI value is
 incremented. Possible values range from 0 to 65535.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 1. If set to 0, it indicates
 the network is Ethernet. If set to 1, it indicates that
 Token Ring and packets are dropped by Ethernet ports.
 -vlan_id
 The VLAN ID of the first VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1.
 -vlan_id_mode
 For multiple neighbor configurations, configures the VLAN ID
OSPF Functions
660
 mode to "fixed" or "increment." If you set this argument to
 "increment," then you must also specify the -vlan_id_step
 argument to indicate the step size.
 -vlan_id_step
 The step size by which the VLAN value is incremented when
 you set -vlan_id_mode to "increment." Possible values range
 from 0 to 4095. You must specify the step when the -count
 argument is greater than 1.
 -vlan_user_priority
 VLAN priority for the VLANs on this port. Possible values
 range from 0 to 7. The default is 1.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id.
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when router count
 is greater than 1. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values
 range from 0 to 4095. You must specify this step when
 you specify "increment" for the -vlan_outer_id_mode argument.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values are 0 to 255.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are 0 to 255.
 -tunnel_handle
 Specifies the GRE tunnel handle, an array value, initialized
 by the emulation_gre_config command. The router sends traffic
 through this tunnel.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -handle
 -area_id_step
 -count
 -mac_address_start
 -mac_address_step
 -intf_ip_addr_step
OSPF Functions
661
 -gateway_ip_addr_step
 -router_id_step

Cisco-specific Arguments:
 The following attributes are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -gre_checksum
 -gre_local_ip
 -gre_remote_ip
 -gre_tunnel
 -host_route
 -instance_id
 -instance_id_step
 -int_msg_exchange
 -loopback_ip_addr
 -loopback_ip_addr_step
 -lsa_discard_mode
 -max_lsas_per_pkt
 -md5_key
 -mtu
 -neighbor_dr_eligibility
 -neighbor_intf_ip_addr
 -neighbor_intf_ip_add_step
 -neighbor_router_id
 -neighbor_router_id_step
 -poll_interval
 -te_enable
 -te_router_id
 -transmit_delay
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle
 The handle(s) of the OSPF router returned by the
 sth::emulation_ospf_config function when you use -mode
 create to create a new OSPF router. When you want to modify
 or delete the OSPF router, you specify the handle as the
 value to the -handle argument.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_ospf_config function creates, enables, modifies, deletes, or
 disables an emulated OSPF router. Use the -mode argument to specify the action
 to perform. (See the -mode argument description for information about the
 actions.)
 When you create an OSPF emulated router, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated router will use for
 OSPF communication. (The port handle value is contained in the keyed list
 returned by the connect function.)
 In addition to specifying the port handle (-port_handle), you must also
 provide the following arguments when you create an OSPF router:
 -intf_ip_addr
 -mode create
 -router_id
 -area_type
OSPF Functions
662
 -area_id
 -network_type
 When you create an OSPF router, Spirent HLTAPI creates the router in
 memory and downloads the configuration to the card. To start the router,
 use the sth::emulation_ospf_control function with -mode start. OSPF
 communication begins with a discovery phase in which routers transmit Hello
 packets to identify themselves. Through the reception of Hello packets from
 other routers, a router discovers its neighbors. Two routers become
 neighbors by agreeing on the following criteria:
 - The connecting interfaces of the router are in the same area (Area ID)
 - The routers use the same type of authentication
 - How often they will exchange Hello packets to maintain the neighbor
 relationship
 - How long they will wait to hear from a neighbor before it is declared
 dead
 - The Stub Area Flag
 On point-to-point and broadcast networks, the router discovers neighbors by
 sending Hello packets to the IP multicast address 224.0.0.5. On broadcast
 and non-broadcast, multi-access (NBMA) networks the Hello Protocol also
 elects a Designated Router (DR).
 Once you start sessions, Spirent HLTAPI handles all of the message
 traffic for the emulated routers. During the test, use the
 sth::emulation_ospf_control function to stop and re-start individual
 routers. After you have created the routers for your test, use the
 sth::emulation_ospf_lsa_config function to set up link state
 advertisements.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates an OSPFv2 router on the specified port:
 sth::emulation_ospf_config \
 -port_handle $port(1) \
 -intf_ip_addr 134.231.242.112\
 -hello_interval 1\
 -router_priority 10\
 -session_type ospfv2 \
 -gateway_ip_addr 134.231.242.2\
 -area_id 10.01.12.24\
 -mode create
 The above example produced the following output:
 {{handle ospfv2routerconfig1} {status 1}}
 The following example creates an OSPFv3 router on the specified port:
 sth::emulation_ospf_config \
 -mode create \
 -port_handle $port(1) \
 -area_id 10.01.12.24\
 -intf_ip_addr 2000::2 \
 -hello_interval 1 \
 -router_priority 10 \
 -session_type ospfv3\
 -intf_prefix_length 27
 The above example produced the following output:
 {{handle ospfv3routerconfig1} {status 1}}
 The following example enables OSPF over a provided device:
 puts "Config LDP--------------------"
 set routerStatus [sth::emulation_ldp_config -mode create \
OSPF Functions
663
 -port_handle $port1Handle \
 -intf_ip_addr 13.25.0.2\
 -loopback_ip_addr 13.25.0.1 \

 -gateway_ip_addr 13.25.0.1\
 -remote_ip_addr 13.25.0.2 \

 -graceful_recovery_timer 55 \
 -keepalive_interval 56 \
 -reconnect_time 57 \
 -recovery_time 58 \
 -egress_label_mode exnull \
 -label_adv on_demand \
 -bfd_registration 1 \
 ]
 puts "LDP: $routerStatus"
 keylget routerStatus handle router
 puts "Config OSPF--------------------"
 set routerStatus [sth::emulation_ospf_config
 -mode create \
 -handle $router\
 -session_type ospfv2 \
 -area_id 0.0.0.0 \
 -network_type ptop \
 -count 1 \
 -router_priority 0 \
 -interface_cost 1 \
 -lsa_retransmit_delay 5 \
 -dead_interval 40 \
 -area_type stub \
 -demand_circuit 1 \
 -te_max_bw 5000 \
 -te_admin_group 5000 \
 -option_bits 0x24 \
 -bfd_registration 1 \
 ]
 puts "OSPF: #$routerStatus"
Sample output for example shown above:
 Config LDP--------------------
 LDP: {handle router1} {handles router1} {status 1}
 Config OSPF --------------------
 OSPF: {session_router ospfv2routerconfig1} {handle router1}
 {handles router1} {status 1}
 #### HLTAPI for Python ####
 To create an OSPFv2 router on the specified port:

 device_ret0 = sth.emulation_ospf_config (
 mode = 'create',
 session_type = 'ospfv2',
 authentication_mode = 'none',
 network_type = 'native',
 option_bits = '0x2',
 port_handle = port_handle[0],
 router_id = '192.0.0.1',
 mac_address_start = '00:10:94:00:00:01',
 intf_ip_addr = '192.85.1.3',
 gateway_ip_addr = '192.85.1.1',
 intf_prefix_length = '24',
 hello_interval = '10',
 lsa_retransmit_delay= '5',
 te_metric = '0',
 router_priority = '0',
 te_enable = '0',
 dead_interval = '40',
 interface_cost = '1',
 area_id = '0.0.0.0',
 graceful_restart_enable= '0');
OSPF Functions
664
 Sample Output:
 {'status': '1', 'handles': 'router1', 'handle': 'router1',
 'session_router': 'ospfv2routerconfig1'}

 To create an OSPFv3 router on the specified port:
 device_ret0 = sth.emulation_ospf_config (
 mode = 'create',
 ip_version = '6',
 session_type = 'ospfv3',
 network_type = 'native',
 option_bits = '0x13',
 port_handle = port_handle[0],
 hello_interval = '10',
 lsa_retransmit_delay= '5',
 instance_id = '0',
 router_priority = '0',
 dead_interval = '40',
 interface_cost = '1',
 area_id = '0.0.0.0',
 intf_ip_addr = '2001::2',
 gateway_ip_addr = '2001::1',
 intf_prefix_length = '64',
 router_id = '192.0.0.1',
 mac_address_start = '00:10:94:00:00:01');

 Sample Output:
 {'status': '1', 'handles': 'router1', 'handle': 'router1',
 'session_router': 'ospfv3routerconfig1'}

 #### HLTAPI for Perl ####
 To create an OSPFv2 router on the specified port:

 my %device_ret0 = sth::emulation_ospf_config (
 mode => 'create',
 session_type => 'ospfv2',
 authentication_mode => 'none',
 network_type => 'native',
 option_bits => '0x2',
 port_handle => "$hport[1]",
 router_id => '192.0.0.1',
 mac_address_start => '00:10:94:00:00:01',
 intf_ip_addr => '192.85.1.3',
 gateway_ip_addr => '192.85.1.1',
 intf_prefix_length => '24',
 hello_interval => '10',
 lsa_retransmit_delay=> '5',
 te_metric => '0',
 router_priority => '0',
 te_enable => '0',
 dead_interval => '40',
 interface_cost => '1',
 area_id => '0.0.0.0',
 graceful_restart_enable=> '0');

 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'handles';
 $VAR4 = 'router1';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'session_router';
 $VAR8 = 'ospfv2routerconfig1';

 To create an OSPFv3 router on the specified port:

 my %device_ret0 = sth::emulation_ospf_config (
 mode => 'create',
 ip_version => '6',
 session_type => 'ospfv3',
OSPF Functions
665
 network_type => 'native',
 option_bits => '0x13',
 port_handle => "$hport[1]",
 hello_interval => '10',
 lsa_retransmit_delay=> '5',
 instance_id => '0',
 router_priority => '0',
 dead_interval => '40',
 interface_cost => '1',
 area_id => '0.0.0.0',
 intf_ip_addr => '2001::2',
 gateway_ip_addr => '2001::1',
 intf_prefix_length => '64',
 router_id => '192.0.0.1',
 mac_address_start => '00:10:94:00:00:01');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'handles';
 $VAR4 = 'router1';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'session_router';
 $VAR8 = 'ospfv3routerconfig1';
Notes:
 1) OSPFv3 interfaces are per link instead of per IPv6 subnet. Two
 nodes can "talk OSPF" directly over a single link even if they do
 not share a common IPv6 subnet.
 2) IPv6 addresses are not present in packets, except in prefix LSA
 packets (Inter-Area Prefix LSAs and Intra-Area Prefix LSAs).
 3) In OSPFv3, neighboring routers are always identified by router
 ID. In OSPFv2, neighbors on broadcast and NBMA networks are
 identified by IPv4 addresses.
 4) In OSPFv3,router and network LSAs do not contain network
 prefixes. New prefix LSAs have "referenced" fields that determine
 which router or network LSA they are advertising prefixes on
 behalf of.
 5) OSPFv3 is enabled at the port level.
End of Procedure Header
sth::emulation_ospf_control
Name:
 sth::emulation_ospf_control
Purpose:
 Starts, stops, and controls flapping operations on an OSPF router. You
 can also use this function to withdraw a route or an LSA handle and to
 control route flapping.
Synopsis:
 sth::emulation_ospf_control
 -mode stop
 -handle <router_handle> |
 -mode {start|restart}
 -port_handle <port_handle> |
 -mode flap
 {-flap_lsa {list of LSA handles} | -flap_routes {list of topology_elem_handles}
OSPF Functions
666
 [-flap_count <int eger>]
 [-flap_down_time <integer>]
 [-flap_interval_time <integer>]
 [-age_lsa {list of LSA handles}
 [-readvertise_lsa {list of LSA handles}
 [-withdraw_lsa {list of LSA handles}
 [-advertise {list of topology_elem_handles}]
 [-withdraw {list of topology_elem_handles}]
Arguments:
 -advertise
 Not supported in this release.
 Advertises LSAs for topology elements.
 -age_lsa
 Specifies a list of LSA handles for which to withdraw the
 advertised LSA. For example:
 ::sth::emulation_ospf_control -age_lsa $hOspfLsaList.
 -readvertise_lsa
 Specifies the list of LSA handles to readvertise. For example:
 sth::emulation_ospf_control -readvertise_lsa $hOspfLsaList
 -flap_count
 Specifies the number of flaps for each LSA handle specified in
 the -flap_lsa argument and/or for each route handle specified by
 the -flap_route argument. Each flap includes one advertise and
 one withdraw operation. When you want to perform multiple
 flapping operations, you can define this argument.
 -flap_down_time
 During a flapping operation, specifies the period (in
 seconds) during which the LSAs or routes are withdrawn from
 their neighbors. The default is 60 seconds.
 -flap_interval_time
 During a flapping operation, the time (in seconds) between
 flap cycles. The default is 60 seconds.
 -flap_lsa
 A list of LSAs on which to perform flapping operations. When
 the mode argument is set to "flap" (-mode flap), you must
 also specify either the -flap_lsa or -flap_routes argument.
 -flap_routes
 Not supported in this release.
 Perform periodic route flapping on topology elements. When
 the mode argument is set to "flap" (-mode flap), you must
 also specify either the -flap_lsa or -flap_routes argument.
 -handle
 Identifies the router handle, returned from the
 sth::emulation_ospf_config function when creating an OSPF
 router.
 -mode
 Specifies the action to be taken. Possible values are start,
 stop, or restart the OSPF router, This argument is
 mandatory.
 start - Starts the OSPF router with the specified handle
 (-handle), or starts all of the OSPF routers associated
 with the port specified with -port_handle.
 stop - Stops the OSPF router with the specified handle
 (-handle), or stops all of the OSPF routers associated
 with the port specified with -port_handle.
 restart - Stops the OSPF router with the specified handle
 (-handle) and then starts it again, or stops and then
OSPF Functions
667
 restarts all OSPF routers associated with the port
 specified with -port_handle. This is not a graceful
 restart.
 flap - Enables flapping on the LSA handles specified in the
 -flap_lsa argument and/or for each route handle specified by
 the -flap_route argument. This attribute withdraws the
 routes or LSAs for the time defined by -flap_down_time and
 then readvertises the routes or LSAs for the time defined by
 -flap_interval_time.

 If you specify "flap" for the -mode argument without
 defining -flap_count, Spirent TestCenter will perform the
 flapping operation only once. If you define -flap_count
 while you specify -mode flap, Spirent TestCenter will
 perform the flapping operation the number of times defined
 in the -flap_count argument.
 For example, if there is an OSPF session handle ospf_handle1
 and an LSA handle lsa_handle1, a 100-time flapping of this
 LSA can be processed by calling the following command.

 set cmdStatus [sth::emulation_ospf_control -mode flap \
 -handle ospf_handle1 \
 -flap_lsa lsa_handle1 \
 -flap_interval_time 300 \
 -flap_down_time 30 \
 -flap_count 100]
 -port_handle
 Specifies the handle for the port to be controlled. That is,
 the port on which all OSPF routers should be started,
 stopped, or restarted.
 -withdraw
 Not supported in this release.
 -withdraw_lsa
 Specifies the list of LSA handles to withdraw.
Cisco-specific Arguments:
 The following attributes are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -advertise_lsa
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_ospf_control function controls the starting and
 stopping of OSPF routers as well as withdrawing LSAs.
 Note: Because Spirent HLTAPI advertises only at the router level, not at
 the LSA level, all (both specified and unspecified) LSAs associated with
 the specified LSA's router(s) will be readvertised.
Examples:
 #### HLTAPI for Tcl ####
 To start an OSPF router:
 sth::emulation_ospf_control \
 -mode start \
 -handle Ospfv2RouterConfig1
OSPF Functions
668
 To stop an OSPF router:
 sth::emulation_ospf_control -mode stop -handle Ospfv2RouterConfig1
 To restart an OSPF router:
 sth::emulation_ospf_control -mode restart -handle Ospfv2RouterConfig1
Sample Output: {status 1}
 #### HLTAPI for Python ####
 To start an OSPF router:
 ctrl_ret1 = sth.emulation_ospf_control (
 handle = device_list,
 mode = 'start');

 Sample Output:
 {'status': '1'}
 #### HLTAPI for Perl ####
 To start an OSPF router:
 my %ctrl_ret1 = sth::emulation_ospf_control (
 handle => "$device_list",
 mode => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';

Notes:
 1) Graceful restart is not available for this function.
 2) You can specify either the -mode or -withdraw_lsa argument but
 not both.
End of Procedure Header
sth::emulation_ospf_lsa_config
Name:
 sth::emulation_ospf_lsa_config
Purpose:
 Creates, modifies, or deletes a Link State Advertisement (LSA).
 When you add a route (see description for -mode), Spirent HLTAPI
 returns the LSA handle in a keyed list with "lsa_handles" as the key.
Synopsis:
 sth::emulation_ospf_lsa_config
 -mode {create|reset} -handle <router_handle> |
 -mode {modify|delete} -lsa_handle <lsa_handle>
 [-adv_router_id <a.b.c.d>]
 [-link_state_id <a.b.c.d> | <0-65535>]
 [-lsa_age <0-3600>]
 [-ls_seq <0 - 0xffffffff>]
 [-options <hexadecimal> ]
 [-session_type {ospfv2 | ospfv3}]
 [-type asbr_summary]
 [-type ext_pool]
 [-external_number_of_prefix <numeric>]
 [-external_prefix_forward_addr {<a.b.c.d> | <a:b:c:d:e:f:g:h>]
 [-external_prefix_length <0-32> | <1-128>]
 [-external_prefix_metric <1-16777215>]
 [-external_prefix_start {<a.b.c.d> | <a:b:c:d:e:f:g:h>}]
 [-external_prefix_step <integer>]
OSPF Functions
669
 [-external_prefix_type {{1|2} | {0|1} }]
 [-type network]
 [-attached_router_id <a.b.c.d>]
 [-net_attached_router {create|delete|reset}]
 [-net_prefix_length <1-128> ]
 [-type nssa_ext_pool]
 [-nssa_number_of_prefix <numeric>]
 [-nssa_prefix_forward_addr {<a.b.c.d> | <a:b:c:d:e:f:g:h>}]
 [-nssa_prefix_length <1-128>]
 [-nssa_prefix_metric <1-16777215>]
 [-nssa_prefix_start {<a.b.c.d> | <a:b:c:d:e:f:g:h>}]
 [-nssa_prefix_step <numeric>]
 [-nssa_prefix_type {{1|2} | {0|1} }]
 [-type router]
 [-router_abr {0|1}]
 [-router_asbr {0|1}]
 [-router_link_data <a.b.c.d>]
 [-router_link_id <a.b.c.d>]
 [-router_link_step <a.b.c.d>]
 [-router_link_count <numeric>]
 [-router_link_idx <numeric>]
 [-router_link_metric <1-65535>]
 [-router_link_mode {create|delete|reset}]
 [-router_link_type {ptop|transit|stub|virtual}]
 [-router_virtual_link_endpt {0|1} ]
 [-type summary_pool]
 [-summary_number_of_prefix <numeric>]
 [-summary_prefix_length <1-128>]
 [-summary_prefix_metric <1-65535>]
 [-summary_prefix_start {<a.b.c.d> | <a:b:c:d:e:f:g:h>}]
 [-summary_prefix_step <numeric>]
 [-type intra_area_prefix]
 [-intra_area_adv_router_id <a.b.c.d>]
 [-intra_area_age <0-3600>]
 [-intra_area_checksum <good|bad>]
 [-intra_area_link_state_id <NUMERIC>]
 [-intra_area_seq_num <0-0xffffffff>]
 [-intra_area_prefix_start <IPv6>]
 [-intra_area_prefix_step <NUMERIC>]
 [-intra_area_number_of_prefix <NUMERIC>]
 [-intra_area_prefix_length <0-128>]
 [-intra_area_prefix_metric <0-65535>]
 [-intra_area_prefix_options < NUBIT | LABIT | MCBIT | PBIT | UNUSED4 |
 UNUSED5 | UNUSED6 | UNUSED7 >]
 [-intra_area_route_category <undefined | primary | secondary | unique | any> ]
 [-intra_area_ref_ls_type <0-9999>]
 [-intra_area_ref_link_state_id <NUMERIC>]
 [-intra_area_ref_advertising_router_id <a.b.c.d>]
 [-type opaque_type_10]
 [-te_tlv_type link]
 [-te_link_id <a.b.c.d>]
 [-te_link_type {ptop|multiaccess}]
 [-te_tlv_type router]
 [-te_router_addr <a.b.c.d>]
 [-te_instance_id <instance of TE LSA> ]
 [-te_metric <0-4294967295>]
 [-te_local_ip <a.b.c.d>]
 [-te_remote_ip <a.b.c.d>]
 [-te_admin_group <1-4294967295>]
 [-te_max_bw <1-2147483647>]
 [-te_max_resv_bw <1-2147483647>]
 [-te_unres_bw_priority0 <1-2147483647>]
 [-te_unres_bw_priority1 <1-2147483647>]
 [-te_unres_bw_priority2 <1-2147483647>]
 [-te_unres_bw_priority3 <1-2147483647>]
 [-te_unres_bw_priority4 <1-2147483647>]
 [-te_unres_bw_priority5 <1-2147483647>]
 [-te_unres_bw_priority6 <1-2147483647>]
 [-te_unres_bw_priority7 <1-2147483647>]
 [-type router_info]
 [-router_info_adv_router_id <a.b.c.d>]
OSPF Functions
670
 [-router_info_age <0-3600>]
 [-router_info_checksum {good|bad}]
 [-router_info_seq_num <hex>]
 [-router_info_instance <integer>]
 [-router_info_options {tbit | ebit | mcbit | npbit | eabit | dcbit |
 obit | unused7}]
 [-router_info_scope {link_local | area_local | area_system_wide}]
 [-type extended_prefix ]
 [-extended_prefix_adv_router_id <a.b.c.d>]
 [-extended_prefix_age <0-3600>]
 [-extended_prefix_checksum <good|bad>]
 [-extended_prefix_seq_num <hex>]
 [-extended_prefix_instance <integer>]
 [-extended_prefix_options {tbit | ebit | mcbit | npbit | eabit | dcbit
 | obit | unused7}]
 [-extended_prefix_scope {link_local | area_local | area_system_wide}]
 [-type extended_link]
 [-extended_link_adv_router_id <a.b.c.d>]
 [-extended_link_age <0-3600>]
 [-extended_link_checksum {good|bad}]
 [-extended_link_seq_num <hex>]
 [-extended_link_instance <integer>]
 [-extended_link_options {tbit | ebit | mcbit | npbit | eabit | dcbit
 | obit | unused7}]
 [-extended_link_scope {link_local | area_local | area_system_wide}]
Arguments:
 -adv_router_id
 Specifies the OSPF router ID of the LSA's originator.
 (the Advertising Router field in the LSA header). The
 default is 0.0.0.0. For router LSAs, this value is identical
 to the Link-state ID value. For network LSAs, this value is
 originated by the designated router. For summary LSAs, this
 value is originated by area border routers. For
 external/NSSA LSAs, this value is originated by AS boundary
 routers.
 -extended_link_adv_router_id
 Spirent Extension (for Spirent HLTAPI only).
 Router ID of the simulated router that will advertise this
 Opaque/TE LSA. The default is the IPv4 address from the router
 interface. See the description in -type for more information on
 the LSA.

 -extended_link_age
 Spirent Extension (for Spirent HLTAPI only).
 Age of the Extended Link Opaque LSA, in seconds. This field is
 examined if a router receives two instances of an LSA with
 identical LS Sequence Numbers and LS Checksums. The value is 0
 when the LSA is originated. The default value is 0.
 -extended_link_checksum
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the Extended Link Opaque LSA will be advertised
 with a good or bad checksum. Possible values are good and bad.
 The default is good.
 -extended_link_seq_num
 Spirent Extension (for Spirent HLTAPI only).
 Initial value of the LS sequence number in an Extended Link
 Opaque LSA header. It is used to detect old and duplicate LSAs.
 The larger the sequence number, the more recent the LSA.
 Possible Values range from 0 to 0xffffffff. The default value is
 0x80000001.

 -extended_link_instance
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the router's OSPF instance for the Extended Link Opaque LSA.
 Not currently used by OSPFv2. The default value is 1.
OSPF Functions
671
 -extended_link_options
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 8-bit field of capabilities advertised with each
 prefix of the Extended Link Opaque LSA.
 Possible values are described below:
 tbit Type of Service
 ebit Describes the way AS-External LSAs are flooded
 mcbit Specifies whether IP multicast datagrams are forwarded
 npbit Specifies the handling of Type 7 LSAs
 eabit Specifies the router's willingness to receive and forward
 External-Attributes LSAs
 dcbit Specifies the router's handling of demand circuits
 obit Specifies the router's willingness to receive and forward
 Opaque LSAs used for OSPF traffic engineering (OSPF-TE)
 extensions
 unused7 Not used
 -extended_link_scope
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the flooding scope of the Extended Link Opaque LSA.
 Possible values are described below:

 link_local Type-9 Opaque LSA. Not flooded beyond the
 local (sub)network
 area_local Type-10 Opaque LSA. Not flooded beyond the
 borders of the associated area
 area_system_wide Type-11 Opaque LSA. The LSA is flooded
 throughout the Autonomous System (AS)

 The default value is area_local.
 -extended_prefix_adv_router_id
 Spirent Extension (for Spirent HLTAPI only).
 Router ID of the simulated router that will advertise this
 Opaque/TE LSA. The default is the IPv4 address from the router
 interface. See the description in -type for more information on
 the LSA.

 -extended_prefix_age
 Spirent Extension (for Spirent HLTAPI only).
 Age of the Extended Prefix Opaque LSA, in seconds. This field is
 examined if a router receives two instances of an LSA with
 identical LS Sequence Numbers and LS Checksums. The value is 0
 when the LSA is originated. The default is 0.
 -extended_prefix_checksum
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the Extended Prefix Opaque LSA will be advertised
 with a good or bad checksum. Possible values are good and bad.
 The default is good.
 -extended_prefix_seq_num
 Spirent Extension (for Spirent HLTAPI only).
 Initial value of the LS sequence number in an Extended Prefix
 Opaque LSA header. It is used to detect old and duplicate LSAs.
 The larger the sequence number, the more recent the LSA. Possible
 Values range from 0 to 0xffffffff. The default is 0x80000001.

 -extended_prefix_instance
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the router's OSPF instance for the Extended Prefix
 Opaque LSA. Not currently used by OSPFv2. The default is 1.
 -extended_prefix_options
 Spirent Extension (for Spirent HLTAPI only).
 8-bit field of capabilities advertised with each prefix of the
 Extended Prefix Opaque LSA.
 Possible values are described below:
 tbit Type of Service
 ebit Describes the way AS-External LSAs are flooded
 mcbit Specifies whether IP multicast datagrams are forwarded
OSPF Functions
672
 npbit Specifies the handling of Type 7 LSAs
 eabit Specifies the router's willingness to receive and forward
 External-Attributes LSAs
 dcbit Specifies the router's handling of demand circuits
 obit Specifies the router's willingness to receive and forward
 Opaque LSAs used for OSPF traffic engineering (OSPF-TE)
 extensions
 unused7 Not used
 -extended_prefix_scope
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the flooding scope of the Extended Prefix Opaque LSA.
 Possible values are described below:

 link_local Type-9 Opaque LSA. Not flooded beyond the
 local (sub)network
 area_local Type-10 Opaque LSA. Not flooded beyond the
 borders of the associated area
 area_system_wide Type-11 Opaque LSA. The LSA is flooded
 throughout the AS

 The default value is area_local.
 -handle
 Identifies the OSPF router on which the LSA is created.
 -intra_area_adv_router_id
 Specifies the simulated router that will advertise Intra-Area
 Prefix LSAs. The value must be in IPv4 format. The default is
 0.0.0.0.

 -intra_area_link_state_id
 LSA identifier, chosen arbitrarily by the advertising router.
 The default value is 0.

 -intra_area_age
 Initial value of the LS Age in an Intra-Area Prefix LSA header.
 The default value is 0.

 -intra_area_checksum
 Determines whether the Intra-Area Prefix LSA will be advertised
 with a good or a bad checksum. A bad checksum indicates a
 corrupted LSA and is used for negative testing.
 Possible values are GOOD and BAD. The default is GOOD.

 -intra_area_seq_num
 Initial value of the LS sequence number in an Intra-Area Prefix
 LSA header. This value must be in hexadecimal format. The default
 is 0x80000001.

 -intra_area_prefix_start
 Specifies the starting IPv6 address. The default value is
 2000::1.

 -intra_area_prefix_step
 Specifies the amount by which to increment the network part
 of the first IPv6 address to generate subsequent IPv6 addresses.
 The default value is 1.

 -intra_area_number_of_prefix
 Specifies the number of routes. The default value is 1.
 -intra_area_prefix_length
 Specifies the number of leading bits which form the network
 part of an IP address. Possible values range from 1 to 128.
 The default value is 64.

 -intra_area_prefix_metric
 Specifies a metric value for a type 9 Intra-Area Prefix LSA.
 Possible values range from 0 to 65535. The default value is 1.
OSPF Functions
673

 -intra_area_prefix_options
 8-bit field of capabilities advertised with each prefix.
 Possible values are described below:

 Value Description

 NUBIT NU (NU, Bit 1): No unicast capability bit. If set,
 the prefix is excluded from IPv6 unicast
 calculations.
 LABIT LA (LA, Bit 0): Local Address capability bit. If
 set, the prefix becomes an IPv6 interface address
 of the advertising router.
 MCBIT Multicast (MC, Bit 2): Multicast capability bit.
 If set, the prefix is included in the IPv6
 multicast calculations.
 PBIT NSSA (N/P, 3): The Propagate (P) bit. Set this on
 the NSSA area prefixes that should be
 readvertised at the NSSA border.
 UNUSED4 Unused bit
 UNUSED5 Unused bit
 UNUSED6 Unused bit
 UNUSED7 Unused bit

 The default value is 0.

 -intra_area_route_category
 Specifies the route type. Possible values are described below:

 Value Description

 UNDEFINED Undefined. The default category assigned to a
 manually created block.
 PRIMARY Primary. A preferred route that has duplicates
 (secondary routes)
 Secondary A less preferred backup route.
 UNIQUE Unique. Indicates that a single port in the test
 configuration advertises this route.
 ANY Any route

 The default value is UNDEFINED.

 -intra_area_ref_ls_type
 Specifies the type of the referenced LSA. Possible values
 range from 0 to 9999. The default value is 0.

 -intra_area_ref_link_state_id
 Specifies the LS ID of the LSA that carries additional information
 for the advertised route. The default value is 0.

 -intra_area_ref_advertising_router_id
 Specifies the ID of the router that originated the LSA or the
 designated router. The default value is 0.0.0.0.
 -link_state_id
 For OSPFv2, this argument identifies the part of the routing
 domain being described by the LSA. Depending on the
 advertisement's LS type, the link state ID takes on one of the
 following values:
 Type 1 - The originating router's Router ID.
 Type 2 - The IP interface address of the network's
 Designated Router.
 Type 3 - The destination network's IP address.
 Type 4 - The Router ID of the described AS boundary router.
 Type 5 - The destination network's IP address.
OSPF Functions
674
 Type 7 - The destination network's IP address.
 Note: Do not specify -link_state_id with Type 3
 (summary_pool), Type 5 (ext_pool), or Type 7 (nssa_ext_pool)
 LSAs.
 For OSPFv3, this argument specifies a decimal number that
 is used as an interface index to uniquely identify a link.
 Possible values range from 0 to 65535. The default value is 0.
 -lsa_handle
 Identifies the LSA handle to modify or delete. You obtain
 the LSA handle from the sth::emulation_ospf_lsa_config
 function when you use "-mode create".
 -ls_age
 Specifies the age of the LSA, in seconds. The LS Age field
 is examined if a router receives two instances of an LSA
 with identical LS sequence numbers and LS checksums.
 Possible values range from 0 to 3600. The default is 0.
 -ls_seq
 Specifies the LS sequence number, which is used to detect
 old and duplicate LSAs. The larger the sequence number, the
 more recent the LSA. The sequence number is a two-byte
 value. Possible values range from 0 to 0xffffffff. The
 default is 0x80000001.
 -mode
 Specifies the action to perform. You can create, modify, or
 delete an LSA, or delete all LSAs (reset). The modes are
 described below:
 create - Creates a new Link State Advertisement. See the
 description of the -type argument for a list of LSAs
 that you can create. Use the -handle argument to
 specify the router under which the LSA is created.
 modify - Modifies a Link State Advertisement. Use the
 -lsa_handle argument to specify the LSA to modify.
 delete - Deletes a Link State Advertisement. Use the
 -lsa_handle argument to specify the LSA to delete.
 reset - Deletes all LSAs under the router specified in the
 -handle argument.
 -net_attached_router
 Specifies whether to add an attached router to the
 network, delete an existing attached router from the
 network, or reset all the attached routers of the
 network. For create and delete mode, you must specify the
 -attached_router_id argument. Possible values are create,
 delete, and reset.
 When you specify "-mode create", you must also specify
 "create" for the "-net_attached_router" argument. However,
 when you specify "-mode modify", then "-net_attached_router"
 can be either "delete" or "reset".
 -net_prefix_length
 Specifies the number of leading bits which form the network
 part of an IP address. Possible values for IPv4 addresses
 range from 1 to 32; the default is 24, Possible values for
 IPv6 addresses range from 1 to 128;the default is 64,
 -nssa_number_of_prefix
 Specifies the number of routes in a Type 7 NSSA area
 external pool LSA. Use this argument only if you specified
 "-type nssa_ext_pool".
OSPF Functions
675
 -nssa_prefix_forward_addr
 Specifies the forwarding IP address for a Type 7 NSSA
 external pool LSA. Use this argument only if you specified
 "-type nssa_ext_pool". The default for IPv4 is 0.0.0.0
 and the default for IPv6 is 0:0:0:0:0:0:0:0.
 -nssa_prefix_length
 Specifies the number of leading bits which form the network
 part of an IP address for a Type 7 NSSA external pool LSA.
 Use this argument only if you specified "-type
 nssa_ext_pool". Possible values for IPv4 addresses range
 from 1 to 32; the default is 24, Possible values for IPv6
 addresses range from 1 to 128;the default is 64,
 -nssa_prefix_metric
 Specifies a metric value for a Type 7 NSSA external pool
 LSA. Use this argument only if you specified "-type
 nssa_ext_pool". Possible values range from 1 to 16777215.
 -nssa_prefix_start
 Specifies the starting IP address for a Type 7 NSSA external
 pool LSA. Use this argument only if you specified
 "-type nssa_ext_pool". The default for IPv4 is 0.0.0.0
 and the default for IPv6 is 0:0:0:0:0:0:0:0.
 -nssa_prefix_step
 Specifies the amount by which to increment the network part
 of the first IP address to generate subsequent IP addresses
 belonging to different routes for a Type 7 NSSA external
 pool LSA. Use this argument only if you specified "-type
 nssa_ext_pool".
 -nssa_prefix_type
 Specifies the type of NSSA external pool LSA metric by
 setting the E bit in the LSA header. For OSPFv2, possible values
 are 1 and 2. Specify 1 for type 1 (internal cost is added to
 external cost) or 2 for type 2 (external cost only). For OSPFv3,
 possible values are 0 (Metric is expressed in the same units as
 interface cost.) and 1 (Metric is considered larger than any
 intra-AS path). The default is 1. Use this argument only if you
 specified "-type nssa_ext_pool".
 -options
 A bit mask that specifies the Options field settings
 in the LSAs. The Options field describes the optional
 OSPF capabilities of the router. Section A.2 in RFC 2328
 describes the Options field for OSPFv2. Section A.2 in RFC
 2740 describes the Options field for OSPFv3.
 Use hexadecimal for this value. The default for OSPFv2,
 0x02, sets the E-bit (binary 00000010). The default for
 OSPFv3, 0x13, sets the R-bit, the E-bit, and the V6-bit
 (binary 000...010011).
 For OSPFv2, possible values for this argument are:
 Value Description
 O: 0x40 This bit describes the router's willingness to
 receive and forward Opaque LSAs.
 DC: 0x20 This bit describes the router's handling of demand
 circuits.
 EA: 0x10 This bit describes the router's willingness to
 receive and forward External-Attributes-LSAs.
 NP: 0x08 This bit describes the handling of Type-7 LSAs.
 MC: 0x04 This bit describes whether IP multicast datagrams
 are forwarded.
OSPF Functions
676
 E: 0x02 This bit describes the way AS-external-LSAs are
 flooded. When this bit is set, the area type is
 external_capable; when this bit is cleared, the
 area type is stub.
 For OSPFv3, possible values for this argument are:
 Value Description
 R: 0x10 This bit indicates if the originator is an active
 router. If this is clear, routes that transit the
 advertising node cannot be computed.
 V6: 0x01 If this bit is clear, the router/link should be
 excluded from IPv6 routing calculations.

 Note that if you need multiple values for this argument,
 you can specify a hexadecimal that is equal to the sum of
 of the target values above. For example, 0x42 will set the
 E-bit and the O-bit for OSPFv2 at the same time.

 -router_abr
 Identifies the router as an area boundary router (ABR).
 Corresponds to the E (external) bit in router LSA. Possible
 values are 0 and 1. Specify 0 for false or 1 for true. The
 default is 0 (false). Use this argument only if you
 specified "-type router".
 -router_asbr
 Identifies the router as an AS boundary router (ASBR).
 Corresponds to the B (border) bit in router LSA. Possible
 values are 0 and 1. Specify 0 for false or 1 for true. The
 default is 0 (false). Use this argument only if you
 specified "-type router".
 -router_info_adv_router_id
 Spirent Extension (for Spirent HLTAPI only).
 ID of the simulated router that will advertise this RI LSA. The
 value is the IP address of the router interface. See the
 description in -type for more information on the LSA.

 -router_info_age
 Spirent Extension (for Spirent HLTAPI only).
 Age of the RI LSA, in seconds. Possible values range from 0 to
 3600. The default value is 0.

 -router_info_checksum
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the LSA will be advertised with a good or bad
 checksum. Possible values are good and bad. The default value is good.

 -router_info_seq_num
 Spirent Extension (for Spirent HLTAPI only).
 Initial value of the LS sequence number in the RI LSA header. It is
 used to detect old and duplicate LSAs. The larger the sequence
 number, the more recent the LSA. Possible values range from 0 to
 0xffffffff. The default value is 0x80000001.

 -router_info_instance
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the router's OSPF instance for the RI LSA. Not
 currently used by OSPFv2. The default value is 1.

 -router_info_options
 Spirent Extension (for Spirent HLTAPI only).
 8-bit field of capabilities advertised with each prefix of the RI
 LSA. Possible values are described below:
 tbit Type of Service
 ebit Describes the way AS-External LSAs are flooded
 mcbit Specifies whether IP multicast datagrams are forwarded
 npbit Specifies the handling of type 7 LSAs
 eabit Specifies the router's willingness to receive and forward
 External-Attributes LSAs
OSPF Functions
677
 dcbit Specifies the router's handling of demand circuits
 obit Specifies the router's willingness to receive and forward
 Opaque LSAs used for OSPF traffic engineering (OSPF-TE)
 extensions
 unused7 Not used

 -router_info_scope
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the flooding scope of the RI LSA. Possible values are
 described below:

 link_local Type-9 Opaque LSA. Not flooded beyond the
 local (sub)network
 area_local Type-10 Opaque LSA. Not flooded beyond the
 borders of the associated area
 area_system_wide Type-11 Opaque LSA. The LSA is flooded
 throughout the AS

 The default value is area_local.
 -router_link_data
 Specifies the data for a router link. For OSPFv2, this argument
 indicates the IP address of the network interface or the subnet
 mask.The default is 0.0.0.0. For OSPFv3, this argument
 corresponds to the interface ID of the router, and the value must
 be numeric. Use this argument only if you specified "-type
 router", and make sure "-router_link_mode" has been specified.
 -router_link_id
 Specifies the ID for a router link. For OSPFv2, the router link
 ID is a 32-bit value, represented in dot notation. (It is not an
 IP address.) The default is 0.0.0.0. For OSPFv3, the router link
 ID corresponds to the Neighbor Router ID. Possible values range
 from 0 to 4294967295. (Note that Spirent HLTAPI does not support
 Neighbor Interface ID for OSPFv3 Router LSA links) Use this
 argument only if you specified "-type router", and make sure
 "-router_link_mode" has been specified.
 -router_link_step
 Specifies the ID increment when multiple router links
 are created. The default is 0.0.0.1. Use this argument only if
 you specified "-type router", and make sure "-router_link_mode"
 has been specified.
 -router_link_count
 Specifies the number of router links to create under
 a router when emulating multiple router links with the
 step size specified by the -router_link_step option. The
 default is 1. Use this argument only if you specified
 "-type router", and make sure "-router_link_mode" has been
 specified.
 -router_link_idx
 Specifies an index to an added router link. When a link is
 removed, the remaining links are re-indexed. Use this
 argument only if you specified "-type router". and make sure
 "-router_link_mode" has been specified.
 -router_link_metric
 Defines the metric value for a router link. The metric value
 contributes to the overall cost of a route to a destination.
 (The metric is the cost associated with the output side of a
 router interface; the lower the cost, the more likely a
 router will be used to forward traffic.) Possible values
 range from 1 to 65535. The default is 1. Use this argument
 only if you specified "-type router", and make sure
 "-router_link_mode" has been specified.
 -router_link_mode
 Specifies the action to be performed for a router LSA. Use
OSPF Functions
678
 this argument only if you specified -type router. Possible
 values are create, delete, or reset. The modes are described
 below:
 create - Creates a router link. When you specify -mode
 create, you must also specify create for the
 -router_link_mode argument. However, when you specify
 -mode modify, -router_link_mode can be create, delete
 or reset. Also, when you specify -router_link_mode
 create, you must also use the -router_link_id,
 -router_link_data, -router_link_type, and
 -router_link_metric arguments.
 delete - Deletes a router link. When you specify delete
 mode, you must also specify the -router_link_id
 argument.
 reset - Deletes all the links under the router LSA.
 -router_link_type
 Identifies the type of link. Possible values are ptop,
 transit, stub, and virtual:
 ptop - A ptop (point-to-point) link is a physical or logical
 serial link between two routers. The link can be
 numbered (IP address is configured on the link) or
 unnumbered.
 transit - A transit network link connects a router to a
 transit network. A transit network has more than one
 router attached to it, and it is capable of carrying
 data traffic for which the source and destination are
 outside of the local area.
 stub - A stub network link connects a router to a stub
 network (not the same as a Stub Area). A stub network,
 or stub segment, has one router attached to it. One
 router attached to an Ethernet or Token Ring network is
 considered a link to a stub network.
 virtual - A virtual link is a logical link connecting areas
 with no physical connections to the backbone. Virtual
 links are treated as numbered point-to-point links.
 Use this argument only if you specified "-type router", and
 make sure "-router_link_mode" has been specified.
 -router_virtual_link_endpt
 Sets or unsets the router as a virtual link endpoint. A
 virtual link is a logical link connecting areas with no
 physical connections to the backbone. Virtual links are
 treated as numbered point-to-point links. Possible values
 are 0 and 1. The default is 0. Use this argument only if you
 specified "-type router".
 -session_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of OSPF to be emulated. This argument is only
 required when OSPFv2 LSA and OSPFv3 LSA are created on the same
 device. Possible values are ospfv2 and ospfv3.
 -summary_number_of_prefix
 Specifies the number of routes in the summary pool LSA. The
 default is 0. Use this argument only if you specified
 "-type summary_pool".
 -summary_prefix_length
 Specifies the number of leading bits which form the network
 part of an IP address for the summary pool LSA. Possible
 values for IPv4 addresses range from 1 to 32; the default is
OSPF Functions
679
 24, Possible values for IPv6 addresses range from 1 to 128;
 the default is 64, Use this argument only if you specified
 "-type summary_pool".
 -summary_prefix_metric
 Defines the metric value for the summary pool LSA. The
 metric value contributes to the overall cost of a route to a
 destination. (The metric is the cost associated with the
 output side of a router interface; the lower the cost, the
 more likely a router will be used to forward traffic.)
 Possible values range from 1 to 65535. The default is 1. Use
 this argument only if you specified "-type summary_pool".
 -summary_prefix_start
 Specifies the starting IP address for the summary pool LSA.
 The default for IPv4 is 0.0.0.0. The default for IPv6
 is 0:0:0:0:0:0:0:0. Use this argument only if you specified
 "-type summary_pool".
 -summary_prefix_step
 Specifies the increment to use to generate the network
 part of the first IP address as well as to generate
 subsequent IP addresses belonging to different routes for
 the summary pool LSA. Use this argument only if you
 specified "-type summary_pool".
 -type
 Specifies the type of LSA to create. Possible values and
 descriptions are as follows:
 router - (Type 1) Describes the states and costs of the
 router's interfaces. Indicates that the router is
 either an area border router (ABR) or an autonomous
 system boundary router (ASBR). The Options field is
 expanded to 24 bits for OSPFv3 LSAs.
 You must provide the following arguments for this type
 of LSA in OSPFv2, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -link_state_id 3.3.3.3 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv2RouterHandle \
 -mode create \
 -type router \
 -router_abr 1 \
 -router_asbr 1 \
 -router_link_data 5.5.5.5 \
 -router_link_id 4.4.4.4 \
 -router_link_count 5 \
 -router_link_step 0.0.0.1 \
 -router_link_idx 2 \
 -router_link_metric 300 \
 -router_link_mode create \
 -router_link_type stub \
 -router_virtual_link_endpt 1
 You must provide the following arguments for this type
 of LSA in OSPFv3, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 (interface ID) \
 -link_state_id 64 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv3RouterHandle \
 -mode create \
 -type router \
 -router_abr 1 \
OSPF Functions
680
 -router_asbr 1 \
 -router_link_data 4 \
 -router_link_id 4.4.4.4 \
 -router_link_idx 2 \
 -router_link_metric 300 \
 -router_link_mode create \
 -router_link_type ptop \
 -router_virtual_link_endpt 1
 network - (Type 2) Originated by the link's designated
 router (DR) for every broadcast or non-broadcast multi-
 access (NBMA) link having two or more attached routers.
 Lists all routers attached to the link.
 OSPFv3 network LSAs have no address information and are
 network protocol independent. The Options field is
 expanded to 24 bits for OSPFv3 LSAs.
 You must provide the following arguments for this type
 of LSA in OSPFv2, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -link_state_id 1.1.1.1 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv2RouterHandle \
 -mode create \
 -type network \
 -attached_router_id 2.2.2.2 \
 -net_attached_router create \
 -net_prefix_length 24
 You must provide the following arguments for this type
 of LSA in OSPFv3, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -link_state_id 64 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv3RouterHandle \
 -mode create \
 -type network \
 -attached_router_id 2.2.2.2 \
 -net_attached_router create \
 -net_prefix_length 24
 summary_pool - (Type 3) Summary Pool (OSPFv2) and Inter-Area
 Prefix LSA (OSPFv3) describe routes to networks outside
 of the area. (In version 3, the Inter-Area (Prefix LSA
 replaces the Summary Pool LSA.) Originated by ABRs. Do
 not specify a link state ID for OSPFv2 summary pool
 LSAs.
 You must provide the following arguments for this type
 of LSA in OSPFv2, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -handle $hOspfv2RouterHandle \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -mode create \
 -type summary_pool \
 -summary_number_of_prefix 10 \
 -summary_prefix_length 16 \
 -summary_prefix_metric 5000 \
 -summary_prefix_start 10.10.10.10 \
 -summary_prefix_step 10
OSPF Functions
681
 You must provide the following arguments for this type
 of LSA in OSPFv3, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -handle $hOspfv3RouterHandle \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -mode create \
 -type summary_pool \
 -summary_number_of_prefix 10 \
 -summary_prefix_length 64 \
 -summary_prefix_metric 5000 \
 -summary_prefix_start CAFE::10 \
 -summary_prefix_step 10
 asbr_summary - (Type 4)
 For OSPFv2, describes routes to autonomous system
 boundary routers outside of the area in which the LSA
 is transmitted (flooded). Originated by area border
 routers (ABRs).
 For OSPFv3, Inter-Area Router LSA, replaces the OSPFv2
 AS Boundary Router Summary LSA. The Options field is
 expanded to 24 bits for OSPFv3 LSAs.
 You must provide the following arguments for this type
 of LSA in OSPFv2, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv2RouterHandle \
 -mode create \
 -type asbr_summary
 You must provide the following arguments for this type
 of LSA in OSPFv3, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv3RouterHandle \
 -mode create \
 -type asbr_summary
 ext_pool - (Type 5) Describes routes to destinations
 external to the AS. A default route for the AS can also
 be described by this type of LSA. Originated by AS
 boundary routers (ASBRs). Do not specify a link state
 ID for OSPFv2 external pool LSAs.
 You must provide the following arguments for this type
 of LSA in OSPFv2, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv2RouterHandle \
 -mode create \
 -type ext_pool \
 -external_number_of_prefix 30 \
 -external_prefix_forward_addr 40.40.40.40 \
 -external_prefix_length 16 \
 -external_prefix_metric 3000 \
 -external_prefix_start 30.30.30.30 \
 -external_prefix_step 30 \
 -external_prefix_type 1
OSPF Functions
682
 You must provide the following arguments for this type
 of LSA in OSPFv3, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -link_state_id 64 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv3RouterHandle \
 -mode create \
 -type ext_pool \
 -external_number_of_prefix 30 \
 -external_prefix_forward_addr CFFF::40 \
 -external_prefix_length 64 \
 -external_prefix_metric 3000 \
 -external_prefix_start FFEE::30 \
 -external_prefix_step 30 \
 -external_prefix_type 1
 nssa_ext_pool - (Type 7) Describes routes to destinations
 external to the AS, usually from a different protocol.
 Originated by AS boundary routers (ASBRs). Do not
 specify a link state ID for OSPFv2 NSSA external pool
 LSAs.
 You must provide the following arguments for this type
 of LSA in OSPFv2, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv2RouterHandle \
 -mode create \
 -type nssa_ext_pool \
 -nssa_number_of_prefix 100 \
 -nssa_prefix_forward_addr 40.40.40.40 \
 -nssa_prefix_length 24 \
 -nssa_prefix_metric 5000 \
 -nssa_prefix_start 20.20.20.20 \
 -nssa_prefix_step 20 \
 -nssa_prefix_type 1
 You must provide the following arguments for this type
 of LSA in OSPFv3, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -link_state_id 64 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv3RouterHandle \
 -mode create \
 -type nssa_ext_pool \
 -nssa_number_of_prefix 100 \
 -nssa_prefix_forward_addr CFE0::1 \
 -nssa_prefix_length 64 \
 -nssa_prefix_metric 5000 \
 -nssa_prefix_start FFEE::20 \
 -nssa_prefix_step 20 \
 -nssa_prefix_type 1
 intra_area_prefix - (Type 9 - OSPFv3 only)
 A router uses Intra-Area Prefix LSA to advertise IPv6 prefixes
 that are associated with:
 a) the router itself
 b) an attached stub network segment
 c) an attached transit network segment

 You must provide the following arguments for this type of LSA
OSPF Functions
683
 in OSPFv3, as shown in this sample code snippet:

 -type intra_area_prefix\
 -intra_area_prefix_start 2002::2\
 -intra_area_prefix_step 4\
 -intra_area_number_of_prefix 10\
 -intra_area_prefix_length 32\
 -intra_area_prefix_metric 20\
 -intra_area_prefix_options "NUBIT|LABIT"\
 -intra_area_route_category unique\
 -intra_area_ref_ls_type 8\
 -intra_area_ref_link_state_id 25\
 -intra_area_ref_advertising_router_id 1.1.1.1\
 -handle $ospf_router0\
 -mode create
 opaque_type_10 - (Type 10 - OSPFv2 only)
 Defined in RFC 2370 and used to convey traffic
 engineering information in OSPFv2. Traffic Engineering
 extensions to OSPF are defined in RFC 3630. The Traffic
 Engineering (TE) LSA (Type 10), describes routers,
 point-to-point links and multi-access network
 connections.
 You must provide the following arguments for this type
 of LSA in OSPFv2, as shown in this sample code snippet:
 -adv_router_id 1.1.1.1 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -handle $hOspfv2RouterHandle \
 -mode create \
 -type opaque_type_10
 extended_prefix - (OSPFv2 Only)
 OSPFv2 Extended Prefix LSA is a new Opaque LSA defined in
 RFC5250 to advertise additional prefix attributes.
 Multiple OSPFv2 Extended Prefix Opaque LSAs can be advertised
 by a single router. Flooding scope of the OSPFv2 Extended
 Prefix Opaque LSA depends on the content inside the LSA and
 is in control of the originating router.

 extended_link - (OSPFv2 Only)
 OSPFv2 Extended Link Opaque LSA is a new Opaque LSA
 defined in RFC5250 to advertise additional prefix
 attributes. It has an area flooding scope. Multiple OSPFv2
 Extended Link Opaque LSAs can be advertised by a single
 router in an area.

 router_info - (OSPFv2 Only)
 Router Information (RI) LSA is a new Opaque LSA defined in
 RFC4970 to advertise optional capabilities of the
 OSPF routers in a link-scoped, area-scoped, or AS-scoped LSA.
 For existing OSPF capabilities, this advertisement will be
 used primarily for informational purposes. Future OSPF
 features could use the RI LSA as the sole mechanism for
 advertisement and discovery. The RI LSA will be originated
 initially when an OSPF router instance is created and
 whenever one of the advertised capabilities is configured or
 changed.
 -te_tlv_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the TLV type to create under the TE LSA (Type 10).
 This argument is mandatory if "-type opaque_type_10" is
 specified. Possible values are link or router. If you
 specify "link" for the TE LSA type, you must also provide
 values for the -te_link_id and te_link_type arguments. If
 you specify "router" for the TE LSA type, you must also
 provide the TE router address (-te_router_addr).
OSPF Functions
684
 -te_instance_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the OSPF instance of the TE LSA. The instance ID
 is an arbitrary value used to maintain multiple Traffic
 Engineering LSAs. This argument is mandatory whenever you
 create a new TE LSA.
 -te_router_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv4 address of the router Link Type-Length
 value (TLV). This argument is mandatory if you specified
 "router" for the TE LSA type (-te_tlv_type).
 -te_link_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the link ID of the Link Type-Length value (TLV).
 The link ID is a four-octet parameter, identical to the Link
 ID of the Router LSA. If you specified "ptop" (Point-to-
 Point) as the link type (-te_link_type), the link ID is the
 Router ID of the neighbor. If you specified "multiaccess",
 then the link ID is the interface address of the designated
 router. This argument is mandatory if you specified
 "-te_tlv_type link". The default is 0.0.0.0.
 -te_link_type
 Spirent Extension (for Spirent HLTAPI only).
 Defines the type of the link. This argument is mandatory
 if you specified "-te_tlv_type link". Possible values are:
 None - No link
 ptop - Point-to-point link
 multiaccess - Multi-access link
 The default is "ptop".
 -te_metric
 Spirent Extension (for Spirent HLTAPI only).
 Defines the four-octet metric for the link TLV, which may be
 different than the standard OSPF metric for the link. This
 argument is mandatory if you specified "-te_tlv_type link".
 Possible values range from 0 to 4294967295. The default is
 1.
 -te_local_ip
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IP address of the interface corresponding to
 the link. This argument is mandatory if you specified
 "-te_tlv_type link".
 -te_remote_ip
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IP address of the neighbor's interface
 corresponding to the current link. The remote IP address
 and the local address are used to discern multiple parallel
 links between systems. This argument is mandatory if you
 specified "-te_tlv_type link".
 -te_admin_group
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 4-octet bit mask assigned by the network
 administrator. Each bit corresponds to one administrative
 group assigned to the interface. This value is used to
 specify the administrative group of the traffic engineering
 link. This argument is mandatory if you specified
 "-te_tlv_type link". Possible values range from 1 to
 4294967295. The default is 1.
 -te_max_bw
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum bandwidth that can be used on the link
OSPF Functions
685
 from the emulated router. This argument is mandatory if you
 specified "-te_tlv_type link". Possible values range from 1
 to 2147483647. The default is 100000.
 -te_max_resv_bw
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum bandwidth that can be reserved on the
 link from the emulated router. This argument is mandatory if
 you specified "-te_tlv_type link". Possible values range
 from 1 to 2147483647. The default is 100000.
 -te_unres_bw_priority0
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of bandwidth not yet reserved at
 priority level 0. Possible values range from 1 to
 2147483647. The default is 100000.
 -te_unres_bw_priority1
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of bandwidth not yet reserved at
 priority level 1. Possible values range from 1 to
 2147483647. The default is 100000.
 te_unres_bw_priority2
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of bandwidth not yet reserved at
 priority level 2. Possible values range from 1 to
 2147483647. The default is 100000.
 -te_unres_bw_priority3
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of bandwidth not yet reserved at
 priority level 3. Possible values range from 1 to
 2147483647. The default is 100000.
 -te_unres_bw_priority4
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of bandwidth not yet reserved at
 priority level 4. Possible values range from 1 to
 2147483647. The default is 100000.
 -te_unres_bw_priority5
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of bandwidth not yet reserved at
 priority level 5. Possible values range from 1 to
 2147483647. The default is 100000.
 -te_unres_bw_priority6
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of bandwidth not yet reserved at
 priority level 6. Possible values range from 1 to
 2147483647. The default is 100000.
 -te_unres_bw_priority7
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the amount of bandwidth not yet reserved at
 priority level 7. Possible values range from 1 to
 2147483647. The default is 100000.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.

 -extended_link_*
 -extended_prefix_*
 -lsa_handle
 -net_attached_router
 -router_link_idx
 -return_detail
OSPF Functions
686
 -router_info_*
Cisco-specific Arguments:
 The following attributes are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -auto_ls_age
 -auto_ls_checksum
 -auto_ls_seq
 -auto_update
 -ls_checksum
 -ls_type_function_code
 -ls_type_s_bits
 -ls_type_u_bit
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 lsa_handle The handle returned by the function when you use -mode
 create to create a new LSA. When you want to modify or
 delete the LSA, you specify the handle as the value to the
 -lsa_handle argument
 adv_router_id <a.b.c.d>
 router The keyword "router" returns a list of links for an LSA of
 type "router".
 links
 0.id <link ID a.b.c.d>
 data <link data a.b.c.d>
 type {ptop|transit|stub|virtual}
 1.id <link ID a.b.c.d>
 data <link data a.b.c.d>
 <idx=n>.id <link ID a.b.c.d>
 data <link data a.b.c.d>
 type {ptop|transit|stub|virtual}
 network The keyword "network" returns a list of attached router IDs
 for a network LSA.
 attached_router_ids <list_of_a.b.c.d>
 summary The keyword "summary" returns a list of prefixes for a
 summary LSA pool.
 external The keyword "external" returns a list of prefixes for an
 external LSA pool.
 nssa The keyword "nssa" returns a list of prefixes for an NSSA
 LSA pool
 num_prefix <number of prefixes>
 prefix_start <a.b.c.d>
 prefix_length <n>
 prefix_step <a.b.c.d>
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_ospf_lsa_config function creates, modifies, or
 deletes a Link State Advertisement (LSA). Use the -mode argument to specify
 the operation to perform. When you create an LSA, the function returns a
 handle to the newly created LSA. Use this handle as input for modify and
 delete mode operations.
 The mode that you use determines the set of arguments that you use to
 configure the LSA.
 - When you specify -mode create, you must also use the -type argument to
 specify the type of LSA to create.
 - To provide prefix information, use the set of arguments that correspond
OSPF Functions
687
 to the type of LSA. For example, when you create an AS external LSA
 (-type ext_pool), you also specify prefix information by using the
 -external_prefix_length and -external_prefix_metric arguments. See the
 examples in the type argument for the mandatory arguments for each LSA
 type. You specify the prefix information for the following types of LSAs:
 summary_pool, ext_pool, and nssa_pool.
 Every router sends a router LSA. Each router can only originate one router
 LSA. If your create another router LSA for the same originating router, it
 overwrites the previous one. That is how the stack works. If you create
 multiple Router LSAs, the stack does not combine the router links for you
 under the same originating router. However, you can create multiple router
 LSA links for the same router LSA. Also you can create multiple router LSAs
 for different originating routers. In this case, the advertising router's
 ID must be different).
 AS boundary routers send a single AS-external LSA for each AS external
 destination. To define routers in external areas, you must specify
 nssa_ext_pool or ext_pool in the -type argument.
 Designated routers send network LSAs for any networks with which it is
 associated. To identify the routers attached to a network link, you must
 specify network in the -type argument.
 Area border routers send a single summary LSA for each known inter-area
 destination. To describe routes to networks outside of the local area. you
 must specify summary_pool in the -type argument. To describe routes to AS
 boundary routers outside the local area, you must specify asbr_summary in
 the -type argument.
Examples:
 #### HLTAPI for Tcl ####
 The following sample code snippet creates five LSAs connected to a router:
 sth::emulation_ospf_lsa_config \
 -mode create \
 -type router \
 -adv_router_id [lindex $routerIpList $i] \
 -handle $hRouter($i) \
 -link_state_id [lindex $routerIpList $i] \
 -ls_age 0 \
 -ls_seq 80000001 \
 -router_abr 1 \
 -router_asbr 1 \
 -router_link_data 255.255.255.255 \
 -router_link_id [lindex $routerIpList $i] \
 -router_link_idx 1 \
 -router_link_count 5 \
 -router_link_step 0.0.0.1 \
 -router_link_metric 1 \
 -router_link_mode create \
 -router_link_type stub \
 -router_virtual_link_endpt 0
 Here is the output for the above example:
 {status 1} {lsa_handle 362} {adv_router_id 18.18.18.18} {router {{links
 {{{0-id 17.17.17.17} {data 255.255.255.255} {type stub}}
 {{1-id 17.17.17.18} {data 255.255.255.255} {type stub}}
 {{2-id 17.17.17.19} {data 255.255.255.255} {type stub}}
 {{3-id 17.17.17.20} {data 255.255.255.255} {type stub}}
 {{4-id 17.17.17.21} {data 255.255.255.255} {type stub}}}}}}
 The following sample code snippet creates a router LSA link:
 sth::emulation_ospf_lsa_config \
 -mode modify \
 -type router \
 -adv_router_id [lindex $routerIpList $i]\
 -lsa_handle $hLsaHandle($i)\
 -link_state_id [lindex $routerIpList $i]\
OSPF Functions
688
 -ls_age 0\
 -ls_seq 80000001\
 -router_abr 1\
 -router_asbr 1\
 -router_link_data 0.0.0.2\
 -router_link_id 50.50.50.50\
 -router_link_idx 2\
 -router_link_metric 1\
 -router_link_mode create\
 -router_link_type ptop \
 -router_virtual_link_endpt 0
 The following sample code snippet creates a network LSA:
 sth::emulation_ospf_lsa_config \
 -adv_router_id 18.18.18.18 \
 -handle Ospfv3RouterConfig1\
 -link_state_id 64 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -mode create \
 -type network \
 -attached_router_id 17.17.17.17 \
 -net_attached_router create \
 -net_prefix_length 64
 Here is the output for the above example:
 {status 1} {lsa_handle networklsa1} {adv_router_id 18.18.18.18} {network
 {{attached_router_ids 17.17.17.17}}}
 The following sample code snippet creates an external LSA pool:
 sth::emulation_ospf_lsa_config \
 -adv_router_id 1.1.1.1 \
 -handle Ospfv3RouterConfig1\
 -link_state_id 64 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -mode create \
 -type ext_pool \
 -external_number_of_prefix 30 \
 -external_prefix_forward_addr CAFF::40 \
 -external_prefix_length 64 \
 -external_prefix_metric 3000 \
 -external_prefix_start FFEE::30 \
 -external_prefix_step 30 \
 -external_prefix_type 1

 Here is the output for the above example:
 {status 1} {lsa_handle router1} {adv_router_id 1.1.1.1}
 {external {{num_prefx 30} {prefix_length 64} {prefix_start ffee::30}
 {prefix_step 30}}
 The following sample code snippet creates a type 9 LSA:

 set device_ret0_asbr_summary2 [sth::emulation_ospf_lsa_config\
 -type intra_area_prefix\
 -intra_area_prefix_start 2002::2\
 -intra_area_prefix_step 4\
 -intra_area_number_of_prefix 10\
 -intra_area_prefix_length 32\
 -intra_area_prefix_metric 20\
 -intra_area_prefix_options "NUBIT|LABIT"\
 -intra_area_route_category unique\
 -intra_area_ref_ls_type 8\
 -intra_area_ref_link_state_id 25\
 -intra_area_ref_advertising_router_id 1.1.1.1\
 -intra_area_adv_router_id 1.1.1.1\
 -intra_area_link_state_id 444\
OSPF Functions
689
 -intra_area_age 33\
 -intra_area_checksum good\
 -intra_area_seq_num 0x90001\
 -handle $ospf_router0\
 -mode create]
 Here is the output for the above example:
 {status 1} {lsa_handle ospfv3intraareaprefixlsablk1} {adv_router_id 0.0.0.0}
 {intraarea {{num_prefx 10} {prefix_length 32} {prefix_start 2002::2}
 {prefix_step 4}}}

 The following sample code snippet creates a type 10 LSA:
 ::sth::emulation_ospf_lsa_config
 -mode create \
 -handle $handle1 \
 -adv_router_id 1.1.1.1 \
 -ls_age 300 \
 -ls_checksum 5000 \
 -ls_seq 7000 \
 -type opaque_type_10 \
 -te_tlv_type router \
 -te_router_addr 10.10.10.10 \

 Here is the output for the above example:
 {status 1} {lsa_handle telsa1} {adv_router_id 1.1.1.1}
 {opaque_type_10 {{instance_id 1}
 {RouterTlv {{te_router_addr 10.10.10.10}}}}

 The following sample code snippet creates an OSPF RI LSA:
 set device_ret0_router0 [sth::emulation_ospf_lsa_config\
 -type router_info\
 -handle $ospf_router0\
 -router_info_adv_router_id 192.0.0.1\
 -router_info_age 10\
 -router_info_checksum good\
 -router_info_seq_num 0x800\
 -router_info_instance 1\
 -router_info_opaque_type router_information\
 -router_info_route_category secondary\
 -router_info_scope area_local\
 -router_info_options ebit\
 -mode create\
 ]
 Here is the output for the above example:
 {status 1} {lsa_handle routerinfolsa1} {adv_router_id 0.0.0.0}

 The following sample code creates an OSPF Extended Prefix LSA:
 set device_ret0_extended_prefix [sth::emulation_ospf_lsa_config\
 -type extended_prefix\
 -handle $ospf_router0\
 -extended_prefix_instance 1\
 -extended_prefix_age 20\
 -extended_prefix_checksum bad\
 -extended_prefix_seq_num 0x801\
 -extended_prefix_opaque_type extended_prefix\
 -extended_prefix_adv_router_id 192.0.0.1\
 -extended_prefix_route_category unique\
 -extended_prefix_scope area_local\
 -extended_prefix_options "tbit|ebit|mcbit|npbit|eabit|dcbit|obit|unused7"\
 -mode create\
 ]
 Here is the output for the above example:
 {status 1} {lsa_handle extendedprefixlsa1} {adv_router_id 0.0.0.0}


 #### HLTAPI for Python ####

 To create a OSPFv2 router LSA 
OSPF Functions
690

 device_ret0_router0 = sth.emulation_ospf_lsa_config (
 type = 'router',
 router_virtual_link_endpt= '0',
 router_asbr = '0',
 link_state_id = '0.0.0.0',
 router_abr = '0',
 handle = ospf_router0,
 mode = 'create');

 Sample Output: {'status': '1', 'router': {'links': ''},
 'adv_router_id': '0.0.0.0', 'lsa_handle': 'routerlsa1'}

 To create an OSPFv3 external LSA pool
 device_ret0_ext_pool4 = sth.emulation_ospf_lsa_config (
 external_prefix_step= '1',
 external_number_of_prefix= '1',
 external_prefix_start= '2000::1',
 external_prefix_length= '64',
 type = 'ext_pool',
 external_prefix_type= '0',
 external_prefix_metric= '1',
 handle = ospf_router0,
 mode = 'create');

 Sample Output: {'status': '1', 'router': {'links': ''},
 'adv_router_id': '0.0.0.0', 'lsa_handle': 'ospfv3routerlsa1'}

 #### HLTAPI for Perl ####
 To create a OSPFv2 router LSA:
 my %device_ret0_router0 = sth::emulation_ospf_lsa_config (
 type => 'router',
 router_virtual_link_endpt=> '0',
 router_asbr => '0',
 link_state_id => '0.0.0.0',
 router_abr => '0',
 handle => "$ospf_router0",
 mode => 'create');

 Sample Output:
 $VAR1 = 'lsa_handle';
 $VAR2 = 'routerlsa1';
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'adv_router_id';
 $VAR6 = '0.0.0.0';
 $VAR7 = 'router';
 $VAR8 = {
 'links' => '
 '
 };

 To create an OSPFv3 external LSA pool:
 my %device_ret0_ext_pool4 = sth::emulation_ospf_lsa_config (
 external_prefix_step=> '1',
 external_number_of_prefix=> '1',
 external_prefix_start=> '2000::1',
 external_prefix_length=> '64',
 type => 'ext_pool',
 external_prefix_type=> '0',
 external_prefix_metric=> '1',
 handle => "$ospf_router0",
 mode => 'create');

 Sample Output:
 $VAR1 = 'lsa_handle';
 $VAR2 = 'ospfv3asexternallsablock1';
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'adv_router_id';
 $VAR6 = '0.0.0.0';
OSPF Functions
691
 $VAR7 = 'external';
 $VAR8 = {
 'prefix_start' => '2000::1',
 'num_prefx' => '1',
 'prefix_step' => '1',
 'prefix_length' => '64'
 };
Notes:
 1) A metric is a number that is used to specify the cost of the
 route, so that the best route (potentially among multiple
 routes to the same destination) can be selected.
End of Procedure Header
sth::emulation_ospf_tlv_config
Name:
 sth::emulation_ospf_tlv_config

Purpose:
 Creates, modifies, or deletes OSPF Type-Length-Values (TLVs)

Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_ospf_tlv_config
 -mode {create | modify | delete}
 [-type algorithm_tlv]
 -handle <router_info_lsa_handle>
 [-algorithms ]
 [-type sid_label_range_tlv]
 -handle <router_info_lsa_handle>
 [-sid_label_range_size <1 - 16777215>]
 [-sid_label_value <integer>]
 [-sid_label_value_type <label | sid>]
 [-type extended_prefix_tlv]
 -handle <extended_prefix_lsa_handle>
 [-extended_prefix_addr_family {ipv4_unicast}]
 [-extended_prefix_addr_prefix <a.b.c.d>]
 [-extended_prefix_prefix_length <0-32>]
 [-extended_prefix_route_type {unspecified | intra_area | inter_area
 | external | nssa_external}]
 [-type prefix_sid_tlv]
 -handle <extended_prefix_tlv_handle>
 [-prefix_sid_algorithm_value <integer>]
 [-prefix_sid_flags {nbit | npbit | mbit | ebit | vbit | lbit}]
 [-prefix_sid_index <integer>]
 [-prefix_sid_multi_topo_id <integer>]
 [-prefix_sid_range_size <1-65535>]
 [-type sid_label_binding_tlv]
 -handle <extended_prefix_tlv_handle>
 [-sid_label_binding_flags <MBIT>]
 [-sid_label_binding_multi_topo_id <integer>]
 [-sid_label_binding_range_size <1-65535>]
 [-sid_label_binding_weight <integer>]
 [-sid_label_binding_value <integer>]
 [-sid_label_binding_value_type {LABEL | SID}]
 [-type ero_tlv]
 -handle <sid_label_binding_tlv_handle>
 [-type ipv4_ero_tlv]
 -handle <ero_tlv_handle>
 [-ipv4_ero_flags <lbit>]
 [-ipv4_ero_addr <a.b.c.d>]
 [-type extended_link_tlv]
 -handle <extended_link_lsa_handle>
 [-extended_link_data <a.b.c.d>]
OSPF Functions
692
 [-extended_link_id <a.b.c.d>]
 [-extended_link_type {point_to_point | transit_network | stub_network
 | virtual_link}]
 [-type adj_sid_tlv]
 -handle <extended_link_tlv_handle>
 [-adj_sid_flags {bbit | vbit | lbit | sbit}]
 [-adj_sid_multi_topo_id <integer>]
 [-adj_sid_weight <integer>]
 [-adj_sid_value <integer>]
 [-adj_sid_value_type {label | sid}]
 [-type lan_adj_sid_tlv]
 -handle <extended_link_tlv_handle>
 [-lan_adj_sid_flags {bbit | vbit | lbit | sbit}]
 [-lan_adj_sid_multi_topo_id <integer>]
 [-lan_adj_sid_neighbor_id <a.b.c.d>]
 [-lan_adj_sid_weight <integer>]
 [-lan_adj_sid_value <integer>]
 [-lan_adj_sid_value_type {label | sid}]
Arguments:
 -mode
 Specifies the action to perform. You can create, modify, or
 delete a TLV. This argument is mandatory.
 The modes are described below:

 create Creates a new OSPF TLV. See the
 description of the -type argument for a list of TLVs
 that you can create. Use the -handle argument to
 specify the router or TLV handles under which the
 specified TLV must be created.

 modify Modifies an existing TLV. Use the
 -handle argument to specify the TLV to modify.

 delete Deletes a TLV. Use the -handle argument to specify
 the TLV to delete.
 -handle
 OSPF LSA handles received from the
 sth::emulation_ospf_lsa_config function, or TLV handles received
 from the current function, depending on the TLVs to be
 configured. This argument is mandatory.

 -type
 Specifies the type of TLVs to be configured. This argument is
 mandatory. Possible values are described below:

 adj_sid_tlv
 Adjacency Segment Identifier (Adj-SID) is an optional sub-TLV
 of the Extended Link TLV. It may appear multiple times in
 the Extended Link TLV.

 algorithm_tlv
 Segment Routing (SR) Algorithm TLV. It is a TLV of the RI
 Opaque LSA, which allows a router to advertise algorithms
 that the router is currently using to other routers in an
 area.

 ero_tlv
 ERO Metric sub-TLV. It is a sub-TLV of the SID/Label Binding
 TLV. The ERO Metric sub-TLV carries the cost of an ERO path.
 It is used to compare the cost of a given source/destination
 path.

 extended_prefix_tlv
 OSPF Extended Prefix TLV, used to advertise additional
 attributes associated with the prefix. Multiple OSPF Extended
 Prefix TLVs may be carried in each OSPFv2 Extended Prefix
 Opaque LSA.

 extended_link_tlv
OSPF Functions
693
 OSPFv2 Extended Link TLV, used to advertise various
 attributes of the link. It describes a single link and is
 constructed of a set of sub-TLVs.

 ipv4_ero_tlv
 IPv4 ERO TLV, a sub-TLV of the SID/Label Binding
 sub-TLV.

 lan_adj_sid_tlv
 LAN Adj-SID TLV, an optional sub-TLV of the Extended Link
 TLV.

 prefix_sid_tlv
 Prefix SID TLV, a sub-TLV of the OSPF Extended Prefix TLV

 sid_label_binding_tlv
 SID/Label Binding TLV, a sub-TLV of the OSPF Extended
 Prefix TLV, used to advertise SID/Label mapping for a path
 to the prefix.

 sid_label_range_tlv
 SID/Label Range TLV, a TLV of RI Opaque LSA.
 Use this group of arguments when you specify -type algorithm_tlv:

 -algorithms
 Specifies the algorithm for the SR-Algorithm TLV to calculate
 reachability. The available option is METRIC_BASED_SPF. The
 default value is METRIC_BASED_SPF.
 Use this group of arguments when you specify -type sid_label_range_tlv:

 -sid_label_range_size
 Size of the SID/Label range. Possible values range from 1 to
 16777215. The default value is 100.

 -sid_label_value
 Segment identifier of the SID/Label TLV. The value must be an
 integer. The default value is 16.

 -sid_label_value_type
 Type of segment identifier of the SID/Label TLV. Possible values
 are label and sid.

 label 20-bit label
 sid 32-bit SID

 The default value is label.

 Use this group of arguments when you specify -type extended_prefix_tlv:

 -extended_prefix_addr_family
 Specifies the address family for the OSPF Extended Prefix TLV.
 The available value is ipv4_unicast. The default value is
 ipv4_unicast.

 -extended_prefix_addr_prefix
 Specifies the network address for the OSPF Extended Prefix TLV.
 The value must be in IPv4 format. The default value is 192.0.1.0.
 -extended_prefix_prefix_length
 Specifies the prefix length for the OSPF Extended Prefix TLV.
 Possible values range from 0 to 32. The default value is 24.

 -extended_prefix_route_type
 Specifies the router type for the OSPF Extended Prefix TLV.
 Possible values are unspecified, intra_area, inter_area,
 external, and nssa_external. The default value is unspecified.

 Use this group of arguments when you specify -type extended_prefix_tlv:
 
OSPF Functions
694
 -prefix_sid_algorithm_value
 Specifies the algorithm the Prefix-SID TLV is associated with.
 The available value is 0 (IGP metric based SPT). The default
 value is 0.

 -prefix_sid_flags
 Specifies the required octet fields defined in the Prefix-SID
 TLV. Possible values are described below:

 nbit Node-SID flag
 npbit No-PHP flag
 mbit Mapping Server flag
 ebit Explicit-Null flag
 vbit Value/Index flag
 lbit Local/Global flag

 Use "|" to specify multiple flags.

 -prefix_sid_index
 Specifies the offset to the advertised SID/Label range. The value
 must be an integer. The default value is 0.
 -prefix_sid_multi_topo_id
 Specifies the Multi-Topology ID for the Prefix-SID TLV.
 Possible values range from 0 to 255. The default value is 0. The
 values are described below:
 Values Description

 0 Reserved for advertising the metric associated with
 the default topology
 1 Reserved for advertising the metric associated with
 the default multicast topology
 2 Reserved for IPv4 in-band management purposes
 3-31 Reserved for assignments by IANA
 32-127 Reserved for development, experimental, and proprietary
 features
 128-255 Invalid and should be ignored

 -prefix_sid_range_size
 Size of the SID/Label range. Possible values range from 0 to
 65535. The default value is 1.

 Use this group of arguments when you specify -type sid_label_binding_tlv:

 -sid_label_binding_flags
 Specified the required octet fields defined in the SID Label
 Binding TLV. The available value is mbit.

 mbit Mapping Server bit. If set, the SID is advertised from the
 Segment Routing Mapping Server functionality.
 -sid_label_binding_multi_topo_id
 Specifies the Multi-Topology ID for the SID Label Binding TLV.
 Possible values range from 0 to 255. The default value is 0. The
 values are described below:

 Values Description

 0 Reserved for advertising the metric associated with
 the default topology
 1 Reserved for advertising the metric associated with
 the default multicast topology
 2 Reserved for IPv4 in-band management purposes
 3-31 Reserved for assignments by IANA
 32-127 Reserved for development, experimental, and proprietary
 features
 128-255 Invalid and should be ignored

 -sid_label_binding_range_size
 Number of addresses to be mapped into a Prefix-SID. Possible values
OSPF Functions
695
 range from 1 to 65535. The default value is 1.
 -sid_label_binding_weight
 Specifies the weight used for load balancing in the SID Label Binding TLV.
 Possible values range from 0 to 255. The default value is 1.
 -sid_label_binding_value
 Specifies the segment identifier for the SID Label Binding TLV.
 The value must be an integer. The default value is 16.

 -sid_label_binding_value_type
 Specifies the type of segment identifier for the SID Label
 Binding TLV. Possible values are label and sid.

 label 20-bit label
 sid 32-bit SID

 The default value is label.

 Use this group of arguments when you specify -type ipv4_ero_tlv:
 -ipv4_ero_flags
 Specifies the required octet fields. The available value is lbit.
 lbit L bit. If set, the value of the attribute is
 loose. If not set, the value of the attribute is strict.

 The default value is lbit.

 -ipv4_ero_addr
 Specifies the IP address of the explicit route hop. The default
 value is 192.0.1.0
 Use this group of arguments when you specify -type extended_link_tlv:

 -extended_link_id
 Identifies the object to which this router link is connected.
 The value depends on the link type specified by
 -extended_link_type. The mapping relations are described below:

 Link Type Link ID
 Point-to-point Neighbor router ID link
 Link to transit Interface address of network designated router
 Link to stub IP network/subnet number
 Virtual link Neighbor router ID

 The value must be in IPv4 format. The default value is 0.0.0.0.

 -extended_link_type
 Specifies the link type. Possible values are described below:
 point_to_point Point-to-Point
 transit_network Transit network
 stub_network Stub network
 virtual_link Virtual link

 The default value point_to_point.
 -extended_link_data
 Specifies the link address. The value depends on the link type
 specified by -extended_link_type.

 transit/numbered point-to-point/virtual IP interface address of the
 associated router interface

 stub Stub network's IP address mask

 Unnumbered point-to-point Unnumbered interface's MIB-II
 ifIndex value

 The default value is 0.0.0.0.
 
OSPF Functions
696
 Use this group of arguments when you specify -type adj_sid_tlv:
 -adj_sid_flags
 Specifies the required octet fields for the Adj-SID sub-TLV.
 Possible values are described below:

 bbit Backup flag. Set if the Adj-SID refers to an adjacency
 being protected.

 vbit Value/Index flag. If set, the Prefix-SID carries an absolute
 value. If not set, the Prefix-SID carries an index.

 lbit Local/Global flag. If set, the value/index carried
 by the Prefix-SID has local significance. If not set,
 the value/index carried by this sub-TLV has global
 significance.

 sbit Set Flag. If set, it indicates that the Adj-SID refers to
 a set of adjacencies

 Use "|" to specify multiple flags. The default value is vbit|lbit.

 -adj_sid_multi_topo_id
 Specifies the multi-topology ID for the Adj-SID sub-TLV.
 Possible values range from 0 to 255. The default value is 0. The
 values are described below:

 Values Description

 0 Reserved for advertising the metric associated with
 the default topology
 1 Reserved for advertising the metric associated with
 the default multicast topology
 2 Reserved for IPv4 in-band management purposes
 3-31 Reserved for assignments by IANA
 32-127 Reserved for development, experimental, and proprietary
 features
 128-255 Invalid and should be ignored

 -adj_sid_weight
 Specifies the weight to be used for load balancing purposes.
 Possible values range from 1 to 255. The default value is 1.

 -adj_sid_value
 Specifies the segment identifier for the Adj-SID
 sub-TLV. The value must be an integer. The default value is 16.

 -adj_sid_value_type
 Specifies the type of segment identifier for the Adj-SID
 sub-TLV. Possible values are label and sid.

 label 20-bit label
 sid 32-bit SID

 The default value is label.

 Use this group of arguments when you specify -type lan_adj_sid_tlv:

 -lan_adj_sid_flags
 Specifies the required octet fields for the LAN Adj-SID sub-TLV.
 Possible values are described below:

 bbit Backup flag. Set if the Adj-SID refers to an adjacency
 being protected.

 vbit Value/Index flag. If set, the Prefix-SID carries an absolute
 value. If not set, the Prefix-SID carries an index.

 lbit Local/Global flag. If set, the value/index carried
 by the Prefix-SID has local significance. If not set,
 the value/index carried by this sub-TLV has global
OSPF Functions
697
 significance.

 sbit Set Flag. If set, it indicates that the Adj-SID refers to
 a set of adjacencies

 Use "|" to specify multiple flags. The default value is vbit|lbit.

 -lan_adj_sid_multi_topo_id
 Specifies the multi-topology ID for the LAN Adj-SID sub-TLV.
 Possible values range from 0 to 255. The default value is 0. The
 values are described below:

 Values Description

 0 Reserved for advertising the metric associated with
 the default topology
 1 Reserved for advertising the metric associated with
 the default multicast topology
 2 Reserved for IPv4 in-band management purposes
 3-31 Reserved for assignments by IANA
 32-127 Reserved for development, experimental, and proprietary
 features
 128-255 Invalid and should be ignored

 -lan_adj_sid_neighbor_id
 Specifies the neighbor ID for the LAN Adj-SID sub-TLV. The value
 must be in IPv4 format. The default value is 0.0.0.0.

 -lan_adj_sid_weight
 Specifies the weight to be used for load balancing purposes.
 Possible values range from 1 to 255. The default value is 1.

 -lan_adj_sid_value
 Specifies the segment identifier for the LAN Adj-SID sub-TLV.
 The value must be an integer. The default value is 16.

 -lan_adj_sid_value_type
 Specifies the type of segment identifier for the LAN Adj-SID
 sub-TLV. Possible values are label and sid.

 label 20-bit label
 sid 32-bit SID

 The default value is label.
Arguments Unsupported by Save as HLTAPI:
 The sth::emulation_ospf_tlv_config function is currently not supported
 by Save to HLTAPI. To test with this function, you must configure it manually in
 the generated Spirent HLTAPI scripts.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The handle returned by the function when you use -mode
 create to create a new TLV. When you want to modify or
 delete the TLV, you specify the handle as the value to the
 -handle argument and the corresponding TLV type under the -type argument.

 status Success (1) or failure (0) of the operation.

 log An error message (if the operation failed).
Description:
 The sth::emulation_ospf_tlv_config function creates, modifies, or
 deletes a TLV. Use the -mode argument to specify the operation to perform. When
 you create an TLV, the function returns a handle to the newly created TLV. Use
 this handle as input for modify and delete mode operations.
 
OSPF Functions
698
 The mode you use determines the set of arguments you use to
 configure the TLV.
 When you specify -mode create or modify, you must also use the -type argument to
 specify the type of TLV to create or modify.

 Refer to Examples and Arguments for detailed information.
Examples:
 To add an OSPF RI LSA:
 set device_ret0_router0 [sth::emulation_ospf_lsa_config\
 -type router_info\
 -handle $ospf_router0\
 -router_info_adv_router_id 192.0.0.1\
 -router_info_age 10\
 -router_info_checksum good\
 -router_info_seq_num 0x800\
 -router_info_instance 1\
 -router_info_opaque_type router_information\
 -router_info_route_category secondary\
 -router_info_scope area_local\
 -router_info_options ebit\
 -mode create\
 ]
 Output: {status 1} {lsa_handle routerinfolsa1} {adv_router_id 0.0.0.0}
 To add an OSPF Algorithm TLV under the RI LSA:
 set device_ret0_algorithm_tlv [sth::emulation_ospf_tlv_config\
 -type algorithm_tlv\
 -algorithms 0\
 -handle $routerInfoHnd\
 -mode create\
 ]
 # $routerInfoHnd is retrieved from the sth::emulation_ospf_lsa_config function
 with -type router_info

 Output:{status 1} {handle sralgorithmtlv1}
 To add an OSPF SID/Label TLV under the RI LSA:
 set device_ret0_sid_label_range_tlv [sth::emulation_ospf_tlv_config\
 -type sid_label_range_tlv\
 -handle $routerInfoHnd\
 -mode create\
 -sid_label_range_size 100\
 -sid_label_value 100\
 -sid_label_value_type label\
 ]

 Output: {status 1} {handle sidlabelrangetlv1}
 To add an OSPF SID Label Binding TLV under the specified Extended Prefix LSA:

 set device_ret0_sid_label_binding_tlv [sth::emulation_ospf_tlv_config\
 -type sid_label_binding_tlv\
 -handle $extended_prefix_tlv_Hnd\
 -mode create\
 -sid_label_binding_flags mbit\
 -sid_label_binding_multi_topo_id 192\
 -sid_label_binding_range_size 32\
 -sid_label_binding_weight 20\
 -sid_label_binding_value 10\
 -sid_label_binding_value_type label\
 ]

 Output: {status 1} {handle prefixsidsubtlv1}
 To add an OSPF ERO TLV under the existing SID Label Binding TLV:
 set device_ret0_ero_tlv [sth::emulation_ospf_tlv_config\
 -type ero_tlv\
OSPF Functions
699
 -handle $sid_label_binding_tlv_Hnd\
 -mode create\
 ]

 Output:{status 1} {handle erosubtlv1}
 To add an OSPF IPv4 ERO TLV under the existing ERO TLV
 set device_ret0_ipv4_ero_tlv [sth::emulation_ospf_tlv_config\
 -type ipv4_ero_tlv\
 -handle $ero_tlv_Hnd\
 -mode create\
 -ipv4_ero_flags lbit\
 -ipv4_ero_addr 10.0.0.1\
 ]
 Output: {status 1} {handle ipv4erosubtlv1}
 End of Procedure Header
sth::emulation_ospf_topology_route_config
Name:
 sth::emulation_ospf_topology_route_config
Purpose:
 Creates, modifies, or deletes a set of OSPFv2 and/or OSPFv3 routers or a
 single routers behind an OSPF router. You can attach routes to or delete
 routes from different kinds of routers, such as Summary, External, and
 NSSA.
Synopsis:
 sth::emulation_ospf_topology_route_config
 -mode create | -mode {modify|delete} -elem_handle <topology_elem_handle>
 -type {router|grid|network|summary_routes|ext_routes|nssa_routes}
 [-external_connect <1-65535> <1-65535>]
 [-external_number_of_prefix <1-65535> ]
 [-external_prefix_forward_addr {<a.b.c.d> |
 <a:b:c:d:e:f:g:h>}]
 [-external_prefix_length {<1-32> |<1-128>}]
 [-external_prefix_metric <1-16777215>]
 [-external_prefix_start {<a.b.c.d> |
 <a:b:c:d:e:f:g:h>}]
 [-external_prefix_step <0-65535>]
 [-external_prefix_type {{1|2} | {0|1} }]
 [-grid_col <1-65535>]
 [-grid_connect <1-65535> <1-65535>]
 [-grid_connect_session <ospf_session_handle>]
 [-grid_disconnect <ospf_session_handle>]
 [-grid_link_type {ptop_numbered|ptop_unnumbered}]
 [-grid_prefix_length {<1-32> |<1-128>}]
 [-grid_prefix_start {<a.b.c.d> |
 <a:b:c:d:e:f:g:h>}]
 [-grid_prefix_step]
 ospfv2 a.b.c.d ospfv3 1-65535}
 [-grid_router_id <a.b.c.d>]
 [-grid_router_id_step <a.b.c.d>]
 [-grid_row <1-65535>]
 [-grid_stub_per_router <0-65535>]
 [-link_enable {0|1}]
 [-link_intf_addr <a.b.c.d>]
 [-net_count <1-65535>]
 [-net_dr <ospf_lsa_handle>]
 [-net_ip {a.b.c.d}]
 [-net_ip_step {a.b.c.d}]
 [-net_prefix {<a.b.c.d> |
 <a:b:c:d:e:f:g:h>}]
OSPF Functions
700
 [-net_prefix_length {<1-32> |<1-128>}]
 [-nssa_connect <1-65535> <1-65535>]
 [-nssa_number_of_prefix {<1-32> |<1-128>}]
 [-nssa_prefix_forward_addr {<a.b.c.d> |
 <a:b:c:d:e:f:g:h>}]
 [-nssa_prefix_length {<1-32> |<1-128>}]
 [-nssa_prefix_metric <1-16777215>]
 [-nssa_prefix_start {<a.b.c.d> |
 <a:b:c:d:e:f:g:h>}]
 [-nssa_prefix_step {1-65535}]
 [-nssa_prefix_type {{1|2} | {0|1} }]
 [-router_abr <0|1>]
 [-router_asbr <0|1>]
 [-router_connect <ospf_lsa_handle>]
 [-router_disconnect <ospf_lsa_handle>]
 [-router_id <a.b.c.d>]
 [-summary_connect <1-65535> <1-65535>]
 [-summary_number_of_prefix <1-14294967295>]
 [-summary_prefix_length {<1-32> |<1-128>}]
 [-summary_prefix_metric <1-16777215>]
 [-summary_prefix_start {<a.b.c.d> |
 <a:b:c:d:e:f:g:h>}]
 [-summary_prefix_step {1-65535]
Arguments:
 -elem_handle
 Specifies the topology element to modify or delete. Returns
 the topology element type that you specified with the -type
 argument. This argument is mandatory for modify and delete
 modes.
 -external_connect
 Specifies the position (row and column) of the router in the
 router grid associated with the OSPF session to which an
 OSPF external route pool will be connected. The default
 position is "1 1". This argument is applicable when a grid
 of simulated OSPF routers are created. See example for
 creating a grid of routers.
 -external_number_of_prefix
 Specifies the number of routes in an OSPF external route
 pool element. Possible values range from 1 to 66535. The
 default is 24.
 -external_prefix_forward_addr
 Specifies the forwarding IP address for an OSPF external
 route pool element. The default for OSPFv2 (IPv4) is
 0.0.0.0, and the default for OSPFv3 (IPv6) is
 0:0:0:0:0:0:0:0.
 -external_prefix_length
 Specifies the prefix length for an OSPF external route pool
 element. For IPv4, possible values range from 0 to 32, and
 the default is 24. For IPv6, possible values range from 1 to
 128. The default is 64,
 -external_prefix_metric
 Specifies a metric value for an OSPF external route pool
 element. Possible values range from 1 to 16777215. The
 default is 1.
 -external_prefix_start
 Specifies the first of a sequence of IP addresses belonging
 to the same OSPF external route pool element. The default
 for OSPFv2 (IPv4) is 0.0.0.0, and the default for OSPFv3
 (IPv6) is 0:0:0:0:0:0:0:0. .
 -external_prefix_step
 Specifies the modifier by which to increment the network
 part of the first IP address, to generate subsequent IP
OSPF Functions
701
 addresses belonging to different routes for an OSPF external
 route pool element. Possible values range from 0 to 66535.
 The default is 1.
 -external_prefix_type
 Specifies the type of metric to use for an OSPF external
 route pool. Possible values are 1 or 2. Specify 1
 for type 1 (internal cost is added to external cost) or 2
 for type 2 (external cost only). The default is 1.
 -grid_col
 Defines the number of columns in a grid. Use this argument
 to add a grid of routers behind an emulated router. You must
 also specify "-grid_row" to configure the size of the grid.
 Possible values range from 0 to 65535. The default is
 1.
 -grid_connect
 Connects a router in the grid, as specified by the row and
 column, to the emulated router of the specified OSPF session
 handle (-handle). By default, the first row and first column
 router is connected to the emulated router. Spirent
 TestCenter allows you to connect only one grid of routers to
 one emulated router. Use this argument to add a grid of
 routers behind an emulated router:
 -grid_connect_session
 Use this argument to reconnect a grid of routers to an
 emulated router after the grid has been disconnected by
 "-grid_disconnect". To reconnect a grid of routers to an
 emulated router, use "-grid_connect_session" with "-mode
 modify", "-type grid", "-elem_handle <grid_handle>", and
 "-grid_connect <row col>",
 Note: You can retrieve the "connected_session" handle after
 the grid of routers has been created.
 -grid_disconnect
 Use this argument to disconnect a grid of routers from an
 emulated router. To disconnect a grid of routers from an
 emulated router, use "-grid_disconnect" with "-mode
 modify", "-type grid", "-elem_handle <grid_handle>", and
 "-grid_connect <row col>",
 Note: You can retrieve the "connected_session" handle after
 the grid of routers has been created.
 -grid_link_type
 Specifies the type of link that connects the routers in a
 grid. This argument is available only for OSPFv2. Possible
 values are ptop_numbered and ptop_unnumbered. The default is
 "ptop_unnumbered". A point-to-point (ptop) link is a
 physical or logical serial link between two routers. The
 link can be numbered (IP address is configured on the link)
 or unnumbered.
 -grid_prefix_length
 Specifies the prefix length of a ptop_numbered link on an
 OSPFv2 grid and on a stub network if you also used the
 "-grid_stub_per_network" argument. The default for OSPFv2 is
 24, and the default for OSPFv3 is 64.
 -grid_prefix_start
 Defines the first prefix used in a grid. Use this argument
 only if "-grid_link_type" is set to "ptop_numbered" on
 an OSPFv2 grid or if you also used "-grid_stub_per_router".
 The default for OSPFv2 (IPv4) is 0.0.0.0, and the default
 for OSPFv3 (IPv6) is 0:0:0:0:0:0:0:0.
 -grid_prefix_step
 Increments network prefixes in a grid. The value rounds to
OSPF Functions
702
 the prefix length. Use this argument if either
 "-grid_link_type" is set to "ptop_numbered" or if you also
 set "-grid_stub_per_router". Possible values range from 1 to
 32 for OSPFv2 and 1 to 128 for OSPFv3.
 -grid_router_id
 Sets the first router ID in an OSPF router grid.
 -grid_router_id_step
 Sets the step value for incrementing subsequent router IDs
 in an OSPF router grid.
 -grid_row
 Defines the number of rows in a grid. Use this argument
 to add a grid of routers behind an emulated router. You must
 also specify "-grid_col" to configure the size of the grid.
 Possible values range from 0 to 65535. The default is
 1.
 -grid_stub_per_router
 Defines the number of stub networks per router in a grid.
 Use this argument to add a grid of routers behind a grid
 router.
 -handle
 Identifies the OSPF router on which to create the OSPF
 element. This argument is mandatory.
 -link_enable
 Enables a link to another element. Use this argument to add
 a single router behind a session router: If true (1),
 enables link to another element. The default is 1. This
 argument is available when -type is set to router.
 -link_intf_addr
 Sets the link interface address. Use this argument to add a
 single router behind a session router.
 -mode
 Specifies the action to be performed. Possible values
 are create, modify, and delete. This argument is mandatory.
 The modes are described below:
 create - Creates a topology element. You must use the
 -handle argument to identify the associated element and
 the -type argument to specify the type of topology
 element to create. Both the -handle and -type arguments
 are mandatory with "-mode create".
 modify - Changes the configuration for the topology
 specified in the -handle argument. The -handle, -type,
 and -elem_handle arguments are mandatory with "-mode
 modify".
 delete - Deletes the element specified in the -handle
 argument. The -handle, -type, and -elem_handle
 arguments are mandatory with "-mode delete".
 -net_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of routers per transit network.
 Possible values range from 1 to 65535. The default is 1.
 -net_dr
 Sets the designated router of an OSPF network element.
 -net_ip
 Sets the IP address of an OSPF network element.
 -net_prefix
 Spirent Extension (for Spirent HLTAPI only).
OSPF Functions
703
 Use this argument to add a network (transit link) behind a
 session router: The default for OSPFv2 (IPv4) is 0.0.0.0,
 and the default for OSPFv3 (IPv6) is 0:0:0:0:0:0:0:0.
 -net_prefix_length
 Specifies the prefix length on the network interface.
 Possible values for OSPFv2 range from 1 to 32; the default
 is 24. Possible values for OSPFv3 range from 1 to 128; the
 default is 64.
 -net_ip_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step value for incrementing subsequent IP
 addresses of an OSPF network element on the same transit
 network.

 -nssa_connect
 Specifies the position (row and column) of the router in the
 router grid associated with the OSPF session to which an
 OSPF NSSA route pool will be connected. The default
 position is "1 1". This argument is applicable when a grid
 of simulated OSPF routers are created. See example for
 creating a grid of routers.
 -nssa_number_of_prefix
 Specifies the number of NSSA routes added to a grid
 router.
 -nssa_prefix_forward_addr
 Specifies the forwarding address for an OSPF NSSA route
 pool. The default for OSPFv2 (IPv4) is 0.0.0.0, and the
 default for OSPFv3 (IPv6) is 0:0:0:0:0:0:0:0.
 -nssa_prefix_length
 Specifies the prefix length for an OSPF NSSA route
 pool. Possible values for OSPFv2 range from 1 to 32; the
 default is 32. Possible values for OSPFv3 range from 1 to
 128; the default is 64.
 -nssa_prefix_metric
 Specifies a metric value for an OSPF NSSA route pool
 element. Use this argument when adding nssa routes (that is,
 you specified "-type as nssa_routes"). Possible values
 range from 1 to 16777215. The default is 1.
 -nssa_prefix_start
 Specifies the first IP network prefix in an OSPF NSSA route
 pool element. The default for OSPFv2 (IPv4) is 0.0.0.0, and
 the default for OSPFv3 (IPv6) is 0:0:0:0:0:0:0:0.
 -nssa_prefix_step
 Specifies the amount by which to increment the network part
 of the first IP address to generate subsequent IP addresses
 belonging to different routes for an OSPF NSSA route pool
 element. Possible values range from 1 to 65535.
 -nssa_prefix_type
 Specifies the type of metric to use for an OSPF NSSA route
 pool. Possible values are 1 and 2. Specify 1 for type 1
 (when calculating the cost of the path to an NSSA route, the
 costs of the internal links are included) or 2 for type 2
 (costs of internal links are not included in the total cost
 calculation. Type 2 routes have a lower priority and are
 considered in the path selection after type 1 costs have
 been evaluated. The default is 1.
 -router_abr
 Specifies whether the emulated router is an area border
 router. This argument is equivalent to "Router Type" in the
 Spirent TestCenter GUI, with a choice of ABR, ASBR, or
 Virtual Link. Possible values are 0 (false) or 1 (true). If
OSPF Functions
704
 set to 1, the emulated router is an area border router (that
 is, it corresponds to the B (Border) bit in a router LSA).
 If set to 0, it is not.
 -router_asbr
 Specifies whether the emulated router is an AS border
 router. This argument is equivalent to "Router Type" in the
 Spirent TestCenter GUI, with a choice of ABR, ASBR, or
 Virtual Link. Possible values are 0 (false) or 1 (true). If
 set to 1, the emulated router is an AS border router (that
 is, it corresponds to the E (External) bit in a router
 LSA).. If set to 0, it is not.
 -router_connect
 Connects a single router behind a session
 router: connects to an emulated router or a router
 grid. If you do not specify "-router_connect", a router is
 automatically connected to an emulated router by default.
 To connect a router, use "-router_connect with "-mode
 create", and "-type router".
 -router_disconnect
 Disconnects the router from a session router. To disconnect
 a router, use "-router_disconnect with "-mode modify",
 "-type router", and "-elem_handle <topology_elem_handle>".
 -router_id
 Sets the router ID for the OSPF router element.
 -summary_connect
 Specifies the position (row and column) of the router in the
 router grid associated with the OSPF session to which an
 OSPF summary route pool will be connected. The default
 position is "1 1". This argument is applicable when a grid
 of simulated OSPF routers are created. See example for
 creating a grid of routers.
 -summary_number_of_prefix
 Specifies the number of summary routes added to a grid router.
 Possible values range from 1 to 14294967295. The default is 1.
 -summary_prefix_length
 Specifies the prefix length for an OSPF summary route pool
 element. For IPv4, possible values range from 0 to 32, and
 the default is 24. For IPv6, possible values range from 1 to
 128. The default is 64.
 -summary_prefix_metric
 Specifies a metric value for an OSPF summary route pool
 element. Use this argument when adding summary routes (that
 is, you specified "-type summary_routes"). Possible values
 range from 1 to 16777215. The default is 1.
 -summary_prefix_start
 Specifies the first of a sequence of IP addresses belonging
 to the same OSPF summary route pool element. The default
 for OSPFv2 (IPv4) is 0.0.0.0, and the default for OSPFv3
 (IPv6) is 0:0:0:0:0:0:0:0. Use this argument only if you
 specified "-type ext_pool".
 The default for OSPFv2 (IPv4) is
 0.0.0.0, and the default for OSPFv3 (IPv6) is
 0:0:0:0:0:0:0:0.
 -summary_prefix_step
 Specifies the modifier by which to increment the network
 part of the first IP address, to generate subsequent IP
 addresses belonging to different routes for an OSPF summary
 route pool element. Possible values range from 0 to 66535.
 The default is 1.
OSPF Functions
705
 -type
 Specifies the type of topology element to create:
 - router: an individual OSPF router
 - grid: a rectangular grid of routers
 - network: a subnet/link behind the selected session router
 - summary_routes: a pool of summary route addresses
 - ext_routes: a pool of external route addresses
 - nssa_routes: a pool of NSSA route addresses
 This argument is mandatory.
Arguments Unsupported by Save as HLTAPI:
 The sth::emulation_ospf_topology_route_config function is currently not supported
 by Save to HLTAPI. To test with this function, you must configure it manually in
 the generated Spirent HLTAPI scripts.
Cisco-specific Arguments:
 The following attributes are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -grid_start_gmpls_link_id
 -grid_start_te_ip
 -grid_te
 -link_metric
 -link_te
 -link_te_instance
 -link_te_link_id
 -link_te_local_ip_addr
 -link_te_max_bw
 -link_te_max_resv_bw
 -link_te_metric
 -link_te_remote_ip_addr
 -link_te_type
 -link_te_unresv_bw_priority0
 -link_te_unresv_bw_priority1
 -link_te_unresv_bw_priority2
 -link_te_unresv_bw_priority3
 -link_te_unresv_bw_priority4
 -link_te_unresv_bw_priority5
 -link_te_unresv_bw_priority6
 -link_te_unresv_bw_priority7
 -nssa_connect
 -router_te
 -router_virtual_link_endpt
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 elem_handle A different element handle is returned based on
 the user configuration
 router (elem_handle - router_lsa_handle)
 version - ospfv2 or ospfv3
 connected_handles - router_lsa_handle that is connected
 to the created router
 router_lsa - router_lsa_handle (same as elem_handle)
 grid (elem_handle - grid_handle)

 connected_session.$session.row <row>.col <col>
 - $session is router_lsa_handle
OSPF Functions
706
 <row> is the row that
 the router connects to
 the grid.
 <col> is the column that
 the router connects to
 the grid.
 router - the router_lsa_handle of each router
 on the grid
 network (elem_handle - network_blk_handle)

 network_lsa - network_blk_handle
 connected_routers - a list of router lsa handles
 version - ospfv2 or ospfv3
 summary (elem_handle - summary_blk_handle)

 summary_lsas - summary_blk_handle
 connected_routers - a list of router lsa handles
 version - ospfv2 or ospfv3
 external (elem_handle - external_blk_handle)
 external_lsas - summary_blk_handle
 connected_routers - a list of router lsa handles
 version - ospfv2 or ospfv3
 nssa (elem_handle - nssa_blk_handle)

 nssa_lsas - nssa_blk_handle
 connected_routers - a list of router lsa handles
 version - ospfv2 or ospfv3
 Examples:
 To get the router_lsa handle of the created router, specify one of the
 following:
 set router_lsa [keylget cmdReturn elem_handle]

 set router_lsa [keylget cmdReturn router.router_lsa]
 To get the router_lsa handle of the router that it is connected with,
 specify the following:

 set connected_router [keylget cmdReturn router. connected_handles]
 To get the grid_handle:
 set grid_handle [keylget cmdReturn elem_handle]
 To get the connected_session handle
 set connected_sesion [keylkeys cmdReturn grid.connected_session]

 To get the router_lsa of a grid router at row 2, col 2:
 set router_lsa [keylget cmdReturn grid.router.2.2]
Description:
 The sth::emulation_ospf_topology_route_config function creates, enables,
 disables, modifies, or deletes a set of OSPFv2 and/or OSPFv3 routers or a
 single routers behind an OSPF router. Use this function to attach routes to
 or delete routes from Summary, External, and NSSA routers.
 To configure the OSPF topology, you create emulated routers and links
 associated with the routers. To define the routers and links, use a
 combination of router, LSA, and link elements.
 Use the -mode argument to specify the operation to perform. When you create
 a topology element, the function returns a handle to the newly created
 element. Use this handle as input for modify and delete mode operations.
OSPF Functions
707
 The mode that you use determines the set of arguments that you use to
 configure the OSPF topology elements. When you specify -mode create, you
 must also use the -handle argument to identify the OSPF session on which to
 create the OSPF element and the -type argument to specify the type of
 topology element to create.
 Examples:
 The following example creates an OSPF router behind an emulated
 router:
 [sth::emulation_ospf_topology_route_config -mode create \
 -handle $router \
 -type router \
 -router_id 1.0.0.1]
 router_handle [keylget cmdReturn elem_handle]
 Output for above example:
 {status 1} {elem_handle routerlsa2} {router {{connected_handles routerlsa1}
 {router_lsa routerlsa2} {link_lsa routerlsalink1}}}
 The following example creates an OSPF router behind a grid
 router:
 [sth::emulation_ospf_topology_route_config -mode create \
 -handle $router \
 -type router \
 -router_id 1.0.0.1 \
 -router_connect $lsa_handle]
 router_handle [keylget cmdReturn elem_handle]
 Output for above example:
 {status 1} {elem_handle routerlsa6} {router {{connected_handles routerlsa1}
 {router_lsa routerlsa6} {link_lsa routerlsalink11}}}

 Note: The lsa_handle is retrieved once the grid router has been created.
 The following example creates an OSPF grid:
 [sth::emulation_ospf_topology_route_config -mode create \
 -handle $router \
 -type grid \
 -grid_connect "2 5" \
 -grid_col 5 \
 -grid_row 5 \
 -grid_link_type ptop_unnumbered \
 -grid_router_id 1.0.0.1 \
 -grid_router_id_step 0.0.0.1]
 grid_handle [keylget cmdReturn elem_handle]
 connected_handle [keylkeys cmdReturn grid.connected_session]
 Output for above example:
 {status 1} {elem_handle ospfGrid1} {grid {{connected_session {{routerlsa5
 {{row 1} {col 1}}}}} {router {{1 {{1 routerlsa1} {2 routerlsa2}}} {2 {{1
 routerlsa3} {2 routerlsa4}}}}}}}
 The following example disconnects an OSPF grid from emulated router:
 [sth::emulation_ospf_topology_route_config -mode modify \
 -handle $router \
 -type grid \
 -elem_handle $grid_handle \
 -grid_disconnect $connected_handle]
 grid_handle [keylget cmdReturn elem_handle]
OSPF Functions
708
 Output for above example:
 {status 1} {elem_handle ospfGrid1} {grid {{router {{1 {{1 routerlsa1}
 {2 routerlsa2}}} {2 {{1 routerlsa3} {2 routerlsa4}}}}}}}
 The following example creates an OSPF summary:
 [sth::emulation_ospf_topology_route_config -mode create \
 -handle $router \
 -type summary_routes \
 -summary_connect "1 1" \
 -summary_prefix_start 91.0.1.0 \
 -summary_prefix_step 2 \
 -summary_number_of_prefix 5 \
 -summary_prefix_length 27 \
 -summary_prefix_metric 10]
 summary_handle [keylget cmdReturn elem_handle]
 Output for above example:
 {summary {{summary_lsas summarylsablock1} {version ospfv2}
 {connected_routers routerlsa1}}} {status 1} {elem_handle summarylsablock1}
 The following example modifies an OSPF summary:
 [sth::emulation_ospf_topology_route_config -mode modify \
 -handle $router \
 -type summary_routes \
 -elem_handle $summary_handle \
 -summary_prefix_start 191.0.1.0 \
 -summary_prefix_step 4 \
 -summary_number_of_prefix 2 \
 -summary_prefix_length 24]
 summary_handle [keylget cmdReturn elem_handle]
 The following example creates 30 OSPF external routes:
 set ret [::sth::emulation_ospf_topology_route_config -mode create\
 -type ext_routes \
 -handle $router \
 -external_connect "1 1" \
 -external_number_of_prefix 30 \
 -external_prefix_start 91.0.0.1 \
 -external_prefix_step 2 \
 -external_prefix_length 32 \
 -external_prefix_type 2]
 Sample output for example shown above:
 {external {{external_lsas externallsablock1} {version ospfv2}
 {connected_routers routerlsa1}}} {status 1} {elem_handle externallsablock1}
 The following example creates 20 OSPF NSSA routes:
 [::sth::emulation_ospf_topology_route_config -mode create\
 -type nssa_routes \
 -handle $router \
 -nssa_number_of_prefix 20 \
 -nssa_prefix_forward_addr 10.0.0.1 \
 -nssa_prefix_start 90.0.0.1 \
 -nssa_prefix_step 2 \
 -nssa_prefix_length 32 \
 -nssa_prefix_metric 5 \
 -nssa_prefix_type 2]
 Sample output for example shown above:
 {nssa {{nssa_lsas externallsablock4} {version ospfv2}
 {connected_routers routerlsa1}}} {status 1} {elem_handle externallsablock4}
Sample Input: See Examples.
OSPF Functions
709
Sample Output: See Examples.
Notes:
 1) The Cisco HLTAPI specification documentation states that to
 use the emulation_ospf_topology_route_config function, you must use
 session_router that is returned from the emulation_ospf_config
 function: [keylget cmdReturn session_router]. However, the
 current implementation of the Spirent HLTAPI for
 sth::emulation_ospf_config is as follows:
 [keylget cmdReturn handle] -> return session_router handle
 [keylget cmdReturn session_router] -> return router handle
 To ensure that these handles do not cause other functions to work
 improperly, the Spirent HLTAPI uses the handle that is returned
 from [keylget cmdReturn handle] to create objects in
 sth::emulation_ospf_topology_route_config. You MUST use the handle that
 is returned from emulation_ospf_config [keylget cmdReturn handle]
 when configuring topology elements with
 sth::emulation_ospf_topology_route_config.
End of Procedure Header
sth::emulation_ospfv2_info
Name:
 sth::emulation_ospfv2_info
Purpose:
 Spirent Extension (for Spirent HLTAPI only).
 This function is a Spirent Extension created to return statistical
 information about the OSPFv2 configuration.
Synopsis:
 sth::emulation_ospfv2_info
 -handle <port_handle>
Arguments:
 -handle
 Specifies one or more ports from which to gather transmitted
 (tx) and received (rx) statistics. This argument is
 mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null.
 The following keys are returned:
 adjacency_status
 OSPFv2 Adjacency State
 router_state
 Reports the state of adjacency on the current port
 rx_ack
 Received Acks - Number of Link State Acknowledgment
 packets received by the emulated router
OSPF Functions
710
 rx_router_asbr
 Received ASBR-Summary-LSAs - Number of ASBR-Summary-
 LSAs received by the emulated router
 rx_asexternal_lsa
 Received External-LSAs - Number of External LSAs
 received by the emulated router
 rx_dd
 Received DD - Number of Database Description packets
 (containing LSA headers) received by the emulated
 router
 rx_hello
 Received Hellos - Number of Hello packets received by
 the emulated router
 rx_network_lsa
 Received Network-LSAs - Number of Network LSAs received
 by the emulated router
 rx_nssa_lsa
 Received NSSA-LSAs - Number of NSSA LSAs received by
 the emulated router
 rx_request
 Received Requests - Number of LS Request packets
 received by the emulated router
 rx_router_lsa
 Received Router-LSAs - Number of Router LSAs received
 by the emulated router
 rx_summary_lsa
 Received Summary-LSAs - Number of Summary LSAs received
 by the emulated router
 rx_te_lsa
 Received TE-LSAs - Number of TE-LSAs received by the
 emulated router

 tx_ack
 Sent Acks - Number of Link State Acknowledgment packets
 sent by the emulated router
 tx_asbr_summry_lsa
 Sent ASBR-Summary-LSAs - Number of ASBR-Summary LSAs
 sent by the emulated router
 tx_as_external_lsa
 Sent External-LSAs - Number of External LSAs sent by
 the emulated router
 tx_dd
 Sent DD - Number of Database Description packets sent
 by the emulated router
 tx_hello
 Sent Hellos - Number of Hello packets sent by the
 emulated router
 tx_network_lsa
 Sent Network-LSAs - Number of Network LSAs sent by the
 emulated router
 tx_nssa_lsa
 Sent NSSA-LSAs - Number of NSSA LSAs sent by the
 emulated router
 tx_request
OSPF Functions
711
 Sent Requests - Number of LS Request packets sent by
 the emulated router
 tx_router_lsa
 Sent Router-LSAs - Number of Router LSAs sent by the
 emulated router
 tx_summary_lsa
 Sent Summary-LSAs - Number of Summary LSAs sent by the
 emulated router
 tx_te_lsa
 Sent TE-LSAs - Number of TE-LSAs sent by the emulated
 router

 rx_external_link_lsa
 Rx Opaque/SR extended link LSA count

 rx_external_prefix_lsa
 Rx Opaque/SR extended prefix LSA count

 rx_router_info_lsa
 Rx Opaque/SR router info LSA count

 tx_external_link_lsa
 Tx Opaque/SR extended link LSA count

 tx_external_prefix_lsa
 Tx Opaque/SR extended prefix LSA count

 tx_router_info_lsa
 Tx Opaque/SR router info LSA count
Description:
 The sth::emulation_ospfv2_info function provides information about the
 statistics returned by the OSPFv2 configuration. The default return value
 for each statistic is 0.
 This function returns the statistics for the specified handle and a status
 value (1 for success). If there is an error, the function returns the
 status value (0) and an error message. Function return values are formatted
 as a keyed list (supported by the Tcl extension software - TclX). Use the
 TclX function keylget to retrieve data from the keyed list. (See Return
 Values for a description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input:
 sth::emulation_ospfv2_info -handle $ospfv2Router(1)
 Sample Output:
 {tx_summary_lsa 2.000000} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_ospfv2_info (
 handle = device_list);
 Sample Output:
 {'tx_request': '0', 'tx_dd': '0', 'rx_summary_lsa': '0', 'rx_request': '0',
 'tx_te_lsa': '0', 'tx_as_external_lsa': '0', 'tx_summary_lsa': '0', 'rx_dd':
 '0', 'rx_hello': '0', 'status': '1', 'tx_network_lsa': '0', 'rx_ack': '0',
 'rx_te_lsa': '0', 'tx_ack': '0', 'rx_nssa_lsa': '0', 'rx_router_lsa': '0',
 'tx_router_lsa': '0', 'tx_nssa_lsa': '0', 'router_state': 'NONE',
 'tx_asbr_summry_lsa': '0', 'rx_network_lsa': '0', 'tx_hello': '0',
 'rx_asexternal_lsa': '0', 'rx_router_asbr': '0', 'adjacency_status': 'DOWN'}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::emulation_ospfv2_info (
 handle => "$device_list",
OSPF Functions
712
 Sample Output:
 $VAR1 = 'rx_te_lsa';
 $VAR2 = '0';
 $VAR3 = 'adjacency_status';
 $VAR4 = 'DOWN';
 $VAR5 = 'rx_asexternal_lsa';
 $VAR6 = '0';
 $VAR7 = 'rx_router_asbr';
 $VAR8 = '0';
 $VAR9 = 'status';
 $VAR10 = '1';
 $VAR11 = 'tx_as_external_lsa';
 $VAR12 = '0';
 $VAR13 = 'tx_dd';
 $VAR14 = '0';
 ...
Notes:
 None
End of Procedure Header
sth::emulation_ospfv3_info
Name:
 sth::emulation_ospfv3_info
Purpose:
 Spirent Extension (for Spirent HLTAPI only).
 This function is a Spirent Extension created to return statistical
 information about the OSPFv3 configuration.
Synopsis:
 sth::emulation_ospfv3_info
 -handle <port_handle>
Arguments:
 -handle
 Specifies one or more ports from which to gather transmitted
 (tx) and received (rx) statistics. This argument is
 mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null.
 The following keys are returned:
 adjacency_status
 OSPFv3 Adjacency State
 router_state
 Reports the state of adjacency on the current port
 rx_ack
 Received acks - Number of Link State Acknowledgment
 packets received by the emulated router
OSPF Functions
713
 rx_asexternal_lsa
 Received external-LSAs - Number of external LSAs
 received by the emulated router
 rx_dd
 Received DD - Number of Database Description
 packets (containing LSA headers) received by the
 emulated router
 rx_hello
 Received Hellos - Number of Hello packets received by
 the emulated router
 rx_inter_area_prefix_lsa
 Received inter-area-prefix LSAs - Number of inter-
 area-prefix LSAs received by the emulated router
 rx_inter_area_router_lsa
 Received inter-area-router LSAs - Number of inter-
 area-router LSAs received by the emulated router
 rx_intra_area_prefix_lsa
 Received Intra-Area-Prefix-LSAs - Number of Intra-Area-
 Prefix LSAs received by the emulated router
 rx_link_lsa
 Received link-LSAs - Number of link LSAs received by
 the emulated router.
 rx_network_lsa
 Received Network-LSAs - Number of Network LSAs received
 by the emulated router
 rx_nssa_lsa
 Received Link-LSAs - Number of Link LSAs received by
 the emulated router
 rx_router_lsa
 Received Router-LSAs - Number of Router LSAs received
 by the emulated router
 tx_ack
 Sent Acks - Number of Link State Acknowledgment
 packets sent by the emulated router
 tx_as_external_lsa
 Sent external-LSAs - Number of external LSAs sent by
 the emulated router
 tx_dd
 Sent DD - Number of Database Description packets sent
 by the emulated router
 tx_hello
 Sent Hellos - Number of Hello packets sent by the
 emulated router
 tx_inter_area_prefix_lsa
 Sent inter-area-prefix LSAs - Number of inter-area-
 prefix LSAs sent by the emulated router
 tx_inter_area_prefix_lsa
 Sent inter-area-router LSAs - Number of inter-area-
 router LSAs sent by the emulated router
 tx_intra_area_prefix_lsa
 Sent Intra-Area-Prefix-LSAs - Number of Intra-Area-
 Prefix LSAs sent by the emulated router
 tx_link_lsa
OSPF Functions
714
 Sent link-LSAs - Number of link LSAs sent by the
 emulated router.
 tx_network_lsa
 Sent Network-LSAs - Number of Network LSAs sent by the
 emulated router
 tx_nssa_lsa
 Sent NSSA-LSAs - Number of NSSA LSAs sent by the
 emulated router
 tx_request
 Sent requests - Number of LS request packets sent by
 the emulated router
 tx_router_lsa
 Sent Router-LSAs - Number of Router LSAs sent by the
 emulated router
Description:
 The sth::emulation_ospfv3_info function provides information about the
 statistics returned by the OSPFv3 configuration.
 This function returns the statistics for the specified handle and a status
 value (1 for success). If there is an error, the function returns the
 status value (0) and an error message. Function return values are formatted
 as a keyed list (supported by the Tcl extension software - TclX). Use the
 TclX function keylget to retrieve data from the keyed list. (See Return
 Values for a description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input:
 ::sth::emulation_ospfv3_info -handle $ospfv3Router(1)
 Sample Output:
 { tx_hello 59.000000} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_ospfv3_info (
 handle = device_list);

 Sample Output:
 {'tx_request': '0', 'rx_intra_area_prefix_lsa': '0',
 'rx_inter_area_prefix_lsa': '0', 'tx_dd': '0', 'tx_as_external_lsa': '0',
 'rx_link_lsa': '0', 'rx_dd': '0', 'tx_inter_area_prefix_lsa': '0',
 'rx_hello': '0', 'status': '1', 'tx_network_lsa': '0', 'rx_ack': '0',
 'tx_intra_area_prefix_lsa': '0', 'tx_ack': '0', 'rx_nssa_lsa': '0',
 'rx_router_lsa': '0', 'tx_router_lsa': '0', 'tx_nssa_lsa': '0',
 'router_state': 'NONE', 'rx_inter_area_router_lsa': '0', 'rx_network_lsa':
 '0', 'tx_hello': '0', 'rx_asexternal_lsa': '0', 'tx_link_lsa': '0',
 'adjacency_status': 'DOWN'}

 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::emulation_ospfv3_info (
 handle => "$device_list");

 Sample Output:
 $VAR1 = 'adjacency_status';
 $VAR2 = 'DOWN';
 $VAR3 = 'rx_asexternal_lsa';
 $VAR4 = '0';
 $VAR5 = 'rx_link_lsa';
 $VAR6 = '0';
 $VAR7 = 'status';
 $VAR8 = '1';
 ...
OSPF Functions
715
Notes:
 None
End of Procedure Header
sth::emulation_ospf_route_info
Name:
 sth::emulation_ospf_route_info
Purpose:
 Returns detailed OSPF route information of OSPF router.
Synopsis:
 sth:: emulation_ospf_route_info
 -handle <ospf_session_handle>
Arguments:
 -handle
 Specifies the OSPF session from which you get the information.
 This argument is mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null.
 The following keys are returned:
 OSPFv2
 Router LSA Information
 router.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA

 router.lsa_handle.<lsa>.link_state_id
 IPv4 address that identifies the LSA

 router.lsa_handle.<lsa>.links.<Index>.id
 Link ID
 router.lsa_handle.<lsa>.links.<Index>.data
 Link Data
 router.lsa_handle.<lsa>.links.<Index>.type
 Type of link to be advertised in the LSA
 Network LSA Information
 network.lsa_handle.<lsa>.adv_router_id
 Router ID of the designated router (DR) of the emulated network
 network.lsa_handle.<lsa>.link_state_id
 IPv4 address of the emulated network's DR
 network.lsa_handle.<lsa>.attached_router_ids
 List of routers on the network
OSPF Functions
716
 Summary LSA Information
 summary.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA
 summary.lsa_handle.<lsa>.link_state_id.num_prefix
 Number of IPv4 addresses on the network
 summary.lsa_handle.<lsa>.link_state_id.prefix_start
 The starting IPv4 address
 summary.lsa_handle.<lsa>.link_state_id.prefix_length
 Prefix length for the IPv4 address

 summary.lsa_handle.<lsa>.link_state_id.prefix_step
 Step size of link state IDs
 Autonomous System Boundary Router (ASBR) LSA Information
 asbr_summary.lsa_handle.<lsa>.adv_router_id
 Router ID of the Router that sends the LSA.
 asbr_summary.lsa_handle.<lsa>.link_state_id
 Router ID of the ASBR whose location is being advertised.
 External LSA information
 external.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA
 external.lsa_handle.<lsa>.link_state_id.num_prefix
 Number of IPv4 addresses
 external.lsa_handle.<lsa>.link_state_id.prefix_start
 The starting IPv4 address
 external.lsa_handle.<lsa>.link_state_id.prefix_length
 Prefix length for the IPv4 addresses
 external.lsa_handle.<lsa>.link_state_id.prefix_step
 Step size of link state IDs
 "not-so-stubby" area (NSSA) LSA Information
 nssa.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA

 nssa.lsa_handle.<lsa>.link_state_id.num_prefix
 Number of IP addresses

 nssa.lsa_handle.<lsa.link_state_id>.prefix_start
 The starting IP address
 nssa.lsa_handle.<lsa>.link_state_id.prefix_length
 Prefix length of the IPv4 address
 nssa.lsa_handle.<lsa>.link_state_id.prefix_step
 Step size of link state IDs

 Traffic Engineering (TE) Router LSA Information
 te_router.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA
 te_router.lsa_handle.<lsa>.link_state_id
 IPv4 address that identifies the LSA
 TE Link LSA Information

 te_link.lsa_handle.<lsa>.adv_router_id 
OSPF Functions
717
 Router ID of the router that sends the LSA.

 te_link.lsa_handle.<lsa>.link_state_id
 IPv4 address that identifies the LSA
 OSPF V3

 Router LSA Information
 router.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA

 router.lsa_handle.<lsa>.link_state_id
 IP address that identifies the LSA
 router.lsa_handle.<lsa>.links.<Index>.id
 Link ID

 router.lsa_handle.<lsa>.links.<Index>.data
 Link Data

 router.lsa_handle.<lsa>.links.<Index>.type
 Type of link to be advertised in the LSA

 Network LSA Information
 network.lsa_handle.<lsa>.adv_router_id
 Router ID of the emulated network's DR

 network.lsa_handle.<lsa>.link_state_id
 IPv6 address of the emulated network's DR

 network.lsa_handle.<lsa>.attached_router_ids
 List of routers on the network
 External LSA Information
 external.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA

 external.lsa_handle.<lsa>.link_state_id.num_prefix
 Number of IPv6 addresses
 external.lsa_handle.<lsa>.link_state_id.prefix_start
 The starting IPv6 address
 external.lsa_handle.<lsa>.link_state_id.prefix_length
 Prefix length
 external.lsa_handle.<lsa>.link_state_id.prefix_step
 Step size of link state IDs
 NSSA LSA Information
 nssa.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA

 nssa.lsa_handle.<lsa>.link_state_id.num_prefix
 Number of IPv6 addresses on the same sub-network
 nssa.lsa_handle.<lsa.link_state_id>.prefix_start
 The starting IPv6 address
 nssa.lsa_handle.<lsa>.link_state_id.prefix_length
 Prefix length
 nssa.lsa_handle.<lsa>.link_state_id.prefix_step
 Step size between two link state IDs
 Link LSA Information
OSPF Functions
718
 link.lsa_handle.<lsa>.adv_router_id
 Router ID of the router that sends the LSA
 link.lsa_handle.<lsa>.link_state_id
 Router ID of the link whose location is being advertised
 Intra-Area Prefix LSA Information
 intra_area_prefix.lsa_handle.<lsa>.adv_router_id
 Router ID of the intra-area prefix LSA

 intra_area_prefix.lsa_handle.<lsa>.link_state_id.num_prefix
 Number of IPv6 addresses on the network

 intra_area_prefix.lsa_handle.<lsa>.link_state_id.prefix_start
 The starting IPv6 address

 intra_area_prefix.lsa_handle.<lsa>.link_state_id.prefix_length
 Prefix length

 intra_area_prefix.lsa_handle.<lsa>.link_state_id.prefix_step
 Step size of Link state IDs

 intra_area_prefix.lsa_handle.<lsa>.link_state_id
 Link state ID of the intra-area prefix LSA
 Inter-Area Prefix LSA Information
 inter_area_prefix.lsa_handle.<lsa>.adv_router_id
 Router ID of the inter-area prefix LSA
 inter_area_prefix.lsa_handle.<lsa>.link_state_id.num_prefix
 Number of IPv6 addresses on the network
 inter_area_prefix.lsa_handle.<lsa.link_state_id>.prefix_start
 The starting IPv6 address
 inter_area_prefix.lsa_handle.<lsa>.link_state_id.prefix_length
 Prefix length

 inter_area_prefix.lsa_handle.<lsa>.link_state_id.prefix_step
 Step size of Link state ID
 inter_area_router.lsa_handle.<lsa>.adv_router_id
 Router ID of the inter-area router
 inter_area_router.lsa_handle.<lsa>.link_state_id
 Link state ID of the inter-area router
Description:
 The sth::emulation_ospf_route_info function provides information about the
 statistics returned by the OSPF session configuration.
 This function returns the statistics for the specified handle (-handle) and a
 status value (1 for success). If there is an error, the function returns the
 status value (0) and an error message. Function return values are formatted
 as a keyed list (supported by the Tcl extension software - TclX). Use the
 TclX function keylget to retrieve data from the keyed list. (See Return
 Values for a description of each key.)
Examples:
 #### HLTAPI for Tcl ####
 Sample Input:
 sth::emulation_ospf_route_info -handle ospfrouter1
Sample Output:
 Sample SUCCESS output (a 2*2 grid network LSA Info output)
 {router {{lsa_handle {{routerlsa1 {{links {{1 {{id 16.1.1.3}
 {type POINT_TO_POINT} {data 0.0.0.1}}} {2 {{id 16.1.1.5}
 {type POINT_TO_POINT} {data 0.0.0.2}}} {3 {{id 10.1.1.1}
 {type POINT_TO_POINT} {data 0.0.0.3}}}}} {link_state_id 0.0.0.0}
OSPF Functions
719
 {adv_router_id 16.1.1.1}}} {routerlsa2 {{links {{1 {{id 16.1.1.1}
 {type POINT_TO_POINT} {data 0.0.0.1}}} {2 {{id 16.1.1.7}
 {type POINT_TO_POINT} {data 0.0.0.2}}}}} {link_state_id 0.0.0.0}
 {adv_router_id 16.1.1.3}}} {routerlsa3 {{links {{1 {{id 16.1.1.1}
 {type POINT_TO_POINT} {data 0.0.0.1}}} {2 {{id 16.1.1.7}
 {type POINT_TO_POINT} {data 0.0.0.2}}}}} {link_state_id 0.0.0.0}
 {adv_router_id 16.1.1.5}}} {routerlsa4 {{links {{1 {{id 16.1.1.3}
 {type POINT_TO_POINT} {data 0.0.0.1}}} {2 {{id 16.1.1.5}
 {type POINT_TO_POINT} {data 0.0.0.2}}}}} {link_state_id 0.0.0.0}
 {adv_router_id 16.1.1.7}}} {routerlsa5 {{links {{1 {{id 16.1.1.1}
 {type POINT_TO_POINT} {data 0.0.0.1}}}}} {link_state_id 0.0.0.0}
 {adv_router_id 10.1.1.1}}}}}}} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 route_results_ret1 = sth.emulation_ospf_route_info (
 handle = device_list);

 Sample Output: {'status': '1'}

 #### HLTAPI for Perl ####
 Sample Input:
 my %route_results_ret1 = sth::emulation_ospf_route_info (
 handle => "$device_list");
Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None
End of Procedure Header
Packet Capture Functions
720
Packet Capture Functions
Functions:
sth::packet_config_buffers
sth::packet_config_triggers
sth::packet_config_filter
sth::packet_control
sth::packet_info
sth::packet_stats
sth::packet_config_buffers
Name:
 sth::packet_config_buffers
Purpose:
 Defines how Spirent HLTAPI will manage the buffers for packet
 capturing.
Synopsis:
 sth::packet_config_buffers
 -port_handle <handle>
 -action {wrap|stop}
Arguments:
 -port_handle
 Specifies the handle of the port on which buffers will be
 managed. This argument is mandatory. To apply the
 sth::packet_config_buffers function to all ports, specify
 "all" instead of a handle (for example, -port_handle all).
 -action Specifies the action to perform when the buffer is full.
 The only possible value for the Spirent HLTAPI is "wrap",
 This argument is mandatory.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 The sth::packet_config_buffers function returns a keyed list
 using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::packet_config_buffers function configures how Spirent HLTAPI
 manages buffers on the specified port. You determine what happens when the
 packet capture buffer becomes full. Use the -action argument to specify
 whether to stop packet capture or to allow packet capture to continue even
 after the buffer is full. The default and only option at this time is
 "wrap." The -action wrap argument discards the first packets and replaces
 them by the last captured packets until packet capturing stops.
Examples:
 sth::packet_config_buffers -port_handle port1 -action wrap
 sth::packet_config_buffers -port_handle all -action wrap
Sample output:
Packet Capture Functions
721
 {status 1}
Notes:
 Spirent HLTAPI 2.00 does not yet support the "-action stop" option.
End of Procedure Header
sth::packet_config_triggers
Name:
 sth::packet_config_triggers
Purpose:
 Defines the condition (trigger) that will start or stop packet capturing.
 By default, Spirent HLTAPI captures all data and control plane packets
 that it sends and all data plane packets that it receives.
Synopsis:
 sth::packet_config_triggers
 -exec {start|stop} (HLTAPI for Tcl/Perl)
 -python_exec {start|stop} (HLTAPI for Python)
 -port_handle <handle>
 [-mode {add|remove}]
 [-trigger {signature|jumbo|oversize|undersize|invalidfcs|ipCheckSum|
 oos|length <0-4294967295>|prbs}]
 [-action {counter|event}]
Arguments:
 -action
 Specifies the condition under which Spirent HLTAPI will
 start or stop capturing packets. "Event" is the only
 option supported in this release. Event starts or stops
 capturing packets after a specified set of event details
 takes place.
 This argument starts or stops the data capture based on the
 value provided for the -exec argument. For example, if you
 specified "-exec stop", Spirent HLTAPI stops capturing
 packets when the specified event occurs.
 -exec
 Starts or stops packet capturing based on the condition
 provided in the -trigger argument. Possible values are start
 and stop. This argument is mandatory. The modes are
 described below:
 start - Starts capturing packets when the specified
 condition is met.
 stop - Stops capturing packets when the specified
 condition is met.
 Note: This argument only works with HLTAPI for Tcl and HLTAPI for
 Per.
 -python_exec
 Starts or stops packet capturing based on the condition
 provided in the -trigger argument. Possible values are start
 and stop. This argument is mandatory. The modes are
 described below:
 start - Starts capturing packets when the specified
 condition is met.
Packet Capture Functions
722
 stop - Stops capturing packets when the specified
 condition is met.
 Note: This argument only works with HLTAPI for Python.
 -mode
 Spirent Extension (for Spirent HLTAPI only).
 Adds or removes all triggers specified with the -trigger
 argument. Possible values are "add" and "remove", The
 default is "add". The modes are described below:
 add - Adds the specified triggers.
 remove - Removes the specified triggers.
 Note: Using the sth::packet_config_triggers function
 multiple times with "-mode add" adds all specified triggers
 to the capture. Calling this function with "-mode remove"
 clears all previously added triggers. Also, when removing
 the "length" trigger, you do not have to specify the value
 of the length as you do when defining that trigger. For
 example, you can use "-mode remove -trigger length" instead
 of "-mode remove -trigger {length 24}".
 -port_handle
 The handle of the port on which triggers will be configured.
 This argument is mandatory. You can specify "all" to apply
 this function to all ports (for example, -port_handle all).
 -trigger
 Specifies the type of packets that will cause Spirent
 HLTAPI to either start or stop capturing data plane and
 control plane packets. If you do not specify a trigger,
 Spirent HLTAPI captures all data packets. You cannot
 specify more than one trigger at a time. That is, you can
 only specify one trigger in each
 sth::packet_config_triggers function call. The triggers
 are described below:
 signature - frames with a signature tag
 oversize - oversize frames
 jumbo - jumbo frames
 undersize - undersize frames
 invalidfcs - frames with invalid FCS
 ipCheckSum - IP header checksum error
 oos - Out of sequence error (requires signature support)
 length <length> - frames matching a specified length, where
 <length> is a value from 0 to 4294967295.
 prbs - frame with PRBS (pseudorandom bit sequence) errors
 Note: To add multiple triggers, call this function multiple
 times. For example, to capture both oversize and undersize
 packets, call the sth::packet_config_triggers function
 twice as in the following example:
 sth::packet_config_triggers -port_handle $portHandle \
 -exec start \
 -trigger oversize
 sth::packet_config_triggers -port_handle $portHandle \
 -exec start \
 -trigger undersize
Packet Capture Functions
723
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 The sth::packet_config_triggers function returns a keyed list
 using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::packet_config_triggers function configures which triggers will
 cause Spirent HLTAPI to start or stop capturing packets. During the
 data capturing process, a capture trigger monitors the traffic data for one
 or more of the specified trigger events, such as an oversized packet. You
 must use the -exec argument to specify whether to start or stop capturing
 data packets based on the triggers you specify.
 Optionally, you can use the -mode argument to specify whether to add or
 remove the specified triggers. (See the -mode argument description for
 information about the modes.)
 You can use the -trigger argument to specify which trigger events to
 monitor (See the -trigger argument description for information about each
 trigger.) If you do not specify any triggers, Spirent HLTAPI will
 capture all data plane and control plane packets received. To specify more
 than one trigger, call this function for each trigger.
 Use the -action argument to specify the conditions under which Spirent
 HLTAPI will stop capturing packets. (See the -action argument
 description for information about the actions.)
 Note: Background traffic analysis with IGMP is unavailable with calculate
 latency enabled. Also, Spirent HLTAPI cannot capture IGMP control plane packets
 when calculate latency is enabled (that is, the command
 "sth::emulation_igmp_control -calculate_latency" is enabled during an IGMP
 Join. Likewise, Spirent HLTAPI cannot capture MLD control plane packets if its
 -calculate_latency option is enabled during an MLD Join.
Examples:
 To stop data capturing when Spirent HLTAPI encounters a packet with a
 signature tag:
 sth::packet_config_triggers -port_handle $portHandle \
 -exec stop \
 -trigger signature
 To start data capturing when Spirent HLTAPI encounters a packet with a
 length of 128 bytes:
 sth::packet_config_triggers -port_handle $portHandle \
 -exec start \
 -trigger {length 128}
Sample output for example shown above:
 {status 1}
Notes:
 It is not possible to define a pattern as a trigger in Spirent HLTAPI.
End of Procedure Header
Packet Capture Functions
724
sth::packet_config_filter
Name:
 sth::packet_config_filter
Purpose:
 Defines how Spirent HLTAPI will filter the captured data. If you do not
 define any filters, Spirent HLTAPI captures all data.
Synopsis:
 sth::packet_config_filter
 -port_handle <handle>
 [-mode {add|remove}]
 [-filter {signature|jumbo|oversize|undersize|invalidfcs|ipCheckSum|
 oos|length <0-4294967295>|prbs|pattern <pattern_sequence>}]
Arguments:
 -port_handle
 The handle of the port on which the data will be filtered.
 This argument is mandatory. You can specify "all" to apply
 this function to all ports (for example, -port_handle all).
 -mode
 Spirent Extension (for Spirent HLTAPI only).
 Adds or removes all filters specified with the -filter
 argument. Possible values are add and remove. The default
 value is add. The modes are described below:
 add - Adds the specified filters.
 remove - Removes the specified filters.
 Note: You can remove filters that you had not previously
 added without causing an error. For example, you can specify
 "-mode remove" to clear all filters from the capture. Also,
 when removing either the "length" or "pattern" filter, you
 do not have to specify the value of the length nor pattern
 as you do when defining that filter. For example, you can
 use "-mode remove -filter length" instead of "-mode remove
 -filter length 24".
 -filter
 Spirent Extension (for Spirent HLTAPI only).
 Defines the type of packet that will be captured. Only
 packets matching the filter will be captured. This argument
 is optional. If you do not define a filter, Spirent
 HLTAPI captures all data. You cannot specify more than
 one filter at a time. That is, you can only specify one
 filter in each sth::packet_config_filter function call.
 The filters you can define are described below:
 signature - frames with a signature tag
 oversize - oversize frames
 jumbo - jumbo frames
 undersize - undersize frames
 invalidfcs - frames with invalid FCS
 ipCheckSum - IP header checksum error
 oos - Out of sequence error (requires signature support)
 length <length> - frames matching a specified length, where
 <length> is a value from 0 to 4294967295.
Packet Capture Functions
725
 prbs - frame with PRBS (pseudorandom bit sequence) errors
 pattern <pattern_sequence> - frames matching a given
 pattern. A pattern_sequence is a list of patterns that
 are linked together by logical operators (AND | OR). A
 pattern is a list of the following:
 -frameconfig - a list of protocol data units (PDUs)
 linked by colons (for example, ethernetii:ipv4).
 -pdu <pdu>:[index] - a PDU such as ipv4 or arp (address
 resolution protocol). In addition to taking a PDU
 as a value, the -pdu option can also take an
 index. Index starts from 1 and increases the
 further inside the packet the PDU appears.
 Note: If you do not include an index value,
 Spirent HLTAPI filters on the first PDU of the
 given type regardless of how many PDUs of that
 type appear in the packet.
 -value - value that is to be filtered on (for example,
 192.1.1.1)
 -field - field in the specified PDU that the value
 exists in (for example, senderpaddr in arp PDU)

 -pattern_name - the name for the specified filter
 pattern. (for example, filter_1)
 The following pattern sequence can be used to filter
 out ARP requests from client 192.1.1.2 to the target
 192.1.1.1:
 {{-pattern_name filter_1 -frameconfig ethernetii:arp \
 -pdu arp -fieldsenderpaddr -value 192.1.1.1} AND \
 {-frameconfigethernetii:arp -pdu arp -field targetpaddr \
 -value 192.1.1.1}}
 If you are filtering on an inner VLAN, you must use an
 index to specify which VLAN to filter on (inner or
 outer), as in the following example:
 sth::packet_config_filter -port_handle port1 -pattern \
 {filter {{-pattern_name filter_2 \
 -frameconfig "ethernetii:vlan:vlan:ipv4" \
 -pdu "vlan:2" -value 1000 -field "id"}}}
 If you are filtering on an outer VLAN, you can use
 either one of the following examples:
 sth::packet_config_filter -port_handle port1 -pattern \
 {filter {{-pattern_name filter_3 \
 -frameconfig "ethernetii:vlan:vlan:ipv4" -pdu "vlan" \
 -value 500 -field "id"}}}
 sth::packet_config_filter -port_handle port1 -pattern \
 {filter {{-pattern_name filter_4 \
 -frameconfig "ethernetii:vlan:vlan:ipv4" -pdu "vlan:1" \
 -value 500 -field "id"}}}
 Note: The PDUs specified in the -frameconfig and -pdu arguments
 must be standard PDU names as listed in the Notes section below.
 (Spirent HLTAPI only recognizes the PDUs listed, for example,
 eoam_ccm, eoam_lbm, eoam_lbr, etc.) Likewise, the -field argument
 must be a valid string recognized by Spirent HLTAPI.
Arguments Unsupported by Save as HLTAPI:
 
Packet Capture Functions
726
 -filter <patternX> is currently not supported by Save as HLTAPI. To
 capture frames of a specific pattern defined by Spirent HLTAPI, you must
 configure it manually in the script generated using Save as HLTAPI.
Return Values:
 The sth::packet_config_filter function returns a keyed list
 using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::packet_config_filter function limits the type of data packets that
 are captured. Use the -filter argument to specify the type of data to
 include from the capture. The filter compares the network traffic to the
 specified criteria and copies data packets that meet the criteria to the
 buffer on the hardware until the sth::packet_stats function is called.
 Then the data is copied to the file specified in the sth::packet_stats
 function.
 You can specify only one filter from the list of available filters to
 determine which data packets you want to include in the capture. If you
 do not specify a filter, Spirent HLTAPI includes all data packets in
 the capture.
 A pattern filter is defined as follows:
 -filter {pattern {<pattern1>} <logical_operator1> {<pattern2>} \
 <logical_operator2>... <logical_operatorN-1> {<patternN>}
 <patternX> is defined as list of attributes: {-frameconfig <pdu_list> \
 -pdu <pdu> -field <field_name> -value <field_value> \
 -pattern_name <pattern_name >}
 Attribute Description Example
 frameconfig A list of colon separated PDUs*, -frameconfig
 <pdu1>:<pdu2>:...<pduN> "ethernetii:ipv4"
 pdu The PDU in which the value to -pdu "ipv4"
 filter on appears.
 field The name of the field on which to -field sourceaddr
 filter.
 value The value to filter on for the given -value 192.1.1.2
 field in the given PDU. The valid values
 here will depend on what the field is and
 in which PDU it is in.
 pattern_name The name for the specified filter -pattern_name filter_1
 pattern.
 *List of valid PDUs and fields appear in the Notes section for this
 function. Refer to the Spirent TestCenter Automation Object Reference
 guide's "Protocol Data Unit Objects Index" section for more information,
 such as valid values for the given fields.
 <logical_operator> is either "AND" or "OR".
 The pattern must be defined as a list containing the keyword "filter" and
 another list containing the pattern sequence itself. This pattern sequence
 list must contain at least one pattern (also in a list) and possibly others
 linked by either AND or OR. Even if only one pattern is defined, the
 pattern must be contained in a list within the pattern sequence.
 For example, to capture packets with source IP 192.1.1.2, pattern filter_1
 would look as follows:
 {-pattern_name filter_1 -frameconfig "ethernetii:ipv4" -pdu "ipv4" \
Packet Capture Functions
727
 -field "sourceaddr" -value 192.1.1.2}
 The Spirent HLTAPI command would look as follows:
 sth::packet_config_filter -port_handle $port_handle -mode "add" -filter \
 {pattern {{-pattern_name filter_1 -frameconfig "ethernetii:ipv4" \
 -pdu "ipv4" -field "sourceaddr" -value 192.1.1.2}}}
 Note the extra set of braces around the pattern. As another example, say we
 want to capture ARP packets where the sender's IP is 192.1.1.2, the target
 IP is 192.1.1.1, and the sender's MAC address is 1A:1A:1A:12:12:12. The
 HLT command would look as follows:
 sth::packet_config_filter -port_handle $port_handle -filter
 {pattern {{-frameconfig "ethernetii:arp" -pdu "arp" -field "senderpaddr" \
 -value 192.1.1.2} AND {-frameconfig "ethernetii:arp" -pdu "arp" \
 -field "targetpaddr" -value 192.1.1.1} AND {-frameconfig "ethernetii:arp" \
 -pdu "arp" -field "senderhwaddr" -value 1A:1A:1A:12:12:12}}}
 If the pattern filter is sent down to a port multiple times, each
 successive command overwrites the previous pattern.
Examples:
 To capture only data packets with a signature tag:
 sth::packet_config_filter -port_handle $portHandle \
 -mode add \
 -filter signature
 To capture only data packets with specific IP, MAC, Int, and Hex values in
 ARP PDU:
 sth::packet_config_filter -port_handle $portHandle \
 -filter {pattern { \
 {-frameconfig ethernetii:arp -pdu arp -field protocol \
 -value ABCD} AND \
 {-frameconfig ethernetii:arp -pdu arp -field operation \
 -value 4} AND \
 {-frameconfig ethernetii:arp -pdu arp -field senderpaddr \
 -value 192.1.1.2} AND \
 {-frameconfig ethernetii:arp -pdu arp -field senderhwaddr \
 -value AB:CD:EF:12:34:56}}}
 To capture ETHERNETII EOAM/CFM packets with specific maid.mdnf values in
 CCM PDU:
 sth::packet_config_filter -port_handle port1 \
 -mode add\
 -filter {pattern {\
 {-pattern_name filter999 -pdu eoam_ccm \
 -field maid.mdnf -value 1 \
 -frameconfig ethernetii:eoam_ccm }
 To remove a specified pattern filter:
 sth::packet_config_filter -port_handle $portHandle \
 -filter pattern -mode remove
 To capture ETHERNETII IPv4 packets with DSCP 0A and ECN 0:
 #The 8-bit binary form of DSCP 0A is 00001010, which is divided by Spirent
 HLTAPI into three fields, as illustrated below:
 ##############################################
 # Reserved | DSCP HIGH | DSCP LOW #
 # 0 0 | 0 0 1 | 0 1 0 #

 Spirent HLTAPI only supports ECN 0, so the pattern configuration ignores the
 Reserved field and joins DSCP HIGH and DSCP LOW with operator AND. The value of
 argument -value is the decimal equivalent of the binary bits in the
 corresponding field. In this case, DSCP HIGH is 1 and DSCP LOW is 2. 
Packet Capture Functions
728
 The filter pattern is:

 sth::packet_config_filter -port_handle port2 -mode add -filter \
 {pattern {{-frameconfig "ethernetii:vlan:ipv4:diffservbyte" \
 -pdu "diffservbyte" -value "1" -field "dscphigh"} AND \
 {-frameconfig "ethernetii:vlan:ipv4:diffservbyte"\
 -pdu "diffservbyte" -value "2" -field "dscplow"} }}
Sample output:
 {status 1}

Notes:
 PDUs and Fields
 PDU FIELD TYPE
 accookietag value none
 length none
 type none
 acnametag value none
 length none
 type none
 acsystemerrortag value none
 length none
 type none
 arp senderhwaddr mac
 ipaddr int
 senderpaddr ip
 hardware hex
 protocol hex
 ihaddr int
 operation int
 targethwaddr mac
 targetpaddr ip
 atm clp none
 vpi none
 vci none
 ciscohdlc protocoltype none
 control none
 address none
 controlflags reserved none
 dfbit none
 mfbit none
 custom pattern none

 eoam_ccm ccmintervalfield integer
 rdibit integer
 sequencenumber integer
 maepi integer
 opcode hex string
 firsttlvoffset hex string
 reserved bits
 maid.mdnf hex string
 maid.smaf hex string
 maid.smal hex string
 maid.sman hex string
 cfmheader.mdlevel integer
 cfmheader.version bits

 eoam_lbm lbtid integer
 flags integer
 opcode hex string
Packet Capture Functions
729
 firsttlvoffset hex string
 cfmheader.mdlevel integer
 cfmheader.version bits
 eoam_lbr lbtid integer
 opcode hex string
 firsttlvoffset hex string
 cfmheader.mdlevel integer
 cfmheader.version bits
 eoam_ltm flags integer
 opcode hex string
 firsttlvoffset hex string
 ltmtransid hex string
 ltmttl hex string
 origmac aa:bb:cc:dd:ee:ff
 targetmac aa:bb:cc:dd:ee:ff
 cfmheader.mdlevel integer
 cfmheader.version bits
 eoam_ltr opcode hex string
 firsttlvoffset hex string
 ltrtransid hex string
 ltrrelayaction hex string
 replyttl hex string
 fwdyes integer
 reserved bits
 termmep integer
 usefdbonly bits
 cfmheader.mdlevel integer
 cfmheader.version bits
 eoam_dmm flags integer
 opcode hex string
 firsttlvoffset hex string
 rxtimestampb hex string
 rxtimestampf hex string
 txtimestampb hex string
 txtimestampf hex string
 cfmheader.mdlevel integer
 cfmheader.version bits
 eoam_dmr flags integer
 opcode hex string
 firsttlvoffset hex string
 rxtimestampb hex string
 rxtimestampf hex string
 txtimestampb hex string
 txtimestampf hex string
 cfmheader.mdlevel integer
 cfmheader.version bits
 eoam_lmm flags integer
 opcode hex string
 firsttlvoffset hex string
 rxfcf hex string
 txfcb hex string
 txfcf hex string
 cfmheader.mdlevel integer
 cfmheader.version bits
 eoam_lmr flags integer
 opcode hex string
 firsttlvoffset hex string
 rxfcf hex string
 txfcb hex string
 txfcf hex string
 cfmheader.mdlevel integer
 cfmheader.version bits
 dhcpclientidhwtag clienthwa none
Packet Capture Functions
730
 idtype none
 optionlength none
 type none
 dhcpclientidnonhwtag idtype none
 optionlength none
 value none
 type none
 dhcpclientmsg clienthwpad none
 bootfilename none
 xid none
 serverhostname none
 messagetype none
 clientmac none
 hardwaretype none
 nextservaddr none
 haddrlen none
 hops none
 magiccookie none
 elapsed none
 relayagentaddr none
 bootpflags none
 clientaddr none
 youraddr none
 dhcpcustomoptiontag value none
 length none
 type none
 dhcphostnametag value none
 length none
 type none
 dhcpleasetimetag leasetime none
 length none
 type none
 dhcpmessagesizetag value none
 length none
 type none
 dhcpmessagetag value none
 length none
 type none
 dhcpmessagetypetag code none
 length none
 type none
 dhcpoptoverloadtag overload none
 length none
 type none
 dhcpreqaddrtag reqaddr none
 length none
 type none
 dhcpreqparamtag value none
 length none
 type none
 dhcpserveridtag reqaddr none
 length none
 type none
 dhcpservermsg clienthwpad none
 bootfilename none
 xid none
 serverhostname none
 messagetype none
Packet Capture Functions
731
 clientmac none
 hardwaretype none
 nextservaddr none
 haddrlen none
 hops none
 magiccookie none
 elapsed none
 relayagentaddr none
 bootpflags none
 clientaddr none
 youraddr none
 diffservbyte reserved none
 dscplow none
 dscphigh none
 encodedgroupipv4address masklen none
 reserved none
 zbit none
 bbit none
 encodingtype none
 addrfamily none
 address none
 encodedgroupipv6address masklen none
 reserved none
 zbit none
 bbit none
 encodingtype none
 addrfamily none
 address none
 encodedsourceipv4address encoding-type none
 wbit none
 address none
 rbit none
 masklen none
 addrfamily none
 reserved none
 sbit none
 encodedsourceipv6address encoding-type none
 wbit none
 address none
 rbit none
 masklen none
 addrfamily none
 reserved none
 sbit none
 encodedunicastipv4address encodingtype none
 addrfamily none
 address none
 encodedunicastipv6address encodingtype none
 addrfamily none
 address none
 endoflisttag length none
 type none
 endofoptionstag type none
 ethernet8022 dstmac none
 preamble none
 srcmac none
 length none
 ethernet8023raw dstmac none
 preamble none
 srcmac none
Packet Capture Functions
732
 length none
 ethernetii dstmac none
 preamble none
 srcmac none
 ethertype none
 ethernetsnap dstmac none
 preamble none
 srcmac none
 length none
 genericerrortag value none
 length none
 type none
 gre version none
 ckpresent none
 reserved0 none
 routingpresent none
 seqnumpresent none
 endpointv4 none
 protocoltype none
 endpointv6 none
 keypresent none
 grechecksum reserved none
 value none
 grekey value none
 greseqnum value none
 grouprecord mcastaddr none
 auxdatalen none
 numsource none
 recordtype none
 hdrauthselectcrypto authvalue1 none
 authtype none
 authvalue2 none
 hdrauthselectnone authvalue1 none
 authtype none
 authvalue2 none
 hdrauthselectpassword authvalue1 none
 authtype none
 authvalue2 none
 hdrauthselectuserdef authvalue1 none
 authtype none
 authvalue2 none
 hostuniqtag value none
 length none
 type none
 icmpdestunreach checksum none
 code none
 unused none
 type none
 icmpechoreply identifier none
 checksum none
 code none
 seqnum none
 data none
 type none
 icmpechorequest identifier none
Packet Capture Functions
733
 checksum none
 code none
 seqnum none
 data none
 type none
 icmpinforeply identifier none
 checksum none
 code none
 seqnum none
 type none
 icmpinforequest identifier none
 checksum none
 code none
 seqnum none
 type none
 icmpipdata data none
 icmpparameterproblem checksum none
 code none
 unused none
 pointer none
 type none
 icmpredirect checksum none
 code none
 gateway none
 type none
 icmpsourcequench checksum none
 code none
 unused none
 type none
 icmptimeexceeded checksum none
 code none
 unused none
 type none
 icmptimestampreply code none
 checksum none
 transmit none
 identifier none
 receive none
 seqnum none
 type none
 originate none
 icmptimestamprequest code none
 checksum none
 transmit none
 identifier none
 receive none
 seqnum none
 type none
 originate none
 icmpv6destunreach checksum none
 code none
 unused none
 type none
 icmpv6echoreply identifier none
 checksum none
 code none
 seqnum none
 data none
 type none
Packet Capture Functions
734
 icmpv6echorequest identifier none
 checksum none
 code none
 seqnum none
 data none
 type none
 icmpv6ipdata data none
 icmpv6packettoobig checksum none
 code none
 mtu none
 type none
 icmpv6parameterproblem checksum none
 code none
 pointer none
 type none
 icmpv6timeexceeded checksum none
 code none
 unused none
 type none
 igmpv1 groupaddress none
 checksum none
 unused none
 type none
 version none
 igmpv2 groupaddress none
 checksum none
 maxresptime none
 type none
 igmpv3query checksum none
 resv none
 numsource none
 groupaddress none
 sflag none
 qqic none
 maxresptime none
 qrv none
 type none
 igmpv3report numgrprecords none
 checksum none
 reserved none
 reserved2 none
 type none
 ip v6llprefixlength none
 v6sourceaddr none
 v6trafficclass none
 v6llhoplimit none
 ttl none
 sourceaddr none
 v6prefixlength none
 v6gateway none
 v6llsourceaddr none
 prefixlength none
 v6lltrafficclass none
 gateway none
 v6hoplimit none
 ipv4 checksum none
 ihl none
 version none
 destprefixlength none
 identification none
Packet Capture Functions
735
 protocol none
 destaddr none
 ttl none
 sourceaddr none
 totallength none
 fragoffset none
 prefixlength none
 gateway none
 ipv4addr value none
 ipv4optionaddressextension dest7thbyte none
 sourceipv7 none
 source7thbyte none
 destipv7 none
 length none
 type none
ipv4optionendofoptions type none
ipv4optionextendedsecurity addsecinfo none
 formatcode none
 length none
 type none
ipv4optionloosesourceroute pointer none
 length none
 type none
 ipv4optionmtuprobe mtu none
 length none
 type none
 ipv4optionmtureply mtu none
 length none
 type none
 ipv4optionnop type none
 ipv4optionrecordroute pointer none
 length none
 type none
 ipv4optionrouteralert routeralert none
 length none
 type none
 ipv4optionsecurity txcontrolcode none
 security none
 compartments none
 handlingrestrictions none
 length none
 type none
ipv4optionselectivebroadcast mode
 length none
 type none
ipv4optionstreamidentifier streamid none
 length none
 type none
ipv4optionstrictsourceroute pointer none
 length none
 type none
 ipv4optiontimestamp timestamp none
 overflow none
 pointer none
Packet Capture Functions
736
 flag none
 length none
 type none
 ipv4optiontraceroute originatorip none
 returnhopcnt none
 outboundhopcnt none
 idnumber none
 length none
 type none
 ipv6 payloadlength none
 version none
 hoplimit none
 destprefixlength none
 flowlabel none
 nextheader none
 destaddr none
 sourceaddr none
 trafficclass none
 prefixlength none
 gateway none
 ipv6addr value none
 ipv6authenticationheader authdata none
 spi none
 reserved none
 nxthdr none
 seqnum none
 length none
 ipv6customoption data none
 type none
 ipv6destinationheader nxthdr none
 length none
 ipv6encapsulationheader paddata none
 authdata none
 nxthdr none
 payloaddata none
 spi none
 seqnum none
 length none
 ipv6fragmentheader fragoffset none
 ident none
 reserved none
 nxthdr none
 m_flag none
 length none
 ipv6hopbyhopheader nxthdr none
 length none
 ipv6jumbopayloadoption data none
 length none
 type none
 ipv6pad1option pad1 none
 ipv6padnoption padding none
 padn none
 length none
 ipv6routeralertoption value none
 routeralert none
 length none
 ipv6routingheader reserved none
Packet Capture Functions
737
 nxthdr none
 segleft none
 routingtype none
 length none
 joinprunev4grouprecord numjoin none
 numprune none
 joinprunev6grouprecord numjoin none
 numprune none
 lacp partnerportpriority none
 actorsystemid none
 collectormaxdelay none
 partnerreserved none
 collectorinformation none
 partnersystemid none
 version none
 actorport none
 collectorreserved none
 collectorinformationlength none
 actorsystempriority none
 partnerport none
 partnerinformation none
 terminatorinformation none
 partnersystempriority none
 partnerinformationlength none
 subtype none
 terminatorreserved none
 terminatorinformationlength none
 partnerstate none
 partnerkey none
 actorinformation none
 actorportpriority none
 actorreserved none
 actorinformationlength none
 actorstate none
 actorkey none
 mldv1 mcastaddr none
 maxrespdelay none
 checksum none
 code none
 reserved none
 type none
 mldv2grouprecord mcastaddr none
 auxdatalen none
 numsource none
 recordtype none
 mldv2query code none
 checksum none
 resv none
 numsource none
 maxrespcode none
 groupaddress none
 sflag none
 qqic none
 reserved none
 qrv none
 type none
 mldv2report numgrprecords none
 checksum none
 unused none
 reserved2 none
 type none
 mpls dstmac none
 ttl none
Packet Capture Functions
738
 label none
 cos none
 sbit none
 mtu reserved none
 mtu none
 length none
 type none
 neighboradvertisement code none
 checksum none
 oflag none
 rflag none
 sflag none
 targetaddress none
 reserved none
 type none
 neighborsolicitation checksum none
 code none
 reserved none
 targetaddress none
 type none
 ospfv2asexternallsa forwardingaddress none
 externalroutetag none
 externalroutemetric none
 networkmask none
 ospfv2attachedrouter routerid none
 ospfv2dd interfacemtu none
 sequencenumber none
 ospfv2ddoptions msbit none
 ibit none
 reserved3 none
 reserved4 none
 mbit none
 reserved5 none
 reserved6 none
 reserved7 none
 ospfv2externallsaoptions reserved none
 ebit none
ospfv2externallsatosmetric externallsaroutetos none
 ebit none
 forwardingaddress none
 externallsaroutemetrics none
 ospfv2header checksum none
 areaid none
 routerid none
 packetlength none
 type none
 version none
 ospfv2hello backupdesignatedrouter none
 routerpriority none
 routerdeadinterval none
 designatedrouter none
 hellointerval none
 networkmask none
 ospfv2lsaheader linkstateid none
 lssequencenumber none
 advertisingrouter none
 lstype none
 lsaage none
 lsalength none
Packet Capture Functions
739
 lschecksum none
 ospfv2lsu numberoflsas none
 ospfv2neighbor neighborid none
 ospfv2networklsa networkmask none
 ospfv2options ebit none
 mcbit none
 reserved0 none
 eabit none
 npbit none
 reserved6 none
 dcbit none
 reserved7 none
 ospfv2requestedlsa linkstateid none
 advertisingrouter none
 lstypewide none
 ospfv2routerlsa numberoflinks none
 routerlsareserved1 none
 ospfv2routerlsalink linkid none
 linkdata none
 routerlsalinktype none
 routerlinkmetrics none
 numrouterlsatosmetrics none
 ospfv2routerlsaoptions ebit none
 bbit none
 reserved3 none
 reserved4 none
 reserved5 none
 vbit none
 reserved6 none
 reserved7 none
 ospfv2routerlsatosmetric routertoslinkmetrics none
 routerlsametricreserved none
 routerlsalinktype none
 ospfv2summaryasbrlsa summarylsareserved1 none
 summarylsametric none
 networkmask none
 ospfv2summarylsa summarylsareserved1 none
 summarylsametric none
 networkmask none
ospfv2summarylsatosmetric routertoslinkmetrics none
 summarylsametricreserved none
 pimhellodrpriority value none
 length none
 type none
 pimhellogenerationid value none
 length none
 type none
 pimhelloholdtime value none
 length none
 type none
 pimhellolanprunedelay tbit none
 overrideintervalvalue none
 prunedelayvalue none
 length none
 type none
Packet Capture Functions
740
 pimv4assert metric none
 metricpref none
 rbit none
 pimv4header checksum none
 reserved none
 type none
 version none
 pimv4helloaddresslist length none
 type none
 pimv4joinprune numgroups none
 reserved none
 holdtime none
 pimv4register reserved none
 borderbit none
 multicastpacket none
 nullbit none
 pimv6assert metric none
 metricpref none
 rbit none
 pimv6header checksum none
 reserved none
 type none
 version none
 pimv6helloaddresslist length none
 type none
 pimv6joinprune numgroups none
 reserved none
 holdtime none
 pimv6register reserved none
 borderbit none
 multicastpacket none
 nullbit none
 pos protocoltype none
 control none
 address none
 ppp protocoltype none
 pppoediscovery code none
 sessionid none
 length none
 type none
 version none
 pppoesession code none
 sessionid none
 length none
 type none
 version none
 prefixinformation lbit none
 preferredlifetime none
 reserved1 none
 reserved2 none
 prefixlen none
 prefix none
 validlifetime none
 abit none
 type none
 length none
Packet Capture Functions
741
 rarp enderhwaddr none
 ipaddr none
 senderpaddr none
 hardware none
 protocol none
 ihaddr none
 operation none
 targethwaddr none
 targetpaddr none
 redirect checksum none
 code none
 reserved none
 targetaddress none
 destaddress none
 type none
 redirectedheader reserved1 none
 reserved2 none
 length none
 type none
 relaysessionidtag value none
 length none
 type none
 rip1entry metric none
 ipaddr none
 reserved none
 afi none
 reserved1 none
 reserved2 none
 rip2entry routetag none
 metric none
 ipaddr none
 afi none
 subnetmask none
 nexthop none
 ripng command none
 reserved none
 version none
 ripngentry routetag none
 metric none
 ipaddr none
 prefixlen none
 ripv1 command none
 reserved none
 version none
 ripv2 command none
 reserved none
 version none
 routeradvertisement code none
 checksum none
 retranstime none
 routerlifetime none
 reserved2 none
 mbit none
 obit none
 reachabletime none
 curhoplimit none
 type none
 routersolicitation checksum none
 code none
Packet Capture Functions
742
 reserved none
 type none
 servicenameerrortag value none
 length none
 type none
 servicenametag value none
 length none
 type none
 snap rgcode none
 ethernettype none
 tcp checksum none
 finbit none
 ecnbit none
 urgbit none
 ackbit none
 acknum none
 offset none
 window none
 synbit none
 urgentptr none
 cwrbit none
 destport none
 sourceport none
 rstbit none
 reserved none
 seqnum none
 pshbit none
 tosbyte tbit none
 dbit none
 reserved none
 rbit none
 precedence none
 udp checksum none
 destport none
 length none
 sourceport none
 vendorspecifictag value none
 length none
 type none
 vlan pri none
 id none
 cfi none
 type none
End of Procedure Header
sth::packet_control
Name:
 sth::packet_control
Purpose:
 Starts or stops packet capturing.
Synopsis:
 sth::packet_control
 -port_handle <handle>
Packet Capture Functions
743
 -action {start|stop}
Arguments:
 -port_handle
 Identifies the handle of the port on which to start or stop
 capturing data packets. This argument is mandatory. You can
 specify "all" to apply this function to all ports (for
 example, -port_handle all).
 -action
 Specifies the action to perform. Possible values are start
 and stop, This argument is mandatory. The actions are
 described below:
 start - Start capturing packets.
 stop - Stop capturing packets.
Return Values:
 The sth::packet_control function returns a keyed list using the
 following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::packet_control function controls when Spirent HLTAPI starts
 and when it stops capturing data packets.
 The type of data captured is provided by the sth::packet_config_buffers,
 sth::packet_config_triggers, and sth::packet_config_filter functions.
 If these functions have not been defined correctly, Spirent HLTAPI
 cannot start packet capturing and will return an error message.
Examples:
 To start data capturing on all ports:
 sth::packet_control -port_handle all -action start
 To start data capturing on port 1:
 sth::packet_control -port_handle port1 -action start
 To stop data capturing on port 1:
 sth::packet_control -port_handle port1 -action stop
Sample output:
 {status 1}
Notes:
 None.
End of Procedure Header
sth::packet_info
Name:
 sth::packet_info
Packet Capture Functions
744
Purpose:
 Returns information about the status of the packet capture.
Synopsis:
 sth::packet_info
 -port_handle <handle>
 -action status
Arguments:
 -port_handle
 The handle of the port(s) for which you want information.
 This argument is mandatory.
 -action
 Specifies the kind of information you want to receive. This
 argument is mandatory. The only possible value at this time
 is status, which returns a value of "stopped 1" if packet
 capturing has stopped or "stopped 0" if it has not.
Return Values:
 The sth::packet_info function returns a keyed list using the
 following keys (with corresponding data):
 stopped Packet capturing has stopped (1) or packet capturing has not
 stopped (0)
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::packet_info function queries the device for the status of the
 packet capture. You must specify both the -port_handle and the -action to
 be taken.
Examples:
 To retrieve statistical information about all ports:
 sth::packet_info -port_handle all -action status
 To retrieve statistical information about a specific port:
 sth::packet_info -port_handle $portHandle -action status
Sample output:
 {status 1} {stopped 1}
Notes:
 None.
End of Procedure Header
sth::packet_stats
Name:
 sth::packet_stats
Purpose:
 Returns statistical information about each packet associated with the specified
 port(s). Statistics include the connection status and number and type of messages
 sent and received from the specified port. 
Packet Capture Functions
745
Synopsis:
 sth::packet_stats
 -port_handle <handle>
 -action filtered
 [-stop {0|1}]
 [-format {pcap | var}]
 [-filename <filename>]
Arguments:
 -port_handle
 The handle of the port on which to return packet capture
 information. This argument is mandatory. You can specify
 "all" to apply this function to all ports (for example,
 -port_handle all).
 -action
 Specifies the action to perform. The only option supported
 in this release is "filtered". This argument is mandatory
 and returns all filtered information, based on the
 filters specified with the sth::packet_config_filter
 function.
 -stop
 Either stops capturing data or does not stop capturing data
 while packets are being saved to a file. This argument
 is equivalent to "sth::packet_control -action stop" except
 incorporated into the info command to reduce the amount of
 commands issued. Valid values are 0 and 1. If you specify 0,
 nothing happens. Use 0 when you do not want to remove this
 option but want to test returning the information without
 stopping. If you specify 1, Spirent HLTAPI stops
 capturing data and returns the information requested with
 the -action argument. The default is 1.
 You must stop data capturing on the port before packets can
 be saved. Otherwise, packets being received while other
 packets are being saved will be lost. Data capture
 automatically restarts once the save-to-file command
 finishes.
 -format
 Specifies the format in which data is returned. Possible values
 are described below:
 pcap - Returns the data in Ethereal format (pcap).

 var - Returns a keyed list with both aggregate and frame statistics.
 This option returns a maximum of 20 frames in the capture
 buffer. If the capture buffer contains more than 20 frames,
 the first 20 frames will be returned.

 The default value is pcap.
 -filename
 Provide a file name to which to save the captured packets.
 Specify the file format with the -format argument (for
 example, "-format pcap"). The default file name and format
 is Spirent_TestCenter-<timestamp>-<port_handle>.pcap
 (for example, Spirent_TestCenter-1179466942-port1.pcap).
Return Values:
 The sth::packet_stats function returns a keyed list using the
 following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 result Information about the captured packet. This key is not supported
 in Spirent HLTAPI.
Packet Capture Functions
746
Description:
 The sth::packet_stats function saves the timestamped data packets in a
 specified format. If the data capture is not set to "stop" (that is, -stop is set
 to 0) while captured packets are being saved from the hardware device, the
 data capture procedure will restart once the save-to-file command finishes.
 This method is not recommended because you may lose packets being
 received at the same time the captured packets are being saved. We
 recommend that you stop the data capture process on the port before saving
 packets.
Examples:
 The following example returns statistical information for all ports:
 sth::packet_stats \
 -port_handle all \
 -stop 1 \
 -action filtered \
 -format pcap \
 -filename spirent-2305062301-104.pcap
Notes:
 None.
End of Procedure Header
PCEP Functions
747
PCEP Functions
Functions:
sth::emulation_pcep_config
sth::emulation_pcep_control

sth::emulation_pcep_config
Name:
 sth::emulation_pcep_config
Purpose:
 Enables emulated PCEP devices, configures or modifies PCEP LSPs or the LSP
 objects.

 Path Computation Element Protocol (PCEP) is used for communications between a
 Path Computation Client (PCC) and a Path Computation Element (PCE), or between
 two PCEs. Such interactions include path computation requests and path
 computation replies, as well as notifications of specific states related to the
 use of a PCE in the context of Multiprotocol Label Switching (MPLS) and
 Generalized MPLS (GMPLS) Traffic Engineering.

 Stateful PCE is also supported to provide mechanisms to effect LSP
 state synchronization between PCCs and PCEs, delegation of control
 over LSPs to PCEs, and PCE control of timing and sequence of path
 computations within and across PCEP sessions.

 See RFC 5440 and PCEP Extensions for Stateful PCE for more information.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_pcep_config
 -mode {enable | add | modify | delete}
 PCEP Sessions Parameters
 [-pcep_device_role {PCC|PCE}]
 [-ip_version {IPV4|IPV6}]
 [-peer_ipv4_addr <a.b.c.d>]
 [-peer_ipv4_addr_step <a.b.c.d>]
 [-peer_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-peer_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-pcep_session_ip_address {INTERFACE_IP|ROUTER_ID}]
 [-is_session_initiator {true | false}]
 [-is_fixed_src_port {true | false}]
 [-keep_alive_timer <0 - 65535>]
 [-dead_timer <0 - 65535>]
 [-enable_pc_results {true | false}]
 [-authentication {NONE | MD5}]
 [-password <string> ]
 [-enable_init_lsp {true | false}]
 [-enable_segment_routing {true | false}]
 [-max_sid_depth < 0-255> ]
 PCEP Global Options
 [-session_out_standing <1-65535>]
 [-session_retry_count <1-65535> ]
 [-session_retry_interval <1-300>]
 [-lsp_per_message <1-2000>]
 [-tcp_interval <1-1000> ]
 [-packet_align_to_mtu {true | false}]

 PCC LSP Parameters
 [-pcc_lspcount <1-65535>]
 [-pcc_characteristic {Report|ALLOW_PCE_INIT|ENABLE_SYNCHRONIZATION
PCEP Functions
748
 |ENABLE_REQUEST}]
 [-enable_delegate {true | false}]
 [-pcc_src_ipv4_addr <a.b.c.d> ]
 [-pcc_src_ipv4_addr_step <a.b.c.d>]
 [-pcc_dst_ipv4_addr <a.b.c.d> ]
 [-pcc_dst_ipv4_addr_step <a.b.c.d>]
 [-pcc_src_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-pcc_src_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-pcc_dst_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-pcc_dst_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]

 PCE LSP Parameters
 [-pce_lspcount <1-65535>]
 [-pce_symbolic_name <string>]
 [-pce_characteristic {ENABLE_UPDATE|ENABLE_INIT|ENABLE_REPLY}]
 [-enable_update {true | false}]
 [-pce_src_ipv4_addr <a.b.c.d> ]
 [-pce_src_ipv4_addr_step <a.b.c.d>]
 [-pce_dst_ipv4_addr <a.b.c.d> ]
 [-pce_dst_ipv4_addr_step <a.b.c.d>]
 [-pce_src_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-pce_src_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-pce_dst_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-pce_dst_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-enable_nopath {true | false}]

 PCE SRP Info
 [-srp_auto_gen_id {true | false}]
 [-srp_id <0-4294967295> ]
 [-srp_id_step <0-4294967295> ]

 PCC LSP Info
 [-lsp_auto_gen_id {true | false}]
 [-plsp_id <0-1048575>]
 [-plsp_id_step <0-4294967295> ]
 [-aflag {true | false}]
 [-init_lsp_state {DOWN|UP|ACTIVE|GOINGDOWN|GOINGUP|RESERVED1
 |RESERVED2|RESERVED3}]
 [-ipv4_tunnel_addr <a.b.c.d> ]
 [-ipv4_tunnel_addr_step <a.b.c.d> ]
 [-ipv6_tunnel_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-ipv6_tunnel_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-lsp_id <0-65535>]
 [-lsp_id_step <0-65535>]
 [-tunnel_id <0-65535>]
 [-tunnel_id_step <0-65535> ]
 [-ipv4_ex_tunnel_id <a.b.c.d>]
 [-ipv4_ex_tunnel_id_step <a.b.c.d>]
 [-ipv6_ex_tunnel_id <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_ex_tunnel_id_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv4_tunnel_end_addr <a.b.c.d> ]
 [-ipv4_tunnel_end_addr_step <a.b.c.d> ]
 [-ipv6_tunnel_end_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_tunnel_end_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]

 PCC RP Object
 [-rp_pflag {true | false}]
 [-rp_iflag {true | false}]
 [-rp_auto_gen_id {true | false}]
 [-requestid <0-4294967295>]
 [-requestid_step <0-4294967295>]
 [-priority <0-7>]
 [-rp_flags {PCEP_RP_FLAG_BIDIRECTIONAL|PCEP_RP_FLAG_STRICT_LOOSE| 0}]

 PCC Endpoint Object

 [-endpoint_pflag {true | false}]
 [-endpoint_iflag {true | false}]
 [-ni_value {NO_SATISFYING_PATH|PCE_CHAIN_BROKEN}]
 [-nopath_cflag {true | false}]
 [-nopath_included {RECEIVED|SUGGESTED}]
PCEP Functions
749
 [-nopath_vector_tlv_flag {NONE|PCE_UNAVAILABLE|UNKNOWN_DESTINATION
 |UNKNOWN_SOURCE}]
 PCEP Custom TLV
 [-tlv_type <0-0x3FFF>]
 [-tlv_value <0x0-0xff> ]
 [-customtlv_handle <custom tlv handle>]
 PCC/PCE Command Edit Options
 [-included_ero_handle <ero_handle>]
 [-included_rro_handle <rro_handle>]
 [-included_bw_handle <bw_object_handle>]
 [-included_metric_handle <metric_object_handle>]
 [-included_lspa_handle <lspa_object_handle>]
 [-include_ero {true | false}]
 [-include_rro {true | false}]
 [-include_bw {true | false}]
 [-include_metric {true | false}]
 [-include_lspa {true | false}]
 [-include_lsp {true | false}]
 [-include_srp {true | false}]
 [-include_rp {true | false}]
 [-include_endpoints {true | false}]
 PCC ERO Object
 [-ipv4_ero_pflag {true | false}]
 [-ipv4_ero_iflag {true | false}]
 [-ipv6_ero_pflag {true | false}]
 [-ipv6_ero_iflag {true | false}]

 PCC/PCE ERO Update Object
 [-ipv4_update_ero_pflag {true | false}]
 [-ipv4_update_ero_iflag {true | false}]
 [-ipv6_update_ero_pflag {true | false}]
 [-ipv6_update_ero_iflag {true | false}]

 PCC/PCE Explicit Parameters for ERO/ERO Update Object
 [-ipv4_explicit_start_ip_list <a.b.c.d>]
 [-ipv4_explicit_prefix_length <0-255>]
 [-ipv4_explicit_route_type {PCEP_ERO_ROUTE_TYPE_LOOSE|
 PCEP_ERO_ROUTE_TYPE_STRICT}]
 [-ipv6_explicit_start_ip_list<aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-ipv6_explicit_prefix_length <type:u8> ]
 [-ipv6_explicit_route_type {PCEP_ERO_ROUTE_TYPE_LOOSE|
 PCEP_ERO_ROUTE_TYPE_STRICT}]

 SR ERO Subobject
 [-sr_ero_pflag {true | false}]
 [-sr_ero_iflag {true | false}]
 [-sr_route_type {PCEP_ERO_ROUTE_TYPE_LOOSE|PCEP_ERO_ROUTE_TYPE_STRICT}]
 [-explicit_sid_type {IPV4_NODE_ID|IPV6_NODE_ID|IPV4_ADJACENCY|
 IPV6_ADJACENCY|UNNUMBERED_ADJACENCY_IPV4_NODE_IDS}]
 [-explicit_mflag {true | false}]
 [-explicit_cflag {true | false}]
 [-explicit_sflag {true | false}]
 [-explicit_fflag {true | false}]
 [-explicit_sid_label <16-1048575>]
 [-explicit_sid_tc <0-7>]
 [-explicit_sid_sflag {true | false}]
 [-explicit_sid_ttl <0-255> ]
 [-explicit_ipv4_address <a.b.c.d> ]
 [-explicit_ipv6_address <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-explicit_local_ipv4_address <a.b.c.d> ]
 [-explicit_remote_ipv4_address <a.b.c.d> ]
 [-explicit_local_ipv6_address <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-explicit_remote_ipv6_address <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-explicit_local_node_id <0-4294967295> ]
 [-explicit_local_interface_id <0-4294967295> ]
 [-explicit_remote_node_id <0-4294967295> ]
 [-explicit_remote_interface_id <0-4294967295> ]
 
PCEP Functions
750
 PCC RRO Object
 [-rro_flags {PCEP_RRO_FLAG_LOCAL_PROTECTION_AVAILABLE|
 PCEP_RRO_FLAG_LOCAL_PROTECTION_IN_USE
 |PCEP_RRO_FLAG_BANDWIDTH_PROTECTION|
 PCEP_RRO_FLAG_NODE_PROTECTION|PCEP_RRO_FLAG_NODE_ID}]
 [-ipv4_rro_pflag {true | false}]
 [-ipv6_rro_pflag {true | false}]
 [-ipv4_rro_iflag {true | false}]
 [-ipv6_rro_iflag {true | false}]
 PCC Reported Parameters for RRO Object
 [-ipv4_reported_start_ip_list<a.b.c.d> ]
 [-ipv4_reported_prefix_length <0-255> ]
 [-ipv6_reported_start_ip_list<aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-ipv6_reported_prefix_length <0-255>]
 PCC SR RRO Subobject
 [-sr_rro_pflag {true | false}]
 [-sr_rro_iflag {true | false}]
 [-reported_sid_type {IPV4_NODE_ID|IPV6_NODE_ID|IPV4_ADJACENCY|
 IPV6_ADJACENCY|UNNUMBERED_ADJACENCY_IPV4_NODE_IDS}]
 [-reported_sflag {true | false}]
 [-reported_fflag {true | false}]
 [-reported_sid_label <16-1048575>]
 [-reported_sid_tc <0-7> ]
 [-reported_sid_s_flag {true | false}]
 [-reported_sid_ttl <0-255> ]
 [-reported_ipv4_address <a.b.c.d>]
 [-reported_ipv6_address <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-reported_local_ipv4_address <a.b.c.d> ]
 [-reported_remote_ipv4_address <a.b.c.d> ]
 [-reported_local_ipv6_address <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-reported_remote_ipv6_address <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh> ]
 [-reported_local_node_id <0-4294967295> ]
 [-reported_local_interface_id <0-4294967295> ]
 [-reported_remote_node_id <0-4294967295>]
 [-reported_remote_interface_id <0-4294967295> ]
 PCC BW Object
 [-bw_pflag {true | false}]
 [-bw_iflag {true | false}]
 [-bw_bandwidth <0-4294967295> ]

 PCE BW Object
 [-bw_update_pflag {true | false}]
 [-bw_update_iflag {true | false}]
 [-bw_update_bandwidth <0-4294967295> ]

 PCC/PCE Metric Object
 [-metric_cflag {true | false}]
 [-metric_bflag {true | false}]
 [-metric_type {IGP_METRIC|TE_METRIC|HOP_COUNTS}]
 [-metric_value <0-4294967295> ]

 [-metriclist_pflag {true | false}]
 [-metriclist_iflag {true | false}]
 [-metriclist_update_pflag {true | false}]
 [-metriclist_update_iflag {true | false}]
 LSPA Object
 [-lspa_pflag {true | false}]
 [-lspa_iflag {true | false}]
 [-lspa_exclude_any <0-4294967295> ]
 [-lspa_include_any <0-4294967295> ]
 [-lspa_include_all <0-4294967295> ]
 [-lspa_setup_prio <0-7>]
 [-lspa_holding_prio <0-7>]
 [-lspa_lflag {true | false}]
 [-lspa_affinities_flag {true | false}]
 LSPA Update Object
 [-lspa_update_pflag {true | false}]
PCEP Functions
751
 [-lspa_update_iflag {true | false}]
 [-lspa_update_exclude_any <0-4294967295> ]
 [-lspa_update_include_any <0-4294967295> ]
 [-lspa_update_include_all <0-4294967295> ]
 [-lspa_update_setup_prio <0-7> ]
 [_lspa_update_holding_prio <0-7>]
 [-lspa_update_lflag {true | false}]
 [-lspa_update_affinities_flag {true | false}]


Arguments:
 -modify
 Specifies the action to perform on the test port. This argument is
 mandatory. Possible values are enable, add, and modify.

 enable Enables the emulated PCEP devices on specified raw devices

 add Adds PCEP LSPs

 modify Modifies the PECP device or LSP objects configurations based
 on the handles provided. See Return Values for more
 information on the handles returned.

 delete Deletes the specified LSP

 PCEP Sessions Parameters
 Use this group of arguments to configure PCEP sessions.

 -pcep_device_role
 Specifies the role of the device to create. Possible values are
 PCC and PCE.
 PCE Path Computation Element, an entity (component, application,
 or network node) that is capable of computing a network
 path or route based on a network graph and applying
 computational constraints.

 PCC Path Computation Client, any client application requesting
 a path computation to be performed by a Path Computation
 Element.

 The default value is PCE.

 -ip_version
 Specifies the IP version. Possible values are IPv4 and IPv6. The
 default value is IPv4.

 -peer_ipv4_addr
 IPv4 address of the PCE peer for the session

 -peer_ipv4_addr_step
 Specifies the step value to generate subsequent IPv4 addresses
 for PCE devices on the same port. The value must be in IPv4
 format. The default is 0.0.0.1.

 -peer_ipv6_addr
 IPv6 address of the PCE peer for the session

 -peer_ipv6_addr_step
 Specifies the step value to generate subsequent IPv6 addresses
 for PCE devices on the same port. The value must be in IPv6
 format. The default is 0000::1.

 -pcep_session_ip_address
 Specifies the source of the PCE session address. Possible values
 are INTERFACE_IP and ROUTER_ID. The default is INTERFACE_IP.

 -is_session_initiator
 Determines whether the emulated PCE will attempt to initiate the
 session. Possible values are true and false.
 
PCEP Functions
752
 true Emulated PCE initiates the session
 false Emulated PCE listens for the peer to initiate the session

 When both sides initiate a session, the one with the higher IP
 address takes priority. The default value is true.

 -is_fixed_src_port
 Determines whether to use the registered TCP port 4189 for PCEP
 sessions. Possible values are true and false. If it is set
 to true, Spirent HLTAPI will use the registered TCP port 4189 for
 PCEP sessions. The default value is false.

 -keep_alive_timer
 Number of seconds between transmissions of KEEPALIVE messages by
 the emulated PCE, in the absence of transmission of any other PCE
 packets. Possible values range from 0 to 65535. The default
 value is 30.

 -dead_timer
 Number of seconds without traffic the peer should wait before
 declaring the session dead. Possible values range from 0 to
 65535. The default value is 120.

 -enable_pc_results
 Enables/disables displaying the details of the sending LSPs.
 Possible values are true (enable) and false (disable). The
 default value is false.

 -authentication
 Specifies the type of authentication to be used. Possible values
 are NONE and MD5.
 NONE No authentication
 MD5 Use the MD5 key ID for authentication

 The default value is NONE.

 -password
 Specifies the password used in the authentication. The value must
 be in alphanumeric format. This argument is only valid when
 -authentication is set to MD5. The default value is Spirent.
 -enable_init_lsp
 Enables/disables I-flag in the Stateful Capability TLV. Possible
 values are true (enable) and false (disable). The default value is
 true.

 -enable_segment_routing
 Enables/disables the Segment Routing extension to PCEP. If it is
 set to true, the SR PCE Capability TLV is included in the OPEN
 message and the PATH-SETUP-TYPE TLV is included in the Stateful
 PCE Request Parameters (SRP) object.
 -max_sid_depth
 Maximum number of nested segment IDs. This argument is only valid
 when -enable_segment_routing is set to true. Possible values
 range from 0 to 255. The default value is 0. When this value is
 changed, upon applying, the PCEP session is closed and
 re-established.

 PCEP Global Options
 Use this group of arguments to configure PCEP global options.

 -session_out_standing
 Maximum number of sessions simultaneously started by the Spirent
 TestCenter port. Possible values range from 1 to 65535. The
 default value is 100.

 -session_retry_count
 Maximum number of times the system tries to establish a TCP
 connection using the PCEP-registered TCP port before going back
PCEP Functions
753
 to the IDLE state. Possible values range from 1 to 65535. The
 default value is 100.

 -session_retry_interval
 Number of seconds to wait before resending a TCP message.
 Possible values range from 1 to 300. The default value is 5.

 -lsp_per_message
 Maximum number of Label Switched Paths (LSPs) in one TCP message.
 Possible values range from 1 to 2000. The default value is 100.

 -tcp_interval
 Number of seconds to wait before sending another LSP TCP message.
 Possible values range from 1 to 1000. The default value is 500.

 -packet_align_to_mtu
 Determines whether to combine as many LSPs as will fit in the
 MTU. Possible values are true and false. The default value is
 false.

 The following examples configure and enable PCEP (PCE and PCC) on
 the created raw devices:

 set dev_handle1 [keylget device_ret1 handle]
 set dev_handle2 [keylget device_ret2 handle]

 set device_ret_pcep1 [::sth::emulation_pcep_config \
 -mode enable \
 -handle $dev_handle1 \
 -pcep_device_role PCE \
 -state NONE \
 -pcep_mode ACTIVE \
 -ip_version IPV4 \
 -peer_ipv4_addr null \
 -peer_ipv4_addr_step 0.0.0.1 \
 -peer_ipv6_addr null \
 -peer_ipv6_addr_step 0000::1 \
 -pcep_session_ip_address INTERFACE_IP \
 -is_session_initiator true \
 -is_fixed_src_port false \
 -keep_alive_timer 40 \
 -dead_timer 150 \
 -enable_pc_results false \
 -authentication MD5 \
 -password Spirent \
 -enable_init_lsp true \
 -enable_segment_routing true \
 -session_out_standing 500 \
 -session_retry_count 50 \
 -session_retry_interval 50 \
 -lsp_per_message 500 \
 -tcp_interval 600 \
 -packet_align_to_mtu true \
 ]

 Output:
 # This will return a PCE handle.

 {pcep_handle pcepprotocolconfig1} {status 1}

 keylget device_ret_pcep1 pcep_handle pcep_hnd1

 # To modify the PCE configurations:

 set device_ret_pcep1 [::sth::emulation_pcep_config \
 -mode modify \
 -handle $pcep_hnd1 \
 -pcep_session_ip_address ROUTER_ID \
 -keep_alive_timer 40 \
 -dead_timer 150 \
 -enable_pc_results false \
PCEP Functions
754
 -authentication NONE \
 -enable_init_lsp false \
 -enable_segment_routing false\
 -session_out_standing 500 \
 -session_retry_count 50 \
 -session_retry_interval 50 \
 -lsp_per_message 500 \
 -tcp_interval 600 \
 -packet_align_to_mtu false \
 ]

 # To enable the PCC device:
 set device_ret_pcep2 [::sth::emulation_pcep_config \
 -mode enable \
 -handle $dev_handle2 \
 -pcep_device_role PCC \
 -state NONE \
 -pcep_mode ACTIVE \
 -ip_version IPV4 \
 -peer_ipv4_addr null \
 -peer_ipv4_addr_step 0.0.0.1 \
 -peer_ipv6_addr null \
 -peer_ipv6_addr_step 0000::1 \
 -pcep_session_ip_address INTERFACE_IP \
 -is_session_initiator true \
 -is_fixed_src_port false \
 -keep_alive_timer 30 \
 -dead_timer 130 \
 -enable_pc_results false \
 -authentication MD5 \
 -password Spirent \
 -sync_timer 60 \
 -enable_init_lsp true \
 -enable_segment_routing true \
 -max_sid_depth 1 \
 -session_out_standing 400 \
 -session_retry_count 20 \
 -session_retry_interval 20 \
 -lsp_per_message 200 \
 -tcp_interval 300 \
 -packet_align_to_mtu true \
 ]

 Output:
 # This will return a PCC handle (pcep_handle).
 {pcep_handle pcepprotocolconfig2} {status 1}

 keylget device_ret_pcep2 pcep_handle pcep_hnd2
 PCC LSP
 Use this group of arguments to configure PCC Label Switched Paths (LSPs). Multiple
 blocks of LSPs can be configured in the PCC LSP configuration.
 -pcc_lspcount
 Number of PCC LSPs to create. Possible values range from 1 to
 65535. The default value is 1.

 -pcc_symbolic_name
 Specifies a symbolic name or a wildcard pattern for creating a
 list of symbolic names. The value must be a string of 1 to 32
 characters. The default value is PLSP_@b.

 -pcc_characteristic
 Specifies the method to initiate a PCC LSP. Possible values are
 described below:

 Report The LSPs are reserved at startup but are
 not involved in synchronization

 ALLOW_PCE_INIT The LSPs are not reserved, but will
PCEP Functions
755
 wait for the PCE to initiate them at
 startup

 ENABLE_SYNCHRONIZATION The LSPs are reserved at startup and
 participate in synchronization after the
 session is established

 ENABLE_REQUEST The LSPs are not reserved at startup, but
 the PCE participates in synchronization
 after the session is established and can
 delegate LSPs via the report message

 The default value is Report.

 -enable_delegate
 Determines whether to automatically delegate control of the LSP
 to the PCE when the related session is up. This argument is
 available when -pcc_characteristic is set to Report,
 ENABLE_SYNCHRONIZATION, or ENABLE_REQUEST. Possible values are
 true and false. The default is true.


 -pcc_src_ipv4_addr
 Specifies the starting IPv4 source address for the
 PCC. The default value is 192.85.1.1.

 -pcc_src_ipv4_addr_step
 Specifies the step value to create additional IPv4 source
 addresses for PCCs. The value must be in IPv4 format. The default
 is 0.0.0.1.

 -pcc_dst_ipv4_addr
 Specifies the starting IPv4 destination address for
 the PCC. The default value is 193.85.1.1.

 -pcc_dst_ipv4_addr_step
 Specifies the step value to create additional IPv4 destination
 addresses for PCCs. The value must be in IPv4 format. The default
 is 0.0.0.1.

 -pcc_src_ipv6_addr
 Specifies the starting IPv6 source address for the
 PCC. The default value is 2000::1.


 -pcc_src_ipv6_addr_step
 Specifies the step value to create additional IPv6 source
 addresses for PCCs. The value must be in IPv6 format. The default
 is ::1.

 -pcc_dst_ipv6_addr
 Specifies the starting IPv6 destination address for
 the PCC. The default value is 2000::1.

 -pcc_dst_ipv6_addr_step
 Specifies the step value to create additional IPv6 destination
 addresses for PCCs. The value must be in IPv6 format. The default
 is ::1.
 PCE LSP
 Use this group of arguments to configure PCE LSPs. Multiple blocks of LSPs can be
 configured in the PCE LSP configuration.

 -pce_lspcount
 Number of PCE LSPs to create. Possible values range from 1 to
 65535. The default value is 1.

 -pce_symbolic_name
 Specifies a symbolic name or a wildcard pattern to create a list
 of symbolic names for PCEs. The value must be a string of 1 to 32
 characters. The default value is PLSP_@b.
PCEP Functions
756

 -pce_characteristic
 Specifies the method to initiate a PCC LSP. Possible values are
 described below:
 ENABLE_UPDATE LSPs are not reserved at startup, but wait for
 the PCC to delegate them

 ENABLE_INIT LSPs are not reserved. After a session is
 established and the synchronization completes,
 the PCE can initiate LSPs by issuing a
 PCInitiate message.

 ENABLE_REPL LSPs are not reserved. After a session is
 established and the synchronization completes,
 the PCC can request LSPs.

 The default value is ENABLE_UPDATE.

 -enable_update
 Determines whether to automatically update control of the LSP
 to the PCE when the related session is up. Possible values are
 true and false. The default is true.

 -pce_src_ipv4_addr
 Specifies the starting IPv4 source address for the PCE. The
 default value is 192.85.1.1.

 -pce_src_ipv4_addr_step
 Specifies the step value to create additional IPv4 source
 addresses for PCEs. The value must be in IPv4 format. The default
 is 0.0.0.1.

 -pce_dst_ipv4_addr
 Specifies the starting IPv4 destination address for the PCE. The
 default value is 193.85.1.1.

 -pce_dst_ipv4_addr_step
 Specifies the step value to create additional IPv4 destination
 addresses for PCEs. The value must be in IPv4 format. The default
 is 0.0.0.1.

 -pce_src_ipv6_addr
 Specifies the starting IPv6 source address for the PCE. The
 default value is 2000::1.

 -pce_src_ipv6_addr_step
 Specifies the step value to create additional IPv6 source
 addresses for PCEs. The value must be in IPv6 format. The default
 is ::1.

 -pce_dst_ipv6_addr
 Specifies the starting IPv6 destination address for the PCE. The
 default value is 2001::1.

 -pce_dst_ipv6_addr_step
 Specifies the step value to create additional IPv6 destination
 addresses for PCEs. The value must be in IPv6 format. The default
 is ::1.

 -enable_no_path
 Determines whether to specify possible reasons for why no path
 could be found. This argument is available when
 -pce_characteristic is set to ENABLE_REPLY. Possible values are
 true and false. The default is false.
 The following example adds an LSP on the PCE device specified by the PCE
 handle:
 set pce_lsp [::sth::emulation_pcep_config \
 -mode add \
 -handle $pcep_hnd1 \ # PCE handle
PCEP Functions
757
 -pce_lspcount 1 \
 -pce_symbolic_name PLSP_@b \
 -pce_characteristic ENABLE_REPLY \
 -enable_update true \
 -pce_src_ipv4_addr 1.1.1.1 \
 -pce_src_ipv4_addr_step 0.0.0.1 \
 -pce_dst_ipv4_addr 2.2.2.2 \
 -pce_dst_ipv4_addr_step 0.0.0.1 \
 -enable_no_path false \
 ]
 Output:
 # This will return the PCE LSP handle, Stateful PCE Request Parameters
 (SRP) handle, and Command Edit handles.

 {srp_hnd pcepsrpobject1} {pce_lsp_hnd pcelspconfig1} {startcommand_hnd
 {startdeviceupdatecommandconfig1 startdevicereplycommandconfig1}} {status 1}
 keylget pce_lsp pce_lsp_hnd lsp_handle_pce
 # The following example modifies the LSP configuration specified
 by lsp_handle_pce:

 set pce_lsp [::sth::emulation_pcep_config \
 -mode modify \
 -handle $lsp_handle_pce \
 -pce_lspcount 1 \
 -pce_symbolic_name PLSP_@b22 \
 -enable_update false \
 -pce_src_ipv4_addr 4.4.4.4 \
 -pce_src_ipv4_addr_step 0.0.0.1 \
 -pce_dst_ipv4_addr 3.3.3.3 \
 -pce_dst_ipv4_addr_step 0.0.0.1 \
 -pce_dst_ipv6 _addr_step ::1 \
 -enable_no_path true \
 ]

 # The following example adds an LSP on the PCC device specified by pcep_hnd1:

 set pcc_lsp [::sth::emulation_pcep_config \
 -mode add \
 -handle $pcep_hnd1 \ #PCC handle
 -pcep_device_role PCC \
 -pcc_lspcount 1 \
 -pcc_symbolic_name PLSP_@b \
 -pcc_characteristic ENABLE_REQUEST \
 -enable_delegate true \
 -pcc_src_ipv4_addr 1.1.1.1 \
 -pcc_src_ipv4_addr_step 0.0.0.1 \
 -pcc_dst_ipv4_addr 2.2.2.2 \
 -pcc_dst_ipv4_addr_step 0.0.0.1 \
 -pcc_src_ipv6_addr 2000::1 \
 -pcc_src_ipv6_addr_step ::1 \
 -pcc_dst_ipv6_addr 2001::1 \
 -pcc_dst_ipv6_addr_step ::1 \
 ]
 Output:
 # This will return PCC related object handles and startcommand_hnd handles.
 {startcommand_hnd {startdevicerequestcommandconfig1
 startdevicedelegatecommandconfig1}} {rp_hnd pceprpobject1} {lsp_hnd
 pceplspobject1} {pcc_lsp_hnd pcclspconfig1} {status 1}
 PCE SRP Info
 Use this group of arguments to configure SRP:
 -srp_auto_gen_id
 Determines whether to configure SRP IDs automatically.
 Possible values are true and false. If it is set to false, you
 must configure SRP IDs manually. The default is true.
 
PCEP Functions
758
 -srp_id
 Specifies the starting SRP ID. This argument is available when
 -srp_auto_gen_id is set to false. The default value is 1.

 -srp_id_step
 Specifies the step value to generate subsequent SRP IDs. This
 argument is available when -srp_auto_gen_id is false. The default
 value is 1.
 # The following example configures PCE SRP:

 set pce_srp_info [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pce \
 -srp_auto_gen_id false \
 -srp_id 10 \
 -srp_id_step 2 \
 ]
 Output:
 {srp_hnd pcepsrpobject1} {status 1}
 PCC LSP Info
 Use this group of arguments to configure the LSP object and the LSP Identifiers
 TLV.

 -lsp_auto_gen_id
 Determines whether to configure PCEP-specific identifiers for the LSP
 (PLSP-IDs) automatically. Possible values are true and false. If
 it is set to false, you must configure PLSP-IDs manually. The
 default is true.

 -plsp_id
 Specifies the starting PLSP-ID. This argument is available when
 -srp_auto_gen_id is set to false. Possible values range from 0 to
 1048575. The default value is 1.

 -plsp_id_step
 The step value to generate subsequent PLSP-IDs. This argument is
 available when -lsp_auto_gen_id is false. Possible values range
 from 0 to 4294967295. The default value is 1.

 -aflag
 Determines whether to mark the LSP as an administrative LSP.
 Possible values are true and false. If it is set to true, the LSP
 will be marked as administrative.

 -init_lsp_state
 Initial state of the LSP. Possible values are described below:

 DOWN LSP is down
 UP LSP is up
 ACTIVE LSP is active
 GOINGDOWN LSP is in the process of going down
 GOINGUP LSP is in the process of going up
 RESERVED1 Reserved state value
 RESERVED2 Reserved state value
 RESERVED3 Reserved state value

 The default value is GOINGUP.

 -ipv4_tunnel_addr
 IPv4 source address for the tunnel. The default value is
 192.85.1.1.

 -ipv4_tunnel_addr_step
 IPv4 step value to create the next IP tunnel sender address. The
 default value is 0.0.0.1.

 -ipv6_tunnel_addr
 IPv6 source address for the tunnel. The default value is 2000::1.
 
PCEP Functions
759
 -ipv6_tunnel_addr_step
 Step value to create the next IPv6 tunnel sender address. The value
 must be in IPv6 format. The default value is ::1.

 -lsp_id
 ID of the first LSP. Possible values range from 0 to 65535. The
 default value is 1.

 -lsp_id_step
 Step value to create the next LSP ID. Possible values range from
 0 to 65535. The default value is 1.

 -tunnel_id
 ID of the first tunnel. Possible values range from 0 to 65535.
 The default value is 1.

 -tunnel_id_step
 Step value to create the next tunnel ID. Possible values range
 from 0 to 65535. The default value is 1.

 -ipv4_ex_tunnel_id
 IPv4 extended tunnel ID. The value must be in IPv4 format. The
 default value is 10.0.0.1.

 -ipv4_ex_tunnel_id_step
 Step value to create the next extended tunnel ID. The value
 must be in IPv4 format. The default value is 0.0.0.1.

 -ipv6_ex_tunnel_id
 Ipv6 extended tunnel ID. The value
 must be in IPv6 format. The default value is 2000:1::1.

 -ipv6_ex_tunnel_id_step
 Step value to create the next extended tunnel ID. The value
 must be in IPv6 format. The default value is ::1.

 -ipv4_tunnel_end_addr
 IPv4 destination address for the tunnel endpoint. The default
 value is 193.85.1.1.

 -ipv4_tunnel_end_addr_step
 Step value to create the next IP tunnel endpoint address.
 The value must be in IPv4 format. The default value is 0.0.0.1.

 -ipv6_tunnel_end_addr
 Ipv6 destination address for the tunnel endpoint. The value must
 be in IPv6 format. The default value is 2001::1.

 -ipv6_tunnel_end_addr_step
 Step value to create the next IPv6 tunnel endpoint address. The
 value must be in IPv6 format. The default value is ::1.
 # The following example configures the LSP object on the specified LSP handle:

 set pcc_lsp_info [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pcc \
 -lsp_auto_gen_id true \
 -plsp_id 1 \
 -plsp_id_step 1 \
 -aflag true \
 -init_lsp_state UP \
 -ipv4_tunnel_addr 1.1.1.1 \
 -ipv4_tunnel_addr_step 0.0.0.1 \
 -ipv6_tunnel_addr 2000::1 \
 -ipv6_tunnel_addr_step ::1 \
 -lsp_id 1 \
 -lsp_id_step 1 \
 -tunnel_id 1 \
 -tunnel_id_step 1 \
 -ipv4_ex_tunnel_id 10.0.0.1 \
PCEP Functions
760
 -ipv4_ex_tunnel_id_step 0.0.0.1 \
 -ipv4_tunnel_end_addr 2.2.2.2 \
 -ipv4_tunnel_end_addr_step 0.0.0.1 \
 ]
 Output:
 {lsp_hnd pceplspobject1} {status 1}
 PCC RP Object
 Use this group of arguments to configure the Request Parameters (RP) object of
 PCC (available when -pcc_characteristic is set to ENABLE_REQUEST).

 -rp_pflag
 Specifies the value of the Processing-Rule (P) flag for the RP
 object. The P flag allows a PCC to specify in a PC Request (PCReq)
 message sent to a PCE whether the object must be taken into
 account by the PCE during path computation or is just optional.
 Possible values are true and false. The default value is true.

 -rp_iflag
 Specifies the value of the Ignore flag for the RP object. The I
 flag is used by a PCE in a PC Reply (PCRep) message to indicate
 to a PCC whether an optional object was processed.
 Possible values are true and false. The default value is false.

 -rp_auto_gen_id
 Determines whether to automatically configure the RP ID.
 Possible values are true and false. If it is set to false, you
 must configure RP IDs manually. The default value is true.

 -requestid
 Specifies the starting RP ID. This argument is available when
 -rp_auto_gen_id is set to false. The default value is 1.

 -requestid_step
 Specifies the step value to generate subsequent request IDs.
 The default value is 1.

 -priority
 Specifies the value of the Priority flag for the RP object. This
 flag is used by the requesting PCC to specify to the PCE the
 request's priority. Possible values range from 0 to 7. The
 default value is 0.

 -rp_flags
 Specifies flag options for the RP object. Use | to combine
 multiple values if you want to specify more than one flag.
 Possible values are described below:

 PCEP_RP_FLAG_BIDIRECTIONAL Bi-directional (B) flag

 PCEP_RP_FLAG_STRICT_LOOSE Strict/Loose (O) flag

 0 No flag specified

 The default value is 0.
 PCC End-Points Object
 Use this group of arguments to configure the PCC End-Points object (available when
 -pcc_characteristic is set to ENABLE_REQUEST).

 -endpoint_pflag
 Specifies the value of the Processing-Rule flag for the
 End-Points object. Possible values are true and false. The
 default value is true.

 -endpoint_iflag
 Specifies the value of the Ignore flag for the End-Points
 object. Possible values are true and false. The default value is
 false.

 PCE No-Path Object 
PCEP Functions
761
 Use this group of arguments to configure the PCE No-Path object (available
 when -pcc_characteristic is set to ENABLE_REPLY).

 -ni_value
 Specifies the Nature of Issue (NI) field for the No-Path object.
 Possible values are:
 NO_SATISFYING_PATH No path satisfying the set of constraints
 could be found

 PCE_CHAIN_BROKEN PCE chain broken

 The default value is NO_SATISFYING_PATH.


 -nopath_cflag
 Specifies the Constraints (C) flag of the No-Path object.
 Possible values are true and false. When set to true, the PCE
 indicates the set of unsatisfied constraints (reasons why a path
 could not be found) in the PCRep message by including the
 relevant PCEP objects. When set to false, no failing constraints
 are specified. The default value is false.

 -nopath_included
 Specifies the method to include the unsatisfied PCEP objects.
 This argument is only valid when -nopath_cflag is set to true.
 Possible values are RECEIVED and SUGGESTED. The default value is
 RECEIVED.

 -nopath_vector_tlv_flag
 Specifies the value of the No-Path-Vector TLV for the No-Path
 object. Possible values are described below:

 PCE_UNAVILABLE PCE currently unavailable
 UNKNOWN_DESTINATION Unknown destination
 UNKNOWN_SOURCE Unknown source
 NONE None

 The default value is NONE.
 PCC ERO Object
 Use this group of arguments to configure the Explicit Route Object (ERO):
 -ipv4_ero_pflag
 Specifies the value of the Processing-Rule flag for the IPv4 ERO
 object. Possible values are true and false. The default value is
 true.

 -ipv4_ero_iflag
 Specifies the value of the Ignore flag for the IPv4 ERO object.
 Possible values are true and false. The default value is false.

 -ipv6_ero_pflag
 Specifies the value of the Processing-Rule flag for the IPv6 ERO
 object. Possible values are true and false. The default value is
 true.

 -ipv6_ero_iflag
 Specifies the value of the Ignore flag for the IPv6 ERO object.
 Possible values are true and false. The default value is false.
 PCC/PCE ERO Update Object
 Use this group of arguments to configure the ERO update object.

 -ipv4_update_ero_pflag
 Specifies the value of the Processing-Rule flag for the IPv4 ERO
 update object. Possible values are true and false. The default
 value is true.

 -ipv4_update_ero_iflag
 Specifies the value of the Ignore flag for the IPv4 ERO update
 object. Possible values are true and false. The default value is
PCEP Functions
762
 true.

 -ipv6_update_ero_pflag
 Specifies the value of the Processing-Rule flag for the IPv6 ERO
 update object. Possible values are true and false. The default
 value is true.

 -ipv6_update_ero_iflag
 Specifies the value of the Ignore flag for the IPv6 ERO object.
 Possible values are true and false. The default value is false.

 PCC/PCE ERO Explicit Parameters
 Use this group of arguments to configure the explicit parameters of ERO/ERO
 update object.

 -ipv4_explicit_start_ip_list
 Specifies the IP address of the next hop for the IPv4 ERO/ERO
 update object. The value must be in IPv4 format. The default
 value is 192.0.1.0.

 -ipv4_explicit_prefix_length
 Specifies the prefix length of the IP routes in the block of
 IPv4 ERO/ERO update objects. Possible values range from 0 to 255.
 The default value is 24.

 -ipv4_explicit_route_type
 Specifies the type of explicit routes to be included in the
 IPv4 ERO/ERO update object. Possible values are
 PCEP_ERO_ROUTE_TYPE_LOOSE and PCEP_ERO_ROUTE_TYPE_STRICT.

 PCEP_ERO_ROUTE_TYPE_LOOSE Two nodes need not be adjacent.
 IGP can be used to determine the best
 path to the loose hop.

 PCEP_ERO_ROUTE_TYPE_STRICT Two nodes must be adjacent to one
 another with no intermediate hops
 separating them.

 The default value is PCEP_ERO_ROUTE_TYPE_STRICT.


 -ipv6_explicit_start_ip_list
 Specifies the IP address of the next hop for the IPv6 ERO/ERO
 update object. The value must be in IPv6 format. The default
 value is 2000::1.

 -ipv6_explicit_prefix_length
 Specifies the prefix length of the IP routes in the block of
 IPv6 ERO/ERO update objects. The default value is 64.

 -ipv6_explicit_route_type
 Specifies the type of explicit routes to be included in the
 IPv6 ERO/ERO update object. Possible values are
 PCEP_ERO_ROUTE_TYPE_LOOSE and PCEP_ERO_ROUTE_TYPE_STRICT.

 PCEP_ERO_ROUTE_TYPE_LOOSE Two nodes need not be adjacent.
 IGP can be used to determine the best
 path to the loose hop.

 PCEP_ERO_ROUTE_TYPE_STRICT Two nodes must be adjacent to one
 another with no intermediate hops
 separating them.

 The default value is PCEP_ERO_ROUTE_TYPE_STRICT.
 SR ERO Subobject
 Use this group of arguments to configure the Segment Routing (SR) ERO object,
 which is a subobject of ERO.

 -sr_ero_pflag
 Specifies the value of the Processing-Rule flag for the SR ERO
PCEP Functions
763
 object. Possible values are true and false. The default
 value is true.

 -sr_ero_iflag
 Specifies the value of the Ignore flag for the SR ERO object.
 Possible values are true and false. The default value is false.
 -sr_route_type
 Specifies the type of explicit routes to be included in the
 SR ERO object. Possible values are PCEP_ERO_ROUTE_TYPE_LOOSE and
 PCEP_ERO_ROUTE_TYPE_STRICT.

 PCEP_ERO_ROUTE_TYPE_LOOSE Two nodes need not be adjacent.
 IGP can be used to determine the best
 path to the loose hop.

 PCEP_ERO_ROUTE_TYPE_STRICT Two nodes must be adjacent to one
 another with no intermediate hops
 separating them.

 The default value is PCEP_ERO_ROUTE_TYPE_STRICT.

 -explicit_sid_type
 Specifies the type of the segment ID. Possible values are
 described below:

 IPV4_NODE_ID IPv4 Network Access Identifier (NAI) node ID
 IPV6_NODE_ID IPv6 NAI node ID
 IPV4_ADJACENCY NAI local IPv4 address
 IPV6_ADJACENCY NAI local IPv6 address
 UNNUMBERED_ADJACENCY_IPV4_NODE_IDS NAI local node ID

 The default value is IPV4_NODE_ID.

 -explicit_mflag
 Specifies the M bit to indicate whether the Segment ID (SID) is
 an MPLS label stack entry with only the label value specified.
 Possible values are true and false. The default value is true.

 -explicit_cflag
 Specifies the C bit in conjunction with the M flag to indicate
 whether the SID is an MPLS label stack entry with all the fields
 specified. Possible values are true and false. The default value
 is false.

 -explicit_sflag
 Specifies the S bit to indicate whether the SID value in the
 subobject body is null and whether the PCC is responsible for
 choosing the SID value. Possible values are true and false. The
 default value is false.

 -explicit_fflag
 Specifies the F bit for the SR ERO object. Possible values are
 true and false. The default value is false.

 -explicit_sid_label
 Specifies the segment ID for the SR ERO object.
 This argument is valid when -explicit_sflag is set to false.
 Possible values range from 16 to 1048575. The default value is
 16.

 -explicit_sid_tc
 Specifies the value of the traffic class field for the SR ERO
 object. This argument is valid when -explicit_sflag is false.
 Possible values range from 0 to 7. The default value is 0.

 -explicit_sid_sflag
 Specifies the value of the MPLS Bottom Of Stack (BOS) flag to
 indicate whether the label is the last in the stack. This
 argument is valid when -explicit_sflag is false. Possible values
 are true and false. The default value is false. 
PCEP Functions
764

 -explicit_sid_ttl
 Specifies the value of the TTL field for the SR ERO object.
 Possible values range from 0 to 255. The default value is 255.

 -explicit_ipv4_address
 Specifies the value of the IPv4 NAI node ID for the SR ERO
 object. This argument is valid when -explicit_sid_type is set to
 IPV4_NODE_ID. The value must be in IPv4 format. The default value
 is 192.85.1.1.

 -explicit_ipv6_address
 Specifies the value of the IPv6 NAI node ID for the SR ERO
 object. This argument is valid when -explicit_sid_type is set to
 IPV6_NODE_ID. The value must be in IPv6 format. The default value
 is 2000::1.

 -explicit_local_ipv4_address
 Specifies the value of the NAI local IPv4 address for the SR ERO
 object. This argument is valid when -explicit_sid_type is set to
 IPV4_ADJACENCY. The default value is 192.85.1.1.

 -explicit_remote_ipv4_address
 Specifies the value of the NAI remote IPv4 address for the SR ERO
 object. The default value is 192.85.1.1.

 -explicit_local_ipv6_address
 Specifies the value of the NAI local IPv6 address for the SR ERO
 object. This argument is valid when -explicit_sid_type is set to
 IPV6_ADJACENCY. The default value is 2000::1.

 -explicit_remote_ipv6_address
 Specifies the value of the NAI remote IPv6 address for the SR ERO
 object. The default value is 2001::1.

 -explicit_local_node_id
 Specifies the value of the NAI local node ID. This argument is
 valid when -explicit_sid_type is set to
 UNNUMBERED_ADJACENCY_IPV4_NODE_IDS. Possible values range from 0
 to 4294967295. The default value is 0.

 -explicit_local_interface_id
 Specifies the value of the NAI local interface node ID for the SR
 ERO object. This argument is valid when -explicit_sid_type is set
 to UNNUMBERED_ADJACENCY_IPV4_NODE_IDS. Possible values range from
 0 to 4294967295. The default value is 0.

 -explicit_remote_node_id
 Specifies the value of the NAI remote node ID for the SR ERO
 object. This argument is valid when -explicit_sid_type is set to
 UNNUMBERED_ADJACENCY_IPV4_NODE_IDS. Possible values range from 0
 to 4294967295. The default value is 0.

 -explicit_remote_interface_id
 Specifies the value of the NAI remote interface node ID for the
 SR ERO object. This argument is valid when -explicit_sid_type is
 set to UNNUMBERED_ADJACENCY_IPV4_NODE_IDS. Possible values range
 from 0 to 4294967295. The default value is 0.
 # The following example adds a PCC ERO and its subobjects to the specified LSP:
 set pcc_ero_obj [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pcc \
 -ipv4_ero_pflag true \
 -ipv4_ero_iflag true \
 -ipv4_explicit_start_ip_list 192.0.1.0 \
 -ipv4_explicit_prefix_length 24 \
 -ipv4_explicit_route_type PCEP_ERO_ROUTE_TYPE_LOOSE \
 -sr_ero_pflag true \
 -sr_ero_iflag true \
PCEP Functions
765
 -sr_route_type PCEP_ERO_ROUTE_TYPE_LOOSE \
 -explicit_sid_type IPV4_ADJACENCY \
 -explicit_mflag true \
 -explicit_cflag true \
 -explicit_sflag true \
 -explicit_fflag true \
 -explicit_sid_label 16 \
 -explicit_sid_tc 0 \
 -explicit_sid_sflag true \
 -explicit_sid_ttl 255 \
 -explicit_ipv4_address 192.85.1.1 \
 -explicit_local_ipv4_address 192.85.1.1 \
 -explicit_remote_ipv4_address 193.85.1.1 \
 -explicit_local_node_id 0 \
 -explicit_local_interface_id 0 \
 -explicit_remote_node_id 0 \
 -explicit_remote_interface_id 0 \
 ]

 Output: This will return the PCC ERO and its subobjects handles .

 {ero_hnd {pcepipv4eroobject1 pcepsreroobject1}} {status 1}

 # The following example adds a PCE ERO and its subobjects to the specified LSP:
 set pce_ero_update [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pce \
 -ipv4_update_ero_pflag "false false"\
 -ipv4_update_ero_iflag "false true"\
 -ipv4_explicit_start_ip_list "{192.85.0.1 192.85.1.1} 192.85.2.1"\
 -ipv4_explicit_prefix_length "{16 24} 32" \
 -sr_ero_pflag true \
 -sr_ero_iflag true \
 -sr_route_type PCEP_ERO_ROUTE_TYPE_STRICT \
 -explicit_sid_type IPV4_ADJACENCY \
 -explicit_mflag true \
 -explicit_cflag true \
 -explicit_sflag true \
 -explicit_fflag true \
 -explicit_sid_label 16 \
 -explicit_sid_tc 0 \
 -explicit_sid_sflag true \
 -explicit_sid_ttl 255 \
 -explicit_ipv4_address 1.1.1.1 \
 -explicit_local_ipv4_address 1.1.1.1 \
 -explicit_remote_ipv4_address 2.2.2.2 \
 -explicit_local_node_id 0 \
 -explicit_local_interface_id 0 \
 -explicit_remote_node_id 0 \
 -explicit_remote_interface_id 0 \
 ]

 Output: This will return PCE ERO and its sub objects handles:


 {ero_hnd pcepsreroobject1} {status 1}
 PCC RRO object
 Use this group of arguments to configure the Reported Route Object (RRO).

 -rro_flags
 Specifies RRO flags. Use | to combine
 multiple values if you want to specify more than one flag.
 Possible values are listed below:

 0
 No flag specified
 pcep_rro_flag_local_protection_available
 Local Protection Available
 pcep_rro_flag_local_protection_in_use
PCEP Functions
766
 Local Protection in Use
 pcep_rro_flag_bandwidth_protection
 Bandwidth Protection
 pcep_rro_flag_node_protection
 Node Protection
 pcep_rro_flag_node_id
 Node ID

 The default value is 0.
 -ipv4_rro_pflag
 Specifies the value of the Processing-Rule flag for the IPv4 RRO
 object. Possible values are true and false. The default value is
 true.

 -ipv6_rro_pflag
 Specifies the value of the Processing-Rule flag for the IPv6 RRO
 object. Possible values are true and false. The default value is
 true.

 -ipv4_rro_iflag
 Specifies the value of the Ignore flag for the IPv4 RRO object.
 Possible values are true and false. The default value is false.

 -ipv6_rro_iflag
 Specifies the value of the Ignore flag for the IPv6 RRO object.
 Possible values are true and false. The default value is false.

 PCC Reported Parameters for RRO Object
 Use this group of arguments to configure reported parameters of the RRO.
 -ipv4_reported_start_ip_list
 Specifies the IP address for the next hop of the IPv4 RRO object.
 The default value is 192.0.1.0.

 -ipv4_reported_prefix_length
 Specifies the prefix length of the IP routes in the block of IPv4
 RRO objects. Possible values range from 0 to 255. The default value is 24.

 -ipv6_reported_start_ip_list
 Specifies the IPv6 address for the next hop of the IPv6 RRO
 object. The default value is 2000::1.

 -ipv6_reported_prefix_length
 Specifies the prefix length of the IP routes in the block of IPv6
 RRO objects. Possible values range from 0 to 255. The default value is 64.

 PCC SR RRO Subobject
 Use this group of arguments to configure the SR RRO object, which is a subobject
 of ERO.

 -sr_rro_pflag
 Specifies the value of the Processing-Rule flag for the SR RRO
 object. Possible values are true and false. The default value is
 true.

 -sr_rro_iflag
 Specifies the value of the Ignore flag for the SR RRO object.
 Possible values are true and false. The default value is false.

 -reported_sid_type
 Specifies the type of the segment ID for the SR RRO object.
 Possible values are:

 IPV4_NODE_ID IPv4 Network Access Identifier (NAI) node ID
 IPV6_NODE_ID IPv6 NAI node ID
 IPV4_ADJACENCY NAI local IPv4 address
 IPV6_ADJACENCY NAI local IPv6 address
 UNNUMBERED_ADJACENCY_IPV4_NODE_IDS NAI local node ID

 The default value is IPV4_NODE_ID.
PCEP Functions
767

 -reported_sflag
 Specifies the value of the S flag for the SR RRO object. Possible
 values are true and false. The default value is false.

 -reported_fflag
 Specifies the value of the F flag for the SR RRO object. Possible
 values are true and false. The default value is false.

 -reported_sid_label
 Specifies the segment ID. This argument is valid when
 -explicit_sflag is set to false. Possible values range from 16 to
 1048575. The default value is 16.

 -reported_sid_tc
 Specifies the value of the traffic class field for the SR RRO
 object. This argument is valid when -reported_sflag is false.
 Possible values range from 0 to 7. The default value is 0.

 -reported_sid_s_flag
 Specifies the value of the MPLS Bottom Of Stack (BOS) flag to
 indicate whether the label is the last in the stack. This
 argument is valid when -reported_sflag is false. Possible values
 are true and false. The default value is false.

 -reported_sid_ttl
 Specifies the value of the TTL field for the SR RRO object.
 Possible values range from 0 to 255. The default value is 255.

 -reported_ipv4_address
 Specifies the value of the IPv4 NAI node ID for the SR RRO
 subobject. This argument is valid when -reported_sid_type is set
 to IPV4_NODE_ID. The value must be in IPv4 format. The default
 value is 192.85.1.1.

 -reported_ipv6_address
 Specifies the value of the IPv6 NAI node ID for the SR RRO
 object. This argument is valid when -reported_sid_type is set
 to IPV6_NODE_ID. The value must be in IPv6 format. The default
 value is 2000::1.

 -reported_local_ipv4_address
 Specifies the value of the NAI local IPv4 address for the SR RRO
 object. This argument is valid when -reported_sid_type is set
 to IPV4_ADJACENCY. The default value is 192.85.1.1.

 -reported_remote_ipv4_address
 Specifies the value of the NAI remote IPv4 address for the SR RRO
 object. The default value is 192.85.1.1.

 -reported_local_ipv6_address
 Specifies the value of the NAI local IPv6 address for the SR RRO
 object. This argument is valid when -reported_sid_type is set
 to IPV6_ADJACENCY. The default value is 2000::1.

 -reported_remote_ipv6_address
 Specifies the value of the NAI remote IPv6 address for the SR RRO
 object. The default value is 2001::1.

 -reported_local_node_id
 Specifies the value of the NAI local node ID for the SR RRO
 object. This argument is valid when -reported_sid_type is set
 to UNNUMBERED_ADJACENCY_IPV4_NODE_IDS. Possible values range from
 0 to 4294967295. The default value is 0.

 -reported_local_interface_id
 Specifies the value of the NAI local interface node ID for the SR RRO
 object. This argument is valid when -reported_sid_type is set
 to UNNUMBERED_ADJACENCY_IPV4_NODE_IDS. Possible values range from
 0 to 4294967295. The default value is 0.
 
PCEP Functions
768
 -reported_remote_node_id
 Specifies the value of the NAI remote node ID for the SR RRO
 object. This argument is valid when -reported_sid_type is set
 to UNNUMBERED_ADJACENCY_IPV4_NODE_IDS. Possible values range from
 0 to 4294967295. The default value is 0.

 -reported_remote_interface_id
 Specifies the value of the NAI remote interface node ID for the
 SR RRO object. This argument is valid when -reported_sid_type
 is set to UNNUMBERED_ADJACENCY_IPV4_NODE_IDS. Possible values
 range from 0 to 4294967295. The default value is 0.
 # The following example adds a PCC RRO object and its subobjects to the specified
 LSP:
 set pcc_rro_obj [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pcc \
 -rro_flags PCEP_RRO_FLAG_LOCAL_PROTECTION_IN_USE \
 -ipv4_rro_pflag true \
 -ipv4_rro_iflag true \
 -ipv4_reported_start_ip_list 192.0.1.0 \
 -ipv4_reported_prefix_length 24 \
 -sr_rro_pflag true \
 -sr_rro_iflag true \
 -reported_sid_type IPV4_ADJACENCY \
 -reported_sflag true \
 -reported_fflag true \
 -reported_sid_label 16 \
 -reported_sid_tc 0 \
 -reported_sid_s_flag true \
 -reported_sid_ttl 255 \
 -reported_ipv4_address 1.1.1.1 \
 -reported_local_ipv4_address 1.1.1.1 \
 -reported_remote_ipv4_address 2.2.2.2 \
 -reported_local_node_id 0 \
 -reported_local_interface_id 0 \
 -reported_remote_node_id 0 \
 -reported_remote_interface_id 0 \
 ]
 Output: This will return handles for the PCC RRO and its subobjects.

 {rro_hnd {pcepipv4rroobject1 pcepsrrroobject1 pcepipv6rroobject1}} {status 1}
 PCC BW Object
 Use this group of arguments to configure the PCC Bandwidth (BW) object.

 -bw_pflag
 Specifies the value of the Processing-Rule flag for the BW object.
 Possible values are true and false. The default value is true.

 -bw_iflag
 Specifies the value of the Ignore flag for the BW object.
 Possible values are true and false. The default value is true.

 -bw_bandwidth
 Requested bandwidth in bytes per second. Possible values range
 from 0 to 4294967295. A value of zero indicates the object is
 optional. The default value is 0.
 PCE BW Update Object
 Use this group of arguments to configure the BW update object.

 -bw_update_pflag
 Specifies the value of the Processing-Rule flag for the BW update
 object. Possible values are true and false. The default value is
 true.
 -bw_update_iflag
 Specifies the value of the Ignore flag for the BW update object.
PCEP Functions
769
 Possible values are true and false. The default value is true.

 -bw_update_bandwidth
 Requested bandwidth in bytes per second. Possible values range
 from 0 to 4294967295. Value 0 indicates that the object is
 optional. The default value is 0.
 # The following example adds a PCC BW object to the LSP:
 set pcc_bw_obj [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pcc \
 -bw_pflag true \
 -bw_iflag true \
 -bw_bandwidth 0 \
 ]
 Output:
 # This will return a PCC BW object handle.

 {bw_hnd pcepbwobject1} {status 1}
 # The following example adds a PCE BW update object:

 set pce_bw_obj [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pce \
 -bw_update_pflag true \
 -bw_update_iflag false \
 -bw_update_bandwidth 0 \
 ]

 Output:
 # This will return a PCE BW update object handle.

 {bw_hnd pcepbwtoupdateobject1} {status 1}
 PCC/PCE Metric Object
 Use this group of arguments to configure the PCC/PCE Metric object.
 -metric_cflag
 Value of the Computed Metric (C) Flag. Possible values are true
 and false. When set to true, it indicates that the PCE must
 provide the computed path metric value for a valid path in the
 PCRep message for the corresponding metric. The default value is
 true.

 -metric_bflag
 Value of the Bound (B) flag. Possible values are true and false.
 When set to true, it indicates a bound (a maximum) for the path
 metric that must not be exceeded for the PCC to consider the
 computed path as acceptable. The default value is false.

 -metric_type
 Specifies the type of metric corresponding to the flags. Possible
 values are described below:
 IGP_METRIC IGP metric
 TE_METRIC TE metric
 HOP_COUNTS Hop counts

 The default value is IGP_METRIC.

 -metric_value
 Maximum value of the metric. Possible values range from 0 to
 4294967295. The default value is 10.

 PCC Metric List Object
 Use this group of arguments to configure the PCC Metric List object, under which
 METRIC objects are configured.

 -metriclist_pflag
 Specifies the value of the Processing-Rule flag for the METRIC
PCEP Functions
770
 List object. Possible values are true and false. The default
 value is true.

 -metriclist_iflag
 Specifies the value of the Ignore flag for the METRIC List object.
 Possible values are true and false. The default value is false.

PCE Metric List Update Object
 Use this group of arguments to configure the PCE Metric List update object.

 -metriclist_update_pflag
 Specifies the value of the Processing-Rule flag for the Metric
 List update object. Possible values are true and false. The
 default value is true.

 -metriclist_update_iflag
 Specifies the value of the Ignore flag for the Metric List update
 object. Possible values are true and false. The default value is
 false.
 # The following example adds PCC Metric object configurations to the specified LSP
 handle:

 set pcc_metric_obj [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pcc \
 -metric_cflag true \
 -metric_bflag true \
 -metric_type HOP_COUNTS \
 -metric_value 10 \
 -metriclist_pflag true \
 -metriclist_iflag true \
 ]
 Output:
 # This will return a PCC Metric object handle.

 {metric_hnd pcepmetriclistobject1} {status 1}
 # The following example adds PCE Metric object configurations to the specified LSP
 handle:

 set pce_metric_object [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pce \
 -metric_cflag true \
 -metric_bflag true \
 -metric_type HOP_COUNTS \
 -metric_value 10 \
 -metriclist_update_pflag true \
 -metriclist_update_iflag true \
 ]

 Output:
 # This will return a PCE Metric object handle.

 {metric_hnd pcepmetriclisttoupdateobject1} {status 1}

 PCC LSPA Object
 Use this group of arguments to configure the LSP Attributes (LSPA) object.

 -lspa_pflag
 Specifies the value of the Processing-Rule flag for the LSPA
 object. Possible values are true and false. The default value is
 true.

 -lspa_iflag
 Specifies the value of the Ignore flag for the LSPA
 object. Possible values are true and false. The default value is
 false.

 -lspa_exclude_any 
PCEP Functions
771
 Specifies a value to exclude a link that matches any attributes in
 the 32-bit mask, based on the following equation:
 (link-attr & exclude-any) == 0

 Possible values range from 0 to 4294967295. The default value is 0.


 -lspa_include_any
 Specifies a value to include a link that matches any attributes in
 the 32-bit mask, based on the following equation:
 (include-any == 0) | ((link-attr & include-any) != 0)

 A null mask (all bits set to zero) automatically passes. Possible
 values range from 0 to 4294967295. The default value is 0.


 -lspa_include_all
 Specifies a value to include a link that matches all attributes in
 the 32-bit mask, based on the following equation:

 (include-all == 0) | (((link-attr & include-all) ^ include-all) == 0)

 A null mask (all bits set to zero) automatically passes. Possible
 values range from 0 to 4294967295. The default value is 0.

 -lspa_setup_prio
 Priority of the TE LSP with respect to taking resources. Possible
 values range from 0 to 7. Value 0 indicates the highest priority.
 The default value is 0.

 -lspa_holding_prio
 Priority of the TE LSP with respect to holding resources.
 Possible values range from 0 to 7. Value 0 indicates the highest
 priority. The default value is 0.

 -lspa_lflag
 Specifies the value of the Local Protection Desired (L) flag for
 the LSPA object. Possible values are true and false. When set to
 true, it indicates that the computed path must include links
 protected with Fast Reroute as defined in RFC4090. The default
 value is false.

 -lspa_affinities_flag
 Determines whether to set values for including or excluding links
 based on comparing a 32-bit mask to the session attribute of a
 link. Possible values are true and false. Set it to true if you
 want to use -lspa_exclude_any, -lspa_include_any, or
 -lspa_include_all to exlude or include specified links. The
 default is false.
 PCE LSPA Update Object
 Use this group of arguments to configure the LSPA update object.

 -lspa_update_pflag
 Specifies the value of the Processing-Rule flag for the LSPA
 update object. Possible values are true and false. The default
 value is true.

 -lspa_update_iflag
 Specifies the value of the Ignore flag for the LSPA update
 object. Possible values are true and false. The default value is
 false.

 -lspa_update_exclude_any
 Specifies a value to exclude a link that matches any attributes in
 the 32-bit mask, based on the following equation:
 (link-attr & exclude-any) == 0

 Possible values range from 0 to 4294967295. The default value is 0.

 
PCEP Functions
772
 -lspa_update_include_any
 Specifies a value to include a link that matches any attributes in
 the 32-bit mask, based on the following equation:
 (include-any == 0) | ((link-attr & include-any) != 0)

 A null mask (all bits set to zero) automatically passes. Possible
 values range from 0 to 4294967295. The default value is 0.

 -lspa_update_include_all
 Specifies a value to include a link that matches all attributes in
 the 32-bit mask, based on the following equation:

 (include-all == 0) | (((link-attr & include-all) ^ include-all) == 0)

 A null mask (all bits set to zero) automatically passes. Possible
 values range from 0 to 4294967295. The default value is 0.

 -lspa_update_setup_prio
 Priority of the TE LSP with respect to taking resources. Possible
 values range from 0 to 7. Value 0 indicates the highest priority.
 The default value is 0.

 -lspa_update_holding_prio
 Priority of the TE LSP with respect to holding resources.
 Possible values range from 0 to 7. Value 0 indicates the highest
 priority. The default value is 0.

 -lspa_update_lflag
 Specifies the value of the Local Protection Desired (L) flag for
 the LSPA update object. Possible values are true and false. The
 default value is false.

 -lspa_update_affinities_flag
 Determines whether to set values for including or excluding links
 based on comparing a 32-bit mask to the session attribute of a
 link. Possible values are true and false. Set it to true if you
 want to use -lspa_update_exclude_any, -lspa_update_include_any,
 or -lspa_update_include_all to exlude or include specified links.
 The default value is false.
 # The following example adds PCC LSPA object configurations:
 set pcc_lspa_obj [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pcc \
 -lspa_pflag true \
 -lspa_iflag true \
 -lspa_exclude_any 1 \
 -lspa_include_any 1 \
 -lspa_include_all 1 \
 -lspa_setup_prio 1 \
 -lspa_holding_prio 1 \
 -lspa_lflag true \
 -lspa_affinities_flag true \
 ]
 Output: This will return a PCC LSPA object handle.

 {lspa_hnd pceplspaobject1} {status 1}

 # The following example configures a PCE LSPA update object:

 set pce_lspa_object [::sth::emulation_pcep_config \
 -mode add \
 -handle $lsp_handle_pce \
 -lspa_update_pflag true \
 -lspa_update_iflag true \
 -lspa_update_exclude_any 1 \
 -lspa_update_include_any 1 \
 -lspa_update_include_all 1 \
 -lspa_update_setup_prio 1 \
 -lspa_update_holding_prio 1 \
PCEP Functions
773
 -lspa_update_lflag true \
 -lspa_update_affinities_flag true \
 ]

 Output: This will return a PCE LSPA update object handle

 {lspa_hnd pceplspatoupdateobject1} {status 1}

 PCEP Custom TLV
 Use this group of arguments to configure custom TLVs for PCEP.

 -tlv_type
 Type of the TLV in hex. Possible values range from 0 to 0x3FFF.
 The default value is 0.

 -tlv_value
 Value of the TLV in hex. Possible values range from 0 0x0 to
 0xff. The default value is 0.

 -customtlv_handle
 A list of custom TLV handles

 PCC/PCE Command Edit Parameters
 Use this group of arguments to modify the created PCC/PCE objects
 before auto delegation, synchronization (for PCC) or update (for PCE) operations:

 -included_ero_handle
 The ERO object handle to be included

 -included_rro_handle
 The RRO object handle to be included
 -included_bw_handle
 The BW object handle to be included

 -included_metric_handle
 The metric object handle to be included
 -included_lspa_handle
 The LSPA object handle to be included
 -include_ero
 Determines whether to include the ERO object handle. Possible
 values are true and false. The default value is true.

 -include_rro
 Determines whether to include the RRO object handle. Possible
 values are true and false. The default value is true.

 -include_bw
 Determines whether to include the BW object handle. Possible
 values are true and false. The default value is true.

 -include_metric
 Determines whether to include the metric object handle. Possible
 values are true and false. The default value is true.

 -include_lspa
 Determines whether to include the LSPA object. Possible values
 are true and false. The default value is true.

 -include_lsp
 Determines whether to include the LSP object. Possible values
 are true and false. The default value is true.

 -include_srp
 Determines whether to include the SRP object. Possible values
 are true and false. The default value is true.
 
PCEP Functions
774
 -include_rp
 Determines whether to include the RP object. Possible values
 are true and false. The default value is true.

 -include_endpoints
 Determines whether to include the End-Points object. Possible
 values are true and false. The default value is true.
 # The following example modifies PCC/PCE objects with Command Edit
 parameters:

 keylget device_ret_pcep1 ero_hnd ero_handle
 keylget device_ret_pcep1 startcommand_hnd cmd_handle2

 set device_ret_pcep [::sth::emulation_pcep_config \
 -mode modify \
 -handle [lindex $cmd_handle2 0] \ # PCC or PCE start_command handle
 -include_lsp false \
 -include_endpoints false \
 -included_ero_handle [lindex $ero_handle 1]
 ]

 Output: This returns PCC/PCE startcommand_hnd handle with specified auto parameters

 {startcommand_hnd startdeviceupdatecommandconfig1} {status 1}
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 customtlv_hnd Custom TLV handle
 pcep_handle PCC or PCE handle returned by the function
 pcc_lsp_hnd PCC LSP handle
 pce_lsp_hnd PCE LSP handle
 lsp_hnd LSP object handle
 ero_hnd ERO object handle
 rro_hnd RRO object handle
 srp_handle SRP handle
 lspa_hnd LSPA object handle
 startcommand_hnd Handle used to modify the existing PCC/PCE
 characteristics of the LSP

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)

Description:
 The sth::emulation_pcep_config function enables PCEP (PCC or PCE) on raw devices,
 adds, modifies, or deletes the PCC or PCE LSP. Use the -mode
 argument to specify the operation to perform.
 When you enable the PCEP on raw devices, the function returns a PCEP handle based
 The device role (PCC or PCE). Use this handle as the input for further actions specified by -
mode. The mode you use determines the set of arguments you use to configure
 PCEP devices or LSPs.

 When you specify -mode add, you must also use the -handle argument to
 specify the PCEP device handle to create LSPs on that device.

 When you specify -mode modify, you must also use the -handle argument to
 specify the PCEP LSP handle to modify the LSP configurations.

 When you specify -mode delete, you must also use the -handle argument to
 specify the PCEP LSP handle to delete the LSP.

Examples:
PCEP Functions
775
 See the examples under Arguments, or refer to Sample Script in the
 Release Package folder for full sample scripts of the function.

sth::emulation_pcep_control
Name:
 sth::emulation_pcep_control
Purpose:
 Starts, stops PCEP devices and the related LSPs, establishes sessions between
 PCEP devices, or starts the LSP on the established PCEP devices.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_pcep_control
 -action {start_sessions | stop_sessions | establish_sessions
 |initiate_lsp |remove_delegate_lsp | remove_initiate_lsp }
 -handle <pcep_handle>

Arguments:
 -mode
 Specifies the action to be performed. This argument is
 mandatory. Possible values are:

 start_sessions Starts the PCEP devices and the related LSPs

 stop_sessions Stops the PCEP devices and the related LSPs

 establish_sessions Establishes a session between PCEP devices

 initiate_lsp Starts the LSPs on the PCEP devices with
 session established

 remove_initiate_lsp PCE will take back the initiated LSP, and send
 a deletion request from the selected emulated
 PCEs to the associated PCCs

 remove_delegate_lsp
 PCC will take back the delegate LSP, and remove
 all states for the LSPs on the selected devices

 The default value is start_sessions.
 -handle
 Specifies the PCEP handle on which to perform the action. This
 argument is mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)
 Description:
 The sth::emulation_pcep_config function controls the PCEP sessions and
 the related LSPs. Use the -mode argument to specify the action to perform. (See
 the -mode argument description for information about the actions.)

 If the action performed fails, Spirent HLTAPI returns an error message.
Examples:
 The following example starts the specified PCEP sessions:
PCEP Functions
776
 set ret [::sth::emulation_pcep_control \
 -handle "$pcep_hnd1 $pcep_hnd2" -action start_sessions]
Notes on PCEP Results:
 Spirent HLTAPI does not provide a protocol specific API for PCEP functions.
 Instead, you can retrieve PCEP results using the sth::drv_stats function, as
 shown in the examples below:

 # To retrieve PCEP results by specified properties:

 set drv_stats [::sth::drv_stats \
 -query_from "$port1 $port2" \
 -drv_name drv2\
 -where PcepProtocolConfig.BlockRole = 0 \
 -properties "EmulatedDevice.PortName EmulatedDevice.Name
 PcepProtocolConfig.BlockState
 PcepProtocolConfig.BlockSessionCount
 PcepProtocolConfig.BlockSessionUpCount
 PcepProtocolConfig.BlockSessionIdleCount
PcepProtocolConfig.BlockSessionPendingCount
 PcepProtocolConfig.BlockTxOpenCount
 PcepProtocolConfig.BlockRxOpenCount
 PcepProtocolConfig.BlockTxKeepAliveCount
PcepProtocolConfig.BlockRxKeepAliveCount
 PcepProtocolConfig.BlockTxPCRptCount
 PcepProtocolConfig.BlockRxPCUpdCount
 PcepProtocolConfig.BlockTxPCReqCount
 PcepProtocolConfig.BlockRxPCRepCount
 PcepProtocolConfig.BlockTxNotifyCount
 PcepProtocolConfig.BlockRxNotifyCount
 PcepProtocolConfig.BlockTxErrorCount
 PcepProtocolConfig.BlockRxErrorCount
 PcepProtocolConfig.BlockTxCloseCount
 PcepProtocolConfig.BlockRxCloseCount
 PcepProtocolConfig.BlockRxPCInitCount
 PcepProtocolConfig.BlockFlapCount
 PcepProtocolConfig.BlockRole"\
 ]

 Output:

 {result_count 1} {item0 {{EmulatedDevicePortName {10.62.224.174-1-2 //1/2}}
 {EmulatedDeviceName {Host 2}} {PcepProtocolConfigBlockState UP}
 {PcepProtocolConfigBlockSessionCount 1} {PcepProtocolConfigBlockSessionUpCount 1}
 {PcepProtocolConfigBlockSessionIdleCount 0}
 {PcepProtocolConfigBlockSessionPendingCount 0} {PcepProtocolConfigBlockTxOpenCount 1}
 {PcepProtocolConfigBlockRxOpenCount 1} {PcepProtocolConfigBlockTxKeepAliveCount 1}
 {PcepProtocolConfigBlockRxKeepAliveCount 1} {PcepProtocolConfigBlockTxPCRptCount 2}
 {PcepProtocolConfigBlockRxPCUpdCount 0} {PcepProtocolConfigBlockTxPCReqCount 0}
 {PcepProtocolConfigBlockRxPCRepCount 0} {PcepProtocolConfigBlockTxNotifyCount 0}
 {PcepProtocolConfigBlockRxNotifyCount 0} {PcepProtocolConfigBlockTxErrorCount 0}
 {PcepProtocolConfigBlockRxErrorCount 0} {PcepProtocolConfigBlockTxCloseCount 0}
 {PcepProtocolConfigBlockRxCloseCount 0} {PcepProtocolConfigBlockRxPCInitCount 0}
 {PcepProtocolConfigBlockFlapCount 0} {PcepProtocolConfigBlockRole PCC}}}
 {handle dynamicresultview1} {status 1}

 # To retrieve PCEP and LSP results by using an XML configuration file (saved
 from the DRV view configured in the GUI)

 set drv_stats1 [::sth::drv_stats \
 -drv_xml "C:/Desktop/pcep/drvxml/pcclsp_results.xml" \
 ]
 Output:
 {result_count 1} {item0 {{EmulatedDeviceName {Host 2}}
 {PcepProtocolConfigSymbolicName PLSP_report_0} {PcepProtocolConfigSrcIpAddr
 1.1.1.1} {PcepProtocolConfigDstIpAddr 2.2.2.2} {PcepProtocolConfigLspState UP}
 {PcepProtocolConfigPlspState DELEGATED} {PcepProtocolConfigPlspId 1}
 {PcepProtocolConfigSrpId 0} {PcepProtocolConfigRpId 0}
 {PcepProtocolConfigPCRole PCC}}} {handle dynamicresultview2} {status 1}
 
PCEP Functions
777
 
PIM Functions
778
PIM Functions
Functions:
sth::emulation_pim_config
sth::emulation_pim_control
sth::emulation_pim_group_config
sth::emulation_pim_info
sth::emulation_pim_config
Name:
 sth::emulation_pim_config
Purpose:
 Creates, modifies, or deletes one or more emulated Protocol Independent
 Multicast (PIM) routers on a Spirent HLTAPI chassis. PIM is a multicast
 routing protocol that uses the underlying unicast routing information base
 to make multicast routing decisions. PIM is not dependent on any
 unicast routing protocol.
Synopsis:
 sth::emulation_pim_config
 -mode create {-port_handle <port_handle>|-handle device_handle>} |
 -mode {modify|delete|disable|disable_all|enable|enable_all|active|inactive}
 -handle <pim_session_handle>
 [-bidir_capable {1|0}]
 [-bs_period <1-3600> ]
 [-c_bsr_priority <0-255>]
 [-c_bsr_rp_addr <a.b.c.d>]
 [-c_bsr_rp_holdtime <1-65535>]
 [-c_bsr_rp_priority <0-255>]
 [-c_rp_addr <a.b.c.d>]
 [-c_rp_priority <0-255>]
 [-count <1-65535>]
 [-dr_priority <1-4294967295>]
 [-group_pool_mode {send|register}]
 [-hello_holdtime <1-65535>]
 [-hello_interval <1-65535>]
 [-hello_max_delay <1-65535>]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-intf_ip_prefix_len <1-128>]
 [-ip_version {4|6}]
 [-join_prune_holdtime <1-65535>]
 [-join_prune_interval <1-65535>]
 [-link_local_intf_ip_addr <a:b:c:d:e:f:g:h>]
 [-link_local_intf_ip_addr_step <a:b:c:d:e:f:g:h>]
 [-link_local_intf_prefix_len <1-128>]
 [-mac_address_start <aa:bb:cc:dd:ee:ff>]
 [-neighbor_intf_ip_addr <a.b.c.d>]
 [-override_interval <100-32767>]
 [-pim_mode {sm|ssm}]
 [-port_handle <a.b.c.d>]
 [-prune_delay <100-32767>]
 [-prune_delay_enable {1|0}]
 [-router_id <a.b.c.d>]
 [-router_id_step <a.b.c.d>]
 [-source_group_mapping {fully_meshed|one_to_one} ]
 [-type {remote_rp | c_bsr} ]
 [-vlan_cfi {1|0} ]
 [-vlan_id <0-4095> ]
 [-vlan_id_mode {fixed|increment}]
 [-vlan_id_step <1-4094>]
 [-vlan_user_priority <0-7>]
PIM Functions
779
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_cfi {1|0}]
 [-vlan_outer_id_mode {fixed|increment}]
 [-vlan_outer_id_step <1-4094>]
 [-vlan_outer_user_priority <0-7>]
 [-tunnel_handle <gre_tunnel_handle>]
Arguments:
 -bidir_capable
 Determines whether to send the BI-DIR option in Hello
 messages. Valid values are 0 (disabled) and 1 (enabled). The
 default is 0. If enabled, the BI-DIR option is included in
 the Hello messages. Spirent HLTAPI does not support the BI-
 DIR specification. However, Spirent HLTAPI does allow this
 option to be sent in the Hello message.
 -bs_period
 Specifies the frequency in seconds with which bootstrap
 messages are transmitted. This option is applicable only if
 the PIM session is configured as a candidate-bootstrap
 router (C-BSR). Possible values range from 1 to 3600. The
 default is 60.
 -c_bsr_priority
 Specifies the 8-bit priority of the emulated bootstrap
 router (BSR). Possible values range from 0 (lowest) to 255
 (highest). The default is 192 for "-mode create". This
 option is applicable only if the PIM session is configured
 as a candidate-bootstrap router (C-BSR).
 -c_bsr_rp_addr
 Defines a list of the Rendezvous Point (RP) addresses to use
 in Bootstrap messages of a simulated C-BSR. You must also
 specify the -c_bsr_rp_handle when using this argument. RP
 lists must be of the same length.
 -c_bsr_rp_holdtime
 Defines a list of the hold times specified by the candidate
 Rendezvous Point (RP) router to use in the Bootstrap
 messages of a simulated C-BSR. Possible values range from 1
 to 65535. The default is 150. RP lists must be of the same
 length. You must specify the -c_bsr_rp_handle to use this
 option.
 -c_bsr_rp_priority
 The priority specified by the candidate Rendezvous Point
 (RP) router. Possible values range from 0 to 255. The
 default is 0. RP lists must be of the same length. You
 must specify the -c_bsr_rp_handle to use this option.
 -c_rp_addr
 Specifies the IP address of the Rendezvous Point (RP) being
 used in C-RP-Advertisement. This option is applicable only
 if the PIM session is configured as a candidate Rendezvous
 Point router (C-RP).
 -c_rp_bsr_addr
 Specifies the IP address of the BSR to which the C-RP-
 Advertisement is sent. This option is applicable only
 if the PIM session is configured as a candidate Rendezvous
 Point router (C-RP).
 -c_rp_group_addr
 Defines multicast group address to advertise in C-RP-Adv
 messages of a simulated C-RP. This represents a multicast
 group for which the C-RP can serve as RP. No default. This
 argument is mandatory for create mode (-mode create). If it
 is a list, the size must be the same as
 -c_rp_group_prefix_len for create mode and the same as
 -c_rp_group_handle for modify mode. You must also specify
 the -c_rp_group_mode argument.
PIM Functions
780

 -c_rp_priority
 The priority specified by the candidate Rendezvous
 Point (RP) router. This value is sent as an option in the
 Hello message. Possible values range from 0 to 255. The
 default is 192 for create mode. This option is applicable
 only if the PIM session is configured as a candidate
 Rendezvous Point router (C-RP).
 -count
 Defines the number of PIM routers to create on the
 interface. Possible values range from 1 to 65535. The
 default is 1.
 -dr_priority
 The Designated Router (DR) priority of this router. This
 value is sent as an option in the Hello message. Possible
 values range from 1 to 4294967295. The default is 0.
 -group_pool_mode
 Specifies how the membership pool is used to process
 PIM messages. Possible values are send and register.

 send - Send Join/Prunes (downstream DR) messages.

 register - Send Register and NULL Register messages (source DR)
 and receive Stop-Register messages.

 The default value is send.

 -handle
 Specifies the PIM session of the router to create, modify,
 delete, enable or disable. For modify mode, specify only one
 handle. For delete, enable, disable,active or inactive, you can
 specify a list of handles. This argument is mandatory for
 modify,delete, disable, disable_all, active and inactive modes.
 (Please refer to the description of the -mode argument for more
 information)
 -hello_holdtime
 Defines the session expiration interval in seconds. The
 expiration interval determines how long to wait for a
 KEEPALIVE message before ending a PIM session for an
 emulated router. Spirent HLTAPI also uses the
 -hello_holdtime value to determine the interval between
 transmitted KEEPALIVE messages. The transmission interval is
 one-third of the session expiration interval. Possible
 values range from 1 to 65535. The default is 3.5 times the
 -hello_interval.
 -hello_interval
 Specifies the amount of time, in seconds, between Hello
 messages. Possible values range from 1 to 65535. The default
 is 30.
 -hello_max_delay
 Randomized interval, in seconds, for initial Hello message
 on boot up or triggered Hello message to a rebooting
 neighbor. Possible values range from 1 to 65535. The default
 is 5.
 -intf_ip_addr
 Specifies the IP address of the emulated PIM router on the
 test port. The default is the (first) tester IP address
 configured for the link between the test port and SUT
 interface.
 -intf_ip_addr_step
 Specifies the amount by which to increment the first
 interface IP address to generate each subsequent addresses
 for consecutive routers. The default (for "-mode create"
PIM Functions
781
 only) is 0.0.0.1 for IPv4 addresses and 0::0100 for IPv6
 addresses.
 -intf_prefix_length
 Specifies the length of the network prefix, which is the
 network part of the IP address. For example, 24 indicates
 that the first 24 bits of the IP address are shared by all
 devices in the network. Possible values for IPv4 addresses
 range from 1 to 32; the default is 24, Possible values for
 IPv6 addresses range from 1 to 128; the default is 64.

 -ip_version
 Specifies the IP version of the multicast traffic to be sent
 through the emulated PIM router. Possible values are 4 (for
 IPv4 address format) or 6 (for IPv6 address format). The
 default is 4.
 -join_prune_holdtime
 Specifies the hold time, in seconds, a receiving router must
 keep the Join state alive to advertise Join/Prune messages.
 Possible values range from 1 to 65535. The default is 3.5
 times the -join_prune_interval.
 -join_prune_interval
 Specifies the frequency, in seconds, at which Join/Prune
 messages (also called "t_periodic" in RFCs) are sent.
 Possible values range from 1 to 65535. The default is 60.
 -link_local_intf_ip_addr
 Specifies the link local address for the first session.
 The default is FE80::0.
 -link_local_intf_ip_addr_step
 Specifies the link local address step value. The default is
 0000::1
 -link_local_intf_prefix_len
 Specifies the length of the link local address prefix.
 Possible values for IPv6 addresses range from 1 to 128; the
 default is 64.
 -mac_address_start
 Specifies the MAC address for the first session created for
 the PIM configuration. The default is 00:10:94:00:00:02.
 -mode
 Specifies the action to perform. Possible values are create,
 delete, disable, disable_all, enable, enable_all or active,
 inactive. There is no default, you must specify a mode.
 The modes are described below:
 create - When -port_handle is provided, Spirent HLTAPI
 creates one or more emulated routers and starts router
 communication for those routers, or starts router
 traffic for existing routers associated with the
 specified port. To create routers, specify the
 -port_handle argument and additional arguments to
 supply address information for the emulated routers. To
 start existing routers, specify only the -port_handle
 and -mode arguments; in this case, Spirent HLTAPI
 starts communication for all PIM routers that are
 associated with the specified port. When -handle is
 provided, PIM session will be enabled over the
 specified device. In this case, the following options
 will be obsoleted:
 -count
 -mac_address_start
 -intf_ip_addr
 -intf_ip_addr_step
PIM Functions
782
 -intf_prefix_length
 -link_local_intf_ip_addr
 -link_local_intf_ip_addr_step
 -link_local_intf_prefix_len
 -gateway_ip_addr
 -gateway_ip_addr_step
 -router_id
 -router_id_step
 -vci
 -vci_step
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vpi
 -vpi_step
 -tunnel_handle
 -vlan_outer_id
 -vlan_outer_id_mode
 -vlan_outer_id_step
 -vlan_outer_user_priority
 modify - Changes the configuration for the emulated router
 identified by the -handle argument. You must specify a valid
 PIM session handle. See the description for -handle.
 delete - Deletes the PIM router specified in the -handle
 argument. You must specify a valid PIM session handle. (See
 the -handle argument description for more information.)
 active - Enables the PIM router specified by the -handle
 argument. You must specify a valid PIM session handle. (See
 the -handle argument description for more information.)
 inactive - Disables the PIM router specified by the -handle
 argument. You must specify a valid PIM session handle.
 (See the -handle argument description for more information.)
 The configuration for the router is retained when it is
 inactive and is available as configured if the router is
 active.
 Note: Most options are generally configured in create or
 modify mode. Specifying "-mode disable" or "-mode
 disable_all"is the same as specifying "-mode delete".
 Likewise, specifying "-mode enable" or "-mode enable_all" is
 the same as specifying "-mode create".
 -neighbor_intf_ip_addr
 A list of interface IP addresses of the PIM peer on the
 connected SUT interface. The default is the (first) SUT IP
 address configured for the link between the test port and
 SUT interface.
 -override_interval
 The delay interval (Join/Prune override interval), in
 milliseconds, for randomizing the transmission time of
 override messages. Possible values range from 100 to 0x7FFF.
 The default is 2500.
 -pim_mode
 Specifies the emulated router's PIM mode, which determines
 whether the PIM global router is running PIM-Sparse Mode
 (PIM-SM) or PIM-Source Specific Mode (PIM-SSM) and
 whether the group configuration is (S,G) or (*,G)+RP.
 Possible values are "sm" or "ssm":
 sm - The PIM-SM protocol exists exclusively between routers.
 Hosts (sources or receivers) do not participate in
 the protocol. PIM-SM shares many of the common
 characteristics of a routing protocol, such as
PIM Functions
783
 discovery messages, topology information, and error
 detection and notification. PIM-SM also differs from
 traditional protocols since it does not participate in
 any kind of exchange of databases.
 In PIM-SM mode, the router supports all three group
 types: (S,G), (*,*,RP), and (*,G). The default is sm.
 ssm - PIM Source Specific Mode is a method to augment PIM-SM
 multicast routing. PIM-SSM requires the first hop
 router to build shortest path trees to all possible
 destinations. This proposal bypasses the requirement
 for any rendezvous points. This is a way to simplify
 communications for smaller multicast groups. PIM-SSM is
 described in RFC 3569, "An Overview of Source-Specific
 Multicast (SSM)".
 In PIM-SSM mode, the router will not send Join/Prune
 messages for groups that are not (S,G). You cannot add
 (*,*,RP) or (*,G) groups.
 -port_handle
 The port on which to create the emulated PIM router. This
 handle is returned by the sth::connect function.
 (Please refer to the description of the -mode argument for more
 information)
 -prune_delay
 Expected message propagation delay (LAN prune delay) in
 milliseconds. Possible values range from 100 to 0x7FFF.
 The default is 500.
 -prune_delay_enable
 Enables or disables the LAN prune delay. Valid values are 0
 (disabled) and 1 (enable). The default is 0. Set this value
 to 1 to include the LAN Prune Delay option in PIM Hello
 messages.
 -router_id
 Identifies the emulated PIM router. The router ID is a 32-
 bit value, represented in dot notation. The default is
 192.85.1.3.
 -router_id_step
 The step size is the increment used to assign IDs to
 routers. Use the -router_id_step argument along with the
 -router_id and -count arguments to create PIM routers on the
 interface. You must specify a step value when the -count
 value is greater than 1. The default is 0.0.0.1.
 -source_group_mapping
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the distribution option from multicast groups to sources
 when adding PIM register groups. Possible values are fully_meshed
 and one_to_one.

 fully_meshed - Each source is messed with all multicast
 group addresses

 one_to_one - One source is paired with one multicast group

 The default value is one_to_one.

 -type
 Configures a PIM session router on a test port to simulate
 one of the following:
 - remote_rp: Designated Router using a remote rendezvous
 point router. This is the default value.
 - c_rp: C-RP (Candidate RP) that sends C-RP-Adv messages to
PIM Functions
784
 be elected RP. This option is not supported.
 - c_bsr: C-BSR (Candidate BootStrap Router) that sends
 Bootstrap messages to be elected BSR.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 1. If set to 0, it indicates
 Token Ring and packets are dropped by Ethernet ports. If set
 to 0, it indicates the network is Ethernet.
 -vlan_id
 The VLAN ID of the emulated router node. Possible values
 range from 0 to 4095. The default is 1.
 -vlan_id_mode
 Specifies VLAN ID assignment for multiple router
 configurations when -count is greater than 1. Valid values
 are "fixed" or "increment". If you specify "fixed", all of
 the routers will be assigned the same VLAN ID (the value of
 the -vlan_id argument). If you specify "increment", then
 Spirent HLTAPI assigns unique VLAN IDs. When you use
 increment mode, you must also specify the -vlan_id_step
 argument to define the increment value.
 -vlan_id_step
 The value that Spirent HLTAPI uses to increment the VLAN
 ID. You must specify this step when you use specify
 "increment" for the -vlan_id_mode argument and the router
 count (-count) is greater than 1. Possible step values range
 from 1 to 4094.
 -vlan_user_priority
 VLAN priority assigned to emulated router nodes on this
 port. Possible values range from 0 to 7. The default is 0.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id.
 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the Canonical Format Indicator (CFI)
 value is set for the VLAN outer header. Possible values
 are 0 or 1. The default is 0.
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when router count
 is greater than 1. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values
 range from 1 to 4094. You must specify this step when
 you specify "increment" for the -vlan_outer_id_mode argument.
 -vlan_outer_user_priority
PIM Functions
785
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -tunnel_handle
 Specifies the GRE tunnel handle, an array value, initialized
 by the emulation_gre_config command. The router sends traffic
 through this tunnel.
Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -c_bsr_addr
 -c_bsr_adv
 -c_bsr_group_addr
 -c_bsr_group_admin
 -c_bsr_group_bidir
 -c_bsr_group_prefix_len
 -c_bsr_rp_handle
 -c_bsr_rp_mode
 -c_rp_adv
 -c_rp_adv_holdtime
 -c_rp_adv_interval
 -c_rp_group_admin
 -c_rp_group_bidir
 -c_rp_group_handle
 -c_rp_group_mod
 -c_rp_group_prefix_len
 -gre_checksum_enable
 -gre_key_enable
 -gre_key_in
 -gre_key_out
 -keepalive_period
 -register_probe_time
 -register_suppression_time
 -mvpn_enable
 -mvpn_pe_count
 -mvpn_pe_ip
 -mvpn_pe_ip_incr
 -mvrf_count
 -default_mdt_ip
 -default_mdt_ip_incr
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle A handle or a list of handles that identify the routers created
 by the sth::emulation_pim_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_pim_config function creates, modifies, or deletes
 an emulated PIM router. Use the -mode argument to specify the action to
 perform. (See the -mode argument description for information about the
 actions.)
 When you create an emulated router, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated router will use for
 PIM communication. (The port handle value is contained in the keyed list
 returned by the connect function.)
 In addition to specifying the port, you must also specify one or more of
PIM Functions
786
 the following attributes which determine the protocols (routing and
 multicast traffic) and characteristics of the PIM communication:
 - The PIM mode (sm or ssm) (the -pim_mode argument)
 - The designated router priority (the -dr_priority argument)
 - The ID for the emulated router on the network (the -router_id argument)
 - The IP address for the PIM router (SUT) to communicate with (the
 -intf_ip_addr argument)
 - The IP version (IP_V4 or IP_V6) of the multicast traffic to be sent
 through the router (the -ip_version argument)
 Note: For IPv4 traffic, you also set the testerIp and ipv4PrefixLen
 attributes. For IPv6 traffic, you also set the ipv6TesterIp,
 ipv6TesterLinkLocal, and ipv6PrefixLen attributes.
 - Support for subinterface access to VLANs (see the -vlan* arguments)
 - Hello message settings (the -hello_holdtime, -hello_interval, and
 -hello_max_delay.arguments)
 - Prune/Join characteristics (the -prune_delay, -prune_delay_enable,
 -join_prune_holdtime, -override_interval, and -join_prune_interval
 arguments)
 - Neighbor configuration (the -neighbor_intf_ip_addr argument).
 - Bootstrap routing (the enableBSR, -c_bsr_priority, -c_bsr_rp_addr, and
 -bs_period, and -c_bsr_rp_holdtime arguments).
 - Additional arguments such as bi-directional transmission (the
 -bidir_capable argument)
 When you create a router, Spirent HLTAPI starts the router
 communication.
 Once you start sessions by creating routers, Spirent HLTAPI handles all
 of the message traffic for the emulated routers. During the test, use the
 sth::emulation_pim_control function to stop and re-start individual
 routers. To stop and start all of the routers associated with a particular
 port, use the disable and enable modes with the sth::emulation_pim_config
 function. After you have created the routers for your test, use the
 sth::emulation_pim_group_config function to set up routes.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a PIM router:
 set returnedString [::sth::emulation_pim_config \
 -port_handle $port1Handle \
 -mode "create" -pim_mode "sm" \
 -port_handle $port1Handle \
 -count 1 -ip_version 4 -type "remote_rp" \
 -router_id 41.1.0.2 -router_id_step 0.0.1.0 \
 -intf_ip_addr 41.1.0.2 -intf_ip_addr_step 0.0.1.0 \
 -intf_ip_prefix_len 24 \
 -mac_address_start 00:00:00:00:00:05 \
 -neighbor_intf_ip_addr {41.1.0.1} \
 -c_bsr_rp_addr 220.1.1.1 -c_bsr_priority 1 \
 -bidir_capable 0 \
 -bs_period 60 -dr_priority 1 \
 -hello_holdtime 105 -hello_interval 30 -hello_max_delay 30 \
 -join_prune_holdtime 210 -join_prune_interval 60 \
 -override_interval 100 \
 -prune_delay 100 -prune_delay_enable 1]
 The following example starts a PIM router:
PIM Functions
787
 keylget returnedString handle upStreamRtrList
 ::sth::emulation_pim_control \
 -mode start \
 -port_handle $port1Handle \
 -handle $upStreamRtrList
Sample output for example shown above:
 {router_id 41.1.0.2} {router_state NEIGHBOR} {upstream_neighbor_addr
 41.1.0.1} {j_p_pdu_rx 0.000000} {bsm_rx 1.000000} {j_p_pdu_tx 4.000000}
 {bsm_tx 0.000000} {hello_rx 2.000000} {crp_rx 0.000000} {hello_tx 3.000000}
 {group_assert_rx 0.000000} {s_g_join_rx 0.000000} {s_g_join_tx 0.000000}
 {handle router1} {reg_stop_rx 0.000000} {group_join_rx 0.000000}
 {duration 45.136785984} {group_join_tx 20.000000} {reg_rx 0.000000} {status
 1}
 The following example creates a PIM session over a provided device:
 puts "Config LDP--------------------"
 set routerStatus [sth::emulation_ldp_config -mode create \
 -port_handle $port1Handle \
 -intf_ip_addr 13.25.0.2\
 -loopback_ip_addr 13.25.0.1 \

 -gateway_ip_addr 13.25.0.1\
 -remote_ip_addr 13.25.0.2 \

 -graceful_recovery_timer 55 \
 -keepalive_interval 56 \
 -reconnect_time 57 \
 -recovery_time 58 \
 -egress_label_mode exnull \
 -label_adv on_demand \
 -bfd_registration 1 \
 ]
 puts "LDP: $routerStatus"
 keylget routerStatus handle router
 puts "Config PIM--------------------"
 set routerStatus [sth::emulation_pim_config -mode create \
 -handle $router\
 -type remote_rp \
 -ip_version 4 \
 -dr_priority 5 \
 ]
 puts "PIM: $routerStatus"
Sample output for example shown above:
 Config LDP--------------------
 LDP: {handle router1} {handles router1} {status 1}
 Config PIM--------------------
 PIM: {handle router1} {handles router1} {status 1}
 #### HLTAPI for Python ####
 To start the PIM router on the specified port:
 device_ret0 = sth.emulation_pim_config (
 mode = 'create',
 prune_delay = '500',
 hello_max_delay = '5',
 override_interval = '2500',
 prune_delay_enable = '1',
 c_bsr_rp_addr = '16.0.0.1',
 c_bsr_rp_holdtime = '150',
 c_bsr_rp_priority = '3',
 c_bsr_rp_mode = 'create',
 tunnel_handle = gre_ret,
 port_handle = port_handle[0],
PIM Functions
788
 vlan_cfi = '0',
 vlan_id = '100',
 vlan_user_priority = '7',
 vlan_outer_user_priority= '7',
 vlan_outer_cfi = '0',
 vlan_outer_id = '300',
 hello_interval = '30',
 ip_version = '4',
 bs_period = '60',
 hello_holdtime = '105',
 dr_priority = '1',
 join_prune_interval = '60',
 bidir_capable = '0',
 pim_mode = 'sm',
 join_prune_holdtime = '210',
 type = 'c_bsr',
 c_bsr_priority = '1',
 router_id = '100.0.0.1',
 mac_address_start = '00:10:94:00:00:01',
 intf_ip_addr = '12.85.1.3',
 intf_ip_prefix_len = '24',
 neighbor_intf_ip_addr= '12.85.1.4');
Sample Output: {'status': '1', 'handles': 'router1', 'handle': 'router1'}
 #### HLTAPI for Perl ####
 To start the PIM router on the specified port:
 my %device_ret0 = sth::emulation_pim_config (
 mode => 'create',
 prune_delay => '500',
 hello_max_delay => '5',
 override_interval => '2500',
 prune_delay_enable => '1',
 c_bsr_rp_addr => '16.0.0.1',
 c_bsr_rp_holdtime => '150',
 c_bsr_rp_priority => '3',
 c_bsr_rp_mode => 'create',
 tunnel_handle => "$gre_ret",
 port_handle => "$hport[1]",
 vlan_cfi => '0',
 vlan_id => '100',
 vlan_user_priority => '7',
 vlan_outer_user_priority=> '7',
 vlan_outer_cfi => '0',
 vlan_outer_id => '300',
 hello_interval => '30',
 ip_version => '4',
 bs_period => '60',
 hello_holdtime => '105',
 dr_priority => '1',
 join_prune_interval => '60',
 bidir_capable => '0',
 pim_mode => 'sm',
 join_prune_holdtime => '210',
 type => 'c_bsr',
 c_bsr_priority => '1',
 router_id => '100.0.0.1',
 mac_address_start => '00:10:94:00:00:01',
 intf_ip_addr => '12.85.1.3',
 intf_ip_prefix_len => '24',
 neighbor_intf_ip_addr=> '12.85.1.4');
Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'handles';
 $VAR4 = 'router1';
 $VAR5 = 'handle';
 $VAR6 = 'router1';
PIM Functions
789
Notes: None
End of Procedure Header
sth::emulation_pim_control
Name:
 sth::emulation_pim_control
Purpose:
 Starts or restarts a PIM router for the specified port, or stops a PIM
 router from routing traffic for the specified ports or groups.
Synopsis:
 sth::emulation_pim_control
 -mode {stop|start|restart|join|prune}
 -port_handle <handle>
 [-group_member_handle <handle>]
 [-handle <PIM_session_handle>]
Arguments:
 -group_member_handle
 Sets one or more group member pool handles.
 -handle
 Specifies the session(s) on which to take the specified
 action: stop the router, start or restart the router, and
 join or prune groups.
 -mode
 Specifies the action to be taken. Possible values are start,
 restart. join, or prune. This argument is mandatory.
 stop - Stops the router on the specified port
 start - Starts the router on the specified port.
 restart - Stops and then starts the router on the
 specified port.
 join - If "-handle <PIM_session_handle>" is specified, joins
 all groups on this session. If "-group_member_handle
 <group_handle>" is specified, joins only the specified
 groups. If no handle is provided, joins all of the
 session groups on this port.
 prune - If "-handle <PIM_session_handle>" is specified,
 prunes all groups on this session. If
 "-group_member_handle <handle>" is specified, prunes
 only the specified groups. If no handle is provided,
 prunes all of the session groups on this port.
 -port_handle
 Identifies the port on which to take the specified action:
 stop the router, start or restart the router, and join or
 prune groups. This argument is mandatory. If you did not
 specify a handle (-handle), the specified action (-mode) is
 applied to all session routers on this port. The port handle
 is returned by the sth::connect function.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
PIM Functions
790
 stopped Stopped (1) or Running (0)
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_pim_control function controls the routing of
 traffic through the specified ports. You can use the function to perform
 three actions: starting routers, stopping routers, and restarting routers.
 When you call the sth::emulation_pim_control function, you specify a port
 handle. Spirent HLTAPI applies the specified action to all of the sessions
 associated with the specified port.
Examples:
 #### HLTAPI for Tcl ####
 To start the PIM router on the specified port:
 ::sth::emulation_pim_control \
 -mode start \
 -handle router1
 -port $port1Handle
 To stop the PIM router on the specified port:
 ::sth::emulation_pim_control \
 -mode stop \
 -port $port1Handle
 To restart the PIM router on the specified port:
 ::sth::emulation_pim_control \
 -mode restart \
 -port $port1Handle
 To join.......
 ::sth::emulation_pim_control \
 -mode join \
 -port_handle $port1Handle \
 -handle $router \
 -group_member_handle $groupMemberHandle(1)
 To prune.............
 ::sth::emulation_pim_control \
 -mode prune \
 -port_handle $port1Handle \
 -handle $router \
 -group_member_handle $groupMemberHandle(2)
 Note that groupMemberHandle(1) must be created by the
 ::sth::emulation_pim_group_config function before using either join or
 prune mode..
 Sample Output:
 {router_id 41.1.0.2} {router_state NEIGHBOR} {upstream_neighbor_addr
 41.1.0.1} {j_p_pdu_rx 0.000000} {bsm_rx 1.000000} {j_p_pdu_tx 4.000000}
 {bsm_tx 0.000000} {hello_rx 2.000000} {crp_rx 0.000000} {hello_tx 3.000000}
 {group_assert_rx 0.000000} {s_g_join_rx 0.000000} {s_g_join_tx 0.000000}
 {handle router1} {reg_stop_rx 0.000000} {group_join_rx 0.000000}
 {duration 45.136785984} {group_join_tx 20.000000} {reg_rx 0.000000} {status
 1}
 #### HLTAPI for Python ####
 To start an LSR:
 ctrl_ret1 = sth.emulation_pim_control (
 port_handle = port_handle[0],
 mode = 'start');

 Sample Output: {'status': '1', 'handle': 'router1'}
 
PIM Functions
791
 #### HLTAPI for Perl ####
 To start an LSR:
 my %ctrl_ret1 = sth::emulation_pim_control (
 port_handle => "$hport[1]",
 mode => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'handle';
 $VAR4 = 'router1';
Notes: None
End of Procedure Header
sth::emulation_pim_group_config
Name:
 sth::emulation_pim_group_config
Purpose:
 Configures multicast groups added to a PIM session, which enables you to
 add (*,G) or (S,G) entries to a PIM session.
Synopsis:
 sth::emulation_pim_group_config
 -mode {create|modify|delete}
 [-group_pool_handle <handle>]
 [-session_handle <PIM_host_handle>]
 [-source_pool_handle <list of IP addresses]
 [-handle <PIM_group_membership_handle> ]
 [-interval <1-1000>]
 [-join_prune_per_interval <1-1000>]
 [-rate_control {0|1}]
 [-register_per_interval <1-1000>]
 [-register_stop_per_interval <1-1000>]
 [-rp_ip_addr <a.b.c.d>]
 [-wildcard_group {0|1}]
Arguments:
 -group_pool_handle
 Specifies the name of the group (that is, the list of
 multicast IP addresses) to link to the session during
 create mode. Before specifying the group pool handle, use
 the sth::emulation_multicast_group_config function to add
 the group pool. See "Multicast APIs" in the "Spirent
 TestCenter HLTAPI Command Reference" document for
 information about the sth::emulation_multicast_group_config
 and sth::emulation_multicast_source_config functions.
 -handle
 Sets group membership handle that associates group pools
 with a PIM host. The handle is returned after linking to the
 specified group pool in create mode. In modify mode, you
 must use the membership handle (-handle) in conjunction with
 the session handle (-session_handle) to identify the
 multicast group pools.
 Note: The PIM hosts, specified by -handle, join the
 multicast groups, specified by the -group_pool_handle. So,
 both arguments are mandatory for "-mode create", but
 -group_pool_handle is optional for "-mode modify".
PIM Functions
792
 -interval
 Specifies the minimum gap, in milliseconds, between
 between successive PIM messages. If you specify 0, Spirent
 HLTAPI sends PIM messages as fast as possible. Possible
 values range from 1 to 1000. The default is 1000.
 -join_prune_per_interval
 Specifies the number of Join/Prune messages sent per
 interval. Possible values range from 1 to 1000. The
 default is 1000.
 -mode
 Specifies the action to perform. Possible values are create,
 modify, and delete. There is no default; you must
 specify a mode. The modes are described below:
 create - Starts emulation on the port specified with
 -handle and associates an existing multicast group
 pool (-group_pool_handle) with the specified PIM host
 (that is, joins the membership).
 modify - Changes the configuration identified by the -handle
 argument by applying the parameters specified in
 subsequent arguments.
 delete - Remove one group of pools from this session.
 -rate_control
 Enables rate control on Join/Prune and register messages
 when set to 1 (enable). Possible values are 0 (disable) and
 1 (enable). The default is 0.
 -register_per_interval
 Specifies the number of Register messages sent per interval.
 Possible values range from 1 to 1000. The default is 100.
 -register_stop_per_interval
 Specifies the number of Register Stop messages sent per
 interval. Possible values range from 1 to 1000. The default
 is 100.
 -rp_ip_addr
 Specifies the IP address of Rendezvous Point router for the
 multicast group pool.
 -session_handle
 Specifies the handle of the PIM host on which to configure
 the PIM group ranges.
 -source_pool_handle
 Specifies the handle of the source pool (a list of non-multicast
 source IP addresses) to associate with the groups in mode create.
 Use this argument if the host requests only specific information
 within the multicast group specified by -group_pool_handle.
 Before specifying this argument, use the
 sth::emulation_multicast_source_config function to add source
 pools. See Multicast Functions for information about the
 sth::emulation_multicast_source_configand
 sth::emulation_multicast_group_config functions.
 -wildcard_group
 Specifies whether the emulated PIM router will join wildcard
 groups. Possible values are 1 (enable) and 0 (disable). When
 enabled, Join/Prune messages are sent. Wildcard groups
 take effect only when source-specific groups (S,G) are
 disabled (no source pool). The default is 0. For wildcard
 groups, you must specify the RPR address (-rp_ip_addr).
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
PIM Functions
793
 -border_bit
 -group_pool_mode
 -join_prune_aggregation_factor
 -s_g_rpt_group
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle
 Identifies the handle of the group (PIM_group_config_handle)
 created by the sth::emulation_pim_group_config function.
 group_pool_handle
 Identifies the group pool handle used by the
 sth::emulation_pim_group_config function to configure or modify
 the group member.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_pim_group_config function configures or
 modifies a group of PIM hosts where each group share a
 set of common characteristics. Use the -mode argument to specify
 the action to perform. (See the -mode argument description for information
 about the actions.)
 Before using this function, you must specify "-mode create" when
 configuring PIM host emulation on a port and initialize the port handle
 argument (using the sth::emulation_pim_config function).
 You can link groups of multicast IP addresses to any interested host or
 just a subset of IP addresses within each group.
Examples:
 #### HLTAPI for Tcl ####
 The following example configures the hosts, represented by
 "upStreamRtr", to subscribe to the multicast group(s) represented by
 "mcastGrpPoolHandle(1)":
 set returnedString [::sth::emulation_pim_group_config \
 -mode "create" \
 -group_pool_handle $mcastGrpPoolHandle(1) \
 -session_handle $upStreamRtr\
 -interval 0 \
 -rate_control 0 \
 -rp_ip_addr 220.1.1.1 \
 -wildcard_group 0]
 Sample output for example shown above:
 {handle pimv4groupblk1} {group_pool_handle ipv4group1} {status 1}
 #### HLTAPI for Python ####
 The following example configures the hosts, represented by
 "session_handle", to subscribe to the multicast group(s) represented by
 "group_pool_handle":
 device_ret0_pim_group2 = sth.emulation_pim_group_config (
 mode = 'create',
 session_handle = session_handle,
 group_pool_handle = group_pool_handle,
 interval = '1',
 rate_control = '1',
 join_prune_per_interval= '200',
 register_per_interval= '200',
PIM Functions
794
 register_stop_per_interval= '200',
 rp_ip_addr = '12.0.0.1');
 Sample Output: {'status': '1', 'group_pool_handle': 'ipv4group2', 'handle':
 'pimv4groupblk4', 'source_pool_handle': 'multicastSourcePool(2)'}
 #### HLTAPI for Perl ####
 The following example configures the hosts, represented by
 "session_handle", to subscribe to the multicast group(s) represented by
 "group_pool_handle":
 my %device_ret0_pim_group1 = sth::emulation_pim_group_config (
 mode => 'create',
 session_handle => "$session_handle",
 group_pool_handle => "$group_pool_handle",
 interval => '1',
 rate_control => '1',
 join_prune_per_interval=> '200',
 register_per_interval=> '200',
 register_stop_per_interval=> '200',
 rp_ip_addr => '12.0.0.1');
Sample Output:
 $VAR1 = 'group_pool_handle';
 $VAR2 = 'ipv4group1';
 $VAR3 = 'handle';
 $VAR4 = 'pimv4groupblk2';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'source_pool_handle';
 $VAR8 = 'multicastSourcePool(1)';
Notes:
 None
End of Procedure Header
sth::emulation_pim_info
Name:
 sth::emulation_pim_info
Purpose:
 Returns statistics about the PIM group activity on the specified handle.
 Statistics include the connection status and number and type of messages
 sent and received from the specified port.
Synopsis:
 sth::emulation_pim_info
 -handle <PIM_session_handle>
Arguments:
 -handle
 Specifies the PIM session handle upon which host emulation is
 configured. This argument is mandatory. This value is returned by
 the sth::emulation_pim_config function.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status
PIM Functions
795
 Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log
 Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null.
 bsm_tx
 Number of Bootstrap messages sent.
 bsm_rx
 Number of Bootstrap messages received.
 crp_tx
 Number of candidate Rendezvous Point (RP)
 Advertisements sent.
 crp_rx
 Number of candidate Rendezvous Point (RP)
 Advertisements received.
 hello_tx
 Number of PIM-Hello messages sent.
 hello_rx
 Number of PIM-Hello messages received.
 group_join_tx
 Number of (*,G) Join messages sent.
 group_join_rx
 Number of (*,G) Join messages received.
 j_p_pdu_tx
 Number of Join/Prune messages sent.
 j_p_pdu_rx
 Number of Join/Prune messages received.
 reg_tx
 Number of Register messages sent.
 reg_rx
 Number of Register messages received.
 reg_stop_tx
 Number of RegisterStop messages sent.
 reg_stop_rx
 Number of RegisterStop messages received.
 s_g_join_tx
 Number of (S,G) Join messages sent.
 s_g_join_rx
 Number of (S,G) Join messages received.
Cisco-specific Arguments:
 The following keys are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 duration
 s_g_assert_tx
 s_g_assert_rx
 null_reg_tx
 null_reg_rx
 bsm_rp_tx
 bsm_rp_rx
 bsm_group_tx
PIM Functions
796
 bsm_group_rx
 graft_tx
 graft_rx
 graft_ack_tx
 graft_ack_rx
 group_assert_tx
 group_assert_rx
 group_prune_tx
 group_prune_rx
 s_g_prune_tx
 s_g_prune_rx
Description:
 The sth::emulation_pim_info function provides information about the
 messages sent and received on the specified PIM handle.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples:
 When you call sth::emulation_PIM_info, the contents of the returned keyed
 list depends on the status of the call. For example:
 #### HLTAPI for Tcl ####
 sth::emulation_pim_info -handle $handle1
 Returns a list that contains one of the following:
 a) If the call is successful, the list contains stats and
 command execution status (in this case, a 1 indicating success).
 b) If the call fails, the list contains error log and command
 execution status (in this case, a 0 indicating failure).
 Sample Output:
 {router_id 41.1.0.2} {router_state NEIGHBOR} {upstream_neighbor_addr
 41.1.0.1} {j_p_pdu_rx 0.000000} {bsm_rx 1.000000} {j_p_pdu_tx 4.000000}
 {bsm_tx 0.000000} {hello_rx 2.000000} {crp_rx 0.000000} {hello_tx 3.000000}
 {group_assert_rx 0.000000} {s_g_join_rx 0.000000} {s_g_join_tx 0.000000}
 {handle router1} {reg_stop_rx 0.000000} {group_join_rx 0.000000}
 {duration 45.136785984} {group_join_tx 20.000000} {reg_rx 0.000000} {status
 1}
 #### HLTAPI for Python ####
 results_ret1 = sth.emulation_pim_info (
 handle = device);
 Sample Output:
 {'router_id': '100.0.0.1', 'status': '1', 'hello_tx': '1', 'handle': 'router1',
 'reg_stop_rx': '0', 'bsm_tx': '0', 'duration': '4.91211009026',
 'group_assert_rx': '0', 's_g_join_rx': '0', 'j_p_pdu_tx': '0',
 'upstream_neighbor_addr': '12.85.1.4', 'bsm_rx': '0', 's_g_join_tx': '0',
 'reg_rx': '0', 'crp_rx': '0', 'j_p_pdu_rx': '0', 'hello_rx': '0',
 'group_join_tx': '0', 'group_join_rx': '0', 'router_state': 'HELLO'}
 #### HLTAPI for Perl ####
 my %results_ret1 = sth::emulation_pim_info (
 handle => "$device");
Sample Output:
 $VAR1 = 'hello_tx';
 $VAR2 = '1';
 $VAR3 = 'group_assert_rx';
 $VAR4 = '0';
 $VAR5 = 'status';
 $VAR6 = '1';
PIM Functions
797
 $VAR7 = 'j_p_pdu_tx';
 $VAR8 = '0';
 $VAR9 = 'bsm_rx';
 $VAR10 = '0';
 $VAR11 = 'crp_rx';
 $VAR12 = '0';
 $VAR13 = 'hello_rx';
 $VAR14 = '0';
 $VAR15 = 'upstream_neighbor_addr';
 $VAR16 = '12.85.1.4';
 ...
Notes: None
End of Procedure Header
PING Functions
798
PING Functions
Functions:
sth::emulation_ping
sth::emulation_ping
Name:
 sth::emulation_ping
Purpose:
 Sends ICMP ECHO_REQUESTs from the specified test port and returns
 the PING results
Synopsis:
 sth::emulation_ping
 -host {a.b.c.d|<aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}
 [-handle <handle>]
 [-port_handle <portHandle>]
 [-count <integer>]
 [-interval <integer>]
 [-mac_address_start <aa:bb:cc:dd:ee:ff>]
Arguments:
 -port_handle
 Specifies the handle of the port from which to send
 ICMP ECHO_REQUESTs. This argument is mandatory.
 -handle
 Specifies the host handle from which to send ICMP
 ECHO_REQUESTs. For example, the handle received from
 function sth::interface_config.
 Note: -port_handle and -handle are mutually exclusive. It is
 mandatory to specify either of the two but not both.
 -count
 Specifies the number of ICMP ECHO_REQUEST messages to
 send as a fixed number of datagrams.
 -host
 Specifies the IPV4/IPv6 address or hostname of the host to ping.
 The value must be in IPv4 or IPv6 format. This argument is
 mandatory.
 -interval
 Specifies the interval in milliseconds between successive
 transmissions of ICMP ECHO_REQUEST packets.
 -mac_address_start
 Initial MAC address of the interfaces created for the PING
 configuration. This argument is only supported when -port_handle
 is specified.
Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -size
 -pad
PING Functions
799
 -ttl
 -vci
 -vpi
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 tx <integer>
 The cumulative number of transmitted packets
 rx <integer>
 The cumulative number of received packets
 max <integer>
 The maximum round-trip time in milliseconds
 min <integer>
 The minimum round-trip time in milliseconds
 avg <integer>
 The average round-trip time in milliseconds
 pct_loss <float>
 The cumulative percentage of lost packets
 count <integer>
 The number of received echo responses
 log
 Returns debugging information when the status is $FAILURE
 status
 Success (1) or failure (0) of the operation
Description:
 The sth::emulation_ping function verifies the connection between the test
 port and the specified host computer. It sends an ECHO request to the host,
 and then waits for a response. You can specify how many requests to send
 and at what intervals. The returned keyed list displays whether the ping
 was successful (that is, whether the host is available) as well as
 information about the packets transmitted and received and the time it took
 to send and receive them. Use PING to troubleshoot Internet connections.
Examples:

 The following example sends ICMP ECHO_REQUESTs from a specified port handle
 sth::emulation_ping -port_handle port1 -host 1.1.1.1
 Sample output:
 {status 1} {tx 10} {rx 10} {pct_loss 0%} {count 10} {min 0.473} {avg 0.598}
 {max 1.528}
 The following example uses an previously created host handle as the input:
 sth::emulation_ping -handle host1 -host 21.1.1.2 -count 4

 Sample Output:
 {status 1} {1 {{bytes 64} {replyfrom 21.1.1.2} {icmp_seq 1} {ttl 63}
 {time 3.866}}} {2 {{bytes 64} {replyfrom 21.1.1.2} {icmp_seq 2} {ttl 63}
 {time 2.464}}} {3 {{bytes 64} {replyfrom 21.1.1.2} {icmp_seq 3} {ttl 63}
 {time 2.450}}} {4 {{bytes 64} {replyfrom 21.1.1.2} {icmp_seq 4} {ttl 63}
 {time 2.513}}} {tx 4} {rx 4} {pct_loss 0.0%} {count 4} {min 2.450} {avg
 2.823} {max 3.866}

 The following example uses an previously created IPv6 host handle as the input:
 sth::emulation_ping -handle $handles -count 5 -host 2001::2

 Sample Output:
PING Functions
800
 {1 {{bytes 64} {replyfrom 2001} {icmp_seq 1} {ttl 64} {time 0.555}}} {2
 {{bytes 64} {replyfrom 2001} {icmp_seq 2} {ttl 64} {time 0.251}}} {3 {{bytes
 64} {replyfrom 2001} {icmp_seq 3} {ttl 64} {time 0.234}}} {4 {{bytes 64}
 {replyfrom 2001} {icmp_seq 4} {ttl 64} {time 0.226}}} {5 {{bytes 64} {replyfr
 om 2001} {icmp_seq 5} {ttl 64} {time 0.232}}} {tx 5} {rx 5} {pct_loss 0.0%}
 {count 5} {min 0.226} {avg 0.300} {max 0.555} {status 1}
Notes:
 None.
End of Procedure Header
PPP Functions
801
PPP Functions
Functions:
sth::ppp_config
sth::ppp_stats
sth::ppp_config
Name:
 sth::ppp_config
Purpose:
 Creates, brings up, or brings down an emulated IP-over-Point-to-Point
 Protocol-over-POS (PPP) session on a Spirent HLTAPI chassis.
 Point-to-Point Protocol is a protocol in Data Link layer. This protocol
 specifies a standard method of encapsulating multi-protocol datagrams for
 transport over serial point-to-point links between hosts, switches, and
 routers. Point-to-Point Protocol includes the assignment and management of IP
 addresses, as well as a Link Control Protocol (LCP) and Network Control
 Protocols (NCPs). It has built-in security mechanisms, such as the Challenge
 Handshake Authentication Protocol (CHAP) and the Password Authentication
 Protocol (PAP).
Synopsis:
 sth::ppp_config
 -action { config | up | down }
 [-port_handle <port_handle>]
 [-handle <ppp_session_handle>]
 [-local_auth_mode{ none | pap | chap }]
 [-password <1-32>]
 [-username <1-32>]
 [-chap_req_timeout <1-65535>]
 [-pap_max_req <1-65535>]
 [-pap_req_timeout <1-65535>]
 [-fsm_max_conf_req <1-65535>]
 [-fsm_max_naks <1-65535>]
 [-fsm_max_term_req <1-65535>]
 [-fsm_req_timeout <1-65535>]
 [-fcs_size {16 | 32}]
 [-ipv6_cp {0 | 1}]
 [-local_addr <a.b.c.d>]
 [-local_addr_given {0 | 1}]
 [-local_addr_override {0 | 1}]
 [-local_intf_id < aaaa:bbbb:cccc:dddd>]
 [-peer_addr <a.b.c.d>]
 [-peer_addr_given {0 | 1}]
 [-peer_addr_override {0 | 1}]
 [-peer_intf_id < aaaa:bbbb:cccc:dddd>]
 [-lcp_echo_interval <0-65535>]
 [-lcp_local_mru <128-65535>]
 [-local_fcs { 0 | 1}]
 [-local_magic {0 | 1}]
 [-local_mpls_cp {0 | 1}]
 [-local_mru {0 | 1}]
 [-local_osinl_cp {0 | 1}]
Arguments:
 -port_handle
 Specifies the port on which PPP emulation is
 configured.
 The following example configures PPP emulation on
 the specified port:
PPP Functions
802
 sth::ppp_config \
 -port_handle port1 \
 -action config \
 -local_auth_mode none \
 -action
 Specifies the action to be performed. This argument is
 mandatory. Possible values are described below:
 config - When you specify -action config and the
 -port_handle argument, Spirent HLTAPI will
 create a PPP emulation on the specified port.
 When you specify -action config and -handle
 argument, Spirent HLTAPI will modify the
 the parameters of the PPP emulation specified
 by the -handle argument.
 up - Brings the PPP session up.
 down - Brings the PPP session down.
 -handle
 Specifies the PPP emulation to modify. When you
 specify -action config and the -handle argument, you can
 modify the specified PPP emulation. You can get
 the handle value from the returned value of the
 "sth::ppp_config -port_handle -action config".

 The following example modifies a created PPP emulation:
 sth::ppp_config \
 -handle pppHandle\
 -action config \
 -local_auth_mode chap\
 -local_auth_mode
 Specifies the local authentication protocol as one of the
 following values. The default value is none.

 none - Specifies no authentication protocol.
 pap - Indicates the local authentication protocol to be
 used is the Password Authentication Protocol. PAP
 is a method of verifying and validating PPP
 clients. PAP uses a two-way handshake to verify
 the identity of a calling PPP client when the link
 is established. Please refer to RFC 1334 for more
 information.
 chap - Indicates the local authentication protocol to be
 used is the Challenge Handshake Authentication
 Protocol. Like PAP, CHAP is an
 authentication method of verifying and validating
 PPP clients. CHAP verifies the identity of calling
 PPP clients (both when the link is established and
 periodically afterward) by using a three-way
 handshake with challenge messages.
 Please refer to RFC 1994 for more information.
 -password
 Specifies the zero-byte-terminated password used by the
 optional Authentication Protocol. The maximum number
 of characters is 32. This argument is applicable only
 when you specify -local_auth_mode pap or
 -local_auth_mode chap. The default is spirent.
 -username
 Specifies the zero-byte-terminated user name used by the
 optional Authentication Protocol. The maximum number 
PPP Functions
803
 of characters is 32. This argument is applicable only
 when you specify -local_auth_mode pap or
 -local_auth_mode chap. The default is spirent.
 -chap_req_timeout
 Specifies the timeout value in seconds for the
 acknowledgment of a CHAP Challenge or Response
 message. Possible values range from 1 to 65535.
 The default value is 3 seconds.

 -pap_max_req
 Specifies the maximum number of PAP Authentication
 Requests that can be sent without acknowledgment.
 Possible values range from 1 to 65535. The default value
 is 10.
 -pap_req_timeout
 Specifies the timeout value in seconds for retransmitting
 a PAP Authentication Request message. Possible values
 range from 1 to 65535. The default value is 3 seconds.

 -fsm_max_conf_req
 Indicates the maximum number of Configure-Request
 packets that can be sent, without acknowledgment,
 before a session fails. Possible values range from 1 to
 65535. The default value is 10.
 -fsm_max_naks
 Indicates the maximum number of
 Negative-Acknowledgment packets allowed during LCP
 and NCP negotiation. Possible values range from
 1 to 65535. The default value is 5.

 -fsm_max_term_req
 Indicates the maximum number of Terminate-Request
 packets that can be sent, without acknowledgment,
 before a session fails. Possible values range from 1 to
 65535. The default is 10.
 -fsm_req_timeout
 Indicates the timeout value, measured in seconds, for
 acknowledgment of a Configure-Request packet.
 Possible values range from 1 to 65535. The default value
 is 3 seconds.
 -fcs_size
 Specifies the size of the frame check sequence (FCS)
 field. A FCS refers to the extra checksum characters
 added to a frame for error detection and correction.
 Possible values are 16 and 32. The default value is
 32. Use this argument only when -local_fcs is enabled.
 16 - Indicates the FCS field is 16 bits.
 32 - Indicates the FCS field is 32 bits.
 -ipv6_cp
 Determines whether to enable the IPv4 Control Protocol
 (IPv4CP) negotiation or the IPv6 Control Protocol
 (IPv6CP) negotiation in NCP phase. The IP Control
 Protocol (IPCP) configures, enables, and disables the IP
 protocol modules on both ends of the point-to-point link.
 Possible values are 0 and 1. When it is set to 0,
 IPv4CP negotiation is enabled. When it is set to 1,
 IPv6CP negotiation is enabled. The default value is 0.
 -local_addr
 Specifies the IPv4CP local address.
 The value of the argument must be in IPv4 format.
 When you set the address to 0.0.0.0, the peer will
PPP Functions
804
 provide its value. This argument is applicable only when
 -ipv6_cp is set to 0. The default value is 0.0.0.0.
 -local_addr_given
 Determines whether the local address that is set by
 -local_addr or -local_intf_id is to be negotiated.
 Possible values are 0 (disable) and 1 (enable).
 The default is 0. If this argument is set to 0, the
 local address will not be negotiated and the local address
 will be set by the peer.

 -local_addr_override
 Determines whether to allow the peer to override the
 local setting for the local IP address specified by
 -local_addr or -local_intf_id. Possible values are 0 and
 1. The default value is 0. If it is set to 1, it allows
 the remote end to override the local IP address
 compulsively. If it is set to 0, it does not allow the remote
 end to override the local IP address.
 When you specify -local_addr 0.0.0.0 or -local_intf_id
 0:0:0:0, -local_addr_override is automatically set to 1.
 -local_intf_id
 Specifies the IPv6CP 64-bit local interface identifier for
 the IPv6 Interface-Identifier configuration option.
 The value of this argument must be in hexadecimal
 format of "aaaa:bbbb:cccc:dddd". The IPv6CP 64-bit
 local interface identifier specified by this argument is
 the latter 64 bits of an IPv6 address. The first 64 bits
 is "fe80::" that indicates the IPv6 address is a local link
 address. Please refer to RFC 5072 for more information.
 This argument is applicable only when you set
 -ipv6_cp to 1. The default value is 0:0:0:0.
 -peer_addr
 Specifies the IPv4CP address of the remote end,
 if negotiation about the remote IP address is required.
 The value of this argument must be in IPv4 format.
 The default value is 0.0.0.0.
 See the description of the -local_addr option for more
 information.
 -peer_addr_given
 Specifies whether the peer IP address specified by
 -peer_addr or -peer_intf_id is to be negotiated.
 Possible values are 0 and 1. The default value is 0.
 When it is set to 1, the peer IP address is to
 be negotiated. If this argument is set to 0, the peer
 IP address will not be negotiated.
 -peer_addr_override
 Determines whether Spirent HLTAPI allows the peer to
 override the local setting for the peer IP address.
 Possible values are 0 (disable) and 1 (enable). The default
 value is 0. When it is set to 1, Spirent HLTAPI allows the
 peer to override the local setting for the peer IP address
 automatically.
 When you specify -peer_addr 0.0.0.0 or -peer_intf_id
 0:0:0:0, -peer_addr_override is automatically set to 1.
 -peer_intf_id
 Specifies the IPv6CP 64-bit remote interface identifier
 for the IPv6 Interface-Identifier configuration option.
 The value of this argument must be in hexadecimal
 format of "aaaa:bbbb:cccc:dddd". Please refer to
 -local_intf_id for more information.
 This argument is applicable only when you set
 -ipv6_cp to 1. The default value is 0:0:0:0.
 -lcp_echo_interval
PPP Functions
805
 Specifies the time, measured in seconds, between Echo
 Requests for link integrity. Possible values range from
 0 to 65535. The default value is 0, which disables
 the Echo Requests.
 -lcp_local_mru
 Specifies the Maximum Receive Unit (MRU) size in
 bytes for the local side. MRU is data sent to inform
 remote systems of the local system's maximum receive
 packet size. Possible values range from 128 to
 65535. The default value is 4096. This parameter is valid
 only if you set -local_mru to 1.
 -local_fcs
 Enables or disables the FCS for the
 local interface. Possible values are 0 (disable) and 1
 (enable). The default value is 0.
 -local_magic
 Enables or disables the magic number option, which is
 used to detect PPP loops. Possible values are 0 (disable)
 and 1 (enable). The default is 0.
 When this option is enabled, the local end
 sends a LCP Configure Request packet with the magic
 number option, which contains a randomly generated
 number. When the Configure Request packet from
 the peer is received, its magic number is compared
 with the sent magic number. If the magic numbers match,
 the path contains a loop. You must set this
 parameter to 0 for successful loopbacked PPP.
 -local_mpls_cp
 Enables or disables a control protocol for traffic going
 through MPLS tunnels. The control protocol is used with
 CR-LDP and RSVP routing emulation. Possible values
 are 0 (disable) and 1 (enable). When this argument is set
 to 1, the MPLS control protocol is enabled. The default
 value is 0.
 -local_mru
 Enables or disables the MRU negotiation.
 The MRU negotiation sets the size in bytes of the
 maximum receive unit for the local PPP session.
 Possible values are 0 and 1. When this option is
 set to 1, the MRU is negotiated. The default value is 0.
 -local_osinl_cp
 Enables or disables the Network Layer Control Protocol
 (NLCP) required for OSI protocols. Possible values are 0
 and 1. When it is set to 1, the OSINL control protocol is
 enabled. The default value is 0.
Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 -peer_auth_mode
 -chap_auth_interval
 -chap_max_challenge
 -pap_peer_req_timeout
 -holdoff
 -timeout
 -lcp_fcs_size
 -lcp_peer_max_tolerance
 -lcp_peer_mru
 -lcp_accm
 -local_accm
 -peer_accm
 -peer_fcs 
PPP Functions
806
 -peer_mru
 -vlan_outer_cfi
 -vlan_outer_tpid
 -vlan_outer_user_priority
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 handle A handle that identifies the PPP emulation created by the
 sth::ppp_config command.
Description:
 The sth::ppp_config function configures, brings up or brings down an
 emulated PPP session on a specified test port. Use the -port_handle
 argument to specify the port for the PPP session. Use the -action
 argument to specify the action to perform. (See the -action argument
 description for information about the actions.)
 The sth::ppp_config command provides two ways to indicate the PPP
 address used on the local end of the Point-to-Point link.
 You can configure the local IPv4 or IPv6 address directly by specifying
 the arguments below:
 -local_addr (-local_intf_id)
 -local_addr_given
 -local_addr_override

 In addition, when the local IPv4 address specified by -local_addr is
 0.0.0.0 or the -local_intf_id argument is set to 0:0:0:0, you can get the
 local address by negotiating with the peer end. You must specify the
 following arguments for the peer end in this case:
 -peer_addr (-peer_intf_id)
 -peer_addr_given
 -peer_addr_override
 You can refer to the examples below for more information.
Examples:
 #### HLTAPI for Tcl ####
 The following example configures PPP settings on the existing port:
 sth::ppp_config -port_handle port1 \
 -action config \
 -local_auth_mode chap \
 -username ss1 \
 -password ss1 \
 -ipv6_cp 0 \
 -local_addr 1.1.1.1 \
 -local_addr_given 1\
 -local_addr_override 0 \
 -local_magic 1 \
 -local_mru 1 \
 Sample output for example shown above: {handles host3} {status 1}

 The following example configures PPP settings for the local end
 which requires the peer to provide its local IPv4 address:
 sth::ppp_config -port_handle port1 \
 -action config \
 -local_auth_mode none \
 -ipv6_cp 0 \
 -local_addr 0.0.0.0 \
 -local_addr_given 1\
 -local_addr_override 1 \
 -local_magic 1 \
 -local_mru 1 \
PPP Functions
807
 The following example configures PPP settings for the remote end which
 will provide the IPv4 address for the local end:

 sth::ppp_config -port_handle port2 \
 -action config \
 -local_auth_mode none \
 -ipv6_cp 0 \
 -local_addr 2.2.2.2 \
 -local_addr_given 1\
 -local_addr_override 0 \
 -peer_addr 3.3.3.3 \
 -peer_addr_given 1 \
 -peer_addr_override 1 \
 -local_magic 1 \
 -local_mru 1 \
 The following example configures PPP IPv6CP settings on the existing port:
 sth::ppp_config -port_handle port1 \
 -action config \
 -local_auth_mode none \
 -ipv6_cp 1 \
 -local_intf_id 1:2:3:4 \
 -local_addr_given 1 \
 -local_addr_override 0 \
 -local_magic 1 \
 -local_mru 1 \
 Sample output for the example shown above: {handles host3} {status 1}
 The following example modifies the created PPP:
 sth::ppp_config -handle pppHandle \
 -action config \
 -chap_req_timeout 8 \
 -pap_max_req 8 \
 -pap_req_timeout 10 \
 -fsm_max_conf_req 13 \
 -fsm_max_naks 13 \
 -fsm_max_term_req 13 \
 -fsm_req_timeout 13 \
 -fcs_size 32 \
 Sample output for the example shown above: {handles host3} {status 1}
 The following example starts PPP session on the specified port:
 set returnedString [sth::ppp_config \
 -action up \
 -port_handle port1]
 Sample output for the example shown above: {status 1}
 The following example stops PPP session on the specified port:
 set returnedString [sth::ppp_config \
 -action down\
 -port_handle port1]
 Sample output for the example shown above: {status 1}
 #### HLTAPI for Python ####
 The following example configures PPP settings on the specified port:
 device_ret0 = sth.ppp_config (
 action = 'config',
 port_handle = port_handle[0],
 local_addr_given = '1',
 local_addr_override = '0',
PPP Functions
808
 peer_addr_given = '0',
 peer_addr_override = '1',
 local_mpls_cp = '0',
 local_osinl_cp = '0',
 lcp_echo_interval = '10',
 local_magic = '1',
 lcp_local_mru = '1492',
 pap_max_req = '10',
 local_mru = '1',
 peer_addr = '0.0.0.0',
 pap_req_timeout = '10',
 local_auth_mode = 'none',
 chap_req_timeout = '3',
 fsm_max_term_req = '10',
 fsm_req_timeout = '3',
 ipv6_cp = '0',
 fsm_max_conf_req = '10',
 fsm_max_naks = '5');
 Sample Output:
 {'status': '1', 'handle': 'host3'}
 #The following example starts PPP session on the specified port:
 ctrl_ret1 = sth.ppp_config (
 port_handle = port_handle[0],
 action = 'up');
 Output:
 {'status': '1'}
 #### HLTAPI for Perl ####
 The following example configures PPP settings on the specified port:
 my %device_ret0 = sth::ppp_config (
 action => 'config',
 port_handle => "$hport[1]",
 local_addr_given => '1',
 local_addr_override => '0',
 peer_addr_given => '0',
 peer_addr_override => '1',
 local_mpls_cp => '0',
 local_osinl_cp => '0',
 lcp_echo_interval => '10',
 local_magic => '1',
 lcp_local_mru => '1492',
 pap_max_req => '10',
 local_mru => '1',
 peer_addr => '0.0.0.0',
 pap_req_timeout => '10',
 local_auth_mode => 'none',
 chap_req_timeout => '3',
 fsm_max_term_req => '10',
 fsm_req_timeout => '3',
 ipv6_cp => '0',
 fsm_max_conf_req => '10',
 fsm_max_naks => '5');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host3'
 $VAR3 = 'status';
 $VAR4 = '1';
 #The following example starts PPP session on the specified port:

 my %ctrl_ret2 = sth::ppp_config (
 port_handle => "$hport[2]",
 action => 'up');
 Sample Output:
 $VAR1 = 'status';
PPP Functions
809
 $VAR2 = '1
Notes: None
End of Procedure Header
sth::ppp_stats
Name:
 sth::ppp_stats
Purpose:
 Returns the information about the PPP session.
Synopsis:
 sth::ppp_stats
 -action { collect | clear }
 -port_handle <port_handle>
Arguments:
 -action
 Determines whether to collect statistics or clear statistics.
 Possible values are collect and clear. This argument is
 mandatory.
 collect - Collects the statistics.
 clear - Clears the statistics.
 -port_handle
 Specifies from which port to query statistics. This
 argument is mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 The statistics that will be returned are listed below:
 *** POS interface statistics ***
 pos_port_state State of the PPP link
 Dead The PPP link is not up and is not ready to be
 established.
 Initialize The PPP link is initializing.
 Establish The port is trying to establish a link using the
 link control protocol.
 Authenticate The port is trying to authenticate itself with a
 peer using PAP or CHAP. Authentication is
 optional, so this state is not always displayed
 during link establishment.
 Network IPCP/IPv6CP negotiation was successful, and
 the PPP link is up.
 Disconnect PPP is terminating the link.
 lcp_or_ncp_state State of the link control protocol
 Initial The lower layer is unavailable, and no
 attempt has been made to open a link.
 Starting An attempt has been made to open a link, but
 the lower layer is unavailable.
 Closed The lower layer is available, but that there is 
PPP Functions
810
 no active attempt to open a link.
 Stopped The link is waiting for termination.
 Closing An attempt has been made to terminate the
 connection. A Terminate-Request packet has
 been sent, but a Terminate-Ack packet has
 not been received.
 Stopping A Terminate-Request packet has been sent,
 but a Terminate-Ack packet has not been
 received.
 Request Sent An attempt has been made to configure the
 connection. A Configure-Request packet has
 been sent, but a Configure-Ack packet has
 not been received nor sent.
 Ack Received A Configure-Request packet has been sent,
 and a Configure-Ack packet has been
 received.
 Ack Sent Both a Configure-Request packet and a
 Configure-Ack packet have been sent, but a
 Configure-Ack packet has not yet been
 received.
 Opened A Configure-Ack packet has been both sent
 and received.
 tx_mru_size Sent MRU size
 rx_mru_size Received MRU size
 pap_authentication_state State of CHAP authentication
 Initial The PPP link is down.
 Closed The link is not available and is not allowed
 to be opened.
 Pending An Authentication Request is being
 prepared.
 Opened PAP authentication passed and is up.
 Auth_failed Authentication was denied.
 Auth_req_sent An Authentication Request has been sent.
 chap_authentication_state State of PAP authentication
 Initial The CHAP authorization negotiation phase
 is not active.
 Started The client is waiting for a CHAP Challenge
 packet from the server.
 Pending The client received the challenge, sent a
 response, and is waiting for an
 acknowledgement from the server.
 Auth failed Authorization failed.
 Opened Authorization was successful.
 ipv4_cp_state State of the IP control protocol as it tries
 to bring up the IP layer on top of the PPP
 layer
 Initial The lower layer is unavailable, and no
 attempt has been made to open a link.
 Starting An attempt has been made to open a link,
 but the lower layer is unavailable.
 Closed The lower layer is available, but that there
 is no active attempt to open a link.
 Stopped The link is waiting for termination.
 Closing An attempt has been made to terminate the
 connection. A Terminate-Request packet
 has been sent, but a Terminate-Ack packet
 has not been received.
 Stopping This state indicates that a Terminate-Request
 packet has been sent, but a Terminate-Ack
 packet has not been received.
 Request Sent An attempt has been made to configure the
 connection. A Configure-Request packet has
 been sent, but a Configure-Ack packet has
 not been received nor sent.
 Ack Received A Configure-Request packet has been sent,
 and a Configure-Ack packet has been 
PPP Functions
811
 received.
 Ack Sent Both a Configure-Request packet and a
 Configure-Ack packet have been sent, but a
 Configure-Ack packet has not yet been
 received.
 Opened IPv4 is enabled on top of PPP.
 ipv4_local_address Local IPv4 address used for the interface
 ipv4_peer_address IPv4 address of the peer (PPP server)
 ipv6_cp_state State of the IPv6 control protocol as it tries
 to bring up the IP layer on top of the PPP
 layer.
 Initial The lower layer is unavailable, and no
 attempt has been made to open a link.
 Starting An attempt has been made to open a link,
 but the lower layer is unavailable.
 Closed The lower layer is available, but there
 is no active attempt to open a link.
 Stopped The link is waiting for termination.
 Closing An attempt has been made to terminate the
 connection. A Terminate-Request packet has
 been sent, but a Terminate-Ack packet has
 not been received.
 Stopping A Terminate-Request packet has been sent,
 but a Terminate-Ack packet has not been
 received.
 Request Sent An attempt has been made to configure the
 connection. A Configure-Request packet has
 been sent, but a Configure-Ack packet has
 not been received nor sent.
 Ack Received A Configure-Request packet has been sent,
 and a Configure-Ack packet has been
 received.
 Ack Sent Both a Configure-Request packet and a
 Configure-Ack packet have been sent, but a
 Configure-Ack packet has not yet been
 received.
 Opened IPv6 is enabled on top of PPP.
 ipv6_local_address Local IPv6 address used for the interface
 ipv6_peer_address IPv6 address of the peer (PPP server)
 pos_mpls_cp_state State of the MPLS control protocol
 (MPLSCP ) phase of the PPP
 connection
 Initial The lower layer is unavailable, and no
 attempt has been made to open a link.
 Starting An attempt has been made to open a link,
 but the lower layer is unavailable.
 Closed The lower layer is available, but there is
 no active attempt to open a link.
 Stopped The link is waiting for termination.
 Closing An attempt has been made to terminate the
 connection. A Terminate-Request packet has
 been sent, but a Terminate-Ack packet has
 not been received.
 Stopping A Terminate-Request packet has been sent,
 but a Terminate-Ack packet has not been
 received.
 Request Sent An attempt has been made to configure the
 connection. A Configure-Request packet has
 been sent, but a Configure-Ack packet has
 not been received nor sent.
 Ack Received A Configure-Request packet has been sent,
 and a Configure-Ack packet has been
 received.
 Ack Sent Both a Configure-Request packet and a
 Configure-Ack packet have been sent, but a 
PPP Functions
812
 Configure-Ack packet has not yet been
 received.
 Opened The MPLS protocol is enabled.
 pos_osi_nlcp_state State of the Network Layer Control
 Protocol required for OSI protocols
 (OSINLCP) phase of the PPP
 connection
 Initial The lower layer is unavailable, and no
 attempt has been made to open a link.
 Starting An attempt has been made to open a link,
 but the lower layer is unavailable.
 Closed This state indicates that the lower layer is
 available, but that there is no active attempt
 to open a link.
 Stopped This state indicates that the link is waiting
 for termination.
 Closing An attempt has been made to terminate the
 connection. A Terminate-Request packet has
 been sent, but a Terminate-Ack packet has
 not been received.
 Stopping A Terminate-Request packet has been sent,
 but a Terminate-Ack packet has not been
 received.
 Request Sent An attempt has been made to configure the
 connection. A Configure-Request packet has
 been sent, but a Configure-Ack packet has
 not been received nor sent.
 Ack Received A Configure-Request packet has been sent,
 and a Configure-Ack packet has been
 received.
 Ack Sent Both a Configure-Request packet and a
 Configure-Ack packet have been sent, but a
 Configure-Ack packet has not yet been
 received.
 Opened The OSI protocol is enabled.
Description:
 The sth::ppp_stats function collects or clears the statistics about the PPP
 session on the specified port.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0).
 Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples:
 #### HLTAPI for Tcl ####
 The following example collects statistics from port1.
 sth::ppp_stats \
 -action collect \
 -port_handle port1 \
 Sample output for the example shown above:
 {pos_osi_nlcp_state INITIAL} {tx_mru_size 1492}
 {ipv4_local_address 192.168.1.2} {chap_authentication_state INITIAL}
 {ipv6_local_address ::} {ipv4_cp_state OPENED}
 {pos_port_state NETWORK} {pos_mpls_cp_state INITIAL}
 {ipv6_cp_state INITIAL} {pap_authentication_state INITIAL}
 {ipv4_peer_address 192.168.1.6} {ipv6_peer_address ::}
 {rx_mru_size 1492} {lcp_or_ncp_state OPENED} {status 1}
 The following example clears the statistics about PPP session on port1:
 sth::ppp_stats \
 -action clear \
 -port_handle port1 \
PPP Functions
813
 Sample output for the example shown above: {status 1}
 #### HLTAPI for Python ####
 The following example collects statistics from the specified port:
 results_ret1 = sth.ppp_stats (
 port_handle = port_handle[0],
 action = 'collect');

 #### HLTAPI for Perl ####
 The following example collects statistics from the specified port:
 my %ctrl_ret1 = sth::ppp_config (
 port_handle => "$hport[1]",
 action => 'up');
Notes: This is a Spirent Extension command.
End of Procedure Header
PPPoX Functions
814
PPPoX Functions
Functions:
sth::pppox_config
sth::pppox_control
sth::pppox_stats

sth::pppox_config
Name:
 sth::pppox_config
Purpose:
 Configures PPPoE sessions for the specified Spirent HLTAPI port.
 The Point-to-Point Protocol (PPP) provides a method of transporting
 datagrams over point-to-point links between hosts, switches, and routers.
 Spirent HLTAPI supports Point-to-Point Protocol over Ethernet (PPPoE),
 Point-to-Point Protocol over ATM (PPPoA), and Point-to-Point Protocol over
 Ethernet over ATM (PPPoEoA).
Synopsis:
 sth::pppox_config
 -mode create -port_handle <handle> |
 -mode {modify|reset} -handle <session_block_handle>
 [-encap {ethernet_ii|ethernet_ii_vlan|ethernet_ii_qinq| vc_mux|llcsnap}]
 [-protocol {pppoe|pppoa|pppoeoa ]
 [-ac_select_mode <service_name>]
 [-agent_mac_addr <aa:bb:cc:dd:ee:ff> ]
 [-agent_session_id <session_id>]
 [-agent_type {2516 | dsl} ]
 [-attempt_rate <1-1000>]
 [-auth_mode {none|pap|chap|pap_or_chap}]
 [-username <username>]
 [-username_wildcard {0|1}]
 [-wildcard_pound_start<0-65535>]
 [-wildcard_pound_fill <0-9> ]
 [-wildcard_pound_end<0-65535>]
 [-wildcard_question_start <0-65535>]
 [-wildcard_question_fill <0-9> ]
 [-wildcard_question_end <0-65535>]
 [-password <password>]
 [-password_wildcard {0|1}]
 [-wildcard_pound_start<0-65535>]
 [-wildcard_pound_fill <0-9> ]
 [-wildcard_pound_end<0-65535>]
 [-wildcard_question_start <0-65535>]
 [-wildcard_question_fill <0-9> ]
 [-wildcard_question_end <0-65535>]
 [-auth_req_timeout <1-65535>]
 [-auto_retry {0|1}]
 [-chap_ack_timeout <1-65535> ]
 [-circuit_id_suffix_mode {none|incr}]
 [-circuit_id_incr_start <integer>]
 [-circuit_id_incr_step <integer>]
 [-circuit_id_incr_count <integer>]
 [-client_traffic_behavior {all_sessions_connected | ignore_failed_sessions}]
 [-config_req_timeout <1-65535>]
 [-max_configure_req <1-65535>]
 [-max_outstanding <2-65535>]
 [-max_terminate_req <1-65535>]
 [-device_block_mode {multi_device_per_block | one_device_per_block}]
 [-disconnect_rate <1-1000>]
 [-dut_assigned_src_addr 1]
PPPoX Functions
815
 [-echo_req 0]
 [-echo_req_interval <0-65535>]
 [-fsm_max_naks <1-65535> ]
 [-gateway_ip_addr <a.b.c.d>]
 [-gateway_ip_step <a.b.c.d>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-include_id {0|1}]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intermediate_agent {0|1}]
 [-ip_cp {ipv4_cp|ipv6_cp|ipv4v6_cp}]
 [-auto_fill_ipv6 {0|1}]
 [-ipcp_req_timeout <1-65535>]
 [-lcp_mru <128-65535>]
 [-local_magic {0|1}]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-max_auth_req <1-65535> ]
 [-max_auto_retry_count <1-65535> ]
 [-max_configure_req <1-65535> ]
 [-max_echo_acks <0-65535> ]
 [-max_ipcp_req <1-65535> ]
 [-max_padi_req <1-65535> ]
 [-max_padr_req <1-65535> ]
 [-mru_neg_enable {0|1}]
 [-num_sessions <1-65535>]
 [-padi_include_tag {0|1}]
 [-padi_req_timeout <1-65535>]
 [-padr_include_tag {0|1}]
 [-padr_req_timeout <1-65535>]
 [-pppoe_circuit_id < alphanumeric >]
 [-pppoe_remote_id < alphanumeric >]
 [-qinq_incr_mode {inner|outer|both}]
 [-qinq_oneblock {1|0}]
 [-remote_id_suffix_mode {none | incr }]
 [-remote_id_incr_start <integer>]
 [-remote_id_incr_step <integer>]
 [-remote_id_incr_count <integer>]
 [-service_name <name>]
 [-term_req_timeout <1-65535>]
 [-vci <0-65535>]
 [-vci_count <1-65536>]
 [-vci_step <0-65535>]
 [-vpi <0-255>]
 [-vpi_count <1-256>]
 [-vpi_step <0-255>]
 [-pvc_incr_mode {vpi|vci|both}]
 [-vlan_id <0-4095>]
 [-vlan_id_count <1-4095>]
 [-vlan_id_step <0-4095>]
 [-vlan_user_priority <0-7>]
 [-vlan_cfi {1|0}]
 [-vlan_id_outer <0-4095>]
 [-vlan_id_outer_count <1-4096>]
 [-vlan_id_outer_step <0-4095>]
 [-vlan_outer_user_priority <0-7>]
 [-vlan_outer_cfi{1|0}]
Arguments:
 -ac_select_list
 Use this option with -ac_select_mode only when the specified
 type of service is either ac_mac or ac_name. This option
 specifies the ac mac address and percentage pair as either
 00:11:00:00:00:11|50 or 00:11:00:00:00:12|50 or the ac name
 and percentage pair as either ciscoAC|60 or ciscoAC2|40.
 -ac_select_mode
 Specifies the type of service (ISP name, class or QoS)
PPPoX Functions
816
 requested. If blank, (not specified or empty
 string specified), any service is acceptable.
 There are various ways the AC can be selected based on
 the PADO received from AC. The default is an empty
 string.
 -agent_mac_addr
 Spirent Extension (for Spirent HLTAPI only).
 Enabled for RFC 2516-type relay agents only. The Relay Agent
 MAC address is the MAC address of the next hop from the
 subscriber client group to the access concentrator. Its
 format is aa:bb:cc:dd:ee:ff. The default is "" (empty
 String).
 -agent_session_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the session ID of the RFC2516-type relay agent
 (see -agent_type). Use wildcard characters to make each ID
 unique:
 @s - Session index associated with the PPPoX client.
 @b - Block (host/router) index
 @p - Port name
 @m - MAC address of the PPPoX client
 You can also include the following customizable substitution
 options:
 @x - Custom step setup in
 (start,count,step,zeropadding,stutter) format
 start - starting value
 count - number of values to generate
 step - amount to increment the start value when the start
 value must be stepped
 zeropadding - length the value should be padded to by
 prepending 0's
 stutter - number of times the session_id value should be repeated
 before applying the next step
 To include the "@" symbol in a relay agent option, use it
 twice:
 @@ - This must be used to include the textual "@" symbol in
 the string
 The default is "remote @m-@p-@g".
 Note: The relay remote ID (-agent_remote_id) and relay
 session ID (-agent_session_id) parameters are mutually
 exclusive.
 -agent_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of relay agent to use. Possible values
 are 2516 (for the RFC 2516-type of relay agent) and dsl (for
 the DSL-type of relay agent). The default is 2516.
 -attempt_rate
 Specifies the PPP attempt rate, in seconds, for all PPP
 session blocks on this port. Possible values range from 1 to
 1000. The default is 100. This is a port-wide option. Any
 subsequent use of this option on a port after the initial
 "-mode create" will overwrite any previous setting.
 -auth_mode
 Specifies the authentication mode. During the Link Control
 Protocol (LCP) phase, one peer may send an authentication
 challenge to the other. LCP supports two authentication
 protocols:
 - Password Authentication Protocol (PAP). PAP is a simple
PPPoX Functions
817
 authentication protocol in which a peer sends a
 password in response to the challenge.
 - Challenge Handshake Authentication Protocol (CHAP).
 CHAP is based on the message digest concept in which
 the PPPoE peers share a secret password value but do
 not send that value across the connection. A peer sends
 a challenge (containing a random number value), the
 challenged peer uses the challenge value together with
 the password to calculate a message digest value. The
 challenged peer returns a response containing the
 message digest. If the transmitted message digest
 matches the same calculation performed by the
 challenging peer, the connection setup can continue.
 Possible values are none, pap, chap, and pap_or_chap.
 none - No authentication.
 pap - PAP
 chap - CHAP MD5
 pap_or_chap - Automatically negotiated; accepts both PAP and
 CHAP offered by the DUT.
 The default is none.
 -auth_req_timeout
 Specifies the timeout wait period for the server to either
 send a CHAP challenge or time between the re-transmission of
 a PAP request. Possible values range from 1 to 65525
 seconds. The default is 3 seconds.
 -auto_retry
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables an automatic retry to connect failed PPP
 sessions. Possible values are 0 (disable) and 1 (enable).
 The default value is 0.
 -chap_ack_timeout
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the timeout wait period for the server to send an
 ACK to a challenge response. Possible values range from 1 to
 65525 seconds. The default is 3 seconds.
 -circuit_id_suffix_mode
 Defines the mode of circuit ID suffix that is appended to
 circuit ID name. Possible values are none and incr.
 The default is incr. The modes are described below:
 none - Indicates there is no circuit ID suffix.
 incr - Indicates the circuit ID suffix increments in
 the step specified in the -circuit_id_incr_step
 argument.
 Note: The list mode is not supported by Spirent HLTAPI.
 -circuit_id_incr_start
 Specifies the starting value of circuit ID suffix. The default
 is 0. You can specify this argument when
 -circuit_id_suffix_mode is incr.
 -circuit_id_incr_step
 Specifies the step size in which the circuit ID suffix
 increments. The default is 1. You can specify
 this argument when -circuit_id_suffix_mode is incr.
 -circuit_id_incr_count
 Defines the circuit ID suffix repeat value. The default
 is 1. You can specify this argument when
 -circuit_id_suffix_mode is set to incr.
PPPoX Functions
818
 -client_traffic_behavior
 Specifies how traffic should be handled based on the results of
 session connecting. Possible values are:

 all_sessions_connected - Start traffic only if all
 sessions are connected.

 ignore_failed_sessions - Ignore sessions that failed to connect.

 The default is all_sessions_connected. Note that it is a project
 level argument. If modified, all the PPPox clients will be
 impacted.
 -config_req_timeout
 Specifies the configuration timeout value in seconds. When
 this expires, another PPP Configure-Request packet will be
 sent, until the value defined for the -max_configure_req
 argument is reached. After that, the session is terminated.
 This is a port-wide option. Any subsequent use of this
 option on a port after the initial "-mode create" will
 overwrite any previous setting. Possible values range from 1
 to 65535. The default is 3. See also -max_configure_req.
 -device_block_mode
 Specifies how device blocks are allocated to represent the
 devices that are created. Possible values are described below:

 multi_device_per_block
 Creates multiple devices on one device block. If
 you specify this mode and set -num_sessions to
 10, Spirent HLTAPI creates one device block with
 a device count of 10.

 one_device_per_block
 Creates one device on one device block. If you
 specify this mode and set -num_sessions to 10,
 Spirent HLTAPI creates 10 device blocks, with a
 device count of 1 on each device block.

 The default value is multi_device_per_block.
 -disconnect_rate
 Specifies the PPP disconnect rate for all PPP session blocks
 on this port. Possible values range from 1 to 1000. The
 default is 1000. This is a port-wide option. Any subsequent
 use of this option on a port after the initial
 "-mode create" will overwrite any previous setting.
 -dut_assigned_src_addr
 The DUT assigned source address, which is always set to 1.
 The IP address is always assigned by the DUT.
 -echo_req
 Enables or disables echo requests. The default is 0
 (disables). Spirent HLTAPI does not allow you to change
 this value.
 -echo_req_interval
 Specifies the interval (in seconds) between sending out
 consecutive echo requests. Possible values range from 0 to 65525
 seconds. The default is 10 seconds.
 -encap
 Identifies the type of Layer2 encapsulation to use.
 Possible values are ethernet_ii, ethernet_ii_vlan,
 ethernet_ii_qinq, vc_mux and llcsnap.
 ethernet_ii, ethernet_ii_vlan, and ethernet_ii_qinq
 support Ethernet encapsulation, while vc_mux and
 llcsnap support ATM encapsulation.
 If you use the -vlan_* arguments to define a VLAN 
PPPoX Functions
819
 interface, you must set the L2 encapsulation type to
 ethernet_ii_vlan.
 If you use the -vlan_outer* arguments to define a Q-in-Q
 interface, you must set the L2 encapsulation type to
 ethernet_ii_qinq.
 If you use the -vci_* arguments and -vpi_* arguments
 to define a ATM interface, you must set the L2
 encapsulation type to vc_mux or llcsnap
 When the -protocol argument is set to pppoeoa, then both
 Ethernet and ATM encapsulation will be set. In this case, you can
 set the L2 encapsulation type to the combination of
 {ethernet_ii|ethernet_ii_vlan|ethernet_ii_qinq}
 and {vc_mux|llcsnap}.
 Note: If you modify the encapsulation value from encap
 ethernet_ii or ethernet_ii_vlan to ethernet_ii_qinq or vice
 versa (using "-mode modify"), you must resend all
 parameters. Otherwise, the parameters use their default
 values.
 The following example configures PPPoE for QinQ:
 sth::pppox_config -port_handle port1 \
 -mode create \
 -protocol pppoe \
 -encap ethernet_ii_qinq \
 -auth_mode pap \
 -include_id 1 \
 -num_sessions 15000 \
 -mac_addr 00.00.12.00.00.02 \
 -mac_addr_step 00.00.00.00.00.01 \
 -username spirent \
 -password spirent \
 -vlan_id 1 \
 -vlan_id_outer 10 \
 -vlan_id_count 3000 \
 -vlan_id_outer_count 5 \
 -vlan_id_step 1 \
 -vlan_id_outer_step 1 \
 -qinq_incr_mode inner \
 The following example configures PPPoEoA for VLAN:
 sth::pppox_config -port_handle port1 \
 -mode create \
 -protocol pppoeoa \
 -encap "ethernet_ii_vlan llcsnap ?\
 -auth_mode none\
 -include_id 1 \
 -num_sessions 15000 \
 -mac_addr 00.00.12.00.00.02 \
 -mac_addr_step 00.00.00.00.00.01 \
 -vlan_id 1 \
 -vlan_id_count 3000 \
 -vlan_id_step 1 \
 -fsm_max_naks
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum number of Negative-Acknowledgments
 allowed during LCP and NCP configuration/negotiation.
 Possible values range from 1 to 65535. The default is 5.
 -handle
 Specifies the handle of the PPPoE session group to use when
 -mode is set to "modify" or "reset." This argument is
 mandatory for modify mode only. The handle is returned by the
 sth::pppox_config function.
PPPoX Functions
820
 -include_id
 Specifies whether to include the CHAP ID in challenge
 messages. Possible values are:
 1 - The CHAP ID is included in challenge messages.
 0 - The CHAP ID is not included.
 The default is 0.
 -intermediate_agent
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the relay agent. Possible value are 0
 (disable the relay agent) or 1 (enable the relay agent).
 The default is 0.
 -ip_cp
 The IP Control Protocol (IPCP) version to enable. Possible
 values are ipv4_cp, ipv6_cp, and ipv4v6_cp. The default is
 ipv4_cp.
 ipv4_cp - Enables IPv4 addressing
 ipv6_cp - Enables IPv6 addressing
 ipv4v6_cp - Enables IPv4 and IPv6 addressing.
 -gateway_ip_addr
 Specifies the starting IPv4 gateway address of the emulated PPPoX
 client. The value must be in IPv4 format. This argument is
 available when -ip_cp is set to ipv4_cp or ipv4v6_cp.
 -gateway_ip_step
 Defines the increment used to generate IPv4 gateway addresses.
 The value must be in IPv4 format. This argument is available when
 -ip_cp is set to ipv4_cp or ipv4v6_cp.
 -gateway_ipv6_addr
 Defines the starting IPv6 gateway address of the emulated PPPoX
 client. The values must be in IPv6 format. This argument is
 available when -ip_cp is set to ipv6_cp or ipv4v6_cp.
 -gateway_ipv6_step
 Defines the increment used to generate gateway IPv6 addresses.
 The values must be in IPv6 format. This argument is
 available when -ip_cp is set to ipv6_cp or ipv4v6_cp.
 -intf_ip_addr
 Defines the starting IPv4 address of the emulated PPPoX client.
 The value must be in IPv4 format. This argument is
 available when -ip_cp is set to ipv4_cp.
 -intf_ip_addr_step
 Defines the increment used to generate IPv4 addresses. The
 value must be in IPv4 format. This argument is available
 when -ip_cp is set to ipv4_cp.
 -intf_ipv6_addr
 Defines the starting IPv6 address of the emulated PPPoX client.
 The value must be in IPv6 format. This argument is
 available when -ip_cp is set to ipv6_cp or ipv4v6_cp.
 -intf_ipv6_addr_step
 Defines the increment used to generate IPv6 addresses. The
 value must be in IPv6 format. This argument is available
 when -ip_cp is set to ipv6_cp or ipv4v6_cp.
 -auto_fill_ipv6
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables IPv6 auto filling. Possible value
 are 0 (disable) or 1 (enable). The default is 1.
 This option is available when the -ip_cp argument is set to ipv6_cp
 or ipv4v6_cp.
PPPoX Functions
821
 -ipcp_req_timeout
 Specifies the timeout value (in seconds) for acknowledgment
 of an NCP Configure-Request. Possible values range from 1 to
 65535 seconds. The default value is 3 seconds.
 -lcp_mru
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the local maximum receive unit (MRU) size in
 bytes. Possible values range from 128 to 65535. For PPPoE,
 the MRU size cannot exceed 65535. The default is 1492. This
 is a port-wide option. Any subsequent use of this option on
 a port after the initial "-mode create" will overwrite any
 previous setting.
 -local_magic
 Enables or disables the use of the magic number for
 detection of data link layer errors. This argument is used
 for loop back detection. Possible values are 0 (disable
 magic number) and 1 (enable magic number). The default is 1.
 This is a port-wide option. Any subsequent use of this
 option on a port after the initial "-mode create" will
 overwrite any previous setting.
 -mac_addr
 Specifies the starting value for the MAC address. The
 default is 00-10-94-01-00-01.
 -mac_addr_step
 Specifies the step value applied to the base MAC address.
 The default is 00:00:00:00:00:01
 -max_auth_req
 Specifies the maximum number of authentication requests that
 can be sent without getting an authentication response from
 the DUT. Possible values range from 1 to 65535. The default
 is 5.
 -max_auto_retry_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum number of automatic retry attempts.
 Possible values range from 1 to 65535. The default is 65535.
 -max_configure_req
 Specifies the maximum number of times a PPP Configure-
 Request packet can be sent without a response before a
 session fails. Possible values range from 1 to 65535. The
 default is 5. See also -config_req_timeout, This is a
 port-wide option. Any subsequent use of this option on a
 port after the initial "-mode create" will overwrite
 any previous setting.
 -max_echo_acks
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum number of consecutive, unanswered echo
 request to send before failing the subscriber session.
 Possible values range from 0 to 65535. The default is 3. If
 you specify 0 for this argument, echo requests are disabled.
 Specifying any other number enables echo requests on the
 port; this is the same as setting -echo_req to 1. See also
 -echo_req and -term_req_timeout.
 -max_ipcp_req
 Specifies the maximum number of NCP Configure-Requests that
 can be sent without acknowledgement before a session fails.
 Possible values range from 1 to 65535. The default is 10.
 See also -term_req_timeout.
 -max_outstanding
 Specifies the maximum number of sessions that can be
 connecting or disconnecting at one time for all PPP session
 blocks on this port. Possible values range from 2 to 65535.
PPPoX Functions
822
 The default is 100. This is a port-wide option. Any
 subsequent use of this option on a port after the initial
 "-mode create" will overwrite any previous setting.
 -max_padi_req
 Specifies the maximum number of PADI packets that can be
 sent without acknowledgment before a session fails. Possible
 values range from 1 to 65535. The default is 5.
 -max_padr_req
 Specifies the maximum number of PADR packets that can be
 sent without acknowledgment before a session fails. Possible
 values range from 1 to 65535. The default is 5.
 -max_terminate_req
 Specifies the maximum number of times a PPP Terminate-
 Request packet can be sent before a session fails. Possible
 values range from 1 to 65535. The default is 10. See also
 -term_req_timeout.
 -mode
 Specifies the action to perform. Possible values are create,
 modify, and reset. This argument is mandatory. The modes are
 described below:
 create - Configures the PPPoE sessions on the port specified
 with the -port_handle argument. The first "-mode
 create" argument also creates the PPPoE port object.
 modify - Changes the configuration for the PPPoE port and
 session block identified by the -handle argument.
 You must use the new handle returned by
 "sth::pppox_config -mode modify" in all subsequent
 sth::pppox_stats and sth::pppox_control functions
 because the old handle is no longer valid. This
 new handle replaces the handle returned by
 "sth::pppox_config -mode create -handle <handle>".
 Example:
 sth::pppox_config -mode modify -handle host2
 -username spirent -password spirent
 {status 1} {handles host3} {port_handle port1}
 {pppoe_port pppoxportconfig1} {pppoe_session
 pppoeclientblockconfig2} {procName sth::pppox_config}
 If you have configured either IGMP over PPPoX and
 modify sth::pppox_config, you must also modify the IGMP
 handle to accept the new handle as well. (See the usage
 examples provided for sth::emulation_igmp_config.)
 Note: When modifying PPPoX sessions, only modify
 sth::pppox_config when the aggregate.idle flag
 returned by sth::pppox_stats is 1 and no sessions are
 connected.
 reset - Deletes the session block associated with the handle
 name. To re-connect and re-start, you must reconfigure
 your settings.
 IMPORTANT:
 Before using "sth::pppox_config -mode reset", you must
 first delete all traffic streams with the
 "sth::traffic_config -mode reset" command. Traffic
 streams must be reset before PPPoX can be reset.
 -mru_neg_enable
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables MRU negotiation. Possible value are 0
 (disable) or 1 (enable). The default is 1.
PPPoX Functions
823
 -num_sessions
 The number of PPPoE clients to emulate. Possible values range
 from 1 to 65535. The default is 1.
 Note: If the value of -encap is set to "ethernet_ii_vlan",
 then the value of -num_sessions must be divided evenly
 by value of -vlan_id_count.
 If the value of -encap is set to "ethernet_ii_qinq"
 then the value of -num_sessions must be divided evenly
 by the least common multiple of vlan_id_count and
 vlan_id_outer_count.
 Likewise, if the value of -encap is set to " vc_mux"
 or "llcsnap", then the value of -num_sessions must be divided
 evenly by the least common multiple of vpi_count and
 vci_count.
 -padi_include_tag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to include the relay agent tags in
 transmitted PADI messages. Possible values are 0 (do not
 include relay agent tags in PADI messages) or 1 (include
 relay agent tags in PADI messages). The default is 1.
 -padi_req_timeout
 Specifies the timeout value (in seconds) for acknowledgment
 of a PADI packet. Possible values range from 1 to 65535. The
 default is 3.
 -padr_include_tag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to include the relay agent tags in
 transmitted PADR messages. Possible values are 0 (do not
 include relay agent tags in PADR messages) or 1 (include
 relay agent tags in PADR messages). The default is 1.
 -padr_req_timeout
 Specifies the timeout value (in seconds) for acknowledgment
 of a PADR packet. Possible values range from 1 to 65535. The
 default is 3.
 -pppoe_circuit_id
 Defines the circuit ID name. The default is "circuit". The
 value must be in alphanumeric format.
 -pppoe_remote_id
 Defines the remote ID name. The default is "remote". The
 value must be in alphanumeric format.
 -password
 Specifies the string base from which the passwords are
 generated (for example, Password#) when the authentication
 mode is pap, chap, or pap_or_chap (see -auth_mode). The
 default is "pass". See Notes for information about using
 wildcards in passwords.
 -password_wildcard
 Enables wildcard substitution in the -password argument.
 Possible values are 0 (false) and 1 (true). If the value is
 set to 1, any wildcards used in -password are replaced with
 the corresponding values for -wildcard_pound_start,
 wildcard_pound_end, wildcard_question_start and
 -wildcard_question_end. If the value is 0, wildcards are not
 replaced in the specified password. The default is 0.
 -port_handle
 Specifies the handle of the port on which to create the
 PPPoE port and session block when -mode is set to "create".
 This argument is mandatory for create mode only. Specifies
 the port handle is returned by the sth::interface_config
 function.
PPPoX Functions
824
 -protocol
 Specifies the type of protocol to use.
 The possible values are pppoe, pppoa, and pppoeoa.
 The default value is pppoe.
 -qinq_incr_mode
 Determines which VLAN ID to increment first. Possible values
 are:
 inner - increment the inner VLAN ID before the outer VLAN ID
 outer - increment the outer VLAN ID before the inner VLAN ID
 both - increment both the inner and outer VLAN ID at the
 same time
 The default is outer.
 -qinq_oneblock
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether Spirent TestCenter creates Q-in-Q (802.1q
 Tunnel Tags) hosts with one handle returned. When it is set to 1,
 Spirent TestCenter creates multiple Q-in-Q hosts with one
 handle returned instead of returning multiple handles. You can
 configure all the generated hosts at one time by specifying this
 handle. Possible values are 0 (disabled) and 1 (enabled).The default
 value is 0.
 -remote_id_suffix_mode
 Defines the mode of remote ID suffix that is appended to
 remote ID name. Possible values are none and incr.
 The default is incr. The modes are described below:
 none - Indicates there is no remote ID suffix.
 incr - Indicates the remote ID suffix increments
 in the step specified in the -remote_id_incr_step
 argument.
 Notes: The list mode is not supported by Spirent HLTAPI.
 -remote_id_incr_start
 Specifies the starting value of remote ID suffix. The default
 is 0. You can specify this argument when
 -remote_id_suffix_mode is incr.
 -remote_id_incr_step
 Specifies the step size in which the remote ID suffix
 increments. The default is 1. You can specify
 this argument when -remote_id_suffix_mode is incr.
 -remote_id_incr_count
 Defines the remote ID suffix repeat value. The default
 is 1. You can specify this argument when
 -remote_id_suffix_mode is incr.
 -service_name
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the service (ISP name, class, or QoS) requested.
 If you do not specify a service name or specify an empty
 string, Spirent HLTAPI will accept any service.
 -term_req_timeout
 The maximum amount of time (in seconds) that the
 termination process can take before another PPP Terminate-
 Request packet is sent. If there is no response, another
 packet is sent until the value defined for the
 -max_terminate_req argument is reached, and then the session
 is terminated. Possible values range from 1 to 65535.
 The default is 10. See also -max_terminate_req.
 -username
 The string base from which the usernames are generated
PPPoX Functions
825
 (for example, User#) when the authentication mode is
 pap, chap, or pap_or_chap (see -auth_mode). The default is
 "anonymous". See Notes for information about using wildcards
 in passwords.
 -username_wildcard
 Enables wildcard substitution in the -username argument.
 Possible values are 0 (false) and 1 (true). If the value
 is set to 1, any wildcards used in -username are replaced
 with the corresponding values according to
 -willcard_pound_start, -wildcard_pound_end,
 -wildcard_question_start and -wilcard_question_end. If the
 value is 0, wildcards are not replaced. The default is 0.
 -pvc_incr_mode
 Determines which ID to increment first. Possible
 values are:
 vci - Increments the VC ID before the Virtual Path (VP) ID
 vpi - Increments the VP ID before the Virtual Circuit (VC)ID
 both - Increments both the VP and VC ID at the same time
 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
 range from 0 to 65535.
 -vci_count
 The number of VCI to use when generating PPPoE clients. The
 value must be less than num_sessions.
 -vci_step
 Specifies the step size in which the VCI value is
 incremented. Possible values range from 0 to 65535.
 The default value is 0.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values are 0 to 255.
 -vpi_count
 The number of VPI to use when generating PPPoE clients. The
 value must be less than num_sessions.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are from 0 to 255. The default
 value is 0.
 -vlan_id
 The first inner VLAN ID to use when generating PPPoE
 clients. Possible values range from 0 to 4095. The default
 is 1.
 -vlan_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Defines the VLAN Canonical Format Indicator (CFI).
 The possible values are 1 and 0. The default value
 is 0.
 -vlan_id_count
 The number of inner VLAN IDs to use when generating PPPoE
 clients. Spirent HLTAPI assigns VLAN membership in
 round-robin fashion. If the value of -encap is set to
 "ethernet_ii_vlan", then the value of -num_sessions must be
 divided evenly by the value of -vlan_id_count. Possible values
 range from 1 to 4096. The default is 1.
 -vlan_id_outer
 The first outer VLAN ID to use when generating PPPoE
 clients. This ID only applies to PPPoE w/Stacked VLAN.
 Possible values range from 0 to 4095. The default is 1.
PPPoX Functions
826
 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Defines the outer VLAN CFI. The possible values are 1 and 0. The
 default value is 0.
 -vlan_id_outer_count
 The number of outer VLAN IDs to use when generating PPPoE
 clients. Spirent HLTAPI assigns VLAN membership in
 round-robin fashion. The VLAN count must divide evenly into
 the number of sessions. The VLAN count cannot be greater
 than the session count. Possible values range from 1 to
 4096. The default is 1.
 -vlan_id_outer_step
 The value that Spirent HLTAPI uses to increment the
 outer VLAN ID. Possible step values range from 0 to 4095.
 The default is 0.
 -vlan_id_step
 The value that Spirent HLTAPI uses to increment the
 inner VLAN ID. Possible step values range from 0 to 4095.
 The default is 0.
 -vlan_user_priority
 Specifies the inner VLAN priority to assign to the specified
 port. Possible values range from 0 to 7. The default is 0.
 -vlan_outer_user_priority
 Specifies the outer VLAN priority to assign to the specified
 port. Possible values range from 0 to 7. The default is 0.
 -wildcard_pound_fill
 Spirent Extension (for Spirent HLTAPI only).
 Wildcard fill character for -wildcard_pound_start
 and -wildcard_pound_end. If 0, the numbers are replaced
 without leading zeroes. Otherwise, leading zeroes are added
 to ensure that the number is at least the specified number
 of digits wide. Possible values range from 0 to 9. The
 default is 0. See Notes for more about using wildcards.
 -wildcard_question_fill
 Spirent Extension (for Spirent HLTAPI only).
 Wildcard fill character for -wildcard_question_start and
 -wildcard_question_end. If 0, the numbers are replaced
 without leading zeroes. Otherwise, leading zeroes are added
 to ensure that the number is at least the specified number
 of digits wide. Possible values range from 0 to 9. The
 default is 0. See Notes for more about using wildcards.
 -wildcard_pound_start
 Starting numerical value to replace the wildcard pound (#)
 character in user names and passwords, such as user# or
 pwd#. Possible values range from 0 to 65535. The default is
 1. See Notes for more about using wildcards.
 -wildcard_pound_end
 Final numerical value to replace the wildcard pound (#)
 character in user names and passwords, such as user# or
 pwd#. Possible values range from 0 to 65535. The default is
 1. See Notes for more about using wildcards.
 -wildcard_question_start
 Starting numerical value to replace the wildcard question
 mark character in user names and passwords. Possible values
 range from 0 to 65535. The default is 1. See Notes for more
 about using wildcards.
 -wildcard_question_end
 Final numerical value to replace the wildcard question
 mark character in user names and passwords. Possible values
 range from 0 to 65535. The default is 1. See Notes for more
PPPoX Functions
827
 about using wildcards.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.

 -qinq_incr_mode
 -qinq_oneblock
 -apply
 -reset_mode
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -echo_rsp
 -sessions_per_vc
 -vlan_user_priority_count
 -vlan_user_priority_step
 -circuit_id_suffix_list
 -remote_id_suffix_list
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles Identifies the PPPoE session block handle (or group) returned
 by the "sth::pppox_config -mode create" function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::pppox_config function creates or modifies an emulated PPPoE
 session block. Use the -mode argument to specify the action to perform.
 (See the -mode argument description for information about the actions.)
 Note: Modifying any option during a PPPoE session which currently is a
 member of a multicast group will sever the PPPoE session, IGMP host, and
 multicast group relationship. Therefore, do not use sth::pppox_config while
 sessions are connected to prevent aborting the PPPoX engine. To see if
 sessions are connected, look at the aggregate.idle flag returned by
 "sth::pppox_stats -mode aggregate". If aggregate.idle is "0", then do not
 send sth::pppox_config. If the PPPoX engine is aborted, you will need to
 reconfigure the PPPoX session. If using IGMP over PPPoX, you will also need
 to reconfigure the IGMP session.
 When you create a PPPoE session block, you must use the -port_handle
 argument to specify the Spirent HLTAPI port that the emulated PPPoE
 session block will use for PPPoE communication. (The port handle value is
 contained in the keyed list returned by the sth::connect function.)
 Use the -mode create argument to define the characteristics of a PPPoE
 session block. You can use a single session block to emulate multiple PPPoE
 clients.
 In addition to specifying the port handle (-port_handle), you must also
 provide one or more of the following arguments when you create a PPPoE
 session block, or use their default values:
 -num_sessions (the number of PPPoE clients to emulate)
 -mac_addr (starting value for the MAC address)
 -mac_addr_step (increment used to generate additional MAC addresses for
 multiple clients)
PPPoX Functions
828
 -auth_mode (authentication style)
 -include_id (include or exclude the CHAP ID in challenge messages)
 -username (if specifying an authentication style)
 -password (if specifying an authentication style)
 For a detailed description of PPPoE encapsulation, see "RFC 2516
 - A Method for Transmitting PPP Over Ethernet (PPPoE)".
 For an example of how to configure PPPoE traffic, see the documentation for
 sth::traffic_config.
Examples:
 #### HLTAPI for Tcl ####
 The following example configures a PPPoE session:
 sth::pppox_config -port_handle $p0 \
 -mode create \
 -protocol pppoe \
 -encap ethernet_ii \
 -local_magic 1 \
 -max_configure_req 5 \
 -max_terminate_req 10 \
 -attempt_rate 100 \
 -disconnect_rate 100 \
 -max_outstanding 100 \
 -num_sessions 1 \
 -mac_addr $mac_addr \
 -username $username \
 -password $password
 Output for example shown above:
 {status 1} {port_handle port1} {handles host2} {pppoe_port \
 pppoeportconfig1}\
 {pppoe_host host2}{pppoe_session pppoeclientblkconfig1} {procName \
 sth::pppox_config}
 The following example configures multiple PPPoE sessions:
 set pppHandles ""
 for {set i 1} {$i <= $num_blocks} {incr i} {
 set rL [sth::pppox_config -port_handle port1 \
 -mode create \
 -protocol pppoe \
 -encap ethernet_ii \
 -num_sessions $num_sessions \
 ]
 #Create a list of PPPoX handles
 keylget rL handles pppHandle
 lappend pppHandles $pppHandle
 }
 # Connect all PPPoX handles in list
 set rL [sth::pppox_control -handle $pppHandles -action connect]
 #### HLTAPI for Python ####
 The following example configures one PPPoE session:
 device_ret0 = sth.pppox_config (
 mode = 'create',
 encap = 'ethernet_ii_vlan',
 protocol = 'pppoe',
 username_wildcard = '1',
 wildcard_pound_start= '1',
 wildcard_pound_end = '3',
 ac_select_mode = 'service_name',
 circuit_id_suffix_mode= 'incr',
PPPoX Functions
829
 circuit_id_incr_start= '1',
 circuit_id_incr_step= '3',
 circuit_id_incr_count= '3',
 remote_id_suffix_mode= 'none',
 port_handle = port_handle[0],
 max_outstanding = '100',
 disconnect_rate = '1000',
 attempt_rate = '100',
 pppoe_circuit_id = 'circuit',
 mru_neg_enable = '1',
 max_configure_req = '10',
 chap_ack_timeout = '3',
 max_padi_req = '10',
 padi_include_tag = '1',
 padr_req_timeout = '3',
 max_terminate_req = '10',
 term_req_timeout = '3',
 username = 'spirent#',
 use_partial_block_state= 'false',
 max_auto_retry_count= '65535',
 agent_session_id = 'remote',
 agent_type = 'dsl',
 max_ipcp_req = '10',
 intermediate_agent = '1',
 echo_req_interval = '10',
 password = 'spirent',
 local_magic = '1',
 config_req_timeout = '3',
 active = '1',
 auto_retry = 'false',
 padi_req_timeout = '3',
 agent_mac_addr = '00:00:00:00:00:00',
 lcp_mru = '1492',
 ip_cp = 'ipv4_cp',
 auto_fill_ipv6 = '1',
 max_echo_acks = '0',
 auth_mode = 'chap',
 include_id = '1',
 ipcp_req_timeout = '3',
 pppoe_remote_id = 'remote',
 max_padr_req = '10',
 padr_include_tag = '1',
 echo_req = 'false',
 fsm_max_naks = '5',
 vlan_cfi = '0',
 vlan_id = '100',
 vlan_user_priority = '7',
 vlan_id_step = '0',
 num_sessions = '1',
 mac_addr = '00:10:94:00:00:01',
 mac_addr_repeat = '0',
 mac_addr_step = '00:00:00:00:00:01',
 intf_ip_addr = '192.85.1.3',
 gateway_ip_addr = '192.85.1.1',
 intf_ip_addr_step = '0.0.0.1',
 gateway_ip_step = '0.0.0.0');
Sample Output:
 {'status': '1', 'pppoe_session': 'pppoeclientblockconfig1',
 'handles': 'host4', 'handle': 'host4',
 'procName': 'sth::pppox_config', 'pppoe_port': 'pppoxportconfig1',
 'port_handle': 'port1'}
 #### HLTAPI for Perl ####
 The following example configures one PPPoE session:
 my %device_ret0 = sth::pppox_config (
 mode => 'create',
 encap => 'ethernet_ii_vlan',
 protocol => 'pppoe',
 username_wildcard => '1',
PPPoX Functions
830
 wildcard_pound_start=> '1',
 wildcard_pound_end => '3',
 ac_select_mode => 'service_name',
 circuit_id_suffix_mode=> 'incr',
 circuit_id_incr_start=> '1',
 circuit_id_incr_step=> '3',
 circuit_id_incr_count=> '3',
 remote_id_suffix_mode=> 'none',
 port_handle => "$hport[1]",
 max_outstanding => '100',
 disconnect_rate => '1000',
 attempt_rate => '100',
 pppoe_circuit_id => 'circuit',
 mru_neg_enable => '1',
 max_configure_req => '10',
 chap_ack_timeout => '3',
 max_padi_req => '10',
 padi_include_tag => '1',
 padr_req_timeout => '3',
 max_terminate_req => '10',
 term_req_timeout => '3',
 username => 'spirent#',
 use_partial_block_state=> 'false',
 max_auto_retry_count=> '65535',
 agent_session_id => 'remote',
 agent_type => 'dsl',
 max_ipcp_req => '10',
 intermediate_agent => '1',
 echo_req_interval => '10',
 password => 'spirent',
 local_magic => '1',
 config_req_timeout => '3',
 active => '1',
 auto_retry => 'false',
 padi_req_timeout => '3',
 agent_mac_addr => '00:00:00:00:00:00',
 lcp_mru => '1492',
 ip_cp => 'ipv4_cp',
 auto_fill_ipv6 => '1',
 max_echo_acks => '0',
 auth_mode => 'chap',
 include_id => '1',
 ipcp_req_timeout => '3',
 pppoe_remote_id => 'remote',
 max_padr_req => '10',
 padr_include_tag => '1',
 echo_req => 'false',
 fsm_max_naks => '5',
 vlan_cfi => '0',
 vlan_id => '100',
 vlan_user_priority => '7',
 vlan_id_step => '0',
 num_sessions => '1',
 mac_addr => '00:10:94:00:00:01',
 mac_addr_repeat => '0',
 mac_addr_step => '00:00:00:00:00:01',
 intf_ip_addr => '192.85.1.3',
 gateway_ip_addr => '192.85.1.1',
 intf_ip_addr_step => '0.0.0.1',
 gateway_ip_step => '0.0.0.0');
Sample Output:
 $VAR1 = 'procName';
 $VAR2 = 'sth::pppox_config';
 $VAR3 = 'pppoe_port';
 $VAR4 = 'pppoxportconfig1';
 $VAR5 = 'pppoe_session';
 $VAR6 = 'pppoeclientblockconfig1';
 $VAR7 = 'handle';
 $VAR8 = 'host4';
PPPoX Functions
831
 $VAR9 = 'handles';
 $VAR10 = 'host4';
 $VAR11 = 'status';
 $VAR12 = '1';
 $VAR13 = 'port_handle';
 $VAR14 = 'port1';
Notes:
 You can generate outgoing usernames and passwords based on wildcard
 replacements. The following example generates 50 user names and
 passwords:
 sth::pppox_config -port_handle $p0 \
 -mode create -protocol pppoe -encap ethernet_ii \
 -num_sessions $num_sessions \
 -username User# \
 -password Pass? \
 -wildcard_pound_start 1 \
 -wildcard_pound_end 50 \
 -wildcard_question_start 1 \
 -wildcard_question_end 50 \
 The # character represents a counter. For example, define a counter to
 start at 1 (-wildcard_pound_start 1), run to 50 (-wildcard_pound_end), and
 increment by 1. Then, in the -username argument, specify user#, which would
 be replaced with User1, User2, and so on, when authentication begins.
 The wildcard is replaced with a counter, starting at 1. For example,
 User becomes User1, User2, and so on. If you do not specify, then
 no substitution will take place.
End of Procedure Header
sth::pppox_control
Name:
 sth::pppox_control
Purpose:
 Connects, disconnects, pauses, resumes, retries, or resets the PPPoE
 sessions for the specified session block.
Synopsis:
 sth::pppox_control
 -action {connect|disconnect|retry|reset|pause|resume|clear}
 [-handle <handle>]
Arguments:
 -action Specifies the action to perform. Possible values are
 connect, disconnect, reset, retry, pause, resume, and clear.
 You must specify one of these values. The modes are
 described below:
 connect - Establishes all PPPoX sessions on the specified
 session block.
 disconnect - Disconnects all established PPPoX sessions from
 the specified session block.
 retry - Attempts to connect failed PPPoX sessions on the
 port. You can only use the retry command after the
 sessions have finished attempting to connect (that is,
 the stats show that either aggregate.idle or
 aggregate.connected is 1).
 reset - Terminates the port. This action does not reset the
PPPoX Functions
832
 defaults nor does it attempt to re-connect. To re-
 connect to the port, you must reconfigure the session
 block.
 pause - Pause all PPPoX sessions that are connecting or
 disconnecting.
 resume - Resume PPPoX sessions that were paused with
 "-action pause" while connecting or disconnecting.
 clear - Clears the PPPoX statistics for the port. You can
 only use this command after the sessions have been
 disconnected (that is, aggregate.idle is 1). You
 cannot clear the PPPoX port statistics while
 sessions are currently connected (that is,
 aggregate.connected is 1).
 abort - Aborts all PPPoX sessions and resets the PPP
 emulation engine (without bringing the sessions
 back up) on the specified device.
 Note: Use "sth::pppox_control -action clear" and
 "sth::pppox_control -action retry" only while sessions are
 in the idle state. To see if the PPPoX engine is in the idle
 state, look at the aggregate.idle flag returned by
 "sth::pppox_stats -mode aggregate". If aggregate.idle is
 "0", then do not send this command.
 -handle
 Identifies the session block on which to connect,
 disconnect, reset, retry, pause, resume, or clear the PPPoX
 sessions.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The pppox_control function stops or starts PPPoE session blocks.
 You can use the function to perform the following actions: connecting,
 disconnecting, resetting, retrying, pausing, resuming, or clearing PPPoE
 sessions. When you call the pppox_control function, you specify a handle.
 You can check the aggregate.idle and aggregate.connected fields returned
 by "sth::pppox_stats -mode aggregate" to see when all sessions have
 finished connecting or disconnecting. If the aggregate.idle or
 aggregate.connected values are equal to 1, then you can send the
 sth::pppox_control connect, retry, disconnect, pause, or resume actions
 again. When the aggregate.connected value is 1, you can disconnect the
 PPPoX sessions with "sth::pppox_control -handle <handle> -action
 disconnect". If configuring and connecting multiple PPPoX handles,
 configure all the handles before connecting PPPoE. Do not call
 sth::pppox_config while aggregate.connecting, aggregate.connected, or
 aggregate.disconnecting are equal to 1.
 Example usage:
 # Connect PPPoX sessions
 set rL [sth::pppox_control -action connect -handle $pppHandles]
 # Wait until aggregate.connected is 1
 for {set i 0} {$i < $max} {incr i} {
 after 10000
 set rL [sth::pppox_stats -mode aggregate -handle $pppHandles]
 keylget rL aggregate.connected connected
 if {$connected == 1} {
 break
PPPoX Functions
833
 }
 }
 # You can now call connect, retry, disconnect, pause, or resume
 # actions again.
 set rL [sth::pppox_control -action disconnect -handle $pppHandles]
 While in either the aggregate.connecting, aggregate.connected, or
 aggregate.disconnecting state, the PPPoE engine cannot accept newly
 configured PPPoE session blocks. Therefore, if you plan to configure and
 bring up multiple PPPoX groups, configure all the PPPoE session blocks
 before connecting PPPoE sessions.
Examples:
 #### HLTAPI for Tcl ####
 To connect a PPPoE session:
 sth::pppox_control -handle host2 -action connect
 Output for above example:
 {status 1} {procName sth::pppox_control} {handles host2}
 To connect multiple PPPoX handles:
 set rL [sth::pppox_control -handle $pppHandles -action connect]
 To disconnect a PPPoE session:
 sth::pppox_control -handle host2 -action disconnect
 Output for above example:
 {status 1} {procName sth::pppox_control} {handles host2}
 #### HLTAPI for Python ####
 To connect a list of PPPoX handles:
 device_list = [device_ret0['handle'].split()[0],device_ret1['handle'].split()[0]]
 ctrl_ret1 = sth.pppox_control (
 handle = device_list,
 action = 'connect');
 Sample Output:
 {'status': '1', 'procName': 'sth::pppox_control', 'handles': 'host4 host6'}
 #### HLTAPI for Perl ####
 To connect a list of PPPoX handles:
 my $device_list = "$device_ret0{handle}[0] $device_ret1{handle}[0]";
 my %ctrl_ret1 = sth::pppox_control (
 handle => "$$device_list",
 action => 'connect');
 Sample Output:
 $VAR1 = 'procName';
 $VAR2 = 'sth::pppox_control';
 $VAR3 = 'handles';
 $VAR4 = 'host4 host6';
 $VAR5 = 'status';
 $VAR6 = '1';
Notes:
 None
End of Procedure Header
PPPoX Functions
834
sth::pppox_stats
Name:
 sth::pppox_stats
Purpose:
 Returns PPPoE port statistics associated with the specified port.
 Statistics include the connection status and number and type of messages
 sent and received from the specified port.
Synopsis:
 sth::pppox_stats
 -handle <PPPoE_session_block_handle>
 -mode {aggregate | session}
Arguments:
 -handle
 Specifies the handle of the PPPoE session block for which you
 want to retrieve PPPoE port statistics. The -handle argument is
 mandatory.
 -mode
 Specifies the type of statistics to return in the keyed list. The
 -mode argument is mandatory. Possible values are aggregate or
 session:
 aggregate - retrieves transmitted and received statistics for all
 PPPoE sessions associated with the specified port and a
 status value (1 for success).
 session - retrieves transmitted and received statistics for only
 the PPPoE sessions specified with -handle.
 Note: Session statistics are only valid after the PPPoE sessions\
 are established. They will not be returned nor accessible until
 you are connected.
Cisco-specific Arguments:
 Although the -retry option is supported by Spirent HLTAPI, we
 strongly recommend that you use "sth::pppox_control -action retry" instead.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 Following is a keyed list showing the types of keys returned based on the
 mode you specified.
 TclX keyed list
 key value
 --- -----
 status 1 | 0
 log Error message if command returns {status 0}
 *** Aggregate stats ***
 aggregate.atm_mode Specifies whether the port is in ATM mode
 (currently not supported)
 aggregate.avg_setup_time........Average time mandatory to bring a session up
 aggregate.chap_auth_rsp_tx......Number of CHAP messages sent
 aggregate.chap_auth_chal_rx.....The number of CHAP messages received*
 aggregate.chap_auth_succ_rx......The number of CHAP messages received*
 aggregate.chap_auth_fail_rx......The number of CHAP messages received*
 aggregate.connecting............PPPoE clients that are connecting. If
 aggregate.connecting is 1, then there are
 sessions connecting on the port.
 aggregate.connected.............All sessions that have finished with NCP
PPPoX Functions
835
 negotiation. If aggregate.connected is 1,
 then PPPoX has finished attempting all
 configured PPPoX sessions.
 aggregate.idle..................The sessions have been disconnected or
 terminated. If aggregate.idle is 1, then
 the port state is idle.
 aggregate.disconnecting.........If aggregate.disconnecting is 1, then PPPoX
 sessions are disconnecting.
 aggregate.connect_attempts......Number of sessions attempted
 aggregate.connect_success.......Number of sessions that connected
 successfully
 aggregate.disconnect_failed.....Number of sessions that failed to
 disconnect
 aggregate.disconnect_success....Number of sessions that disconnected
 successfully
 aggregate.echo_req_rx...........Number of Echo Requests received
 aggregate.echo_rsp_tx...........Number of Echo Replies sent
 aggregate.ipcp_cfg_ack_rx.......Total number of IPCP messages received*
 aggregate.ipcp_cfg_ack_tx.......Total number of IPCP messages sent*
 aggregate.ipcp_cfg_nak_rx.......Total number of IPCP messages received*
 aggregate.ipcp_cfg_nak_tx.......Total number of IPCP messages sent*
 aggregate.ipcp_cfg_rej_rx.......Total number of IPCP messages received*
 aggregate.ipcp_cfg_rej_tx.......Total number of IPCP messages sent*
 aggregate.ipcp_cfg_req_rx.......Total number of IPCP messages received*
 aggregate.lcp_cfg_req_rx........Number of LCP Configure-Request messages
 received
 aggregate.lcp_cfg_req_tx........Number of LCP Configure-Request messages
 sent
 aggregate.lcp_cfg_rej_rx........Number of LCP Configure-Reject messages
 received
 aggregate.lcp_cfg_rej_tx........Number of LCP Configure-Reject messages
 sent
 aggregate.lcp_cfg_ack_rx........Number of LCP Configure-ACK messages
 received
 aggregate.lcp_cfg_ack_tx........Number of LCP Configure-ACK messages
 sent
 aggregate.lcp_cfg_nak_rx........Number of LCP Configure-NAK messages
 received
 aggregate.lcp_cfg_nak_tx........Number of LCP Configure-NAK messages sent
 aggregate.max_setup_time........Maximum time mandatory to bring a session
 up
 aggregate.min_setup_time........Minimum time mandatory to bring a session up
 aggregate.num_sessions..........Number of sessions configured
 aggregate.padi_rx...............Number of PADI messages received
 aggregate.padi_tx...............Number of PADI messages sent
 aggregate.pado_rx...............Number of PADO messages received
 aggregate.padr_tx...............Number of PADR messages sent
 aggregate.pads_rx...............Number of PADS messages received
 aggregate.padt_tx...............Number of PADT messages sent
 aggregate.padt_rx...............Number of PADT messages received
 aggregate.pap_auth_ack_rx.......Number of PAP ACK messages received
 aggregate.pap_auth_nak_rx.......Number of PAP NAK messages received
 aggregate.pap_auth_req_tx.......Number of PAP Request messages sent
 aggregate.retry_count...........Number of sessions that have been retried
 using the Retry function
 aggregate.sessions_up...........Number of sessions currently active
 aggregate.sessions_down.........Number of sessions that failed to connect
 aggregate.success_setup_rate....Number of sessions per second that have
 been established
 aggregate.term_ack_rx...........Number of LCP Terminate-ACK messages
 received
 aggregate.term_ack_tx...........Number of LCP Terminate-ACK messages
 sent
 aggregate.term_req_rx...........Number of LCP Terminate-Request messages
 received
 aggregate.term_req_tx...........Number of LCP Terminate-Request messages
 sent
PPPoX Functions
836
 *** Session Statistics ***
 session.<session ID>.attempted
 Number of times this session was attempted
 session.<session ID>.chap_auth_chal_rx
 Total number of CHAP responses received*
 session.<session ID>.chap_auth_fail_rx
 Total number of CHAP responses received *
 session.<session ID>.chap_auth_rsp_tx
 Total number of CHAP responses sent*
 session.<session ID>.chap_auth_succ_rx
 Total number of CHAP responses received *
 session.<session ID>.completed
 Number of times this session was
 successfully connected and disconnected
 session.<session ID>.connect_success
 Number of times this session was
 successfully connected and disconnected
 session.<session ID>.echo_req_rx
 Total number of Echo-Request packets
 received
 session.<session ID>.echo_rsp_tx
 Total number of Echo-Reply packets sent
 session.<session ID>.failed_connect
 Number of times this session failed to
 connect
 session.<session ID>.failed_disconnect
 Number of times this session failed to
 disconnect
 session.<session ID>.ip_addr
 IPv4 address assigned by the DUT to the
 subscriber
 session.<session ID>.ipv6_addr
 IPv6 address assigned by the DUT to the
 subscriber
 session.<session ID>.ipv6_global_addr
 IPv6 global address
 session.<session ID>.ipcp_cfg_ack_rx
 Total number of IPCP responses received
 (IPv4)*
 session.<session ID>.ipcp_cfg_ack_tx
 Total number of IPCP responses received
 (IPv4)*
 session.<session ID>.ipcp_cfg_nak_rx
 Total number of IPCP responses receive
 (IPv4)*
 session.<session ID>.ipcp_cfg_nak_tx
 Total number of IPCP responses received
 (IPv4)*
 session.<session ID>.ipcp_cfg_rej_rx
 Total number of IPCP responses received
 (IPv4)*
 session.<session ID>.ipcp_cfg_rej_tx
 Total number of IPCP responses received
 (IPv4)*
 session.<session ID>.ipcp_cfg_req_rx
 Total number of IPCP responses received
 (IPv4)*
 session.<session ID>.ipcp_cfg_req_tx
 Total number of IPCP responses received
 (IPv4)*
 session.<session ID>.lcp_cfg_ack_rx
 Total number of Configure-Acknowledge
 packets received
 session.<session ID>.lcp_cfg_ack_tx
 Total number of Configure-Acknowledge
 packets sent
 session.<session ID>.lcp_cfg_nak_rx
PPPoX Functions
837
 Total number of Configure-Negative-
 Acknowledge packets received
 session.<session ID>.lcp_cfg_nak_tx
 Total number of Configure-Negative-
 Acknowledge packets sent
 session.<session ID>.lcp_cfg_rej_rx
 Total number of Configure-Reject packets
 received
 session.<session ID>.lcp_cfg_rej_tx
 Total number of Configure-Reject packets
 sent
 session.<session ID>.lcp_cfg_req_rx
 Total number of Configure-Request packets
 received
 session.<session ID>.lcp_cfg_req_tx
 Total number of Configure-Request packets
 sent
 session.<session ID>.padi_rx
 Total number of PPPoE Active Discovery
 Initialized packets received
 session.<session ID>.padi_tx
 Total number of PPPoE Active Discovery
 Initialized packets sent
 session.<session ID>.pado_rx
 Total number of PPPoE Active Discovery
 Offer packets received
 session.<session ID>.pado_tx
 Total number of PPPoE Active Discovery
 Offer packets sent
 session.<session ID>.padr_rx
 Total number of PPPoE Active Discovery
 Request packets received
 session.<session ID>.padr_tx
 Total number of PPPoE Active Discovery
 Request packets sent
 session.<session ID>.pads_rx
 Total number of PPPoE Active Discovery
 Session-confirmation packets received
 session.<session ID>.pads_tx
 Total number of PPPoE Active Discovery
 Session-confirmation packets sent
 session.<session ID>.padt_rx
 Total number of PPPoE Active Discovery
 Terminate packets received
 session.<session ID>.padt_tx
 Total number of PPPoE Active Discovery
 Terminate packets sent
 session.<session ID>.pap_auth_ack_rx
 Total number of PAP responses received*
 session.<session ID>.pap_auth_nak_rx
 Total number of PAP responses sent*
 session.<session ID>.pap_auth_req_tx
 Total number of PAP responses received*
 session.<session ID>.setup_time
 Amount of time taken to bring up the
 session
 session.<session ID>.term_ack_rx
 Total number of Terminate-Acknowledge
 packets received
 session.<session ID>.term_ack_tx
 Total number of Terminate-Acknowledge
 packets sent
 session.<session ID>.term_req_rx
 Total number of Terminate-Request packets
 received
 session.<session ID>.term_req_tx
 Total number of Terminate-Request packets
 sent
 * indicates the statistic is not fully supported and only provides the aggregate
 count
PPPoX Functions
838
Description:
 The sth::pppox_stats function retrieves a list of aggregate
 statistics for the PPPoE session configured on the specified port.
Examples:
 #### HLTAPI for Tcl ####
 When you call sth::pppox_stats, the contents of the returned keyed list
 depends on the status of the call. For example:
 sth::pppox_stats -handle host1
 Returns a list that contains one of the following:
 a) If the call is successful, the list contains aggregate statistics and
 command execution status (in this case, a 1 indicating success).
 b) If the call fails, the list contains error log and command
 execution status (in this case, a 0 indicating failure).
Sample Input:
 sth::pppox_stats -handle host2 -mode aggregate
Sample Output:
 {status 1} {aggregate {{term_req_rx 0} {term_ack_tx 0} {ipcp_cfg_rej_tx 6}
 {lcp_cfg_rej_tx 0} {padt_tx 1} {pap_auth_ack_rx 0} {term_req_tx
 1} {ipcp_cfg_ack_rx 6} {connect_success 2} {lcp_cfg_ack_rx 2} {num_sessions
 1} {echo_req_rx 0} {chap_auth_fail_rx 0} {padr_tx 2} {max_setup_time 156}
 {disconnect_success 1} {chap_auth_chal_rx 0} {echo_rsp_tx 0}
 {pads_rx 2} {chap_auth_succ_rx 0} {ipcp_cfg_req_rx 6} {sessions_up 1}
 {pap_auth_nak_rx 0} {ipcp_cfg_ack_tx 6} {ipcp_cfg_nak_rx 6}
 {disconnect_failed 0} {lcp_cfg_req_rx 2} {padi_rx 0} {lcp_cfg_ack_tx 2}
 {lcp_cfg_nak_rx 0} {min_setup_time 149} {success_setup_rate 6}
 {chap_auth_rsp_tx 0} {term_ack_rx 0} {pads_tx 0} {pap_auth_req_tx 0}
 {ipcp_cfg_rej_rx 6} {ipcp_cfg_req_tx 6} {sessions_down 0} {lcp_cfg_rej_rx 0}
 {ipcp_cfg_nak_tx 6} {lcp_cfg_req_tx 2} {padi_tx 2} {padt_rx 0}
 {lcp_cfg_nak_tx 0} {connect_attempts 2} {avg_setup_time 152} {pado_rx 2}
 {connecting 0} {connected 1} {disconnecting 0} {idle 0} {atm_mode
 0}}} {procName sth::pppox_stats} {handles host2}
 If there is an error, you will see: {status 0} {log {Error message }}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.pppox_stats (
 handle = device,
 mode = 'aggregate');
 Sample Output:
 {'status': '1', 'aggregate': {'num_sessions': '1', 'ipcp_cfg_nak_rx': '0',
 'echo_rsp_tx': '0', 'term_ack_rx': '0', 'ipcp_cfg_nak_tx': '0', 'lcp_cfg_ack_rx':
 '0', 'lcp_cfg_ack_tx': '0', 'pado_rx': '0', 'padr_rx': '0', 'pads_rx': '0',
 'padr_tx': '0', 'ipcp_cfg_rej_rx': '0', 'disconnect_success': '0',
 'max_setup_time': '0', 'ipcp_cfg_rej_tx': '0', 'disconnect_failed': '0',
 'chap_auth_succ_rx': '0', 'padt_rx': '0', 'term_ack_tx': '0', 'min_setup_time':
 '0', 'avg_setup_time': '0', 'padt_tx': '0', 'pads_tx': '0', 'lcp_cfg_rej_rx':
 '0', 'lcp_cfg_req_tx': '0', 'pap_auth_ack_rx': '0', 'connecting': '0',
 'connect_success': '0', 'chap_auth_fail_rx': '0', 'disconnecting': '0',
 'lcp_cfg_rej_tx': '0', 'lcp_cfg_req_rx': '0', 'pap_auth_req_tx': '0',
 'echo_req_rx': '0', 'sessions_up': '0', 'ipcp_cfg_ack_rx': '0', 'connected': '0',
 'connect_attempts': '0', 'atm_mode': '0', 'pap_auth_nak_rx': '0', 'term_req_tx':
 '0', 'chap_auth_chal_rx': '0', 'ipcp_cfg_ack_tx': '0', 'lcp_cfg_nak_rx': '0',
 'term_req_rx': '0', 'padi_tx': '0', 'chap_auth_rsp_tx': '0', 'idle': '1',
 'abort': '0', 'ipcp_cfg_req_rx': '0', 'padi_rx': '0', 'sessions_down': '0',
 'ipcp_cfg_req_tx': '0', 'success_setup_rate': '0', 'lcp_cfg_nak_tx': '0'},
 'handles': 'host4', 'procName': 'sth::pppox_stats'}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::pppox_stats (
PPPoX Functions
839
 handle => "$device",
 mode => 'aggregate');
 Sample Output:
 $VAR1 = 'procName';
 $VAR2 = 'sth::pppox_stats';
 $VAR3 = 'handles';
 $VAR4 = 'host4';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'aggregate';
 $VAR8 = {
 'echo_req_rx' => '0',
 'ipcp_cfg_ack_rx' => '0',
 'term_req_tx' => '0',
 'ipcp_cfg_ack_tx' => '0',
 'pap_auth_nak_rx' => '0',
 'lcp_cfg_req_rx' => '0',
 'sessions_up' => '0',
 'padi_tx' => '0',
 'term_ack_tx' => '0',
 ...
 };
Notes:
 None
End of Procedure Header
PPPoX Server Functions
840
PPPoX Server Functions
Functions:
sth::pppox_server_config
sth::pppox_server_control
sth::pppox_server_stats
sth::pppox_server_config
Name:
 sth::pppox_server_config
Purpose:
 Creates, modifies, or deletes PPPoX server session blocks for the
 specified Spirent HLTAPI port or handle.

 A PPPoX sever is responsible for the dynamic allocation and serving
 of network addresses to PPPoX clients. It responds to the connection
 request from the client.
Synopsis:
 sth::pppox_server_config
 -mode create -port_handle <port_handle> |
 -mode {modify | reset} -handle <pppox_server_block_handle>
 [-attempt_rate {<1-1000>]
 [-auth_mode { none | pap | chap | pap_or_chap }]
 [-chap_reply_timeout <1-65535>]
 [-config_req_timeout <1-65535>]
 [-disconnect_rate <1-1000>]
 [-echo_req {0 | 1}]
 [-echo_req_interval < 1-65535 >]
 [-echo_vendor_spec_tag_in_pado {0 | 1}]
 [-echo_vendor_spec_tag_in_pads {0 | 1}]
 [-encap { ethernet_ii | ethernet_ii_vlan | ethernet_ii_qinq | vc_mux| llcsnap }]
 [-enable_osi {0 | 1}]
 [-enable_mpls {0 | 1}]
 [-fsm_max_naks <1-65535>]
 [-force_server_connect_mode {0 | 1}]
 [-include_id {0 | 1}]
 [-ip_cp { ipv4_cp | ipv6_cp }]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-intf_ip_prefix_length <0-32>]
 [-gateway_ip_addr <a.b.c.d>]
 [-intf_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_prefix_length <0-128>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipcp_req_timeout <1-65535>]
 [-ipv4_pool_addr_start <a.b.c.d>]
 [-ipv4_pool_addr_prefix_len <1-32>]
 [-ipv4_pool_addr_count <1-65535>]
 [-ipv4_pool_addr_step <1-65535>]
 [-ipv6_pool_prefix_start <aaaa:bbbb:cccc:dddd::>]
 [-ipv6_pool_prefix_step <aaaa:bbbb:cccc:dddd::>]
 [-ipv6_pool_intf_id_start <::eeee:ffff:gggg:hhhh>]
 [-ipv6_pool_intf_id_step <::eeee:ffff:gggg:hhhh>]
 [-ipv6_pool_prefix_len <0-128>]
 [-ipv6_pool_addr_count <1-65535>]
 [-lcp_mru <128-65535>]
 [-local_magic {0 | 1}]
 [-mac_addr < aa:bb:cc:dd:ee:ff >]
 [-mac_addr_step < aa:bb:cc:dd:ee:ff >]
PPPoX Server Functions
841
 [-max_configure_req <1-65535>]
 [-max_chap_req_attempt <1-65535>]
 [-max_echo_acks <0-65535>]
 [-max_ipcp_req <1-65535>]
 [-max_outstanding <2- 65535>]
 [-max_payload_tag_enable {0 | 1}]
 [-max_terminate_req <1- 65535>]
 [-mru_neg_enable {0 | 1}]
 [-num_sessions <1-65535>]
 [-pap_req_timeout <1-65535>]
 [-protocol < pppoe | pppoa | pppoeoa >]
 [-pvc_incr_mode < vci | vpi | both >]
 [-password]
 [-password_wildcard {0 | 1}]
 [-qinq_incr_mode < inner | outer | both >]
 [-service_name < service_name >]
 [-server_inactivity_timer <1-65535>]
 [-term_req_timeout <1-65535>]
 [-username <username>]
 [-username_wildcard {0 | 1}]
 [-unconnected_session_threshold <0-65535>]
 [-vlan_id <0-4095>]
 [-vlan_id_step <1-4095>]
 [-vlan_id_count <1-4096>]
 [-vlan_cfi {0 | 1}]
 [-vlan_user_priority <0-7>]
 [-vlan_id_outer <0-4095>]
 [-vlan_id_outer_step <0-4095>]
 [-vlan_id_outer_count <1-4096>]
 [-vlan_outer_cfi {0 | 1}]
 [-vlan_outer_user_priority <0-7>]
 [-vci <0-65535>]
 [-vci_count <1-65536 >]
 [-vci_step <0-255>]
 [-vpi <0-255>]
 [-vpi_count < 1-256 >]
 [-vpi_step <0-255>]
 [-wildcard_bang_start <0-65535>]
 [-wildcard_bang_end <0-65535>]
 [-wildcard_dollar_start <0-65535>]
 [-wildcard_dollar_end <0-65535>]
 [-wildcard_pound_start <0-65535>]
 [-wildcard_pound_end <0-65535>]
 [-wildcard_pound_fill <0-9>]
 [-wildcard_question_end <0-65535>]
 [-wildcard_question_start <0-65535>]
 [-wildcard_question_fill <0-9>]
 [-wildcard_bang_fill <0-9>]
 [-wildcard_dollar_fill <0-9>]
Arguments:
 -mode
 Specifies the action to perform. Possible values are
 create, modify, and reset. This argument is mandatory.

 create - Configures PPPoX server session blocks on the port
 specified by the -port_handle argument.

 modify - Changes the configuration for the PPPoX server
 block identified by the -handle argument.

 reset - Deletes the PPPoX servers specified by -handle.
 -port_handle
 Specifies the handle of the port on which the PPPoX server(s)
 is to be created when -mode is set to create.
 This argument is mandatory for create mode only.
 -handle
 Specifies the handle of the PPPoX server group to
 use when -mode is set to "modify" or "reset."
PPPoX Server Functions
842
 This argument is mandatory for modify and reset mode.
 The handle is returned by the sth::pppox_server_config function.
 -attempt_rate
 Specifies the PPP attempt rate, in seconds, for all PPPoX servers
 on this port. This is a port-wide option. Possible values range
 from 1 to 1000. The default value is 100.
 -auth_mode
 Specifies the authentication mode to use. Possible values are
 listed below:
 none - No authentication. This is the default.
 pap - Password Authentication Protocol (PAP).
 chap - Challenge Handshake Authentication Protocol (CHAP) MD5.
 -chap_reply_timeout
 Specifies the timeout wait period (in seconds) for the PPPoX
 client to send a CHAP response. Possible values range from 1 to
 65535. The default value is 3.
 -config_req_timeout
 Specifies the timeout value in seconds for acknowledgement of a
 Configure-Request or Terminate Request. Possible values range
 from 1 to 65535. The default value is 3.
 -disconnect_rate
 Specifies the disconnect rate at which PPPoX servers are
 disconnected. This option is a port-wide option. Possible vales
 range from 1 to 1000. The default value is 1000.
 -echo_req
 Enables or disables echo requests. Possible values are 0 (disable)
 and 1 (enable). The default value is 0.
 -echo_req_interval
 Specifies the time interval in seconds for sending Link Control
 Protocol (LCP) echo requests. Possible values range from 1 to
 65535. The default value is 10. This argument is available when
 -echo_req is set to 1.
 -echo_vendor_spec_tag_in_pado
 Enables or disables echo vendor-specific tag in PPPoE Active
 Discovery Offer (PADO) message. Possible values are 0 (disable)
 and 1 (enable). The default value is 0.
 -echo_vendor_spec_tag_in_pads
 Enables or disables echo vendor-specific tag in PPPoE Active
 Discovery Session-confirmation (PADS) message. Possible values
 are 0 (disable) and 1 (enable). The default value is 0.
 -encap
 Identifies the type of Layer2 encapsulation to use. Possible
 values are ethernet_ii, ethernet_ii_vlan, ethernet_ii_qinq,
 vc_mux and llcsnap.

 ethernet_ii - Ethernet II. This option supports Ethernet
 encapsulation
 ethernet_ii_vlan - Ethernet II with a single VLAN tag. This option
 supports Ethernet encapsulation.
 ethernet_ii_qinq - Ethernet II with two VLAN tags. This option
 supports Ethernet encapsulation.
 vc_nux - Specifies ATM encapsulation to VC Multiplexed. Virtual
 Circuit Multiplexing (VC_MUX) is one of the two mechanisms
 or identifying the protocol carried in ATM Adaptation Layer5
 (AAL5) frame. This option is available for ATM cards.
 llcsnap - Specifies ATM encapsulation to LLC Encapsulated.
PPPoX Server Functions
843
 llcsnap is the other mechanism for identifying the protocol
 carried in AAL5 frame. This option is available for ATM
 cards.
 When you specify -encap ethernet_ii_vlan, you can use the -vlan_*
 arguments to define a VLAN interface.
 When you specify -encap ethernet_ii_qinq, you can use the
 -vlan_outer_* and -vlan_* arguments to define a Q-in-Q interface
 When you specify -encap vc_mux or -encap llcsnap, you can use the
 -vci_* arguments and -vpi_* arguments to define a ATM interface
 When setting PPP over Ethernet over ATM (PPPoEoA) encapsulation,
 you can set the Layer 2 encapsulation type to the combination of
 {ethernet_ii|ethernet_ii_vlan|ethernet_ii_qinq} and
 {vc_mux|llcsnap}. You can set PPPoEoA encapsulation using
 -protocol pppoeoa. The default value is ethernet_ii.
 -enable_osi
 Enables or disables the Network Layer Control Protocol (NLCP)
 required for OSI protocols. Possible values are 0 (disable) and 1
 (enable). The default value is 0.
 -enable_mpls
 Enables or disables a control protocol for the traffic going
 through MPLS tunnels. Possible values are 0 (disable) and 1
 (enable). The default value is 0
 -fsm_max_naks
 Specifies the maximum number of Negative-Acknowledgment
 packages allowed during the LCP or the NCP negotiation. Possible
 values range from 1 to 65535. The default value is 5.
 -force_server_connect_mode
 Enables or disables the force connect mode. A server is forced
 into the Connected state provided it has the user-defined maximum
 number of unconnected sessions. Forcing a server into the
 Connected state allows a partially bound block to send and
 receive traffic. Possible values are 0 (disable) and 1 (enable).
 The default value is 0.
 -include_id
 Determines whether to include the Identifier field in the
 challenge message during the CHAP authentication. Possible values
 are 0 and 1. The default value is 0. When the argument is set to
 1, the ID will be included in the challenge message during the
 CHAP authentication. This argument is available only when you
 specify -auth_mode chap.
 -ip_cp
 Determines the IP Control Protocol (IPCP) version to enable.
 Possible values are listed below:
 ipv4_cp - Enables IPv4 addressing. This is the default.
 ipv6_cp - Enables IPv6 addressing
 -intf_ip_addr
 Defines the starting IPv4 address of emulated PPPoX servers. The
 format of the values must be in IPv4 format. This argument is
 available when -ip_cp is set to ipv4_cp.
 -intf_ip_addr_step
 Defines the increment used to generate IPv4 addresses.The format
 of the values must be in IPv4 format. The default value is
 0.0.0.1. This argument is available when -ip_cp is set to
 ipv4_cp.
 -intf_ip_prefix_length
 Specifies the IPv4 prefix length for the emulated PPPoX servers.
 Possible values range from 0 to 32. The default value is 24. This 
PPPoX Server Functions
844
 argument is available when -ip_cp is set to ipv4_cp.
 -gateway_ip_addr
 Configures the starting IPv4 gateway address of emulated PPPoX
 servers. The format of the values must be in IPv4 format. This
 argument is available when -ip_cp is set to ipv4_cp.
 -gateway_ip_step
 Defines the increment used to generate IPv4 gateway addresses.
 The format of the values must be in IPv4 format. This argument is
 available when -ip_cp is set to ipv4_cp. The default value is
 0.0.0.0.
 -intf_ipv6_addr
 Configures the starting IPv6 address of emulated PPPoX servers.
 The format of the values must be in IPv6 format. This argument is
 available when -ip_cp is set to ipv6_cp.
 -intf_ipv6_addr_step
 Defines the increment used to generate IPv6 addresses. The format
 of the values must be in IPv6 format. This argument is available
 when -ip_cp is set to ipv6_cp. The default value is 0000::1.
 -intf_ipv6_prefix_length
 Specifies the IPv6 prefix length for the emulated PPPoX server.
 Possible values range from 0 to 128. This argument is available
 when -ip_cp is set to ipv6_cp. The default value is 64.
 -gateway_ipv6_addr
 Configures the starting IPv6 gateway address of emulated PPPoX
 servers. The format of the values must be in IPv6 format. This
 argument is available when -ip_cp is set to ipv6_cp.
 -gateway_ipv6_step IPv6
 Defines the increment used to generate gateway IPv6 addresses.
 The format of the values must be in IPv6 format. This argument is
 available when -ip_cp is set to ipv6_cp. The default value is ::.
 -ipcp_req_timeout
 Specifies the timeout value in seconds for the acknowledgement of
 an IPCP Configure-Request.Possible values range from 1 to 65535.
 The default value is 3.
 -ipv4_pool_addr_start
 Specifies the starting IPv4 address of the IP address pool. The
 format of the values must be in IPv4 format. The default value is
 192.0.1.0. This argument is available when -ip_cp is set to
 ipv4_cp.
 -ipv4_pool_addr_prefix_len
 Specifies the IPv4 prefix length of IPv4 addresses in the PPPoX
 server pool. Possible values range from 0 to 32. The default
 value is 24. This argument is available when -ip_cp is set to
 ipv4_cp.
 -ipv4_pool_addr_count
 Specifies the number of IPv4 addresses in the PPPoX server pool.
 Possible values range from 1 to 65535. The default value is 1.
 This argument is available when -ip_cp is set to ipv4_cp.
 -ipv4_pool_addr_step
 Specifies the integer step by which to increment the IPv4
 addresses in the PPPoX Server pool. The values of the argument
 must be integers. Possible values range from 1 to 65535. The
 default value is 1. This argument is available when -ip_cp is set
 to ipv4_cp.
 -ipv6_pool_prefix_start
 Specifies the upper 64 bits of the starting IPv6 address for the
 PPPoX Server's address pool. The format must be IPv6. The default
 value is 2001::. This argument is available when -ip_cp is set to
PPPoX Server Functions
845
 ipv6_cp.
 -ipv6_pool_prefix_step
 Specifies the upper 64 bits of the IPv6 step to increment the
 addresses in the PPPoX Server pool. The format must be IPv6. The
 default value is 0:0:0:1::. This argument is available when
 -ip_cp is set to ipv6_cp.
 -ipv6_pool_intf_id_start
 Specifies the lower 64 bits of the starting IPv6 address for the
 PPPoX Server's address pool. The format must be IPv6. The default
 value is ::1. This argument is available when -ip_cp is set to
 ipv6_cp.
 -ipv6_pool_intf_id_step
 Specifies the lower 64 bits of the IPv6 step to increment the
 addresses in the PPPoX Server pool. The format must be IPv6. The
 default value is ::1. This argument is available when -ip_cp is
 set to ipv6_cp.
 -ipv6_pool_prefix_len
 Specifies the IPv6 prefix length of IPv4 addresses in the PPPoX
 Server pool. Possible values range from 0 to 128. The default
 value is 64. This argument is available when -ip_cp is set to
 ipv6_cp.
 -ipv6_pool_addr_count
 Specifies the number of IPv6 addresses in the PPPoX Server pool.
 Possible values range from 1 to 65535. The default value is 1.
 This argument is available when -ip_cp is set to ipv6_cp.
 -lcp_mru
 Specifies the local Maximum Receive Unit (MRU) size in bytes.
 Possible values range from 128 to 65535. The default value is
 1492. This argument is available when -mru_neg_enable is set to
 1.
 -local_magic
 Enables or disables the use of the magic number for detecting
 data link layer errors. Possible values are 0 (disable) and 1
 (enable). The default value is 1.
 -mac_addr
 Specifies the starting value for MAC addresses. The value must be
 in MAC format.
 -mac_addr_step
 Specifies the step value applied to the base MAC address. The
 value must be in MAC format. The default value is
 00.00.00.00.00.01.
 -max_configure_req
 Specifies the maximum number of Configure-Request packets that
 can be sent without acknowledgement. Possible values range from 1
 to 65535. The default value is 5.
 -max_chap_req_attempt
 Specifies the maximum number of CHAP challenge attempts made by
 the server. Possible values range from 1 to 65535. The default
 value is 10.
 -max_echo_acks
 Specifies the maximum number of unanswered echo requests to send
 before the PPPoX server session fails. When you specify
 -max_echo_acks 0, echo requests are disabled. Possible values
 range from 0 to 65535. The default value is 3. This argument is
 available when -echo_req is set to 1.
 -max_ipcp_req
 Specifies the maximum number of IPCP Configure-Request packets
 that can be sent without getting an ACK. Possible values range
PPPoX Server Functions
846
 from 1 to 65535. The default value is 10.
 -max_outstanding
 Specifies the maximum number of sessions in progress at one time.
 The sessions in process are the sessions either coming up or
 disconnecting.This is a port-wide option. Possible values range
 from 2 to 65535. The default value is 100.
 -max_payload_tag_enable
 Enables or disables the Maximum Payload tag. When this argument
 is set to 1, PPPoX servers allow the negotiation of an MRU larger
 than 1492. Possible values are 0 (disable) and 1 (enable). The
 default value is 0.
 -max_payload_bytes
 Specifies the maximum payload in bytes. Possible values range from
 1 to 65535. The default value is 1500. This argument is available
 when -max_payload_tag_enable is set to 1.
 -max_terminate_req
 Specifies the maximum number of Terminate Requests that can be
 sent without acknowledgement. Possible values range from 1 to
 65535. The default value is 10.
 -mru_neg_enable
 Enables or disables the MRU negotiation. Possible values are
 0 (disable) and 1 (enable). The default value is 1.
 -num_sessions
 The number of PPPoX servers to emulate. Possible values range
 from 1 to 65535. This argument is mandatory. The default value is
 1.
 Note:
 When you specify -encap ethernet_ii_vlan, the value of this
 argument must be divided evenly by the value of the
 -vlan_id_count argument.
 When you specify -encap ethernet_ii_qinq, the value of this
 argument must be divided evenly by the least common multiple of
 the values of -vlan_id_count and -vlan_id_outer_count.
 Likewise, if you specify -encap vc_mux or -encap llcsnap,
 the value of this argument must be divided evenly by the least
 common multiple of the values of -vpi_count and -vci_count.
 -pap_req_timeout
 Specifies the timeout wait period (in seconds) between
 retransmissions of a PAP request. Possible values range from
 1 to 65535. The default value is 3.
 -protocol
 Specifies the type of protocol to use. Possible values are
 listed below:
 pppoe - Indicates the PPP over Ethernet encapsulation. This is the
 default. Applicable on Ethernet cards.
 pppoa - indicates the PPP over ATM encapsulation. Applicable on
 ATM cards
 pppoeoa - Indicates the PPP over Ethernet and bridging over ATM
 encapsulation. This argument is applicable on ATM cards
 -pvc_incr_mode
 Determines which ID to increment first. Possible values are
 listed below:

 vci - Increments the VC ID before the Virtual Path (VP) ID. This
 is the default.
PPPoX Server Functions
847
 vpi - Increments the VP ID before the Virtual Circuit (VC)ID.
 both - Increments both the VP and VC ID at the same time.
 -password
 Specifies the string base from which the passwords are
 generated (e.g., Password#) when the authentication mode
 is pap or chap (see -auth_mode).
 When -password_wildcard is enabled, you can include # (pound), ?
 (question), ! (bang), and $ (dollar) into the string to use
 wildcards to generate unique passwords. See the description of
 arguments related to pound (-wildcard_pound_*), question
 (-wildcard_question_*), bang (-wildcard_bang_*) and dollar
 (-wildcard_dollar_*) for details.
 -password_wildcard
 Enables or disables the wildcard substitution in passwords
 defined by the -password argument. Possible values are 0
 (disable) and 1 (enable). If the value is set to 1, any wildcards
 used in -password will be replaced with the corresponding values
 according to arguments related to pound (-wildcard_pound_*),
 question (-wildcard_question_*), bang (-wildcard_bang_*)and
 dollar (-wildcard_dollar_*). If the value is 0, wildcards will
 not be replaced. The default value is 0.
 -qinq_incr_mode
 Specifies the increment mode for Q-in-Q Ethernet interfaces. This
 parameter only applies to Q-in-Q Ethernet interfaces. Possible
 values are described below:
 inner - The inner VLAN ID is incremented first until the
 specified number of inner VLANs is exhausted, then the outer
 VLAN ID is incremented. This continues in a round-robin
 fashion until the number of outer VLANs is exhausted. This
 is the default.
 outer - The outer VLANs ID is incremented first until the
 specified number of outer VLANs is exhausted, then the inner
 VLAN ID is incremented. This continues in a round-robin
 fashion until the number of inner VLANs is exhausted.
 both - The inner VLAN ID and outer VLAN ID increment at the same
 time. When inner VLAN count is larger than the outer VLAN
 count, then the inner VLAN ID will continues in a
 round-robin fashion until the number of the outer VLAN ID is
 exhausted. The similar thing happens when the outer VLAN
 count is larger than the outer VLAN count.
 -service_name
 Indicates the service (ISP name, class, or QoS) requested.
 If you do not specify a service name or specify an empty
 string, any service will be accepted.
 -server_inactivity_timer
 Specifies the number of seconds to wait before the PPPoX server
 is forced to the Connected state. The timer begins during a
 period of inactivity on the server and is reset upon
 transmission/receipt of a packet (excluding keepalives). When the
 timer expires, the server is put in the Connected state provided
 the server hits the threshold defined by
 -unconnected_session_threshold. Possible values range from 1 to
 65535. The default values is 30. This argument is available when
 -force_server_connect_mode is set to 1.
 -term_req_timeout
 Specifies the timeout value in seconds for acknowledgement
 of a Terminate Request packet. Possible values range from 1 to
 65535. The default value is 10.
 -username 
PPPoX Server Functions
848
 Indicates the string base from which the usernames are generated
 (for example, User#) when the authentication mode is pap or chap
 (see -auth_mode). When -username_wildcard is enabled, the
 #(pound), ? (question), ! (bang), and $ (dollar) you use in the
 string will be replaced with corresponding values. See the
 description of arguments related to pound (-wildcard_pound_*),
 question (-wildcard_question_*), bang (-wildcard_bang_*) and
 dollar (-wildcard_dollar_*) for details.
 -username_wildcard
 Enables or disables the wildcard substitution in the usernames
 defined by the -username argument. If the value is set to 1, any
 wildcards used in the usernames will be replaced with the
 corresponding values according to arguments related to pound,
 question, bang and dollar. If the value is 0, wildcards will not
 be replaced. The default value is 0.
 -unconnected_session_threshold
 Specifies the number of unconnected sessions required for putting
 a PPPoX server in the Connected state. Possible values range from
 0 to 65535. The default value is 0. This argument is only
 available when -force_server_connect_mode is set to 1.
 -vlan_id
 Specifies the first inner VLAN ID to use when generating PPPoX
 servers. Possible values range from 0 to 4095. The default value
 is 100.
 -vlan_id_step
 The step value to increment the inner VLAN ID. Possible values
 range from 1 to 4095. The default value is 0.
 -vlan_id_count
 The number of inner VLAN IDs to use when generating PPPoX servers.
 VLAN membership is assigned in round-robin fashion. The Session
 number must be divided evenly by the VLAN number. Possible values
 range from 1 to 4096. The default value is 1.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 0. If set to 0, it indicates the
 network is Ethernet. If set to 1, it indicates that Token Ring
 and packets are dropped by Ethernet ports.
 -vlan_user_priority
 Specifies the inner VLAN priority to assign to the specified
 port. Possible values range from 0 to 7. The default value is 0.
 -vlan_id_outer
 The first outer VLAN ID to use when generating PPPoX server
 sessions. This ID only applies to PPPoX w/Stacked VLAN. Possible
 values range from 0 to 4095. The default is 100.
 -vlan_id_outer_step
 Specifies the step value to increment the outer VLAN IDs.
 Possible values range from 0 to 4095. The default value is 0.
 -vlan_id_outer_count
 Defines the number of outer VLAN IDs to use when generating
 PPPoX servers. VLAN membership is assigned in round-robin
 fashion. The number of sessions must be divided evenly into
 the outer VLAN count. Possible values range from 1 to 4096.
 The default value is 1.
 -vlan_outer_cfi
 Defines the outer VLAN CFI. Possible values are 0 and 1.
 The default value is 0.
 -vlan_outer_user_priority
 Specifies the outer VLAN priority to assign to the specified
PPPoX Server Functions
849
 port. Possible values range from 0 to 7. The default value is 0.
 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
 range from 0 to 65535. The default value is 32. This argument
 is available when -protocol is set to pppoa or pppoeoa.
 -vci_count
 The number of VCIs to use when generating PPPoX servers.
 The session number must be divided evenly by the value of this
 argument. Possible values range from 1 to 65536. The default
 value is 1. This argument is available when -protocol is set to
 pppoa or pppoeoa.
 -vci_step
 Specifies the step size in which the VCI value is incremented.
 Possible values range from 0 to 65535. The default value is 0.
 This argument is available when -protocol is set to pppoa
 or pppoeoa.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values range from 0 to 255. The
 default value is 0. This argument is only available when
 -protocol is set to pppoa or pppoeoa.
 -vpi_count
 Specifies the number of the VPIs to use when generating PPPoX
 servers. The session number must be divided evenly by the value
 of this argument. Possible values range from 1 to 256. The
 default value is 1. This argument is available when -protocol is
 set to pppoa or pppoeoa.
 -vpi_step
 Specifies the step size in which the VPI value is incremented.
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when -protocol is set to pppoa or pppoeoa.
 -wildcard_bang_start
 Specifies the starting value of the wildcard symbol bang (!)
 substitution in the usernames or passwords. Possible values range
 from 0 to 65535. The default value is 1. This argument is
 available when -username_wildcard or -password_wildcard is
 enabled.
 -wildcard_bang_end
 Specifies the ending value of the substitution of the wildcard
 symbol bang (!) in the usernames or passwords. Possible values
 range from 0 to 65535. The default value is 1. This argument is
 available when -username_wildcard or -password_wildcard s
 enabled.
 -wildcard_dollar_start
 Specifies the starting value of the substitution of the wildcard
 symbol dollar ($) in the usernames or passwords. Possible values
 range from 0 to 65535. The default value is 1. This argument is
 available when -username_wildcard or -password_wildcard is
 enabled.
 -wildcard_dollar_end
 Specifies the ending value for the substitution of the wildcard
 symbol dollar ($) in the usernames or passwords. Possible values
 range from 0 to 65535. The default value is 1. This argument
 is available when -username_wildcard or -password_wildcard
 is enabled.
 -wildcard_pound_start
 Specifies the starting value to replace the wildcard pound (#)
 characters in usernames or passwords, such as user# or pwd#.
 Possible values range from 0 to 65535. The default value is 1.
 This argument is available when -username_wildcard or 
PPPoX Server Functions
850
 -password_wildcard is enabled.
 -wildcard_pound_end
 Specifies the ending numerical value to replace the wildcard
 pound (#) characters in usernames or passwords, such as
 user# or pwd#. Possible values range from 0 to 65535. The default
 value is 1. This argument is available when -username_wildcard or
 -password_wildcard is enabled.
 -wildcard_question_start
 Specifies the starting numerical value to replace the wildcard
 question mark (?) characters in usernames or passwords.
 Possible values range from 0 to 65535. The default value is 1.
 This argument is available when -username_wildcard or
 -password_wildcard is enabled.
 -wildcard_question_end
 Defines the ending numerical value to replace the wildcard
 question mark (?) characters in usernames and passwords.
 Possible values range from 0 to 65535. The default value is 1.
 This argument is available when -username_wildcard or
 -password_wildcard is enabled.
 -wildcard_bang_fill
 Indicates the length that the substitution of the wildcard symbol
 bang (!) should be. If the substitution generated by
 -wildcard_bang_start and -wildcard_bang_end is shorter than this
 length, leading zeros will be filled to make the substitution
 length equal to the length specified by this argument. If the
 substitution is longer than this length, the value of this
 argument will be ignored. When it is set to 0, leading zeros will
 not be filled. Possible values range from 0 to 9. The default
 value is 0. This argument is available when -username_wildcard or
 -password_wildcard is enabled.
 -wildcard_dollar_fill
 Indicates the length that the substitution of the wildcard symbol
 dollar ($) should be. If the substitution generated by
 -wildcard_dollar_start and -wildcard_dollar_end is shorter than
 this length, leading zeros will be filled to make the
 substitution length equal to the length specified by this
 argument. If the substitution is longer than this length, the
 value of this argument will be ignored. When it is set to 0,
 leading zeros will not be filled. Possible values range from 0 to
 9. The default value is 0. This argument is available when
 -username_wildcard or -password_wildcard is enabled.
 -wildcard_pound_fill
 Indicates the length that the substitution of the wildcard symbol
 pound (#) should be. If the substitution generated by
 -wildcard_pound_start and -wildcard_pound_end is shorter than
 this length, leading zeros will be filled to make the
 substitution length equal to the length specified by this
 argument. If the substitution is longer than this length, the
 value of this argument will be ignored. When it is set to 0,
 leading zeros will not be filled. Possible values range from 0 to
 9. The default value is 0. This argument is available when
 -username_wildcard or -password_wildcard is enabled.
 -wildcard_question_fill
 Indicates the length that the substitution of the wildcard symbol
 question mark (?) should be. If the substitution generated by
 -wildcard_question_start and -wildcard_question_end is shorter
 than this length, leading zeros will be filled to make the
 substitution length equal to the length specified by this
 argument. If the substitution is longer than this length, the
 value of this argument will be ignored. When it is set to 0,
 leading zeros will not be filled. Possible values range from 0 to
 9. The default value is 0. This argument is available when
 -username_wildcard or -password_wildcard is enabled.
PPPoX Server Functions
851
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -qinq_incr_mode
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle A list of created PPPoX Server group handles.
 status $SUCCESS or $FAILURE
 log An error message if the command returns {status 0}
Description:
 The sth::pppox_server_config function creates, modifies, or deletes
 PPPoX server session blocks for the specified port. Use the -mode
 argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)
 When you create a PPPoX server session block, you must use the
 -port_handle argument to specify the Spirent HLTAPI port that the
 emulated PPPoX server session block will use for PPPoX communication.
 (The port handle value is contained in the keyed list returned by the
 sth::connect function.)
 To make PPPoX servers connect to PPPoX clients successfully,
 you must create PPPoX server session number equivalent to or larger
 than PPPoX client number by specifying -num_sessions. PPPoX servers
 will delegate IP addresses to the clients from the address pool after
 the connection is established. To make sure each client can be assigned
 unique IP address, you must configure IP address pool count equivalent
 to or larger than PPPoX client number by specifying -ipv4_pool_addr_count or
 -ipv6_pool_addr_count.
 In addition to specifying the port handle (-port_handle), you must also
 provide one or more of the following arguments when you create PPPoX
 servers or use their default values:
 Defines the number of PPPoX servers to emulate (-num_sessions)
 The IPCP version (-ip_cp { ipv4_cp | ipv6_cp } )
 The Layer2 encapsulation type (-encap)
 The type of protocol to use (-protocol)
 When you specify -ip_cp ipv4_cp, the following arguments are needed to
 configure IPv4 address and the pool address settings:
 -intf_ip_addr -intf_ip_addr_step -gateway_ip_addr
 -ipv4_pool_addr_start -ipv4_pool_addr_count
 When you specify -ip_cp ipv6_cp, the following arguments are needed to
 configure IPv6 address and the pool address settings:
 -intf_ipv6_addr
 -intf_ipv6_addr_step
 -gateway_ipv6_addr
 -ipv6_pool_prefix_start
 -ipv6_pool_prefix_step
 -ipv6_pool_intf_id_start
 -ipv6_pool_intf_id_step
 -ipv6_pool_prefix_len
 -ipv6_pool_addr_count
 For a detailed description of PPPoX server encapsulation, see RFC 2516.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates 10 IPv4 PPPoE servers:
PPPoX Server Functions
852
 sth::pppox_server_config -mode "create" \
 -port_handle $hltSourcePort \
 -num_sessions 10 \
 -encap ethernet_ii_qinq \
 -protocol pppoe \
 -attempt_rate 50 \
 -disconnect_rate 50 \
 -max_outstanding 100 \
 -auth_mode chap \
 -username spirent \
 -password spirent \
 -mac_addr "00:10:94:01:00:01" \
 -mac_addr_step "00.00.00.00.00.01" \
 -intf_ip_addr 192.0.0.8 \
 -intf_ip_addr_step 0.0.0.1 \
 -gateway_ip_addr 192.0.0.1 \
 -qinq_incr_mode inner \
 -vlan_id 200 \
 -vlan_id_count 2 \
 -vlan_id_outer 300 \
 -vlan_id_outer_count 5 \
 -ipv4_pool_addr_start 10.1.0.0 \
 -ipv4_pool_addr_prefix_len 24 \
 -ipv4_pool_addr_count 50 \
 -ipv4_pool_addr_step 1
Output:
 {port_handle port1} {pppox_port pppoxportconfig1} {handle host3}
 The following example creates 4 IPv6 PPPoE servers:
 set status [sth::pppox_server_config -mode "create" \
 -port_handle $hltSourcePort \
 -encap pppoe \
 -protocol ethernet_ii \
 -num_sessions 4 \
 -ip_cp "ipv6_cp" \
 -mac_addr "00:10:94:01:00:01" \
 -intf_ipv6_addr 2000::5 \
 -intf_ipv6_addr_step 0::2 \
 -gateway_ipv6_addr 2000::1 \
 -ipv4_pool_addr_start 10.0.0.4 \
 -ipv6_pool_prefix_start 1000:: \
 -ipv6_pool_prefix_step 2:: \
 -ipv6_pool_intf_id_start ::1 \
 -ipv6_pool_intf_id_step ::2 \
 -ipv6_pool_prefix_len 64 \
 -ipv6_pool_addr_count 50 \
Output:
 {port_handle port1} {pppox_port pppoxportconfig1} {handle host4}
 You can generate outgoing usernames and passwords based on wildcard
 replacements. For example, the # character represents a counter. If you
 define a counter to start at 1 (-wildcard_pound_start 1),
 run to 50 (-wildcard_pound_end), and increment by 1. Then, in the -username
 argument, the specified user# would be replaced with User1, User2,
 and so on, when the authentication begins. The following example
 generates 50 user names and passwords:
 sth::pppox_server_config -mode "create" \
 -port_handle $hltSourcePort \
 -num_sessions 50 \
 -encap ethernet_ii \
 -protocol pppoe \
 -mac_addr "00:10:94:01:00:01" \
 -intf_ip_addr 192.0.0.8 \
 -gateway_ip_addr 192.0.0.1 \
 -ipv4_pool_addr_start 10.1.0.0 \
 -ipv4_pool_addr_count 50 \
 -auth_mode chap \
 -username User# \
 -password Pass? \
PPPoX Server Functions
853
 -username_wildcard 1 \
 -password_wildcard 1 \
 -wildcard_pound_start 1 \
 -wildcard_pound_end 50 \
 -wildcard_question_start 1 \
 -wildcard_question_end 50 \
 Output:
 {port_handle port1} {pppox_port pppoxportconfig1} {handle host5}
 #### HLTAPI for Python ####
 The following example creates one IPv4 PPPoE server:

 device_ret0 = sth.pppox_server_config (
 mode = 'create',
 encap = 'ethernet_ii',
 protocol = 'pppoe',
 ipv4_pool_addr_prefix_len= '24',
 ipv4_pool_addr_count= '1',
 ipv4_pool_addr_step = '1',
 ipv4_pool_addr_start= '192.0.1.0',
 port_handle = port_handle[0],
 max_outstanding = '100',
 disconnect_rate = '1000',
 attempt_rate = '100',
 enable_osi = 'false',
 pap_req_timeout = '3',
 mru_neg_enable = '1',
 max_configure_req = '10',
 term_req_timeout = '3',
 max_terminate_req = '10',
 username = 'spirent',
 force_server_connect_mode= 'false',
 echo_vendor_spec_tag_in_pado= 'false',
 echo_vendor_spec_tag_in_pads= 'false',
 max_payload_tag_enable= 'false',
 max_ipcp_req = '10',
 echo_req_interval = '10',
 config_req_timeout = '3',
 local_magic = '1',
 password = 'spirent',
 chap_reply_timeout = '3',
 max_chap_req_attempt= '10',
 enable_mpls = 'false',
 lcp_mru = '1492',
 ip_cp = 'ipv4_cp',
 max_echo_acks = '0',
 auth_mode = 'none',
 include_id = '1',
 ipcp_req_timeout = '3',
 server_inactivity_timer= '30',
 unconnected_session_threshold= '0',
 max_payload_bytes = '1500',
 echo_req = 'false',
 fsm_max_naks = '5',
 num_sessions = '1',
 mac_addr = '00:10:94:00:00:01',
 mac_addr_step = '00:00:00:00:00:01',
 intf_ip_prefix_length= '24',
 intf_ip_addr = '192.85.1.3',
 gateway_ip_addr = '192.85.1.1',
 intf_ip_addr_step = '0.0.0.1',
 gateway_ip_step = '0.0.0.0');
Sample Output:
 {'status': '1', 'pppox_port': 'pppoxportconfig1', 'handle': 'host3',
 'port_handle': 'port1'}
 #### HLTAPI for Perl ####
 The following example creates one IPv4 PPPoE server:
PPPoX Server Functions
854
 my %device_ret0 = sth::pppox_server_config (
 mode => 'create',
 encap => 'ethernet_ii',
 protocol => 'pppoe',
 ipv4_pool_addr_prefix_len=> '24',
 ipv4_pool_addr_count=> '1',
 ipv4_pool_addr_step => '1',
 ipv4_pool_addr_start=> '192.0.1.0',
 port_handle => "$hport[1]",
 max_outstanding => '100',
 disconnect_rate => '1000',
 attempt_rate => '100',
 enable_osi => 'false',
 pap_req_timeout => '3',
 mru_neg_enable => '1',
 max_configure_req => '10',
 term_req_timeout => '3',
 max_terminate_req => '10',
 username => 'spirent',
 force_server_connect_mode=> 'false',
 echo_vendor_spec_tag_in_pado=> 'false',
 echo_vendor_spec_tag_in_pads=> 'false',
 max_payload_tag_enable=> 'false',
 max_ipcp_req => '10',
 echo_req_interval => '10',
 config_req_timeout => '3',
 local_magic => '1',
 password => 'spirent',
 chap_reply_timeout => '3',
 max_chap_req_attempt=> '10',
 enable_mpls => 'false',
 lcp_mru => '1492',
 ip_cp => 'ipv4_cp',
 max_echo_acks => '0',
 auth_mode => 'none',
 include_id => '1',
 ipcp_req_timeout => '3',
 server_inactivity_timer=> '30',
 unconnected_session_threshold=> '0',
 max_payload_bytes => '1500',
 echo_req => 'false',
 fsm_max_naks => '5',
 num_sessions => '1',
 mac_addr => '00:10:94:00:00:01',
 mac_addr_step => '00:00:00:00:00:01',
 intf_ip_prefix_length=> '24',
 intf_ip_addr => '192.85.1.3',
 gateway_ip_addr => '192.85.1.1',
 intf_ip_addr_step => '0.0.0.1',
 gateway_ip_step => '0.0.0.0');
Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host3';
 $VAR3 = 'port_handle';
 $VAR4 = 'port1';
 $VAR5 = 'status';
 $VAR6 = '1';
 $VAR7 = 'pppox_port';
 $VAR8 = 'pppoxportconfig1';
End of Procedure Header
sth::pppox_server_control
Name:
PPPoX Server Functions
855
 sth::pppox_server_control
Purpose:
 Controls the pppox server activity on the specified test port.
Synopsis:
 -sth::pppox_server_control
 -action {connect | disconnect| retry | pause | resume | reset | clear | abort}
 [-handle <pppox_server_block_handle>]
 [-port_handle <port_handle>]
Arguments:
 -action
 Specifies the action to perform. Possible values are
 described below:
 connect - Brings up the configured PPPoX servers.
 disconnect - Tears down connected PPPoX servers
 retry - Attempts to connect PPPoX servers that have
 previously failed to establish
 pause - Pauses the PPPoX servers
 resume - Resumes the PPPoX servers.
 reset - Aborts PPPoX sessions and resets the PPP.
 clear - Clears the status and statistics of the PPP sessions.
 abort - Aborts PPPoX sessions and resets the PPP
 emulation engine (without bringing the sessions
 back up) on the specified device.
 -handle
 Identifies the server session block on which the actions
 defined by the -action argument will be taken.
 You must specify either -handle or -port_handle,
 but not both.
 -port_handle
 Specifies the port to use. When you specify this
 argument, the action (-action) will be applied
 to all the PPPoX servers on the port. You must specify
 either -handle or -port_handle, but not both.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log Returns debug information when status is $FAILURE.
Description:
 The sth::pppox_server_control function operates PPPoX server
 session blocks. You can use the function to perform the following actions:
 connecting, disconnecting, resetting, retrying, pausing, resuming,
 clearing or aborting PPPoX server session blocks. When you
 call the sth::pppox_server_control function, you must specify a handle
 or a port handle. When you specify a port handle, the action will be
 applied to all the PPPoX servers on the port.
 You can check the aggregate.connected and aggregate.idle fields returned
 by sth::pppox_server_stats to see when all sessions finish connecting or
 disconnecting. If the aggregate.idle or the aggregate.connected values are
 equal to 1, then you can send sth::pppox_server_control connect, retry,
 disconnect, pause, or resume actions again. When the aggregate.connected
 value is 1, you can disconnect the PPPoX server sessions with
 sth::pppox_server_control -handle <handle> -action disconnect. If configuring
 and connecting multiple PPPoX server handles, configure all the handles
 before connecting PPPoE servers. Do not call sth::pppox_server_config while
 aggregate.connecting, aggregate.connected, or aggregate.disconnecting
 are equal to 1.
 While in the aggregate.connecting, aggregate.connected, or
 aggregate.disconnecting state, the PPPoX server cannot accept newly
PPPoX Server Functions
856
 configured PPPoX server session blocks. Therefore, if you plan to configure
 and bring up multiple PPPoX server session blocks, configure all the
 PPPoX server session blocks before connecting PPPoE server sessions.
Examples:
 #### HLTAPI for Tcl ####
 To connect with the specified PPPoX server:
 sth::pppox_server_control -action connect \
 -port_handle $hltSourcePort
 Sample Output: {status 1}

 sth::pppox_server_control -action disconnect
 -handle $pppHandles
 Sample Output: {status 1}
 #### HLTAPI for Python ####
 To connect with the specified PPPoX servers:
 device_list = [device_ret0['handle'].split()[0],device_ret1['handle'].split()[0]]
 ctrl_ret1 = sth.pppox_server_control (
 handle = device_list,
 action = 'connect');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 To connect with the specified PPPoX servers:
 my $device_list = "$device_ret0{handle}[0] $device_ret1{handle}[0]";
 my %ctrl_ret1 = sth::pppox_server_control (
 handle => "$device_list",
 action => 'connect');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 none
End of Procedure Header
sth::pppox_server_stats
Name:
 sth::pppox_server_stats
Purpose:
 Returns statistics of the PPPoX servers configured on the specified
 test port.
Synopsis
 [-handle <handle>]
 [-mode { aggregate | session }]
Arguments:
 -handle
 Specifies the handle of the PPPoX server block whose
 PPPoX statistics you will retrieve. 
PPPoX Server Functions
857
 -mode
 Specifies the statistics retrieval mode. Possible values
 are described below:

 aggregate - Aggregates the statistics on all the configured sessions.
 session - Retrieves the statistics on a per session basis.

 Note: Session statistics are only valid after the PPPoX server
 sessions are established. They will not be returned or
 accessible until the sessions are connected.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log Error message if command returns {status 0}
 The following keys are returned when you specify -port_handle:
 *** aggregate statistics ***
 -aggregate.idle
 Possible return values are 0 and 1. When
 it returns 1, no PPP servers are active. This
 state is entered if all hosts were manually released.

 -aggregate.connecting
 Possible return values are 0 and 1. When
 it returns 1, the server is awaiting
 connection requests (PADI messages) from clients.
 -aggregate.connected
 Possible return values are 0 and 1. When it returns 1, PPP
 sessions have completed all phases (LCP, authentication, and
 IPCP) of negotiation between the PPP client and the server and
 have resulted in retrieving an IP address for at least one host
 on the port.
 -aggregate.disconnecting
 Possible return values are 0 and 1. When it returns 1, the server
 is bringing down sessions by sending Terminate-Request messages
 to clients.
 -aggregate.abort
 Possible return values are 0 and 1. When it returns 1, the server
 is terminating.
 -aggregate.atm_mode
 Specifies whether the server session block is in the ATM mode.
 -aggregate.num_sessions
 The number of sessions.
 -aggregate.connect_attempts
 The number of connection attempts for the PPPoX server
 sessions (maximum of one per session). This value increments
 the first time an LCP Configure-Request packet is sent per session.

 -aggregate.connect_success
 The number of PPPoX server sessions that connected successfully.

 -aggregate.disconnect_success
 The number of disconnected server sessions during which an LCP
 Terminate-Request packet was sent (from either peer) and an LCP
 Terminate-Ack packet was received
 -aggregate.sessions_up
 The Number of sessions currently up.
 -aggregate.sessions_down
PPPoX Server Functions
858
 The Number of sessions currently down.
 - aggregate.disconnect_failed
 The number of PPPoX server sessions that fail to disconnect.

 -aggregate.min_setup_time
 The shortest period of time (in milliseconds) from when the first
 LCP Configure-Request packet was sent out to when an IPCP
 Configure-Ack packet was received for a single session.
 -aggregate.max_setup_time
 The longest period of time (in milliseconds) from when the first
 LCP Configure-Request packet was sent out to when an IPCP
 Configure-Ack packet was received for a single session.
 -aggregate.avg_setup_time
 The average period of time (in milliseconds) from when the first
 LCP Configure-Request packet was sent out to when an IPCP
 Configure-Ack packet was received for a single session.
 -aggregate.success_setup_rate
 The average rate of successful connections (in sessions
 per second).

 -aggregate.lcp_cfg_req_rx
 The number of Configure-Request packets received.

 -aggregate.lcp_cfg_req_tx
 The number of Configure-Request packets sent.
 -aggregate.lcp_cfg_rej_rx
 The number of Configure-Reject packets received.
 -aggregate.lcp_cfg_rej_tx
 The number of Configure-Reject packets sent.
 -aggregate.lcp_cfg_ack_rx
 The number of Configure-Acknowledge packets received.
 -aggregate.lcp_cfg_ack_tx
 The number of Configure-Acknowledge packets sent.
 -aggregate.lcp_cfg_nak_rx
 The number of Configure-Negative Acknowledge
 packets received.
 -aggregate.lcp_cfg_nak_tx
 The number of Configure-Negative Acknowledge
 packets sent.
 -aggregate.term_req_rx
 The number of Terminate-Request packets received.

 -aggregate.term_req_tx
 The number of Terminate-Request packets sent.
 -aggregate.term_ack_rx
 The number of Configure-Acknowledge packets received.
 -aggregate.term_ack_tx
 The number of Configure-Acknowledge packets sent.
 -aggregate.echo_req_rx
 The number of Echo Request packets received.

 -aggregate.echo_req_tx
 The number of Echo Request packets sent.
 -aggregate.echo_rsp_rx
 The number of Echo Reply packets received.
PPPoX Server Functions
859
 -aggregate.echo_rsp_tx
 The number of Echo Reply packets sent.
 -aggregate.ipcp_tx
 The number of IPCP requests sent.
 -aggregate.ipcp_rx
 The number of IPCP requests received.
 -aggregate.pap_auth_tx
 The number of PAP requests sent.

 -aggregate.pap_auth_rx
 The number of PAP requests received.
 -aggregate.chap_auth_tx
 The number of CHAP requests sent.
 -aggregate.chap_auth_rx
 The number of CHAP requests received.
 -aggregate.ipv6cp_tx
 The number of IPv6CP requests sent.
 -aggregate.ipv6cp_rx
 The number of IPv6CP requests received.
 -aggregate.padi_rx
 The number of PPPoE Active Discovery Initialized packets
 received.

 -aggregate.padi_tx
 The number of PPPoE Active Discovery Initialized packets
 received.
 -aggregate.pado_rx
 The number of PPPoE Active Discovery Offer (PADO) packets
 received.

 -aggregate.padr_tx
 The number of PPPoE Active Discovery Request packets sent.

 -aggregate.pads_rx
 The number of PPPoE Active Discovery Session-confirmation
 packets received.
 -aggregate.padt_tx
 The number of PPPoE Active Discovery Terminate
 packets sent.
 -aggregate.padt_rx
 The number of PPPoE Active Discovery Terminate
 packets received.
 -aggregate.padr_rx
 The number of PPPoE Active Discovery Request (PADR)
 packets received.
 -aggregate.pado_tx
 The number of PADO packets sent.
 -aggregate.pads_tx
 The number of PADS packets sent.
 -aggregate.session_retried
 The number of sessions retired.
 *** session statistics ***
 The Detailed Session Information dialog box displays information at
 the PPPoX server session level. The statistics are listed below:
PPPoX Server Functions
860
 -session.<session ID>.idle
 Possible return values are 0 and 1. When
 it returns 1, no PPP sessions are active. This
 state is entered if all hosts were manually released.

 -session.<session ID>.connecting
 Possible return values are 0 and 1. When
 it returns 1, the server is awaiting
 connection requests (PADI messages) from clients.
 -session.<session ID>.connected
 Possible return values are 0 and 1. When it returns 1, PPP
 sessions have completed all phases (LCP, authentication, and
 IPCP) of negotiation between the PPP client and the server and
 have resulted in retrieving an IP address for at least one host
 on the port.
 -session.<session ID>.disconnecting
 Possible return values are 0 and 1. When it returns 1,
 the server is bringing down sessions by sending
 Terminate-Request messages to clients.
 -session.<session ID>.abort
 Possible return values are 0 and 1. When it returns 1,
 the server is terminating.
 -session.<session ID>.atm_mode
 Possible return values are 0 and 1. When it returns 1,
 the server is in the ATM mode.
 -session.<session ID>. connect_success
 Possible return values are 0 and 1. When it returns 1,
 the server connects to the clients successfully.

 -session.<session ID>. disconnect_success
 Possible return values are 0 and 1. When it returns 1,
 the server session block is disconnected successfully.
 -session.<session ID>. sessions_up
 Possible return values are 0 and 1. When it returns 1,
 the session are up.
 -session.<session ID>. disconnect_failed
 Possible return values are 0 and 1. When it returns 1,
 the server is failed to be disconnected.
 -session.<session ID>. sessions_down
 Possible return values are 0 and 1. When it returns 1,
 the session are down.
 -session.<session ID>.lcp_cfg_req_rx
 The number of Configure-Request packets received.
 -session.<session ID>.lcp_cfg_req_tx
 The number of Configure-Request packets sent.
 -session.<session ID>.lcp_cfg_rej_rx
 The number of Configure-Reject packets received.
 -session.<session ID>.lcp_cfg_rej_tx
 The number of Configure-Reject packets sent.
 -session.<session ID>.lcp_cfg_ack_rx
 The number of Configure-Acknowledge packets received.
 -session.<session ID>.lcp_cfg_ack_tx
 The number of Configure-Acknowledge packets sent.
 -session.<session ID>.lcp_cfg_nak_rx
 The number of Configure-Negative Acknowledge packets received.
PPPoX Server Functions
861
 -session.<session ID>.lcp_cfg_nak_tx
 The number of Configure-Negative Acknowledge packets sent.
 -session.<session ID>.ipcp_tx
 The number of IPCP packets sent.
 -session.<session ID>.ipcp_rx
 The number of IPv6CP packets received.
 -session.<session ID>.ipv6cp_tx
 The number of IPv6CP packets sent.
 -session.<session ID>.ipv6cp_rx
 The number of IPv6CP packets received.
 -session.<session ID>.padi_rx
 The number of PPPoE Active Discovery Initialized packets
 received.
 -session.<session ID>.pado_tx
 The number of PPPoE Active Discovery Request packets sent.

 -session.<session ID>.padr_rx
 The number of PPPoE Active Discovery Request packets received.

 -session.<session ID>.pads_tx
 The number of PPPoE Active Discovery Session-confirmation
 packets sent.
 -session.<session ID>.padt_rx
 The number of PPPoE Active Discovery Terminate
 packets received.
 -session.<session ID>.padt_tx
 The number of PPPoE Active Discovery Terminate
 packets sent.
 -session.<session ID>.term_req_rx
 The number of Terminate-Request packets received.
 -session.<session ID>.term_req_tx
 The number of Terminate-Request packets sent.
 -session.<session ID>.term_ack_rx
 The number of Configure-Acknowledge packets received.
 -session.<session ID>.term_ack_tx
 The number of Configure-Acknowledge packets sent.
 -session.<session ID>.echo_req_rx
 The number of Echo Request packets received.
 -session.<session ID>.echo_req_tx
 The number of Echo Request packets sent.
 -session.<session ID>.echo_rsp_rx
 The number of Echo Reply packets received.
 -session.<session ID>.echo_rsp_tx
 The number of Echo Reply packets sent.
 -session.<session ID>.pap_auth_tx
 The number of PAP authentication packets sent.
 -session.<session ID>.pap_auth_rx
 The number of PAP authentication packets received.
 -session.<session ID>.chap_auth_tx
 The number of CHAP authentication packets sent.
 -session.<session ID>.chap_auth_rx
PPPoX Server Functions
862
 The number of CHAP authentication packets received.
Description:
 The sth::pppox_server_stats function retrieves a list of aggregate
 statistics for the PPPoE session configured on the specified port.
Examples:
 #### HLTAPI for Tcl ####
 The following example retrieves aggregate results:
 sth::pppox_server_stats -mode aggregate \
 -handle $serverHandle
 Output:
 {port_handle port1} {aggregate {{connecting 0} {connected 1}
 {disconnecting 0} {abort 0} {idle 0} {atm_mode 0} {ipcpv6_cfg_rx 0}
 {term_req_rx 0} {term_ack_tx 0} {ipcp_cfg_rx 30} {chap_auth_rx 10}
 {padr_rx 10} {lcp_cfg_rej_tx 0} {echo_rsp_rx 0} {padt_tx 0} {pado_tx 10}
 {ipcpv6_cfg_tx 0} {connect_success 10} {term_req_tx 0} {lcp_cfg_ack_rx 10}
 {num_sessions 10} {ipcp_cfg_tx 30} {echo_req_rx 0} {chap_auth_tx 20}
 {padr_tx 0} {disconnect_success 0} {max_setup_time 0} {echo_rsp_tx 0}
 {pads_rx 0} {sessions_up 10} {pap_auth_rx 0} {disconnect_failed 0}
 {lcp_cfg_req_rx 10} {lcp_cfg_ack_tx 10} {padi_rx 10} {lcp_cfg_nak_rx 0}
 {echo_req_tx 0} {min_setup_time 0} {success_setup_rate 0}
 {term_ack_rx 0} {session_retried 0} {pads_tx 10} {pap_auth_tx 0}
 {sessions_down 0} {lcp_cfg_rej_rx 0} {lcp_cfg_req_tx 10} {padi_tx 0}
 {lcp_cfg_nak_tx 0} {padt_rx 0} {connect_attempts 0} {avg_setup_time 0}
 {pado_rx 0}}} {status 1}
 The following example retrieves session results
 sth::pppox_server_stats -mode session \
 -handle $serverHandle
 Output:
 {session {{host3 {{connecting 0} {connected 1} {disconnecting 0}
 {abort 0} {idle 0} {atm_mode 0} {ipcpv6_cfg_rx 0} {term_req_rx 0}
 {term_ack_tx 0} {ipcp_cfg_rx 30} {chap_auth_rx 10} {padr_rx 10}
 {lcp_cfg_rej_tx 0} {echo_rsp_rx 0} {padt_tx 0} {pado_tx 10}
 {ipcpv6_cfg_tx 0} {connect_success 10} {term_req_tx 0} {lcp_cfg_ack_rx 10}
 {ipcp_cfg_tx 30} {echo_req_rx 0} {chap_auth_tx 20} {disconnect_success 0}
 {echo_rsp_tx 0} {sessions_up 10} {pap_auth_rx 0} {disconnect_failed 0}
 {lcp_cfg_req_rx 10} {lcp_cfg_ack_tx 10} {padi_rx 10} {lcp_cfg_nak_rx 0}
 {echo_req_tx 0} {term_ack_rx 0} {pads_tx 10} {pap_auth_tx 0}
 {sessions_down 0} {lcp_cfg_rej_rx 0} {lcp_cfg_req_tx 10} {lcp_cfg_nak_tx 0}
 {padt_rx 0}}}}} {status 1}
 #### HLTAPI for Python ####
 The following example retrieves aggregate results:
 results_ret1 = sth.pppox_server_stats (
 handle = device,
 mode = 'aggregate');
 Sample Output:
 {'aggregate': {'num_sessions': '1', 'lcp_cfg_ack_tx': '0', 'echo_rsp_tx': '0',
 'term_ack_rx': '0', 'lcp_cfg_ack_rx': '0', 'pado_rx': '0', 'padr_rx': '0',
 'pads_rx': '0', 'padr_tx': '0', 'abort': '0', 'disconnect_success': '0',
 'max_setup_time': '0', 'disconnect_failed': '0', 'padt_rx': '0', 'term_ack_tx':
 '0', 'pap_auth_tx': '0', 'min_setup_time': '0', 'avg_setup_time': '0',
 'session_retried': '0', 'padt_tx': '0', 'ipcp_rx': '0', 'pads_tx': '0',
 'lcp_cfg_rej_rx': '0', 'connecting': '0', 'ipcp_tx': '0', 'lcp_cfg_req_tx': '0',
 'connect_success': '0', 'disconnecting': '0', 'lcp_cfg_rej_tx': '0',
 'lcp_cfg_req_rx': '0', 'echo_req_tx': '0', 'echo_req_rx': '0', 'chap_auth_tx':
 '0', 'sessions_up': '0', 'ipcpv6_tx': '0', 'pado_tx': '0', 'connect_attempts':
 '0', 'chap_auth_rx': '0', 'atm_mode': '0', 'ipcpv6_rx': '0', 'term_req_tx': '0',
 'pap_auth_rx': '0', 'lcp_cfg_nak_rx': '0', 'term_req_rx': '0', 'padi_tx': '0',
 'echo_rsp_rx': '0', 'idle': '1', 'padi_rx': '0', 'sessions_down': '0',
 'connected': '0', 'success_setup_rate': '0', 'lcp_cfg_nak_tx': '0'}, 'status':
 '1', 'port_handle': 'port1'}
 #### HLTAPI for Perl ####
 The following example retrieves aggregate results:
PPPoX Server Functions
863

 my %results_ret1 = sth::pppox_server_stats (
 handle => "$device",
 mode => 'aggregate');
 Sample Output:
 $VAR1 = 'port_handle';
 $VAR2 = 'port1';
 $VAR3 = 'status';
 $VAR4 = '1';
 $VAR5 = 'aggregate';
 $VAR6 = {
 'echo_req_rx' => '0',
 'term_req_tx' => '0',
 'lcp_cfg_req_rx' => '0',
 'sessions_up' => '0',
 'ipcpv6_tx' => '0',
 'padi_tx' => '0',
 'term_ack_tx' => '0',
 'pads_tx' => '0',
 'disconnect_success' => '0',
 'lcp_cfg_nak_rx' => '0',
 'pado_rx' => '0',
 'echo_rsp_tx' => '0',
 'abort' => '0',
 ...
Notes:
 None.
End of Procedure Header
PTP Functions
864
PTP Functions
Functions:
sth::emulation_ptp_config
sth::emulation_ptp_control
sth::emulation_ptp_stats
sth::emulation_ptp_config
Name:
 sth::emulation_ptp_config
Purpose:
 The sth::emulation_ptp_config command configures Precision Time
 Protocol (PTP) master and slave over UDP over IPv4/IPv6 or over Ethernet
 emulation for a given port.
 PTP, known officially as IEEE 1588v2, is a high-precision time protocol for
 synchronization used in measurement and control systems residing on a
 local area network. It provides synchronous communications in an
 asynchronous environment by allowing heterogeneous systems that
 include clocks of various precision, resolution, and stability to synchronize
 to a grandmaster clock at the nanosecond level.
Synopsis:
 sth::emulation_ptp_config
 -mode {create | enable_all | disable_all} -port_handle <port_handle> |
 -mode modify {modify | delete | enable | disable } -handle <ptp_device_handle>
 [-device_type {ptpSlave | ptpMaster}]
 [-transport_type {ethernet_ii | ipv4 | ipv6}]
 [-count <integer>]
 [-name <name>]
 [-encapsulation {ETHERNETII | LLC_SNAP| VC_MUX |
 ETHERNETII_LLC_SNAP |ETHERNETII_VC_MUX}]
 [-vlan_id1 <0 - 4095>]
 [-vlan_ether_type1 {0x8100 | 0x88A8 | 0x9100 | 0x9200}]
 [-vlan_id_mode1 {fixed | increment}]
 [-vlan_id_step1 <0-4095>]
 [-vlan_id_repeat1 <0 - 4095>]
 [-vlan_priority1 <0-7>]
 [-vlan_id2 <0 - 4095>]
 [-vlan_ether_type2 {0x8100 | 0x88A8 | 0x9100 | 0x9200}]
 [-vlan_id_mode2 {fixed | increment}]
 [-vlan_id_step2 <0 - 4095>]
 [-vlan_id_repeat2 <0 - 4095>]
 [-vlan_priority2 <0-7>]
 [-local_mac_addr <aa:bb:cc:dd:ee:ff>]
 [-local_mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-local_mac_addr_repeat <integer>]
 [-local_ip_addr <a.b.c.d>]
 [-local_ip_addr_step <a.b.c.d>]
 [-local_ip_addr_repeat <integer>]
 [-local_ip_prefix_len <0-32>]
 [-local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_addr_repeat <integer>]
 [-local_ipv6_prefix_len <0-128>]
 [-remote_ip_addr <a.b.c.d>]
 [-remote_ip_addr_step <a.b.c.d>]
 [-remote_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-remote_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ptp_session_mode {unicast|multicast}]
 [-ipv4_priority {tos | diff-serv}]
 [-ip_tos_field <0x0 - 0xFF>]
PTP Functions
865
 [-tos_precedence {routine|priority|immediate|flash|
 flash-override| critic-ecp|internet-control|network-control}]
 [-tos_delay {normal|low}]
 [-tos_throughput {normal|high}]
 [-tos_reliability {normal|high}]
 [-tos_monetary_cost{normal|minimize}]
 [-tos_unused <0x0-0xF>]
 [-diff_default <0-255>]
 [-diff_class <0-7>]
 [-diff_assured_forwarding {class1-low-drop|
 class1-medium-drop|class1-high-drop|
 class2-low-drop|class2-medium-drop|class2-high-drop|
class3-low-drop|class3-medium-drop|class3-high-drop|
 class4-low-drop|class4-medium-drop |class4-high-drop}]
 [-diff_explicit_forwarding <0-63>]
 [-diff_ecn {ecn-capable-transport1| ecn-capable-transport0|
 non-ecn-capable-transport|congestion}]
 [-ptp_domain_number <0-255>]
 [-ptp_port_number <0-65535>]
 [-ptp_clock_id <hexadecimal>]
 [-ptp_clock_id_mode {increment|list}]
 [-ptp_clock_id_step <hexadecimal>]
 [-ptp_clock_id_repeat <integer>]
 [-master_clock_class <0-255>]
 [-master_clock_priority1 <0-255>]
 [-master_clock_priority2 <0-255>]
 [-time_source <atomic-clock | gps | terrestrial-radio
 | ptp | ntp | handset | other | internal-oscillator |
 ptp-profile}]
 [-announce_message_enable {0|1}]
 [-log_announce_message_interval <0-4>]
 [-announce_receipt_timeout <3-20>]
 [-sync_enable {0|1}]
 [-sync_two_step_flag { on }]
 [-log_sync_message_interval {-5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5}]
 [-path_delay_mechanism {end-to-end }]
 [-delay_request_enable {0|1}]
 [-log_minimum_delay_request_interval {-5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5}]
 [-tx_crc_error_perc <0-100>]
 [-tx_time_stamp_error_perc <0-100>]
 [-tx_delay_resp_dropped_perc <0-100>]
 [-tx_followup_dropped_perc <0-100>]
 [-enable_correction {0|1}]
 [-sync_correction <integer>]
 [-followup_correction <integer>]
 [-delay_request_correction <integer>]
 [-delay_response_correction <integer>]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vpi <0-255>]
 [-vpi_step <0-255>]
Arguments:
 -mode
 Specifies the action to perform on the port (-port_handle)
 or on the device (-handle) . This argument is mandatory. Possible
 values are described below:
 create - Creates a new PTP device on the port specified by
 -port_handle.
 modify - Modifies the PTP device specified by -handle.
 delete - Deletes the PTP device specified by -handle.
 enable_all - Activates all the PTP devices on the port specified by
 -port_handle.
 disable_all - Deactivates all the PTP devices on the port specified by
 -port_handle.
 enable - Active the specific PTP device specified by -handle.
 disable - Deactivates the specific PTP device specified by -handle.
 -port_handle
 Defines the port on which the PTP emulation will be created. The
PTP Functions
866
 port handle is returned from the sth::connect function. This
 parameter is mandatory for the create, the enable_all, and the
 disable_all mode.
 -handle
 Specifies the handle of the created PTP device.
 This argument is mandatory for the modify, the enable, the
 disable or the delete mode. For the modify mode, you can specify
 only one handle; For the delete, the enable, or the disable mode,
 you can specify a list of handles.
 -device_type
 Specifies the port role of the PTP emulation. Possible values are
 described below:

 ptpMaster - The PTP emulation is a master port that transits the
 synchronous time. This is the default.
 ptpSlave - The PTP emulation is a slave port that receives the
 synchronous time only.
 -transport_type
 Defines the protocol layer that carries the PTP packets. This
 argument is mandatory for the create mode. Possible values are
 described below:

 ethernet_ii - The PTP protocol will transport directly over Ethernet
 frames.
 ipv4 - The PTP protocol will transport over User Datagram
 Protocol (UDP) over IPv4 encapsulation.
 ipv6 - The PTP protocol will transport over UDP over IPv6
 encapsulation.
 Notes:
 This argument determines the encapsulation used by PTP emulation
 as well as the scope of IP address parameters. For example, if
 -transport_type is set to ipv4, parameters to configure the IPv4
 address will take effect; if -transport_type is set to
 ethernet_ii, IP address setting parameters will not take effect.
 -count
 Specifies the number of PTP emulations to create on the port
 specified by the -port_handle argument. This argument is
 available only in the create mode. The default value is 1.
 -name
 Defines the name of the PTP device.
 -encapsulation
 Specifies the Layer2 framing mode for encapsulated devices. The
 default is ETHERNETII. Possible values are described below:
 ETHERNETII - Specifies the Layer 2 encapsulation to be Ethernet II
 frame. This option is available for Ethernet cards.
 VC_MUX - Specifies the ATM encapsulation to be VC Multiplexed.
 Virtual Circuit Multiplexing (VC_MUX) is one of the two
 mechanisms or identifying the protocol carried in ATM
 Adaptation Layer5 (AAL5) frame. This option is available for
 ATM cards.
 LLC_SNAP - Specifies the ATM encapsulation to be LLC
 Encapsulated. LLC_SNAP is the other mechanism for
 identifying the protocol carried in AAL5 frame. This option
 is available for ATM cards.
 ETHERNETII_LLC_SNAP - Specifies the Layer 2 encapsulation to be
 Ethernet over VC Multiplexed ATM which will encapsulate the
 Ethernet packets inside AAL5 LLC_SNAP frames. This option is
 available for ATM cards.
 ETHERNETII_VC_MUX - Specifies the Layer 2 encapsulation to be 
PTP Functions
867
 Ethernet over LLC Encapsulated ATM which will encapsulate the
 Ethernet packets inside AAL5 VC_MUX frames.This option is
 available for ATM cards.
 Notes: When -encapsulation is set to ETHERNETII,
 ETHERNETII_LLC_SNAP, or ETHERNETII_VC_MUX, you can use
 -vlan_id1 and related VLAN arguments to configure VLAN
 interface, or you can use -vlan_id1, -vlan_id2 and related
 VLAN arguments to configure Q-in-Q interface. See the
 -vlan_id1 and the -vlan_id2 arguments description for more
 information.
 -vlan_id1
 Specifies the VLAN ID of the first VLAN for the Ethernet field.
 When multiple VLAN tags are configured by configuring -vlan_id1
 and -vlan_id2 both, the first VLAN (-vlan_id1) is the outer VLAN,
 also known as the Service Provider VLAN. Possible values range
 from 0 to 4095. The default value is 100.
 The Ethernet VLAN encapsulation will be enabled, when you specify
 -vlan_id1 and leave -vlan_id2 unspecified. The Ethernet Q-in-Q
 encapsulation will be enabled, when you specify both -vlan_id1
 and -vlan_id2.In this case, -vlan_id1 is used as the outer VLAN
 and -vlan_id2 the inner VLAN.
 This argument is available when -encapsulation is set to
 ETHERNETII, ETHERNETII_LLC_SNAP, or ETHERNETII_VC_MUX.
 -vlan_ether_type1
 Specifies the VLAN Ethernet type for the Ethernet field. When
 -vlan_id1 is specified, you can use this argument. Possible
 values are described below:

 0x8100 - Specifies EtherType value 0x8100, a value of 8100 in
 hexadecimal. When a frame has the VLAN EtherType equal to
 8100, this frame carries the tag IEEE 802.1Q. This is the
 default.
 0x88A8 - Specifies EtherType value 0x88a8, a value of 88a8 in
 hexadecimal. When a frame has the VLAN EtherType equal to
 88A8, this frame carries the tag EEE 802.1ad.
 0x9100 - Specifies EtherType value 0x9100, a value of 9100 in
 hexadecimal. When a frame has the VLAN EtherType equal to
 9100, this frame carries the tag IEEE standard IEEE
 802.1Q-1998.
 0x9200 - Specifies EtherType value 0x9200, a value of 9200 in
 hexadecimal.
 -vlan_id_mode1
 Specifies the VLAN ID assignment for multiple PTP emulations when
 -count is greater than 1.Possible values are fixed and increment.
 You can use this argument when -vlan_id1 is specified. The
 default value is increment. If you set this argument to
 "increment", then you must also specify the -vlan_id_step1
 argument to indicate the step size.
 -vlan_id_step1
 Defines the value by which the VLAN IDs are to be incremented.
 Possible values range from 0 to 4095. The default value is 1.You
 can use this argument when -vlan_id_mode is set to increment.
 -vlan_id_repeat1
 Specifies the number of times a VLAN ID is to be repeated before
 the step specified by the -vlan_id_step1 argument is applied to
 the VLAN ID specified by -vlan_id1. Possible values range from 0
 to 4095. The default value is 0. You can use this argument when
 the -vlan_id_mode is set to increment.
 
PTP Functions
868
 -vlan_priority1
 Specifies the priority of the first VLAN under the Ethernet
 header. Possible values range from 0 (highest) to 7 (lowest). The
 default value is 0. You can use this argument only when -vlan_id1
 is specified.
 -vlan_id2
 Specifies the VLAN ID of the second VLNA for the Ethernet field.
 When multiple VLAN tags are configured by configuring -vlan_id1
 and -vlan_id2 both, the second VLAN is the inner VLAN, also known
 as Customer VLAN. Possible values range from 0 to 4095. The
 default value is 100. You can use this argument when -vlan_id1 is
 specified and -encapsulation is set to ETHERNETII,
 ETHERNETII_LLC_SNAP, or ETHERNETII_VC_MUX.

 -vlan_ether_type2
 Specifies the inner VLAN Ethernet type for the Ethernet field.
 When -vlan_id2 is specified, you can use this argument. Possible
 values are described below:

 0x8100 - Specifies EtherType value 0x8100, a value of 8100 in
 hexadecimal. When a frame has the VLAN EtherType equal to
 8100, this frame carries the tag IEEE 802.1Q. This is the
 default.
 0x88A8 - Specifies EtherType value 0x88a8, a value of 88a8 in
 hexadecimal. When a frame has the VLAN EtherType equal to
 88A8, this frame carries the tag IEEE 802.1ad.
 0x9100 - Specifies EtherType value 0x9100, a value of 9100 in
 hexadecimal. When a frame has the VLAN EtherType equal to
 9100, this frame carries the tag IEEE standard IEEE
 802.1Q-1998.
 0x9200 - Specifies EtherType value 0x9200, a value of 9200
 in hexadecimal.
 -vlan_id_mode2
 Determines whether the inner VLAN IDs are fixed or increment.
 Possible values are fixed and increment. You can use this
 argument when -vlan_id2 is specified. The default value is
 increment. If you set this argument to "increment", then you must
 also specify the -vlan_id_step2 argument to indicate the step
 size.
 -vlan_id_step2
 Defines the value by which the inner VLAN IDs are to be
 incremented. Possible values range from 0 to 4095. The default
 value is 1. You can use this argument -vlan_id_mode2 is set to
 increment.
 -vlan_id_repeat2
 Specifies the number of times an inner VLAN ID is to be repeated
 before the step specified by the -vlan_id_step2 argument is
 applied to the VLAN ID specified by -vlan_id2. Possible values
 range from 0 to 4095. The default value is 0. You can use this
 argument only when you specify -vlan_id2 and the -vlan_id_mode2
 argument is set to increment.
 -vlan_priority2
 Specifies the priority of the inner VLAN under the Ethernet
 header. Possible values range from 0 (highest) to 7 (lowest). The
 default value is 0. You can use this argument only when -vlan_id2
 is specified.
 -local_mac_addr
 Specifies the starting MAC address. You can use this argument
 when -encapsulation is set to ETHERNETII, THERNETII_LLC_SNAP, or
 ETHERNETII_VC_MUX. The values must be in MAC address format. 
PTP Functions
869
 -local_mac_addr_step
 Specifies the increment for the MAC address. The default value is
 00:00:00:00:00:01. You can use this argument when -encapsulation
 is set to ETHERNETII, ETHERNETII_LLC_SNAP, or ETHERNETII_VC_MUX.
 -local_mac_addr_repeat
 Specifies the number of times a MAC address is to be repeated
 before the step is applied to the MAC address. The default value
 is 0. You can use this argument when -encapsulation is set to
 ETHERNETII, ETHERNETII_LLC_SNAP, or ETHERNETII_VC_MUX.
 -local_ip_addr
 Specifies the starting IPv4 address. The values must be in IPv4
 format. This argument is available when -transport_type is set to
 ipv4.
 -local_ip_addr_step
 Specifies the IPv4 address step for increment. The values must be
 in IPv4 format. The default value is 0.0.0.1. This argument is
 available when -transport_type is set to ipv4.
 -local_ip_addr_repeat
 Specifies the number of times an IPv4 address is to be repeated
 before the step specified by the -local_ip_addr_step argument is
 applied to the MAC address specified by -local_ip_addr. The
 default value is 0. This argument is available when
 -transport_type is set to ipv4.
 -local_ip_prefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length on the emulated device. Possible
 values range from 0 to 32. The default value is 24. This argument
 is available when -transport_type is set to ipv4.
 -local_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the starting IPv6 address. The values must be in IPv6
 format. This argument is available when -transport_type is set to
 ipv6.
 -local_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only). Specifies the IPv6
 address step for increment. The values must be in IPv6. This
 argument is available when -transport_type is set to ipv6.
 -local_ipv6_addr_repeat
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of times an IPv6 address is to be repeated
 before the step specified by the -local_ipv6_addr_step argument
 is applied to the MAC address specified by -local_ipv6_addr. The
 default value is 0. This argument is available when
 -transport_type is set to ipv6.
 -local_ipv6_prefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 prefix length on the emulated device. Possible
 values range from 0 to 128. The default value is 64.This argument
 is available when -transport_type is set to ipv6.
 -remote_ip_addr
 Specifies the IPv4 address of the SUT. The values must be in IPv4
 format. This argument is available when -transport_type is set to
 ipv4.
 -remote_ip_addr_step
 Specifies the increment step for the SUT IPv4 address. The values
 must be in IPv4 format. The default is 0.0.0.0. This argument is
 available when -transport_type is set to ipv4.

 
PTP Functions
870
 -remote_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 address of the SUT. The values must be in IPv6
 format. This argument is available when -transport_type is set to
 ipv6.
 -remote_ipv6_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the increment step for the SUT IPv6 address. The values
 must be in IPv6 format. This argument is available when
 -transport_type is set to ipv6.
 -ptp_session_mode
 Defines the type of the destination address. Possible values
 are describe below:
 multicast - Sends multicast PTP messages to learnt or configured
 devices. This is the default.
 unicast - Sends unicast PTP messages to configured devices.
 Note:
 The unicast is not supported by Spirent HLTAPI.

 -ipv4_priority
 Specifies the service class of the Type of Service (TOS) field in
 an IPv4 header. Possible values are tos and diff-serv. You can
 configure different arguments when you choose different options
 for this argument.
 tos - Type of service. TOS specifies a preference for how the
 datagram would be handled. This is the default.
 diff-serv - Differentiated services (DiffServ).
 Differentiated Services classify and manage network traffic
 and provide quality of service (QoS) guarantees on IP
 networks.
 -ip_tos_field
 Configures the IPv4 header's TOS bits. The values must be in
 hexadecimal format. Possible values range from 0x0 to 0xFF. The
 default value is 0x0. This argument is available when
 -ipv4_priority is set to tos.
 Note: When -tos_** and -ip_tos_field are configured at the same
 time, the priority of -ip_tos_field is higher.
 -tos_precedence
 Configures the precedence of the IPv4 TOS field. It is an
 independent measurement of the datagram importance. Possible
 values are routine, priority, immediate, flash, flash-override,
 critic-ecp, internet-control, network-control, and
 internet-control. This argument is available when -ipv4_priority
 is set to tos. The default is internet-control.
 -tos_delay
 Configures the delay of the IPv4 TOS field. This field indicates
 the importance of the prompt delivery for the datagram delivery.
 This argument is available when you specify -ipv4_priority tos.
 Possible values are described below:
 normal - The importance of the prompt delivery is normal.
 This is the default.
 low - The importance of the prompt delivery is low.
 -tos_throughput
 Configures the throughput of the IPv4 TOS field.
 This argument is available when you specify -ipv4_priority
 tos. This field indicates the importance of the high data
 rate for this datagram. Possible values are described
 below:
PTP Functions
871
 normal - The importance of high data rate is normal.
 This is the default.
 high - The importance of high data rate is high.
 -tos_reliability
 Configures the reliability of the IPv4 TOS field. This field
 indicates the importance of a higher level effort to ensure
 delivery for this datagram. This argument is available when you
 specify -ipv4_priority tos. Possible values are described below:
 normal - The importance of reliability is normal. This is the
 default. high - The importance of reliability is high.
 -tos_monetary_cost
 Configures the monetary cost of the IPv4 TOS field. This argument
 is available when you specify -ipv4_priority tos. Possible values
 are described below:
 normal - The importance is normal. This is the default.
 minimize - The importance is minimum.
 -tos_unused
 Unused bits in the IPv4 TOS. This argument is available when you
 specify -ipv4_priority tos. The values must be in hexadecimal
 format. Possible values range from 0x0 to 0xF. The default value
 is 0x0.
 -diff_default
 Defines the default value of the DiffServ bits. Possible values
 range from 0 to 255. This argument is available when you specify
 -ipv4_priority diff-serv. The values must be integers.
 Note:
 When you specify the -diff_default argument and the -diff_*
 arguments at the same time, the -diff_* arguments will be
 ignored.
 -diff_class
 Defines the diff-serviceclass type. Possible values range from 0
 (class 0) to 7 (class 7). This argument is available when you
 specify -ipv4_priority diff-serv. This argument will be ignored
 when you specify -diff_ assured_forwarding or
 -diff_explicit_forwarding.
 -diff_ assured_forwarding
 Defines the diff-service assured forwarding that gives the
 assurance of delivery under different conditions. Possible values
 are:
 class1-low-drop, class1-medium-drop, class1-high-drop,
 class2-low-drop, class2-medium-drop, class2-high-drop,
 class3-low-drop, class3-medium-drop, class3-high-drop,
 class4-low-drop, class4-medium-drop, and class4-high-drop. The
 assured forwarding defines the drop rate of three levels: low,
 medium, and high. "high drop" means higher drop rate. And the
 classes are used to define the measure of priority and
 proportional fairness. If congestion occurs between classes, the
 traffic in the higher class is given priority. This argument is
 available when you specify -ipv4_priority diff-serv.
 -diff_ssured_forwarding and -diff_explicit_forwarding are
 mutually exclusive. You cannot specify the two arguments at the
 same time. When you specified -diff_assured_forwarding,
 -diff_class will be ignored.
 -diff_explicit_forwarding
 Defines the diff-service explicit forwarding behavior. Possible
 values range from 0 to 63. This argument is available when you
 specify -ipv4_priority diff-serv. You can refer to RFC 3246 for
 details. -diff_assured_forwarding and -diff_explicit_forwarding
 are mutually exclusive. You cannot specify the two arguments at
 the same time. When you specified -diff_explicit_forwarding,
PTP Functions
872
 -diff_class will be ignored.
 -diff_ecn
 Defines the diff-service Explicit Congestion Notification
 (ECN). Possible values are described below:
 ecn-capable-transport1 - The endpoints are ECN-capable.
 ecn-capable-transport0 - The endpoints are ECN-capable.
 non- ecn-capable-transport - packet is not using ECN.This is the
 default.
 congestion - Indicates there is congestion.
 This argument is available when you specify -ipv4_priority
 diff-serv. You can refer to RFC 4774 for details.
 -ptp_domain_number
 The number of PTP domains to use. The master and slave clocks
 must be in the same domain to be visible to each other for
 communication. Possible values range from 0 to 255. The default
 value is 0.
 -ptp_port_number
 Defines the emulated Port Number. Possible values range from 0 to
 65535. The default value is 1.
 -ptp_clock_id
 Defines the clock identifier for the emulated clock. The maximum
 length for the hexadecimal clock ID is 16. The values of this
 argument must be hexadecimal.
 -ptp_clock_id_mode
 Identifies the way in which the clock IDs of the emulated clocks
 are generated. Possible values are described below:
 increment - Indicates the clock IDs increments by the step
 specified in the ptp_clock_id_step.This is the default.
 list - Indicates the clock IDs are defines in a list. The clock
 IDs in the ist will be assigned to PTP devices in a
 round-robin fashion.
 -ptp_clock_id_step
 Defines the value by which the clock IDs are to be incremented.
 The values of this argument must be hexadecimal. The maximum
 length for the hexadecimal clock ID is 16. This argument is
 available when -ptp_clock_id_mode is set to increment.
 -ptp_clock_id_repeat
 Specifies the number of times a clock ID is to be repeated before
 the step specified by the -ptp_clock_id_step argument is applied
 to the clock ID specified by -ptp_clock_id. The values must be
 integers. The default value is 0. This argument is available when
 -ptp_clock_id_mode is set to increment.
 -master_clock_class
 Defines the traceability of the time or the frequency distributed
 by the master clock. The values must be integers. Possible values
 range from 0 to 255. The default value is 248. This argument is
 only available when you specify -device_type ptpMaster.
 -master_clock_priority1
 Sets the priority1 attribute of the master clock. The values must
 be integers. Possible values range from 0 to 255. The default
 value is 0. This argument is only available when you specify
 -device_type ptpMaster.
 -master_clock_priority2
 Sets the priority2 attribute of the master clock. The values must
 be integers. Possible values range from 0 to 255. The default
 value is 0. This argument is only available when you specify
 -device_type ptpMaster.
PTP Functions
873
 -time_source
 Indicates the source of time used by the grandmaster clock. This
 argument is only available when you specify -device_type
 ptpMaster. The internal-oscillator is the default. Possible
 values are described below:
 atomic-clock - Indicates the device described below and
 the device that connected to such a device: The
 atomic-clock device is based on atomic resonance for
 frequency and calibrated against internal standards for
 frequency and time, if the PTP timescale is used.
 gps - Indicates the device that synchronized to a satellite system
 that distribute time and frequency tied to international
 standards.
 terrestrial-radio - Indicates the device that synchronized via
 any of the radio distribution systems that distribute time
 and frequency tied to international standards.
 ptp - Indicates the device synchronized to a PTP-based source
 of time external to the domain.
 ntp - Indicates the device synchronized via Network Time
 Protocol (NTP) or Simple Network Time Protocol (SNTP)
 to servers that distribute time and frequency tied to
 international standards.
 handset - Indicates the device whose time has been set by means
 of a human interface based on observation of an international
 standards source of time to within the claimed clock accuracy.
 other - Other source of time and/or frequency not covered by
 other values.
 internal-oscillator - Defines the device whose frequency is not
 based on atomic resonance nor calibrated against
 international standards for frequency, and whose time is
 based on a free-running oscillator with epoch determined
 in an arbitrary or unknown manner.
 ptp-profile - For use by alternate PTP profiles.
 reserved - Reserved. This is not supported.

 -announce_message_enable
 Enables or disables the transmission of Announce messages.
 Possible values are 0 (disable) and 1 (enable).The default value
 is 1. This argument is only available when you specify
 -device_type ptpMaster.

 -log_announce_message_interval
 Indicates the log of the Announce message transmission interval,
 which is the mean time interval between the successive Announce
 messages. The values must be integers. Possible values range from
 0 to 4. The default value is 0. You can use this argument when
 -device_type is set to ptpMaster and -announce_message_enable is
 set to 1.
 -announce_receipt_timeout
 The number of seconds that has to pass without receipt of
 an Announce message to time out. The values must be integers.
 Possible values range from 3 to 20. The default value is 3.
 You can use this argument when -device_type is set to ptpMaster
 and -announce_message_enable is set to 1.
 -sync_enable
 Enables or disables the Sync message parameters.Possible values
 are 0 (disable) and 1 (enable). The default value is 1. You can
 use this argument when -device_type is set to ptpMaster.
 -sync_two_step_flag
 Sets the behavior of Request_Response mechanism to two-step
 mode or one-step mode. Two-step mode provides time information
 using the combination of an Sync message and a subsequent
 Follow_up message. One-Step mode provides time information using
 a single Sync message. Possible values are described below:
 on - Turns on two-step synchronism mode . This is the default.
 auto - This is not supported.
PTP Functions
874
 off - Turns on the one-step synchronism mode. This is not supported.
 This argument is available when -device_type is set to
 ptpMaster and -sync_enable is set to 1.
 -log_sync_message_interval
 Indicates the log of the Sync message transmission interval which
 is the mean time interval between the successive Sync messages.
 The values must be integers. Possible values are -5, -4, -3, -2,
 -1, 0, 1, 2, 3, 4, and 5. The default value is 0. You can use
 this argument when -device_type is set to ptpMaster and
 -sync_enable is set to 1.
 Note:
 When you need to specify a negative value, you must encompass the
 value by double quotation marks and braces, such as {"-5"} or
 "{-5}". Other formats like "-5", {-5} or -5 are not acceptable.
 -path_delay_mechanism
 Determines the path delay mechanism. Possible values are
 described below:
 end-to-end - The port is configured to use the delay
 request-response mechanism. This is the default.
 peer-to-peer - Determines to use the peer delay
 mechanism.This is not supported.
 -delay_request_enable
 Enables or disables the Delay_Req messages. Possible values are 0
 (disable) and 1 (enable). The default value is 1. You can use
 this argument when you specify -path_delay_mechanism end-to-end
 and -device_type ptpSlave.
 -log_minimum_delay_request_interval
 Enables or disables the log (base 2) of the interval between
 successive Delay_Req messages. Possible values are -5, -4, -3,
 -2, -1, 0, 1, 2, 3, 4, and 5. The default value is 0. You can use
 this argument when you specify -path_delay_mechanism end-to-end.
 Note:
 When you need to specify a negative value, you must
 encompass the value by double quotation marks and braces,
 such as {"-5"} or "{-5}". Other formats like "-5", {-5} or -5 are
 not acceptable.
 -tx_crc_error_perc
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the percentage of frames to send with Cyclic Redundancy
 Check (CRC) errors. Possible values range from 0 to 100. The
 default value is 0.
 -tx_time_stamp_error_perc
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the percentage of frames to send with time stamp errors.
 Possible values range from 0 to 100. The default value is 0.
 -tx_delay_resp_dropped_perc
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the percentage of the Delay_Resp messages to drop.
 Possible values range from 0 to 100. The default value is 0.
 -tx_followup_dropped_perc
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the percentage of the Follow_Up messages to drop.
 Possible values range from 0 to 100. The default value is 0.
 -enable_correction
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables the correction field. Possible values are 0
 (disable) and 1 (enable). The default value is 0.
 
PTP Functions
875
 -sync_correction
 Spirent Extension (for Spirent HLTAPI only).
 Configures values for the correction field for Sync messages. The
 default value is 0.
 -followup_correction
 Spirent Extension (for Spirent HLTAPI only).
 Configures values for the correction field for Follow_Up messages.
 The default value is 0.
 -delay_request_correction
 Spirent Extension (for Spirent HLTAPI only).
 Configures values for the correction field for Delay_Req messages.
 The default value is 0.
 -delay_response_correction
 Spirent Extension (for Spirent HLTAPI only).
 Configures values for the correction field for Delay_Resp
 messages. The default value is 0.
 -vci
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VCI of the first ATM PVC pool. Possible values
 range from 0 to 65535. The default value is 32. This argument is
 available when you set -encapsulation to LLC_SNAP, VC_MUX,
 ETHERNETII_LLC_SNAP, and ETHERNETII_VC_MUX.
 -vci_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step size in which the VCI value is incremented.
 Possible values range from 0 to 65535. The default value is 0.
 -vpi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VPI of the first ATM PVC pool (for an ATM connection).
 Possible values range from 0 to 255. The default value is 0. This
 argument is available when you set -encapsulation to LLC_SNAP,
 VC_MUX, ETHERNETII_LLC_SNAP, and ETHERNETII_VC_MUX.

 -vpi_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step size in which the VPI value is incremented.
 Possible values range from 0 to 255. The default value is 0.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.

 -diff_class
 -diff_assured_forwarding
 -diff_explicit_forwarding
 -diff_ecn
 Note: -diff_default is supported by Save as HLTAPI and provides the
 same functionality as using the above differ_* arguments combined.

 -ptp_clock_id_repeat

 -tos_precedence
 -tos_delay
 -tos_throughput
 -tos_reliability
 -tos_monetary_cost
 -tos_unused
 Note: -ip_tos_field is supported by Save as HLTAPI and provides
 the same the same functionality as as using the above tos_* arguments combined.

Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
PTP Functions
876
 -num_sessions
 -remote_mac_addr
 -remote_mac_addr_step
 -remote_mac_addr_repeat
 -remote_ip_addr_repeat
 -gateway_enable
 -gateway_ipv4_address
 -gateway_ipv6_address
 -ipv4_address_type
 -ptp_session_mode
 -unicast_negotiation_enable
 -unicast_grant_duration
 -peer_port_identity_ipv4_address
 -peer_port_identity_port_number
 -peer_port_identity_clock_id
 -unicast_destination_count
 -unicast_ipv4_address
 -unicast_ipv4_address_mode
 -unicast_ipv4_address_repeat
 -unicast_ipv4_address_step
 -unicast_ipv4_address_percentage_overlap
 -unicast_clock_id
 -unicast_clock_id_mode
 -unicast_clock_id_step
 -unicast_clock_id_repeat
 -unicast_clock_id_percentage_overlap
 -raw_priority
 -udp_source_port
 -udp_source_port_mode
 -udp_source_port_step
 -udp_source_port_repeat
 -master_clock_accuracy
 -master_clock_offset_scaled_log_variance
 -alternate_master_enable
 -steps_removed
 -followup_enable
 -followup_delay
 -random_distribution_enable
 -peer_delay_request_enable
 -log_min_peer_delay_request_interval
 -peer_delay_response_enable
 -peer_delay_response_flag
 -peer_delay_response_followup_enable
 -peer_delay_response_followup_delay
 -tx_calibration_factor
 -rx_calibration_factor
 -activity_trace_enable
 -message_filter_enable
 -filter_session_instance

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle PTP device handle
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_ptp_config function creates, enables, modifies, deletes
 and performs other actions to the PTP device. Use the -port_handle to define
 the port on which the PTP master or slave emulation will be created.
 When in the create mode, one or a list of PTP devices will be created and the
 PTP device handle(s) will be returned. Except for the mandatory -port_handle,
 these arguments are necessary or use their default values:
 -encapsulation
PTP Functions
877
 -device_type
 -transport_type
 -ptp_clock_id
 -ptp_clock_id_step
 In the modify mode, you can change the configuration of the created PTP
 device except these arguments: -count, -encapsulation, and -transport_type.

 In the delete mode, you can remove the created device. If the creation,
 configuration, or delete fails, Spirent HLTAPI returns an error message. For
 example, if the user tries to modify a non-existing session handle, an error
 message will be returned.
Examples:
 #### HLTAPI for Tcl ####
 To create and configure 2 new PTP devices.
 sth::emulation_ptp_config -mode "create" \
 -port_handle $hltSourcePort \
 -count 2 \
 -encapsulation ETHERNETII \
 -device_type ptpMaster \
 -transport_type ipv4 \
 -local_mac_addr 00:33:00:00:00:01 \
 -local_ip_addr 10.0.0.5 \
 -remote_ip_addr 10.0.0.1 \
 -vlan_id1 100 \
 -vlan_id2 200 \
 -ptp_session_mode multicast \
 -ptp_domain_number 10 \
 -ptp_port_number 1 \
 -ptp_clock_id 0xAAAA480000000000 \
 -ptp_clock_id_step 0x0000000000000001 \
 -master_clock_class 200 \
 -master_clock_priority1 2 \
 -master_clock_priority2 2 \
 -time_source ptp-profile \
 -sync_enable 1 \
 -sync_two_step_flag on \
 -log_sync_message_interval {"-5"} \
 -path_delay_mechanism end-to-end

 Sample Output:
 {handle router1 router2} {status 1}
 To modify the created PTP device
 sth::emulation_ptp_config -mode modify \
 -handle $ptpHandle1 \
 -ptp_session_mode multicast \
 -ptp_domain_number 10 \
 -ptp_port_number 1 \
 -ptp_clock_id 0xAAAA480000000000 \
 -master_clock_class 200 \
 -master_clock_priority1 8 \
 -master_clock_priority2 7
 Output:
 {handle router1 router2} {status 1}
 #### HLTAPI for Python ####
 To create and configure a new PTP device.
 device_ret2 = sth.emulation_ptp_config (
 mode = 'create',
 name = 'Router_3',
 encapsulation = 'ETHERNETII',
 vlan_id_mode1 = 'increment',
 vlan_id_mode2 = 'increment',
 ip_tos_field = '0xc0',
 port_handle = port_handle[1],
 master_clock_priority1= '8',
PTP Functions
878
 master_clock_priority2= '2',
 log_sync_message_interval= '{"0"}',
 ptp_clock_id = '0xbcde480000000001',
 path_delay_mechanism= 'end-to-end',
 transport_type = 'ipv4',
 time_source = 'internal-oscillator',
 announce_receipt_timeout= '3',
 device_type = 'ptpMaster',
 log_minimum_delay_request_interval= '0',
 log_announce_message_interval= '0',
 ptp_port_number = '1',
 tx_delay_resp_dropped_perc= '0',
 ptp_session_mode = 'multicast',
 enable_correction = '0',
 sync_two_step_flag = 'on',
 master_clock_class = '200',
 tx_followup_dropped_perc= '0',
 ptp_domain_number = '10',
 vlan_ether_type1 = '0x8100',
 vlan_id1 = '201',
 vlan_id_step1 = '1',
 vlan_id_repeat1 = '0',
 vlan_priority1 = '7',
 vlan_ether_type2 = '0x8100',
 vlan_id2 = '101',
 vlan_id_step2 = '1',
 vlan_id_repeat2 = '0',
 vlan_priority2 = '7',
 local_mac_addr_step = '00:00:00:00:00:01',
 local_mac_addr = '00:99:00:00:00:02',
 local_mac_addr_repeat= '0',
 remote_ip_addr = '10.0.0.5',
 ipv4_priority = 'tos',
 local_ip_prefix_len = '24',
 local_ip_addr_step = '0.0.0.1',
 remote_ip_addr_step = '0.0.0.0',
 mac_address_resolution= 'arp_resolved',
 local_ip_addr = '10.0.0.2',
 local_ip_addr_repeat= '0');
 Sample Output: {'status': '1', 'handle': 'router1', 'port_handle': 'port1'}
 #### HLTAPI for Perl ####
 To create and configure a new PTP device.
 my %device_ret0 = sth::emulation_ptp_config (
 mode => 'create',
 name => 'PTP_1',
 encapsulation => 'ETHERNETII',
 vlan_id_mode1 => 'increment',
 vlan_id_mode2 => 'increment',
 ip_tos_field => '0xc0',
 port_handle => "$hport[1]",
 master_clock_priority1=> '2',
 master_clock_priority2=> '2',
 log_sync_message_interval=> '{"-5"}',
 ptp_clock_id => '0xaaaa480000000000',
 path_delay_mechanism=> 'end-to-end',
 transport_type => 'ipv4',
 time_source => 'ptp-profile',
 announce_receipt_timeout=> '3',
 device_type => 'ptpMaster',
 log_minimum_delay_request_interval=> '0',
 log_announce_message_interval=> '0',
 ptp_port_number => '1',
 tx_delay_resp_dropped_perc=> '0',
 ptp_session_mode => 'multicast',
 enable_correction => '0',
 sync_two_step_flag => 'on',
 master_clock_class => '200',
 tx_followup_dropped_perc=> '0',
PTP Functions
879
 ptp_domain_number => '10',
 vlan_ether_type1 => '0x8100',
 vlan_id1 => '200',
 vlan_id_step1 => '1',
 vlan_id_repeat1 => '0',
 vlan_priority1 => '7',
 vlan_ether_type2 => '0x8100',
 vlan_id2 => '100',
 vlan_id_step2 => '1',
 vlan_id_repeat2 => '0',
 vlan_priority2 => '7',
 local_mac_addr_step => '00:00:00:00:00:01',
 local_mac_addr => '00:33:00:00:00:01',
 local_mac_addr_repeat=> '0',
 remote_ip_addr => '10.0.0.1',
 ipv4_priority => 'tos',
 local_ip_prefix_len => '24',
 local_ip_addr_step => '0.0.0.1',
 remote_ip_addr_step => '0.0.0.0',
 mac_address_resolution=> 'arp_resolved',
 local_ip_addr => '10.0.0.5',
 local_ip_addr_repeat=> '0');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'port_handle';
 $VAR4 = 'port1';
 $VAR5 = 'status';
 $VAR6 = '1'
Notes:
 None.
End of Procedure Header
sth::emulation_ptp_control
Name:
 sth::emulation_ptp_control
Purpose:
 The sth::emulation_ptp_control function starts or stops the
 specified PTP device.
Synopsis:
 sth::emulation_ptp_control
 -action_control {start | stop}
 [-port_handle <port_handle>]
 [-handle <handle>]
Arguments:
 -port_handle
 Specifies the port on which to the actions will be performed. You
 must specify either -handle or -port_handle, but not both.

 -handle
 Specifies the handle of the PTP device on which to perform the
 action. You must specify either -handle or -port_handle, but not
 both.
 -action_control
 Performs a certain action on the specified port or to the
 specified PTP device. This argument is mandatory.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
PTP Functions
880
 supported by Spirent HLTAPI.
 -action
 -peer_count
 -interval
 -interval_unit
 -job_handle
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_ptp_control function starts or stops the PTP devices. Use
 the -action_control argument to specify the action to perform. (See the
 -action_control argument description for information about the actions.)
Examples:
 #### HLTAPI for Tcl ####
 To start the PTP device:
 sth::emulation_ptp_control \
 -action_control start \
 -port_handle port1 \
 Sample Output: {status 1}
 #### HLTAPI for Python ####
 To start the specified PTP devices:
 ctrl_ret1 = sth.emulation_ptp_control (
 port_handle = [port_handle[0],port_handle[1]],
 action_control = 'start');
 Sample Output: {'status': '1', 'port_handle': 'port1 port2'}
 #### HLTAPI for Perl ####
 To start the specified PTP devices:
 my %ctrl_ret1 = sth::emulation_ptp_control (
 port_handle => "$hport[1] $hport[2] ",
 action_control => 'start');
 Sample Output:
 $VAR1 = 'port_handle';
 $VAR2 = 'port1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None
End of Procedure Header
sth::emulation_ptp_stats
Name:
 sth::emulation_ptp_stats
Purpose:
 sth::emulation_ptp_stats allows user to collect or clear statistics
 about the PTP device.
PTP Functions
881
Synopsis:
 sth::emulation_ptp_stats
 [-handle <ptp_emulation_handle>]
 [-port_handle <port_handle>]
 [-reset { 0| 1 }]
 [-mode device]

Arguments:
 -port_handle
 Specifies the port to retrieve statistics from. You must specify
 either -handle or -port_handle, but not both.
 -handle
 Specifies the handle of the PTP master or slave device to
 retrieve statistics from. You must specify either -handle or
 -port_handle, but not both.
 -reset
 Determines to reset the statistics or not on the specified port.
 Possible values are 0 and 1. When this argument is set to 1, the
 statistics will be reset. You must specify -port_handle when you
 use this argument.
 -mode
 Specifies the statistics retrieval mode.

 device - Gets the statistics of the ptp device specified by -handle.
 This is the default.
 instance - Gets the statistics of the instance within the ptp device.
 This is not supported.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).

 These statistics are returned for all configured PTP devices:
 clock_state Possible values are described below:
 initializing - Initializing data sets, hardware, and communication
 facilities.
 faulty - Multiple Pdelay_Resp messages were received.
 disabled - Does not implement the delay mechanism.
 listening - Waiting for the announceReceiptTimeout to
 expire or to receive an Announce message from a
 master.
 pre_master - No Announce message was received within the
 required time. Allowing changes to propagate
 from points in the system between the local clock
 and possible masters visible from the port
 before assuming the Master state.
 master - Operating as the master clock.
 passive - Not the master on the path. Not synchronizing to a
 master.
 uncalibrated - One or more master ports have been detected in
 the domain.
 slave - Synchronizing to the selected master port.
 total_rx_announce The number of Announce messages received.
 total_rx_sync The number of Sync messages received.
 total_rx_sync_followup The number of Sync Followup messages received.
 total_rx_delay_req The number of Delay_Req messages received.
 total_rx_delay_resp The number of Delay_Resp messages received.
 total_tx_announce The number of Announce messages sent.
 total_tx_sync The number of Sync messages sent.
 total_tx_sync_followup The number of Sync Followup messages sent.
 total_tx_delay_req The number of Delay_Req messages sent.
 total_tx_delay_resp The number of Delay_Resp messages sent.
PTP Functions
882
 peer_mean_path_delay An estimate of the current one-way propagation
 delay on the link.
 clock_domain PTP clock domain
 These statistics can be retrieved when the ptp device is a "Slave" port.
 -bmc_grandmaster_clock_id The grandmaster ID
 -bmc_clock_class The grandmaster clock class
 -bmc_clock_accuracy The grandmaster clock accuracy
 -bmc_offset_scaled_log_variance The scaled log variance of the
 grandmaster clock offset.
 -bmc_priority1 The grandmaster priority1
 -bmc_priority2 The grandmaster priority2
 -bmc_steps_removed The number of communication paths
 traversed between the local clock and
 the grandmaster clock.
 -bmc_time_source The grandmaster time source
 -bmc_source_port_clock_id The clock identity.
 -offset_from_master The value of the current Universal
 Coordinated Time offset.
 -mean_path_delay The mean propagation delay between two
 ports.
 -rx_log_min_delay_req_interval The minimum permitted mean time interval
 between successive Pdelay_Req message.

Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -device_instance
 ***Common table**
 -total_rx_msgs
 -total_dropped_msgs
 -total_rx_peerdelay_resp_followup
 -total_rx_signalling
 -total_rx_management
 -total_rx_unicast
 -total_rx_mcast
 -total_tx_msgs
 -total_tx_peerdelay_resp_followup
 -total_tx_signalling
 -total_tx_management

 ***Slave stat***
 -bmc_source_addr
 -bmc_last_change
 -bmc_source_port_number
 -min_sync_correction_factor_error
 -avg_sync_correction_factor_error
 -max_sync_correction_factor_error
 -min_delay_req_correction_factor
 -avg_delay_req_correction_factor
 -max_delay_req_correction_factor
 -min_sync_latency
 -avg_sync_latency
 -max_sync_latency
 -min_delay_req_latency
 -avg_delay_req_latency
 -max_delay_req_latency
 -min_latency_asymmetry
 -avg_latency_asymmetry
 -max_latency_asymmetry
 -rx_log_announce_interval
 -rx_log_sync_interval
 -rx_log_min_peerdelay_request_interval
 -unicast_granted_log_announce_period
 -unicast_granted_log_sync_period
 -unicast_granted_log_delay_resp_period
 -unicast_granted_log_peerdelay_resp_period
PTP Functions
883
 -total_seq_number_errors
 -total_misorder_sequence_errors
Description:
 The sth::emulation_ptp_stats function provides information about the
 specified PTP device.

 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples:
 #### HLTAPI for Tcl ####
 Sample Input:
 sth::emulation_ptp_stats -mode device \
 -handle $ptpHandle1 \
 Output for a master PTP device:
 {router1 {{clock_state master} {total_rx_announce 3}
 {total_tx_announce 5} {peer_mean_path_delay 0}
 {total_rx_sync_followup 3} {total_rx_sync 3}
 {total_tx_sync_followup 119} {total_rx_delay_req 10} {clock_domain 10}
 {total_tx_sync 129} {total_tx_delay_req 0} {total_rx_delay_resp 0}
 {total_tx_delay_resp 10} {bmc_clock_accuracy >10s}}} {status 1}
 Output for a slave PTP device:
 {router2 {{clock_state slave}
 {bmc_grandmaster_clock_id 12297720897325760512}
 {bmc_steps_removed 1} {total_rx_announce 23}
 {total_tx_announce 1} {peer_mean_path_delay 0}
 {rx_log_min_delay_req_interval 0}
 {bmc_time_source PTP_PROFILE240} {total_rx_sync_followup 599}
 {total_rx_sync 639} {bmc_clock_class 200} {total_tx_sync_followup 1}
 {total_rx_delay_req 10} {mean_path_delay 0} {clock_domain 10}
 {total_tx_sync 1} {bmc_priority1 2}
 {bmc_offset_scaled_log_variance 65535} {total_tx_delay_req 9}
 {total_rx_delay_resp 56} {offset_from_master 0}
 {bmc_source_port_clock_id 13609394288797417472}
 {bmc_priority2 2} {total_tx_delay_resp 0} {bmc_clock_accuracy 1s}}}
 {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_ptp_stats (
 handle = device,
 mode = 'device');
 Sample Output:
 {'status': '1', 'router1': {'total_rx_delay_req': '0', 'total_rx_announce': '0',
 'total_rx_delay_resp': '0', 'total_tx_sync': '0', 'total_tx_delay_resp': '0',
 'peer_mean_path_delay': '0', 'total_tx_sync_followup': '0', 'clock_state': 'none',
 'total_tx_announce': '0', 'bmc_clock_accuracy': '35', 'clock_domain': '10',
 'total_rx_sync_followup': '0', 'total_rx_sync': '0', 'total_tx_delay_req':'0'}}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::emulation_ptp_stats (
 handle => "$device",
 mode => 'device');
 Sample Output:
 $VAR1 = 'router1';
 $VAR2 = {
 'total_rx_sync' => '0',
 'clock_state' => 'none',
PTP Functions
884
 'total_tx_sync' => '0',
 'peer_mean_path_delay' => '0',
 'bmc_clock_accuracy' => '35',
 'total_rx_delay_req' => '0',
 'clock_domain' => '10',
 'total_rx_sync_followup' => '0',
 'total_tx_sync_followup' => '0',
 'total_rx_announce' => '0',
 'total_tx_delay_resp' => '0',
 'total_tx_announce' => '0',
 'total_tx_delay_req' => '0',
 'total_rx_delay_resp' => '0'
 };
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 none
End of Procedure Header
RFC 2544 Functions
885
RFC 2544 Functions
Functions:
sth::test_rfc2544_config
sth::test_rfc2544_control
sth::test_rfc2544_info
sth::test_rfc2544_config
Name:
 sth::test_rfc2544_config
Purpose:
 The sth::test_rfc2544_config command creates, modifies and deletes
 back-to-back test, frame loss test, latency test, or throughput test.
 The RFC 2544 tests are used to describe the performance characteristics
 of a network interconnecting device.
Synopsis:
 sth::test_rfc2544_config
 -mode create | -mode {modify | delete} -handle <test_handle>
 [-src_port <port_handle>]
 [-dst_port <port_handle>]
 [-endpoint_creation {0|1}]
 [-device_count <integer>]
 [-mac_addr {aa:bb:cc:dd:ee:ff}]
 [-port_mac_step {aa:bb:cc:dd:ee:ff}]
 [-device_mac_step {aa:bb:cc:dd:ee:ff}]
 [-vlan <integer>]
 [-port_vlan_step <integer>]
 [-device_vlan_step <integer>]
 [-vlan_priority <1-7>]
 [-ipv4_addr <a.b.c.d>]
 [-port_ipv4_addr_step <a.b.c.d>]
 [-device_ipv4_addr_step <a.b.c.d>]
 [-ipv4_prefix_len <1-32>]
 [-ipv4_gateway <a.b.c.d>]
 [-port_ipv4_gateway_step <a.b.c.d>]
 [-ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-port_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-device_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_prefix_len <0-128>]
 [-ipv6_gateway <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-port_ipv6_gateway_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-src_endpoints <handle>]
 [-dst_endpoints <handle>]
 [-streamblock_handle <handle>]
 [-traffic_pattern {pair | mesh | backbone}]
 [-endpoint_map {one_to_one | one_to_many}]
 [-bidirectional {0 | 1}]
 [-iteration_count {integer}]
 [-test_duration_mode {seconds | bursts}]
 [-test_duration <integer>]
 [-test_type {b2b | fl | latency | throughput}]
 [-frame_size_mode {custom | random | step | imix}]
 [-frame_size <integer>]
 [-frame_size_imix <string>]
 [-frame_size_start <integer>]
 [-frame_size_end <integer>]
 [-frame_size_step <integer>]
 [-frame_size_min <integer>]
 [-frame_size_max <integer>]
 [-load_type {custom | random | step}]
 [-load_unit {bits_per_second |frames_per_second | inter_burst_gap
RFC 2544 Functions
886
 |kilobits_per_second|megabits_per_second | percent_line_rate }]
 [-load_list <list_value>]
 [-load_start <integer>]
 [-load_end <integer>]
 [-load_step <integer>]
 [-load_min <integer>]
 [-load_max <integer>]
 [-latency_type {LILO |LIFO| FIFO}]
 [-start_traffic_delay {0 - 3600}]
 [-stagger_start_delay {0-65}]
 [-enable_learning {0 | 1}]
 [-learning_mode {l2 | l3}]
 [-learning_frequency {learn_once | learn_every_trial |
 learn_every_frame_size| learn_every_iteration}]
 [-learning_rate <integer>]
 [-l3_learning_retry_count {1-100}]
 [-l2_learning_repeat_count NUMERIC {1-100}]
 [-enable_cyclic_resolution {0 |1}]
 [-enable_jitter_measure {0 |1}]
 [-accept_frame_loss <integer>]
 [-resolution_burst <integer>]
 [-resolution_second <integer>
 [-search_mode {binary| step| combo}]
 [-rate_lower_limit <integer>]
 [-rate_upper_limit <integer>]
 [-initial_rate <integer>]
 [-rate_step <integer>]
 [-back_off <integer>]
 [-resolution <integer>]
 [-ignore_limit {0|1}]
 [-out_of_seq_threshold <integer>]
 [-max_latency_threshold <integer>]
Arguments:
 -mode
 Specify the action to be performed on the test port.
 This argument is mandatory. Possible values are create,
 modify, and delete. The values are described below:
 create - Creates Back-to-back test, Frame Loss test,
 Latency test, or Throughput test.
 modify - Modifies the configuration for the created test.
 delete - Deletes the created test.

 -src_port
 Defines the source port to be used for stream creation.
 You can use this argument when -endpoint_creation is set to 1.
 -dst_port
 Defines the destination port to be used for stream creation.
 You can use this argument when -endpoint_creation is set to 1.
 -handle
 Specifies the test to be modified or deleted.
 This argument is mandatory for modify mode and delete mode.
 -endpoint_creation
 Determines whether Spirent HLTAPI creates new endpoints
 on the ports specified by -src_port and -dst_port. The endpoints
 are used to create new streams in the test. Possible values are 0
 and 1. When it is set to 1, Spirent HLTAPI creates new endpoints
 on the given source port and destination port. You must specify
 the -src_port argument and the -dst_port argument when the value
 is 1. When it is set to 0, you can create streams in two other
 ways. One is to specify -src_endpoints and -dst_endpoints, and
 then this command will create a bound stream for the test; the
 other is to provide a list of existing streams
 (-streamblock_handle), which the command will use for the test. 
RFC 2544 Functions
887
 -device_count
 Defines the number of devices you can create on each port. The
 default value is 1. This argument is only valid when the
 -endpoint_creation argument is set to 1.
 -mac_addr
 The starting MAC address to use when emulating devices.
 You can use this argument when -endpoint_creation is set to 1.
 The value should be in MAC address format.
 -port_mac_step
 Defines the step size to be used for incrementing MAC addresses
 across ports. You can use this argument when -endpoint_creation
 is set to 1.

 -device_mac_step
 Defines the step value to be used for incrementing MAC address
 across devices on one port. You can use this argument when
 -endpoint_creation is set to 1. The value should be in MAC
 address format.
 -vlan
 Specifies the VLAN ID for the first device. You can use this
 option when -endpoint_creation is set to 1.
 -port_vlan_step
 Defines the step value to be used for incrementing VLAN IDs
 across the ports. You can use this argument when
 -endpoint_creation is set to 1.
 -device_vlan_step
 Specifies the step value to be used for incrementing VLAN IDs
 across the devices on one port. You can use this argument when
 -endpoint_creation is set to 1.
 -vlan_priority
 Specifies the VLAN priority for created devices. Possible values
 range from 1 to 7. You can use this argument when
 -endpoint_creation is set to 1.

 -ipv4_addr
 Defines the first IPv4 address when emulating devices.
 You can use this argument when -endpoint_creation is set to 1.
 The value should be in IPv4 format.
 -port_ipv4_addr_step
 Defines the step value to be used for incrementing IPv4 addresses
 across the ports. You can use this argument when
 -endpoint_creation is set to 1. The value should be in the IPv4
 format.
 For example, if you specify -port_ipv4_addr_step
 0.1.0.0. , -ipv4_addr 192.85.1.2 , and
 -device_ipv4_addr_step 0.0.0.1. When there are two ports, the IPv4
 addresses for emulating hosts are listed below:

 First host block: 192.85.1.2, 192.85.1.3, 192.85.1.4...
 Second host block: 192.86.1.2, 192.86.1.3, 192.86.1.4...
 The number of hosts in each host block is specified by
 the -device_count argument.
 -device_ipv4_addr_step
 Defines the step value to be used for incrementing IPv4 addresses
 across the devices on one port. You can use this argument when
 -endpoint_creation is set to 1.
 -ipv4_prefix_len
 Specifies the IPv4 prefix length for created devices.
 You can use this argument when -endpoint_creation is set to 1.
RFC 2544 Functions
888
 -ipv4_gateway
 Specifies the IPv4 gateway addresses for the first device.
 You can use this argument when -endpoint_creation is set to 1.
 The value should be in IPv4 format.
 -port_ipv4_gateway_step
 Specifies the step value to be used for incrementing IPv4 gateway
 addresses across the ports. You can use this argument when
 -endpoint_creation is set to 1. The value should be in IPv4
 format.
 -ipv6_addr
 Specifies the first IPv6 address when creating devices. You can
 use this argument when -endpoint_creation is set to 1. The value
 should be in IPv6 format.
 -port_ipv6_addr_step
 Specifies the step size to be used for incrementing IPv6
 addresses across the ports. You can use this argument when
 -endpoint_creation is set to 1. The value should be in IPv6
 format.
 -device_ipv6_addr_step
 Defines the step value to be used for incrementing IPv6 addresses
 across the devices on one port. You can use this argument when
 -endpoint_creation is set to 1. The value should be in IPv6
 format.
 -ipv6_prefix_len
 Specifies the prefix length of the IPv6 addresses. You can use
 this argument when -endpoint_creation is set to 1. Possible values
 range from 0 to128.
 -ipv6_gateway
 Defines the starting IPv6 gateway address when emulating devices.
 You can use this argument when -endpoint_creation is set to 1.
 The value should be in IPv6 format.
 -port_ipv6_gateway_step
 Specifies the step size to be used for incrementing IPv6 gateway
 address across the port. You can use this argument when
 -endpoint_creation is set to 1. The value should be in IPv6
 format.
 -src_endpoints
 Specifies the source endpoint used to create traffic. The trial
 will use the traffic binding to the source endpoint
 (-src_endpoints) and the destination endpoint (-dst_endpoints) to
 run. When you specify this argument, you must specify the
 -dst_endpoints option. You can use this argument when the
 -endpoint_creation option is set to 0. This value can be an
 endpoint or a list of endpoints.
 -dst_endpoints
 Specifies the destination endpoint used to create traffic.
 The trial will use the traffic binding to the source endpoint
 (-src_endpoints) and the destination endpoint (-dst_endpoints) to
 run. When you specify this argument, you must specify the
 -src_endpoints option. You can use this argument when the
 -endpoint_creation option is set to 0. This value can be an
 endpoint or a list of endpoints.
 -streamblock_handle
 Indicates the existing streams used for the test. The trial will
 use the provided streamblock to do the test. The value of this
 argument can be a stream or a list of streams. You can use this
 argument when the -endpoint_creation option is set to 0.
 -traffic_pattern
 Indicates the traffic pattern to be used for the test. Possible 
RFC 2544 Functions
889
 values are pair, mesh, and backbone. The patterns are described
 below:
 pair - Traffic is transmitted between one or more port pairs.
 The ports to use is specified by the -src_endpoints
 option and the -dst_endpoints option.
 mesh - Every port transmits traffic to every other port and
 receives traffic from all other ports simultaneously.
 -src_endpoints and -dst_endpoints are the endpoints to be
 included in the fully meshed network.
 backbone - Traffic is transmitted in a partially meshed pattern,
 either unidirectional or bidirectional. -src_endpoints and
 -dst_endpoints are the endpoints to be included in
 the backbone network.
 -endpoint_map
 Specifies one of the following traffic mapping methods to be
 used within each host block. Possible values are one_to_one
 and one_to_many. The methods are described below:
 one_to_one - Every endpoint within the source endpoint
 block transmits traffic to the corresponding destination
 endpoint within the destination endpoint block.
 one_to_many - Every endpoint within the source endpoint
 block transmits traffic to every destination endpoint within
 the destination endpoint block.
 -bidirectional
 Determines whether the traffic is unidirectional or bidirectional.
 Possible values are 0 (unidirectional) and 1 (bidirectional).
 unidirectional - The traffic flows from the source to the
 destination only.
 bidirectional - Test traffic flows from the source to the destination
 and from the destination to the source.
 -iteration_count
 Specifies the number of times the test repeats with its initial
 configuration. Each trial is based on the same parameter values.
 Within a trial, certain parameter values vary with each
 iteration, according to the test methodology and setup. At the
 start of the next trial, these parameters revert to their initial
 values. The default value is 1.
 -test_duration_mode
 Specifies the duration mode for each transmitted stream.
 This option determines whether the test duration is measured
 in seconds or by the number of frames. The default is seconds.
 Possible values are described below:
 seconds - Each trial lasts for the number of seconds
 specified by the -test_duration argument.
 bursts - Each trial lasts for the number of bursts specified
 by the -test_duration argument.
 -test_duration
 Indicates the transmission length in number of frames, when you
 specify -test_duration_mode bursts, or indicates the transmission
 time in seconds, if you specify -test_duration_mode seconds. The
 default value is 60 when you specify -test_duration_mode seconds
 and 1000 when you specify -test_duration_mode bursts.
 -test_type
 Indicates the type of test to be done. Possible values are b2b,
 fl, latency, and throughput. The default value is b2b.
RFC 2544 Functions
890
 b2b - Indicates the test is a back-to-back test. This test
 characterizes the ability of the DUT to process
 back-to-back frames. This test simulates popular network
 activity, such as requests for large amounts of data
 over an Ethernet network, that may use a relatively
 small Maximum Transmission Unit (MTU) size and
 that can result in many fragments being transmitted.
 fl - Indicates the test is a frame loss test. This test
 determines the percentage of frames that should have
 been forwarded by a network device under steady
 state (constant) load that were not forwarded due to
 lack of resources.
 latency - Indicates the test is a latency test. This
 test determines the minimum, average, maximum transmission
 delay through the DUT.
 throughput - Indicates the test is a throughput test. This
 test determines the maximum rate at which of the
 offered frames are dropped by the DUT.
 -frame_size_mode
 Specifies how frame sizes are set and varied through
 successive test trials. Possible values are custom,
 random, step, and imix. The default value is custom.
 The modes are described below:
 custom - Specifies a list of frame sizes specified by the
 -frame_size argument.
 random - Generates random frame sizes within the
 range between the minimum size (-frame_size_min)
 and the maximum size (-frame_size_max).
 step - Increases the frame size for each trial from that of
 the previous trial. You should use -frame_size_start,
 -frame_size_end, and -frame_size_step together to generate
 the frame size list for the test when the -frame_size_mode
 is set to step.

 imix - Specifies a list of frame sizes specified by the
 -frame_size_imix argument.
 Note: The frame size includes the Cyclic Redundancy Check (CRC).
 -frame_size
 Defines the frame size (in bytes) list for the test when you
 specify -frame_size_mode custom.

 -frame_size_imix
 Defines a list of Internet Mix (iMIX) frame size distribution
 profiles when you specify -frame_size_mode imix. These are preset
 distribution profiles in Spirent TestCenter:

 Name Description

 Default A simple mix of the three most common frame sizes
 found on the Internet

 Spirent A simple mix of the four most common frame sizes
 found on the Internet

 4-Point The default distribution supplemented by a random
 set of frame sizes

 TCPv4 A mix of the most common TCPv4 frame sizes found on
RFC 2544 Functions
891
 the Internet

 IPSEC A mix of frame sizes that approximates IPsec traffic

 You can use these preset names directly, or use profile names
 returned by function sth::imix_config when creating custom
 distribution profiles.

 -frame_size_start
 Indicates the frame size (in bytes) for the first test trial. The
 default value is 128. You can specify this argument when
 -frame_size_mode is set to step.
 -frame_size_end
 Specifies the maximum frame size (in bytes) for the test.
 The default value is 256. You can specify
 this argument when -frame_size_mode is set to step.

 -frame_size_step
 Specifies the frame size (in bytes) increment. The default value
 is 128. You can specify this argument when -frame_size_mode is
 set to step.
 -frame_size_min
 Indicates the minimum frame size (in bytes) when you use random
 mode for -frame_size_mode. The default is 128.
 -frame_size_max
 Indicates the maximum frame size (in bytes) when you use random
 mode for -frame_size_mode. The default is 256.
 -load_type
 Specifies the way of varying the load size during the test.
 Possible values are custom, random, and step. The default
 value is custom. The types are described below:
 custom - The load sizes to use for the test is a list of the load sizes
 that are specified by the -load_list argument.
 random - The load sizes to use for the test is the random sizes
 between the minimum size specified by the -load_min
 argument and the maximum size specified by the -load_max
 argument.
 step - The load sizes increase by the step value (-load_step) with each
 test iteration, beginning with the start value ( -load_start)
 and increasing to the end value (-load_end).
 -load_unit
 Specifies the load unit to use. Possible values are
 bits_per_second, frames_per_second, inter_burst_gap,
 kilobits_per_second, megabits_per_second, and percent_line_rate.
 The default value is percent_line_rate. The units are described
 below:
 bits_per_second - Number of bits per second.
 frames_per_second - Number of frames per second.
 inter_burst_gap - Interval between two frames.
 kilobits_per_second - Number of kilobits per second.
 megabits_per_second - Number of megabits per second.
 percent_line_rate - Percentage of the line rate.
 Note: This option is not allowed in the throughput test.
 -load_list 
RFC 2544 Functions
892
 Defines the list of load sizes. You can specify this option
 when -load_type is set to custom.
 -load_start
 Indicates the load size for the first trial. The default is 10.
 You can use this argument when you specify -load_type step.
 You should use -load_start, -load_end, and -load_step together
 to generate the load value list when you specify -load_type step.
 -load_end
 Specifies the maximum load value for a trial. The default is 50.
 You can specify this argument when you specify -load_type step.
 Please refer to -load_type for more information.
 -load_step
 Indicates the difference between two load sizes. The default is
 10. You can specify this argument when you specify -load_type
 step. Please refer to -load_type for more information.
 -load_min
 Specifies the minimum load value for a trial. You can use this
 argument when you specify -load_type random. Please refer to
 -load_type for more information. The default is 10.
 -load_max
 Specifies the maximum load value for a trial. You can use this
 argument when you specify -load_type random. Please refer to
 -load_type for more information. The default is 50.
 -latency_type
 Specifies the latency calculation methods. Possible values
 are LILO, LIFO, and FIFO. The default is LILO.
 LILO - Last-In Last-Out latency. Calculates the latency as the
 time interval from when the end of the frame is
 transmitted from the source test port to when the
 end of the frame is received at the destination test port.
 LIFO - Last-In First-Out latency. Calculates the latency as
 the time interval from when the last bit of the input
 frame reaches the test destination port to when the
 first bit of the output frame reaches the test destination
 port.
 FIFO - First-In First-Out latency. Calculates the latency
 as the time interval from when the first bit
 of the input frame reaches the test destination
 port to when the first bit of the output frame
 reaches at the test destination port.
 -start_traffic_delay
 Specifies the delay (in seconds) before test traffic
 is transmitted. This delay occurs after the learning
 period, when test frames are sent to determine
 whether the DUT/SUT correctly forwards frames to
 their destination. Possible values range from 0 to 3600.
 The default value is 2.

 -stagger_start_delay
 Specifies the delay, measured in microseconds, between each
 transmission. Spirent HLTAPI multiplies the value by 64. For
 example, if you enter 5, the staggered start is 320 microseconds
 between each port starting traffic. A non-zero value causes the
 test ports to transmit test traffic in sequence. A zero value
 causes the test ports to send traffic all at once. Possible
 values range from 0 to 65. The default is 0.
 -enable_learning
 Determines whether enables learning mode or not. Possible
 values are 0 and 1. When it is set to 1, the options related to
 learning are valid. The default is 1.
RFC 2544 Functions
893
 -learning_mode
 Defines Layer 2 learning mode or Layer 3 learning mode.
 Possible values are l2 and l3. The default value is l3.
 -learning_frequency
 Specifies the frequency for sending learning frames.
 Possible values are learn_once, learn_every_trial,
 learn_every_frame_size, and learn_every_iteration.
 The default value is learn_once.
 learn_once - Sends learning frames once before the test starts.
 learn_every_trial - Sends learning frames before each trial begins.
 learn_every_frame_size - Sends learning frames upon each
 iteration in frame size.
 learn_every_iteration - Sends learning frames before each
 iteration begins.
 -learning_rate
 Specifies the rate, measured in frames per second, at which
 learning frames are sent to the SUT. You must specify
 -learning_mode to l2.
 -l3_learning_retry_count
 Specifies the number of Layer 3 learning retries
 if transmission, learning verification, or link errors
 occur. Possible values range from 1-100. The default is 5.
 You can specify this argument when you specify
 -learning_mode l3.
 -l2_learning_repeat_count
 Specifies the number of Layer 2 learning retries
 if transmission, learning verification, or link errors
 occur. Possible values range from 1-100. The default is 5.
 You can specify this argument when you specify
 -learning_mode l2.
 -enable_cyclic_resolution
 Enables or disables the Layer 3 cyclic address resolution.
 Possible values are 0 (disable) and 1 (enable).
 Spirent TestCenter sends as many Address Resolution Protocol
 (ARP) /Neighbor Discovery (ND) requests as the number of source
 IP addresses. The intended use for this option is to seed the
 DUT's ARP cache with the source IP and MAC addresses. If this
 option is disabled, only one ARP/ND request is sent. The default
 is 1. You can specify this argument when -learning_mode is set to
 l3.
 -enable_jitter_measure
 Determines whether to run the test in Jitter mode or not.
 Possible values are 0 and 1. When it is set to 1, Spirent
 HLTAPI will measure the Jitter data. The default is 0.
 -accept_frame_loss
 Indicates the maximum percentage of frames that may be
 lost during a trial without causing the trial to fail. Frame
 loss is the aggregate loss from all traffic flows,
 averaged across all ports included in the test. Possible
 values range from 0.0-100.0. The default is 0.0. You can
 use this argument when you specify -test_type b2b or
 -test_type throughput.
 -resolution_burst
 Specifies the smallest possible adjustment, measured in frames,
 for the traffic load from iteration to iteration. If the required
 adjustment to the current load for the next iteration is less
 than the resolution, the test stops. This parameter applies only
 if -test_duration is set to bursts and -test_type is set to b2b. 
RFC 2544 Functions
894
 The default value is 100.
 -resolution_second
 Specifies the smallest possible adjustment, measured in seconds,
 for the traffic load from iteration to iteration. If the required
 adjustment to the current load for the next iteration is less
 than the resolution, the test stops. This parameter applies only
 if -test_duration is set to seconds and -test_type is set to b2b.
 The default value is 60.
 -search_mode
 Specifies the mode used to vary the load. Possible values are
 binary, step, and combo. The default value is binary. You
 can specify this argument when -test_type is set to throughput.
 The modes are described below:
 binary - The test searches for the throughput value using a
 binary search algorithm.
 step - The test load increases with each iteration by the
 percentage specified by the -rate_step option.
 combo - The test begins with step mode and then switches
 to binary mode when an iteration fails.
 -rate_lower_limit
 Specifies the lower limit load rate for each port when using
 the binary search. This attribute will be ignored if -search_mode
 is set to step. The default value is 1. You can specify this
 argument when -test_type is set to throughput and -search_mode is
 set to binary.
 -rate_upper_limit
 Specifies the maximum load rate for each port. The default
 value is 100. You can specify this argument when
 -test_type is set to throughput.
 -initial_rate
 Indicates the starting load rate for each port. The default is 10.
 You can specify this argument when -test_type is set to throughput.
 -rate_step
 Specifies the amount that the load increases from iteration
 to iteration. This attribute will be ignored if the -search_mode
 option is set to binary. The default value is 10. You can specify
 this argument when -test_type is set to throughput and
 -search_mode is set to step.
 -back_off
 Specifies the rate at which the load decreases after the DUT
 fails at the current load. This option is applicable when
 -search_mode is binary or combo and -test_type is set to
 throughput. The default value is 50.
 -resolution
 Defines the finest adjustment possible in load from iteration to
 iteration. If the required adjustment to the current load for the
 next iteration is less than the value, the search stops. This
 option is applicable when -search_mode is binary or combo.
 The default is 1.
 -ignore_limit
 Specifies whether the search stops at the value specified by
 -rate_lower_limit or -rate_upper_limit, or it continues beyond
 those limits if an acceptable load has not been found yet. Possible
 values are 0 and 1. The default is 0. You can specify this
 option when -test_type is set to throughput and -search_mode is
 set to binary or combo.
 -out_of_seq_threshold
 Specifies the number of out-of-order frames on each receive 
RFC 2544 Functions
895
 port that, if exceeded, causes the test iteration to fail. The
 default is 0. You can specify this option when -test_type is
 set to throughput.

 -max_latency_threshold
 Specifies the maximum latency (in microseconds) of all the
 average latencies determined on each receive port in the test.
 If the threshold is reached, then the test trial fails. The default
 value is 30. You can specify this option when -test_type is set
 to throughput.
Arguments Unsupported by Save as HLTAPI:
 None.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle Identifies the created test instance.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::test_rfc2544_config function creates, modifies or deletes an RFC
 2544 test that can be a back-to-back test, a frame loss test, a latency test,
 or a throughput test. Use the -mode argument to specify the action to
 perform. (See the -mode argument description for information about the
 actions.)
 Once the RFC 2544 test has been configured, a handle is created, which can
 be used to modify the created test. (See the -mode argument description
 for more information).
 You must specify the -mode (create, modify, or delete) argument.
 You can use one of the following methods to create a stream used in the
 created test.
 1. You can enable the -endpoint_creation parameter that indicates you will use
 new endpoints to create streams for the test. Then you must use
 the -src_port option and the -dst_port option to specify the source port
 handle and the destination port handle on which to emulate new streams.
 2. You can specify -src_endpoints and -dst_endpoints to create a bound
 stream for the test.
 3. You can provide a list of existing streams by specifying
 -streamblock_handle for the test.
 For more information about the protocol, see RFC 2544.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a latency test:
 sth::test_rfc2544_config -streamblock_handle $streamHnd \
 -mode create \
 -test_type latency \
 -traffic_pattern pair\
 -endpoint_creation 0\
 -bidirectional 0 \
 -iteration_count 1 \
 -latency_type FIFO \
 -start_traffic_delay 1 \
 -stagger_start_delay 1 \
 -delay_after_transmission 10 \
 -frame_size_mode custom \
 -frame_size {1024} \
 -test_duration_mode seconds \
 -test_duration 30 \
RFC 2544 Functions
896
 -load_unit percent_line_rate \
 -load_type step \
 -load_start 20 \
 -load_step 10 \
 -load_end 40]
 The following example creates a throughput test:
 sth::test_rfc2544_config -streamblock_handle $streamHnd \
 -mode create \
 -test_type throughput \
 -traffic_pattern pair\
 -endpoint_creation 0\
 -bidirectional 0 \
 -iteration_count 1 \
 -latency_type FIFO \
 -start_traffic_delay 1 \
 -stagger_start_delay 1 \
 -delay_after_transmission 10 \
 -frame_size_mode custom \
 -enable_jitter_measure 1 \
 -frame_size {1518} \
 -test_duration_mode seconds \
 -test_duration 10 \
 -search_mode binary \
 -rate_lower_limit 20 \
 -rate_upper_limit 50 \
 -initial_rate 30 ]
 The following example modifies a created test:
 sth::test_rfc2544_config -mode modify \
 -handle $handle \
 -test_type b2b \
 -traffic_pattern pair\
 -endpoint_creation 0\
 -bidirectional 1 \
 -iteration_count 3 \
 -start_traffic_delay 2 \
 -frame_size_mode custom \
 -frame_size {1024 1518 256} \
 -test_duration_mode seconds \
 -test_duration 30 ]
 Sample output for examples shown above:
 {status 1}
 #### HLTAPI for Python ####
 The following example creates a latency test:
 rfc_cfg0 = sth.test_rfc2544_config (
 mode = 'create',
 test_type = 'latency',
 streamblock_handle = streamblock_handle,
 endpoint_creation = '0',
 frame_size_mode = 'custom',
 start_traffic_delay = '2',
 learning_mode = 'l3',
 frame_size = '64',
 enable_detailresults= '1',
 load_unit = 'percent_line_rate',
 stagger_start_delay = '0',
 learning_frequency = 'learn_once',
 enable_jitter_measure= '0',
 delay_after_transmission= '5',
 load_step = '10',
 enable_cyclic_resolution= '1',
 load_type = 'step',
 test_duration_mode = 'seconds',
 iteration_count = '1',
RFC 2544 Functions
897
 test_duration = '10',
 load_end = '10',
 enable_learning = '1',
 latency_type = 'LILO',
 l3_learning_retry_count= '5',
 load_start = '10');
 Sample Output: {'status': '1', 'handle': 'rfc2544latencyconfig2'}
 The following example creates a throughput test:
 rfc_cfg0 = sth.test_rfc2544_config (
 mode = 'create',
 test_type = 'throughput',
 streamblock_handle = streamblock_handle,
 endpoint_creation = '0',
 frame_size_mode = 'custom',
 start_traffic_delay = '2',
 resolution = '1',
 learning_mode = 'l3',
 rate_upper_limit = '20',
 frame_size = '64',
 enable_detailresults= '1',
 rate_step = '10',
 stagger_start_delay = '0',
 max_latency_threshold= '30',
 learning_frequency = 'learn_once',
 enable_jitter_measure= '0',
 delay_after_transmission= '5',
 ignore_limit = '0',
 enable_cyclic_resolution= '1',
 test_duration_mode = 'seconds',
 back_off = '50',
 iteration_count = '1',
 out_of_seq_threshold= '0',
 rate_lower_limit = '1',
 accept_frame_loss = '0',
 test_duration = '60',
 enable_learning = '1',
 latency_type = 'LILO',
 search_mode = 'step',
 l3_learning_retry_count= '5',
 initial_rate = '10');
 Sample Output: {'status': '1', 'handle': 'rfc2544throughputconfig2'}
 #### HLTAPI for Perl ####
 The following example creates a throughput test:
 my %rfc_cfg0 = sth::test_rfc2544_config (
 mode => 'create',
 test_type => 'throughput',
 streamblock_handle => "$streamblock_handle",
 endpoint_creation => '0',
 frame_size_mode => 'custom',
 start_traffic_delay => '2',
 resolution => '1',
 learning_mode => 'l3',
 rate_upper_limit => '20',
 frame_size => '64',
 enable_detailresults=> '1',
 rate_step => '10',
 stagger_start_delay => '0',
 max_latency_threshold=> '30',
 learning_frequency => 'learn_once',
 enable_jitter_measure=> '0',
 delay_after_transmission=> '5',
 ignore_limit => '0',
 enable_cyclic_resolution=> '1',
 test_duration_mode => 'seconds',
 back_off => '50',
RFC 2544 Functions
898
 iteration_count => '1',
 out_of_seq_threshold=> '0',
 rate_lower_limit => '1',
 accept_frame_loss => '0',
 test_duration => '60',
 enable_learning => '1',
 latency_type => 'LILO',
 search_mode => 'step',
 l3_learning_retry_count=> '5',
 initial_rate => '10');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'rfc2544throughputconfig2';
 $VAR3 = 'status';
 $VAR4 = '1';
 The following example creates a latency test:
 my %rfc_cfg0 = sth::test_rfc2544_config (
 mode => 'create',
 test_type => 'latency',
 streamblock_handle => "$streamblock_handle",
 endpoint_creation => '0',
 frame_size_mode => 'custom',
 start_traffic_delay => '2',
 learning_mode => 'l3',
 frame_size => '64',
 enable_detailresults=> '1',
 load_unit => 'percent_line_rate',
 stagger_start_delay => '0',
 learning_frequency => 'learn_once',
 enable_jitter_measure=> '0',
 delay_after_transmission=> '5',
 load_step => '10',
 enable_cyclic_resolution=> '1',
 load_type => 'step',
 test_duration_mode => 'seconds',
 iteration_count => '1',
 test_duration => '10',
 load_end => '10',
 enable_learning => '1',
 latency_type => 'LILO',
 l3_learning_retry_count=> '5',
 load_start => '10');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'rfc2544latencyconfig2';
 $VAR3 = 'status';
 $VAR4 = '1';
Note:
 None.
End of Procedure Header
sth::test_rfc2544_control
Name:
 sth::test_rfc2544_control
Purpose:
 Controls the RFC 2544 tests.
Synopsis:
RFC 2544 Functions
899
 sth::test_rfc2544_control
 -action {run | stop}
 [-wait {0|1}]
 [-cleanup {0|1}]
Arguments:
 -action:
 Specifies the action to perform for the test. Possible values
 are run and stop.
 run - Starts the test. You can start one test in each type.
 stop - Stops the test.
 -wait
 Determines whether this command will return only when the test is
 completed. Possible values are 0 and 1. The default is 1. When it
 is set to 1, the command will return only when the test is
 completed.
 -cleanup
 Determines whether the current test instance should be deleted
 after the test is completed. Possible values are 0 and 1. The
 default value is 1. When it is set to 1, the current test
 instance will be deleted after the test is completed.
Return values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status $SUCCESS or $FAILURE log Error message if command returns {status 0}
Description:
 The sth::test_rfc2544_control function controls the starting and
 stopping of the test.
Examples:
 #### HLTAPI for Tcl ####
 The following example starts all current configured tests at
 the same time and does not do the cleanup action when the tests stop:
 set ret [sth::test_rfc2544_control -action run -wait 1 -cleanup 0]
 Sample output for the example shown above:
 {status 1}
 #### HLTAPI for Python ####
 The following example starts all current configured tests:

 ctrl_ret1 = sth.test_rfc2544_control (
 action = 'run',
 wait = '1');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 The following example starts all current configured tests:
 my %ctrl_ret1 = sth::test_rfc2544_control (
 action => 'run',
 wait => '1');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
End of Procedure Header
RFC 2544 Functions
900
sth::test_rfc2544_info
Name:
 sth::test_rfc2544_info
Purpose:
 Retrieves statistics for the configured test.
Synopsis:
 sth:: test_rfc2544_info
 -test_type {b2b| fl| latency| throughput}
 [-clear_result {0|1}]
Arguments:
 -test_type
 Specifies the type of the test, whose information will be returned.
 This argument is mandatory. Possible values are b2b,
 fl, latency, and throughput.
 -clear_result
 Determines whether the result should be cleared after
 the data is retrieved. Possible values are 0 and 1.
 When it is set to 1, the result will be cleared after the
 data is retrieved. The default is 0.
Return values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status $SUCCESS or $FAILURE log Error message if command returns {status 0}
 statistics list Specifies the list of RFC 2544 statistics
 The statistics that will be returned are listed below:
 Back-to-back Statistics:
 Summary results: The average data value of all the iterations done in a test.
 rfc2544b2b.summary.total_iteration_count
 The number of all the iterations.
 rfc2544b2b.summary.frame_size. <value>. burst_size
 Burst Size.
 rfc2544b2b.summary.frame_size. <value>. burst_duration
 Burst duration.
 rfc2544b2b.summary.frame_size. <value>. iload
 The intended load.
 rfc2544b2b.summary.frame_size. <value>. avg_tx_frames
 The average number of sent frames.
 rfc2544b2b.summary.frame_size. <value>. avg_rx_frames
 The average number of received frames.
 rfc2544b2b.summary.frame_size. <value>. avg_frame_lost
 The average number of lost frames.
 Detail results: The back-to-back detail statistics. You can use the iteration
 count and frame size as indexes when you query the results.
 For example. "rfc2544b2b. detail. iteration. 2. frame_size. 64. iload"
 indicates the intended load for the second iteration of a back-to-back
 test when the frame size is 64 bytes.
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>.iload
 The intended load.
 rc2544b2b.detail.iteration. <count>.frame_size. <value>.oload
 The offer load.
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>. tx_frames
 The Number of sent frames.
RFC 2544 Functions
901
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>. rx_frames
 The number of received frames.
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>. frame_lost
 The number of lost frames.
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>. burst_size
 The burst size.
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>. burst_duration
 The burst duration.
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>. min_latency
 The minimum latency (microseconds).
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>. max_latency
 The maximum latency (microseconds).
 rfc2544b2b.detail.iteration. <count>.frame_size. <value>. avg_latency
 The average latency (microseconds).
 Frame loss Statistics:
 Summary results: The average data value of all the iterations done in a test.
 rfc2544fl.summary.total_iteration_count
 The number of all the iterations.
 rfc2544fl.summary.frame_size. <value>.load. <value>. tx_frames
 The number of sent frames.
 rfc2544fl.summary.frame_size. <value>.load. <value>. rx_frames
 The number of received frames.
 rfc2544fl.summary.frame_size. <value>.load. <value>. frame_lost
 The number of lost frames.
 rfc2544fl.summary.frame_size. <value>.load. <value>. frame_loss
 The percentage ratio of lost frames to the total frames.
 Detail results: .
 rfc2544fl.detail.iteration. <count>.frame_size. <value>.load. <value>.
 tx_frames
 The number of sent frames.
 rfc2544fl.detail.iteration. <count>.frame_size. <value>.load. <value>.
 rx_frames
 The number of received frames.
 rfc2544fl.detail.iteration. <count>.frame_size. <value>.load. <value>.
 frame_lost
 The number of lost frames.
 rfc2544fl.detail.iteration. <count>.frame_size. <value>.load. <value>.
 frame_loss
 The percentage ratio of lost frames to the total frames.
 Throughput Statistics:
 Summary results: The average data value of all the iterations done in a test.
 rfc2544throughput.summary.total_iteration_count
 The number of all the iterations done in a test.
 rfc2544throughput.summary.frame_size. <value>. oload
 The offer load.
 rfc2544throughput.summary.frame_size. <value>. iload
 The intended load.
 rfc2544throughput.summary.frame_size. <value>. throughput_percent
 Percentage.
 rfc2544throughput.summary.frame_size. <value>. throughput_fps
 Frames per second.
 rfc2544throughput.summary.frame_size. <value>. throughput_mbps
 megabits per second.

 Note: To access the average data value of all the iterations done in a test
 when the frame_size_mode is imix, use frame_size_value to retrieve
 results, for example:

 set key [keylget stats_string \
 rfc2544throughput.summary.frame_size.frame_size_value]
 set thruput [keylget stats_string \
 rfc2544throughput.summary.frame_size.$key.throughput_mbps]

 Detail results:
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.iload
 The intended load.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.oload
 The offer load.
RFC 2544 Functions
902
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.
 throughput_percent
 Percentage.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.
 throughput_fps
 Frames per second.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.
 throughput_mbps
 Megabits per second.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.frame_loss
 The percentage ratio of lost frames to the total frames.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.
 max_latency_exceed
 The maximum latency that, if exceeded, the test fails.
 rfc2544throughput.detail.iteration. <count>.frame_size.
 <value>.out_of_seq_exceed
 The maximum number of out-of-sequence packets that, if exceeded, the
 test fails.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.avg_jitter
 Average jitter value calculated from all measured jitter values in
 microseconds.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.min_jitter
 Smallest measured jitter value in the set of all measured jitter values
 in microseconds.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.max_jitter
 Largest measured jitter value in the set of all measured jitter values
 in microseconds.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.avg_latency
 Average latency value calculated from all measured latency values in
 microseconds.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.min_latency
 Smallest measured latency value in the set of all measured latency values
 in microseconds.
 rfc2544throughput.detail.iteration. <count>.frame_size. <value>.max_latency
 Largest measured latency value in the set of all measured latency values
 in microseconds.
 Latency Statistics:
 Summary results: The average data value of all the iterations done in a test.
 rfc2544latency.summary.total_iteration_count
 The number of all the iteration in a test.
 rfc2544latency.summary.frame_size. <value>.load. <value>. latency_min
 The minimum latency (microseconds).
 rfc2544latency.summary.frame_size. <value>.load. <value>. latency_avg
 The average latency (microseconds).
 rfc2544latency.summary.frame_size. <value>.load. <value>. latency_max
 The maximum latency (microseconds).

 Detail results:
 rfc2544latency.detail.iteration. <count>.frame_size. <value>.load. <value>.
 latency_min
 The minimum latency (microseconds).
 rfc2544latency.detail.iteration. <count>.frame_size. <value>.load. <value>.
 latency_avg
 The average latency (microseconds).
 rfc2544latency.detail.iteration. <count>.frame_size. <value>.load. <value>.
 latency_max
 The maximum latency (microseconds).
 rfc2544latency.detail.iteration. <count>.frame_size. <value>.load. <value>.
 jitter_min
 The minimum jitter value (microseconds).
 rfc2544latency.detail.iteration. <count>.frame_size. <value>.load. <value>.
 jitter_avg
 The average jitter value (microseconds).
 rfc2544latency.detail.iteration. <count>.frame_size. <value>.load. <value>.
 jitter_max
 The maximum jitter value (microseconds).
 rfc2544latency.detail.iteration. <count>.frame_size. <value>.load. <value>.
 tx_frames
 The number if frames that have been sent.
RFC 2544 Functions
903
 rfc2544latency.detail.iteration. <count>.frame_size. <value>.load. <value>.
 rx_frames
 The number of received frames.
Description:
 The sth::test_rfc2544_info function provides information about
 the configured tests.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0).
 Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
Sample Input:
 puts "get the b2b test result"
 set ret [sth::test_rfc2544_info -test_type b2b -clear_result 1]
Sample Output:
 {rfc2544b2b {{detail {{iteration {{1 {{frame_size {{1024
 {{iload 100.0} {oload {}} {tx_frames 1000} {rx_frames 1000}
 {frame_lost 0} {burst_size 1000} {burst_duration 0.008352}
 {min_latency 15.59} {max_latency 15.79} {avg_latency 15.73}}}
 {1518 {{iload 100.0} {oload {}} {tx_frames 250} {rx_frames 250}
 {frame_lost 0} {burst_size 250} {burst_duration 0.003076}
 {min_latency 195.61} {max_latency 3698.87} {avg_latency
 1666.72}}}}}}} {2 {{frame_size {{1024 {{iload 100.0}
 {oload {}} {tx_frames 1000} {rx_frames 1000} {frame_lost 0}
 {burst_size 1000} {burst_duration 0.008352} {min_latency 15.53}
 {max_latency 15.82} {avg_latency 15.76}}} {1518 {{iload 100.0}
 {oload {}} {tx_frames 250} {rx_frames 250} {frame_lost 0}
 {burst_size 250} {burst_duration 0.003076} {min_latency 200.58}
 {max_latency 3272.02} {avg_latency 1536.54}}}}}}} {3
 {{frame_size {{1024 {{iload 100.0} {oload {}} {tx_frames 1000}
 {rx_frames 1000} {frame_lost 0} {burst_size 1000}
 {burst_duration 0.008352} {min_latency 15.64} {max_latency 15.84}
 {avg_latency 15.78}}} {1518 {{iload 100.0} {oload {}} {tx_frames 250}
 {rx_frames 250} {frame_lost 0} {burst_size 250} {burst_duration 0.003076}
 {min_latency 182.0} {max_latency 3284.55} {avg_latency 1504.9}}}}}}}
 {4 {{frame_size {{1024 {{iload 100.0} {oload {}} {tx_frames 1000}
 {rx_frames 1000} {frame_lost 0} {burst_size 1000}
 {burst_duration 0.008352} {min_latency 15.62} {max_latency 15.92}
 {avg_latency 15.85}}} {1518 {{iload 100.0} {oload {}} {tx_frames 250}
 {rx_frames 250} {frame_lost 0} {burst_size 250} {burst_duration 0.003076}
 {min_latency 191.62} {max_latency 3249.63} {avg_latency 1521.22}}}}}}}
 {5 {{frame_size {{1024 {{iload 100.0} {oload {}} {tx_frames 1000}
 {rx_frames 1000} {frame_lost 0} {burst_size 1000}
 {burst_duration 0.008352} {min_latency 15.56} {max_latency 15.86}
 {avg_latency 15.8}}} {1518 {{iload 100.0} {oload {}} {tx_frames 250}
 {rx_frames 250} {frame_lost 0} {burst_size 250} {burst_duration 0.003076}
 {min_latency 179.68} {max_latency 3389.17} {avg_latency 1598.14}}}}}}}}}}}
 {summary {{total_iteration_count 5} {frame_size {{1024
 {{burst_size 1000} {burst_duration 0.008352} {iload 100.0}
 {avg_tx_frames 1000} {avg_rx_frames 1000} {avg_frame_lost 0}}} {1518
 {{burst_size 250} {burst_duration 0.003076} {iload 100.0}
 {avg_tx_frames 250} {avg_rx_frames 250} {avg_frame_lost 0}}}}}}}}} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 To get the throughput test result:
 results_ret1 = sth.test_rfc2544_info (
 test_type = 'throughput',
 clear_result = '1');
 Sample Output:
 {'status': '1', 'rfc2544throughput': {'detail': {'iteration': {'1':
 {'frame_size': {'64': {'oload': '10.0', 'out_of_seq_exceed': '0',
RFC 2544 Functions
904
 'throughput_mbps': '2000.0', 'frame_loss': '50.0', 'max_latency_exceed': '0',
 'iload': '10.0', 'throughput_fps': '1488095.24', 'throughput_percent':
 '0.0'}}}}}, 'summary': {'total_iteration_count': '1', 'frame_size': {'64':
 {'throughput_mbps': '2000.0', 'iload': '10.0', 'throughput_fps': '1488095.24',
 'throughput_percent': '0.0', 'oload': '10.0'}}}}}
 #### HLTAPI for Perl ####
 Sample Input:
 To get the throughput test result:
 my %results_ret1 = sth::test_rfc2544_info (
 test_type => 'throughput',
 clear_result => '1');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'rfc2544throughput';
 $VAR4 = {
 'detail' => {
 'iteration' => {
 '1' => {
 ...
 };
End of Procedure Header
RFC 3918 Functions
905
RFC 3918 Functions
Functions:
sth::test_rfc3918_config
sth::test_rfc3918_control
sth::test_rfc3918_info
sth::test_rfc3918_config
Name:
 sth::test_rfc3918_config
Purpose:
 The sth::test_rfc3918_config command creates, modifies and deletes
 mixed class throughput test, scaled group forwarding matrix test,
 aggregated multicast throughput test, multicast forwarding latency test,
 multicast forwarding latency test, multicast group capacity test or
 join leave latency test.
 The RFC 3918 tests are used to describe the performance characteristics
 of a multicast IP forwarding devices.
Synopsis:
 sth::test_rfc3918_config
 -mode create -multicast_streamblock <streamblock_handle> |
 -mode {modify | delete} -handle <test_handle>
 [-accept_frame_loss <integer>]
 [-back_off <integer>]
 [-enable_same_frame_size {0 | 1}]
 [-enable_seq_threshold {0|1}]
 [-enable_latency_threshold {0|1}]
 [-frame_size_mode {custom | random | step}]
 [-frame_size <Integer list: 47-16383>]
 [-frame_size_start <47-16382>]
 [-frame_size_end <48-16383>]
 [-frame_size_step <1-16383>]
 [-frame_size_min <47-16382>]
 [-frame_size_max <47-16383>]
 [-group_search_mode {binary| step| combo}]
 [-group_lower_limit <integer>]
 [-group_upper_limit <integer>]
 [-group_count_mode {custom | random | step}]
 [-group_count <integer>]
 [-group_count_start <integer>]
 [-group_count_end <integer>]
 [-group_count_step <integer>]
 [-group_count_min <integer>]
 [-group_count_max <integer>]
 [-group_step <integer>]
 [-group_back_off <integer>]
 [-group_resolution <integer>]
 [-iteration_count <1-60>]
 [-initial_rate <integer>]
 [-ignore_limit {0|1}]
 [-initial_group <integer>]
 [-join_group_delay <0-2147483647>]
 [-join_leave_interval {0-3600}]
 [-latency_bucket_mode { linear | exponential }]
 [-leave_group_delay <0-2147483647>]
 [-load_type {custom | random | step}]
 [-load_unit {bits_per_second |frames_per_second | inter_burst_gap
 |kilobits_per_second|megabits_per_second |
 percent_line_rate }]
 [-load_list <list_value>]
RFC 3918 Functions
906
 [-load_start <integer>]
 [-load_end <integer>]
 [-load_step <integer>]
 [-load_min <integer>]
 [-load_max <integer>]
 [-learning_frequency {learn_every_topology_change |
 learn_every_frame_size| learn_every_iteration}]
 [-l2_learning_rate <1-4294967295>]
 [-l3_learning_rate <1-4294967295>]
 [-l3_learning_retry_count {1-100}]
 [-l2_learning_repeat_count {1-100}]
 [-enable_cyclic_resolution {0 |1}]
 [-l2_learning_frame_mode { same_as_stream | fixed }]
 [-l2_learning_frame_size <64-16383>]
 [-latency_type {lilo |lifo| fifo}]
 [-max_latency_threshold <integer>]
 [-min_latency {0.03-1073741823 }]
 [-max_latency {0.35-2147483647}]
 [-mc_msg_tx_rate <0-4294967295>]
 [-mc_group_distribute {even|traffic_weighted }]
 [-mc_traffic_percent_mode {custom | random | step}]
 [-mc_traffic_percent_start <integer>]
 [-mc_traffic_percent_end <integer>]
 [-mc_traffic_percent_step <integer>]
 [-mc_traffic_percent_min <integer>]
 [-mc_traffic_percent_max <integer>]
 [-out_of_seq_threshold <integer>]
 [-rate_lower_limit <integer>]
 [-rate_upper_limit <integer>]
 [-rate_step <integer>]
 [-resolution <integer>]
 [-result_delay <0-2147483647>]
 [-start_test_delay <0-3600>]
 [-search_mode {binary| step| combo}]
 [-test_type { mixed_tput | matrix | agg_tput | fwd_latency |
 join_latency | capacity}]
 [-test_duration_mode {seconds | bursts}]
 [-test_duration <1-5184000>]
 [-traffic_join_interval {0-3600}]
 [-unicast_frame_size_mode {custom | random | step}]
 [-unicast_frame_size <integer>]
 [-unicast_frame_size_start <integer>]
 [-unicast_frame_size_end <integer>]
 [-unicast_frame_size_step <integer>]
 [-unicast_frame_size_min <integer>]
 [-unicast_frame_size_max <integer>]
 [-unicast_streamblock <streamblock _handle>]
Arguments:
 -mode
 Specify the action to be performed on the test port.
 This argument is mandatory. Possible values are create,
 modify, and delete. The values are described below:
 create - Creates mixed class throughput test, scaled
 group forwarding matrix test, aggregated
 multicast throughput test, multicast forwarding
 latency test, multicast forwarding latency test,
 multicast group capacity test or join leave latency
 test.
 modify - Modifies the configuration for the created test.
 delete - Deletes the created test.

 -test_type
 Indicates the type of test to be done. Possible values are
 mixed_tput, agg_tput, matrix, fwd_latency, join_latency
 and capacity. This argument is mandatory for create
 mode and modify mode.
RFC 3918 Functions
907
 mixed_tput - Indicates the test is a Mixed Class
 Throughput test. This test is to determine the throughput
 of a DUT/SUT when both unicast class frames and
 multicast class frames are offered simultaneously to a
 fixed number of interfaces.
 agg_tput - Indicates the test is an Aggregated Multicast
 Throughput test. This test is to determine the
 maximum rate at which of the offered
 frames to be forwarded through N destination
 interfaces of the same multicast groups are
 dropped.
 matrix - Indicates the test is a Scaled Group Forwarding
 Matrix test. This test is to determine Forwarding
 Rate as a function of tested multicast groups for a
 fixed number of tested DUT/SUT ports.
 fwd_latency - Indicates the test is a Multicast
 Forwarding Latency test. This test is to produce a
 set of multicast latency measurements from a
 single, multicast ingress interface of a DUT/SUT
 through multiple, egress multicast interfaces of
 that same DUT/SUT.
 join_latency - Indicates the test is a Multicast
 Join/Leave latency test. This test is to determine
 the time duration it takes a DUT/SUT to start
 forwarding multicast frames from the time a
 successful IGMP group membership report has
 been issued to the DUT/SUT.
 capacity - Indicates the test is a Multicast Group
 Capacity test. This test is to determine the
 maximum number of multicast groups a
 DUT/SUT can support while maintaining the
 ability to forward multicast frames to
 all multicast groups registered to that DUT/SUT.
 -handle
 Specifies the test to be modified or deleted.
 This argument is mandatory for modify mode and
 delete mode.
 -multicast_streamblock
 Specifies the multicast streamblock handle used to do
 the test. This argument is mandatory for create mode.
 -unicast_streamblock
 Specifies the unicast streamblock handle used to do the
 test. Use this argument only when the -test_type
 argument is mixed_tput.
 -accept_frame_loss
 Indicates the maximum percentage of frames that may
 be lost during a trial without causing the trial to fail.
 Frame loss is the aggregate loss from all traffic flows,
 averaged across all ports included in the test. Possible
 values range from 0.0-100.0. The default is 0.0. You can
 use this argument when you specify -test_type agg_tput.
 -back_off
 Specifies the rate at which the load decreases after the
 DUT fails at the current load. This option is applicable
 when -search_mode is set to binary or combo and
 -test_type is set to agg_tput or mixed_tput. The default
 value is 50.
 -enable_jitter_measure
 Determines whether to run the test in Jitter mode or not. 
RFC 3918 Functions
908
 Possible values are 0 and 1. When it is set to 1, Spirent
 HLTAPI will measure the Jitter data. The default is 0.
 -enable_cyclic_resolution
 Enables or disables the Layer 3 cyclic address
 resolution. Possible values are 0 (disable) and 1
 (enable). Spirent TestCenter sends as many Address
 Resolution Protocol (ARP) /Neighbor Discovery (ND)
 requests as the number of source IP addresses. The
 intended use for this option is to seed the DUT's ARP
 cache with the source IP and MAC addresses. If this
 option is disabled, only one ARP/ND request is sent.
 The default is 1.
 -enable_same_frame_size
 Determines whether multicast and unicast streams
 should use the same frame size in Mixed Class
 Throughput test. Use this argument only when the
 -test_type argument is set to mixed_tput. If this option
 is enabled, the -unicast_frame_size option and related
 option is no longer needed. The default is 1.
 -enable_seq_threshold
 Specifies whether to enable out of sequence threshold.
 The default is 0. You can specify this option when
 -test_type is set to agg_tput or mixed_tput.

 -enable_latency_threshold
 Specifies whether to enable max latency threshold. The
 default is 0. You can specify this option when -test_type
 is set to agg_tput or mixed_tput.
 -frame_size_mode
 Specifies how multicast frame sizes are set and varied
 through successive test trials. Possible values are
 custom, random, and step. The default value is custom.
 The modes are described below:
 custom - Specifies a list of frame sizes specified by the
 -frame_size argument.
 random - Generates random frame sizes within the
 range between the minimum size
 (-frame_size_min) and the maximum size
 (-frame_size_max).
 step - Increases the frame size for each trial from that of
 the previous trial. You should use
 -frame_size_start, -frame_size_end, and
 -frame_size_step together to generate
 the frame size list for the test when the
 -frame_size_mode argument is set to step.
 Note: The frame size includes the Cyclic Redundancy
 Check (CRC).
 -frame_size
 Defines the list of multicast frame sizes (in bytes) for the test
 when you specify -frame_size_mode custom. Each value in the list
 must be between 47 and 16383. The default size list is {128, 256,
 512, 1024, 1280, 1518}
 -frame_size_start
 Indicates the multicast frame size (in bytes) for the first test
 trial. Possible values range from 47 to 16382. The default value
 is 128. You can specify this argument when -frame_size_mode is
 set to step.
 -frame_size_end
 Specifies the maximum multicast frame size (in bytes) for the
RFC 3918 Functions
909
 test. Possible values range from 48 to 16383. The default value
 is 1518. You can specify this argument when -frame_size_mode is
 set to step.

 -frame_size_step
 Specifies the multicast frame size increment (in bytes). Possible
 values range from 1 to 16383. The default value is 128. You can
 specify this argument when -frame_size_mode is set to step.
 -frame_size_min
 Indicates the minimum multicast frame size (in bytes) when you
 use random mode for -frame_size_mode. Possible values range from
 47 to 16382. The default is 128.
 -frame_size_max
 Indicates the maximum multicast frame size (in bytes) when you
 use random mode for -frame_size_mode. Possible values range from
 47 to 16383. The default is 1518.
 -group_count_mode
 Specifies the method for varying multicast group
 counts. Possible values are custom, random, and step.
 The default value is custom. The modes are described
 below:
 custom - Specifies a list of group counts specified by
 the -group_count argument.
 random - Generates random group counts within the
 range between the minimum value
 (-group_count_min) and the maximum value
 (-group_count_max).
 step - Increases the group count by the step value
 (-group_count_step). You should use
 -group_count _start, -group_count_end, and
 -group_count_step together to generate the frame
 size list for the test when the -group_count _mode
 is set to step.
 -group_count
 Defines the number of groups for the test when you
 specify -group_count_mode custom. The default count
 list is {10 20 100}
 -group_count_start
 Indicates the minimum number of groups for the test.
 The default value is 10. You can specify this argument
 when -group_count _mode is set to step.
 -group_count_end
 Specifies the maximum group numbers for the test.
 The default value is 100. You can specify
 this argument when -group_count _mode is set to step.

 -group_count_step
 Specifies the frame size increment. The default value is
 10. You can specify this argument when
 -group_count_mode is set to step.
 -group_count_min
 Indicates the minimum number of groups when you use
 random mode for -group_count_mode. The default is 1.
 -group_count_max
 Indicates the maximum group count when you use
 random mode for -group_count_mode. The default is
 1000.
 -group_search_mode
 Specifies the search algorithm used to find out the
RFC 3918 Functions
910
 group capacity. Possible values are binary, step, and
 combo. The default value is binary. This option is only
 used in group capacity test. You can specify this
 argument when -test_type is set to capacity. The
 modes are described below:
 binary - The test searches for the value using a
 binary search algorithm.
 step - The value increases with each iteration by the
 percentage specified by the -rate_step option.
 combo - The test begins with step mode and then
 switches to binary mode when an iteration fails.
 -group_lower_limit
 Specifies the lower limit for group search when using
 the binary mode. This attribute will be ignored if
 -group_search_mode is set to step. The default value is
 10. You can specify this argument when -test_type is set
 to capacity and -search_mode is set to binary.
 -group_upper_limit
 Specifies the upper limit for group search when using
 the binary mode. This attribute will be ignored if
 -group_search_mode is set to step. The default value is
 100. You can specify this
 argument when -test_type is set to capacity and
 -search_mode is set to binary.
 -group_step
 Specifies the amount that the load increases from
 iteration to iteration. This attribute will be ignored if the
 -search_mode option is set to binary. The default value
 is 10. You can specify this argument when -test_type is
 set to capacity and -search_mode is set to step or
 combo.
 -group_back_off
 Specifies the rate at which the group decreases after the
 DUT fails at the current group count. This option is
 applicable when -search_mode is binary or combo and
 -test_type is set to capacity. The default value is 50.
 -group_resolution
 Defines the finest adjustment possible in group count
 from iteration to iteration. If the required adjustment to
 the current group count for the next iteration is less than
 the value, the search stops. This option is applicable
 when -group_search_mode is binary or combo and
 -test_type is set to capacity. The default is 1.
 -iteration_count
 Specifies the number of times the test repeats with its
 initial configuration. Each trial is based on the same
 parameter values. Within a trial, certain parameter
 values vary with each iteration, according to the test
 methodology and setup. At the start of the next trial,
 these parameters revert to their initial values. Possible values
 range from 1 to 60. The default value is 1.
 -ignore_limit
 Specifies whether the search stops at the value specified
 by -rate_lower_limit or -rate_upper_limit, or it
 continues beyond those limits if an acceptable load has
 not been found yet. Possible values are 0 and 1. The
 default is 0. You can specify this option when -test_type
 is set to agg_tput or mixed_tput and -search_mode is
 set to binary or combo.
 -initial_group 
RFC 3918 Functions
911
 Indicates the starting group count for group search. The
 default is 10. You can specify this argument when
 -test_type is set to capacity.
 -initial_rate
 Indicates the starting load rate for each port. The default
 is 10. You can specify this argument when -test_type is
 set to agg_tput or mixed_tput .
 -join_group_delay
 Defines the time duration (in seconds) between join
 messages. The default value is 15.
 -join_leave_interval
 specifies time (in seconds) to wait after sending join
 messages before sending leave messages. The default is
 10. You can specify this option when -test_type is set to
 join_latency.
 -learning_frequency
 Specifies the frequency for sending learning frames.
 Possible values are learn_every_topology_change,
 learn_every_frame_size, and learn_every_iteration.
 The default value is learn_every_topology_change.
 learn_every_topology_change - Sends learning frames
 after every topology change.
 learn_every_frame_size - Sends learning frames upon
 each iteration in frame size.
 learn_every_iteration - Sends learning frames before
 each iteration begins.
 -l2_learning_rate
 Specifies the rate, measured in frames
 per second, at which L2 learning frames are sent to the
 SUT. Possible values range from 1 to 4294967295. The default
 value is 1000.
 -l3_learning_rate
 Specifies the rate, measured in frames per second, at
 which L3 learning frames are sent to the SUT. Possible values
 range from 1 to 4294967295. The default value is 1000.
 -l3_learning_retry_count
 Specifies the number of Layer 3 learning retries
 if transmission, learning verification, or link errors
 occur. Possible values range from 1 to 100. The default is 5.
 -l2_learning_repeat_count
 Specifies the number of Layer 2 learning retries
 if transmission, learning verification, or link errors occur.
 Possible values range from 1 to 100. The default is 5.
 -l2_learning_frame_mode
 Specifies how to determine L2 learning frame size
 Possible values are same_as_stream and fixed.
 same_as_stream - Indicates that the learning frame is
 the same size as the test frame for each iteration.
 fixed - Indicates that the learning frame is a fixed size
 regardless of the test frame size.

 The default value is same_as_stream.
 -l2_learning_frame_size
 Specifies L2 learning frame size if the
 -l2_learning_frame_mode argument is set to fixed. Possible values
 range from 64 to 16383. The default value is 128.
RFC 3918 Functions
912
 -load_type
 Specifies the way of varying the load size during the
 test. Possible values are custom, random, and step. The
 default value is custom. The types are described below:
 custom - The load sizes to use for the test is a list of the
 load sizes that are specified by the -load_list
 argument.
 random - The load sizes to use for the test is the random
 sizes between the minimum size specified by the
 -load_min argument and the maximum size
 specified by the -load_max argument.
 step - The load sizes increase by the step value
 (-load_step) with each test iteration, beginning
 with the start value ( -load_start) and increasing
 to the end value (-load_end).
 -load_unit
 Specifies the load unit to use. Possible values are
 bits_per_second, frames_per_second, inter_burst_gap,
 kilobits_per_second, megabits_per_second, and
 percent_line_rate. The default value is
 percent_line_rate. The units are described below:
 bits_per_second - Number of bits per second.
 frames_per_second - Number of frames per second.
 inter_burst_gap - Interval between two frames.
 kilobits_per_second - Number of kilobits per second.
 megabits_per_second - Number of megabits per second.
 percent_line_rate - Percentage of the line rate.
 Note: This option is not allowed in the throughput test.
 -load_list
 Defines the list of load sizes. You can specify this
 option when -load_type is set to custom.
 -load_start
 Indicates the load size for the first trial. The default is
 10. You can use this argument when you specify
 -load_type step. You should use -load_start, -load_end,
 and -load_step together to generate the load value list
 when you specify -load_type step.
 -load_end
 Specifies the maximum load value for a trial. The
 default is 50. You can specify this argument when you
 specify -load_type step. Please refer to -load_type for
 more information.
 -load_step
 Indicates the difference between two load sizes. The
 default is 10. You can specify this argument when you
 specify -load_type step. Please refer to -load_type for
 more information.
 -load_min
 Specifies the minimum load value for a trial. You can
 use this argument when you specify -load_type random.
 Please refer to -load_type for more information. The
 default is 10.
 -load_max 
RFC 3918 Functions
913
 Specifies the maximum load value for a trial. You can
 use this argument when you specify -load_type random.
 Please refer to -load_type for more information. The
 default is 50.
 -latency_type
 Specifies the latency calculation methods. Possible
 values are lilo, lifo, and fifo. The default is lilo.
 lilo - Last-In Last-Out latency. Calculates the latency as
 the time interval from when the end of the frame
 is transmitted from the source test port to when
 the end of the frame is received at the destination
 test port.
 lifo - Last-In First-Out latency. Calculates the latency as
 the time interval from when the last bit of the
 input frame reaches the test destination port to
 when the first bit of the output frame reaches the
 test destination port.
 fifo - First-In First-Out latency. Calculates the latency
 as the time interval from when the first bit
 of the input frame reaches the test destination
 port to when the first bit of the output frame
 reaches at the test destination port.
 -latency_bucket_mode
 Determines latency buckets based on a linear or
 exponential scale. Possible values are exponential or
 linear. The default is exponential. You can specify this
 option when -test_type is set to fwd_latency.
 -max_latency_threshold
 Specifies the maximum latency (in microseconds) of all
 the average latencies determined on each receive port in
 the test. If the threshold is reached, then the test trial
 fails. The default value is 30. You can specify this
 option when -test_type is set to throughput.
 -mc_msg_tx_rate
 Specifies the rate at which to transmit multicast packets,
 in packets per second per port. Possible values range from 0 to
 4294967295. The default value is 1000.
 -mc_group_distribute
 Specifies the method used to distribute multicast groups
 to the multicast group objects. Possible values are even
 or weighted.
 even - Even distribution between all associated
 multicast groups. All objects are assigned an
 equal number of groups.
 traffic_weighted - Weighted distribution based on traffic rate to
 associated multicast groups. Each object is
 assigned a number of groups proportional to the
 traffic rate of the object. If an object has twice the
 traffic rate, it will be assigned twice as many
 groups.
 -mc_traffic_percent_mode
 Specifies the method for varying percentage of multicast
 traffic used during the Mixed Class Throughput test as a
 percentage of expected egress load. Possible values are
 custom, random, and step. The default value is custom.
 The modes are described below:
 custom - Specifies a list of multicast traffic percentage
 specified by the -mc_traffic_percent argument.
RFC 3918 Functions
914
 random - Generates random multicast traffic percentage
 within the range between the minimum value
 (-mc_traffic_percent_min) and the maximum
 value (-mc_traffic_percent_max).
 step - Increases the multicast traffic percentage by the
 step value (-group_count_step). You should use
 -mc_traffic_percent_start,
 -mc_traffic_percent_end, and
 -mc_traffic_percent_step together to generate the
 frame size list for the test when the
 -mc_traffic_percent _mode option is set to step.
 -mc_traffic_percent
 Specify a list of multicast traffic percentage for the test
 when you specify -mc_traffic_percent custom. The
 default count list is {10 50 90}
 -mc_traffic_percent_start
 Indicates the minimum group numbers for the test. The
 default value is 10. You can specify this argument when
 -mc_traffic_percent_mode is set to step.
 -mc_traffic_percent_end
 Specifies the maximum group numbers for the test.
 The default value is 90. You can specify
 this argument when -mc_traffic_percent_mode is set to
 step.

 -mc_traffic_percent_step
 Specifies the frame size increment. The default value is
 10. You can specify this argument when
 -mc_traffic_percent_mode is set to step.
 -mc_traffic_percent_min
 Indicates the minimum number of groups when you use
 random mode for -mc_traffic_percent_mode. The
 default is 1.
 -mc_traffic_percent_max
 Indicates the maximum number of groups when you use
 random mode for -mc_traffic_percent_mode. The
 default is 100.
 -min_latency
 Specifies latency value, measured in microseconds, for
 the first bucket. The default is 4. You can specify this
 option when -test_type is set to fwd_latency.
 -max_latency
 specifies latency value, measured in microseconds, for
 the last bucket. The default is 16384. You can specify
 this option when -test_type is set to fwd_latency.
 -out_of_seq_threshold
 Specifies the number of out-of-order frames on each
 receive port that, if exceeded, causes the test iteration to
 fail. The default is 0. You can specify this option when
 -test_type is set to throughput.
 -result_delay
 Specifies the Interval (in seconds) between the test
 stop and result collection. Possible values range from 0 to
 2147483647. The default value is 15.
 -rate_lower_limit
 Specifies the lower limit load rate for each port when
 using the binary search. This attribute will be ignored if
 -search_mode is set to step. The default value is 1. You
 can specify this argument when -test_type is set to
 agg_tput or mixed_tput and -search_mode is set to
RFC 3918 Functions
915
 binary.
 -rate_upper_limit
 Specifies the maximum load rate for each port. The
 default value is 100. You can specify this argument
 when -test_type is set to agg_tput or mixed_tput and
 -search_mode is set to binary.
 -rate_step
 Specifies the amount that the load increases from
 iteration to iteration. This attribute will be ignored if the
 -search_mode option is set to binary. The default value
 is 10. You can specify this argument when -test_type is
 set to agg_tput or mixed_tput and -search_mode is set
 to step.
 -resolution
 Defines the finest adjustment possible in load from
 iteration to iteration. If the required adjustment to the
 current load for the next iteration is less than the value,
 the search stops. This option is applicable only when
 -search_mode is set to binary or combo and -test_type
 is set to agg_tput or mixed_tput. The default is 1.
 -start_test_delay
 Specifies the delay (in seconds) between when the
 test is started and the test ports are checked for their
 physical link status. Extending this delay may be
 required when testing a system that cannot forward
 immediately after physical link is established, for
 example when running Spanning Tree Protocol. Possible values
 range from 0 to 3600. The default value is 2.
 -search_mode
 Specifies the search algorithm used to find out the
 group capacity. Possible values are binary, step, and
 combo. The default value is binary. This options is only
 used in Mixed class throughput test and aggregate
 multicast throughput test. You can specify this argument
 when -test_type is set to agg_tput or mixed_tput.
 The modes are described below:
 binary - The test searches for the value using a
 binary search algorithm.
 step - The value increases with each iteration by the
 percentage specified by the -rate_step option.
 combo - The test begins with step mode and then
 switches to binary mode when an iteration fails.
 -traffic_join_interval
 Specifies the time (in seconds) to wait after sending
 traffic before sending join messages. The default is 10.
 You can specify this option when -test_type is set to
 join_latency.
 -test_duration_mode
 Specifies the duration mode for each transmitted
 stream. This option determines whether the test duration
 is measured in seconds or by the number of frames. The
 default is seconds. Possible values are described below:
 seconds - Each trial lasts for the number of seconds
 specified by the -test_duration argument.
 bursts - Each trial lasts for the number of bursts
 specified by the -test_duration argument.
 -test_duration
 Indicates the transmission length in number of frames, 
RFC 3918 Functions
916
 when you specify -test_duration_mode bursts, or
 indicates the transmission time in seconds, if you
 specify -test_duration_mode seconds. Possible values range from 1
 to 5184000. The default value is 60 when you specify
 -test_duration_mode seconds and 1000 when you specify
 -test_duration_mode bursts.
 -unicast_frame_size_mode
 Specifies how unicast frame sizes are set and varied
 through successive test trials. Possible values are
 custom, random, and step. The default value is custom.
 Use this argument only when -test_type is set to
 mixed_tput. The modes are described below:
 custom - Specifies a list of frame sizes specified by the
 -frame_size argument.
 random - Generates random frame sizes within the
 range between the minimum size
 (-frame_size_min) and the maximum size
 (-frame_size_max).
 step - Increases the frame size for each trial from that of
 the previous trial. You should use
 -frame_size_start, -frame_size_end, and
 -frame_size_step together to generate the frame
 size list for the test when the -frame_size_mode
 is set to step.
 Note: The frame size includes the Cyclic Redundancy
 Check (CRC).
 -unicast_frame_size
 Defines the unicast frame size list for the test when you
 specify -unicast_frame_size_mode to custom. Use this argument
 only when the -test_type argument is set to mixed_tput.
 The default size list is {128, 256, 512, 1024, 1280,
 1518}
 -unicast_size_start
 Indicates the unicast frame size for the first test trial.
 The default value is 128. You can specify this argument
 when -unicast_frame_size_mode is set to step. Uuse this
 argument only when the -test_type option is set to
 mixed_tput.
 -unicast_size_end
 Specifies the maximum unicast frame size for the test.
 The default value is 1518. You can specify
 this argument when -unicast_frame_size_mode is set to step.
 Use this argument only when the -test_type option is set
 to mixed_tput.
 -unicast_frame_size_step
 Specifies the unicast frame size increment. The default
 value is 128. You can specify this argument when
 -unicast_frame_size_mode is set to step. Use this argument only
 when the -test_type option is set to mixed_tput.
 -unicast_frame_size_min
 Indicates the minimum unicast frame size when you use
 random mode for -unicast_frame_size_mode. The default is
 128. Use this argument only when the -test_type option
 is set to mixed_tput.
 -unicast_frame_size_max
 Indicates the maximum unicast frame size when you
 use random mode for -unicast_frame_size_mode. The default is
 1518. Use this argument only when the -test_type
 option is mixed_tput.
RFC 3918 Functions
917
Arguments Unsupported by Save as HLTAPI:
 None.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle Identifies the created test instance.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::test_rfc3918_config function creates, modifies or deletes an RFC
 3918 test that can be mixed class throughput test, scaled group forwarding
 matrix test, aggregated multicast throughput test, multicast
 forwarding latency test, multicast forwarding latency test, multicast group
 capacity test or join leave latency test. Use the -mode argument to specify
 the action to perform. (See the -mode argument description for information
 about the actions.)
 Once the RFC 3918 test has been configured, a handle is created, which
 can be used to modify the created test. (See the -mode argument
 description for more information).
 You must specify the -mode (create, modify, or delete) argument.
 For more information about the protocol, see RFC 3918.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a mixed class throughput test:
 sth::test_rfc3918_config -mode create\
 -test_type mixed_tput\
 -multicast_streamblock $multiStreamHnd\
 -unicast_streamblock $uniStreamHnd \
 -join_group_delay 15 \
 -leave_group_delay 15 \
 -mc_msg_tx_rate 2000 \
 -latency_type FIFO \
 -test_duration_mode seconds \
 -test_duration 20 \
 -frame_size_mode custom \
 -frame_size 256 \
 -learning_frequency learn_every_iteration \
 -l2_learning_rate 100 \
 -l3_learning_rate 200 \
 -group_count_mode custom \
 -group_count {10 20} \
 -enable_same_frame_size 0 \
 -unicast_frame_size_mode custom \
 -unicast_frame_size 128 \
 -mc_traffic_percent_mode custom \
 -mc_traffic_percent 30]
 The following example creates an aggregated multicast throughput test:
 sth::test_rfc3918_config -mode create\
 -test_type agg_tput\
 -multicast_streamblock $multiStreamHnd\
 -join_group_delay 15 \
 -leave_group_delay 15 \
 -mc_msg_tx_rate 2000 \
 -latency_type FIFO \
 -test_duration_mode seconds \
 -test_duration 20 \
 -result_delay 10 \
 -start_test_delay 5 \
 -frame_size_mode custom \
 -frame_size 256 \
RFC 3918 Functions
918
 -learning_frequency learn_every_iteration \
 -l2_learning_rate 100 \
 -l3_learning_rate 200 \
 -group_count_mode custom \
 -group_count {10 20}]
 The following example modifies a created test:
 sth::test_rfc3918_config -mode modify \
 -handle $testHnd \
 -test_type agg_tput\
 -join_group_delay 25 \
 -leave_group_delay 35 \
 -mc_msg_tx_rate 4000 \
 -iteration_count 1 \
 -test_duration_mode seconds \
 -test_duration 10 \
 -start_test_delay 5 \
 -group_count_mode custom \
 -group_count {10}]
 Sample output for examples shown above:
 {status 1}
 #### HLTAPI for Python ####
 The following example creates a mixed class throughput test:
 rfc_cfg0 = sth.test_rfc3918_config (
 mode = 'create',
 test_type = 'mixed_tput',
 multicast_streamblock= mc_str,
 unicast_streamblock = uc_str,
 enable_same_frame_size= '1',
 resolution = '1',
 mc_group_distribute = 'traffic_weighted',
 rate_upper_limit = '100',
 mc_traffic_percent = '10',
 enable_latency_threshold= '0',
 group_count_mode = 'custom',
 ignore_limit = '0',
 mc_traffic_percent_mode= 'custom',
 back_off = '50',
 group_count = ['10','20'],
 accept_frame_loss = '0',
 rate_lower_limit = '10',
 search_mode = 'binary',
 enable_seq_threshold= '0',
 initial_rate = '100',
 frame_size_mode = 'custom',
 l2_learning_frame_mode= 'fixed',
 mc_msg_tx_rate = '1000',
 frame_size = ['128','256'],
 l2_learning_repeat_count= '5',
 learning_frequency = 'learn_every_topology_change',
 result_delay = '15',
 enable_cyclic_resolution= '1',
 test_duration_mode = 'seconds',
 l3_learning_rate = '1000',
 join_group_delay = '10',
 iteration_count = '1',
 test_duration = '15',
 leave_group_delay = '5',
 l2_learning_rate = '1000',
 latency_type = 'FIFO',
 l2_learning_frame_size= '128',
 start_test_delay = '2',
 l3_learning_retry_count= '5');

 Sample Output:
 {'status': '1', 'handle': 'rfc3918mixedclassthroughputtestcaseconfig1'}
RFC 3918 Functions
919
 The following example creates an aggregated multicast throughput test:
 rfc_cfg0 = sth.test_rfc3918_config (
 mode = 'create',
 test_type = 'agg_tput',
 multicast_streamblock= mc_str,
 resolution = '1',
 mc_group_distribute = 'even',
 rate_upper_limit = '100',
 enable_latency_threshold= '0',
 group_count_mode = 'custom',
 ignore_limit = '0',
 back_off = '50',
 group_count = '10',
 accept_frame_loss = '0',
 rate_lower_limit = '10',
 search_mode = 'binary',
 enable_seq_threshold= '0',
 initial_rate = '100',
 frame_size_mode = 'custom',
 l2_learning_frame_mode= 'same_as_stream',
 mc_msg_tx_rate = '1000',
 frame_size = '128',
 l2_learning_repeat_count= '5',
 learning_frequency = 'learn_every_topology_change',
 result_delay = '15',
 enable_cyclic_resolution= '1',
 test_duration_mode = 'seconds',
 l3_learning_rate = '1000',
 join_group_delay = '5',
 iteration_count = '1',
 test_duration = '10',
 leave_group_delay = '5',
 l2_learning_rate = '1000',
 latency_type = 'FIFO',
 start_test_delay = '2',
 l3_learning_retry_count= '5');

 Sample Output:
 {'status': '1', 'handle': 'rfc3918aggregatedmulticastthroughputtestcaseconfig1'}
 #### HLTAPI for Perl ####
 The following example creates an aggregated multicast throughput test:
 my %rfc_cfg0 = sth::test_rfc3918_config (
 mode => 'create',
 test_type => 'agg_tput',
 multicast_streamblock=> "$mc_str",
 resolution => '1',
 mc_group_distribute => 'even',
 rate_upper_limit => '100',
 enable_latency_threshold=> '0',
 group_count_mode => 'custom',
 ignore_limit => '0',
 back_off => '50',
 group_count => '10',
 accept_frame_loss => '0',
 rate_lower_limit => '10',
 search_mode => 'binary',
 enable_seq_threshold=> '0',
 initial_rate => '100',
 frame_size_mode => 'custom',
 l2_learning_frame_mode=> 'same_as_stream',
 mc_msg_tx_rate => '1000',
 frame_size => '128',
 l2_learning_repeat_count=> '5',
 learning_frequency => 'learn_every_topology_change',
 result_delay => '15',
 enable_cyclic_resolution=> '1',
 test_duration_mode => 'seconds',
 l3_learning_rate => '1000',
RFC 3918 Functions
920
 join_group_delay => '5',
 iteration_count => '1',
 test_duration => '10',
 leave_group_delay => '5',
 l2_learning_rate => '1000',
 latency_type => 'FIFO',
 start_test_delay => '2',
 l3_learning_retry_count=> '5');

 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'rfc3918aggregatedmulticastthroughputtestcaseconfig1';
 $VAR3 = 'status';
 $VAR4 = '1';
 The following example creates a mixed class throughput test:
 my %rfc_cfg0 = sth::test_rfc3918_config (
 mode => 'create',
 test_type => 'mixed_tput',
 multicast_streamblock=> "$mc_str",
 unicast_streamblock => "$uc_str",
 enable_same_frame_size=> '1',
 resolution => '1',
 mc_group_distribute => 'traffic_weighted',
 rate_upper_limit => '100',
 mc_traffic_percent => '10',
 enable_latency_threshold=> '0',
 group_count_mode => 'custom',
 ignore_limit => '0',
 mc_traffic_percent_mode=> 'custom',
 back_off => '50',
 group_count => '10 20 ',
 accept_frame_loss => '0',
 rate_lower_limit => '10',
 search_mode => 'binary',
 enable_seq_threshold=> '0',
 initial_rate => '100',
 frame_size_mode => 'custom',
 l2_learning_frame_mode=> 'fixed',
 mc_msg_tx_rate => '1000',
 frame_size => '128 256 ',
 l2_learning_repeat_count=> '5',
 learning_frequency => 'learn_every_topology_change',
 result_delay => '15',
 enable_cyclic_resolution=> '1',
 test_duration_mode => 'seconds',
 l3_learning_rate => '1000',
 join_group_delay => '10',
 iteration_count => '1',
 test_duration => '15',
 leave_group_delay => '5',
 l2_learning_rate => '1000',
 latency_type => 'FIFO',
 l2_learning_frame_size=> '128',
 start_test_delay => '2',
 l3_learning_retry_count=> '5');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'rfc3918mixedclassthroughputtestcaseconfig1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes: None
End of Procedure Header
RFC 3918 Functions
921
sth::test_rfc3918_control
Name:
 sth::test_rfc3918_control
Purpose:
 Controls the RFC 3918 tests.
Synopsis:
 sth::test_rfc3918_control
 -action {run | stop}
 [-cleanup {0|1}]
 [-wait {0|1}]
Arguments:
 -action:
 Specifies the action to perform for the test. Possible
 values are run and stop.
 run - Starts the test. You can start one test in each type.
 stop - Stops the test.
 -cleanup
 Determines whether the current test instance should be
 deleted after the test is completed. Possible values are 0
 and 1. The default value is 1. When it is set to 1, the
 current test instance will be deleted after the test is
 completed.
 -wait
 Determines whether this command returns only when
 the test is completed. Possible values are 0 and 1. The
 default is 1. When it is set to 1, the command will return
 only when the test is completed.
Return values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status $SUCCESS or $FAILURE log Error message if command returns {status 0}
Description:
 The sth::test_rfc3918_control function controls the starting and
 stopping of the test.
Examples:
 #### HLTAPI for Tcl ####
 The following example starts all current configured tests at
 the same time and does not do the cleanup action when the tests stop:
 set ret [sth::test_rfc3918_control -action run -wait 1 -cleanup 0]
 Sample output for the example shown above:
 {status 1}
 #### HLTAPI for Python ####
 The following example starts all current configured tests:
 ctrl_ret1 = sth.test_rfc3918_control (
 action = 'run',
 wait = '1');

 Sample output: {'status': '1',}
 #### HLTAPI for Perl ####
RFC 3918 Functions
922
 The following example starts all current configured tests:
 my %ctrl_ret1 = sth::test_rfc3918_control (
 action => 'run',
 wait => '1');

 Sample output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
End of Procedure Header
sth::test_rfc3918_info
Name:
 sth::test_rfc3918_info
Purpose:
 Retrieves statistics for the configured test.
Synopsis:
 sth:: test_rfc3918_info
 -test_type {mixed_tput|matrix|agg_tput|fwd_latency|join_latency|capacity}
 [-clear_result {0|1}]
Arguments:
 -test_type
 Specifies the type of the test, whose information will be
 returned. This argument is mandatory. Possible values
 are mixed_tput matrix, agg_tput, fwd_latency,
 join_latency and capacity. Please refer to the description
 of the -test_type option.
 -clear_result
 Determines whether the result should be cleared after
 the data is retrieved. Possible values are 0 and 1.
 When it is set to 1, the result will be cleared after the
 data is retrieved. The default is 0.
Return values:
 The function returns a keyed list using the following keys (with
 corresponding data):

 status $SUCCESS or $FAILURE
 log Error message if command returns {status 0}
 statistics list Specifies the list of RFC 3918 statistics
 The statistics that will be returned are listed below:
 Mixed Class Throughput test Statistics:
 Summary results: The average data value of all the iterations done in
 a test.
 rfc3918mixed_tput.summary.total_iteration_count
 The number of all the iterations.
 rfc3918mixed_tput.summary.test_duration_mode
 Test duration mode.
 rfc3918mixed_tput.summary.test_duration
 Test duration.
 You can use the multicast stream ratio, multicast frame size and
 unicast frame size as indexes to query the following results: 
RFC 3918 Functions
923
 rfc3918mixed_tput.summary.mc_ratio.<value>.mc_frame_size.
 <value>. unicast_frame_size. <value>.mixed_iload
 The intended load of mixed class traffic.
 rfc3918mixed_tput.summary.mc_ratio.<value>.mc_frame_size.
 <value>.unicast_frame_size.<value>.mixed_tput
 The throughput of mixed class traffic (frames per second).
 rfc3918mixed_tput.summary.mc_ratio.<value>.mc_frame_size.
 <value>.unicast_frame_size.<value>.mc_iload
 The intended load of multicast class traffic.
 rfc3918mixed_tput.summary.mc_ratio.<value>.mc_frame_size.
 <value>.unicast_frame_size. # <value>.mc_tput
 The throughput of multicast class traffic (frames per second).
 rfc3918mixed_tput.summary.mc_ratio.<value>.mc_frame_size.
 <value>.unicast_frame_size.<value>.unicast_iload
 The intended load of unicast class traffic.
 rfc3918mixed_tput.summary.mc_ratio.<value>.mc_frame_size.
 <value>.unicast_frame_size.<value>.unicast_tput
 The throughput of unicast class traffic (frames per second).
 Detail results: The detail statistics. You can use the iteration
 count group count, multicast stream ratio, multicast frame size and
 unicast frame size as indexes when you query the results. For
 example. "rfc3918mixed_tput. detail. iteration. 2. gp_count. 10.
 mc_frame_size. 64. unicast_frame_size.64. mc_iload" indicates the
 multicast stream intended load for the second iteration of a Mixed
 Class Throughput test when the multicast frame size is 64 bytes
 and unicast frame size is 64 bytes
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.mc_egress_port
 Multicast egress port count.
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.mixed_tput
 The throughput of mixed class traffic (frames per second).
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.mc_iload
 The intended load of multicast class traffic.
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.mc_tput
 The throughput of multicast class traffic (frames per second).
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.unicast_iload
 The intended load of unicast class traffic.
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.unicast_tput
 The throughput of unicast class traffic (frames per second).
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.tx_frames
 The Number of sent frames.
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size. 
RFC 3918 Functions
924
 <value>.rx_frames
 The number of received frames.
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.latency_min
 The minimum latency (microseconds).
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.latency_avg
 The average latency (microseconds).

 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>.latency_max
 The maximum latency (microseconds).
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>. jitter_min
 The minimum jitter value (microseconds).
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>. jitter_avg
 The average jitter value (microseconds).
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>. jitter_max
 The maximum jitter value (microseconds).
 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>. frame_lost
 The number of lost frames.

 rfc3918mixed_tput.detail.iteration.<value>.gp_count.<value>.
 mc_ratio.<value>.mc_frame_size.<value>.unicast_frame_size.
 <value>. frame_loss
 The percentage ratio of lost frames to the total frames.
 Aggregated Multicast Throughput Statistics:
 Summary results: The average data value of all the iterations done in
 a test.
 rfc3918agg_tput.summary.total_iteration_count
 The number of all the iterations.
 rfc3918agg_tput.summary.test_duration_mode
 Test duration mode.
 rfc3918agg_tput.summary.test_duration
 Test duration.
 You can use the group count, multicast frame size and intented load
 as indexes to query the following results:
 rfc3918agg_tput.summary.gp_count.<value>.frame_size.<value>.
 iload.<value>.tput
 Throughput (frames per second).
 rfc3918agg_tput.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>.frame_loss
 The percentage ratio of lost frames to the total frames.
 Detail results:
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.mc_egress_port
 Multicast egress port count.
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
RFC 3918 Functions
925
 <value>.frame_size.<value>.iload.<value>. tput
 Throughput (frames per second).
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.tx_frames
 The number of sent frames.
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.rx_frames
 The number of received frames.

 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.latency_min
 The minimum latency (microseconds)
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.latency_avg
 The average latency (microseconds).
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.latency_max
 The maximum latency (microseconds).
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. jitter_min
 The minimum jitter value (microseconds)
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.jitter_avg
 The average jitter value (microseconds)
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.jitter_max
 The maximum jitter value (microseconds)
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. frame_lost
 The number of lost frames.
 rfc3918agg_tput.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. frame_loss
 The percentage ratio of lost frames to the total frames.
 Scaled Group Forwarding Matrix Statistics:
 Summary results: The average data value of all the iterations done in
 a test.
 rfc3918matrix.summary.total_iteration_count
 The number of all the iterations.
 rfc3918matrix.summary.test_duration_mode
 Test duration mode.
 rfc3918matrix.summary.test_duration
 Test duration.
 rfc3918matrix.summary. latency_type
 Latency type.
 rfc3918matrix.summary.gp_count.<value>.frame_size.<value>.
 iload.<value>. total_tx_frames
 The total number of sent frames.
 rfc3918matrix.summary.gp_count.<value>.frame_size.<value>.
 iload.<value>. total_rx_frames
 The total number of received frames.
 rfc3918matrix.summary.gp_count.<value>.frame_size.<value>.
 iload.<value>. total_frame_lost
 The number of lost frames.
 rfc3918matrix.summary.gp_count.<value>.frame_size.<value>.
 iload.<value>.fwd_rate
 Forwarding rate.
RFC 3918 Functions
926
 Detail results:
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. rx_gp_count
 Received group count.
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. oload
 Offer load.
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. tx_frames
 The number of sent frames.
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. expected_rx_frames
 The number of expected received frames.
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. rx_frames
 The number of received frames.
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. frame_lost
 The number of lost frames.
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. frame_loss
 The percentage ratio of lost frames to the total frames.
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. fwd_rate
 Forwarding rate.
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. latency_min
 The minimum latency (microseconds).
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. latency_avg
 The average latency (microseconds).
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. latency_max
 The maximum latency (microseconds).
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. jitter_min
 The minimum jitter value (microseconds)
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. jitter_avg
 The average jitter value (microseconds)
 rfc3918matrix.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. jitter_max
 The maximum jitter value (microseconds)
 Multicast Forwarding Latency Statistics:
 Summary results: The average data value of all the iterations done in
 a test.
 rfc3918fwd_latency.summary.total_iteration_count
 The total iteration number.
 rfc3918fwd_latency.summary.test_duration_mode
 Test duration mode.

 rfc3918fwd_latency.summary.test_duration
 Test duration.

 rfc3918fwd_latency.summary.latency_type
RFC 3918 Functions
927
 Latency type.
 rfc3918fwd_latency.summary.gp_count.<value>.frame_size.
 <value>.iload. <value>. oload
 Offered load
 rfc3918fwd_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>. latency_min
 Minimum latency (microseconds).
 rfc3918fwd_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>. latency_avg
 Average latency (microseconds).
 rfc3918fwd_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>.latency_max
 Maximum latency (microseconds).
 Detail results:
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. mc_egress_port
 Multicast egress port count
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. rx_gp_count
 Received group count.
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. oload
 Offered load
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. latency_min
 Minimum latency (microseconds).
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.latency_avg
 Average latency (microseconds).
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. latency_max
 Maximum latency (microseconds).
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. tx_frames
 The number of sent frames.
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. expected_rx_frames
 The expected number of received frames.
 rfc3918fwd_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. rx_frames
 The number of received frames.
 Join Leave Latency Statistics:
 Summary results: The average data value of all the iterations done in
 a test.
 rfc3918join_latency.summary.total_iteration_count
 The total number of iteration.
 rfc3918join_latency.summary.test_duration_mode
 Duration mode.
 rfc3918join_latency.summary.test_duration
 Test duration.
 rfc3918join_latency.summary.latency_type
 Latency type.
RFC 3918 Functions
928
 rfc3918join_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>. oload
 Offered load
 rfc3918join_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>.join_latency_min
 The minimum join latency (microseconds).
 rfc3918join_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>. join_latency_max
 The maximum join latency (microseconds).
 rfc3918join_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>. join_latency_avg
 The average join latency (microseconds).
 rfc3918join_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>.leave_latency_min
 The minimum leave latency (microseconds).
 rfc3918join_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>. leave_latency_max
 The maximum leave latency (microseconds).
 rfc3918join_latency.summary.gp_count.<value>.frame_size.
 <value>.iload.<value>. leave_latency_avg
 The average leave latency (microseconds).
 Detail results:
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. mc_egress_port
 Multicast egress port count.
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. rx_gp_count
 Received group count.
 rfc3918join_latency.detail.iteration.<value>.gp_count.<value>.
 frame_size.<value>.iload.<value>. oload
 Offered load.
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.join_latency_min
 The minimum join latency (microseconds).
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.Join_latency_avg
 The average join latency (microseconds).
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.join_latency_max
 The maximum join latency (microseconds).
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.leave_latency_min
 The minimum leave latency (microseconds).
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.leave_latency_avg
 The Average leave latency (microseconds).
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.leave_latency_max
 The Maximum leave latency (microseconds).
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. tx_frames
 The number of sent frames.
RFC 3918 Functions
929
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. expected_rx_frames
 The expected number of received frames.
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>. rx_frames
 The number of received frames.
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.frame_lost
 The number of lost frames.
 rfc3918join_latency.detail.iteration.<value>.gp_count.
 <value>.frame_size.<value>.iload.<value>.frame_loss
 The percentage ratio of lost frames to the total frames.
 Multicast Group Capacity Statistics:
 Summary results: The average data value of all the iterations done in
 a test.
 rfc3918capacity.summary.total_iteration_count
 The total number of iteration.
 rfc3918capacity.summary.test_duration_mode
 Test duration mode.
 rfc3918capacity.summary.test_duration
 Test duration.
 rfc3918capacity.summary.frame_size.<value>.iload.<value>. oload
 Offered load
 rfc3918capacity.summary.frame_size.<value>.iload.<value>.
 group_capacity
 Group capacity
 Detail results:
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. mc_rx_gp_count
 Multicast Received port count
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. mc_egress_ports
 Multicast egress port count
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. no_rx_gp
 Total number of groups with zero received frames on all
 egress ports.
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. tput
 Throughput (frames per second).
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. tx_frames
 The number of sent frames.
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>.rx_frames
 The number of received frames.
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. latency_min
 Minimum latency (microseconds).
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>.latency_avg
 Average latency (microseconds).
RFC 3918 Functions
930
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. latency_max
 Maximum latency (microseconds).
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. jitter_min
 Minimum jitter value (microseconds)
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. jitter_avg
 Average jitter value (microseconds)
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. jitter_max
 Maximum jitter value (microseconds)
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. frame_lost
 The number of lost frames.
 rfc3918capacity.summary.iteration.<value>frame_size.
 <value>.iload.<value>. frame_loss
 The percentage ratio of lost frames to the total frames.
Description:
 The sth::test_rfc3918_info function provides information about
 the configured tests.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0).
 Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input:
 puts "get the b2b test result"
 set ret [sth::test_rfc3918_info -test_type agg_tput -clear_result 1]
 Sample Output:
 {rfc3918join_latency {{summary {{total_iteration_count 1} {gp_count
 {{10 {{frame_size {{128 {{iload {{10 {{oload 10.0}
 {join_latency_min 0.0} {join_latency_max 0} {join_latency_avg 0.0}
 {leave_latency_max 0} ...... {frame_loss 100.0}}}}}}}}}}}}}}}}}}}}}
 {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.test_rfc3918_info (
 test_type = 'mixed_tput',
 clear_result = '1');
Sample Output:
 {'status': '1', 'rfc3918mixed_tput': {'detail': {'iteration': {'1': {'gp_count':
 {'0': {'mc_ratio': {':9': {'mc_frame_size': {'256': {'unicast_frame_size':
 {'tx_frames': '67934783', 'latency_avg': '0.124', 'mc_tput': '10.0',
 'mc_egress_port': '1', 'mixed_iload': '100.0', 'jitter_max': '0.02',
 'unicast_iload': '90.0', 'latency_max': '0.14', 'latency_min': '0.11',
 'mixed_tput': '100.0', 'jitter_avg': '0.006', 'frame_loss': '0.0', 'frame_lost':
 '0', 'jitter_min': '0.0', 'mc_iload': '10.0', 'rx_frames': '67934783',
 'unicast_tput': '90.0'}}, '28': {'unicast_frame_size': {'tx_frames': '126689190',
 'latency_avg': '0.124', 'mc_tput': '10.0', 'mc_egress_port': '1', 'mixed_iload':
 '100.0', 'jitter_max': '0.03', 'unicast_iload': '90.0', 'latency_max': '0.14',
 'latency_min': '0.11', 'mixed_tput': '100.0', 'jitter_avg': '0.006',
 'frame_loss': '0.0', 'frame_lost': '0', 'jitter_min': '0.0', 'mc_iload': '10.0',
 'rx_frames': '126689190', 'unicast_tput': '90.0'}}}}}}, '20': {'mc_ratio': {':9':
 {'mc_frame_size': {'256': {'unicast_frame_size': {'tx_frames': '67934783',
 'latency_avg': '0.124', 'mc_tput': '10.0', 'mc_egress_port': '1', 'mixed_iload':
 '100.0', 'jitter_max': '0.02', 'unicast_iload': '90.0', 'latency_max': '0.14',
 'latency_min': '0.11', 'mixed_tput': '100.0', 'jitter_avg': '0.006',
RFC 3918 Functions
931
 'frame_loss': '0.0', 'frame_lost': '0', 'jitter_min': '0.0', 'mc_iload': '10.0',
 'rx_frames': '67934783', 'unicast_tput': '90.0'}}, '28': {'unicast_frame_size':
 {'tx_frames': '126689190', 'latency_avg': '0.124', 'mc_tput': '10.0',
 'mc_egress_port': '1', 'mixed_iload': '100.0', 'jitter_max': '0.03',
 'unicast_iload': '90.0', 'latency_max': '0.14', 'latency_min': '0.11',
 'mixed_tput': '100.0', 'jitter_avg': '0.006', 'frame_loss': '0.0', 'frame_lost':
 '0', 'jitter_min': '0.0', 'mc_iload': '10.0', 'rx_frames': '126689190',
 'unicast_tput': '90.0'}}}}}}}}}}, 'summary': {'mc_ratio': {'1:9':
 {'mc_frame_size': {'128': {'unicast_frame_size': {'mc_tput': '10.0',
 'mixed_tput': '100.0', 'mixed_iload': '100.0', 'unicast_iload': '90.0',
 'unicast_tput': '90.0', 'mc_iload': '10.0'}}, '256': {'unicast_frame_size':
 {'mc_tput': '10.0', 'mixed_tput': '100.0', 'mixed_iload': '100.0',
 'unicast_iload': '90.0', 'unicast_tput': '90.0', 'mc_iload': '10.0'}}}}},
 'test_duration_mode': 'SECONDS', 'total_iteration_count': '1',
 'test_duration': '15'}}}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret1 = sth::test_rfc3918_info (
 test_type => 'mixed_tput',
 clear_result => '1');
 Sample Output:
 VAR1 = 'rfc3918mixed_tput';
 $VAR2 = {
 'detail' => {
 'iteration' => {
 '1' => {
 } ...
 $VAR3 = 'status';
 $VAR4 = '1';
Notes: .
End of Procedure Header
RIP Functions
932
RIP Functions
Functions:
sth::emulation_rip_config
sth::emulation_rip_control
sth::emulation_rip_route_config
sth::emulation_rip_info
sth::emulation_rip_config
Name:
 sth::emulation_rip_config
Purpose:
 Creates, enables, modifies, or deletes an emulated Routing Information
 Protocol (RIP) router on a Spirent TestCenter chassis.
 RIP is a protocol for managing routing information within a small
 homogeneous network such as a corporate local area network (LAN) or an
 interconnected group of such LANs.
 Spirent TestCenter supports the three RIP versions: RIP-1 (RFC 1058), RIP-2
 (RFC 1723), and RIPng (RFC 2080). All three are distance-vector protocols,
 have a maximum hop count of 15, and trigger full routing updates to
 neighbor routers every 30 seconds. Enhancements added by RIP-2 include
 support of classless routing (prefix routing that includes the subnet mask
 with the address) and authentication of routing updates (authenticates the
 originator of the response message). RIPng substitutes IPv6 support for
 IPv4 support.
Synopsis:
 sth::emulation_rip_config
 -mode create { <port_handle> | -handle <device_handle> } |
 -mode {modify|delete|active|inactive} -handle <rip_session_handle>
 [-authentication_mode text -password <string>]
 [-authentication_mode {null | MD5} ]
 [-bfd_registration {1|0}]
 [-count <1-1000> ]
 [-intf_ip_addr {<a.b.c.d> | <a:b:c:d:e:f:g:h>}]
 [-intf_ip_addr_step {<a.b.c.d> | <a:b:c:d:e:f:g:h>}]
 [-intf_prefix_length <1-128>]
 [-gateway_ip_addr <a.b.c.d> ]
 [-gateway_ip_addr_step <a.b.c.d>]
 [-mac_address_start <aa:bb:cc:dd:ee:ff>]
 [-md5_key_id <1-255>]
 [-neighbor_intf_ip_addr {<a.b.c.d> | <a:b:c:d:e:f:g:h>} ]
 [-neighbor_intf_ip_addr_step {<a.b.c.d> | <a:b:c:d:e:f:g:h>} ]
 [-num_routes_per_period <1-70>]
 [-router_id <a.b.c.d> ]
 [-router_id_step <integer>]
 [-send_type {multicast|broadcast}]
 [-session_type {ripv1|ripv2|ripvng}]
 [-time_period <0-5000>]
 [-update_interval <0-10000>]
 [-update_interval_offset <0-5>]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vlan_cfi {0|1} ]
 [-vlan_id <0-4095>]
 [-vlan_id_mode {fixed|increment}]
 [-vlan_id_step <1-4094>]
 [-vlan_user_priority <0-7>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_mode {fixed|increment}]
RIP Functions
933
 [-vlan_outer_id_step <1-4094>]
 [-vlan_outer_user_priority <0-7>]
 [-vpi <0-255>]
 [-vpi_step <0-255>]
 [-tunnel_handle <GRE_tunnel_handle>]
Arguments:
 -authentication_mode
 Specifies the authentication method to use. Spirent
 TestCenter supports MD5 Authentication for emulated RIPv2,
 and for RIPv1-compatible RIPv2 routers. A RIPv1-compatible
 is a RIPv2 router that broadcasts route updates. Possible
 values are null, text, and MD5.
 null - No authentication.
 text - The RIP-2 packet is authenticated by the receiving
 router if the password matches the authentication key
 that is included in the packet. This method provides
 little security because the authentication key can be
 learned by watching the RIP packets.
 MD5 - The RIP-2 packet contains a cryptographic checksum,
 but not the authentication key itself. The receiving
 router performs a calculation based on the MD5
 algorithm and an authentication key ID. The packet is
 authenticated if the calculated checksum matches. This
 method provides a stronger assurance that routing data
 originated from a router with a valid authentication
 key.
 -bfd_registration
 Specifies to enable or disable Bidirectional Forwarding
 Detection (BFD) registration. Possible values are 1 (enable)
 and 0 (disable). The default is 0.
 -count
 Defines the number of RIP routers to create on the
 interface. Possible values are 1 to 1000. The default is 1.
 This argument is not valid when -mode is set to
 "modify".
 -gateway_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address of the router.
 -gateway_ip_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address for multiple routers.
 This argument is used with the -gateway_ip_addr argument.
 -handle
 This argument is mandatory for modify,delete, active and inactive
 modes. When -mode is set to create, Spirent HLTAPI creates RIP
 over the provided device. (Please refer to the description of
 the -mode argument for more information)
 -intf_ip_addr
 Specifies the IP address of the interface for the RIP
 emulated router that will establish an adjacency with the
 DUT. The default for IPv4 (RIPv1 and RIPv2) is 192.85.1.3.
 The default for IPv6 (RIPng) is 2000:0:0:0:0:0:0:2. The
 -intf_ip_addr argument is mandatory for "-mode create".
 -intf_ip_addr_step
 Specifies the difference between interface IP addresses of
 consecutive routers when multiple RIP routers are created.
 Possible values range from 0 - 4294967295. The default for
 IPv4 (RIPv1 and RIPv2) is 0.0.0.1. The default for IPv6
 (RIPng) is 0:0:0:0:0:0:0:1.
RIP Functions
934
 -intf_prefix_length
 Specifies the prefix length on the emulated router, Possible
 values for IPv4 (RIPv1 and RIPv2) addresses range from 1 to
 31; the default is 24, Possible values for IPv6 addresses
 range from 1 to 128; the default is 64 for IPv6 (RIPng),
 -mac_address_start
 Specifies the MAC address for the first session created for
 the RIP configuration.
 -md5_key
 For RIPv2 only, specifies the MD5 password to use for
 authentication of RIPv2 messages. This is used as a password
 string for text authentication, or as a key string for
 MD5. If the SUT is configured to authenticate messages, this
 password must match the SUT password in order for the SUT to
 accept RIP packets. Using -md5_key is the same as using
 -password. The default is "Spirent".
 -md5_key_id
 Specifies the key ID for MD5 authentication. To use this
 argument, you must specify -authentication_mode MD5. MD5
 verifies the integrity of the communication, authenticates
 the origin, and checks for timeliness. This is an integer ID
 for the specified MD5 password. Possible values range from 0
 to 255. The default is 1.
 -mode
 Specifies the action to be performed. Possible values
 are create, modify, and delete. This argument is mandatory. The
 modes are described below:
 create - When -port_handle is provided, Spirent HLTAPI
 creates one or more emulated routers that are
 associated with the specified port. When -handle is
 provided, RIP will be created over the specified
 device. In this case, the following options will be
 obsoleted:
 -count
 -mac_address_start
 -intf_ip_addr
 -intf_ip_addr_step
 -intf_prefix_length
 -link_local_intf_ip_addr
 -link_local_intf_ip_addr_step
 -link_local_intf_prefix_len
 -gateway_ip_addr
 -gateway_ip_addr_step
 -router_id
 -router_id_step
 -vci
 -vci_step
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vpi
 -vpi_step
 -tunnel_handle
 -vlan_outer_id
 -vlan_outer_id_mode
 -vlan_outer_id_step
 -vlan_outer_user_priority
 modify - Changes the configuration for the RIP router
 specified in the -handle argument.
 delete - Deletes the RIP router specified in the -handle
RIP Functions
935
 argument.
 active - Enables the RIP router specified by the -handle
 argument. You must specify a valid RIP session handle.
 inactive - Disables the RIP router specified by the -handle
 argument. You must specify a valid RIP session handle.
 The configuration for the router is retained when it
 is inactive and is available as configured if the
 router is active.
 -neighbor_intf_ip_addr
 Specifies the neighbors (SUT) interface IP address for
 sending unicast packets. The default for IPv4 is 192.85.1.1.
 The default for Ipv6 is 2000:0:0:0:0:0:0:1. The
 -neighbor_intf_ip_addr argument is mandatory for "-mode
 create".
 -neighbor_intf_ip_addr_step
 Specifies the difference between the RIP neighbor's
 interface IP addresses when multiple RIP hosts are created.
 For Spirent TestCenter, this value is always 0.0.0.0 or
 0:0:0:0:0:0:0:0 (that is, the same address).
 -num_routes_per_period
 Specifies the number of routes to transmit every time
 period. Possible values range from 1 to 70. The
 default is 25. A value of 0 disables this feature and
 transmits all routes immediately for all updates.
 -password
 For RIPv2 only, specifies the MD5 password to use for
 authentication of RIPv2 messages. This is used as a password
 string for text authentication, or as a key string for
 MD5. If the SUT is configured to authenticate messages, this
 password must match the SUT password in order for the SUT to
 accept RIP packets. Using -password is the same as using
 -md5_key. The default is "Spirent".
 -port_handle
 The port on which to create the emulated RIP router. This
 handle is returned by the sth::connect function. When -mode is
 set to "create", it is mandatory that you specify -port_handle
 or -handle, but not both. When -mode is set to "modify",
 this argument is not valid. (Please refer to the
 description of the -mode argument for more information)
 -router_id
 Identifies the router ID of RIP session router. The router
 ID is a 32-bit value, represented in dot notation. Possible
 values range from 0.0.0.0 to 255.255.255.255. The default
 address is the IP address for -intf_ip_address. The
 -router_id argument is mandatory for "-mode create".
 -router_id_step
 The step size is the increment used to define router IDs for
 multiple sessions. Use the -router_id_step argument along
 with the -router_id and -count arguments to create routers
 on the interface. You must specify a step value when the
 -count value is greater than 1. Possible values range from
 0.0.0.1 to 255.255.255.255.The default is 0.0.0.1.
 -send_type
 Specifies which version of RIP to use for outgoing RIP
 packets. Possible values are multicast and broadcast. The
 default for RIPv1 is broadcast. The default for RIPv2 and
 RIPng is multicast.
 - broadcast: You can use broadcast addresses only for RIPv1.
 - multicast: You can use multicast addresses for both RIPv2
RIP Functions
936
 and RIPng.
 -session_type
 Specifies the RIP version to be used for each emulated
 router. Possible values are ripv1, ripv2, or ripng. The
 default is ripv2. This argument is mandatory for "-mode modify".
 -time_period
 The interval, in milliseconds, between successive RIP
 packets. Possible values range from 0 to 5000. The default
 is 0. A value of 0 disables this feature and transmits all
 routes immediately for all updates.
 -update_interval
 The time, in seconds, between transmitted update messages.
 Possible values range from 1 to 10000. The default is 30.
 -update_interval_offset
 The maximum update-interval variance, in seconds, between
 transmitted update messages. That is, the maximum of a random
 time interval used to add or subtract from the time at
 which updates are sent. Possible values range from 0 to 5.
 The default is 0.
 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
 range from 0 to 65535.
 -vci_step
 Specifies the step size in which the VCI value is
 incremented. Possible values range from 0 to 65535.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 0. If set to 0, it indicates
 the network is Ethernet. If set to 1, it indicates that
 Token Ring and packets are dropped by Ethernet ports.
 -vlan_id
 The VLAN ID of the first VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 100.
 -vlan_id_mode
 For multiple neighbor configurations, configures the VLAN ID
 mode to "fixed" or "increment." If you set this argument to
 "increment," then you must also specify the -vlan_id_step
 argument to indicate the step size. The default is "fixed".
 -vlan_id_step
 The step size by which the VLAN value is incremented when
 you set -vlan_id_mode to "increment." Possible values range
 from 0 to 4095. The default is 1. You must specify the step
 when the -count argument is greater than 1.
 -vlan_user_priority
 VLAN priority for the VLANs on this port. Possible values
 range from 0 to 7. The default is 7.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id.
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when router count
 is greater than 1. Possible values are:
RIP Functions
937
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values
 range from 1 to 4094. You must specify this step when
 you specify "increment" for the -vlan_outer_id_mode argument.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values are 0 to 255.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are 0 to 255.
 -tunnel_handle
 Specifies the GRE tunnel handle, an array value, initialized by
 the emulation_gre_config command. The router sends traffic through
 this tunnel.
Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent TestCenter.
 -expiration_interval
 -garbage_interval
 -interface_metric
 -receive_type
 -triggered_interval
 -update_mode
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle
 The handle(s) of the RIP router returned by the
 sth::emulation_rip_config function when you use -mode
 create to create a new RIP router. When you want to modify
 or delete the RIP router, you specify the handle as the
 value to the -handle argument.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_rip_config function creates, enables,
 modifies, deletes, or disables an emulated RIP router. Use the -mode
 argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)
RIP Functions
938
 Using RIP, a gateway host (with a router) sends its entire routing table
 (which lists all the other hosts it knows about) to its closest neighbor
 host every 30 seconds. The neighbor host in turn will pass the information
 on to its next neighbor and so on until all hosts within the network have
 the same knowledge of routing paths, a state known as network convergence.
 RIP uses a hop count as a way to determine network distance. (Other
 protocols use more sophisticated algorithms that include timing as well.)
 Each host with a router in the network uses the routing table information
 to determine the next host to route a packet to for a specified
 destination.
 When you create an RIP emulated router, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated router will use for
 RIP communication. (The port handle value is contained in the keyed list
 returned by the connect function.)
 In addition to specifying the port handle (-port_handle), you must also
 provide the following arguments when you create a RIP router:
 -intf_ip_addr
 -gateway_ip_addr
 -mode create
 -router_id
 When you create a RIP router, Spirent HLTAPI creates the router in
 memory and downloads the configuration to the card. To start the router,
 use the sth::emulation_rip_control function with -mode start.
 Once you start sessions, Spirent HLTAPI handles all of the message
 traffic for the emulated routers. During the test, use the
 sth::emulation_rip_control function to stop and re-start individual
 routers. After you have created the routers for your test, use the
 sth::emulation_rip_route_config function to set up the routes.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a RIP router on the specified port:
 sth::emulation_rip_config \
 -port_handle $port1 \
 -mode create \
 -count 1 \
 -authentication_mode "text" \
 -password "pass" \
 -send_type unicast \
 -mac_address_start 00:10:94:00:00:05 \
 -intf_ip_addr 23.24.0.2 \
 -neighbor_intf_ip_addr 23.24.0.1 \
 -neighbor_intf_ip_addr_step 0.1.0.0 \
 -gateway_ip_addr 23.24.0.1 \
 -gateway_ip_addr_step 0.0.0.1 \
 -intf_prefix_length 16 \
 -router_id 23.24.0.2 \
 -update_interval 30 \
 -update_interval_offset 5\
 -num_routes_per_period 30 \
 -time_period 30
 The above example produced the following output:
 {handle router1} {handles router1} {status 1}
 The following example enables RIP over a provided device:
 puts "Config LDP--------------------"
 set routerStatus [sth::emulation_ldp_config -mode create \
 -port_handle $port1Handle \
RIP Functions
939
 -intf_ip_addr 13.25.0.2\
 -loopback_ip_addr 13.25.0.1 \

 -gateway_ip_addr 13.25.0.1\
 -remote_ip_addr 13.25.0.2 \

 -graceful_recovery_timer 55 \
 -keepalive_interval 56 \
 -reconnect_time 57 \
 -recovery_time 58 \
 -egress_label_mode exnull \
 -label_adv on_demand \
 -bfd_registration 1 \
 ]
 puts "LDP: $routerStatus"
 keylget routerStatus handle router
 puts "Config RIP--------------------"
 set routerStatus [sth::emulation_rip_config \
 -handle $router\
 -mode create \
 -authentication_mode "null" \
 -send_type unicast \
 -neighbor_intf_ip_addr 13.25.0.1 \
 puts "RIP: $routerStatus"
 Sample output for example shown above:
 Config LDP--------------------
 LDP: {handle router1} {handles router1} {status 1}
 Config RIP--------------------
 RIP: {handle router1} {handles router1} {status 1}
 #### HLTAPI for Python ####
 The following example creates a RIP router on the specified port:
 device_ret0 = sth.emulation_rip_config (
 mode = 'create',
 authentication_mode = 'text',
 password = 'Spirent',
 port_handle = port_handle[0],
 router_id = '192.0.0.1',
 time_period = '10',
 session_type = 'ripv2',
 num_routes_per_period= '25',
 update_interval_offset= '1',
 update_interval = '30',
 send_type = 'multicast',
 mac_address_start = '00:10:94:00:00:01',
 intf_ip_addr = '192.85.1.3',
 gateway_ip_addr = '192.85.1.1',
 intf_ip_addr_step = '0.0.0.1',
 intf_prefix_length = '24');
Sample Output: {'status': '1', 'handles': 'router1', 'handle': 'router1'}
 #### HLTAPI for Perl ####
 The following example creates a RIP router on the specified port:
 my %device_ret0 = sth::emulation_rip_config (
 mode => 'create',
 authentication_mode => 'text',
 password => 'Spirent',
 port_handle => "$hport[1]",
 router_id => '192.0.0.1',
 time_period => '10',
 session_type => 'ripv2',
 num_routes_per_period=> '25',
 update_interval_offset=> '1',
 update_interval => '30',
RIP Functions
940
 send_type => 'multicast',
 mac_address_start => '00:10:94:00:00:01',
 intf_ip_addr => '192.85.1.3',
 gateway_ip_addr => '192.85.1.1',
 intf_ip_addr_step => '0.0.0.1',
 intf_prefix_length => '24');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'router1';
 $VAR3 = 'handles';
 $VAR4 = 'router1';
 $VAR5 = 'status';
 $VAR6 = '1';
Notes:
 None.
End of Procedure Header
sth::emulation_rip_control
Name:
 sth::emulation_rip_control
Purpose:
 Starts or stops a RIP router. You can also use this function to
 delete a route and to control route flapping.
Synopsis:
 sth::emulation_rip_control
 -mode {start|stop|restart}
 {-handle <rip_session_handle>|-port_handle <port_handle> } |
 -mode flap
 { -handle <rip_session_handle>|-port_handle <port_handle> }
 [-advertise <list of route handles>]
 [-withdraw <list of route handles> ]
 [-flap_count <1-4294967295>]
 [-flap_down_time <0-4294967295>]
 [-flap_interval_time <0-4294967295>]
 [-flap_routes <list of route handles>]
Arguments:
 -advertise
 Re-advertises routes in a route pool. This list should only
 be passed in the return from the
 sth::emulation_rip_route_config function. Use this optional
 argument only in start mode. For example:
 sth::emulation_rip_control -mode start \
 -handle router1 -advertise ripv4routeparams1
 -flap_count
 Specifies the number of flaps for each handle specified
 (-handle or -port_handle). Each flap includes one advertise
 and one withdraw. Possible values range from 1 to
 4294967295. This argument is mandatory for flap mode
 (-mode flap).
 -flap_down_time
 During a flapping operation, specifies the period (in
 seconds) during which the routes are withdrawn from their
 neighbors. Possible values range from 0 to 4294967295. The
 default is 0. This argument is mandatory for flap mode
RIP Functions
941
 (-mode flap).
 -flap_interval_time
 During a flapping operation, the time (in seconds) between
 flap cycles. Possible values range from 0 to 4294967295. The
 default is 0. This argument is mandatory for flap mode
 (-mode flap).
 -flap_routes
 Perform periodic route flapping on the specified routes. You
 must specify one or more route handles.
 -handle
 Identifies the session router on which to take the RIP
 action. The handle (or list of handles) is returned from the
 sth::emulation_rip_config function when creating a RIP
 router. You must specify either -handle or -port_handle but
 not both. This argument is mandatory when -mode is set to "flap".
 -mode
 Specifies the action to be taken. Possible values are start,
 stop, or restart either the RIP router or route flapping,
 This argument is mandatory.
 start - Starts either the RIP router with the specified
 handle (-handle) or route flapping, or starts all of
 the RIP routers associated with the port specified with
 -port_handle.
 Note: Start mode automatically sends out the advertise
 for any routes associated with the RIP router. Also,
 when any subsequent sth::emulation_rip_router_config
 function is called to create a new route after the
 router has been started, the newly-created route is
 automatically advertised as well.
 stop - Stops either the RIP router with the specified handle
 (-handle) or route flapping, or stops all of the RIP
 routers associated with the port specified with
 -port_handle.
 restart - Stops either the RIP router with the specified
 handle (-handle) or route flapping and then starts it
 again, or stops all RIP routers associated with the
 port specified with -port_handle. This is not a
 graceful restart.
 flap - Enables flapping for each route handle specified in
 the -flap_routes argument.
 -port_handle
 Specifies the handle for the port to be controlled. That is,
 the port on which all RIP routers or route flapping should
 be started, stopped, or restarted. You must specify either
 -handle or -port_handle but not both.
 -withdraw
 Specifies the list of route handles to remove (withdraw)
 from the route pool. This list should only be passed in the
 return from the sth::emulation_rip_route_config function.
 Use this optional argument only in start mode. For example:
 sth::emulation_rip_control -mode start \
 -handle router1 -withdraw ripv4routeparams1
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
RIP Functions
942
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_rip_control function controls the starting and
 stopping of RIP routers as well as deleting routes from the route pool.
Examples:
 #### HLTAPI for Tcl ####
 To start a RIP router:
 sth::emulation_rip_control -mode start \
 -handle router1
 To stop a RIP router:
 sth::emulation_rip_control -mode stop \
 -handle router1
 To restart a RIP router:
 sth::emulation_rip_control -mode restart \
 -handle router1
Sample Input:
 sth::emulation_rip_control \
 -mode start \
 -handle router1
Sample Output:
 {status 1}
 #### HLTAPI for Python ####
 To start a RIP router:
 ctrl_ret1 = sth.emulation_rip_control (
 port_handle = port_handle[0],
 mode = 'start');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 To start a RIP router:
 my %ctrl_ret1 = sth::emulation_rip_control (
 port_handle => "$hport[1]",
 mode => 'start');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None.
End of Procedure Header
sth::emulation_rip_route_config
Name:
 sth::emulation_rip_route_config
Purpose:
 Creates routes for or deletes routes from a RIP router. It
 also defines the characteristics of the routes that will be advertised at
RIP Functions
943
 the beginning of the session.
 When you add a route (see description for -mode), Spirent HLTAPI
 returns the route handle in a keyed list with "handles" as the key.
Synopsis:
 sth::emulation_rip_route_config
 -mode create -handle <rip_session_handle> |
 -mode {modify|delete} -route_handle <rip_route_pool_handle>]
 [-metric <1-16>]
 [-next_hop <a.b.c.d | a:b:c:d:e:f:g:h>]
 [-num_prefixes <1 - 1000000>]
 [-prefix_start <a.b.c.d | a:b:c:d:e:f:g:h>]
 [-prefix_step <1-128>]
 [-prefix_length <1-128>]
 [-route_tag <0 - 65535>]
Arguments:
 -handle
 Identifies the session router on which to create router
 pools or route ranges. This argument is mandatory when -mode
 is set to "create".
 -metric
 Indicates the cost to the destination network and is
 the hop count needed to reach the destination network.
 Possible values range from 1 to 16. The default is 1.
 -mode Specifies the action to take. Possible values are
 create, modify, and delete.
 create - Creates a new route pool or range on the port
 specified in the -handle argument, and then starts all
 of the routers under that port. You must specify the
 -handle argument.
 modify - Modifies the route specified in the -route_handle
 argument.
 delete - Removes the route from the RIP pool specified in
 the -route_handle argument.
 -next_hop
 Defines the IP address of the adjacent router to which the
 packet should be sent next. A value of 0.0.0.0 or
 0:0:0:0:0:0:0:0 indicates that the next hop is the
 advertising router. This value applies only to RIP v2 and
 RIPng. The default is 0.0.0.0 for RIPv2 and
 0:0:0:0:0:0:0:0 for RIPng.
 -num_prefixes
 Specifies the number of routes to advertise in update
 messages. Possible values range from 1 to 1000000. The
 default is 1.
 -prefix_length
 Set the width of the network mask. Possible values
 range from 1 to 128. The default is 24 for RIPv1 and RIPv2
 and 64 for RIPng.
 -prefix_start
 Specifies the IP address of the first route in the range to
 be advertised or removed by the emulated RIP router. This
 argument is mandatory.
 -prefix_step
 Defines the step interval for the next incremented route
 if -num_prefixes is set to greater than 1. Possible values
 range from 1 to 128. The default depends on the width of the
 network mask (see -prefix_length): 24 for RIPv1 and RIPv2
RIP Functions
944
 and 64 for RIPng.
 -route_handle
 Specifies the handle of the RIP route to be modified or
 removed. This argument is mandatory when -mode is set to
 either "modify" or "delete".
 -route_tag
 An arbitrary value associated with the routes in this range.
 Used by RIPv2 & RIPng to distinguish internal routes
 (learned from other protocols, such as BGP or OSPF)
 from external routes. This value causes the emulated RIP
 router to act as a router that runs RIP together with other
 protocols (such as BGP, OSPF).Possible values range from 0
 to 65535. The default is 0.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 router_handle
 A handle that identifies the routes created by the
 sth::emulation_rip_route_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_rip_route_config function creates and
 configures the routes. Use the -route_handle argument to identify
 the router for which to remove routes. (The router handle value is
 contained in the keyed list returned by the sth::emulation_rip_config
 function.) Use the -mode argument to specify the action to perform. See the
 -mode argument for a description of the actions.
 RIP uses a single routing metric (hop count) to measure the distance
 between the source and a destination network. Each hop in a path from
 source to destination is assigned a hop-count value, which is typically 1.
 When a router receives a routing update that contains a new or changed
 destination-network entry, the router adds one to the metric value
 indicated in the update and enters the network in the routing table. The IP
 address of the sender is used as the next hop.
 To create RIP routes, you supply the total number of routes, starting IP
 address, prefix length, and increment value:
 -num_prefixes - the number of routes in the range
 -prefix_start - the starting IP address for the first route in the range
 -prefix_step - the increment used to generate IP addresses for each route
 in the range
 -prefix_length - the width of the network mask
 -next_hop - the IP address increment used to generate IP
 addresses for each route in the range
 -metric - the hop count needed to reach the destination network
Examples:
 #### HLTAPI for Tcl ####
 The following example adds a route block to the routing table for
 the specified router:
 sth::emulation_rip_route_config \
 -mode create -handle router1 \
 -num_prefixes 2 \
 -prefix_start 12.12.13.12 \
 -prefix_step 1 \
 -prefix_length 32
 The above example produced the following output:
RIP Functions
945
 {route_handle ripv4routeparams1} {status 1}
 #### HLTAPI for Python ####
 The following example adds a route block to the routing table for
 the specified router:
 device_ret0_route0 = sth.emulation_rip_route_config (
 mode = 'create',
 handle = device_ret0_hdl,
 metric = '1',
 next_hop = '192.85.1.3',
 route_tag = '0',
 prefix_step = '1',
 num_prefixes = '1',
 prefix_start = '1.0.0.0',
 prefix_length = '24');
 Sample Output: {'status': '1', 'route_handle': 'ripv4routeparams1'}
 #### HLTAPI for Perl ####
 The following example adds a route block to the routing table for
 the specified router:
 my %device_ret0_route0 = sth::emulation_rip_route_config (
 mode => 'create',
 handle => "$device_ret0_hdl",
 metric => '1',
 next_hop => '192.85.1.3',
 route_tag => '0',
 prefix_step => '1',
 num_prefixes => '1',
 prefix_start => '1.0.0.0',
 prefix_length => '24');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'route_handle';
 $VAR4 = 'ripv4routeparams1';
Notes:
 None.
End of Procedure Header
sth::emulation_rip_info
Name:
 sth::emulation_rip_info
Purpose:
 Spirent Extension (for Spirent HLTAPI only).
 Returns statistics about the RIP configuration settings, routing
 setup, and emulation for the specified RIP router.
Synopsis:
 sth::emulation_rip_info
 -handle <rip_handle>
Arguments:
 -handle
 Specifies the router for which you want information.
Return Values:
RIP Functions
946
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null.
 router_state
 The state of the emulated RIP router on the
 current port:
 No state.
 CLOSED The emulated router has been created but
 not yet started.
 OPEN The emulated router has been created and
 started.
 update_interval_offset
 Maximum update-interval variance, in seconds,
 between transmitted update messages.
 session_type
 The RIP version used for the router. Possible
 values are ripv1, ripv2, and ripng.
 neighbor_intf_ip_addr
 The difference between the RIP neighbor's
 interface IP addresses when multiple RIP hosts are
 created.
 intf_ip_address
 IP address of the port on the interface card:
 a.b.c.d.
 gateway_ip_addr
 IPv4 gateway address of the router.
 router_id
 The router ID of the RIP session router.
 intf_prefix_length
 The prefix length on the emulated router.
 mac_address_start
 Starting MAC address
 time_period
 The interval, in milliseconds, between successive
 RIP packets.
 send_type
 Version of RIP to use for outgoing RIP packets.
 num_routes_per_period
 Number of routes to transmit every time period.
 update_interval
 Number of seconds between transmitted update
 messages.
 password
 (For RIPv2 only) The MD5 password used to
 authenticate RIPv2 messages
 md5_key
 Key ID for MD5 authentication.
RIP Functions
947
 authentication_mode
 Authentication method used: , text, or MD5.
 route_tag
 Value used by RIPv2 and RIPng to distinguish
 internal routes from external routes.

 metric
 Value indicating the cost to the destination
 network. Also, the hop count needed to reach the
 destination network.
 next_hop
 IP address of the adjacent router to which the
 packet should be sent next.
 num_prefixes
 Number of routes to advertise in update messages.

 prefix_start
 Starting IP address for the first route in the
 range.
 prefix_step
 Increment used to generate IP addresses for each
 route in the range.
 prefix_length
 Width of the network mask
 tx_advertised_update_count
 Number of advertised routes sent by the emulated
 router.
 rx_withdrawn_update_count
 Number of unreachable (metric 16) routes received
 by the emulated router.
 rx_advertised_update_count
 Number of advertised routes received by the
 emulated router.
Description:
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples:
 See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input:
 sth::emulation_rip_info -handle router1
 Sample Output:
 {router_state open} {update_interval_offset 12} {session_type ripv2}
 {neighbor_intf_ip_addr 23.24.0.1} {time_period 10} {send_type unicast}
 {num_routes_per_period 11} {update_interval 13} {password pass} {md5_key
 20} {authentication_mode MD5} {route_tag 0} {metric 1} {next_hop null}
 {num_prefixes 2} {prefix_start 12.12.13.12} {prefix_step 1} {prefix_length
 32} {tx_advertised_update_count 10.000000} {rx_withdrawn_update_count
 0.000000} {rx_advertised_update_count 0.000000} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
RIP Functions
948
 results_ret1 = sth.emulation_rip_info (
 handle = device);
 Sample Output:
 {'router_id': '192.0.0.1', 'status': '1', 'num_routes_per_period': '25',
 'session_type': 'ripv2', 'metric': '1 2', 'intf_ip_addr': '192.85.1.3',
 'md5_key': '1', 'mac_address_start': '00:10:94:00:00:01', 'next_hop': '192.85.1.3
 192.85.1.3', 'rx_advertised_update_count': '0', 'gateway_ip_addr': '192.85.1.1',
 'authentication_mode': 'SIMPLE', 'time_period': '10', 'password': 'Spirent',
 'prefix_step': '1 1', 'intf_prefix_length': '24', 'send_type': 'multicast',
 'route_tag': '0 1', 'bfd_registration': 'false', 'prefix_start': '1.0.0.0
 192.0.1.0', 'update_interval_offset': '1', 'num_prefixes': '1 1',
 'rx_withdrawn_update_count': '0', 'neighbor_intf_ip_addr': '224.0.0.9',
 'router_state': 'none', 'prefix_length': '24 24', 'update_interval': '30',
 'tx_advertised_update_count': '0'}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret2 = sth::emulation_rip_info (
 handle => "$device");
 Sample Output:
 $VAR1 = 'neighbor_intf_ip_addr';
 $VAR2 = 'null';
 $VAR3 = 'intf_prefix_length';
 $VAR4 = '64';
 $VAR5 = 'next_hop';
 $VAR6 = 'fe80::1:1';
 $VAR7 = 'num_prefixes';
 $VAR8 = '1';
 $VAR9 = 'status';
 $VAR10 = '1';
 $VAR11 = 'metric';
 $VAR12 = '3';
 ...
Notes:
 None
End of Procedure Header
RSVP Functions
949
RSVP Functions
Functions:
sth::emulation_rsvp_config
sth::emulation_rsvp_control
sth::emulation_rsvp_info
sth::emulation_rsvp_tunnel_config
sth::emulation_rsvpte_tunnel_control
sth::emulation_rsvp_tunnel_info
sth::emulation_rsvp_config
Name:
 sth::emulation_rsvp_config
Purpose:
 Creates, enables, modifies, or deletes an emulated resource reservation
 setup protocol (RSVP) router on a Spirent HLTAPI chassis. RSVP is not a
 routing protocol; RSVP works in conjunction with routing protocols and
 installs the equivalent of dynamic access lists along the routes that
 routing protocols calculate.
 RSVP is a resource reservation setup protocol that enables Internet
 applications to obtain differing qualities of service (QoS) for their data
 flows. RSVP is used by routers to request a specific quality of service
 from the network for particular data flows. It is also used to establish
 and maintain "resource reservations" across a network.
Synopsis:
 sth::emulation_rsvp_config
 -mode create {-port_handle <port_handle> | -handle <device_handle>} |
 -mode {modify|delete|enable|disable|active|inactive}
 -handle <rsvp_session_handle>}
 [-bfd_registration {1|0}]
 [-bundle_interval <1-2147483647>]
 [-bundle_msgs {1|0} ]
 [-cfi {1|0} ]
 [-count <integer> ]
 [-egress_label_mode {nextlabel|imnull|exnull} ]
 [-gateway_ip_addr { ip } ]
 [-gateway_ip_addr_step <a.b.c.d> ]
 [-graceful_restart {1|0}]
 [graceful_restart_recovery_time <0-65535> ]
 [graceful_restart_restart_time <0-65535> ]
 [-hello_interval <1-65536> ]
 [-hello_msgs {1|0} ]
 [-intf_ip_addr { ip } ]
 [-intf_ip_addr_step <a.b.c.d> ]
 [-intf_prefix_length <1-32> ]
 [-mac_address_start <aa:bb:cc:dd:ee:ff>]
 [-max_label_value <1-1048575> ]
 [-min_label_value <1-1048575> ]
 [-neighbor_intf_ip_addr { ip } ]
 [-neighbor_intf_ip_addr_step <a.b.c.d>]
 [-rapid_retx_delta <1-65535> ]
 [-rapid_retx_interval <integer>]
 [-rapid_retx_limit <0-10 > ]
 [-record_route {1|0} ]
 [-recovery_time <0-65535> ]
 [-refresh_interval <1-4294967295> ]
 [-refresh_reduction {1|0} ]
 [-reliable_delivery {1|0} ]
 [-restart_time <0-65535> ]
 [-resv_confirm {1|0} ]
RSVP Functions
950
 [-srefresh_interval <1-2147483647> ]
 [-summary_refresh {1|0} ]
 [-transit {RSVP_TRANSIT_ACCEPT_CONFIGURED |
 RSVP_TRANSIT_ACCEPT_ALL} ]
 [-user_priority <0-7> ]
 [-vci <0-65535>]
 [-vci_step <0-65535>]
 [-vlan_cfi {0|1} ]
 [-vlan_id <0-4095> ]
 [-vlan_id_mode {fixed|increment} ]
 [-vlan_id_step <1-4094> ]
 [-vlan_user_priority <0-7> ]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_mode {fixed|increment}]
 [-vlan_outer_id_step <1-4094>]
 [-vlan_outer_user_priority <0-7>]
 [-vpi <0-255>]
 [-vpi_step <0-255>]
 [-tunnel_handle <GRE_tunnel_handle>]
Arguments:
 -bfd_registration
 Specifies to enable or disable Bidirectional Forwarding
 Detection (BFD) registration. Possible values are 1 (enable)
 and 0 (disable). The default is 0.
 -bundle_interval
 Specifies the bundle time interval in milliseconds. Messages
 are held in a buffer and are sent out as a bundle after the
 interval expires or when the message size exceeds the MTU.
 -bundle_msgs
 Enables or disables message bundling. If set to 1, combines
` multiple RSVP messages into a single PDU to reduce
 processing overhead and bandwidth consumption.
 -cfi
 This argument has been replaced with "-vlan_cfi". The -cfi
 argument is supported but may not be supported in
 future versions. Therefore, for new scripts, use -vlan_cfi
 instead.
 -count
 Defines the number of RSVP routers to create on the
 interface. Possible values are 0 to <max_int>. The default
 is 1.
 -egress_label_mode
 Defines the label advertised if the emulated router is at
 the tail-end of the tunnel. This label is advertised in
 response to a PATH message with a destination IP address
 matching the router tester IP address. Possible values are
 nextlabel, exnull, and imnull. The default is nextlabel.
 These values are described below:
 nextlabel - Advertise the next available label.
 For each FEC, the LSR advertises the next available
 label from the label pool (Min Label to Max Label).
 exnull - Advertise label 9, the explicit null label.
 A zero (IPv4 datagram) or two (IPv6 datagram) MPLS
 label value indicates to the penultimate router that it
 is to pop the label upon receipt and forward the IP
 packet to the egress router for Layer 3 forwarding.
 Explicit null instructions are signaled to the
 penultimate router by the egress router.
 imnull - Advertise label 3, the implicit null label.
 This label value (three) is used in an LDP or RSVP
 packet to enable penultimate hop label popping. The
 egress LSR signals a request to its upstream neighbor 
RSVP Functions
951
 to pop the top label in the stack and forward the rest
 of the packet. This value does not appear in the
 encapsulation.
 -gateway_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address of the router.
 -gateway_ip_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address for multiple routers.
 Use this argument with the -gateway_ip_addr argument.
 -graceful_restart
 Enables or disables graceful restart. Possible values are 1
 (enable) and 0 (disable). If set to 1, enables graceful
 restart which adds a RESTART_CAP object in HELLO messages.
 Enabling graceful restart will automatically enable HELLO
 messages (see -hello_msgs).
 -graceful_restart_recovery_time
 Specifies the length of time (in milliseconds) that the
 sender desires for the recipient to re-synchronize RSVP and
 MPLS forwarding state with the sender after the re-
 establishment of Hello synchronization. Possible values are
 0 to 65535. A value of zero (0) indicates that MPLS
 forwarding state was not preserved across a particular
 reboot.
 -graceful_restart_restart_time
 Specifies the sum of the time, in milliseconds, it takes the
 sender of the object to restart its RSVP component (to the
 point where it can exchange RSVP HELLO with its neighbors)
 and the communication channel that is used for RSVP
 communication. Possible values are 0 to 65535. The default
 is 5, which is used to configure HELLO message generation
 and graceful restart capability.
 -handle
 Specifies the RSVP handle to use.
 This argument is mandatory for modify, delete, enable, disable,
 active and inactive modes. When -mode is set to create, Spirent
 HLTAPI creates RSVP over the provided device. (Please refer to
 the description of the -mode argument for more information)
 -hello_interval
 Specifies the amount of time, in milliseconds, between RSVP
 hello messages. Possible values range from 1 to 65536. The
 default is 5000.
 -hello_msgs
 Enables or disables the creation of HELLO messages and
 graceful restart capability. Possible values are 0 (disable)
 and 1 (enable). The default is 0.
 -intf_ip_addr
 Specifies the IP address of the interface for the RSVP
 emulated router that will establish an adjacency with the
 DUT. The default for IPv4 is 192.85.1.3.
 -intf_ip_addr_step
 Specifies the difference between interface IP addresses of
 consecutive routers when multiple RSVP routers are created.
 The default increment is 1. The value must be in IPv4
 format.
 -intf_prefix_length
 Specifies the prefix length on the emulated router, Possible
 values for IPv4 addresses range from 1 to 32; the default is
 24.
RSVP Functions
952
 -mac_address_start
 Initial MAC address of the interfaces created for the RSVP
 neighbor configuration.
 -max_label_value
 Specifies the maximum LSP label advertised by the peer.
 Used to configure refresh reduction capabilities per
 RFC 2961. Possible values range from 1 to 1048575. The
 default value is 65535.
 -min_label_value
 Specifies the minimum LSP label advertised by the peer. Used
 to configure refresh reduction capabilities per RFC 2961.
 Possible values range from 16 to 1048575. The default value
 is 16.
 -mode
 Specifies the action to perform. Possible values are create,
 enable, disable, modify, reset, active and inactive. This
 argument is mandatory. The modes are described below:
 create - Create and start the RSVP router.
 When -port_handle is provided, Spirent HLTAPI
 creates one or more emulated routers that are associated
 with the specified port.
 When -handle is provided, RSVP will be created over
 the specified device. In this case, the following options
 will be obsoleted:
 -count
 -cfi
 -intf_ip_addr
 -intf_ip_addr_step
 -intf_prefix_length
 -user_priority
 -gateway_ip_addr
 -gateway_ip_addr_step
 -loopback_ip_addr
 -vci
 -vci_step
 -vlan_cfi
 -vlan_id
 -vlan_id_mode
 -vlan_id_step
 -vlan_user_priority
 -vpi
 -vpi_step
 -tunnel_handle
 -vlan_outer_id
 -vlan_outer_id_mode
 -vlan_outer_id_step
 -vlan_outer_user_priority
 enable - Create and start the RSVP router.
 disable - Delete the RSVP router identified by the -handle
 argument, or delete all the RSVP routers associated
 with the specified port.
 modify - Change the configuration for the RSVP router
 identified by the -handle argument.
 delete - Deletes the RSVP router identified by the -handle
 argument, or delete all the RSVP routers associated
 with the specified port.
 active - Enables the RSVP router specified by the -handle
 argument. You must specify a valid RSVP session handle.
 inactive - Disables the RSVP router specified by the -handle
RSVP Functions
953
 argument. You must specify a valid RSVP session handle.
 The configuration for the router is retained,
 when it is inactive and is available as configured if the
 router is active.
 -neighbor_intf_ip_addr
 Specifies the IP address of the interface for the RSVP
 neighbor (next hop) that will establish an adjacency with
 the DUT. The default for IPv4 is 192.85.1.3.
 -neighbor_intf_ip_addr_step
 Specifies the difference between interface IP addresses of
 consecutive routers when multiple RSVP routers are created.
 The default increment is 1. The value must be in IPv4
 format.
 -port_handle
 The port on which to create the emulated RSVP router. The
 port handle is returned by the sth::interface_config
 function.
 -rapid_retx_delta
 Specifies the rapid retransmission delta, which is the speed
 at which the retransmission interval is increased. The ratio
 of two successive retransmission intervals is (1 + Delta).
 Possible values range from 1 to 65535. The default is 1.
 -rapid_retx_interval
 Specifies, in milliseconds, the rapid retransmission
 interval, which is the initial retransmission interval for
 unacknowledged messages. Possible values range from 1 to
 2147483647. The default is 500.
 -rapid_retx_limit
 Specifies the rapid retransmission limit, which is the
 maximum number of times a message can be transmitted without
 being acknowledged. Possible values range from 0 to 10.
 The default is 3.
 -record_route
 Enables or disables whether to include the RECORD_ROUTE
 object in the Path message. Possible values are 0 (disable)
 and 1 (enable). The default is 0.
 -recovery_time
 This argument has been replaced with
 "-graceful_restart_recovery_time". The -recovery_time
 argument is supported but may not be supported
 in future versions. Therefore, for new scripts, use
 -graceful_restart_recovery_time instead.
 -refresh_interval
 Specifies the amount of time, in milliseconds, between
 sending RSVP messages to refresh state. Possible values
 range from 1 to 2147483647. The default is 30000 (30
 seconds).
 -refresh_reduction
 Enables or disables refresh reduction. Possible values are 0
 (disable) and 1 (enable). The default is 0. The reliable
 messages, bundle messages, and summary refresh messages are
 only meaningful when refresh reduction is enabled.
 -reliable_delivery
 Enables or disables transmitting message IDs. Possible
 values are 0 (disable) and 1 (enable). The default is 0.
 If set to 1, RSVP sends message IDs and acknowledgements for
 each message received. If set to 0, it does not send message
 IDs.
 -restart_time
RSVP Functions
954
 This argument has been replaced with
 "-graceful_restart_restart_time". The -restart_time argument
 is supported but may not be supported in future
 versions. Therefore, for new scripts, use
 -graceful_restart_restart_time instead.
 -resv_confirm
 Enables or disables whether to require a reservation
 confirmation message. Possible values are 0 (disable) and 1
 (enable). The default is 0. If set to 1, enables and
 requires RESV confirmation with final parameters from the
 egress router. If set to 0, does not require sending RESV
 confirmation messages.
 -srefresh_interval
 Specifies the time interval, in milliseconds, to gather
 refresh messages that would have been sent out individually.
 Messages are sent out as a single refresh message upon
 interval expiration or when the message size exceeds the
 MTU. Possible values range from 1 to 2147483647. The default
 is 30000 (30 seconds).
 -summary_refresh
 Enables or disables summary refresh. Possible values are 0
 (disable) and 1 (enable). The default is 0. You must also
 enable -refresh_reduction when you use this argument.
 -transit
 Spirent Extension (for Spirent HLTAPI only).
 This argument was added by Spirent to specify whether the
 router accepts all the PATH messages or only configured PATH
 messages. This argument enables Spirent HLTAPI to run
 multiple sessions per port. Possible values are:
 RSVP_TRANSIT_ACCEPT_ALL - the router accepts any PATH
 message; each port can have only one
 RSVP_TRANSIT_ACCEPT_ALL router.
 RSVP_TRANSIT_ACCEPT_CONFIGURED - the router accepts
 configured PATH messages. Each port can have many
 RSVP_TRANSIT_ACCEPT_CONFIGURED router.
 The default is RSVP_TRANSIT_ACCEPT_CONFIGURED.
 -user_priority
 This argument has been replaced with "-vlan_user_priority".
 The -user_priority argument is supported but may
 not be supported in future versions. Therefore, for new
 scripts, use -vlan_user_priority instead.
 -vci
 Specifies the VCI of the first ATM PVC pool. Possible values
 range from 0 to 65535.
 -vci_step
 Specifies the step size in which the VCI value is
 incremented. Possible values range from 0 to 65535.
 -vlan_cfi
 Sets the canonical format indicator field in VLAN for the
 emulated router node. Possible values are 0 (Ethernet) and 1
 (Token Ring). The default is 1. If set to 0, it indicates
 the network is Ethernet. If set to 1, it indicates that
 Token Ring and packets are dropped by Ethernet ports.
 -vlan_id
 The VLAN ID of the first VLAN sub-interface. Used to
 configure refresh reduction capabilities per RFC 2961.
 Possible values range from 0 to 4095. The default is 1.
RSVP Functions
955
 -vlan_id_mode
 Specifies VLAN ID assignment for multiple router
 configurations when -count is greater than 1. Valid values
 are "fixed" or "increment." If you specify "fixed," all of
 the routers will be assigned the same VLAN ID (the value of
 the -vlan_id argument). If you specify "increment", then
 Spirent HLTAPI assigns unique VLAN IDs. When you use
 increment mode, you must also specify the -vlan_id_step
 argument to define the increment value.
 -vlan_id_step
 The value that Spirent HLTAPI uses to increment the VLAN
 ID. You must specify this step when you use specify
 "increment" for the -vlan_id_mode argument and the router
 count (-count) is greater than 1. Possible step values range
 from 1 to 4094.
 -vlan_user_priority
 VLAN user priority assigned to emulated router node.
 Possible values range from 0 to 7. The default is 0.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of VLAN sub-interface. Possible values
 range from 0 to 4095. The default is 1. When you use
 -vlan_outer_id, you must specify -vlan_id.
 -vlan_outer_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter assigns VLAN tags to
 packets in the specified outer header when router count
 is greater than 1. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 The fixed outer VLAN ID is the value of the
 -vlan_outer_id argument.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_outer_id_step argument.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_outer_id) for subsequent packets. Possible values
 range from 1 to 4094. You must specify this step when
 you specify "increment" for the -vlan_outer_id_mode argument.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. The default is 0.
 -vpi
 Specifies the VPI of the first ATM PVC pool (for an ATM
 connection). Possible values are 0 to 255.
 -vpi_step
 Specifies the step size in which the VPI value is
 incremented. Possible values are 0 to 255.
 -tunnel_handle
 Specifies the GRE tunnel handle, an array value, initialized
 by the emulation_gre_config command. The router sends traffic
 through this tunnel.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -hello_retry_count
RSVP Functions
956
 -loopback_ip_addr
 -max_ack_delay
 -max_lsps
 -mtu
 -path_state_refresh_timeout
 -path_state_timeout_count
 -precedence
 -refresh_retry_count
 -resv_state_refresh_timeout
 -resv_state_timeout_count
 -router_alert
 -timeout
 -ttl
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles A list of RSVP handles that identify the routers created by the
 sth::emulation_rsvp_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_rsvp_config function creates, enables, disables,
 modifies, or deletes an emulated RSVP router. Use the -mode
 argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)
 RSVP has three basic functions: path setup and maintenance, path tear down,
 and error signaling.
 When you create an emulated router, use the -port_handle argument to
 specify the Spirent HLTAPI port that the emulated router will use for
 RSVP communication. (The port handle value is contained in the keyed list
 returned by the connect function.)
 In addition to specifying the port, you must also provide one or more of
 the following pieces of information when you create an RSVP router:
 - The source IP address for the emulated router (the -intf_ip_addr
 argument)
 - The destination IP address for the emulated router (the
 -neighbor_intf_ip_addr argument)
 - The port on which to create the emulated router (the -port_handle
 argument)
 An RSVP session is a data flow with a particular destination
 and transport-layer protocol. When you create an RSVP router, Spirent
 HLTAPI starts the router communication.
 Refresh messages are sent to both synchronize state between RSVP
 neighbors and to recover from lost RSVP messages.
 There are several RSVP message types but the two most important are "path"
 and "reservation" messages. Reservation messages are also referred to as
 "RESV" messages. Path messages are used to set up and maintain (that is,
 refresh) reservations. RESV messages are used to set up and maintain the
 "resources requested" as well as "refresh" reservations. An RSVP router
 sends a path message every 30 seconds (30 seconds is the default refresh
 interval) to say "Maintain my reserved resources. I still need them." It
 sends an RESV message every 30 seconds to say "I will hold this reservation
 for you."
 Once you start sessions by creating routers, Spirent HLTAPI handles all
 of the message traffic for the emulated RSVP routers. During the test, use
RSVP Functions
957
 the sth::emulation_rsvp_control function to stop and re-start individual
 RSVP routers.
Example:
 #### HLTAPI for Tcl ####
 The following example creates a RSVP router:
 sth::emulation_rsvp_config -mode create \
 -port_handle $port_handle($device,$port1) \
 -count 1 \
 -egress_label_mode nextlabel \
 -hello_interval 5000 \
 -hello_msgs 1 \
 -intf_ip_addr 90.0.0.3 \
 -intf_ip_addr_step 0.0.0.1 \
 -intf_prefix_length 24 \
 -max_label_value 1048575 \
 -min_label_value 16 \
 -neighbor_intf_ip_addr 90.0.0.4 \
 -neighbor_intf_ip_addr_step 0.0.0.1 \
 -gateway_ip_addr 90.0.0.4 \
 -gateway_ip_addr_step 0.0.0.1 \
 -rapid_retx_delta 1 \
 -rapid_retx_interval 500 \
 -rapid_retx_limit 3 \
 -record_route 0 \
 -refresh_interval 30000 \
 -refresh_reduction 1 \
 -reliable_delivery 1 \
 -resv_confirm 1 \
 -srefresh_interval 30000
 The following example enables RSVP over a provided device:
 puts "Config LDP--------------------"
 set routerStatus [sth::emulation_ldp_config -mode create \
 -port_handle $port1Handle \
 -intf_ip_addr 13.25.0.2\
 -loopback_ip_addr 13.25.0.1 \

 -gateway_ip_addr 13.25.0.1\
 -remote_ip_addr 13.25.0.2 \
 -graceful_recovery_timer 55 \
 -keepalive_interval 56 \
 -reconnect_time 57 \
 -recovery_time 58 \
 -egress_label_mode exnull \
 -label_adv on_demand \
 -bfd_registration 1 \
 ]
 puts "LDP: $routerStatus"
 keylget routerStatus handle router
 puts "Config RSVP--------------------"
 set routerStatus [sth::emulation_rsvp_config
 -mode create \
 -handle $router\
 -recovery_time 55 \
 -bfd_registration 1 \
 ]
 puts "RSVP: $routerStatus"
Sample output for example shown above:
 Config LDP--------------------
 LDP: {handle router1} {handles router1} {status 1}
 Config RSVP--------------------
 RSVP: {handle router1} {handles router1} {status 1}
Sample Output:
 {{handles router1} {status 1}}
RSVP Functions
958
 #### HLTAPI for Python ####
 The following example creates a RSVP router:
 device_ret0 = sth.emulation_rsvp_config (
 mode = 'create',
 record_route = '0',
 port_handle = port_handle[0],
 vlan_cfi = '0',
 vlan_id = '100',
 vlan_user_priority = '7',
 user_priority = '7',
 hello_interval = '1000',
 resv_confirm = '0',
 graceful_restart_recovery_time= '0',
 rapid_retx_delta = '1',
 graceful_restart_restart_time= '3000',
 rapid_retx_interval = '500',
 min_label_value = '16',
 max_label_value = '65535',
 refresh_interval = '30000',
 restart_time = '3000',
 hello_msgs = '0',
 neighbor_intf_ip_addr= '192.85.1.1',
 graceful_restart = '0',
 recovery_time = '0',
 rapid_retx_limit = '3',
 reliable_delivery = '0',
 egress_label_mode = 'nextlabel',
 transit = 'RSVP_TRANSIT_ACCEPT_CONFIGURED',
 mac_address_start = '00:10:94:00:00:05',
 intf_ip_addr = '192.85.1.5',
 gateway_ip_addr = '192.85.1.1',
 intf_prefix_length = '24');
Sample Output: {'status': '1', 'handles': 'router1', 'handle': 'router1'}
 #### HLTAPI for Perl ####
 The following example creates a RSVP router:
 my %device_ret0 = sth::emulation_rsvp_config (
 mode => 'create',
 record_route => '0',
 port_handle => "$hport[1]",
 vlan_cfi => '0',
 vlan_id => '100',
 vlan_user_priority => '7',
 user_priority => '7',
 hello_interval => '1000',
 resv_confirm => '0',
 graceful_restart_recovery_time=> '0',
 rapid_retx_delta => '1',
 graceful_restart_restart_time=> '3000',
 rapid_retx_interval => '500',
 min_label_value => '16',
 max_label_value => '65535',
 refresh_interval => '30000',
 restart_time => '3000',
 hello_msgs => '0',
 neighbor_intf_ip_addr=> '192.85.1.1',
 graceful_restart => '0',
 recovery_time => '0',
 rapid_retx_limit => '3',
 reliable_delivery => '0',
 egress_label_mode => 'nextlabel',
 transit => 'RSVP_TRANSIT_ACCEPT_CONFIGURED',
 mac_address_start => '00:10:94:00:00:05',
 intf_ip_addr => '192.85.1.5',
 gateway_ip_addr => '192.85.1.1',
 intf_prefix_length => '24');

Sample Output: 
RSVP Functions
959
 $VAR1 = 'handle';
 $VAR2 = 'router2';
 $VAR3 = 'handles';
 $VAR4 = 'router2';
 $VAR5 = 'status';
 $VAR6 = '1';

Notes:
 1) RSVP needs to periodically refresh its reservations in the
 network by re-signaling them.
 2) With RSVP, a reservation goes away only if it is explicitly
 removed from the network by RSVP or if the reservation "times
 out".
 3) RSVP does not have an explicit neighbor discovery mechanism like
 LDP, which means that if RSVP is enabled on two different
 routers, they will not see each other as RSVP neighbors until
 they receive path and RESV messages from one another.
 4) All path messages have a "Router Alert" bit that when set
 instructs each router along the LSP to examine and process the
 message.
End of Procedure Header
sth::emulation_rsvp_control
Name:
 sth::emulation_rsvp_control
Purpose:
 Starts or stops RSVP routers.
Synopsis:
 sth::emulation_rsvp_control
 -mode {stop|start|restart}
 [-handle <router_handle>]
 [-port_handle <port_handle>]
Arguments:
 -handle
 Specifies the handle for the router to be controlled. That
 is, the router to start, stop, or restart.
 -mode
 Specifies the action to be taken. Possible values are
 stop, start, or restart the RSVP router. This argument is
 mandatory.
 stop - Stops the router for the specified router or port.
 start - Starts the router for the specified router or port.
 restart - Stops and then starts the router for the
 specified router or port.
 -port_handle
 Specifies the handle for the port to be controlled. That is,
 the port on which all RSVP routers should be started,
 stopped, or restarted.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
RSVP Functions
960
 -flap_count
 -flap_down_time
 -flap_interval_time
 -flap_tunnels
 -restore
 -teardown
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_rsvp_control function controls the starting and
 stopping of RSVP routers, and restoring and tearing down of RSVP tunnels.
 When you call the sth::emulation_rsvp_control function, you specify either
 a handle or port handle. Spirent HLTAPI applies the specified action to
 either the specified RSVP router or to all of the RSVP routers associated
 with the specified port.
Examples:
 #### HLTAPI for Tcl ####
 To start an RSVP router:
 sth::emulation_rsvp_control -mode start \
 -handle $rsvp_handle(rsvp1) \
 To start the RSVP router(s) on the specified port:
 sth::emulation_rsvp_control -mode start \
 -port_handle $port_handle(port1) \
 To stop an RSVP router:
 sth::emulation_rsvp_control -mode stop \
 -handle $rsvp_handle(rsvp1)
 To restart the RSVP router(s) on the specified port:
 sth::emulation_rsvp_control -mode restart\
 -port_handle $port_handle(port1)
Sample Output:
 {status 1}
 #### HLTAPI for Python ####
 To start an RSVP router:
 ctrl_ret1 = sth.emulation_rsvp_control (
 handle = device_list,
 mode = 'start');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 To start an RSVP router:
 my %ctrl_ret1 = sth::emulation_rsvp_control (
 handle => "$device_list",
 mode => 'start');
Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes: 
RSVP Functions
961

End of Procedure Header
sth::emulation_rsvp_info
Name:
 sth::emulation_rsvp_info
Purpose:
 Returns information about the RSVP configuration.
Synopsis:
 sth::emulation_rsvp_info
 -handle <rsvp_handle>
 -mode {stats|settings}
Arguments:
 -handle The router for which you want information.
 -mode Specifies the kind of information you want to see. Possible
 values are stats and settings. The default is stats.
 stats - returns transmitted and received statistics for
 different RSVP messages.
 settings - returns the IP address of the specified RSVP
 handle.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 stats Retrieves the IP address of the specified handle,
 the number of reserved and path messages sent and
 received, and information about the LSPs (see list
 below).
 settings Retrieves the IP address of the specified RSVP router
 and of its neighbor that will establish an adjacency to
 the DUT (see list below).
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null
 The following keys are returned when you specify -mode stats:
 ingress_resvconf_tx Number of reserve confirmation messages sent.
 ingress_patherr_tx Number of path error messages sent.
 ingress_resverr_rx Number of reserve error messages received.
 ingress_pathtear_tx Number of path tear messages sent.
 ingress_resvtear_rx Number of reserve tear messages received.
 egress_resvconf_rx Number of reserve confirmation messages received.
 egress_patherr_rx Number of path error messages received.
RSVP Functions
962
 egress_resverr_tx Number of reserve error messages sent.
 egress_pathtear_rx Number of path tear messages received.
 egress_resvtear_tx Number of reserve tear messages sent.
 lsp_count Number of LSPs.
 lsp_created Number of LSPs up.
 lsp_deleted Number of LSPs down.
 lsp_connecting Number of LSPs connecting. (for Spirent HLTAPI only)
 hellos_rx Number of hello messages received.
 hellos_tx Number of hello messages sent.
 min_setup_time Minimum LSP setup time.
 max_setup_time Maximum LSP setup time.
 msg_rx Number of messages received.
 msg_tx Number of messages sent.
 num_lsps_setup Number of LSPs set up.
 ingress_path_tx Number of path messages sent.
 egress_path_rx Number of reserve messages received.
 ingress_resv_rx Number of reserve messages received.
 egress_resv_tx Number of reserve messages sent.
 The following keys are returned when you specify -mode settings:
 intf_ip_address IP address of the port on the interface card:
 a.b.c.d.
 neighbor_intf_ip_addr IP address of the interface for the RSVP
 neighbor (next hop) that will establish an
 adjacency with the DUT: a.b.c.d.
Cisco-specific returned values:
 The following returned values are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -routing_protocol
 -ingress_attempt_setup_msg
 -ingress_success_setup_msg
 -ingress_resv_timeout
 -ingress_resv_errors
 -egress_attemp_setup_msg
 -egress_success_setup_msg
 -egress_resv_timeout
 -egress_resv_errors
 -peer_count
 -total_setup_time
 -ack_rx
 -ack_tx
 -nack_rx
 -nack_tx
 -srefresh_rx
 -srefresh_tx
 -bundle_rx
 -bundle_tx
 -msg_retx
 -out_of_order_msg
 -msg_lsps
RSVP Functions
963
Description:
 The sth::emulation_rsvp_info function provides information about either the
 settings specified for the RSVP configuration or the statistics returned by it.
 This function returns the requested data (statistics or settings
 information) and a status value (1 for success). If there is an error, the
 function returns the status value (0) and an error message. Function return
 values are formatted as a keyed list (supported by the Tcl extension
 software - TclX). Use the TclX function keylget to retrieve data from the
 keyed list. (See Return Values for a description of each key.)
Examples:
 See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input:
 sth::emulation_rsvp_info -mode settings -handle router1
 Sample Output:
 {intf_ip_address 90.0.0.3} {neighbor_intf_ip_addr 90.0.0.4}
 {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_rsvp_info (
 handle = device,
 mode = 'stats');
 Sample Output:
 {'status': '1', 'ingress_path_tx': '0', 'msg_tx': '0', 'msg_rx': '0',
 'lsp_created': '0', 'lsp_count': '0', 'lsp_connecting': '0',
 'egress_pathtear_rx': '0', 'num_lsps_setup': '0', 'max_setup_time': '0',
 'hellos_rx': '0', 'ingress_resverr_rx': '0', 'lsp_deleted': '0',
 'egress_path_rx': '0', 'egress_resvconf_rx': '0', 'ingress_resvtear_rx': '0',
 'ingress_patherr_tx': '0', 'egress_resverr_tx': '0', 'ingress_resvconf_tx': '0',
 'ingress_resv_rx': '0', 'min_setup_time': '0', 'egress_resv_tx': '0',
 'hellos_tx': '0', 'egress_resvtear_tx': '0', 'egress_patherr_rx': '0',
 'ingress_pathtear_tx': '0'}
 #### HLTAPI for Perl ####
Sample Input:
 my %results_ret1 = sth::emulation_rsvp_info (
 handle => "$device",
 mode => 'stats');
Sample Output:
 $VAR1 = 'egress_resverr_tx';
 $VAR2 = '0';
 $VAR3 = 'min_setup_time';
 $VAR4 = '0';
 $VAR5 = 'ingress_path_tx';
 $VAR6 = '0';
 $VAR7 = 'status';
 $VAR8 = '1';
 $VAR9 = 'lsp_connecting';
 $VAR10 = '0';
 ...
Notes:

End of Procedure Header
RSVP Functions
964
sth::emulation_rsvp_tunnel_config
Name:
 sth::emulation_rsvp_tunnel_config
Purpose:
 Creates, modifies, or deletes LSP tunnels on the specified test port
 running RSVP emulation. When you create LSP tunnels using RSVP as a
 signaling protocol, these tunnels can be automatically or manually routed
 away from network failures, congestion, and bottlenecks automatically.
Synopsis:
 sth::emulation_rsvp_tunnel_config
 -mode create -handle <rsvp_session_handle> |
 -mode { modify|delete } -tunnel_pool_handle <rsvpte_tunnel_pool_handle>
 [-avoid_node_id <a.b.c.d>]
 [-count <0-max_int>]
 [-direction <egress | ingress> ]
 [-egress_ip_addr <a.b.c.d> ]
 [-egress_ip_step <a.b.c.d> ]
 [-ero {0|1} ]
 [-ero_list_ipv4 {ipv4List} ]
 [-ero_list_loose {0|1} ]
 [-ero_list_pfxlen <1-128> ]
 [-ero_mode {loose|strict|}]
 [-ero_dut_pfxlen <integer>]
 [-extended_tunnel_id <a.b.c.d> ]
 [-facility_backup{0|1}]
 [-fast_reroute {0|1}]
 [-fast_reroute_bandwidth <integer>]
 [-fast_reroute_exclude_any <value>]
 [-fast_reroute_holding_priority <0-7>]
 [-fast_reroute_hop_limit <integer>]
 [-fast_reroute_include_all <value>]
 [-fast_reroute_include_any <value>]
 [-fast_reroute_setup_priority <0-7>]
 [-ingress_ip_addr <a.b.c.d> ]
 [-ingress_ip_step <a.b.c.d> ]
 [-lsp_id_count <0-2147483647>]
 [-min_policed_size <integer>]
 [-one_to_one_backup {0|1}]
 [-plr_id <a.b.c.d>]
 [-port_handle <integer> ]
 [-rro {0|1} ]
 [-rsvp_behavior {rsvpEgress | rsvpIngress }]
 [-send_detour {0|1}]
 [-sender_peak_data_rate <integer>]
 [-sender_token_bkt_rate <integer>]
 [-sender_token_bkt_size <integer>]
 [-sender_tspec_max_pkt_size <integer> ]
 [-sender_tspec_min_policed_size <integer> ]
 [-sender_tspec_peak_data_rate <integer>]
 [-sender_tspec_token_bkt_rate <integer>]
 [-sender_tspec_token_bkt_size <integer> ]
 [-session_attr {0|1} ]
 [-session_attr_bw_protect {0|1} ]
 [-session_attr_flags <0-255> ]
 [-session_attr_hold_priority <0-7> ]
 [-session_attr_label_record {0|1} ]
 [-session_attr_local_protect {0|1} ]
 [-session_attr_merge {0|1} ]
 [-session_attr_name { any } ]
 [-session_attr_node_protect {0|1} ]
 [-session_attr_ra_exclude_any { 0-0xFFFFFFFF } ]
 [-session_attr_ra_include_all { 0-0xFFFFFFFF } ]
 [-session_attr_ra_include_any { 0-0xFFFFFFFF } ]
 [-session_attr_resource_affinities {0|1} ]
 [-session_attr_se_style {0|1} ]
 [-session_attr_setup_priority <0-7> ]
RSVP Functions
965
 [-tunnel_count <0-65535>]
 [-tunnel_id_start <0-65535> ]
 [-tunnel_id_step <integer> ]
Arguments:
 -avoid_node_id
 Indicates the IPv4 address that identifies the immediate
 downstream node that the Point of Local Repair (PLR) is
 trying to avoid. PLR is the head-end Label-Switch Router
 (LSR) of a backup tunnel or a detour LSP. The Router ID of
 the downstream node is the preferred value.
 -count
 Defines the number of tunnels to create to the specified
 egress point (that is, the tunnel end point). Possible
 values are 0 to <max_int>. The default is 1.
 -direction
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the direction of tunnels. Possible values are
 egress or ingress. The default is ingress.
 -egress_ip_addr
 Specifies the IP address of the tunnel's egress (end) point.
 The default for IPv4 is 192.85.1.1.
 -egress_ip_step
 Increments egress IP addresses for multiple tunnels. The
 value must be in IPv4 format.
 -ero
 Enables the use of an Explicit Route Object (ERO). Possible
 values are 0 (disabled) and 1 (enabled). The default is 0.
 When enabled, use this argument with the -ero_list_ipv4,
 -ero_list_loose, and -ero_list_pfxle arguments.
 -ero_list_ipv4
 Specifies the IPv4 prefixes (that is, subobjects), one for
 each entry in a path message for ingress (incoming) tunnels.
 Use this argument with the -ero_list_loose and
 -ero_list_pfxlen arguments.
 -ero_list_loose
 Specifies the value of the L bit in the explicit route
 object's subobject. Possible values are 1 (loose) and 0
 (strict). If you specify 1 for the L bit, the subobject
 represents a loose hop in the explicit route. If you specify
 0 for the L bit, the subobject represents a strict hop in
 the explicit route. The default is 0. Use this argument with
 the -ero_list_ipv4 and -ero_list_pfxlen arguments.
 -ero_list_pfxlen
 Specifies the IPv4 prefix length. The default is 32. This
 argument only applies to ingress (incoming) tunnels. Use
 this argument with the -ero_list_ipv4 and -ero_list_loose
 arguments.
 -ero_mode
 Indicates whether the address of devices under test (DUTs)
 is to be prepended to the ERO list and whether it is a loose
 or strict entry. Possible values are loose, strict, and
 none.
 The default value is loose.
 loose - Indicates the DUT address is a loose entry. If the
 L bit in a subobject is set, then the value of the
 attribute is "loose". The abstract node of a loose
 subobject is a loose node. The path between a loose
 node and its preceding node may include other network
 nodes that are not part of the strict node or its
RSVP Functions
966
 preceding abstract node.
 strict - Indicates the DUT address is a strict entry. If
 the L bit in a subobject is not set, then the value of
 the attribute is "strict". The abstract node of a
 strict subobject is a strict node. The path between a
 strict node and its preceding node must include only
 network nodes from the strict node and its preceding
 abstract node.
 none - The DUT address is not prepended to the ERO list.
 -ero_dut_pfxlen
 Indicates the prefix length to be used for the entry, if
 the DUTs address is to be prepended to the ERO list.
 The default value is 24.
 -extended_tunnel_id
 Specifies the ID for a custom tunnel. If not specified, it
 will be assigned the value of -ingress_ip_addr.
 -facility_backup
 Disables or enables the Facility Backup feature for fast
 reroute. Facility Backup is a local repair method in which a
 bypass tunnel is used to protect one or more protected LSPs
 that traverse the PLR, the resource being protected,
 and the Merge Point, in that order.
 Possible values are 0 (disabled) and 1(enabled).
 The default is 0. You can configure this
 argument and -one_to_one_backup at the same time.
 But the two arguments cannot both be true at the
 same time. This argument can be used when the
 -fast_reroute argument is true.
 -fast_reroute
 Disables or enables the use of the fast reroute feature.
 The fast reroute feature is used to control the backup
 used for the protected LSP. The FAST_REROUTE object
 specifies the setup and hold priorities, session
 attribute filters, and bandwidth to be used for protection.
 Possible values are 0 (disabled) and 1 (enabled).
 The default value is 0.
 -fast_reroute_bandwidth
 Defines the bandwidth estimate for the protection path
 of the FAST_REROUTE object. The bandwidth estimate is
 measured in bytes per second. This argument must be defined
 in 32-bit IEEE floating point format.
 The default value is 0.0.
 -fast_reroute_exclude_any
 Defines the exclude-any field of the FAST_REROUTE object
 that represents a set of attribute filters associated with
 a backup path, any of which render a link unacceptable.
 The value must be a 32-bit vector.
 The default is 00 00 00 00.
 -fast_reroute_holding_priority
 Indicates the priority of the backup path with respect to
 holding resources. Possible values range from 0 (highest)
 to 7 (lowest). The default is 7.
 -fast_reroute_hop_limit
 Defines the maximum number of extra hops the backup path
 is allowed to take from the current PLR node to a merge point.
 The default is 3.
 -fast_reroute_include_all
 Indicates an element of FAST_REROUTE object that
 represents a set of attribute filters associated with a
 backup path, all of which must be present to render a link 
RSVP Functions
967
 acceptable. The value must be a 32-bit vector.
 The default is 00 00 00 00.

 -fast_reroute_include_any
 Indicates a 32-bit vector that represents a set of
 attribute filters associated with a backup path, any of
 which render a link acceptable. The default is 00 00 00 00.

 -fast_reroute_setup_priority
 Defines the priority of the backup path with respect to
 taking resources, in the range of 0 (highest) to 7 (lowest).
 Setup Priority is used in deciding whether this session can
 preempt another session. The default is 7.
 -handle
 Identifies the RSVP router for which to add or remove
 tunnels. This argument is mandatory for -mode create.
 -ingress_ip_addr
 Specifies the IP address of the tunnel's ingress (start)
 point. The default is 192.85.1.3.
 -ingress_ip_step
 Specifies the increment for IP addresses for multiple
 ingress tunnels. The default increment is 1. The value must
 be in IPv4 format.
 -lsp_id_count
 Specifies the number of LSPs to create on a single tunnel
 handle. Possible values range from 0 to 2147483647. The
 default is 1.
 -min_police_size
 Specifies the minimum policed unit size: the byte size of
 the smallest packet generated by the sending application.
 Although this argument is supported by Spirent HLTAPI, it
 may not be supported in future versions. Therefore, do not
 use this argument in new scripts.
 -one_to_one_backup
 Disables or enables the use of the one-to-one backup
 feature for fast reroute. In the one-to-one backup
 method, a label-switched path is established that
 intersects the original LSP somewhere downstream of the
 point of link or node failure. Possible values are 0
 (disabled) and 1 (enabled). The default is 0. You must
 specify -fast_reroute as true if you use this argument.
 You can configure this argument and -facility_backup at the
 same time. But the two arguments cannot both be true at the
 same time.

 -plr_id
 Defines the IPv4 address that identifies the beginning
 point of the detour LSP which is a PLR. Any local address
 on the PLR can be used. The value should be in the IPv4
 format.
 -mode
 Specifies the action to perform on tunnels for the RSVP
 emulated router. Possible values are create, modify, and
 delete:
 create - Creates an RSVP tunnel for the RSVP emulated router
 identified by the -handle argument.
 modify - Changes the configuration for the tunnel
 identified by the -tunnel_pool_handle argument.
 delete - Deletes the tunnels identified by the
 -tunnel_pool_handle argument.
RSVP Functions
968
 -port_handle
 Port handle of the test port running RSVP emulation.
 -rro
 Enables the route record in the tunnel. Possible values are
 0 (disabled) and 1 (enabled). The default is 0.
 -rsvp_behavior
 Identifies the node as an ingress node or egress node. The
 default is rsvpEgress. Possible values are rsvpIngress and
 rsvpEgress.
 rsvpIngress - Indicates the node is an ingress node.
 rsvpEgress - Indicates the node is an egress node.
 -send_detour
 Disables or enables the generation of the fast reroute DETOUR
 object, using the values in the PLR list. The DETOUR object is
 used in the one-to-one backup method to identify detour LSPs.
 You must specify -fast_reroute as true if you use this argument.
 Possible values are 0 (disabled) and 1 (enabled).
 The default is 0.
 -sender_peak_data_rate
 Replaced by -sender_tspec_peak_data_rate.
 Supported in this version but will not be supported in
 future versions. Therefore, do not use this argument in new
 scripts.
 -sender_token_bkt_rate
 Replaced by -sender_tspec_token_bkt_rate.
 Supported in this version but may not be supported in
 future versions. Therefore, do not use this argument in new
 scripts.
 -sender_token_bkt_size
 Determines the amount of information your server can process
 at any given time. Supported in this version but will not be
 supported in future versions. Therefore,
 do not use this argument in new scripts.
 -sender_tspec_max_pkt_size
 Specifies the maximum packet size in bytes. The maximum
 packet size is the biggest packet that will conform to the
 traffic specifications. Packets larger than this size sent
 into the network may not receive QoS-controlled service
 because they do not meet the traffic specification. The default
 is 4096. This argument only applies to ingress (incoming)
 tunnels.
 -sender_tspec_min_policed_size
 Specifies the minimum policed size in bytes. This size
 includes the application data and all protocol headers
 at or above the IP level (IP, TCP, UDP, RTP, etc.). It does
 not include the link-level header size, because these
 headers will change in size as the packet crosses different
 portions of the internetwork. The default is 64. This argument
 only applies to ingress (incoming) tunnels.
 -sender_tspec_peak_data_rate
 Specifies the peak data rate in bytes of IP datagrams per second.
 The default is 512000. This argument only applies to ingress
 (incoming) tunnels.
 -sender_tspec_token_bkt_rate
 Specifies the token bucket rate in bytes of IP datagrams per
 second. The default is 128000. This argument only applies to
 ingress (incoming) tunnels.
 -sender_tspec_token_bkt_size
 Specifies the token bucket size in bytes. The default is 256000.
RSVP Functions
969
 This argument only applies to ingress (incoming) tunnels.
 -session_attr
 Enables or disables whether to include the SESSION_ATTRIBUTE
 object in the Path message. Possible values are 0 (disable)
 and 1 (enable). The default is 1. This argument only applies
 to ingress (incoming) tunnels.
 -session_attr_bw_protect
 Indicates to the PLRs along the
 protected LSP path whether a backup path with a bandwidth is
 guaranteed. Possible values are 0 (disable) and 1
 (enable). The default is 0. This argument only applies
 to ingress (incoming) tunnels.
 -session_attr_flags
 Sets the following session attribute flags at the same time:
 -session_attr_hold_priority (bit 0)
 -session_attr_label_record (bit 1)
 -session_attr_se_style (bit 2)
 -session_attr_bw_protect (bit 3)
 -session_attr_node_protect (bit 4)
 You can use this argument to set the session attribute flags
 at one time instead of setting each flag individually for
 those five arguments (listed above). Possible values are
 from 0 to 255. The default is 0. For example, to enable the
 first five flags, specify -session_attr_flags 31. The RSVP
 protocol converts the binary setting (11111) to its decimal
 equivalent (31). This argument only applies to ingress
 (incoming) tunnels.
 -session_attr_hold_priority
 Specifies the priority at which resources assigned to this
 session will be reserved. Possible values range from 0 to 7,
 with 0 representing the highest priority. The default is 7.
 RSVP-TE uses the holding priority to determine whether this
 session can be preempted by another session. This argument
 only applies to ingress (incoming) tunnels.
 -session_attr_label_record
 Specifies whether to include label information when doing
 a record route. Possible values are 0 (disable) and 1
 (enable). The default is 0. There are two record_route
 subobjects: IP addresses and labels. Either the Ip address
 at each hop in the path is recorded or the label used at
 every hop is recorded. This argument only applies to ingress
 (incoming) tunnels.
 -session_attr_local_protect
 Specifies whether transit routers are permitted to use a
 local repair mechanism which may result in violation of the
 explicit route object. When a fault is detected on an
 adjacent downstream link or node, a transit router can
 reroute traffic for fast service restoration. Possible
 values are 0 (disable) and 1 (enable). The default is 0.
 This argument only applies to ingress (incoming) tunnels.
 -session_attr_merge
 Supported in this version but will not be supported in
 future versions. Therefore, do not use this argument in new
 scripts.
 -session_attr_name
 Specifies a name for the session. The default name is
 Tunnel1. This argument only applies to ingress (incoming)
 tunnels.
 -session_attr_node_protect
 Indicates to the point of local repairs (PLRs) along a
 protected LSP path whether a backup path which bypasses at
RSVP Functions
970
 least the next node of the protected LSP is desired
 Possible values are 0 (disable) and 1 (enable). The default
 is 0. This argument only applies to ingress (incoming)
 tunnels.
 -session_attr_ra_exclude_any
 Sets the affinity bits in the session attribute object that
 are excluded. Possible value are 0 to 0xFFFFFFFF. The
 default is 0. This argument only applies to ingress
 (incoming) tunnels.
 -session_attr_ra_include_all
 Set all the affinity bits in the session attribute object.
 Possible value are 0 to 0xFFFFFFFF. The default is 0. This
 argument only applies to ingress (incoming) tunnels.
 -session_attr_ra_include_any
 Sets the affinity bits in the session attribute object that
 are included. Possible value are 0 to 0xFFFFFFFF. The
 default is 0. This argument only applies to ingress
 (incoming) tunnels.
 -session_attr_resource_affinities
 Specifies whether to enable resource affinities. Possible
 values are 0 (disable) and 1 (enable). The default is 0.
 This argument only applies to ingress (incoming) tunnels.
 -session_attr_se_style
 Indicates whether the tunnel ingress node will reroute
 this tunnel without tearing it down. A tunnel egress node
 should use the shared explicit (SE) reservation style when
 responding with a Resv message. Possible values are 0
 (disable) and 1 (enable). The default is 0. SE style
 reservations allow an existing LSP tunnel to share bandwidth
 with itself. This argument only applies to ingress
 (incoming) tunnels.
 -session_attr_setup_priority
 Specifies the priority for taking resources. Possible values
 range from 0 to 7, with 0 representing the highest priority.
 The default is 7. RSVP-TE uses the setup priority to
 determine whether this session can preempt another session.
 Note: The setup priority should never be higher than the
 holding priority that you specified with the
 -session_attr_hold_priority argument) for a given session.
 -tunnel_count
 Spirent Extension (for Spirent HLTAPI only).
 Number of tunnels to create. Possible values range from 0 to
 65535. The default is 1.
 -tunnel_id_start
 Specifies the starting tunnel ID used in the RSVP session.
 Possible values range from 0 to 65535. The default is 1.
 -tunnel_id_step
 Specifies the increment to use to define the tunnel ID for
 multiple tunnels. If 0, all the tunnels belong to the same
 RSVP session. Possible values range from 0 to <max_int>. The
 default is 1.
 -tunnel_pool_handle
 Specifies the RSVP handle(s) to use when mode is set to
 modify or delete. This argument is not valid for create
 mode. Instead, use -handle.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
RSVP Functions
971
 arguments, you must specify them manually as necessary.
 -session_attr_flags
 -session_attr_merge
Cisco-specific arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -adspec
 -adspec_comp_mtu
 -adspec_csum
 -adspec_ctot
 -adspec_ctrl_load
 -adspec_dsum
 -adspec_dtot
 -adspec_est_path_bw
 -adspec_guaranteed_svc
 -adspec_hop_count
 -adspec_min_path_latency
 -destination_ip
 -duration
 -ero_list_as_num
 -ero_list_ipv6
 -extended_tunnel_id_type
 -interval
 -lsp_id_start
 -lsp_list
 -mtu
 -rro_list_flags
 -rro_list_ipv4
 -rro_list_ipv6
 -rro_list_label
 -rro_list_pfxlen
 -rro_list_type
 -sender_ad_spec
 -sender_cos
 -sender_ip_addr
 -session_attr_reroute
 -ttl
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 tunnel_handle A list of handles that identify the tunnels created by
 the sth::emulation_rsvp_tunnel_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_rsvp_tunnel_config function creates, modifies,
 or deletes an LSP tunnel. Use the -mode argument to specify the action to
 perform. (See the -mode argument description for information about the
 actions.)
 When you create an RSVP tunnel, use the -handle argument. When you
 modify or delete a tunnel, use the -tunnel_pool_handle argument to specify
 which tunnel to modify or delete.
 In addition to specifying the router, you must also provide one or more of
 the following pieces of information when you create an ingress tunnel:
 - The source IP address for the tunnel's ingress (start) point (the
 -ingress_ip_addr argument)
 - The destination IP address for the for the tunnel's egress (end)
 point (the -egress_ip_addr argument)
RSVP Functions
972
 - The router handle (the -handle argument) from which to add tunnels
 During the test, use the sth::emulation_rsvp_control function to
 control individual LSP tunnels.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a tunnel for the specified RSVP
 session on the reserved port:
 sth::emulation_rsvp_tunnel_config -mode create \
 -count 1 \
 -egress_ip_addr 90.0.0.4 \
 -egress_ip_step 0.0.0.1 \
 -ero 1 \
 -ero_list_ipv4 {220.1.1.1 12.0.1.0} \
 -ero_list_loose {0 1} \
 -ero_list_pfxlen {32 24} \
 -handle $rsvpSessionHandle \
 -ingress_ip_addr 90.0.0.3 \
 -ingress_ip_step 0.0.0.1 \
 -sender_tspec_max_pkt_size 4096 \
 -sender_tspec_min_policed_size 64 \
 -sender_tspec_peak_data_rate 512000 \
 -sender_tspec_token_bkt_rate 128000 \
 -sender_tspec_token_bkt_size 256000 \
 -session_attr 1 \
 -session_attr_bw_protect 1 \
 -session_attr_hold_priority 0 \
 -session_attr_label_record 1 \
 -session_attr_local_protect 1 \
 -session_attr_name Tunnel1 \
 -session_attr_node_protect 1 \
 -session_attr_ra_exclude_any 0 \
 -session_attr_ra_include_all 0 \
 -session_attr_ra_include_any 0 \
 -session_attr_resource_affinities 0 \
 -session_attr_se_style 0 \
 -session_attr_setup_priority 7 \
 -tunnel_id_start 100 \
 -tunnel_id_step 5
 Sample Output: {tunnel_handle rsvpingresstunnelparams1} {status 1}
 #### HLTAPI for Python ####
 The following example creates a tunnel for the specified RSVP
 session on the reserved port:
 device_ret1_route0 = sth.emulation_rsvp_tunnel_config (
 mode = 'create',
 handle = device_ret1_hdl,
 direction = 'ingress',
 rsvp_behavior = 'rsvpIngress',
 lsp_id_count = '1',
 tunnel_count = '1',
 session_attr_ra_exclude_any= '0',
 sender_token_bkt_size= '0',
 min_policed_size = '20',
 tunnel_id_start = '1',
 sender_tspec_token_bkt_size= '0',
 session_attr_ra_include_all= '0',
 egress_ip_addr = '192.85.1.1',
 session_attr_hold_priority= '7',
 ingress_ip_addr = '192.85.1.3',
 session_attr_resource_affinities= '0',
 sender_peak_data_rate= '0',
 session_attr = '0',
 sender_tspec_peak_data_rate= '0',
 sender_tspec_min_policed_size= '20',
 session_attr_ra_include_any= '0',
RSVP Functions
973
 extended_tunnel_id = '0.0.0.0',
 sender_tspec_max_pkt_size= '1500',
 sender_token_bkt_rate= '0',
 sender_tspec_token_bkt_rate= '0',
 session_attr_setup_priority= '7');
 Sample Output: {'status': '1', 'tunnel_handle': 'rsvpingresstunnelparams1'}
 #### HLTAPI for Perl ####
 The following example creates a tunnel for the specified RSVP
 session on the reserved port:
 my %device_ret0_route0 = sth::emulation_rsvp_tunnel_config (
 mode => 'create',
 handle => "$device_ret0_hdl",
 direction => 'ingress',
 rsvp_behavior => 'rsvpIngress',
 session_attr_local_protect=> '1',
 session_attr_se_style=> '1',
 session_attr_bw_protect=> '0',
 session_attr_node_protect=> '0',
 session_attr_label_record=> '0',
 lsp_id_count => '1',
 tunnel_count => '2',
 session_attr_ra_exclude_any=> '1',
 sender_token_bkt_size=> '10',
 min_policed_size => '20',
 tunnel_id_start => '1',
 sender_tspec_token_bkt_size=> '10',
 session_attr_ra_include_all=> '1',
 egress_ip_addr => '192.85.1.1',
 session_attr_hold_priority=> '7',
 ingress_ip_addr => '192.85.1.3',
 session_attr_resource_affinities=> '1',
 sender_peak_data_rate=> '20',
 session_attr => '1',
 sender_tspec_peak_data_rate=> '20',
 sender_tspec_min_policed_size=> '20',
 session_attr_ra_include_any=> '1',
 extended_tunnel_id => '0.0.0.0',
 sender_tspec_max_pkt_size=> '1500',
 sender_token_bkt_rate=> '20',
 sender_tspec_token_bkt_rate=> '20',
 session_attr_setup_priority=> '7',
 ero_mode => 'loose',
 ero_dut_pfxlen => '24',
 ero => '1',
 ero_list_loose => '1 0 ',
 ero_list_ipv4 => '192.0.1.1 192.0.1.2 ',
 ero_list_pfxlen => '24 24 ',
 send_detour => '1',
 avoid_node_id => '0.0.1.1',
 plr_id => '0.0.0.1');
 Sample Output:
 $VAR1 = 'tunnel_handle';
 $VAR2 = 'rsvpingresstunnelparams2';
 $VAR3 = 'status';
 $VAR4 = '1';
End of Procedure Header
sth::emulation_rsvpte_tunnel_control
Name:
 sth::emulation_rsvpte_tunnel_control
RSVP Functions
974
Purpose:
 Opens or closes RSVP tunnel, that is, connects or shuts down the emulated
 egress or ingress tunnel.
Synopsis:
 sth::emulation_rsvpte_tunnel_control
 -handle <rsvp_tunnle_handle>
 -action {connect | tear_down_outbound | tear_down_inbound}
Arguments:

 -handle
 Specifies the RSVP tunnel to connect or shut down, which is
 returned by the sth::emulation_rsvp_tunnel_config command.
 This argument is mandatory.
 -action
 Identifies the action to perform on the RSVP tunnel. Possible
 values are connect, tear_down_outbound, and tear_down_inbound.
 This argument is mandatory. The actions are described below:
 connect - Opens the RSVP tunnel that is specified by the -handle
 argument.
 tear_down_outbound - Stops the ingress tunnel that is connected
 to the emulated RSVP router which sends the outbound
 traffic to SUT.
 tear_down_inbound - Stops the egress tunnel that is connected
 to the emulated RSVP router which sends the inbound
 traffic to SUT.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_rsvpte_tunnel_control function controls the connecting and
 tearing down of RSVP tunnels. When you call the
 sth::emulation_rsvpte_tunnel_control function, you specify a tunnel handle.
 Spirent HLTAPI applies the specified action to the specified RSVP tunnel.
Examples:
 #### HLTAPI for Tcl ####
 To connect an emulated RSVP tunnel
 sth::emulation_rsvpte_tunnel_control -action connect \
 -handle rsvptunnel1
 To tear down an inbound tunnel

 sth::emulation_rsvpte_tunnel_control -action tear_down_inbound \
 -handle rsvptunnel1
 To tear down an outbound tunnel
 sth::emulation_rsvpte_tunnel_control -action tear_down_outbound \
 -handle rsvptunnel1
 Sample Output:
 SUCCESS
 {status 1}
 FAILURE
RSVP Functions
975
 {status 0} {log XXX}
 #### HLTAPI for Python ####
 To connect an emulated RSVP tunnel:
 ctrl_ret2 = sth.emulation_rsvpte_tunnel_control (
 handle = device_list,
 action = 'connect');
 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 To connect an emulated RSVP tunnel:
 my %ctrl_ret2 = sth::emulation_rsvpte_tunnel_control (
 handle => "$device_list",
 action => 'connect');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 None.
End of Procedure Header
sth::emulation_rsvp_tunnel_info
Name:
 sth::emulation_rsvp_tunnel_info
Purpose:
 Returns information about both incoming and outgoing RSVP tunnels.
Synopsis:
 sth::emulation_rsvp_tunnel_info
 -handle <rsvp_handle>
Arguments:

 -handle
 Specifies the router for which you want information. This
 argument is mandatory.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log Retrieves a message describing the last error that
 occurred during the operation. If the operation was
 successful - {status 1} - the log value is null.
 total_lsp_count Number of reserve LSPs set up
 inbound_lsp_count Number of tail-end (egress) LSPs set up
 outbound_lsp_count Number of head-end (ingress) LSPs set up
 outbound_up_count Number of LSPs in the up state
RSVP Functions
976
 outbound_down_count Number of LSPs in the down state
 outbound_connect_count Number of LSPs connecting
 source List of source IP addresses for the tunnels
 direction List of directions for each tunnel (inbound or
 outbound)
 ingress_ip List of ingress IP addresses for the tunnels
 egress_ip List of egress IP address for the tunnels
 tunnel_id List of tunnel IDs
 lsp_id List of tunnel LSP IDs
 label List of tunnel labels
Cisco-specific returned values:
 The following returned values are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -outbound_lsps
 -inbound_lsps
Description:
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples:
 #### HLTAPI for Tcl ####
 Sample Input:

 sth::emulation_rsvp_tunnel_info -handle router1
 Sample Output:
 {source 90.0.0.3 90.0.0.4} {direction outbound inbound}
 {ingress_ip 90.0.0.3 90.0.0.4} {egress_ip 90.0.0.4 90.0.0.3}
 {tunnel_id 20001 20002} {lsp_id 1 1} {label 16 101}
 {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret4 = sth.emulation_rsvp_tunnel_info (
 handle = device);
 Sample Output:
 {'status': '1', 'egress_ip': '', 'source': '', 'outbound_up_count': '0',
 'outbound_lsp_count': '1', 'direction': '', 'total_lsp_count': '1',
 'inbound_lsp_count': '0', 'tunnel_id': '', 'ingress_ip': '',
 'outbound_connect_count': '0', 'outbound_down_count': '0', 'lsp_id': '',
 'label': '', 'outbound_lsps': 'N/A'}
 #### HLTAPI for Perl ####
 Sample Input:
 my %results_ret4 = sth::emulation_rsvp_tunnel_info (
 handle => "$device");
 Sample Output:
RSVP Functions
977
 $VAR1 = 'outbound_lsps';
 $VAR2 = 'N/A';
 $VAR3 = 'ingress_ip';
 $VAR4 = '';
 $VAR5 = 'source';
 $VAR6 = '';
 $VAR7 = 'egress_ip';
 $VAR8 = '';
 $VAR9 = 'status';
 $VAR10 = '1';
 $VAR11 = 'tunnel_id';
 $VAR12 = '';
 ...

Notes:

End of Procedure Header
Session Functions
978
Session Functions
Functions:
sth::arp_control
sth::connect
sth::device_info
sth::interface_config
sth::interface_stats
sth::cleanup_session
sth::labserver_connect
sth::labserver_disconnect
sth::link_config
sth::load_xml
sth::start_devices
sth::stop_devices
sth::get_handles
sth::arp_control
Name:
 sth::arp_control
Purpose:
 Performs Address Resolution Protocol (ARP) on specified ports, devices and
 streamblocks
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::arp_control
 -arp_target {all | alldevice | allstream | port | stream | device}
 [-arpnd_report_retrieve {0 | 1}]
 [-arp_cache_retrieve {0 | 1}]
 [-handle <list of streamblock handles or device handles>]
 [-port_handle <list of port handles>]
Arguments:
 -arp_target
 Specifies the range of objects on which ARP will be performed.
 This argument is mandatory. Possible values are listed below:

 port - ARP will be applied to ports specified by -port_handle
 stream - ARP will be applied to streams specified by -handle
 device - ARP will be applied to devices specified by -handle
 all - ARP will be applied to all streamblocks, devices, and ports
 allstream - ARP will be applied to all streamblocks
 alldevice - ARP will be applied to all devices

 The default is port.

 -arp_cache_retrieve
 Determines whether to retrieve the ARP cache table. Possible
 values are 1 and 0. When it is set to 1, Spirent HLTAPI will
 retrieve the ARP cache table. The default is 0.
 -arpnd_report_retrieve
 Determines whether to retrieve the ARP or Neighbor Discovery (ND)
 statistics after each ARP/ND operation. Possible values are 1 and
 0. When it is set to 1, Spirent HLTAPI will retrieve the
 ARP/ND statistics. The default is 0.

 -handle
 Specifies a list of handles of the streamblocks or devices on which
 ARP is to be performed. You must specify this argument when
 -arp_target is set to stream or device.
Session Functions
979

 -port_handle
 Specifies a list of handles of the ports on which ARP is to be
 performed. You must specify this argument when -arp_target is set
 to port, stream or device.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 Status Success (1) or failure (0) of the operation
 arpnd_status Success (1) or failure (0) of the overall ARP operation
 arpnd_cache When -arp_cache_retrieve is set to 1, this key is returned
 with the following details:

 <port_handle>.<arpnd_cache0>.location Host name
 <port_handle>.<arpnd_cache0>.ip Host IP address
 <port_handle>.<arpnd_cache0>.gateway_ip Gateway IP address
 <port_handle>.<arpnd_cache0>.resolved_mac Resolved MAC address
 arpnd_report When -arpnd_report_retrieve is set to 1, this key is returned
 with the following details:

 <port_handle>.<arpnd_report>.arpnd_status ARP status
 <port_handle>.<arpnd_report>.failed_arpnd_count Number of failed ARP
 operations
 <port_handle>.<arpnd_report>.successful_arpnd_count Number of successful
 ARP operations
 <port_handle>.<arpnd_report>.attempted_arpnd_count Total ARP attempts
Description:
 The sth::arp_control function starts Address Resolution Protocol (ARP) on specified
 ports, devices and streamblocks. Use the -arp_target argument to specify the
 range of the objects on which you want to run ARP. (See -arp_target for more
 information about the usage.)

Examples:
 To perform ARP on all devices:

 set arp [sth::arp_control -arp_target alldevice \
 -arpnd_report_retrieve 1 \
 -arp_cache_retrieve 1]

 Output:

 {status 1} {port1 {{arpnd_cache0 {{location Router1} {ip 30.1.1.2} {gateway_ip
 30.1.1.1} {resolved_mac 00:00:01:00:00:01}}} {arpnd_cache1 {{location Router1}
 {ip 3001::2} {gateway_ip 3001::1} {resolved_mac 00:00:01:00:00:01}}}
 {arpnd_cache2 {{location StreamBlock_1-2} {ip 30.1.1.2} {gateway_ip 30.1.1.1}
 {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache3 {{location StreamBlock_6} {ip
 30.1.1.2} {gateway_ip 30.1.1.1} {resolved_mac 00:30:96:a9:94:0a}}}}} {port2
 {{arpnd_cache0 {{location Router2} {ip 40.1.1.2} {gateway_ip 40.1 .1.1}
 {resolved_mac 00:00:01:00:00:01}}} {arpnd_cache1 {{location Router2} {ip
 2001:0:1:1::1} {gateway_ip 2001:0:1:1::2} {resolved_mac 00:00:01:00:00:01}}}
 {arpnd_cache2 {{location StreamBlock_4-1} {ip 2001:0:1:1::1} {gateway_ip
 2001:0:1:1::2} {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache3 {{location
 StreamBlock_7} {ip 2001:0:1:1::1} {gateway_ip 2001:0:1:1::2} {resolved_mac
 00:30:96:a9:94:0a}}}}} {arpnd_report {{port1 {{arpnd_status SUCCESSFUL}
 {failed_arpnd_count 0} {successful_arpnd_count 2} {attempted_arpnd_count 2 }}}
 {port2 {{arpnd_status SUCCESSFUL} {failed_arpnd_count 0} {successful_arpnd_count
 2} {attempted_arpnd_count 2}}}}} {arpnd_status 1}
 To perform ARP on all Streamblocks:

 set arp [sth::arp_control -arp_target allstream \
 -arpnd_report_retrieve 1 \
 -arp_cache_retrieve 1]
 
Session Functions
980
 Output:

 {status 1} {port1 {{arpnd_cache0 {{location Router1} {ip 30.1.1.2} {gateway_ip
 30.1.1.1} {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache1 {{location Router1}
 {ip 3001::2} {gat eway_ip 3001::1} {resolved_mac 00:30:96:a9:94:0a}}}
 {arpnd_cache2 {{location StreamBlock_1-2} {ip 30.1.1.2} {gateway_ip 30.1.1.1}
 {resolved_mac 00:30:96:a9:94:0a}}} {arpndcache3 {{location StreamBlock_6} {ip
 30.1.1.2} {gateway_ip 30.1.1.1} {resolved_mac 00:30:96:a9:94:0a}}}}} {port2
 {{arpnd_cache0 {{location Router2} {ip 40.1.1.2} {gateway_ip 40.1 .1.1}
 {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache1 {{location Router2} {ip
 2001:0:1:1::1} {gateway_ip 2001:0:1:1::2} {resolved_mac 00:30:96:a9:94:0a}}}
 {arpnd_cache2 {{location StreamBlock_4-1} {ip 2001:0:1:1::1} {gateway_ip
 2001:0:1:1::2} {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache3 {{location
 StreamBlock_7} {ip 2001:0:1:1::1} {gateway_ip 2001:0:1:1::2} {resolved_mac
 00:30:96:a9:94:0a}}}}} {arpnd_status 1}
 To perform ARP on specified streamblocks:

 set arp [sth::arp_control -port_handle "$port1 $port2" \
 -arp_target stream \
 -handle "$strm_id1 $strm_id2 $strm_id3 $strm_id4" \
 -arpnd_report_retrieve 1 \
 -arp_cache_retrieve 1]

 Output:

 {status 1} {port1 {{arpnd_cache0 {{location StreamBlock_1-2} {ip 30.1.1.2}
 {gateway_ip 30.1.1.1} {resolved_mac 00:30:96:a9:94:0a}}}
 {arpnd_cache1 {{location StreamBlock_6} {ip 30.1.1.2} {gateway_ip 30.1.1.1}
 {resolved_mac 00:30:96:a9:94:0a}}}}} {port2 {{arpnd_cache0 {{location
 StreamBlock_4-1} {ip 2001:0:1:1::1} {gateway_ip 2001:0:1:1::2} {resolved _mac
 00:30:96:a9:94:0a}}} {arpnd_cache1 {{location StreamBlock_7} {ip 2001:0:1:1::1}
 {gateway_ip 2001:0:1:1::2} {resolved_mac 00:30:96:a9:94:0a}}}}}
 {arpnd_report {{port1 {{arpnd_status SUCCESSFUL} {failed_arpnd_count 0}
 {successful_arpnd_count 2} {attempted_arpnd_count 2}}} {port2 {{arpnd_status
 SUCCESSFUL} {failed_arpnd_count 0} {successful_arpnd _count 2}
 {attempted_arpnd_count 2}}}}} {arpnd_status 1}
 To perform ARP on specified devices:

 set arp [sth::arp_control -port_handle "$port1 $port2" \
 -arp_target device \
 -handle "$src_hdl $dst_hdl" \
 -arpnd_report_retrieve 1 \
 -arp_cache_retrieve 1]

 Output:
 {status 1} {port1 {{arpnd_cache0 {{location Router1} {ip 30.1.1.2} {gateway_ip
 30.1.1.1} {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache1 {{location Router1}
 {ip 3001::2} {gat eway_ip 3001::1} {resolved_mac 00:30:96:a9:94:0a}}}}} {port2
 {{arpnd_cache0 {{location Router2} {ip 40.1.1.2} {gateway_ip 40.1.1.1}
 {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache1 {{location Router2} {ip
 2001:0:1:1::1} {gateway_ip 2001:0:1:1::2} {resolved_mac 00:30:96:a9:94:0a}}}}}
 {arpnd_report {{port1 {{arpnd_status SUCCESSFUL} {failed_arpnd_count 0}
 {successful_arpnd_count 2} {attempted_arpnd_count 2}}} {port2 {{arpnd_status
 SUCCESSFUL} {failed_arpnd_count 0} {successful_arpnd_count 2}
 {attempted_arpnd_count 2}}}}} {arpnd_status 1}


 To perform ARP on specified ports:
 set arp [sth::arp_control -port_handle "$port1 $port2" \
 -arp_target port \
 -arpnd_report_retrieve 1 \
 -arp_cache_retrieve 1]
 Output:

 eway_ip 3001::1} {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache2 {{location
 StreamBlock_1-2} {ip 30.1.1.2} {gateway_ip 30.1.1.1} {resolved_mac
 00:30:96:a9:94:0a}}} {arpnd_cache3 {{location StreamBlock_6} {ip 30.1.1.2}
Session Functions
981
 {gateway_ip 30.1.1.1} {resolved_mac 00:30:96:a9:94:0a}}}}} {port2 {{arpnd_cache0
 {{location Router2} {ip 40.1.1.2} {gateway_ip 40.1 .1.1} {resolved_mac
 00:30:96:a9:94:0a}}} {arpnd_cache1 {{location Router2} {ip 2001:0:1:1::1}
 {gateway_ip 2001:0:1:1::2} {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache2
 {{location StreamBlock_4-1} {ip 2001:0:1:1::1} {gateway_ip 2001:0:1:1::2}
 {resolved_mac 00:30:96:a9:94:0a}}} {arpnd_cache3 {{location StreamBlock_7} {ip
 2001:0:1:1::1} {gateway_ip 2001:0:1:1::2} {resolved_mac 00:30:96:a9:94:0a}}}}}
 {arpnd_report {{port1 {{arpnd_status SUCCESSFUL} {failed_arpnd_count 0}
 {successful_arpnd_count 4} {attempted_arpnd_count 4 }}} {port2 {{arpnd_status
 SUCCESSFUL} {failed_arpnd_count 0} {successful_arpnd_count 4}
 {attempted_arpnd_count 4}}}}} {arpnd_status 1}

Notes:
End of Procedure Header
sth::connect
Name:
 sth::connect
Purpose:
 Initializes one or more Spirent HLTAPI chassis and reserves ports on
 the initialized chassis. All reserved ports will reset any existing traffic
 or port configurations to an initialized startup state.
Synopsis:
 sth::connect
 -device <list of IP addresses or names>
 -port_list {<slot>/<port>}
 [-offline {1|0}]
 [-break_locks {1|0}]
 [-reset ]
 [-scheduling_mode {RATE_BASED | PORT_BASED | PRIORITY_BASED |
 MANUAL_BASED}]
 [-timeout {0|1|3|10|30|100|300}]
 [-username <string>]
 [-sync {1|0}]
 [-nobios {1|0}]
Arguments:
 -break_locks
 Breaks port locks established by another user or process. To
 break the locks, set the value of the -break_locks argument to 1.
 The default is 0. Use the -port_list argument to identify the
 ports.
 -device
 Specifies one or more Spirent HLTAPI chassis for connection.
 You can specify a list of IP addresses in IPv4 format, host
 names, or domain names, separated by spaces. Spirent HLTAPI
 does not validate the -device argument value(s). This argument is
 mandatory.
 -nobios
 (Not supported in this release)
 Specifies whether HLTAPI will download BIOS to cards. Possible
 values are 0 (do not download BIOS to cards) and 1 (download
 BIOS). The default is 0.
 -offline
 Specifies whether HLTAPI will create offline ports or not.
 Possible values are 0 (create online ports) and 1 (create
 offline ports). The default is 0.
 -port_list
Session Functions
982
 Reserves the specified ports on the specified device host. This
 argument is mandatory. Specify a port using the format
 "slot/port" as follows:
 -port_list {4/6}
 To skip the ports for a chassis, specify empty brackets { }
 in its place. For example, if you specified three chassis
 but only need to use the ports on the third chassis, you
 would specify the following:
 -device Ip1 Ip2 Ip3
 -port_list { } { } {4/6}
 For each IP address, host name, or domain name value specified
 for the -device argument, there can be a corresponding slot/port
 value. Any port value that you specify for the -port_list
 argument must correspond to a port on the specified chassis.
 -reset
 Removes all port traffic configurations for the specified chassis
 and ports (using the -device and/or -port_list arguments).
 Use the -reset argument when you want to create a new test
 configuration for a connection that you have already
 established. You can also use -reset in combination with
 -break_locks to establish a connection to a chassis and reserve
 (and re-initialize) ports.
 The following example deletes the ports and disconnects from the
 chassis, and then reconnects to the chassis and reserves the
 ports provided in the port list (-port_list):
 sth::connect -device $device -port_handle $port_list -reset
 -scheduling_mode
 Specifies the traffic load scheduling mode. Possible values are
 described below:
 port_Based - The load is controlled at port level; guarantees a
 fixed interframe gap (IFG) for Layer 2 testing. The order of
 frames sent is determined by the order of the configured
 stream blocks.
 rate_based - Use this mode to allow multiple load values for
 streams within the same stream block.
 priority_based - High-priority stream blocks are scheduled first,
 lower priority stream blocks are fit into gaps left available
 by higher priority stream blocks.
 manual_based - Use this scheduling mode to configure tightly
 controlled traffic for functional testing.
 The default value is rate_based.
 -sync
 Synchronizes the timestamps of all of the specified chassis, using
 the first chassis specified in the -device argument as the master
 clock source. To synchronize the timestamps, set the value of the
 -sync argument to 1. The default is 1.
 -username
 Specifies the name of the user. This name is only displayed
 for locked ports. If the user name includes spaces, Spirent
 HLTAPI uses only the last word of the name.
 -timeout
 Establishes a time period for the connection attempt. The
 value is the number of seconds before the time period expires.
 The timeout value can be one of the following: 0, 1, 3, 10, 30,
 100, 300, 1000.
Session Functions
983
Arguments Unsupported by Save as HLTAPI:
 None.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -config_file
 -forceload
 -handle
 -nobios
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 port_handle.<device>.<port> The port information for the connected
 chassis (see below).
 status Success (1) or failure (0) of the
 operation.
 log An error message (if the operation
 failed).
 offline The created ports are online (0) or
 offline (1).
 See the following description for more information about the returned
 keyed list.
Description:
 The connect function establishes a connection with one or more
 Spirent HLTAPI chassis and reserves a set of ports. When you
 successfully connect to a chassis and reserve ports, the ports are locked
 (reserved) for your use. You can use the -break_locks and -reset arguments
 to gain access to a port locked by another user. If you break existing
 locks, the connect function resets any existing port and traffic
 configurations to an initialized startup state.
 Spirent HLTAPI returns an error message if it cannot establish
 connections with the specified ports. For example, if a port is already
 reserved, the connect function returns an error. In this case, you can
 call the connect function again, using the -break_locks argument.
 The function returns the requested data (device and port information)
 and a status value (1 for success). If there is an error, the function
 returns the status value (0) and an error message. Function return values
 are formatted as a keyed list (supported by the Tcl extension software -
 TclX). Use the TclX function keylget to retrieve data from the keyed list.
 The key values to access the data returned from the connect function are:
 port_handle.<device>.<port>
 Port information is structured as a keyed list that is embedded within
 the primary keyed list returned by the connect function.
 The device-port keyed list contains information about all of the
 connected chassis. You can use the following forms of key values to
 retrieve information about ports:
 port_handle is a value that uniquely identifies a port on a chassis.
 The returned port handle value is used as input to the
 sth::interface_config function as well as other functions.
 <device> is the value of the -device argument passed into the call.
 <port> is the value of the -port_list argument passed into the call.
 If two ports are in different port groups, then all of the ports
Session Functions
984
 in the port group are reserved.
 status
 The key "status" retrieves a value indicating the success (1) or
 failure (0) of the operation.
 log
 The key "log" retrieves a message describing the last error that
 occurred during the operation. If the operation was successful -
 {status 1} - the log value is null.
 offline
 The key "offline" retrieves a value indicating the created ports
 are online (0) or offline (1).
Examples:
 The following connect function returns a keyed list containing device and
 port information:
 sth::connect -device 10.100.19.110 -username abc -port_list 4/6
 Here is an example of the output for the above sample input function:
 {port_handle {{10 {{100 {{19 {{110 {{4/0 60} {4/2 84}}}}}}}}}}} {status 1}
 This keyed list describes ports on the device with the IP address
 10.100.19.110. Because the ports are not locked, a username is not
 returned. This function established a connection with ports 0 and 2
 on slot 4 of the specified device. The port handle for port 0 is 60, and
 the port handle for port 2 is 84. You will use these port handle values as
 input to other functions.
Sample Input: sth::connect -port_list 10.100.19.112,7/0
Sample Output: {port_handle {{10 {{100 {{19 {{112 {7/0 62}}}}}}}}}} {status 1}
Notes:
End of Procedure Header
sth::device_info
Name:
 sth::device_info
Purpose:
 Returns information about ports on the connected chassis; also returns the
 current versions of the HLTAPI functional specification and Spirent
 TestCenter software.
Synopsis:
 sth::device_info
 [-ports]
 [-port_handle <handle>]
 [-fspec_version]
Arguments:
 -ports
 Produces port information.
 -fspec_version
 Produces version information.
 -port_handle
 Produces the default port name.
Return Values:
Session Functions
985
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 version
 Version numbers for HLTAPI specification and Spirent
 TestCenter software.
 device-port-key
 The port information for the connected chassis (see
 below).
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Arguments Unsupported by Save as HLTAPI:
 None.
Description:
 The device_info function provides information about the availability of
 ports on the connected chassis. It can also identify the Spirent HLTAPI
 version and the version of the HLTAPI specification that the Spirent
 TestCenter software supports.
 This function returns the requested data (version or port information)
 and a status value (1 for success). If there is an error, the function
 returns the status value (0) and an error message. Function return values
 are formatted as a keyed list (supported by the Tcl extension software -
 TclX). Use the TclX function keylget to retrieve data from the keyed list.
 The key values to access the data returned from the device_info function
 are:
 version
 The key "version" retrieves a string containing the software and
 functional specification version numbers.
 device-port-key
 Port information is structured as a keyed list that is embedded within
 the primary keyed list returned by the device_info function. The
 device-port keyed list contains information about all of the connected
 chassis. You can use the following forms of key values to retrieve
 information about ports:
 <device>.available.<port>.type
 <device>.inuse.<port>.type
 <device>.inuse.<port>.owner
 <device> is the IP address of a connected chassis.
 <port> identifies a port on the chassis, specified as slot/port.
 Note that the keys shown above are fully qualified. When you specify
 a fully qualified key, the keylget function returns information
 about a single port. If you specify a partial key, keylget returns
 the corresponding information. For example, if you specify the
 <device>.available form, the function will return a keyed list
 containing information about all available ports on the specified
 chassis. If you are using only one port in a port group, not only will
 that port show as "in use", but the other port in that port group will
 also show as "in use" as all the ports in the port group get reserved.
 status
 The key "status" retrieves a value indicating the success (1) or
 failure (0) of the operation.
Session Functions
986
 log
 The key "log" retrieves a message describing the last error that
 occurred during the operation. If the operation was successful -
 {status 1} - the log value is null.
Examples:
To obtain port information:
 set port_data [sth::device_info -ports]
 The port_data variable contains the following keyed list:
 {{10 {{100 {{19 {{112 {{available {{4/0 {{type ethernet}}} {4/1 {{type
 ethernet}}} {4/2 {{type ethernet}}} {4/3 {{type ethernet}}} {4/4 {{type
 ethernet}}} {4/5 {{type ethernet}}}}} {inuse {{4/6 {{owner smith} {type
 ethernet}}} {4/7 {{owner smith} {type ethernet}}}}}}}}}}}}} {status 1}}
This keyed list describes ports on the device with the IP address
10.100.19.112. The information is organized into a hierarchy
based on device, availability, port, owner, and type. The keyed list could be
represented as follows:
 10.100.19.112 available 4/0 type ethernet
 4/1 type ethernet
 4/2 type ethernet
 4/3 type ethernet
 4/4 type ethernet
 4/5 type ethernet
 inuse 4/6 owner smith
 type ethernet
 4/7 owner smith
 type ethernet
 status 1
To obtain the default port name:
 device_info -porthandle $p0 $p1
Keyed list returned:
 {port_handle {{port1 {{port_name {10.100.19.98-8-1 //8/1}}}} {port2 {{
 port_name {10.100.19.98-8-3 //8/3}}}}}} {status 1}
 port1: 10.100.19.98-8-1 //8/1
 port2: 10.100.19.98-8-3 //8/3
Sample Input: See Examples.
Sample Output: See Examples.
Notes:
End of Procedure Header
Session Functions
987
sth::interface_config
Name:
 sth::interface_config
Purpose:
 Creates, modifies, or deletes a port configuration.
Synopsis:
 sth::interface_config
 -port_handle <handle>
 [-mode config
 [-intf_mode {ethernet}
 [-arpnd_report_retrieve {1|0}]
 [-arp_req_retries <0-100>]
 [-arp_req_timer <1-100000>]
 [-arp_send_req {1|0}]
 [-arp_target{ stream |device | port | all }]
 [-arp_cache_retrieve {1|0}]
 [-autonegotiation {1|0}]
 [-control_plane_mtu < 0-16383 >]
 [-collision_exponent <1-10>]
 [-crc32 {true|false}]
 [-create_host {true|false} ]
 [-data_path_mode {normal|local_loopback}]
 [-deficit_idle_count {true|false}]
 [-dst_mac_addr <aa.bb.cc.dd.ee.ff>]
 [-duplex {full|half}]
 [-enforce_mtu_on_rx {true | false}]
 [-enable_ping_response {1|0}]
 [-flow_control {true|false}]
 [-framing {sonet|sdh}]
 [-gateway <a.b.c.d>]
 [-gateway_step <a.b.c.d>]
 [-internal_ppm_adjust <-100-100>]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-ipv6_intf_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_intf_addr_step
 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_prefix_length <0-128>]
 [-ipv6_gateway <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_gateway_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_resolve_gateway_mac {true|false}]
 [-netmask <a.b.c.d>]
 [-path_signal_label {HDLC|PPP|ATM|ETHERNET_10G_WAN}]
 [-phy_mode {copper|fiber}]
 [-rx_equalization <0-15>]
 [-port_handle <handle>]
 [-port_mode {LAN|WAN}]
 [-scramble {true|false}]
 [-speed {ether10|ether100|ether1000|ether10000|ether100Gig
 |ether40Gig }]
 [-pfc_negotiate_by_dcbx {0|1}]
 [-priority0 {0|1}]
 [-priority1 {0|1}]
 [-priority2 {0|1}]
 [-priority3 {0|1}]
 [-priority4 {0|1}]
 [-priority5 {0|1}]
 [-priority6 {0|1}]
 [-priority7 {0|1}]
 [-resolve_gateway_mac {true|false}]
 [-src_mac_addr {<aaaa.bbbb.cccc> | <aaaa:bbbb:cccc> |
 <aa.bb.cc.dd.ee.ff> | <aa:bb:cc:dd:ee:ff> |
 <aa-bb-cc-dd-ee-ff>}]
 [-src_mac_addr_step {<aaaa.bbbb.cccc> | <aaaa:bbbb:cccc> |
 <aa.bb.cc.dd.ee.ff> | <aa:bb:cc:dd:ee:ff> |
 <aa-bb-cc-dd-ee-ff>}]
Session Functions
988
 [-transmit_clock_source {internal|bits|loop|external internal_ppm_adj }]
 [-tx_preemphasis_main_tap <0-31>]
 [-tx_preemphasis_post_tap <0-15>]
 [-vlan {1|0}]
 [-vlan_id <0-4095>]
 [-vlan_cfi {0|1}]
 [-vlan_id_count <1-4096>]
 [-vlan_id_step <0-4095>]
 [-vlan_user_priority <0-7>]
 [-qinq_incr_mode {both|inner|outer}]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_cfi {0 |1}]
 [-vlan_outer_id_count <1-4096>]
 [-vlan_outer_id_step <0-4095>]
 [-vlan_outer_user_priority <0-7>]
 ]
 [-intf_mode {atm}
 [-framing {sonet|sdh}]
 [-control_plane_mtu < 0-16383>]
 [-lais_lrdi_threshold<5-65535>}]
 [-tx_s1<0-65535>]
 [-tx_fcs<16|32>]
 [-clocksource{ internal|loop|external}]
 [-speed {oc3|oc12|oc48}]
 [-intf_mode {pos_hdlc|pos_ppp}
 [-speed {ether10|ether100|ether1000|ether10000|ether9_286|
 oc3|oc12|oc48|oc192}]
 [-framing {sonet|sdh}]
 [-control_plane_mtu < 0-16383>]
 [-clocksource{ internal|loop|external}]
 [-lais_lrdi_threshold<5-65535>}]
 [-tx_s1<0-65535>]
 [-tx_fcs<16|32>]
 ]
 [-intf_mode fc
 [-data_path_mode {LINE_MONITOR | LOCAL_LOOPBACK | NORMAL}]
 [-internal_ppm_adjust <-100 - 100>]
 [-speed {ether2000 | ether4000 | ether8000 | ether10000}]
 [-control_plane_mtu <0 - 16383>]
 [-transmit_clock_source {INTERNAL | INTERNAL_PPM_ADJ}]
 [-receiver_ready_delay_max <0 - 500000>]
 [-receiver_ready_delay_min <0 - 500000>]
 [-receiver_ready_delay_mode {fixed | random}]
 [-receiver_ready_delay_units {us | ms}]
 [-max_recv_size <64 - 2120>]
 [-receiver_timeout <1 -65535>]
 [-rx_credits <1 - 65535>]
 [-topology {PTP_PRIVATE | PTP_PUBLIC}]
 [-traffic_class {TRAFFIC_CLASS_2 | TRAFFIC_CLASS_3}]
 [-tx_credits <1 - 65535>]
 ]
 [-mode modify
 [-arp_req_retries <0-100>]
 [-arp_req_timer <1-100000>]
 [-arp_send_req {1|0}]
 [-arp_target{ stream |device | port | all }]
 [-arp_cache_retrieve {1|0}]
 [-autonegotiation {1|0}]
 [-collision_exponent <1-10>]
 [-control_plane_mtu < 0-16383 >]
 [-crc32 {true|false}]
 [-data_path_mode {normal|local_loopback}]
 [-deficit_idle_count {true|false}]
 [-dst_mac_addr <aa.bb.cc.dd.ee.ff>]
 [-duplex {full|half}]
 [-enforce_mtu_on_rx {true | false}]
 [-flow_control {true|false}]
 [-framing {sonet|sdh}]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-internal_ppm_adjust <-100-100>]
Session Functions
989
 [-ipv6_intf_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_prefix_length <0-128>]
 [-ipv6_intf_addr_step
 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_gateway <a.b.c.d>]
 [-ipv6_gateway_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_resolve_gateway_mac {true|false}]
 [-netmask <a.b.c.d>]
 [-path_signal_label {HDLC|PPP|ATM|ETHERNET_10G_WAN}]
 [-pfc_negotiate_by_dcbx {0|1}]
 [-priority0 {0|1}]
 [-priority1 {0|1}]
 [-priority2 {0|1}]
 [-priority3 {0|1}]
 [-priority4 {0|1}]
 [-priority5 {0|1}]
 [-priority6 {0|1}]
 [-priority7 {0|1}]
 [-phy_mode {copper|fiber}]
 [-port_handle <handle>]
 [-port_mode {LAN|WAN}]
 [-resolve_gateway_mac {true|false}]
 [-scramble {true|false}]
 [-scheduling_mode {RATE_BASED | PORT_BASED | PRIORITY_BASED |
 MANUAL_BASED}]
 [-speed {ether10|ether100|ether1000|ether10000}]
 [-src_mac_addr {<aaaa.bbbb.cccc> | <aaaa:bbbb:cccc> |
 <aa.bb.cc.dd.ee.ff> | <aa:bb:cc:dd:ee:ff> |
 <aa-bb-cc-dd-ee-ff>}]
 [-src_mac_addr_step {<aaaa.bbbb.cccc> | <aaaa:bbbb:cccc> |
 <aa.bb.cc.dd.ee.ff> | <aa:bb:cc:dd:ee:ff> |
 <aa-bb-cc-dd-ee-ff>}]
 [-transmit_clock_source {internal|bits|loop|external internal_ppm_adj }]
 [-tx_preemphasis_post_tap <0-15>]
 [-tx_preemphasis_main_tap <0-31>]
 [-vlan {1|0}]
 [-vlan_id <0-4095>]
 [-vlan_cfi {0|1}]
 [-vlan_id_count <1-4096>]
 [-vlan_id_step <0-4095>]
 [-vlan_user_priority <0-7>]
 [-qinq_incr_mode {both|inner|outer}]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_cfi {0|1}]
 [-vlan_outer_id_count <1-4096>]
 [-vlan_outer_id_step <0-4095>]
 [-vlan_outer_user_priority <0-7>]
 ]
 [-mode destroy]
Arguments:
 -arpnd_report_retrieve
 Determines whether to retrieve the Address Resolution Protocol
 (ARP)/Neighbor Discovery (ND) statistics after each ARP/ND
 Operation. Possible values are 1 and 0. When it is set to 1, this
 command will retrieve the ARP/ND Statistics. When it is set to 0,
 the command will not. The default is 0. This argument is only
 available when -arp_send_req is set to 1.
 -arp_req_retries
 The ARP retry count to use. Possible values range from 0 to 100.
 The default is 3. The -mode argument must be set to config or
 modify. This argument is only available when -arp_send_req is set
 to 1.
 -arp_req_timer
 The interval between ARP messages in milliseconds. Possible
 values range from 1 to 100000. The default is 10. The -mode
 argument must be set to either config or modify. This
 argument is only available when -arp_send_req is set to 1.
Session Functions
990
 -arp_send_req
 Enables or disables sending ARP requests on the specified
 Ethernet port. Valid values are 0 and 1. The default is 1
 (enable ARP on the port). The -mode argument must be set to
 config or modify. ARP is sent when you call
 sth::traffic_control -action run -port_handle $porthandle
 You must also enable:
 sth::traffic_config -mac_discover_gw <a.b.c.d>.
 See "Description" for sth::interface_config below for more about
 enabling ARP.
 -arp_target
 Specifies the object that the ARP will be applied to. Possible
 values are listed below:
 port - ARP will be applied to ports. This is the default.
 stream - ARP will be applied to streams.
 device - ARP will be applied to devices.
 all - ARP will be applied to streams, devices, and ports.
 This argument is only available when -arp_send_req is set to
 1.
 -arp_cache_retrieve
 Determines whether to retrieve the ARP cache table per port.
 Possible values are 1 and 0. When it is set to 1, this
 command will retrieve the ARP cache table per port. When it
 is set to 0, the command will not. The default is 0.
 This argument is only available when -arp_send_req is set to
 1.
 The following example applies the ARP to streams, devices, and
 ports. It also checks the ARP results and retrieves the ARP
 cache table per port.
 set returnedString [sth::interface_config -port_handle $portHnd
 -mode modify
 -arp_send_req 1
 -arp_target all
 -arp_cache_retrieve 1]
 Then the return values will look like this:
 <ARP FAIL>
 {arpnd_status 0} {arpnd_cache {{10.61.37.23-2-1 //2/1
 port_address 11.1.1.10 11.1.1.11 00:00:00:00:00:00}
 {10.61.37.23-2-1 //2/1 StreamBlock 1 :0 10.1.1.10 10.1.1.11
 00:10:94:00:00:32}}}
 {status 1}
 <ARP SUCCESS>
 {arpnd_status 1} {arpnd_cache {{10.61.37.23-2-3 //2/3
 port_address 11.1.1.11 11.1.1.10 00:10:94:00:00:31}
 {10.61.37.23-2-3 //2/3 StreamBlock 2 :0 10.1.1.11 10.1.1.10
 00:10:94:00:00:02}}}
 {status 1}
 -autonegotiation
 Enables or disables autonegotiation of the port speed. Valid
 values are 0 and 1. The default is 1 (enable). The -mode argument
 must be set to config or modify.
 -clocksource
 Specifies the transmitter clock source. Possible values are
 internal, loop, and external. The default is "internal".
 internal - Specifies that a crystal on the interface provides the
Session Functions
991
 transmit clock.
 loop - Specifies that a clock recovered from the received data is
 used as the transmit clock.
 external - Specifies that the transmit clock is locked to an
 external reference signal provided to the interface.
 -control_plane_mtu
 Sets the maximum transmission unit (MTU) size (in bytes) for the
 port. The MTU defines the largest size of packets that an
 interface can transmit without the need to fragment. IP packets
 larger than the MTU specified must be fragmented. Valid values
 range from 0 to 16383. The default is 1500. The -mode argument
 must be set to either config or modify.
 -collision_exponent
 Sets the exponent used in the collision back-off algorithm. Larger
 exponents indicate larger back-off times after collisions occur.
 Possible values range from 1 to 10. The default value is 10.
 This argument is for 100G and 40G only.
 -crc32
 Enables or disables the CRC32. CRC32 is the Cyclic Redundancy
 Checksum in which the digital signature is a 32-bit number. Valid
 values are true and false. The default is true (enable).
 You can use this argument only when -mode is set to config or
 modify and -speed is set to ether10000.
 -create_host
 Determines whether to create a host named as port_address.
 Possible values are true and false. If it is set to true, a host
 named as port_address will be created. The default value is true.
 The value will be false if the script is automatically
 in Save as HLTAPI.
 -data_path_mode
 Sets the path for the port to transmit data. Possible values are
 normal and local_loopback:
 normal - generate data from Spirent TestCenter to the DUT and
 analyze incoming data from the DUT
 local_loopback - the port will transmit in a loopback mode, so
 transmitted data will be received by the transmitting port
 without going out on the wire.
 The default is "normal". This argument works only with Ethernet
 fiber mode.
 -deficit_idle_count
 Enables or disables a Deficit Idle Count (DIC), which maintains
 the count of characters deleted or inserted. DIC adds or
 subtracts up to 3 bytes to/from the nominal 12-byte inter-frame
 gap to maintain the 10GbE frame rate. Therefore, the minimum gap
 at the XGMII transmit interface can be 9 to 15 bytes, but
 averages 12 bytes. To achieve the maximum 10Gb/s throughput, test
 tools and devices under test must have DIC enabled. Valid values
 are true and false. The default is false (disable). This argument
 is only applicable for Ethernet 10G fiber.
 -dst_mac_addr
 Defines the destination MAC address {aa:bb:cc:dd:ee:ff}, which is
 the address of the next hop (gateway). The -mode argument must be
 set to either config or modify.
 -duplex
 For Ethernet 10/100 interfaces only, specifies the duplex mode as
 either half or full. The default is full. The -mode argument must
 be set to config or modify.
Session Functions
992
 -enforce_mtu_on_rx
 Enforces MTU for Rxcontrol packets or not. Possible values are
 true or false. When you set this argument to true, MTU will be
 enforced for Rx control packets. The default is false.
 -enable_ping_response
 Enables or disables the host to repsonse to ping. Valid values
 are 0 (disable) and 1 (enable). The default is 0. You must set
 -mode config or modify.
 -flow_control
 Enables or disables data transmission rate management. Enabling
 flow control sends a PAUSE frame to temporarily halt the
 transmission of data from the sender, so it does not send data
 faster than another computer can receive it. Only ports
 configured for full-duplex mode can send PAUSE frames (see the
 description for -duplex). Valid values are true and false. The
 default is false (disable).
 -framing
 Specifies the type of framing format for a POS interface.
 Possible values are sonet and sdh. The default is sonet.
 sonet - Synchronous Optical Network (SONET), a standard for
 sending data over fiber-optic cables.
 sdh - Synchronous Digital Hierarchy (SDH), SONET's international
 equivalent.

 This argument is available when you specify -speed ether10000,
 -intf_mode atm, -intf_mode pos_hdlc, or -intf_mode pos_ppp.
 -gateway
 The default gateway for routing the IPv4 address you specified in
 the -intf_ip_addr argument. The default gateway is the router
 that Spirent HLTAPI will use to reach hosts not on its local
 network. The -mode argument must be set to either config or
 modify.
 -gateway_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate gateway IPv4 addresses for
 the router's sub-interface. The default value is 0.0.0.1. The -mode
 argument must be set to either "config" or "modify".
 -internal_ppm_adjust
 Specifies the parts per million (PPM) value to adjust the IEEE clock
 frequency tolerance. This value affects the transmit clock frequency
 when -transmit_clock_source is set to internal_ppm_adj. Possible
 values range from -100 to 100. The default value is 0. When you
 need to specify a negative value, you must encompass the value by
 double quotation marks and braces, such as {"-4"} or "{-4}".
 Other formats like "-4", {-4} or -4 are not acceptable. You can
 use this argument when -device_type is set to ptpMaster and
 -announce_message_enable is set to 1.
 -intf_ip_addr
 Specifies the IPv4 address assigned to the port. You must set
 this argument to use IPv4 routing. Also, the -mode argument
 must be set to either config or modify.
 -intf_ip_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate IPv4 sub-interface
 addresses. The default value is 0.0.0.1. The -mode argument must
 be set to either config or modify.
 -intf_mode
 Sets the interface type. Possible values are ethernet and
 pos_hdlc, pos_ppp, atm and fc. Specify the interface mode only
 when you first configure the port using -mode config. This
Session Functions
993
 argument is mandatory.
 ethernet - Ethernet is a Layer 2 transmission protocol for
 transporting data over coaxial cables and twisted pair
 wires.
 pos_hdlc - Packet over SONET (POS) interface for HDLC
 (High-level Data Link Control). POS is an interface for
 transporting data over SONET (Synchronous Optical Network).
 HDLC is a Layer 2 transmission protocol that embeds
 information in a data frame.
 pos_ppp - Packet over SONET (POS) interface for PPP (Point-to-
 Point protocol)
 atm - Asynchronous Transfer Mode (ATM)

 fc - Fibre Channel (FC)
 -ipv6_intf_addr
 Specifies the IPv6 address assigned to the port. You must set
 this argument to use IPv6 routing. To specify the IPv6 address,
 the -mode argument must be set to either config or modify.
 -ipv6_intf_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate IPv6 sub-interface
 addresses. The default value is 0000::1. The -mode argument must
 be set to either config or modify.
 -ipv6_gateway
 Specifies the IPv6 gateway address assigned to the port. The
 -mode argument must be set to either config or modify.
 -ipv6_gateway_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate gateway IPv6 addresses for
 the router's sub-interfaces.
 The default value is 0000::1. The -mode argument must be set to
 either config or modify.
 -ipv6_resolve_gateway_mac
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables MAC resolving for the IPv6 gateway. Possible
 values are true (enable) and false (disable). The default value is
 true. If this argument is set to false, ARP will not resolve.
 You must set the -mode argument to either config or modify.
 -ipv6_prefix_length
 The prefix length for the IPv6 address specified with the
 -ipv6_intf_addr argument. The -mode argument must be set to
 either config or modify. You must also specify the
 -ipv6_intf_addr argument.
 -lais_lrdi_threshold
 Specifies the number of consecutive frames for which the line
 Alarm Indicating Signal (AIS) and line Remote Defect Indication
 (RDI) must be present before being reported. Possible values
 range from 5-65535. The default is 5.
 -mode
 Specifies what action to take. Possible values are config,
 modify, or destroy. The default is config. The value of config is
 the handle of the port to configure. The value of modify is the
 handle of the port to modify. The value of destroy is the handle
 of the port to delete. This argument is mandatory. The modes are
 described below:
 config - Sets the initial interface values for the specified
 port. After you have connected to a chassis, you must call
 the interface_config function for each port, specifying this
Session Functions
994
 mode and any additional arguments to configure the port.
 modify - Modifies the specified port with the values you
 provided.
 destroy - Releases the system resources used by the specified
 port.
 -max_recv_size
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the maximum frame size. Possible values range from 64
 to 2120. The default is 2112.
 -netmask
 Defines the netmask to use for the IP address of this port. The
 -mode argument must be set to either config or modify.
 -path_signal_label
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the contents of the C2 byte as the path signal label.
 Possible values are described below. The default is HDLC.
 HDLC - HDLC Path Signal Label
 PPP - Point-to-Point Protocol (PPP) Path Signal Label
 ATM - Asynchronous Transfer Mode Path Signal Label
 ETHERNET_10G_WAN - Ethernet 10G Wan Path Signal Label
 This argument is available when you specify -speed ether10000.
 -phy_mode
 Specifies the physical type of connection to the port. Possible
 values are copper or fiber. The -mode argument must be set to
 config or modify. The default value is copper.
 Note: When using a dual-mode card chassis, you must specify
 -phy_mode as copper or fiber, otherwise zero streamblock might be
 resulted.
 -rx_equalization
 Specifies the tolerance for the signal on the Rx port. Modifying
 the value may result in signal loss on the Rx port. That
 depends on the optics being used and the strength
 of the signal being transmitted by the peer. Possible values
 range from 0 to 15. The default value is 8. This argument
 is available when -speed is set to ether100Gig or ether40Gig.#
 -port_handle
 Specifies the handle of the port to configure. A port handle
 is a value that uniquely identifies a port on a chassis. The
 port_handle value is obtained from the connect function. To
 configure a port, you must specify at least one port handle in
 this function. This argument is mandatory.
 -port_mode
 Specifies whether the port is connected to a local area network
 (LAN) or to a wide-area network (WAN). Possible values are LAN or
 WAN. The -mode argument must be set to config or modify. The
 default value is WAN.

 -receiver_ready_delay_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the receiver ready delay mode. Possible values are
 fixed and random.

 fixed Delay a Receiver Ready (R_RDY) message for a specified
 fixed time

 random Delay an R_RDY message for a specified random time period 
Session Functions
995
 between the maximum and the minimum time

 The default value is fixed.
 -receiver_ready_delay_max
 Spirent Extension (for Spirent HLTAPI only).
 Maximum delay time. This argument is only available when
 -receiver_ready_delay_mode is set to random. Possible values
 range from 0 to 500000. The default is 100.

 -receiver_ready_delay_min
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a fixed delay time when -receiver_ready_delay_mode is
 set to fixed, or the minimum delay time when
 -receiver_ready_delay_mode is set to random. Possible values
 range from 0 to 500000. The default is 0.

 -receiver_ready_delay_units
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the unit of time measurement that you want to apply to
 your delay. Possible values are ms (milliseconds) and us
 (microseconds). The default is ms.
 -receiver_timeout
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the receive timeout counter. Possible values range from
 1 to 65535. The default is 12.
 -rx_credits
 Spirent Extension (for Spirent HLTAPI only).
 Number of frames the port can receive. Possible values range from
 1 to 65535. The default is 16.

 -resolve_gateway_mac
 Spirent Extension (for Spirent HLTAPI only).
 Enables/disables MAC resolving for the IPv4 gateway. Possible
 values are true (enable) and false (disable). The default value is
 true. If this argument is set to false, ARP will not resolve. You must
 set the -mode argument to either config or modify.
 -scramble
 Enables or disables scrambling of the transmit SONET/SDH payload
 using a self-synchronizing x^43 + 1 scrambler. This argument is
 available in 10G WAN mode only. Valid values are true and false.
 The default is true (enable). You can use this argument when
 -mode is set to config or modify and -speed is set to ether10000.
 -scheduling_mode
 Specifies the traffic load scheduling mode. Possible values are
 described below:
 port_Based - The load is controlled at port level; guarantees a
 fixed interframe gap (IFG) for Layer 2 testing. The order of
 frames sent is determined by the order of the configured
 stream blocks.
 rate_based - Use this mode to allow multiple load values for
 streams within the same stream block.
 priority_based - High-priority stream blocks are scheduled first,
 lower priority stream blocks are fit into gaps left available
 by higher priority stream blocks.
 manual_based - Use this scheduling mode to configure tightly
 controlled traffic for functional testing.
 The default value is rate_based.
Session Functions
996
 -speed
 Sets the line speed for the port. This value is only mandatory
 the first time an interface is configured.

 For Ethernet (-intf_mode ethernet), possible values are ether10,
 ether100, ether1000, ether10000, ether100Gig, and ether40Gig. When
 -phy_mode is set to copper, the default speed is ether10. When
 -phy_mode is set to fiber, the speed automatically defaults to
 the correct speed. Only ether10000 (SPEED_10G) is supported on
 Ethernet 10 Gig ports. ether100Gig (SPEED_100G) is supported on
 Ethernet 100 Gig ports. ether40Gig (SPEED_40G) is supported on
 Ethernet 40 Gig ports.
 For POS (-intf_mode pos), possible values are ether10, ether100,
 ether1000, ether10000, ether9_286, oc3, oc12, oc48, and oc192. The
 default is oc192.

 For FC (-intf_mode fc), possible values are ether2000, ether4000,
 ether8000, and ether10000. The default speed is ether2000.
 Note: SONET transmission speeds are referred to as OC1.
 -src_mac_addr
 Defines the source MAC address for a Gigabit Ethernet or Gigabit
 Ethernet GBIC interface. You can enter this address in one of the
 following formats:
 aaaa.bbbb.cccc
 aaaa:bbbb:cccc
 aa.bb.cc.dd.ee.ff
 aa:bb:cc:dd:ee:ff
 aa-bb-cc-dd-ee-ff
 The default is 0000.0000.0000. The -mode argument must be set to
 either config or modify.
 -src_mac_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the modifier for the interface MAC address.
 The default is 00:00:00:00:00:01.

 -topology
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of the point-to-point link. Possible values
 are PTP_PRIVATE and PTP_PUBLIC.

 PTP_PRIVATE Point-to-point private link
 PTP_PUBLIC Point-to-point public link
 The default value is PTP_PUBLIC.

 -transmit_clock_source
 Specifies the clock source for synchronous transmissions. You
 can set the transmit clock source only for Ethernet 10/100
 interfaces. Possible values are:
 internal - Specifies that a crystal on the interface provides the
 transmit clock
 bits - Specifies that a Building Integrated Timing Supply is used
 as the transmit clock.
 loop - Specifies that a clock recovered from the received data is
 used as the transmit clock
 external - Specifies that the transmit clock signals are provided
 by external reference sources such as GPS and CDMA.
 internal_ppm_adj - Adjusts the clock PPM within the
 IEEE clock frequency. 
Session Functions
997
 This argument is available when -speed is set to ether100Gig or
 ether40Gig.
 The default is internal.

 -traffic_class
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the traffic class. Possible values are TRAFFIC_CLASS_2
 and TRAFFIC_CLASS_3.

 TRAFFIC_CLASS_2 Guaranteed delivery for connectionless traffic

 TRAFFIC_CLASS_3 Best-effort connectionless service

 The default value is TRAFFIC_CLASS_3.
 -transmit_clock_source
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the transmit clock source. Possible values are:
 INTERNAL Crystal on the interface provides the clock
 INTERNAL_PPM_ADJ Offset in parts per million

 The default value is INTERNAL.
 -tx_credits
 Spirent Extension (for Spirent HLTAPI only).
 Number of frames the port can send. This argument is only
 available when -topology is set to ptp_private. Possible values
 range from 1 to 65535. The default value is 16.
 -tx_preemphasis_main_tap
 Sets the pre-emphasis main tap on the Tx port. The sum of
 the values of -tx_preemphasis_main_tap and
 -tx_preemphasis_post_tap must be less than 32. Possible values
 range from 0 to 31. The default value is 21. This argument is
 available when -speed is set to ether100Gig or ether40Gig.
 -tx_preemphasis_post_tap
 Sets the pre-emphasis post tap on the Tx port. The sum of
 -tx_preemphasis_main_tap and -tx_preemphasis_post_tap values must
 be less than 32. The parameter is used only for Ethernet 40Gig
 and 100Gig interfaces. Possible values range from 0 to 15. The
 default value is 8. This argument is only available when -speed
 is set to ether100Gig or ether40Gig.
 -tx_s1
 Specifies the synchronization status S1 byte value to be
 transmitted. Possible values range from 0 to 65535. The default
 is 0.
 -tx_fcs
 Specifies the value for the Frame Check Sequence size for the
 transmitting side of each interface. Possible values are 16 and
 32. The default is 32.
 -vlan
 Enables or disables VLAN on the traffic generation tool
 interfaces. Valid values are 0 and 1. The default is 1 (enable).
 The -mode argument must be set to config or modify.
 If the -vlan argument is set to 0, no VLAN Ethernet Interface or
 Q-in-Q Ethernet Interface will be created even though -vlan_id
 and -vlan_outer_id have been provided.
 -vlan_id
 Spirent Extension (for Spirent HLTAPI only).
 The VLAN ID of the first VLAN sub-interface. Possible values range
 from 0 to 4095. The is no default value for this option. If the
 -vlan argument is set to 1 and the -vlan_id argument is provided,
 VLAN Ethernet Interface will be set.
Session Functions
998
 -vlan_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN IDs to use when generating
 multiple VLANs. Possible values range from 1 to 4096. The
 default is 1.
 -vlan_id_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the value to increment the VLAN IDs. You must specify
 this step when -vlan_id_count is greater than 1. The default
 value is 1. Possible step values range from 0 to 4095.
 -vlan_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 VLAN user priority assigned to emulated sub-interfaces. Possible
 values range from 0 to 7. The default is 0.
 -vlan_cfi
 Spirent Extension (for Spirent HLTAPI only).
 VLAN CFI assigned to emulated sub-interfaces. Possible values are
 1 and 0. The default is 0.
 -vlan_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 The outer VLAN ID of the first outer VLAN sub-interface. Possible
 values range from 0 to 4095. The is no default value for this
 option. If the -vlan argument is set to 1 and both -vlan_id
 argument and the -vlan_outer_id argument is provided, then the
 Q-in-Q Ethernet Interface will be set.
 -vlan_outer_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of outer VLAN IDs to use when generating
 multiple outer VLANs. Possible values range from 1 to 4096.
 The default is 1.
 -vlan_outer_id_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the value to increment the outer VLAN ID.
 You must specify this step when -vlan_outer_id_count is
 greater than 1. The default value is 1. Possible step
 values range from 0 to 4095.
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Outer VLAN user priority assigned to emulated interface.
 Possible values range from 0 to 7. The default is 0.
 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Outer VLAN CFI assigned to emulated interface.
 Possible values are 1 and 0. The default is 0.
 -qinq_incr_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the increment mode for Q-in-Q Ethernet interfaces.
 This parameter only applies to Q-in-Q Ethernet interfaces.
 Possible values are inner, outer and both. The
 default is both. The modes are described below:
 inner - The inner VLAN ID is incremented first until
 the specified number of inner VLANs is
 exhausted, then the outer VLAN ID is
 incremented. This continues in a round-robin
 fashion until the number of outer VLANs is
 exhausted.
 outer - The outer VLANs ID is incremented first
 until the specified number of outer VLANs is
 exhausted, then the inner VLAN ID is
Session Functions
999
 incremented. This continues in a round-robin
 fashion until the number of inner VLANs is
 exhausted.
 both - The inner VLAN ID and outer VLAN ID increment
 at the same time. When inner VLAN count is
 larger than the outer VLAN count, then the
 inner VLAN ID will continues in a round-robin
 fashion until the number of the outer VLAN ID
 is exhausted. A similar process takes place when
 the outer VLAN count is larger than the inner
 VLAN count.
 For example, if -vlan_id is set to 100, -vlan_outer_id 200
 -vlan_id_count 4, -vlan_outer_id_count 2, the -vlan_id_step
 argument 1 and -vlan_outer_id_step 1, the results will be:
 For inner mode, generated values will be:
 (100,200) (101 200) (102,200) (103 200)
 (100,201) (101 201) (102,201) (103 201)
 For outer mode, generated values will be:
 (100,200) (100 201) (101,200) (101 201)
 (102,200) (102 201) (103,200) (103 201)
 For both mode, generated values will be:
 (100,200) (101 201) (102,200) (103 201)
 -pfc_negotiate_by_dcbx
 Enables or disables Data Center Bridging Capability
 Exchange Protocol (DCBX) via LLDP to negotiate the
 priority flow control settings or manually select priority
 flow control settings. Possible values are 0 (disable)
 and 1 (enable). The default value is 0. You can use
 this argument when you specify -speed ether40Gig or ether10000.
 -priority0
 Enables or disables the priority 0 queue for
 Priority Flow Control (PFC)frames. Possible values
 are 0 (disable) and 1 (enable). The default value is 0.
 This argument is only available when you specify
 -speed ether40Gig or ether10000 and -pfc_negotiate_by_dcbx 0.
 -priority1
 Enables or disables the priority 1 queue for PFC frames. Possible
 values are 0 (disable) and 1 (enable). The default value is 0.
 This argument is only available when you specify -speed ether40Gig
 or ether10000 and -pfc_negotiate_by_dcbx 0.
 -priority2
 Enables or disables the priority 2 queue for PFC frames. Possible
 values are 0 (disable) and 1 (enable). The default value is 0.
 This argument is only available when you specify -speed ether40Gig
 or ether10000 and -pfc_negotiate_by_dcbx 0.
 -priority3
 Enables or disables the priority 3 queue for PFC frames. Possible
 values are 0 (disable) and 1 (enable). The default value is 0.
 This argument is only available when you specify -speed ether40Gig
 or ether10000 and -pfc_negotiate_by_dcbx 0.
 -priority4
 Enables or disables the priority 4 queue for PFC frames. Possible
 values are 0 (disable) and 1 (enable). The default value is 0.
 This argument is only available when you specify -speed ether40Gig
 or ether10000 and -pfc_negotiate_by_dcbx 0.
 -priority5
 Enables or disables the priority 5 queue for PFC frames. Possible
 values are 0 (disable) and 1 (enable). The default value is 0.
 This argument is only available when you specify -speed ether40Gig
 or ether10000 and -pfc_negotiate_by_dcbx 0.
Session Functions
1000
 -priority6
 Enables or disables the priority 6 queue for PFC frames. Possible
 values are 0 (disable) and 1 (enable). The default value is 0.
 This argument is only available when you specify -speed ether40Gig
 or ether10000 and -pfc_negotiate_by_dcbx 0.
 -priority7
 Enables or disables the priority 7 queue for PFC frames. Possible
 values are 0 (disable) and 1 (enable). The default value is 0.
 This argument is only available when you specify -speed ether40Gig
 or ether10000 and -pfc_negotiate_by_dcbx 0.
 -rx_hec
 Enables ATM HEC correction, Valid values are 0 and 1. The default
 is 0 (disable). The -mode argument must be set to config or
 modify.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the
 Save as HLTAPI function. They will not be generated when you save Spirent
 TestCenter configurations to HLTAPI scripts using Save as HLTAPI. To test
 with these arguments, you must specify them manually as necessary.
 -arp_cache_retrieve
 -arpnd_report_retrieve
 -arp_target
 -arp_send_re
 -arp_req_timer
 -qinq_incr_mode
 -vlan_id_count
 -vlan_outer_id_count
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -aps
 -aps_arch
 -aps_channel
 -aps_request_1_1
 -aps_request_1_n
 -aps_switch_mode
 -auto_line_rdi
 -auto_line_rei
 -auto_path_rdi
 -auto_path_rei
 -crlf_path_trace
 -ignore_pause_frames
 -interpacket_gap
 -line_ais
 -line_bip24
 -line_bip384
 -line_bip96
 -line_rdi
 -line_rei
 -line_type
 -long_lof_wait
 -op_mode
 -output_enable
 -path_ais
 -path_bip8
 -path_rdi
 -path_rei
 -path_type
 -pause_length
 -prdi_threshold
 -rx_c2
 -rx_enhanced_prdi
 -rx_fcs
 -rx_scrambling
 -section_bip8
Session Functions
1001
 -section_unequip
 -signal_fail_ber
 -ss_bits_pointer_interp
 -tx_c2
 -tx_enhanced_prdi
 -tx_k2
 -tx_scrambling
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
 arpnd_status Success (1) or failure (0) of the ARP operation.
 arpnd_cache Displays the ARP cache table on the specified port
 when -arp_cache_retrieve is set to 1.
Description:
 The interface_config function sets, modifies, or deletes a port
 configuration. Use the -port_handle argument to identify the port. (The
 port handle value is contained in the keyed list returned by the connect
 function.) Use the -mode argument to specify the action to perform. (See
 the -mode argument description for information about the actions.)
 You can set the interface type (see -intf_mode) to ethernet,
 pos_hdlc, pos_ppp, atm or fc.
 Here is an example of a configuration for POS (Packet over SONET) HDLC:
 ::sth::interface_config -mode config \
 -port_handle $p0 \
 -speed oc192 \
 -intf_mode pos_hdlc \
 -control_plane_mtu 1500 \
 -framing SONET
 To enable ARP, you must:
 1. Set enable ARP at the port level:
 sth::interface_config -arp_send_req 1
 This request enables ARP for all stream blocks under the specified
 port.
 2. Specify the MAC discovery gateway for the stream block:
 sth::traffic_config -mac_discover_gw <a.b.c.d>.
 3. Call the sth::traffic_control -action run -port_handle $porthandle
 function.
 Example:
 sth::interface_config -arp_send_req 1
 sth::traffic_config -mac_discover_gw 90.37.0.1
 sth::traffic_control -action run -port_handle $porthandle
 To disable ARP, specify sth::interface_config -arp_send_req 0.
 To use Ethernet 10G fiber for a WAN card, you must specify the
 following:
 ::sth::interface_config
 -mode config \
 -port_handle $p0 \
 -port_mode WAN
 -speed ether10000
Examples:
 sth::interface_config -port_handle $qinq_port \
 -mode config \
 -intf_ip_addr 10.0.0.2 \
Session Functions
1002
 -intf_ip_addr_step 0.1.0.0 \
 -gateway 10.0.0.1\
 -gateway_step 0.1.0.0 \
 -autonegotiation 1 \
 -arp_send_req 1 \
 -arp_req_retries 10 \
 -phy_mode copper \
 -vlan_id 100 \
 -vlan_id_count 5\
 -vlan_outer_id 200 \
 -vlan_outer_id_count 2 \
 -vlan 1 \
 -vlan_outer_id_step 1 \
 -vlan_outer_user_priority 6 \
 -vlan_outer_cfi 1 \
 -qinq_incr_mode "both"
 The following example applies the ARP to the port. It also checks the ARP
 results and retrieves the ARP/Nd Statistics .
 ::sth::interface_config -port_handle $portHnd\
 -mode modify \
 -arp_send_req 1\
 -arp_target port\
 -arpnd_report_retrieve 1]
 Output:
 <ARP SUCCESS>
 {arpnd_status 1} {arpnd_cache } {arpnd_report {{arpnd_status SUCCESSFUL}
 {failed_arpnd_count 0} {successful_arpnd_count 1} {attempted_arpnd_count 1}}}
 {status 1}

 <ARP FAILURE>
 {arpnd_status 1} {arpnd_cache } {arpnd_report {{arpnd_status
 FAILURE} {failed_arpnd_count 1} {successful_arpnd_count 0}
 {attempted_arpnd_count 1}}} {status 1}
To configure an FC interface on the specified port:

 set rtn [sth::interface_config \
 -mode config \
 -port_handle port1 \
 -speed ether4000 \
 -intf_mode fc\
 -data_path_mode normal\
 -internal_ppm_adjust 50\
 -control_plane_mtu 100\
 -transmit_clock_source internal_ppm_adj\
 -receiver_ready_delay_min 10\
 -receiver_ready_delay_mode fixed\
 -receiver_ready_delay_units us\
 -max_recv_size 100\
 -receiver_timeout 200\
 -rx_credits 300\
 -topology ptp_public\
 -traffic_class traffic_class_2\
 -tx_credits 400]
Sample Input: See Examples.
Sample Output: {status 1}
 If there is an error, you will see: {status 0} {log {Error message }}
Notes:
 Spirent HLTAPI supports the new dot format for setting the port
 parameters (for example, 00.00.00.00.00.01) as well as the previous format
 which uses hyphens (for example, 00-00-00-00-00-01).
End of Procedure Header
Session Functions
1003
sth::interface_stats
Name:
 sth::interface_stats
Purpose:
 Returns interface statistics for the specified Ethernet port.
 Statistics include interface configuration parameters such as port handle,
 interface type, card name, port name, and interface speed as well as
 statistics about the Ethernet attributes associated with the port. These
 attributes include the port's MAC address, number of frames or bytes
 successfully transmitted, number of frames or bytes successfully received,
 number and type of collisions that occurred, the port speed and duplex
 setting, and the link state of the port.
Synopsis:
 sth::interface_stats
 -port_handle <handle> | -port_handle_list <handle_list>
 [-properties <property_list>]

Arguments:
 -port_handle
 The name of the port for which you want information, for example, port1. You
 must specify -port_handle or -port_handle_list list, but not both.

 -port_handle_list
 A list of handles of the ports for which you want information, for example,
 -port_handle_list $portList. You must specify -port_handle or
 -port_handle_list list, but not both.

 -properties
 Specifies a set of analyzer/generator attributes for which you want the
 results. You can use the -db_file argument alone with the corresponding
 action in the sth::traffic_control funtion to determine whether to return EOT
 or run-time results. If no property is specified, all properties will be
 returned. The available attributes are listed below:

 Common for both EOT and run-time results:

 Analyzer Generator

 ana.rx_frames gen.tx_frames
 ana.rx_bytes gen.tx_bytes
 ana.rx_fcs_error gen.tx_total_mpls_frame_count
 ana.rx_runt_frames gen.tx_generator_frame_count
 ana.rx_sig_count gen.tx_generator_sig_frame_count
 ana.rx_max_frame_length gen.tx_generator_octet_count
 ana.rx_prbs_fill_byte_count gen.tx_generator_ipv4_frame_count
 ana.rx_jumbo_frame_count gen.tx_generator_ipv6_frame_count
 ana.rx_ipv6_over_ipv4_frame_count gen.tx_generator_vlan_frame_count
 ana.rx_mpls_frame_count gen.tx_generator_mpls_frame_count
 ana.rx_ipv4_CheckSum_error_count gen.tx_generator_crc_error_frame_count
 ana.rx_tcp_CheckSum_error_count gen.tx_generator_l3_checksum_error_count
 ana.rx_oversize_frame_count gen.tx_generator_l4_checksum_error_count
 ana.rx_prbsbit_error_count gen.tx_generator_l3_checksum_error_rate
 ana.rx_trigger1_count gen.tx_generator_l4_checksum_error_rate
 ana.rx_trigger2_count gen.tx_generator_crc_error_frame_rate
 ana.rx_trigger4_count gen.tx_generator_abort_frame_rate
 ana.rx_trigger5_count gen.tx_generator_undersize_frame_count
 ana.rx_trigger6_count gen.tx_generator_oversize_frame_count
 ana.rx_combo_trigger_count gen.tx_generator_jumbo_frame_count
 ana.rx_pfc_frame_rate gen.tx_generator_abort_frame_count
 ana.rx_fcoe_frame_rate gen.tx_hw_frame_count
 ana.rx_pfc_frame_count gen.tx_pfc_frame_count 
Session Functions
1004
 ana.rx_fcoe_frame_count

 Specific to run-time results:

 ana.rx_byte_rate gen.tx_generator_frame_rate
 ana.rx_hw_frame_count gen.tx_generator_ipv4_frame_rate
 ana.rx_frame_rate gen.tx_generator_ipv6_frame_rate
 ana.rx_ipv4_frame_rate gen.tx_generator_jumbo_frame_rate
 ana.rx_ipv6_frame_rate gen.tx_generator_mpls_frame_rate
 ana.rx_ipv6_over_ipv4_frame_rate gen.tx_generator_octet_rate
 ana.rx_jumbo_frame_rate gen.tx_generator_oversize_frame_rate
 ana.rx_pause_frame_rate gen.tx_generator_sig_frame_rate
 ana.rx_sig_rate gen.tx_generator_undersize_frame_rate
 gen.tx_generator_vlan_frame_rate
gen.tx_total_frame_rate
gen.tx_total_mpls_frame_rate
gen.tx_total_octet_rate

Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 intf_type The port type.
 card_name The name of the interface card.
 port_name The name of the port on the interface card.
 intf_speed The speed of the port in megahertz (MHz). Valid values
 are 10, 100, 1000, or 10000.
For Ethernet 10/100 interfaces, the following statistics are also returned:
 link The link state of the port: 1 if the port is up or 0 if it
 is down.
 duplex The port's duplex mode: full or half.
For Gigabit Ethernet/GBIC interfaces, the following statistics are also returned:
 link The link state of the port: 1 if the port is up or 0 if it
 is down.
 macaddress Returns the MAC address.
 Additionally, the following counters are available for the transmitting and
 receiving ports for 10/100, GBIC, and 10GBIC speed cards:
 Note: With EOT results, after you stop the traffic, all rates are set to
 0; therefore, they are not returned in the keyed list.
 rx_byte_rate The rate at which bytes are received.
 rx_bytes Number of bytes that were received.

 rx_combo_trigger_count
 Number of frames captured by all the triggers
 rx_combo_trigger_rate
 Number of frames received by the all the triggers over the
 last one-second interval
 rx_fcs_error
 Received CRC-error frame count. The number of packets
 received that had a length between 64 and 1518 octets
 (excluding framing bits, but including FCS octets) containing
Session Functions
1005
 a bad FCS and an integral number of octets.
 rx_fcs_error_rate
 Number of FCS error frames received over the last
 one-second interval
 rx_frame_rate
 Rate at which frames are received
 rx_frames
 Number of frames that were successfully received
 rx_fcoe_frame_rate
 Number of FCoE frames received over the last one-second interval

 rx_fcoe_frame_count
 Number of FCoE frames received

 rx_hw_frame_count
 Number of hardware frames received
 rx_icmp_frame_rate
 Number of ICMP frames received over the last one-second
 interval
 rx_ipv4_chksum_error_count
 Number of frames with IP header checksum error received
 rx_ipv4_frame_rate
 Number of IPv4 frames received over the last one-second interval
 rx_ipv6_frame_rate
 Number of IPv6 frames received over the last one-second interval
 rx_ipv6_over_ipv4_frame_count
 Number of IPv6 over IPv4 frames received
 rx_ipv6_over_ipv4_frame_rate
 Number of IPv6 over IPv4 frames received over the last
 one-second interval
 rx_jumbo_frame_count
 Number of Jumbo frames received
 rx_jumbo_frame_rate
 Number of Jumbo frames received over the last one-second interval
 rx_max_frame_length
 Maximum frame length in bytes
 rx_mpls_frame_count
 Number of MPLS frames received
 rx_mpls_frame_rate
 Number of MPLS frames received over the last one-second interval
 rx_oversize_frame_count
 Number of oversize frames received
 rx_oversize_frame_rate
 Number of oversize frames received over the last one-second
 interval
 rx_pause_frame_rate
 Number of pause frames received over the last one-second interval
 rx_pfc_frame_rate
 Number of PFC frames received over the last one-second interval

 rx_pfc_frame_count
 Number of PFC frames received 
Session Functions
1006

 rx_prbs_bit_rate
 Number of PRBS bit error frames received over the last
 one-second interval
 rx_prbs_fill_byte_count
 Number of PRBS bits received
 rx_prbsbit_error_count
 Number of PRBS bit errors received
 rx_runt_frames Number of undersize frames received (Count for each carrier
 event in which the byte count was less than 64)
 rx_sig_count
 Number of Spirent Signature frames received
 rx_sig_rate
 The rate at which Spirent Signature frames are received
 rx_tcp_chksum_error_count
 Number of frames with TCP checksum error received
 rx_tcp_frame_rate
 Number of TCP frames received over the last one-second
 interval.
 rx_trigger1_count
 Number of frames captured by trigger 1
 rx_trigger1_rate
 Number of frames received by trigger 1 over the last
 one-second interval
 rx_trigger2_count
 Number of frames captured by trigger 2
 rx_trigger2_rate
 Number of frames received by trigger 2 over the last
 one-second interval
 rx_trigger3_count
 Number of frames captured by trigger 3
 rx_trigger3_rate
 Number of frames received by trigger 3 over the last
 one-second interval
 rx_trigger4_count
 Number of frames captured by trigger 4
 rx_trigger4_rate
 Number of frames received by trigger 4 over the last
 one-second interval
 rx_trigger5_count
 Number of frames captured by trigger 5
 rx_trigger5_rate
 Number of frames received by trigger 5 over the last
 one-second interval
 rx_trigger6_count
 Number of frames captured by trigger 6
 rx_trigger6_rate
 Number of frames received by trigger 6 over the last one-second
 interval
 rx_trigger7_count
 Number of frames captured by trigger 7
Session Functions
1007
 rx_trigger7_rate
 Number of frames received by trigger 7 over the last
 one-second interval
 rx_udp_chksum_err_rate
 Number of UDP checksum error frames received over the last
 one-second interval
 rx_udp_frame_rate
 Number of UDP frames received over the last one-second
 interval
 rx_undersize_frame_rate
 Number of undersize frames received over the last one-second
 interval
 tx_bytes
 Number of bytes that were successfully transmitted
 tx_frames
 Number of frames that were successfully transmitted
 tx_generator_abort_frame_count
 Number of Abort frames generated
 tx_generator_abort_frame_rate
 Number of Abort frames generated over the last one-second interval
 tx_generator_crc_error_frame_count
 Number of CRC error frames generated
 tx_generator_crc_error_frame_rate
 Number of CRC error frames generated over the last
 one-second interval
 tx_generator_frame_count
 Number of frames generated
 tx_generator_frame_rate
 Total number of frames generated over the last one-second
 interval
 tx_generator_ipv4_frame_count
 Number of IPv4 frames generated
 tx_generator_ipv4_frame_rate
 Total number of IPv4 frames generated over the last
 one-second interval
 tx_generator_ipv6_frame_count
 Number of IPv6 frames generated
 tx_generator_ipv6_frame_rate
 Total number of IPv6 frames generated over the last
 one-second interval
 tx_generator_jumbo_frame_count
 Number of Jumbo frames generated
 tx_generator_jumbo_frame_rate
 Number of jumbo frames generated over the last one-second
 interval
 tx_generator_l3_checksum_error_count
 Number of Layer 3 checksum errors generated
 tx_generator_l3_checksum_error_rate
 Number of Layer 3 header checksum errors generated over
 the last one-second interval
Session Functions
1008
 tx_generator_l4_checksum_error_count
 Number of Layer 4 checksum errors generated
 tx_generator_l4_checksum_error_rate
 Number of Layer 4 header checksum errors generated over the
 last one-second interval
 tx_generator_mpls_frame_count
 Number of Layer 3 header checksum errors generated over
 the last one-second interval
 tx_generator_mpls_frame_rate
 Number of MPLS frames generated
 tx_generator_octet_count
 Number of bytes generated.
 tx_generator_octet_rate
 Total number of bytes generated over the last one-second
 interval
 tx_generator_oversize_frame_count
 Number of oversize frames generated
 tx_generator_oversize_frame_rate
 Number of oversize frames generated over the last one-second
 interval
 tx_generator_sig_frame_count
 Number of Spirent signature frames generated
 tx_generator_sig_frame_rate
 Total number of Spirent signature frames generated over the
 last one-second interval
 tx_generator_undersize_frame_count
 Number of undersize frames generated
 tx_generator_undersize_frame_rate
 Number of undersize frames generated over the last
 one-second interval
 tx_generator_vlan_frame_count
 Number of VLAN frames generated
 tx_generator_vlan_frame_rate
 Total number of VLAN frames generated over the last
 one-second interval
 tx_hw_frame_count
 Number of hardware frames transmitted
 tx_pfc_frame_count
 Number of PFC frames generated

 tx_total_frame_rate
 Total number of frames transmitted over the last one-second
 interval.
 tx_total_ipv4_frame_count
 Total number of IPv4 frames transmitted
 tx_total_ipv4_frame_rate
 Total number of IPv4 frames transmitted over the last
 one-second interval
 tx_total_ipv6_frame_count
 Total number of IPv6 frames transmitted
 tx_total_ipv6_frame_rate
 Total number of IPv6 frames transmitted over the last 
Session Functions
1009
 one-second interval
 tx_total_mpls_frame_count
 Total number of MPLS frames transmitted
 tx_total_mpls_frame_rate
 Total number of MPLS frames transmitted over the last
 one-second interval
 tx_total_octet_rate
 Total number of bytes transmitted over the last one-second
 interval
Description:
 The sth::interface_stats function returns EOT results (by accessing the database
 file) or run-time results (by subscription of result objects). Use the -db_file
 argument with the corresponding action in the sth::traffic_control function
 to determine whether to return EOT or run-time results.

 The list of session statistics that you can retrieve from an
 Ethernet port depends on the port speed. For example, an Ethernet port with
 a speed of 10/100MBPS returns the following list: {card_name port_name
 intf_speed tx_frames rx_frames link duplex}. However, a Gigabit Ethernet
 port (1/10GBPS) returns the following list:
 {card_name port_name intf_speed tx_frames rx_frames tx_bytes rx_bytes
 link duplex mac_address rx_fcs_error rx_runt_frames}.

 Use -properties to specify a set of attributes for which you want
 results.
 The return from the interface_stats function call is a keyed list,
 containing the retrieved session stats and the command execution status,
 from which we call: keylget kList keyName to get the corresponding key
 value.
Examples:
 To return all the attributes from the specified list of ports:
 set rtn [sth::interface_stats \
 -port_handle_list $portList]

 Sample Output:
 {port1 {{intf_speed 10000} {port_name port1} {mac_address _none_} {duplex
 full} {link 1} {card_name VM-10G-V1-1P} {intf_type ethernet}
 {rx_fcoe_frame_count 0} {rx_ipv6_over_ipv4_frame_rate 0} {rx_byte_rate 67}
 {rx_prbs_fill_byte_count 0} {rx_max_frame_length 94} {rx_fcoe_frame_rate 0}
 {rx_tcp_CheckSum_error_count 0} {rx_sig_count 0}
 {rx_ipv6_over_ipv4_frame_count 0} {rx_trigger1_count 0} {rx_sig_rate 0}
 {rx_trigger2_count 0} {rx_frames 117} {rx_ipv4_CheckSum_error_count 0}
 {rx_prbsbit_error_count 0} {rx_bytes 8140} {rx_jumbo_frame_count 0}
 {rx_ipv4_frame_rate 0} {rx_trigger4_count 0} {rx_hw_frame_count 0}
 {rx_trigger5_count 0} {rx_oversize_frame_count 0} {rx_ipv6_frame_rate 0}
 {rx_jumbo_frame_rate 0} {rx_trigger6_count 0} {rx_pfc_frame_count 0}
 {rx_pause_frame_rate 0} {rx_combo_trigger_count 0} {rx_fcs_error 0}
 {rx_pfc_frame_rate 0} {rx_frame_rate 1} {rx_runt_frames 0}
 {rx_mpls_frame_count 0} {tx_total_octet_rate 125270}
 {tx_generator_sig_frame_rate 994} {tx_total_frame_rate 994}
 {tx_generator_l4_checksum_error_count 0} {tx_total_mpls_frame_count 0}
 {tx_generator_vlan_frame_count 0} {tx_generator_crc_error_frame_count 0}
 {tx_generator_abort_frame_rate 0} {tx_generator_l3_checksum_error_rate 0}
 {tx_generator_ipv4_frame_count 14945} {tx_generator_l4_checksum_error_rate 0}
 {tx_generator_crc_error_frame_rate 0} {tx_generator_vlan_frame_rate 0}
 {tx_total_mpls_frame_rate 0} {tx_generator_jumbo_frame_count 0}
 {tx_generator_octet_count 1883070} {tx_generator_ipv6_frame_count 0}
 {tx_generator_ipv4_frame_rate 994} {tx_frames 14949}
 {tx_generator_mpls_frame_rate 0} {tx_generator_oversize_frame_count 0}
 {tx_bytes 1883326} {tx_generator_jumbo_frame_rate 0}
 {tx_generator_ipv6_frame_rate 0} {tx_generator_octet_rate 125270}
 {tx_generator_abort_frame_count 0} {tx_generator_l3_checksum_error_count 0}
 {tx_hw_frame_count 0} {tx_generator_undersize_frame_count 0}
 {tx_generator_frame_count 14945} {tx_generator_oversize_frame_rate 0}
Session Functions
1010
 {tx_pfc_frame_count null} {tx_generator_sig_frame_count 14945}
 {tx_generator_undersize_frame_rate 0} {tx_generator_frame_rate 994}
 {tx_generator_mpls_frame_count 0}}} {port2 {{intf_speed 10000} {port_name
 port2} {mac_address _none_} {duplex full} {link 1} {card_name VM-10G-V1-1P}
 {intf_type ethernet} {rx_fcoe_frame_count 0} {rx_ipv6_over_ipv4_frame_rate 0}
 {rx_byte_rate 82} {rx_prbs_fill_byte_count 0} {rx_max_frame_length 126}
 {rx_fcoe_frame_rate 0} {rx_tcp_CheckSum_error_count 0} {rx_sig_count 14945}
 {rx_ipv6_over_ipv4_frame_count 0} {rx_trigger1_count 0} {rx_sig_rate 0}
 {rx_trigger2_count 0} {rx_frames 15076} {rx_ipv4_CheckSum_error_count 0}
 {rx_prbsbit_error_count 0} {rx_bytes 1892106} {rx_jumbo_frame_count 0}
 {rx_ipv4_frame_rate 0} {rx_trigger4_count 0} {rx_hw_frame_count 0}
 {rx_trigger5_count 0} {rx_oversize_frame_count 0} {rx_ipv6_frame_rate 0}
 {rx_jumbo_frame_rate 0} {rx_trigger6_count 0} {rx_pfc_frame_count 0}
 {rx_pause_frame_rate 0} {rx_combo_trigger_count 0} {rx_fcs_error 0}
 {rx_pfc_frame_rate 0} {rx_frame_rate 1} {rx_runt_frames 0}
 {rx_mpls_frame_count 0} {tx_total_octet_rate 0}
 {tx_generator_sig_frame_rate 0} {tx_total_frame_rate 0}
 {tx_generator_l4_checksum_error_count 0} {tx_total_mpls_frame_count 0}
 {tx_generator_vlan_frame_count 0} {tx_generator_crc_error_frame_count 0}
 {tx_generator_abort_frame_rate 0} {tx_generator_l3_checksum_error_rate 0}
 {tx_generator_ipv4_frame_count 0} {tx_generator_l4_checksum_error_rate 0}
 {tx_generator_crc_error_frame_rate 0} {tx_generator_vlan_frame_rate 0}
 {tx_total_mpls_frame_rate 0} {tx_generator_jumbo_frame_count 0}
 {tx_generator_octet_count 0} {tx_generator_ipv6_frame_count 0}
 {tx_generator_ipv4_frame_rate 0} {tx_frames 0} {tx_generator_mpls_frame_rate
 0} {tx_generator_oversize_frame_count 0} {tx_bytes 0}
 {tx_generator_jumbo_frame_rate 0} {tx_generator_ipv6_frame_rate 0}
 {tx_generator_octet_rate 0} {tx_generator_abort_frame_count 0}
 {tx_generator_l3_checksum_error_count 0} {tx_hw_frame_count 0}
 {tx_generator_undersize_frame_count 0} {tx_generator_frame_count 0}
 {tx_generator_oversize_frame_rate 0} {tx_pfc_frame_count null}
 {tx_generator_sig_frame_count 0} {tx_generator_undersize_frame_rate 0}
 {tx_generator_frame_rate 0} {tx_generator_mpls_frame_count 0}}} {status 1}
 To get results from specified properties for a single port:
 set rtn [sth::interface_stats \
 -port_handle port1\
 -properties "gen.tx_frames ana.rx_frames"]

 Sample Output:
 {intf_speed 10000} {port_name port2} {mac_address _none_} {duplex full}
 {link 1} {card_name VM-10G-V1-1P} {intf_type ethernet} {rx_frames 6521}
 {tx_frames 0} {status 1}

 To get results from specified properties for a list of port handles:
 set rtn [sth::interface_stats \
 -port_handle_list $portList\
 -properties "gen.tx_frames ana.rx_frames"]
 Sample Output:
 {port1 {{intf_speed 10000} {port_name port1} {mac_address _none_}
 {duplex full} {link 1} {card_name VM-10G-V1-1P} {intf_type ethernet}
 {rx_frames 31} {tx_frames 13605}}} {port2 {{intf_speed 10000}
 {port_name port2} {mac_address _none_} {duplex full} {link 1
 {card_name VM-10G-V1-1P} {intf_type ethernet} {rx_frames 14937}
 {tx_frames 0}}} {status 1}
Notes:
End of Procedure Header
sth::cleanup_session
Name:
 sth::cleanup_session
Session Functions
1011
Purpose:
 Cleans up the current test by terminating port reservations, disconnecting
 the ports from the chassis, releasing system resources, and removing the
 specified port configurations.
Synopsis:
 sth::cleanup_session
 [-port_list {list of port handles} | -port_handle {list of port
 handles} ]
 [-maintain_lock {1|0}]
 [-clean_dbfile {1|0}]
 [-clean_labserver_session {1|0}]
Arguments:
 -port_handle
 Specifies the handle(s) of the port(s) to be released. A port
 handle is a value that uniquely identifies a port on a chassis.
 Use the -port_handle argument to identify the port. The value can
 be all. When you set it to all, it means to clean up all
 of the ports that are currently used.

 -maintain_lock
 Determines whether the ports will be released during cleanup.
 Possible values are 0 and 1. If it is set to 1,
 then the ports will be deleted but not released during
 the cleanup session; if it is set to 0, the ports will be
 deleted and released. The default value is 0.
 -port_list
 Specifies the handle(s) of the port(s) to be released. A port
 handle is a value that uniquely identifies a port on a chassis.
 Use either the -port_list or -port_handle argument to identify
 the port. Same as -port_handle. The value can be all.
 When you set it to all, it means to clean up all of
 the ports that are currently used.
 -clean_dbfile
 Determines whether the saved database file will be deleted during
 cleanup. Possible values are 0 and 1. If it is set to 1, then the
 database file will be deleted during the cleanup session; if it
 is set to 0, the database file will be left untouched. The
 deafult value is 1.

 -clean_labserver_session
 Determines whether to clean the lab server session when using
 function cleanup_session. Possible values are 0 and 1. If it is
 set to 1, then the lab server session will be deleted during the
 cleanup session. The default value is 1. This argument only works
 when using labserver.
Arguments Unsupported by Save as HLTAPI:
 None.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The cleanup_session function terminates port reservations,
 disconnects the ports from the chassis, releases system resources, removes
 the specified port configurations, and terminates the routing protocols
 used by this port. Every script that uses the HLTAPI should call
 cleanup_session when the API is no longer in use.
Examples:
 The cleanup_session function shown below disconnects the port with the
Session Functions
1012
 specified handle, releasing system resources for this port and removing
 its specified port configuration.
 sth::cleanup_session -port_handle $p0
Sample Input: See Examples.
Sample Output: {status 1}
 If there is an error, you will see: {status 0} {log {Error message }}
Notes:
End of Procedure Header
sth::labserver_connect
Name:
 sth::labserver_connect
Purpose:
 Creates a new test session on the Spirent TestCenter Lab Server and connects
 to it, or connects to an existing test session on the LS. The automation client
 will connect as a controller, not as a viewer.
Synopsis:
 sth::labserver_connect
 -server_ip <IP addresses or names>
 -user_name <character string>
 -session_name <character string>
 [-create_new_session {1|0}]
Arguments:
 -server_ip
 Defines the IPv4 address or Domain Name System (DNS) name of the
 Spirent TestCenter Lab Server. This argument is mandatory.
 -create_new_session
 Determines whether to create a new test session on the Lab Server or
 not. The possible values are 1 and 0. When it is set to 1, Spirent
 HLTAPI will create a new test session on the Lab Server. The default
 value is 1.
 -user_name
 Specifies the name of the user. This argument is mandatory.
 -session_name
 -session_name and -user_name are used together to identify a test
 session. If -create_new_session is set to 0, Spirent HLTAPI will
 connect the user to a test session defined by -session_name and
 -user_name on the Lab Server. If -create_new_session is set to 1,
 Spirent HLTAPI will create a new test session with this session
 name. If a test session with the same session name and user name
 already exists, the sth::labserver_connect function will
 terminate the existent test session, and then create a new one.
 This argument is mandatory.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
Session Functions
1013
 status Success (1) or failure (0) of the
 operation.
 log An error message (if the operation
 failed).
 See the following description for more information about the returned
 keyed list.
Description:
 The sth::labserver_connect function creates a new test session on the Spirent
 TestCenter Lab Server and connects to it, or connects to an existing test
 session on the Lab Server. The automation client will connect as a controller,
 not as a viewer.
 When you create a new session, use the -server_ip argument to specify the
 Lab Server that the emulated session to be created on. (Please refer to the
 description of the -server_ip argument for more details.)
Note:
 An automation client must always be the controller on a test session.
 It cannot be a viewer. If another client is already be the controller on a test
 session, this command will fail.
Examples:
 The following function will create a new test session and connect to the test
 session:
 sth::labserver_connect
 -server_ip 10.61.30.137 \
 -create_new_session 1 \
 -session_name Demo1 \
 -user_name Tester \
 The following function will connect to an existing test session
 when you know its user name and its session name
 sth::labserver_connect
 -server_ip 10.61.30.137 \
 -create_new_session 0 \
 -session_name Demo1 \
 -user_name Tester \
Sample Output
 Here is an example of the output for the above sample example:
 {status 1} {procName labserver_connect}
End of Procedure Header
sth::labserver_disconnect
Name:
 sth::labserver_disconnect
Purpose:
 Disconnects from a test session. If you want to re-connect to the test session
 later, leave the Terminate attribute at its default setting.
Synopsis:
 sth::labserver_disconnect
 -terminate_session {1|0}
 [-server_ip <IP addresses or names>]
 [-user_name <character string>]
Session Functions
1014
 [-session_name <character string>]
Arguments:
 -server_ip
 Defines the IPv4 address or Domain Name System (DNS) name of the
 Spirent TestCenter Lab Server.
 -user_name
 Specifies the name of the user.
 -session_name
 Specifies the name of the session. This argument is used together
 with the user name (-user_name) to indicate the session ID.
 Note: All sessions connected to the labserver will be deleted if
 -user_name or -session_name is not specified.
 -terminate_session
 Determines whether to terminate the test session when the user
 disconnects from the lab server. The possible values are 1 and 0.
 This argument is mandatory.
 If it is set to 0, Spirent HLTAPI will disconnect the user from
 the Lab Server without terminating the test session. If it is set
 to 1, Spirent HLTAPI will terminate the test session when the
 user disconnects from the Lab Server.
 When -server_ip, -user_name and -session_name are provided, the
 termination action will be applied to the specific test session
 defined by -user_name and -session_name on the Lab Server
 specified by -server_ip.
 When only the argument -server_ip is provided, the termination
 action will be apply to all test sessions on the Lab Server
 specified by -server_ip.
 When of the three arguments above is provided, the termination
 action will only be applied to the currently connecting test
 session; if no test session is currently connected, an error
 message will be reported.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the
 operation.
 log An error message (if the operation
 failed).
 See the following description for more information about the returned
 keyed list.
Description:
 Disconnect from a test session. If you want to re-connect to the test session
 later, set the -terminate_session argument to 0.
Note:
 None.
Examples:
 The following function will terminate the specific test session in the Lab Server.
Session Functions
1015
 sth::labserver_disconnect
 -server_ip 10.61.30.137 \
 -terminate_session 1 \
 -session_name Demo1 \
 -user_name Tester \
 The following function will not terminate the currently connected
 test session when the function disconnects the user from the Lab Server
 sth::labserver_connect \
 -terminate_session 0 \
Sample Output
 Here is an example of the output for the above sample example:
 {status 1} {procName labserver_connect}
End of Procedure Header
sth::link_config
Name:
 sth::link_config
Purpose:
 Create Specified link between deivces.

Synopsis:
 sth::link_config
 -link_src <device handle>
 -link_dst <device handle>
 [-link_type {L2_GRE_Tunnel_Link | L3_Forwarding_Link | VLAN_Switch_Link |
 Ethernet_Bridge_Link | I-Tag_Service_Link |VRF_Customer_Link
 | OTV_Edge_Device_Link | VXLAN_VM_to_VTEP_Device_Link
 |DHCPv4_Relay_Agent_Link | Home_Gateway_Link |
 ANCP_CPE_To_DSLAM_Link |EOAM_Link | VIF_To_VIC_Link
 |VSI_to_Station_Link | Station_to_S-Comp_Link
 |IPv6_Transition_Link}]
Arguments:
 -link_src
 Specifies the source device. The device handle is returned by
 sth::interface_config or the specified protocol configuration
 functions. This argument is mandatory.

 -link_dst
 Specifies the destination device. The device handle is
 returned by sth::interface_config or the specified protocol
 configuration functions. This argument is mandatory.

 -link_type
 Specify the link type. The supported types are listed below:

 L2_GRE_Tunnel_Link
 L3_Forwarding_Link
 VLAN_Switch_Link
 Ethernet_Bridge_Link
 I-Tag_Service_Link
 VRF_Customer_Link
 OTV_Edge_Device_Link
 VXLAN_VM_to_VTEP_Device_Link
 DHCPv4_Relay_Agent_Link
 Home_Gateway_Link
 ANCP_CPE_To_DSLAM_Link
 EOAM_Link
 VIF_To_VIC_Link
 VSI_to_Station_Link
Session Functions
1016
 Station_to_S-Comp_Link
 IPv6_Transition_Link


Arguments Unsupported by Save as High Level API:
 The sth::link_config function is currently not supported by Save as HLTAPI.
Return Values:
 The function returns a keyed list using the following keys:

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)
Description:
 The sth::link_config function creates link between devices. You must specify the
 link source and destination devices. Use -link_type to determine the type of the
 link you need to create. Note that this function does not validate whether the
 device supports specified a link type.
Examples:
 The following example creates an L3 Forwarding Link between device1 and device2:
 set ret [::sth::link_config \
 -link_src $device1 \
 -link_dst $device2 \
 -link_type L3_Forwarding_Link]

 Output: {status 1}
End of Procedure Header
sth::load_xml
Name:
 sth::load_xml
Purpose:
 Loads test configurations from a previously saved XML file, and returns
 a Spirent TestCenter project handle.
Synopsis:
 sth::load_xml
 -filename
Argument:
 -filename
 Specifies the path of the XML file. This argument is mandatory.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle Spirent TestCenter project handle
 status Success (1) or failure (0) of the
 operation
 log An error message (if the operation
 failed)
Session Functions
1017
Description:
 The sth::load_xml function loads the test configurations from a previously saved
 XML file, and returns a Spirent TestCenter project handle.
 After calling load_xml, you must call sth::connect() to initialize one or more
 Spirent HLTAPI chassis and reserve ports on the initialized chassis. The number
 of the ports reserved must be equal to the number of ports specified by
 -portlist.
Examples
 The following example loads test configurations from tostest.xml
 set ret [sth::load_xml -filename "tostest.xml"];
 set ret1 [sth::connect -device $device -port_list $port_list -offline 1];
 if {![keylget ret1 status ]} {
 return "Reserve port FAILED"
 }
 puts " $ret1"
 set port1 [keylget ret1 port_handle.$device.$port1]
 set port2 [keylget ret1 port_handle.$device.$port2]
Sample Input: See Examples
Sample Output: See Examples
Notes:
End of Procedure Header
sth::start_devices
Name:
 sth::start_devices
Purpose:
 Starts all devices that are either configured manually with Spirent HLTAPI or by
 using sth::load_xml.
Synopsis:
 sth::start_devices
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the
 operation
 log An error message (if the operation
 failed)
Description:
 This function starts all devices that are either configured manually with
 Spirent HLTAPI or by using sth::load_xml. This function currently works as a
 stand-alone function, but specific device handles can be configured under it in
 the future if required.
Example:
 ::sth::start_devices
 # Wait 3 seconds
 puts "Wait for 3 seconds..."
 after 300
Sample Input: See Examples
Session Functions
1018
Sample Output: {status 1}
Notes:
sth::stop_devices
Name:
 sth::stop_devices
Purpose:
 Stops all running devices that are either configured manually with Spirent
 HLTAPI or by using sth::load_xml.
Synopsis:
 sth::stop_devices
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the
 operation
 log An error message (if the operation
 failed)
Description:
 This function stops all running devices that are either configured manually
 with Spirent HLTAPI or by using sth::load_xml. This function currently works as
 a stand-alone function, but specific device handles can be configured under it
 in the future, if required.
Example:
 ::sth::stop_devices
 # Wait 3 seconds
 puts "Wait for 3 seconds..."
 after 300
Sample Input: See Examples
Sample Output: {status 1}
Notes:
End of Procedure Header
sth::get_handles
Name:
 sth::get_handles
Purpose:
 Gets handles of a specified type or under the specified port(s).
Synopsis:
 sth::get_handles
 -type {streamblock}
 [-from_ports <port or portlist>]
 
Session Functions
1019
Arguments:
 -type
 Get handles of a specified type. At this time, streamblock is the
 only type that is supported. This argument is mandatory.
 -from_ports
 Get handles under one or more ports. If this argument is not
 specified, all handles under all ports will be returned.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handles Handles of a specified type (streamblock)
 status Success (1) or failure (0) of the
 operation
 log An error message (if the operation
 failed)
Description:
 This function gets handles of a specified type (currently only streamblock is
 supported). Specify -from_ports if you want to get handles from specific
 port(s). The handles returned will be used as the validation items in the test.
Examples:
 The following example gets streamblock handles under port1 and port2 as specified
 in -portlist:
 set hPortlist "$port1 $port2"
 set returnedString [sth::get_handles -type streamblock -from_ports $hPortlist]
 Output:
 puts $returnedString
 {port1 streamblock1} {port2 streamblock2} {status 1}
 The following example gets the streamblock handle under port1:
 set returnedString [sth::get_handles -type streamblock -from_ports $port1]
 Output:
 {port1 streamblock1} {status 1}
 keylget returnedString $port1 stream_id
 The following example gets streamblock handles under all ports:
 set returnedString [sth::get_handles -type streamblock]
 Output:
 puts $returnedString
 {handles {{streamblock1 streamblock2}}} {status 1}
 keylget returnedString handles stream_id
 After you get the handles for the specified streamblock, you can start the traffic
 generator and get the traffic statistics for the specific streamblock:
 puts "Start the generator..."
 set x [sth::traffic_control -action run -port_handle $port1 -get dscp] after 300
 set returnedString [sth::traffic_stats -streams $stream_id -mode streams]
 puts $returnedString
 if {![keylget returnedString status ]} {
 return "FAILED" 
Session Functions
1020
 }
 set Rx_Rate [keylget returnedString $port1.stream.$stream_id.rx.total_pkt_rate]
 set Tx_Rate [keylget returnedString $port1.stream.$stream_id.tx.total_pkt_rate]
 puts "Tx_Rate : -------------------------------$Tx_Rate"
 puts "Rx_Rate : -------------------------------$Rx_Rate"
 puts "stop the traffic"
 set x [sth::traffic_control -action stop -port_handle $port1]
 puts "disable the vlan stream"
 set ret [sth::traffic_config -mode disable -stream_id $stream_id]
Sample Input: See Examples
Sample Output: See Examples
Notes:
End of Procedure Header
SIP Functions
1021
SIP Functions
Functions:
sth::emulation_sip_config
sth::emulation_sip_control
sth::emulation_sip_stats
sth::emulation_sip_config
Name:
 sth::emulation_sip_config
Purpose:
 Creates, enables, disables, modifies or deletes Session Initiation Protocol
 (SIP) emulation on a Spirent HLTAPI chassis.
 SIP is an application-layer control protocol that can establish, modify, and
 terminate sessions with one or more participants. These sessions include
 Internet telephone calls, multimedia distribution, and multimedia conferences.
 SIP invitations used to create sessions carry session descriptions that
 allow participants to agree on a set of compatible media types. SIP makes
 use of elements called Proxy Servers to help route requests to the user's
 current location, authenticate and authorize users for services, and provide
 features to users. SIP also provides a registration function that allows users
 to upload their current locations for use by Proxy Servers.

 In the Spirent TestCenter implementation, voice data is carried in Real-time
 Transfer Protocol (RTP) data streams over UDP. SIP uses Session
 Description Protocol (SDP) for describing media sessions.
 Thousands of telephone calls can be emulated on each Spirent TestCenter
 port.
Synopsis:
 sth::emulation_sip_config
 -mode create {-port_handle <port_handle> | -handle <device handle>} |
 -mode {enable_all | disable_all} -port_handle <port_handle> |
 -mode {modify| enable | disable | delete} -handle <sip_host_handle>
 [-count <integer>]
 [-call_accept_delay_enable {0|1}]
 [-call_type {SIGNALING_ONLY|AUDIO_ONLY|AUDIO_VIDEO}]
 [-call_using_aor {0|1}]
 [-desired_expiry_time <1- 4294967295>]
 [-gateway_enable {0|1}]
 [-gateway_ipv4_address <a.b.c.d>]
 [-local_domain <alphanumeric>]
 [-local_ip_addr <a.b.c.d>]
 [-local_ip_addr_step <integer>]
 [-local_ip_addr_repeat <integer>]
 [-local_username_prefix <alphanumeric>]
 [-local_username_suffix <0-18446744073709551615>]
 [-local_username_suffix_step <0-18446744073709551615>]
 [-local_port <0-65535>]
 [-mac_address_start <aa:bb:cc:dd::ee::ff>]
 [-media_payload_type {SIP_MEDIA_ITU_G711_64K_240BYTE|
 SIP_MEDIA_ITU_G711_64K_160BYTE|
 SIP_MEDIA_ITU_G723_6K3_24BYTE|
 SIP_MEDIA_ITU_G723_5K3_20BYTE|
 SIP_MEDIA_ITU_G723_5K3_40BYTE|
 SIP_MEDIA_ITU_G729_8K_20BYTE|
 SIP_MEDIA_ITU_G729_8K_40BYTE}]
 [-media_port_number <0-65535>]
 [-name <alphanumeric>]
SIP Functions
1022
 [-proxy_server_port <0-65535>]
 [-remote_domain <alphanumeric>]
 [-remote_host <a.b.c.d>]
 [-remote_host_repeat <integer>]
 [-remote_host_step <integer>]
 [-remote_ip_addr <a.b.c.d>]
 [-remote_ip_addr_step <integer>]
 [-remote_ip_addr_repeat <integer>]
 [-remote_username_prefix <alphanumeric>]
 [-remote_username_suffix <0-18446744073709551615>]
 [-remote_username_suffix_step <0-18446744073709551615>]
 [-registration_server_enable {0|1}]
 [-registrar_address <a.b.c.d>]
 [-response_delay_interval <0-4294967295>]
 [-use_compact_headers {{0|1}}]
 [-video_type {H_263|H_264|MP4V_ES}]
 [-video_port_number <0-65535>]
 [-vlan_id1 <0-4095>]
 [-vlan_ether_type1 {0x8100|0x88A8|0x9100|0x9200}]
 [-vlan_id_mode1 {fixed|increment}]
 [-vlan_id_step1 <0-4095>]
 [-vlan_id2 <0-4095>]
 [-vlan_ether_type2 {0x8100|0x88A8|0x9100|0x9200}]
 [-vlan_id_mode2 {fixed|increment}]
 [-vlan_id_step2 <0-4095>]
Arguments:
 -port_handle
 Specifies the port handle on which SIPv4 emulation is to
 be created on. This argument is mandatory for -mode create,
 enable_all or disable_all.
 -handle
 Specifies the SIPv4 emulation handle to be modified,
 enabled, disabled or deleted. This argument is mandatory
 for -mode modify, enable, disable or delete.
 Another function of the -handle argument is to specify on which
 existing device SIP sessions will be created. The -handle option
 will be returned from sth::emulation_dhcp_group_config or
 sth::emulation_pppox. You can use the returned
 handle value together with -mode create to create "SIP with DHCP"
 or "SIP over PPPoX" device. The values of the arguments below
 will directly inherit from the created device which is specified
 by -handle:
 -count
 -local_ip_addr
 -local_ip_addr_step
 -local_ip_addr_repeat
 -mac_address_start
 -remote_ip_addr
 -remote_ip_addr_step
 -remote_ip_addr_repeat
 -mode
 Specifies the action to perform on the specified test port
 or SIP emulation. This argument is mandatory. The modes are
 described below:
 create - Creates SIPv4 emulation on the port
 specified by the -port_handle argument. You must
 specify the -port_handle argument.
 modify - Changes the configuration for the SIP emulation
 identified by the -handle argument. You must specify
 the -handle argument.
 delete - Deletes the SIP host or a list of SIP hosts
 specified in the -handle argument. You must specify 
SIP Functions
1023
 the -handle argument.

 enable - Activates the SIP host or a list of SIP hosts
 specified in the -handle argument. You must specify
 the -handle argument.

 disable - Deactivates the SIP host or a list of SIP hosts
 specified in the -handle argument. You must specify
 the -handle argument.
 enable_all - Activates all created SIP hosts on the port
 specified in the -port_handle argument. You must
 specify the -port_handle argument.
 disable_all - Deactivates all created SIP hosts on the
 port specified in the -port_handle argument. You must
 specify the -port_handle argument.
 -count
 Used only in create mode to specify number of individual
 SIP emulation to be created. The default is 1.
 -call_accept_delay_enable
 To enable delay of acceptance of invite requests.
 Possible values are 0(disable) and 1(enable). The
 default is 0.
 -call_type
 Spirent Extension (for Spirent HLTAPI only).
 Defines emulated SIP UA call type: signaling only,
 audio UA or audio/video UA. Possible values are
 SIGNALING_ONLY, AUDIO_ONLY and
 AUDIO_VIDEO. The default is
 AUDIO_ONLY.
 -call_using_aor
 Used to enable or disable remote subscribers
 using address of record. Possible values are 0 (disable)
 and 1 (enable). The default is 0.
 -desired_expiry_time
 The expiry interval, in seconds, that will be suggested by
 the subscriber in the register requests. Possible values
 range from 1 to 4294967295. The default is 604800. You
 can specify this argument when the
 -registration_server_enable argument is enabled.
 -gateway_enable
 Specifies the gateway address for the DUT. To be
 specified only if the gateway address differs from the DUT
 address. Possible values are 0 and 1. The default is 0.
 -gateway_ipv4_address
 Specifies the gateway address (IPv4) of the DUT. You can
 specify this argument when the -gateway_enable option is set to 1.

 -local_domain
 Specifies SIP domain to which all local subscribers in the
 pool belong. Domain name is used to build Uniform Resource
 Indicator(URI) in SIP messages. If this field is not set,
 proxy IP address is used to build URI. This argument must
 be in alphanumeric format.
 -local_ip_addr
 Specifies the IPv4 address for SIP emulation.

 -local_ip_addr_step
 Specifies the incrementing IPv4 address step for SIP
 emulation. This argument must be in integer format.
 The default is 1.
SIP Functions
1024
 -local_ip_addr_repeat
 Specifies the repeat of incrementing addresses for
 SIP emulation. The value of this argument must in integer format.
 The default is 1.
 -local_username_prefix
 Specifies the prefix of local subscribers in a pool.
 This argument must be in alphanumeric format.
 -local_username_suffix
 Specifies the suffix of username. Possible values range
 from 0 to 18446744073709551615. The default is 1000.
 -local_username_suffix_step
 Specifies the username suffix step for incrementing.
 Possible values range from 0 to 18446744073709551615.
 The default is 1.

 -local_port
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the port number on which the SIP listener
 will be created. Possible values range from 0 to 65535.
 The default is 5060.
 -mac_address_start
 Spirent Extension (for Spirent HLTAPI only).
 Defines the first MAC address of the SIP emulation.
 The default is 00:10:94:00:00:02.
 -media_payload_type
 Specifies the type of media that is to be used in SIP
 sessions. Possible values are SIP_MEDIA_ITU_G711_64K_240BYTE,
 SIP_MEDIA_ITU_G711_64K_160BYTE,
 SIP_MEDIA_ITU_G723_6K3_24BYTE,
 SIP_MEDIA_ITU_G723_5K3_20BYTE,
 SIP_MEDIA_ITU_G723_5K3_40BYTE,
 SIP_MEDIA_ITU_G729_8K_20BYTE, and
 SIP_MEDIA_ITU_G729_8K_40BYTE.
 -media_port_number
 Specifies the local port number nominated by user agent client
 (UAC) to be used for media exchange. A user agent client is a
 client application that initiates the SIP request. Possible
 values range from 0 to 65535. The default is 50050.
 -name
 Specifies the name of the SIP emulation. This argument must be in
 alphanumeric format.

 -proxy_server_port
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the UDP port number that the SIP proxy server
 uses for signaling. Possible values range from 0 to 65535.
 The default is 5060.
 -remote_domain
 Specifies SIP domain to which all remote subscribers
 in the pool belong. This argument must be in alphanumeric
 format. You can specify this argument only when
 -call_using_aor is set to 1.
 -remote_host
 Specifies IPv4 address to which the remote subscriber can
 be contacted. You can specify this argument only when
 -call_using_aor is set to 1.
 -remote_host_repeat
 Specifies the number of times to repeat before incrementing
 remote host address. You can specify this argument only when
 -call_using_aor is enabled.
SIP Functions
1025
 -remote_host_step
 Specifies the amount to increment at each step of remote
 host address. You can specify this argument only when
 -call_using_aor is enabled.

 -remote_ip_addr
 Specifies the IPv4 gateway address of the SIP emulation.
 -remote_ip_addr_step
 Specifies the incrementing IPv4 gateway address step for
 SIP emulation. The value of this argument must in integer format.
 The default is 1.

 -remote_ip_addr_repeat
 Specifies the repeat of incrementing gateway addresses
 for SIP emulation. The value of this argument must in integer format.
 The default is 1.
 -remote_username_prefix
 Specifies the prefix username of all remote subscribers
 in a pool. The value of this argument must be in alphanumeric format.

 -remote_username_suffix
 Specifies the username suffix. Possible values range
 from 0 to 18446744073709551615. The default is 1000.
 -remote_username_suffix_step
 Specifies the username suffix step for incrementing.
 Possible values range from 0 to 18446744073709551615.
 The default is 1.
 -registration_server_enable
 Indicates whether SIP emulation is capable of performing SIP
 registration operations. Possible values are 0 and 1. If 0,
 indicates SIP calls will be established directly between two User
 Agents (UAs) without the SIP Proxy Server, and no registration
 transaction. UA is a logical entity that can act as both a User
 Agent Client (UAC) and User Agent Server (UAS). If it is set to
 1, it indicates SIP calls will be established through the SIP
 Proxy Server. The default is 0.
 -registrar_address
 Specifies the IPv4 address of a SIP registrar. To configure
 this argument, you must also specify -registration_server_enable
 1.

 -response_delay_interval
 Specifies the time, in seconds, for the 200 OK response from a
 UAS to an INVITE request. Possible values range from 0 to
 4294967295. The default is 0. To configure this argument, you
 must also specify -call_accept_delay_enable 1.

 -use_compact_headers
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to use SIP compact header formats or not.
 Possible values are 0 and 1. The default is 0.
 -video_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of video that is to be used in SIP sessions.
 Possible values are H_263, H_264 and MP4V_ES. You can specify
 this argument when the -call_type argument is set to AUDIO_VIDEO.
 -video_port_number
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the UDP port from which RTP/Video streams should be
 sent. Possible values range from 0 to 65535. The default
 is 50052. You can specify this argument when -call_type is
 set to AUDIO_VIDEO.
 -vlan_id1 
SIP Functions
1026
 Specifies the VLAN ID of the first VLAN sub-interface. Possible
 values range from 0 to 4095. The default is 100.
 -vlan_ether_type1
 Specifies the VLAN ether type for the first VLAN sub-interface.
 Possible values are 0x8100, 0x88A8, 0x9100 and 0x9200.
 The default is 0x8100. You can use this argument when you
 specify the -vlan_id1 argument.

 -vlan_id_mode1
 For multiple configurations, configures the VLAN ID
 mode to fixed or increment. If you set this argument to
 increment, you should also specify the -vlan_id_step1
 argument to indicate the step size. The default is fixed.
 You can use this argument when you specify the -vlan_id1
 argument.

 -vlan_id_step1
 The step size by which the VLAN value is incremented when
 you set -vlan_id_mode1 to increment. Possible values range
 from 0 to 4095. The default is 1. You can use this argument
 when you specify the -vlan_id1 argument.
 -vlan_id2
 Specifies the VLAN ID of outer VLAN sub-interface. Possible
 values range from 0 to 4095. The default is 100.
 -vlan_ether_type2
 Specifies the VLAN ether type for the outer VLAN sub-interface.
 Possible values are 0x8100, 0x88A8, 0x9100 and 0x9200.
 The default is 0x8100. You can use this argument when you
 specify the -vlan_id2 argument.
 -vlan_id_mode2
 For multiple configurations, configures the VLAN ID
 mode of the outer VLAN sub-interface to fixed or increment.
 If you set this argument to increment, you should also
 specify the -vlan_id_step2 argument to indicate the step
 size. The default is fixed. You can use this argument
 when you specify the -vlan_id2 argument.
 -vlan_id_step2
 The step size by which the VLAN value is incremented when
 you set -vlan_id_mode2 to increment. Possible values range
 from 0 to 4095. The default is 1. You can use this argument
 when you specify the -vlan_id2 argument.
Arguments Unsupported by Save as HLTAPI:
 None
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -call_accept_delay_enable
 -communication_resource_priority
 -device
 -desired_refresh_interval
 -encapsulation
 -gateway_enable
 -gateway_ipv4_address
 -gateway_ipv6_address
 -local_username_suffix_repeat
 -minimum_refresh_interval
 -network_delay_interval
 -network_address_translation_enable
 -nat_ipv4_addr
 -nat_ipv4_addr_step
 -nat_ipv4_addr_repeat
 -privacy_header
 -remote_username_suffix_repeat
SIP Functions
1027
 -register_on_enable
 -resource_priority
 -session_refresh_timer_enable
 -transaction_timer_t1
 -transaction_timer_t2
 -transaction_timer_t4
 -user_agent_refresher
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle The handle that identifies a group of SIP emulation created
 by the sth::emulation_sip_config function.

 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_sip_config function creates, modifies, enables,
 disables or deletes SIPv4 emulation. Use the -mode argument to
 specify the action to perform. (See the -mode argument description
 for information about the actions.)
 The first created SIPv4 device is emulated as SIP UASs, and the second
 created SIPv4 device is emulated as SIP UACs which initiate the SIP calls .
 Use the -registration_server_enable argument to specify the SIP topology
 of SIP callers and callees. (See the -registration_server_enable argument
 description for more information).

 For peer-to-peer SIP calls, which will be established directly
 between the UACs and UASs without the Proxy Server, the following
 arguments are required to specify the IPv4 addresses of the remote
 subscribers:
 -call_using_aor
 -remote_host
 -remote_host_step
 For SIP calls through Proxy Server, which provides a name mapping function
 when registering the user's locations, the following arguments are required
 to specify the usernames of the remote subscribers:
 -remote_username_prefix
 -remote_username_suffix
 -remote_username_suffix_step
 After you create SIP UACs and UASs, a successful point-to-point calls
 should be established between the SIP callers and callees if they both
 specify each other as the remote subscribers. The number of UACs is
 supposed to be equal to the number of UASs.
 Spirent HLTAPI supports creating "SIPv4 with DHCP" and "SIPv4 over
 PPPoX" devices by using the -handle argument, which is returned from the
 sth::emulation_dhcp_group_config or sth::emulation_pppox, to specify on
 which SIPv4 emulation is to be created.
 Then, you can use the "emulation_sip_control -mode register" command for
 Spirent HLTAPI to register SIP UAs only when the SIP calls are established
 through a Proxy Server.
 And you can use the "emulation_sip_control -mode establish" command for
 Spirent HLTAPI to start the SIP calls both for peer-to-peer or
 through-going Proxy Server SIP calls.
 Once you start SIP sessions, Spirent HLTAPI handles all of the message
 traffic for the emulated hosts. During the test, use the
 sth::emulation_sip_control function to stop and re-start individual
 SIP sessions. 
SIP Functions
1028
Examples:
 #### HLTAPI for Tcl ####
 The following examples create peer-to-peer SIP UASs and UACs:
 #step1: create two SIP UASs
 sth::emulation_sip_config \
 -port_handle port1 \
 -mode create \
 -count 2 \
 -name Callee \
 -mac_address_start 00:10:94:00:00:01 \
 -local_ip_addr 192.1.0.15 \
 -remote_ip_addr 192.1.0.1 \
 -local_username_prefix callee \
 -local_username_suffix 1000 \
 -registration_server_enable 0 \
 -call_using_aor 1 \
 -remote_host 192.1.0.1 \
 Sample output for example shown above: {handle host1} {status 1}

 #step2: create two SIP UACs
 sth::emulation_sip_config \
 -port_handle port2 \
 -mode create \
 -count 2 \
 -name Caller \
 -mac_address_start 00:10:94:00:01:01 \
 -local_ip_addr 192.1.0.1 \
 -remote_ip_addr 192.1.0.15 \
 -local_username_prefix caller \
 -local_username_suffix 3000 \
 -registration_server_enable 0 \
 -call_using_aor 1 \
 -remote_host 192.1.0.15 \

 Sample output for example shown above: {handle host2} {status 1}

 The following examples create through-going Proxy Server SIP UASs and
 UACs:
 #step1: create 10 SIP UASs
 sth::emulation_sip_config \
 -port_handle port1 \
 -mode create \
 -count 10 \
 -mac_address_start 00:10:94:00:02:01 \
 -vlan_id1 500 \
 -vlan_id1 500 \
 -local_ip_addr 150.1.0.5 \
 -remote_ip_addr 150.1.0.1 \
 -local_username_prefix callee \
 -local_username_suffix 3000 \
 -remote_username_prefix caller \
 -remote_username_suffix 1000 \
 -registration_server_enable 1 \
 -registrar_address 150.48.0.10 \
 -call_using_aor 0 \
 Sample output for example shown above: {handle host3} {status 1}]}


 #step2: create 10 SIP UACs
 sth::emulation_sip_config \
 -port_handle port2 \
 -mode create \
 -count 10 \
 -mac_address_start 00:10:94:00:03:01 \
 -vlan_id1 600 \
 -local_ip_addr 160.1.0.2 \
 -remote_ip_addr 160.1.0.1 \
SIP Functions
1029
 -local_username_prefix caller \
 -local_username_suffix 1000 \
 -remote_username_prefix callee \
 -remote_username_suffix 3000 \
 -registration_server_enable 1 \
 -registrar_address 150.48.0.10 \
 -call_using_aor 0 \
 Sample output for example shown above: {handle host4} {status 1}
 The following examples create "SIPv4 with DHCP" device:

 #step1: create DHCP port configuration
 set returnedString [sth::emulation_dhcp_config \
 -mode create \
 -port_handle port1]
 keylget returnedString handles dhcpHandle
 #step2: create a DHCP client host
 set returnedString [sth::emulation_dhcp_group_config \
 -handle $dhcpHandle \
 -mode create \
 -encap ethernet_ii_vlan \
 -num_sessions 10 \
 -mac_addr 00:10:94:00:00:01 \
 -mac_addr_step 00.00.00.00.00.01 \
 -vlan_id 500]
 keylget returnedString handle dhcpClient
 #step3: create a "SIPv4 with DHCP" device
 set returnedString [sth::emulation_sip_config \
 -handle $ dhcpClient \
 -mode create \
 -name Caller1 \
 -local_username_prefix caller \
 -local_username_suffix 1000 \
 -registration_server_enable 1 \
 -registrar_address 150.48.0.20 \
 -media_payload_type SIP_MEDIA_ITU_G711_64K_160BYTE \
 -media_port_number 50550 \
 -remote_username_prefix callee \
 -remote_username_suffix 3000 \
 -remote_username_suffix_step 3]
 The following examples create "SIPv4 over PPPoX" device:
 #step1: create a PPPoE host
 set returnedString [HLTCRS sth::pppox_config \
 -mode create \
 -port_handle port1 \
 -protocol pppoe \
 -num_sessions 10 \
 -encap ethernet_ii \
 -mac_addr 00.00.12.00.01.02 \
 -mac_addr_step 00.00.00.00.00.01 \
 -username spirent \
 -password spirent]

 keylget returnedString handle pppHandle
 #step2: create a "SIPv4 over PPPoE" device
 set returnedString [sth::emulation_sip_config \
 -handle $pppHandle \
 -mode create \
 -local_username_prefix caller \
 -local_username_suffix 1000 \
 -registration_server_enable 1 \
 -registrar_address 150.48.0.20 \
 -media_payload_type SIP_MEDIA_ITU_G711_64K_160BYTE \
SIP Functions
1030
 -media_port_number 50550 \
 -remote_username_prefix callee \
 -remote_username_suffix 3000 \
 -remote_username_suffix_step 3]
 The following example modifies the created SIP host:
 sth::emulation_sip_config \
 -handle host1 \
 -mode modify \
 -desired_expiry_time 100000 \
 -call_accept_delay_enable 1 \
 -response_delay_interval 5 \
 -media_payload_type SIP_MEDIA_ITU_G711_64K_160BYTE \
 -media_port_number 50550 \
 Sample output for example shown above: {handle host1} {status 1}
 The following example deletes the specified SIP hosts:
 sth::emulation_sip_config \
 -mode delete \
 -handle host1 host2\
 Sample output for example shown above: {status 1}
 The following example enables the specified SIP hosts:
 sth::emulation_sip_config \
 -mode enable\
 -handle host1 host2\
 Sample output for example shown above: {status 1}
 The following example disable all SIP hosts on the specified port:
 sth::emulation_sip_config \
 -mode disable\
 -port_handle port1\
 Sample output for example shown above: {status 1}
 #### HLTAPI for Python ####
 The following examples create peer-to-peer SIP UASs and UACs:
 #step1: create two SIP UASs
 device_ret0 = sth.emulation_sip_config (
 mode = 'create',
 call_using_aor = '1',
 registrar_address = '0.0.0.0',
 media_port_number = '50050',
 response_delay_interval= '10',
 use_compact_headers = '0',
 video_type = 'H_263',
 video_port_number = '50052',
 call_type = 'AUDIO_VIDEO',
 desired_expiry_time = '3600',
 media_payload_type = 'SIP_MEDIA_ITU_G711_64K_160BYTE',
 proxy_server_port = '5060',
 registration_server_enable= '0',
 vlan_id_mode2 = 'fixed',
 vlan_id_mode1 = 'fixed',
 port_handle = port_handle[0],
 vlan_ether_type1 = '0x8100',
 vlan_id1 = '10',
 vlan_id_step1 = '0',
 vlan_ether_type2 = '0x8100',
 vlan_id2 = '20',
 vlan_id_step2 = '0',
 router_id = '192.0.0.1',
SIP Functions
1031
 count = '2',
 local_username_prefix= 'callee',
 local_username_suffix_step= '3',
 local_port = '5060',
 name = 'SIP_1',
 local_username_suffix= '1000',
 remote_ip_addr = '12.1.0.2',
 remote_ip_addr_repeat= '1',
 local_ip_addr_step = '1',
 remote_ip_addr_step = '0',
 local_ip_addr = '12.1.0.15',
 local_ip_addr_repeat= '1',
 mac_address_start = '00:10:94:00:00:01');

 Output: {'status': '1', 'handle': 'emulateddevice1'}
 #step2: create two SIP UACs
 device_ret1 = sth.emulation_sip_config (
 mode = 'create',
 call_using_aor = '1',
 registrar_address = '0.0.0.0',
 media_port_number = '50050',
 response_delay_interval= '11',
 use_compact_headers = '0',
 video_type = 'H_263',
 video_port_number = '50052',
 call_type = 'AUDIO_VIDEO',
 desired_expiry_time = '3600',
 media_payload_type = 'SIP_MEDIA_ITU_G711_64K_160BYTE',
 proxy_server_port = '5060',
 registration_server_enable= '0',
 vlan_id_mode2 = 'fixed',
 vlan_id_mode1 = 'fixed',
 port_handle = port_handle[1],
 vlan_ether_type1 = '0x8100',
 vlan_id1 = '10',
 vlan_id_step1 = '0',
 vlan_ether_type2 = '0x8100',
 vlan_id2 = '20',
 vlan_id_step2 = '0',
 router_id = '192.0.0.1',
 count = '2',
 local_username_prefix= 'caller',
 local_username_suffix_step= '3',
 local_port = '5060',
 name = 'SIP_2',
 local_username_suffix= '3000',
 remote_ip_addr = '12.1.0.15',
 remote_ip_addr_repeat= '1',
 local_ip_addr_step = '1',
 remote_ip_addr_step = '0',
 local_ip_addr = '12.1.0.2',
 local_ip_addr_repeat= '1',
 mac_address_start = '00:10:94:00:01:03');
 Output: {'status': '1', 'handle': 'emulateddevice2'}
 #### HLTAPI for Perl ####
 The following examples create peer-to-peer SIP UASs and UACs:
 #step1: create two SIP UASs
 my %device_ret0 = sth::emulation_sip_config (
 mode => 'create',
 call_using_aor => '1',
 registrar_address => '0.0.0.0',
 media_port_number => '50050',
 response_delay_interval=> '10',
 use_compact_headers => '0',
SIP Functions
1032
 video_type => 'H_263',
 video_port_number => '50052',
 call_type => 'AUDIO_VIDEO',
 desired_expiry_time => '3600',
 media_payload_type => 'SIP_MEDIA_ITU_G711_64K_160BYTE',
 proxy_server_port => '5060',
 registration_server_enable=> '0',
 vlan_id_mode2 => 'fixed',
 vlan_id_mode1 => 'fixed',
 port_handle => "$hport[1]",
 vlan_ether_type1 => '0x8100',
 vlan_id1 => '10',
 vlan_id_step1 => '0',
 vlan_ether_type2 => '0x8100',
 vlan_id2 => '20',
 vlan_id_step2 => '0',
 router_id => '192.0.0.1',
 count => '2',
 local_username_prefix=> 'callee',
 local_username_suffix_step=> '3',
 local_port => '5060',
 name => 'SIP_1',
 local_username_suffix=> '1000',
 remote_ip_addr => '12.1.0.2',
 remote_ip_addr_repeat=> '1',
 local_ip_addr_step => '1',
 remote_ip_addr_step => '0',
 local_ip_addr => '12.1.0.15',
 local_ip_addr_repeat=> '1',
 mac_address_start => '00:10:94:00:00:01');
 Output:
 $VAR1 = 'handle';
 $VAR2 = 'emulateddevice1';
 $VAR3 = 'status';
 $VAR4 = '1';
 #step2: create two SIP UACs
 my %device_ret1 = sth::emulation_sip_config (
 mode => 'create',
 call_using_aor => '1',
 registrar_address => '0.0.0.0',
 media_port_number => '50050',
 response_delay_interval=> '11',
 use_compact_headers => '0',
 video_type => 'H_263',
 video_port_number => '50052',
 call_type => 'AUDIO_VIDEO',
 desired_expiry_time => '3600',
 media_payload_type => 'SIP_MEDIA_ITU_G711_64K_160BYTE',
 proxy_server_port => '5060',
 registration_server_enable=> '0',
 vlan_id_mode2 => 'fixed',
 vlan_id_mode1 => 'fixed',
 port_handle => "$hport[2]",
 vlan_ether_type1 => '0x8100',
 vlan_id1 => '10',
 vlan_id_step1 => '0',
 vlan_ether_type2 => '0x8100',
 vlan_id2 => '20',
 vlan_id_step2 => '0',
 router_id => '192.0.0.1',
 count => '2',
 local_username_prefix=> 'caller',
 local_username_suffix_step=> '3',
 local_port => '5060',
 name => 'SIP_2',
 local_username_suffix=> '3000',
 remote_ip_addr => '12.1.0.15',
 remote_ip_addr_repeat=> '1',
SIP Functions
1033
 local_ip_addr_step => '1',
 remote_ip_addr_step => '0',
 local_ip_addr => '12.1.0.2',
 local_ip_addr_repeat=> '1',
 mac_address_start => '00:10:94:00:01:03');
 Output:
 $VAR1 = 'handle';
 $VAR2 = 'emulateddevice2';
 $VAR3 = 'status';
 $VAR4 = '1';

Notes:
End of Procedure Header
sth::emulation_sip_control
Name:
 sth::emulation_sip_control
Purpose:
 sth::emulation_sip_control allows the users to register, deregister,
 starts, stops the SIP sessions as well as it provides few more
 timing parameters to control over session actions.
Synopsis:
 sth::emulation_sip_control
 -handle <sip_emulation_handle>
 -action {register|deregister|establish|terminate}
 [-action_control {start|stop}]
 [-batch_rate <integer>]

Arguments:
 -handle
 Specifies a valid SIP emulation handle. This argument
 is mandatory.
 -action
 Specifies the action that will be performed on the SIP session.
 This argument is mandatory. The actions are described below:
 register - Registers the specified UA. This action is valid
 only for through-going Proxy Server SIP UAs.
 deregister - Deregisters the already-registered UA. This action
 is valid only for through-going Proxy Server SIP UAs.
 establish - Starts SIP call sessions between the UAs. This
 action is valid only for SIP UACs (callers) which would
 initiate SIP calls.
 terminate - Stops the SIP calls between the UAs. This action
 is valid only for SIP UACs (callers).
 -action_control
 Used to give commands to the action specified by -action at a fixed
 rate. The action is performed on each emulation determining the
 state. Possible values are start and stop.
 start - Starts the specified action specified by -action.
 stop - Stops the specified action specified by -action.
 -batch_rate 
SIP Functions
1034
 To be used with the -action_control argument to specify the number
 of sessions that will perform the specified action within
 a second. The default is 1.You can use this argument when
 you specify the -action_control argument.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -batch_rate_interval
 -job_handle
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_sip_control function registers, deregisters, establishes
 and terminates the SIP sessions. Use the -action argument to specify the
 action to perform. (See the -action argument description for information
 about the actions.)
 For peer-to-peer SIP UAs, there is no registration transaction, you can use
 -action establish or terminate to start or stop SIP call sessions
 between the UAs.
 For through-going Proxy Server SIP UAs, you can use -action register or
 deregister to register or deregister the specified UAs. Only when the UAs
 have registered successfully, then you can use -action "establish" or
 "terminate" to start or stop SIP calls from the UACs.
 The sth::emulation_sip_control function also provides timing parameters to
 control over session actions. You can use -action_control consistent with
 -batch_rate to specify the number of SIP sessions to perform the specified
 action at a fix rate.
Examples:
 #### HLTAPI for Tcl ####
 The following example registers the specified SIP host
 sth::emulation_sip_control \
 -handle host1 \
 -action register \
 The following example uses -action_control to register SIP UAs
 at a particular batch rate:
 sth::emulation_sip_control \
 -handle host1 \
 -action register \
 -action_control start \
 -batch_rate 10 \
 The following example starts a SIP call:
 sth::emulation_sip_control \
 -action establish \
 -handle host1 \

 Sample Output: {status 1}
 #### HLTAPI for Python ####
 The following example registers the specified SIP host

 ctrl_ret1 = sth.emulation_sip_control (
 handle = device_list,
 action = 'register');
SIP Functions
1035
 Sample Output: {'status': '1', 'handle': 'emulateddevice1'}
 #### HLTAPI for Perl ####
 The following example registers the specified SIP host

 my %ctrl_ret1 = sth::emulation_sip_control (
 handle => "$device_list",
 action => 'register');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'emulateddevice1';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:

End of Procedure Header
sth::emulation_sip_stats
Name:
 sth::emulation_sip_stats
Purpose:
 sth::emulation_sip_stats allows user to collect or clear statistics
 about the SIP device.
Synopsis:
 sth::emulation_sip_stats
 -handle <sip_emulation_handle>
 -action {collect|clear}
 [-mode {device}]

Arguments:
 -handle
 Specifies a list of handles to query statistics from. Handles
 must be pre-selected for statistics collection. This argument
 is mandatory.
 -action
 Specifies the action to do with the SIP stats for the SIP
 device. Possible values are collect and clear. This argument
 is mandatory.
 collect - Gets statistics of the specified SIP UAs.
 clear - Clears statistics of the specified SIP UAs.
 -mode
 Defines the statistic type to be collected.

 device - Collects statistics of the SIP device block.

 Note: The "instance" option is not supported.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.

 -device_instance
Return Values:
SIP Functions
1036
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Retrieves a value indicating the success(1) or failure(0)
 of the operation.
 log Retrieves a message describing the last error that occurred
 during the operation. If the operation was successful
 - {status 1} - the log value is null.


 The following keys are Session Statistics:
 registration_state
 The registration state of the SIPv4 device block. Possible values are
 NOT_REGISTERED, REGISTERING, REGISTRATION_SUCCEEDED,
 REGISTRATION_FAILED, REGISTRATION_CANCELED
 and UNREGISTERING.
 NOT_REGISTERED - SIP UA is not registered with the SIP server.

 REGISTERING - SIP UA is currently trying to register with the SIP server.

 REGISTRATION_SUCCEEDED - SIP UA has successfully registered
 with the SIP server.
 REGISTRATION_FAILED - SIP UA failed to register with the SIP server.

 REGISTRATION_CANCELED - Sending the SIP User Agent registration
 request to the SIP server is cancelled.

 UNREGISTERING - SIP User Agent is attempting to unregister
 from the SIP server.

 attempted_sessions
 The count for how many UAs will attempt to start call.

 successful_sessions
 The count for how many UAs started call successfully.
 unsuccessful_sessions
 The count for how many UAs started calls unsuccessfully.


 avg_establishment_time
 The average time of all SIP UAs calls.
 min_establishment_time
 The minimum time in all SIP UAs calls.
 max_establishment_time
 The maximum time in all SIP UAs calls.
 successful_registrations
 Sip UAs count that registered to SIP Proxy Server successfully.
 unsuccessful_registrations
 Sip UAs count that registered to SIP Proxy Server unsuccessfully.
 avg_registration_time
 The average registration time of all SIP UAs registration.
 min_registration_time
 The minimum time in all SIP UAs registration.
 max_registration_time
 The maximum time in all SIP UAs registration.
SIP Functions
1037
Description:
 The sth::emulation_sip_stats function provides information about the
 specified SIP device block.

 For "SIP with DHCP" or "SIP over PPPoX" device, you should bind DHCP
 client to DHCP server or connect PPPoX client to PPPoX Server successfully
 before you use sth::emulation_sip_stats to get SIP information.
 This function returns the requested data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl ####
 Sample Input: sth::emulation_sip_stats \
 -action collect \
 -mode device \
 -handle host1\
 Sample Output:
 {host1 {{registration_state REGISTRATION_SUCCEEDED}}}
 {session {{host1 {{min_registration_time 4} {successful_sessions 10}
 {avg_registration_time 7} {unsuccessful_sessions 0}
 {successful_registrations 10}{max_establishment_time 30}
 {max_registration_time 10} {unsuccessful_registrations 0}
 {min_establishment_time 11} {attempted_sessions 10}
 {avg_establishment_time 16}}}}} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 results_ret1 = sth.emulation_sip_stats (
 handle = device,
 mode = 'device',
 action = 'collect');
 Sample Output:
 {'status': '1', 'session': {'emulateddevice1': {'avg_establishment_time': '0',
 'attempted_s': '0', 'avg_registration_time': '0', 'max_registration_time': '0',
 'max_establishment_time': '0', 'successful_registrations': '0', 'successful_s':
 '0', 'min_registration_time': '0', 'unsuccessful_s': '0',
 'unsuccessful_registrations': '0', 'min_establishment_time': '0'}},
 'emulateddevice1': {'registration_state': 'NOT_REGISTERED'}}
 #### HLTAPI for Perl ####

 Sample Input:
 my %results_ret1 = sth::emulation_sip_stats (
 handle => "$device",
 mode => 'device',
 action => 'collect');
 Sample Output:

 $VAR1 = 'emulateddevice1';
 $VAR2 = {
 'registration_state' => 'NOT_REGISTERED'
 };
 $VAR3 = 'session';
 $VAR4 = {
 'emulateddevice1' => {
 'avg_establishment_time' => '0',
 'successful_registrations' => '0',
 'min_establishment_time' => '0',
 'min_registration_time' => '0',
 'unsuccessful_sessions' => '0',
 'attempted_sessions' => '0',
 'unsuccessful_registrations' => '0',
SIP Functions
1038
 'successful_sessions' => '0',
 'avg_registration_time' => '0',
 'max_establishment_time' => '0',
 'max_registration_time' => '0'
 }
 };
 $VAR5 = 'status';
 $VAR6 = '1';

Notes:
 The Instance statistics keys are not supported:
 statistics_handle
 statistics_instance
 registration_state
 session_state
 local_aor
 remote_aor
 call_id
 refresher
 negotiated_interval
 minimum_interval
 registration_expiry
 last_error_code
 tx_invite_requests
 tx_register_requests
 tx_cancel_requests
 tx_ack_requests
 tx_bye_requests
 tx_1xx_responses
 tx_2xx_responses
 tx_3xx_responses
 tx_4xx_responses
 tx_5xx_responses
 tx_6xx_responses
 rx_invite_requests
 rx_register_requests
 rx_cancel_requests
 rx_ack_requests
 rx_bye_requests
 rx_1xx_responses
 rx_2xx_responses
 rx_3xx_responses
 rx_4xx_responses
 rx_5xx_responses
 rx_6xx_responses
 establishment_time
 termination_time
 attempted_registrations
 successful_registrations
 unsuccessful_registrations
 attempted_deregistrations
 successful_deregistrations
 unsuccessful_deregistrations
 registration_time
 deregistration_time
 retransmitted_requests
 retransmitted_responses
 media_ipv4_requests
 media_ipv4_port
 transaction_timeouts
 The following Session statistics keys are not supported:
 established_sessions
 active_registrations
 attempted_termination
 successful_termination
 unsuccessful_termination
 avg_termination_time
 min_termination_time
SIP Functions
1039
 max_termination_time
 attempted_terminations
 attempted_deregistrations
 successful_deregistrations
 unsuccessful_deregistrations
 avg_deregistration_time
 min_deregistration_time
 max_deregistration_time
 tx_invite_requests
 tx_register_requests?
 tx_cancel_requests
 tx_ack_requests
 tx_bye_requests
 tx_informational_requests
 tx_success_responses
 tx_client_error_responses
 tx_server_error_responses
 rx_invite_requests
 rx_register_request
 rx_cancel_requests
 rx_ack_requests
 rx_bye_requests
 rx_informational_responses
 rx_success_responses
 rx_redirection_responses
 rx_client_error_responses
 rx_server_error_responses
 rx_global_error_responses
 retransmitted_requests
 retransmitted_responses
 transaction_timeouts
 to_no_session_transitions
 to_establishing_sessions
 to_established_transitions
 to_refreshing_transitions
 to_terminating_transitions
End of Procedure Header
STP Functions
1040
STP Functions
Functions:
sth::emulation_stp_config
sth::emulation_mstp_region_config
sth::emulation_msti_config
sth::emulation_stp_control
sth::emulation_stp_stats
sth::emulation_stp_config
Name:
 sth::emulation_stp_config
Purpose:
 Creates, modifies, or removes the STP emulation bridge on the specified port(s).
 Spanning Tree Protocol (STP) is used to prevent loops that occur in redundant
 network configurations. It provides fault tolerance by allowing redundant paths,
 but assures a single active path to any destination by blocking all except the
 current best path to a destination.
 All STP-participating switches gather information about other switches in the
 network by exchanging bridge protocol data unit (BPDU) data messages. This
 message exchange supports:
 Election of a Root Switch for the STP network topology
 Election of a Designated Switch for each switched LAN segment
 Elimination of network loops by placing redundant switch ports in Blocking
 Spanning Tree Algorithm (STA)
.
 Spirent HLTAPI supports the following types of STP:

 STP (IEEE 802.1D, 1998 edition)
 Rapid Spanning Tree Protocol (RSTP) (IEEE 802.1W)
 Per-VLAN Spanning Tree Plus (PVST+) (per port, using 802.1Q trunking)
 Rapid Per-VLAN Spanning Tree Plus (RPVST+) (combines the functionality of
 PVST+ and RSTP)
 Multiple STP (MSTP) (IEEE 802.1S)
Synopsis:
 sth::emulation_stp_config
 -mode create -port_handle <port_handle> |
 -mode {modify | delete | enable| disable} -handle <STP_device_handle>
 [-stp_type {stp|rstp| pvst|rpvst| mstp}]
 [-port_type {trunk| access}]
 [-bridge_priority <0-65535>]
 [-count <integer>]
 [-encap {ethernet_ii | ethernet_ii_vlan | ethernet_ii_qinq}]
 [-enable_pt2pt_link {true|false}]
 [-enable_mac_addr_reduction {true|false}]
 [-ether_type <string>]
 [-event_log_level { convergence_events|debug }]
 [-forward_delay <4-30>]
 [-hello_time <1-10>]
 [-hold_count <1-30>]
 [-gateway_ip_addr <a.b.c.d> ]
 [-gateway_ip_addr_step <a.b.c.d>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-gateway_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ip_version {ipv4 | ipv6 | }]
 [-local_ip_addr <a.b.c.d>]
 [-local_ip_addr_step <a.b.c.d>]
 [-local_ip_prefix_len <0-32>]
 [-local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
STP Functions
1041
 [-local_ipv6_addr_step <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-local_ipv6_prefix_len <0-128>]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-msg_age <1-39>]
 [-max_age_time <6-40>]
 [-native_vlan <1-4094>]
 [-port_priority <0-255>]
 [-port_number <1-255>]
 [-remaining_hops <1-255>]
 [-root_bridge_type {custom| self}]
 [-root_priority <0-65535>]
 [-root_mac_address <aa:bb:cc:dd:ee:ff>]
 [-root_path_cost <0-200000000>]
 [-region_root_bridge_type {custom| self}]
 [-region_root_priority <0-65535>]
 [-region_root_mac_address <aa:bb:cc:dd:ee:ff>]
 [-region_root_path_cost <0-200000000>]
 [-qinq_incr_mode {inner | outer | both}]
 [-vlan _start <0-4095>]
 [-vlan_count <integer>]
 [-vlan_priority <0-7>]
 [-vlan_id <0-4095>]
 [-vlan_id_mode {increment|fixed}]
 [-vlan_id_step <0-4095>]
 [-vlan_id_count <1-4096>]
 [-vlan_user_priority <1-7>]
 [-vlan_cfi {0|1}]
 [-vlan_id_outer <0-4095>]
 [-vlan_id_outer_mode {increment|fixed}]
 [-vlan_id_outer_step <0-4095>]
 [-vlan_id_outer_count <1-4096>]
 [-vlan_outer_user_priority <1-7>]
 [-vlan_outer_cfi <0|1>]
 Arguments:
 -port_handle
 Specifies the port on which to create the STP emulation bridge.
 This argument is mandatory for create mode.
 -handle
 Specifies a STP handle returned from this procedure. Required for
 modify, delete, enable, or disable modes.
 -mode
 Specifies the action to perform on the specified port. This is a
 mandatory argument. Possible values are create, modify, delete,
 disable, and enable. The modes are described below:
 create - Creates one or more emulated STP devices on the
 port specified by the -port_handle argument.
 modify - Changes the configurations for the STP device
 identified by the -handle argument.

 delete - Deletes the STP device identified by the -handle
 argument.

 disable - Disables the configurations for the STP device
 identified by the -handle argument.

 enable - Enables the configurations for the STP device
 identified by the -handle argument.
 -bridge_priority
 Specifies the priority for the emulated STP bridge. A low value
 indicates a high bridge priority. The value must be a multiple
 of 4096. Possible values range from 0 to 65535. The default
 value is 32768.
 -bridge_mac_address
STP Functions
1042
 Specifies the MAC address of the emulated STP bridge. The value
 is the second component of the bridge ID. The default value is
 00:00:10:00:10:00.
 -count
 Number of STP devices to create. The default value is 1.
 -enable_pt2pt_link
 Enables or disables point-to-point link. Possible values are
 true (enable) and false (disable). The default value is false.
 This argument can be configured only when -stp_type is set to
 rstp. For type STP, the point-to-point link is always disabled;
 for types PVST, RPVST and MSTP, the point-to-point link is
 always enabled.
 -enable_mac_addr_reduction
 Enables or disables MAC address reduction. MAC address reduction
 results in a unique MAC address by deriving the last 3 bytes of
 the address from the VLAN ID. This argument is only used with
 types PVST and RPVST. Possible values are true and false. The
 default value is false.
 -encap
 Specifies the Layer 2 framing mode for encapsulated devices.
 Possible values are described below:

 ethernet_ii - Ethernet II.

 ethernet_ii_vlan - Ethernet II with a single VLAN tag.

 ethernet_ii_qinq - Ethernet II with two VLAN tags.

 The default value is ethernet_ii.
 -ether_type
 Specifies the Ethernet type used by PVST/RPVST. This argument is
 available when port_type is set to trunk. The default value is
 8100.
 -gateway_ip_addr
 Configures the starting IPv4 gateway address of the emulated STP
 devices. The value must be in IPv4 format. You must specify
 -ip_version to ipv4.
 -gateway_ip_addr_step
 Defines the increment used to generate IPv4 gateway addresses.
 The value must be in IPv4 format. The default value is 0.0.0.0.
 You must specify -ip_version to ipv4.
 -gateway_ipv6_addr
 Configures the starting IPv6 gateway address of the emulated STP
 devices. The value must be in IPv6 format. You must specify
 -ip_version to ipv6.
 -gateway_ipv6_addr_step
 Defines the increment used to generate IPv6 gateway addresses.
 The value must be in IPv6 format. The default value is ::. You
 must specify -ip_version to ipv6.
 -ip_version
 Defines the IP version of the STP emulated device. Possible
 values are ipv4, ipv6 and . The default value is ipv4.

 -local_ip_addr
 Defines the starting IPv4 address of the emulated STP devices.
 The value must be in IPv4 format. You must specify -ip_version to
 ipv4.
 -local_ip_addr_step
 Defines the increment used to generate IPv4 addresses. The value
 must be in IPv4 format. The default value is 0.0.0.1. You must
STP Functions
1043
 specify -ip_version to ipv4.
 -local_ip_prefix_len
 Specifies the IPv4 prefix length for the emulated STP devices.
 Possible values range from 0 to 32. The default value is 24. You
 must specify -ip_version to ipv4.
 -local_ipv6_addr
 Defines the starting IPv6 address of the emulated STP devices.
 The value must be in IPv6 format. You must specify -ip_version to
 ipv6.
 -local_ipv6_addr_step
 Defines the increment used to generate IPv6 addresses. The value
 must be in IPv6 format. The default is ::1. You must specify
 -ip_version to ipv6.
 -local_ipv6_prefix_len
 Specifies the IPv6 prefix length for the emulated STP devices.
 Possible values range from 0 to 128. The default value is 64. You
 must specify -ip_version to ipv6.
 -mac_addr
 Specifies the starting value for MAC addresses. The value
 must be in MAC format.
 -mac_addr_step
 Specifies the step value applied to the base MAC address. The
 value must be in MAC format. The default value is
 00.00.00.00.00.01.
 -native_vlan
 Specifies the native VLAN number. Possible values range from 1
 to 4094. The default value is 1. This argument is available when
 -stp_type is set to pvst, rpvst or mstp.
 -port_type
 Specifies the port type when -stp_type is set to pvst or rpvst.
 Possible values are trunk and access.
 trunk: Indicates a Common or Mono Spanning Tree region.

 access: Runs a single instance
 -qinq_incr_mode
 Specifies the increment mode for ethernet_ii_qinq encapsulation.
 This parameter only applies to Q-in-Q Ethernet interfaces.
 Possible values are inner, outer and both. The default is
 inner. The modes are described below:
 inner - The inner VLAN ID is incremented first until the specified
 number of inner VLANs is exhausted, then the outer
 VLAN ID is incremented. This continues in a round-robin
 fashion until the number of sessions is exhausted.
 outer - The outer VLAN ID is incremented first until the specified
 number of outer VLANs is exhausted, and then the inner
 VLAN ID is incremented. This continues in a round-robin
 fashion until the number of sessions is exhausted.
 both - The inner VLAN ID and outer VLAN ID increment at the
 same time. This continues in a round-robin fashion
 until the number of sessions is exhausted.
 -stp_type
 Specifies the protocol type for the spanning tree algorithm.
 Possible values are stp, rstp, pvst,rpvst and mstp. The default
 value is stp. The types are described below:
 stp - Spanning Tree Protocol (IEEE 802.1D). Supports bridge
 domains and enables the bridge to construct a loop-free
 topology across an extended LAN. 
STP Functions
1044

 rstp - Rapid Spanning Tree Protocol (IEEE 802.1W). An
 evolution of the 802.1D standard.

 pvst - Per-VLAN Spanning Tree Plus. Uses 802.1Q trunking
 technology to provide PVST functionality. It maintains
 a spanning tree instance for each VLAN configured on
 the network. When you specify this mode, you must also
 specify -port_type to access or trunk.
 Note: This is a Cisco proprietary protocol.
 rpvst - Rapid Per-VLAN Spanning Tree Plus. Runs an instance
 of RSTP for each VLAN configured on the network.
 When you specify this mode, you must also specify
 -port_type to access or trunk.
 Note: This is a Cisco proprietary protocol.
 mstp - Multiple Spanning Tree Protocol (IEEE 802.1S). Industry
 standard, per-VLAN MSTP. It configures a separate
 spanning tree for each VLAN and blocks the links that
 are redundant within each spanning tree. MSTP allows
 formation of MST regions that can run multiple MST
 instances (MSTI). When you specify this type, you must
 also configure one or more MSTP region(s) with mode
 create using the sth::emulation_mstp_region_config
 function. You can also modify the default MSTIs with
 sth::emulation_msti_config.
 -port_priority
 Specifies the priority for the port on the emulated STP bridge.
 The value is the first component of the port ID. It must be a
 multiple of 16. Possible values range from 0 to 255. The default
 value is 128.
 -port_number
 Specifies the port number of the emulated STP bridge. The value
 is the second component of the port ID. Possible values range
 from 1 to 255. The default value is 1.
 -msg_age
 Specifies the age of the message in seconds. Possible values
 range from 1 to 39. The default value is 1. This argument is
 available when -root_bridge_type is set to custom.
 -max_age_time
 Specifies the timeout value used to discard STP messages.
 Possible values range from 6 to 40. The default value is 20.
 -hello_time
 Specifies the time interval between the generations of
 configuration BPDUs by the root bridge. Possible values range
 from 1 to 10. The default value is 2.
 -forward_delay
 Specifies the time that the bridge remains in listening and
 learning states before entering the forwarding state. Possible
 values range from 4 to 30. The default value is 15.
 -hold_count
 Specifies the maximum number of BPDUs transmitted per second.
 Possible values range from 1 to 30. The default value is 3.
 -root_bridge_type
 Identifies the root bridge type. Possible values are self and
 custom. If you specify self, current bridge is the root bridge.
 If you specify custom, you can identify a different bridge as
 the root bridge.
 -root_priority
 Specifies the priority for the root bridge. It must be a
 multiple of 4096. Possible values range from 0 to 65535. The
STP Functions
1045
 default value is 32768. This argument is available when
 root_bridge_type is set to custom.
 -root_mac_address
 Specifies the MAC address of the root bridge. The value must be
 in MAC format. The default value is 00:00:10:00:10:00. This
 argument is available when root_bridge_type is set to custom.
 -root_path_cost
 Specifies the cost to reach the root bridge. Possible values
 range from 0 to 200000000. The default value is 0. This argument
 is available when root_bridge_type is set to custom.
 -event_log_level
 Specifies the event log level. Possible values are
 convergence_events and debug. The default value is debug.
 -region_root_bridge_type
 Identifies the initial regional root bridge type for the current
 Internal Spanning Tree (IST). Possible values are self and
 custom. If you specify self, the current bridge is the regional
 root bridge. If you specify custom, you can identify a different
 bridge as the regional root bridge. This argument is available
 when -stp_type is set to mstp and region_root_bridge_type is set
 to custom.
 -region_root_priority
 Defines the bridge priority of the regional root bridge for the
 current IST. The root priority value is used to determine which
 bridge is elected as root, and it must be a multiple of 4096.
 Possible values range from 0 to 65535. The default value is
 32768. This argument is available when -stp_type is set to mstp
 and region_root_bridge_type is set to custom.
 -region_root_mac_address
 Configures the MAC address of the regional root bridge for the
 current IST. The value must in MAC format. The default value is
 00:00:10:00:10:00. This argument is available when -stp_type is
 set to mstp and region_root_bridge_type is set to custom.
 -region_root_path_cost
 Specifies the cost to reach the regional root bridge for the
 current IST. This value is used by the DUT to determine which
 port is the primary path to the root bridge. Possible values
 range from 0 to 200000000. The default value is 0. This argument
 is available when -stp_type is set to mstp and
 region_root_bridge_type is set to custom.
 -remaining_hops
 Specifies the MSTP remaining hops for current IST. Possible
 values range from 1 to 255. The default value is 16. This
 argument is available when stp_type is set to mstp.
 -vlan_start
 Specifies the starting VLAN ID. Possible values range from 0 to
 4095. The default value is 100. This argument is available when
 stp_type stp_type is set to pvst or rpvst and port_type is set
 to trunk.
 -vlan_count
 Specifies the Number of VLANs. The default value is 1. This
 argument is available when -stp_type stp_type is set to pvst or
 rpvst and port_type is set to trunk.
 -vlan_priority
 Specifies the VLAN priority. Possible values range from 0 to 7.
 The default value is 1. This argument is available when
 -stp_type is set to pvst or rpvst and port_type is set to trunk.
 -vlan_id
 Specifies the starting VLAN ID for the encapsulation of
 ethernet_ii_vlan, or the starting inner VLAN ID for the
STP Functions
1046
 ethernet_ii_qinq encapsulation. Possible values range from
 0 to 4095. The default value is 100.
 -vlan_id_mode
 Specifies how Spirent HLTAPI will assign VLAN IDs.
 Possible values are increment and fixed. The modes are
 described below:
 increment - For all STP devices, the VLAN ID increments by the
 step value specified by -vlan_id_step.
 fixed - The VLAN ID remains the same for all STP devices.
 The default value is increment.
 -vlan_id_step
 Specifies the value that Spirent HLTAPI uses to increment the
 VLAN ID. Possible values range from 1 to 4095. The default value
 is 1.

 -vlan_id_count
 Specifies the number of VLAN IDs to use when generating
 STP devices. Possible values range from 1 to 4096.
 The default value is 1.

 -vlan_user_priority
 Specifies the VLAN priority for the VLANs on the specified port.
 Possible values range from 0 to 7. The default value is 0.
 -vlan_cfi
 Sets the canonical format indicator (CFI) field in VLAN for
 the emulated router node. Possible values are 0 (Ethernet)
 and 1 (Token Ring). If it is set to 0, it indicates the
 network is Ethernet. If it is set to 1, it indicates that
 Token Ring and packets are dropped by Ethernet ports.
 The default value is 0.

 -vlan_id_outer
 Specifies the starting outer VLAN ID for the
 ethernet_ii_qinq encapsulation. Possible values
 range from 0 to 4095. The default value is 100.

 Note: This parameter only applies to Ethernet Q-in-Q interfaces.
 -vlan_id_outer_mode
 Specifies how Spirent HLTAPI will assign outer VLAN IDs.
 Possible values are increment and fixed. The modes are
 described below:
 increment - For all STP devices, the VLAN ID increments by the
 step value specified by -vlan_id_outer_step.
 fixed - The VLAN ID remains the same for all STP devices.
 The default value is increment.
 -vlan_id_outer_step
 Specifies the value by which to increment the outer VLAN ID
 (-vlan_id_outer) for subsequent packets. Possible values
 range from 1 to 4095. The default value is 1.
 -vlan_id_outer_count
 Specifies the number of outer VLAN IDs to use when
 generating STP devices. Possible values range from
 1 to 4096. The default is 1.

 -vlan_outer_user_priority
 Specifies the VLAN priority to assign to the outer VLAN header.
 Possible values range from 1 to 7. The default is 7.

 -vlan_outer_cfi
 Sets the CFI field in the outer VLAN tag for the emulated router
 node. Possible values are 0 (Ethernet) and 1 (Token Ring). If it
 is set to 0, it indicates the network is Ethernet. If it is set
STP Functions
1047
 to 1, it indicates that Token Ring and packets are dropped by
 Ethernet ports. The default value is 0.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -qinq_incr_mode
 -vlan_id_count
 -vlan_id_mode
 -vlan_id_outer_count
 -vlan_id_outer_mode
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 handles A list of handles that identify the STP devices created by the
 sth::emulation_stp_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).

Description:
 The sth::emulation_stp_config function creates, modifies, deletes, disables, and
 enables one or more emulated STP devices/topologies on the specified port. Use
 the -mode argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)

 When you create a STP device, use the -port_handle argument to specify the
 Spirent HLTAPI port that the emulated device will use for STP communication.
 (The port handle value is contained in the keyed list returned by the
 sth::connect function.)

 If the performed action fails, Spirent HLTAPI returns an error message. For
 example, if the user tries to configure a non-existing session handle under
 modify mode, an error message will be returned.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a new STP device: (a port with handle
 hltHostPor must already exist)
 set status [sth::emulation_stp_config -modecreate \
 -port_handle $hltHostPort \
 -stp_type stp\
 -bridge_priority 4096\
 -mac_address 00:00:10:00:00:00 \
 -port_priority 16\
 -port_number 2\
 -root_bridge_type custom\
 -root_priority 4096\
 -root_mac_address 00:00:00:00:00:01\
 -root_path_cost 50]
 keylget returnedString handle deviceHdl
 The following example modifies the created STP device:
 set returnKlist [::sth::emulation_stp_config -handle $deviceHdl \
 -bridge_priority 8192 \
 -mode modify]
 The following example deletes the created STP device:
 set returnKlist [::sth::emulation_stp_config -handle $deviceHdl \
 -mode delete]
STP Functions
1048
 #### HLTAPI for Python ####
 The following example creates a new STP device:
 device_ret0 = sth.emulation_stp_config (
 mode = 'create',
 region_root_bridge_type= 'self',
 region_root_priority= '32768',
 region_root_mac_address= '00:00:10:00:10:00',
 region_root_path_cost= '0',
 remaining_hops = '16',
 ip_version = 'ipv4',
 encap = 'ethernet_ii',
 port_handle = port_handle[0],
 enable_pt2pt_link = 'true',
 native_vlan = '1',
 stp_type = 'mstp',
 ether_type = '8100',
 enable_mac_addr_reduction= 'false',
 port_type = 'trunk',
 msg_age = '1',
 hello_time = '2',
 port_priority = '128',
 bridge_priority = '32768',
 root_path_cost = '0',
 root_mac_address = '00:00:10:00:10:00',
 port_number = '1',
 root_priority = '32768',
 root_bridge_type = 'self',
 forward_delay = '15',
 hold_count = '3',
 max_age_time = '20',
 event_log_level = 'debug',
 bridge_mac_address = '00:00:10:00:10:00',
 mac_addr = '00:10:94:00:00:01',
 mac_addr_step = '00:00:00:00:00:01',
 local_ip_prefix_len = '24',
 gateway_ip_addr = '192.85.1.1',
 local_ip_addr_step = '0.0.0.1',
 gateway_ip_addr_step= '0.0.0.0',
 local_ip_addr = '192.85.1.3');

Sample Output: {'status': '1', 'handle': 'host3', 'port_handle': 'port1'}

 #### HLTAPI for Perl ####
 The following example creates a new STP device:
 my %device_ret0 = sth::emulation_stp_config (
 mode => 'create',
 region_root_bridge_type=> 'self',
 region_root_priority=> '32768',
 region_root_mac_address=> '00:00:10:00:10:00',
 region_root_path_cost=> '0',
 remaining_hops => '16',
 ip_version => 'ipv4',
 encap => 'ethernet_ii',
 port_handle => "$hport[1]",
 enable_pt2pt_link => 'true',
 native_vlan => '1',
 stp_type => 'mstp',
 ether_type => '8100',
 enable_mac_addr_reduction=> 'false',
 port_type => 'trunk',
 msg_age => '1',
 hello_time => '2',
 port_priority => '128',
 bridge_priority => '32768',
 root_path_cost => '0',
 root_mac_address => '00:00:10:00:10:00',
 port_number => '1',
 root_priority => '32768',
STP Functions
1049
 root_bridge_type => 'self',
 forward_delay => '15',
 hold_count => '3',
 max_age_time => '20',
 event_log_level => 'debug',
 bridge_mac_address => '00:00:10:00:10:00',
 mac_addr => '00:10:94:00:00:01',
 mac_addr_step => '00:00:00:00:00:01',
 local_ip_prefix_len => '24',
 gateway_ip_addr => '192.85.1.1',
 local_ip_addr_step => '0.0.0.1',
 gateway_ip_addr_step=> '0.0.0.0',
 local_ip_addr => '192.85.1.3');
Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host3'
 $VAR3 = 'port_handle';
 $VAR4 = 'port1';
 $VAR5 = 'status';
 $VAR6 = '1';
End of Procedure Header
sth::emulation_mstp_region_config
Name:
 sth::emulation_mstp_region_config
Purpose:
 Creates, modifies, deletes the MSTP region configurations, and creates the
 default MSTI. This function only works when STP type is MSTP.
 The Multiple Spanning Tree Protocol (MSTP), originally defined in IEEE 802.1s
 and later merged into IEEE 802.1Q-2005, defines an extension to RSTP to further
 develop the usefulness of virtual LANs (VLANs). This Per-VLAN Multiple Spanning
 Tree Protocol configures a separate Spanning Tree for each VLAN group and blocks
 all but one of the possible alternate paths within each Spanning Tree.
 If there is only one Virtual LAN (VLAN) in the network, single (traditional) STP
 works appropriately. If the network contains more than one VLAN, the logical
 network configured by single STP would work, but it is possible to make better
 use of the alternate paths available by using an alternate spanning tree for
 different VLANs or groups of VLANs.
 MSTP allows formation of MST regions that can run multiple MST instances (MSTI).
 Multiple regions and other STP bridges are interconnected using one single
 common spanning tree (CST).
Synopsis:
 sth::emulation_mstp_region_config
 -mode create -port_handle <port_handle> |
 -mode {modify|delete} -handle <MSTP region handle>
 [-mstp_region_name]
 [-mstp_version_num <0-65535>]
 [-mstp_instance_count <1-64>]
 [-mstp_instance_vlan_list <list of numbers>]
 [-stp_instance_num_list <list of numbers>]
Arguments:
 -mode
 Specifies the action(s) to be taken. Possible values are create,
 modify and delete. This argument is mandatory. The modes are
 described below:
STP Functions
1050

 create - Creates one MSTP region on the port specified
 by the -port_handle argument. You must specify the
 -port_handle argument. Note that a port can only belong to
 one region.

 modify - Changes the configuration for the MSTP region(s)
 identified by the -handle argument. You must specify the
 -handle argument.

 delete - Removes the MSTP region(s) identified by the -handle
 argument. You must specify the -handle argument.
 -port_handle
 Specifies the port on which to create MSTP region(s). The value
 can be a list of port handles. This parameter is mandatory for
 mode create.
 -handle
 Specifies an MSTP region handle returned from this procedure.
 This parameter is mandatory for modes modify and delete.

 -mstp_region_name
 Specifies the region name that the MSTP instance belongs to. The
 name can include up to 32 alphanumeric characters.

 -mstp_version_num
 Specifies the version number of the created MSTP region.
 Possible values range from 0 to 65535. The default value is 1.
 -mstp_instance_count
 Specifies the number of MST instances (MSTI) in the region.
 Possible values range from 1 to 64. The default value is 1.
 -mstp_instance_vlan_list
 Specifies an array of VLAN IDs corresponding to the instance
 numbers. The default value is 1.
 -mstp_instance_num_list
 Specifies an array of MSTI instance numbers. The default value
 is 1.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 reg_handle An MSTP region configured by
 sth::emulation_mstp_region_config.
 msti_handle A list of handles of MSTIs configured by
 sth::emulation_mstp_region_config.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_mstp_region_config creates, modifies, and deletes MSTP
 region(s) on the specified port. Use the -mode argument to specify the action to
 perform. (See the -mode argument description for information about the actions.)

 Before using this function, you must specify -stp_type to mstp.

 After an MSTP region is configured, an MSTP region handle is created,
 which can be used to modify the parameters.
Examples:
STP Functions
1051
 #### HLTAPI for Tcl ####
 The following example creates and configures a new MSTP region (Note: A port with
 handle hltport1 must already exist.)
 set status [sth::emulation_mstp_region_config -mode create
 -port_handle {$hltport1, $hltport2} \
 -mstp_region_name reg1\
 -mstp_version_num 1\
 -mstp_instance_count 1\
 -mstp_instance_vlan_list {1,3}\
 -mstp_instance_num_list 2]
 keylget RStatus reg_handle mstpRegionHdl
 keylget RStatus msti_handle mstiHdlList
 The following example modifies an existing MSTP region:
 set returnKlist [::sth::emulation_mstp_region_config -handle $ mstpRegionHdl \
 -mode modify\
 -mstp_instance_count 2 \
 -mstp_instance_vlan_list {1-2 3-5}\
 #### HLTAPI for Python ####
 The following example creates and configures a new MSTP region:
 device_ret0mstp = sth.emulation_mstp_region_config (
 mode = 'create',
 port_handle = port_handle[0],
 mstp_instance_count = '1',
 mstp_version_num = '1',
 mstp_instance_num_list= '1',
 mstp_instance_vlan_list= '1',
 mstp_region_name = ['Region','1']);
Sample Output:

 #### HLTAPI for Perl ####
 The following example creates and configures a new MSTP region:
 my %device_ret0mstp = sth::emulation_mstp_region_config (
 mode => 'create',
 port_handle => "$hport[1]",
 mstp_instance_count => '1',
 mstp_version_num => '1',
 mstp_instance_num_list=> '1',
 mstp_instance_vlan_list=> '1',
 mstp_region_name => 'Region 1 ');
Sample Output:
Notes:
 1. The instance_num_list and instance_vlan_list should contain the same number of
 elements. The VLANs will map to the MSTI instance number. The VLAN list should be
 comma delimited in each element.
 2. At least one CIST and one MSTI must be configured on each port. Ports on the
 same CCPU must be configured in the same MSTP region.
End of Procedure Header
sth::emulation_msti_config
Name:
 sth::emulation_msti_config
Purpose:
STP Functions
1052
 Modifies the default MSTIs that are created when the function
 sth::emulation_mstp_region_config is called.

Synopsis:
 sth::emulation_msti_config
 [-port_handle <port_handle>]
 [-handle <MSTI handle>]
 [-mstp_region_name]
 [-msti_instance_num]
 [-msti_bridge_priority <0-65535>]
 [-msti_port_priority <0-255>]
 [-msti_root_bridge_type {custom| self}]
 [-msti_region_root_priority <0-65535>]
 [-msti_region_root_mac_address <aa:bb:cc:dd:ee:ff>]
 [-msti_region_root_path_cost <0-200000000>]
 [-msti_remaining_hops <1-255>]
Arguments:
 -port_handle
 Specifies the port on which to modify the MSTIs.
 -handle
 Identifies the handle on which to modify the MSTI
 configuration. If this parameter is called, there is no need to
 use -port_handle, -mstp_region_name and -msti_instance_num.
 -mstp_region_name
 Identifies the region to modify MSTI instance configurations.
 -msti_instance_num
 Specifies the number of MSTIs for which to modify
 configurations. The default value is 1.
 -msti_bridge_priority
 Specifies the priority of the bridge in the MSTI. It must be a
 multiple of 4096. Possible values range from 0 to 65535. The
 default value is 32768.
 -msti_port_priority
 Specifies the priority of the port in the MSTI. It must
 be a multiple of 16. Possible values range from 0 to 255. The
 default value is 128.
 -msti_root_bridge_type
 Specifies the type of the initial root bridge in the MSTI.
 Possible values are:
 self - Current bridge is the root bridge.

 custom - Identify a different bridge as the root bridge.
 The default value is self.
 -msti_region_root_priority
 Specifies the bridge priority of the root bridge in the region
 for this MSTI. It must be a multiple of 4096.
 Possible values range from 0 to 65535. The default value is
 32768. This argument is available when msti_root_bridge_type is
 set to custom.
 -msti_region_root_mac_address
 Specifies the MAC address of the MSTI. The default value is
 00:00:10:00:10:00. This argument is available when
 msti_root_bridge_type is set to custom.
 -msti_region_root_path_cost
 Specifies the cost to reach the root bridge in the MSTI.
 Possible values range from 0 to 200000000. The default value is
 0. This argument is available when - msti_root_bridge_type set
 to custom.
STP Functions
1053
 -msti_remaining_hops
 Specifies the remaining hops in the MSTI instance. Possible
 values range from 1 to 255. The default value is 16. This
 argument is available when msti_root_bridge_type set to custom.
Arguments Unsupported by Save as HLTAPI:
 None
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a keyed
 list/dictionary/hash (See Introduction for more information on return value formats)
 using the following keys (with corresponding data):
 handles A list of handles that identify the MSTIs modified by the
 sth::emulation_msti_config function.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_msti_config modifies the default MSTI(s) created in the MSTP
 regions on the specified port. You must specify one or more MSTP regions when
 you call this function.

 To modify an existing MSTI, you can either specify the MSTI handle
 and MSTI-related arguments, or specify -port_handle, -mstp_region_name,
 -msti_instance_num and other related arguments (without specifying -handle).
Examples:
 #### HLTAPI for Tcl ####
 The following example modifies the default MSTI configuration. (Note: A port with
 handle hltport1 must already exist.)
 sth::emulation_msti_config -port_handle $hltport1\
 -mstp_region_name reg1\
 -msti_instance_num 1\
 -msti_bridge_priority 4096\
 -msti_port_priority 16\
 #### HLTAPI for Python ####
 The following example modifies the default MSTI configuration created by
 function sth.emulation_mstp_region_config:

 device_ret0msti = sth.emulation_msti_config (
 port_handle = port_handle[0],
 msti_region_root_mac_address= '00:00:10:00:10:00',
 msti_region_root_priority= '32768',
 msti_instance_num = '1',
 msti_root_bridge_type= 'self',
 msti_port_priority = '128',
 msti_bridge_priority= '32768',
 msti_remaining_hops = '16',
 msti_region_root_path_cost= '0');
Sample Output:
 #### HLTAPI for Perl ####
 The following example modifies the default MSTI configuration created by
 function sth::emulation_mstp_region_config:
 my %device_ret0msti = sth::emulation_msti_config (
 port_handle => "$hport[1]",
 msti_region_root_mac_address=> '00:00:10:00:10:00',
 msti_region_root_priority=> '32768',
 msti_instance_num => '1',
 msti_root_bridge_type=> 'self',
 msti_port_priority => '128',
 msti_bridge_priority=> '32768',
 msti_remaining_hops => '16',
STP Functions
1054
 msti_region_root_path_cost=> '0');
Sample Output:
Notes:
End of Procedure Header
sth::emulation_stp_control
Name:
 sth::emulation_stp_control
Purpose:
 Starts or stops the STP device on the specified port, or initializes a topology
 change.
Synopsis:
 sth::emulation_stp_control
 -action {start|stop|init_topo_change}
 [-port_handle <port handle>]
 [-handle <device handle>]
 [-type {bridge_port|cist| msti}]
Arguments:
 -action
 Specifies the action(s) to be performed on the STP message.
 Possible values are start, stop and init_topo_change.
 start - Starts the configured STP device/topology on the specified
 port.
 stop - Stops the configured STP device/topology on the specified
 port.

 init_topo_change - Initiates the topology change and sends the
 Topology Change Notification (TCN) BPDU. The Topology Change
 Notification (TCN) provides a means to notify all bridges on
 a network of a topology change, and then limit the network
 down time associated with forwarding table updates.
 This argument is mandatory.
 -port_handle
 Identifies the port handle on which to perform the action.
 -handle
 Identifies the STP device handle on which to perform the action.
 -type
 The type of the emulated STP message for which to perform the
 action. Possible values are bridge_port, cist and msti. The
 default value is bridge_port.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::emulation_stp_control function starts or stops the emulated STP
 device/topology on the specified port. You can also use this function to
STP Functions
1055
 initiate the topology change and send the TCN BPDU .
Examples:
 #### HLTAPI for Tcl ####
 The following example starts the STP device:
 sth::emulation_stp_control -mode start -handle $stpDeviceHandle
 The following example stops the STP router on the specified port:
 sth::emulation_stp_control -mode stop -handle $stpDeviceHandle -type msti

Sample Output: {handle router1} {status 1}
 #### HLTAPI for Python ####
 The following example starts the STP device:

 ctrl_ret1 = sth.emulation_stp_control (
 handle = device_list,
 action = 'start');

Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 The following example starts the STP device:
 my %ctrl_ret1 = sth::emulation_stp_control (
 handle => "$device_list",
 action => 'start');
Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
End of Procedure Header
sth::emulation_stp_stats
Name:
 sth::emulation_stp_stats
Purpose:
 Retrieves information on results on the specified port or STP handle.
Synopsis:
 sth::emulation_stp_stats
 [-port_handle <port handle>]
 [-handle <STP device handle>]
 [-mode {both|stp| msti}]
Arguments:
 -port_handle
 Specifies the port for which you want information.
 -handle
 Identifies the STP device handle from which to retrieve
 statistics. It is returned from the sth::emulation_stp_config
 function.
 -mode
 Specifies the kind of information you want to see. Possible
 values are stp, msti, and both.
STP Functions
1056
 stp - Returns STP statistics
 msti - Returns MSTI statistics
 both - Returns both
 Note: MSTI statistics are only available when you specify the STP
 type to mstp.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 port_id
 Port ID
 bridge_id
 Bridge ID
 root_id
 Root bridge ID
 designated_bridge_id
 Designated bridge ID
 tx_bpdus
 Number of BPDUs transmitted
 rx_bpdus
 Number of BPDUs received
 tx_bpdu_flag
 Last transmitted BPDU flag value
 rx_bpdu_flag
 Last received BPDU flag value
 tx_tc_bit_set
 Number of topology change bit sets transmitted
 rx_tc_bit_set
 Number of topology change bit sets received
 tx_tc_ack
 Number of topology change acknowledgements transmitted
 rx_tc_ack
 Number of topology change acknowledgements received
 tx_proposals
 Number of BPDUs transmitted with proposal bit set
 (RSTP only)
 rx_proposals
 Number of BPDUs received with proposal bit set
 (RSTP only)
 tx_tc_agree
 Number of topology change agreements transmitted
 rx_tc_agree
 Number of topology change agreements received
 tx_port_role
 Transmit port role
 rx_port_role
 Receive port role
 tx_port_state
 Transmit port state
 rx_port_state
 Receive port state
 regional_root_id
 Regional root ID (MSTP only)
 tx_tcns
 Number of TCN messages transmitted
 rx_tcns
 Number of TCN messages received
 vlan_id
 STP bridge port starting VLAN ID
 instance_num
 Instance number of the MSTI (MSTP only)
Description:
 The sth::emulation_stp_stats function provides information about both STP and
 MSTI (when STP type is MSTP)
STP Functions
1057
 This function returns the requested data (STP or MSTI information or both) and a
 status value (1 for success). If there is an error, the function returns the
 status value (0) and an error message. Function return values are formatted as a
 keyed list (supported by the Tcl extension software - TclX). Use the TclX
 function keylget to retrieve data from the keyed list. (See Return Values for a
 description of each key.)
Examples: See Sample Input and Sample Output below.
 #### HLTAPI for Tcl #####
 Sample Input: ::sth::emulation_stp_stats -mode all \
 -handle $stpDeviceHandle]
 Sample Output:
 {stp {{host3 {{tx_tc_ack 0} {root_id 10-00-00-00-00-00-00-01} {regional_root_id
 10-00-00-00-00-00-00-01} {tx_port_role {Designated Port}} {rx_tcns 0}
 {port_id 0x1002} {tx_tcns 0} {instance_num 0} {vlan_id NA} {rx_bpdu_flag 0x78}
 {rx_port_state Forwarding} {rx_bpdus 82} {tx_bpdu_flag 0x7e} {tx_port_state
 Forwarding} {designated_bridge_id 20-00-00-00-10-00-00-00} {rx_tc_bit_set 6}
 {bridge_id 20-00-00-00-10-00-00-00} {tx_bpdus 44} {rx_tc_agree 82}
 {tx_tc_bit_set 5} {rx_proposals 2} {tx_tc_agree 44} {tx_proposals 44}
 {rx_tc_ack 0} {rx_port_role {Root Port}}}} {host4 {{tx_tc_ack 0}
 {root_id 10-00-00-00-00-00-00-01} {regional_root_id 10-00-00-00-00-00-00-01}
 {tx_port_role {Root Port}} {rx_tcns 0} {port_id 0x4003} {tx_tcns 0}
 {instance_num 0} {vlan_id NA} {rx_bpdu_flag 0x7e} {rx_port_state Forwarding}
 {rx_bpdus 44} {tx_bpdu_flag 0x78} {tx_port_state Forwarding}
 {designated_bridge_id 20-00-00-00-10-00-00-00} {rx_tc_bit_set 5}
 {bridge_id 10-00-00-00-11-00-00-00} {tx_bpdus 82} {rx_tc_agree 44}
 {tx_tc_bit_set 6} {Designated Port}}}}}} {msti {{host3 {{bridgeportresults2
 {{tx_tc_ack 0} {root_id NA} {regional_root_id 80-00-00-00-10-00-00-00}
 {tx_port_role {Designated Port}} {rx_tcns 0} {port_id 0x8002} {tx_tcns 0}
 {instance_num 2} {vlan_id NA} {rx_bpdu_flag 0x78} {rx_port_state Forwarding}
 {rx_bpdus 19} {tx_bpdu_flag 0x7e} {tx_port_state Forwarding}
 {designated_bridge_id 80-00-00-00-10-00-00-00} {rx_tc_bit_set 3}
 {bridge_id 80-00-00-00-10-00-00-00} {tx_bpdus 10} {rx_tc_agree 19}
 {tx_tc_bit_set 2} {rx_proposals 1} {tx_tc_agree 10} {tx_proposals 10}
 {rx_tc_ack 0} {rx_port_role {Root Port}}}} {bridgeportresults3 {{tx_tc_ack 0}
 {root_id NA} {regional_root_id 10-00-00-00-11-00-00-00} {tx_port_role {Root
 Port}} {rx_tcns 0} {port_id 0x8002} {tx_tcns 0} {instance_num 5} {vlan_id NA}
 {rx_bpdu_flag 0x7c} {rx_port_state Forwarding} {rx_bpdus 19} {tx_bpdu_flag 0x78}
 {tx_port_state Forwarding} 80-00-00-00-10-00-00-00} {tx_bpdus 10} {rx_tc_agree
 19} {tx_tc_bit_set 2} {rx_proposals 1} {tx_tc_agree 10} {tx_proposals 0}
 {rx_tc_ack 0} {rx_port_role {Designated Port}}}}}} {host4 {{bridgeportresults5
 {{tx_tc_ack 0} {root_id NA} {regional_root_id 80-00-00-00-10-00-00-00}
 {tx_port_role {Root Port}} {rx_tcns 0} {port_id 0x8003} {tx_tcns 0}
 {instance_num 2} {vlan_id NA} {rx_bpdu_flag 0x7e} Forwarding}
 {designated_bridge_id 80-00-00-00-10-00-00-00} {rx_tc_bit_set 2}
 {bridge_id 80-00-00-00-11-00-00-00} {tx_bpdus 19} {rx_tc_agree 10}
 {tx_tc_bit_set 3} {rx_proposals 10} {tx_tc_agree 19} {tx_proposals 1}
 {rx_tc_ack 0} {rx_port_role {Designated Port}}}} {bridgeportresults6 {{tx_tc_ack 0}
 {root_id NA} {regional_root_id 10-00-00-00-11-00-00-00} {tx_port_role
 {Designated Port}} {rx_tcns 0} {port_id 0x4003} {tx_tcns 0} {instance_num 5}
 {vlan_id NA} {rx_bpdu_flag 0x78} {rx_port_state Forwarding} {rx_bpdus 10}
 {tx_bpdu_flag 0x7c} {tx_port_state Forwarding}
 {designated_bridge_id 80-00-00-00-11-00-00-00} {rx_tc_bit_set 2}
 {bridge_id 80-00-00-00-11-00-00-00} {tx_bpdus 19} {rx_tc_agree 10} {tx_tc_bit_set 3}
 {rx_proposals 0} {tx_tc_agree 19} {tx_proposals 1} {rx_tc_ack 0} {rx_port_role
 {Root Port}}}}}}}} {status 1}
 #### HLTAPI for Python ####
 Sample Input:
 $device = "$device_ret0{handle}[0]";
 my %results_ret1 = sth::emulation_stp_stats (
 handle => "$device",
 mode => 'both');
 Sample Output:
STP Functions
1058
 {'status': '1', 'stp': {'host3': {'tx_tc_ack': '0', 'rx_tc_agree': '0',
 'tx_port_role': 'NONE', 'tx_tc_agree': '0', 'root_id': 'NA', 'instance_num': '0',
 'tx_bpdu_flag': '0x00', 'rx_tcns': '0', 'rx_port_state': 'NONE',
 'regional_root_id': 'NA', 'rx_port_role': 'NONE', 'port_id': '0x8001', 'vlan_id':
 'NA', 'tx_tc_bit_set': '0', 'tx_proposals': '0', 'designated_bridge_id':
 '00-00-00-00-00-00-00-00', 'rx_bpdus': '0', 'tx_port_state': 'NONE',
 'rx_bpdu_flag': '0x00', 'bridge_id': '80-00-00-00-10-00-10-00', 'tx_tcns': '0',
 'rx_proposals': '0', 'rx_tc_bit_set': '0', 'tx_bpdus': '0', 'rx_tc_ack': '0'}}}
 #### HLTAPI for Perl ####
 Sample Input:
 $device = "$device_ret0{handle}[0]";
 my %results_ret1 = sth::emulation_stp_stats (
 handle => "$device",
 mode => 'both');
 Sample Output:
 $VAR1 = 'stp';
 $VAR2 = {
 'host3' => {
 'rx_tc_bit_set' => '0',
 'root_id' => 'NA',
 'instance_num' => '0',
 'port_id' => '0x8001',
 'tx_tc_ack' => '0',
 'tx_bpdu_flag' => '0x00',
 'rx_proposals' => '0',
 'tx_port_role' => 'NONE',
 'rx_bpdu_flag' => '0x00',
 'rx_port_role' => 'NONE',
 'designated_bridge_id' => '00-00-00-00-00-00-00-00',
 'rx_tcns' => '0',
 'tx_bpdus' => '0',
 'rx_port_state' => 'NONE',
 'tx_tc_bit_set' => '0',
 'rx_bpdus' => '0',
 'regional_root_id' => 'NA',
 'rx_tc_agree' => '0',
 'tx_tcns' => '0',
 'tx_port_state' => 'NONE',
 'tx_tc_agree' => '0',
 'vlan_id' => 'NA',
 'bridge_id' => '80-00-00-00-10-00-10-00',
 'rx_tc_ack' => '0',
 'tx_proposals' => '0'
 }
 };
 $VAR3 = 'status';
 $VAR4 = '1';

End of Procedure Header
Traffic Functions
1059
Traffic Functions
Functions:
sth::traffic_config
sth::traffic_config_ospf
sth::imix_config
sth::traffic_control
sth::traffic_stats
sth::drv_stats
sth::create_csv_file
sth::traffic_config
Name:
 sth::traffic_config
Purpose:
 Creates, modifies, removes, or resets a stream block of network traffic on
 the specified test port(s). A stream is a series of packets that can be
 tracked by Spirent HLTAPI. A stream block is a collection of one or
 more streams represented by a base stream definition plus one or more rules
 that describe how the base definition is modified to produce additional
 streams.
Synopsis:
 sth::traffic_config
 -mode {create | modify | remove | enable | disable | reset}
 -port_handle <handle>
 [-stream_id <stream_handle>]
 [-disable_signature {1 | 0}]
 [-emulation_src_handle <handle>]
 [-emulation_dst_handle <handle>]
 [-tunnel_bottom_label <ALPHANUM>]
 [-tunnel_next_label <ALPHANUM>]
 [-tunnel_top_label <ALPHANUM>]
 [-enable_stream {1 | 0}]
 [-fcs_error {1 | 0}]
 [-fill_value <integer>]
 [-inter_stream_gap <ANY>]
 [-inter_stream_gap_unit {percent | fps | bytes | ms | ns | bps | Kbps |Mbps}
 [-bidirectional {0 | 1 | true | false | yes | no}]
 [-port_handle2 <handle>]
 [-mac_dst2 <aa:bb:cc:dd:ee:ff>]
 [-mac_dst2_count <1-2147483647>]
 [-mac_dst2_mode {fixed | increment | decrement | random |shuffle}]
 [-mac_dst2_step <1-255>]
 [-mac_src2 <aa:bb:cc:dd:ee:ff>]
 [-mac_src2_count <1-2147483647>]
 [-mac_src2_mode {fixed | increment | decrement | random | shuffle]
 [-mac_src2_step <1-255>]
 -l2_encap {ethernet_ii | ethernet_ii_vlan | atm_vc_mux
 | ethernet_8022 | ethernet_8022_vlan |
 ethernet_ii_vlan_mpls | ethernet_8023_snap |
 ethernet_8023_snap_vlan |fibre_channel}
 [-frame_size <44-16365>]
 [-frame_size_min <44-16365>]
 [-frame_size_max <44-16365>]
 [-frame_size_step <0-16321>]
 [-dest_port_list <port_list>]
 [-mac_dst <aa:bb:cc:dd:ee:ff>]
 [-mac_dst_count <1-2147483647>]
 [-mac_dst_mode {fixed | increment | decrement | random | shuffle}]
 [-mac_dst_step <1-255>]
 [-mac_src <aa:bb:cc:dd:ee:ff>]
Traffic Functions
1060
 [-mac_src_count <1-2147483647>]
 [-mac_src_mode {fixed | increment | decrement | random | shuffle}]
 [-mac_src_step <1-255>]
 [-llc_control <00-FF>]
 [-snap_ether_type <hexadecimal>]
 [-snap_oui_id <000000-FFFFFF>]
 [-appletalk_header <hexadecimal>]
 [-aarp_header <hexadecimal>]
 [-decnet_header <hexadecimal>]
 [-vines_header <hexadecimal>]
 [-llc_dsap {04 | 06 | 80 | AA | BC | E0 |FE}]
 [-llc_ssap {04 | 06 | 80 | AA | BC | E0 |FE}]
 [-ipx_header <hexadecimal>]
 [-xns_header <hexadecimal>]
 [-length_mode {increment | imix | fixed | random | auto}]
 [-l3_length <40-16383>]
 [-l3_length_max <40-16383>]
 [-l3_length_min <40-16383>]
 [-l3_imix1_ratio <integer>]
 [-l3_imix1_size <integer>]
 [-l3_imix2_ratio <integer>]
 [-l3_imix2_size <integer>]
 [-l3_imix3_ratio <integer>]
 [-l3_imix3_size <integer>]
 [-l3_imix4_ratio <integer>]
 [-l3_imix4_size <integer>]
 [-vci <0-65535>]
 [-vci_count <1-65536>]
 [-vci_step <0-65535>]
 [-vpi <0-255>]
 [-vpi_count <1-256>]
 [-vpi_step <0-255>]
 [-vlan_cfi {0 | 1}]
 [-vlan_outer_cfi {0 | 1}]
 [-vlan_priority_mode {fixed | increment | decrement | random |
 shuffle}]
 [-vlan_priority_step <0-4095>]
 [-vlan_priority_count <1-4096>]
 [-vlan_id <0-4094>]
 [-vlan_id_count <1-4096>]
 [-vlan_id_mode {fixed | increment | decrement | random |
 shuffle}]
 [-vlan_id_repeat <integer>]
 [-vlan_id_step <0-4095>]
 [-vlan_tpid <0-65535>]
 [-vlan_user_priority <0-7>]
 [-vlan_id_outer <0-4095>]
 [-vlan_id_outer_mode {fixed | increment | decrement | random
 | shuffle}]
 [-vlan_id_outer_count <1-4096>]
 [-vlan_id_outer_repeat <integer>]
 [-vlan_id_outer_step <0-4094>]
 [-vlan_outer_tpid <0-65535>]
 [-vlan_outer_user_priority <0-7>]
 [-qinq_incr_mode {inner | outer | both}]
 [-fc_eof {EOFt | EOFa | EOFn | EOFni}]
 [-fc_sof {SOFi2 | SOFn2 | SOFi3 | SOFn3 |SOFf}]
 [-fc_cs_ctl <00 - FF>]
 [-fc_data_field_control <00 - FF>]
 [-fc_dest_id <000000 - FFFFFF>]
 [-fc_frame_control <000000 - FFFFFF>]
 [-fc_orig_exchange_id <0000 - FFFF>]
 [-fc_parameter <00000000 - FFFFFFFF>]
 [-fc_r_ctl <0 - FF>]
 [-fc_response_exchange_id <0000 - FFFF>]
 [-fc_seq_count <0000 - FFFF>]
 [-fc_seq_id <00 - FF>]
 [-fc_source_id <000000 - FFFFFF>]
 [-fc_type <00 - FF>]
 -l2_encap {ethernet_ii_pppoe | ethernet_ii_vlan_pppoe |
 ethernet_ii_qinq_pppoe | ethernet_ii_unicast_mpls}
Traffic Functions
1061
 -l3_protocol {ipv4 | ipv6 | arp }
 [-arp_src_hw_addr < aa:bb:cc:dd:ee:ff>]
 [-arp_src_hw_mode <fixed | increment | decrement>]
 [-arp_src_hw_count <1-2147483647>]
 [-arp_dst_hw_addr <aa:bb:cc:dd:ee:ff>]
 [-arp_dst_hw_mode <fixed | increment | decrement>]
 [-arp_dst_hw_count <1-2147483647>]
 [-arp_operation <arpRequest | arpReply | rarpRequest
 | rarpReply >]
 [-ip_checksum {0 | 1}]
 [-ip_dscp <0-63>]
 [-ip_dscp_step <1-63>]
 [-ip_dscp_count <1-63>]
 [-ip_dst_addr <a.b.c.d>]
 [-ip_dst_count <1-2147483647>]
 [-ip_dst_mode {increment | decrement | random | shuffle | fixed}]
 [-ip_dst_step <a.b.c.d>]
 [-ip_dst_block_count <1-2147483647>]
 [-ip_dst_block_step <a.b.c.d>]
 [-ip_fragment {1 | 0}]
 [-ip_fragment_offset <0-8191>]
 [-ip_hdr_length <0-15>]
 [-ip_id <0-65535> ]
 [-ip_precedence <0-7> ]
 [-ip_precedence_count <integer>]
 [-ip_precedence_step <1-7> ]
 [-ip_protocol <0-255>]
 [-ip_src_addr <a.b.c.d>]
 [-ip_src_count <1-2147483647>]
 [-ip_src_mode {increment | decrement | random | shuffle | fixed}]
 [-ip_src_step <a.b.c.d>]
 [-ip_tos_field <0-15>]
 [-ip_tos_count <integer>]
 [-ip_tos_step <1-15>]
 [-ip_mbz {0 | 1}]
 [-ip_router_alert {0 | 1}]
 [-ipv4_header_options <router_alert>]
 [-ipv4_router_alert <keyed list>]
 [-ip_ttl <0-255>]
 [-ipv6_dst_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_dst_count <1-2147483647>]
 [-ipv6_dst_mode {increment | decrement | random | shuffle | fixed}]
 [-ipv6_dst_step <1-65535> | <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_dstprefix_len <1-128>]
 [-ipv6_flow_label <0-1048575]
 [-ipv6_hop_limit <0-255>]
 [-ipv6_length <0-65535>]
 [-ipv6_next_header <0-255>]
 [-ipv6_src_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_src_count <1-2147483647>]
 [-ipv6_src_mode {increment | decrement | random | shuffle | fixed}]
 [-ipv6_src_step <1-65535> | <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-ipv6_srcprefix_len <1-128>]
 [-ipv6_traffic_class <0-255>]
 [-ipv6_frag_id < 0-4294967295>]
 [-ipv6_frag_more_flag <0 | 1>]
 [-ipv6_frag_offset < 0-65535>]
 [-ipv6_auth_seq_num <0-4294967295>]
 [-ipv6_auth_spi <0-4294967295 >]
 [-ipv6_auth_payload_len <0-4294967295>]
 [-ipv6_auth_string < hexadecimal >]
 [-ipv6_routing_res < hexadecimal >]
 [-ipv6_routing_node_list < list of IPv6 addresses>]
 [-ipv6_destination_options <keyed list>]
 [-ipv6_hop_by_hop_options <keyed list>]
 [-ipv6_extension_header { | hop_by_hop | routing |
 destination | authentication | fragment}]
 -l3_outer_protocol {ipv4 | ipv6}
 [-ip_dst_outer_addr <a.b.c.d>]
 [-ip_dst_outer_count <1-2147483647>]
 [-ip_dst_outer_mode {increment | decrement | random| fixed | shuffle}]
Traffic Functions
1062
 [-ip_dst_outer_step <a.b.c.d>]
 [-ip_fragment_outer_offset <0-8191>]
 [-ip_hdr_outer_length <0-15>]
 [-ip_outer_checksum {0 | 1}]
 [-ip_outer_ttl <0-255>]
 [-ip_outer_id <0-65535> ]
 [-ip_outer_protocol <0-255>]
 [-ip_src_outer_addr <a.b.c.d>]
 [-ip_src_outer_count <1-2147483647>]
 [-ip_src_outer_mode {increment | decrement | random | fixed |
 shuffle}]
 [-ip_src_outer_step <a.b.c.d>]
 [-ipv6_dst_outer_count <1-2147483647>]
 [-ipv6_dst_outer_mode {increment | decrement | random | shuffle}]
 [-ipv6_dst_outer_step <1-65535>]
 [-ipv6_src_outer_count <1-2147483647>]
 [-ipv6_src_outer_mode {increment | decrement | random | shuffle}]
 [-ipv6_src_outer_step <1-65535>]
 [-ipv6_srcprefix <aaaa:bbbb:cccc:dddd:eeee:ffff>]
 [-ipv6_dstprefix <aaaa:bbbb:cccc:dddd:eeee:ffff>]
 -l4_protocol {tcp | udp | icmp | icmpv6 | igmp | rtp |isis | ospf}
 [-custom_llc < hexadecimal >]
 [-custom_pattern < hexadecimal >]
 [-tcp_src_port <0-65535>]
 [-tcp_dst_port <0-65535 }]
 [-tcp_ack_num <^[0-9]+$>]
 [-tcp_reserved <0-63>]
 [-tcp_seq_num <1-2147483647>]
 [-tcp_urgent_ptr <0-65535>]
 [-tcp_window <0-65535>]
 [-tcp_ack_flag {0 | 1}]
 [-tcp_fin_flag {0 | 1}]
 [-tcp_psh_flag {0 |1}]
 [-tcp_rst_flag {0 | 1}]
 [-tcp_syn_flag {0 | 1}]
 [-tcp_urg_flag {0 | 1}]
 [-udp_dst_port <0-65535>]
 [-udp_src_port <0-65535>]
 [-udp_checksum {0 | 1}]
 [-rtp_csrc_count <0-15>]
 [-rtp_payload_type <0-31>]
 [-ssrc <0-4294967295>]
 [-timestamp_initial_value <0-4294967295>]
 [-timestamp_increment <0-65535>]
 [-csrc_list {list of integer values}]
 [-icmp_checksum <integer>]
 [-icmp_code <0-255>]
 [-icmp_id <0-65535>]
 [-icmp_seq <0-65535>]
 [-icmp_type <0-255>]
 [-icmpv6_type {1 | 2 | 3 | 4 |129 | 129 | 130 | 131 | 132 | 133 |
 134 | 135 | 136 | 137 | 143}
 [-icmpv6_ip_data <2-octet string>]
 [-icmpv6_ip_src_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_ip_dst_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_ip_hop_limit <0-255>]
 [-icmpv6_ip_traffic_class <0-255>]
 [-icmpv6_ip_next_header <0-255>]
 [-icmpv6_ip_flow_label <0-1048575>]
 [-icmpv6_ip_length <0-65535>]
 [-icmpv6_ip_gateway <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_ip_version {4 | 6}]
 [-icmpv6_checksum <integer>]
 [-icmpv6_code {1 | 2 | 3 | 4 |5}]
 [-icmpv6_unused <0-65535>]
 [-icmpv6_mtu <0-65535>]
 [-icmpv6_pointer <0-65535>]
 [-icmpv6_id <0-65535> ]
 [-icmpv6_seq <0-65535>]
 [-icmpv6_data <hex>]
 [-icmpv6_reserved <0-65535> ]
Traffic Functions
1063
 [-icmpv6_target_address <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_oflag {0 | 1}]
 [-icmpv6_rflag {0 | 1}]
 [-icmpv6_sflag {0 | 1}]
 [-icmpv6_suppress_flag {0 | 1}]
 [-icmpv6_max_resp_delay <0-65535>]
 [-icmpv6_mcast_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_addr_list_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_link_layer_length <0-65535>]
 [-icmpv6_link_layer_type {1 | 2 | 3 | 4 |5}]
 [-icmpv6_link_layer_value <hex>]
 [-icmpv6_mtu_option_type {1 | 2 | 3 | 4 |5}]
 [-icmpv6_mtu_option_length <0-65535>]
 [-icmpv6_mtu_option_reserved <0-65535>]
 [-icmpv6_mtu_option_mtu <0-65535>]
 [-icmpv6_prefix_option_abit {0 | 1}]
 [-icmpv6_prefix_option_lbit {0 | 1}]
 [-icmpv6_prefix_option_length <0-65535>]
 [-icmpv6_prefix_option_preferred_lifetime <0-65535>]
 [-icmpv6_prefix_option_prefix <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_prefix_option_prefix_len <0-255>]
 [-icmpv6_prefix_option_reserved1 <0-65535>]
 [-icmpv6_prefix_option_reserved2 <0-65535>]
 [-icmpv6_prefix_option_type {1 | 2 | 3 | 4 |5}]
 [-icmpv6_prefix_option_valid_lifetime {1 | 2 | 3 | 4 |5}]
 [-icmpv6_dest_address <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_redirect_hdr_type {1 | 2 | 3 | 4 |5}]
 [-icmpv6_redirect_hdr_length <0-255>]
 [-icmpv6_redirect_hdr_reserved1 <0-65535>]
 [-icmpv6_redirect_hdr_reserved2 <0-65535>]
 [-icmpv6_group_address <0-65535>]
 [-icmpv6_max_resp_code <0-65535>]
 [-icmpv6_num_source <0-65535>]
 [-icmpv6_qqic <0-65535>]
 [-icmpv6_qrv <0-65535>]
 [-icmpv6_resv <0-65535>]
 [-icmpv6_num_grp_records <0-65535>]
 [-icmpv6_grp_record_aux_data_len <0-65535>]
 [-icmpv6_grp_record_mcast_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-icmpv6_grp_record_num_source <0-65535>]
 [-icmpv6_grp_record_record_type {1 | 2 | 3 | 4 |5 | 6}]
 [-igmp_group_addr <a.b.c.d>]
 [-igmp_group_count <0-65535>]
 [-igmp_group_mode {increment | decrement}]
 [-igmp_group_step <a.b.c.d>]
 [-igmp_multicast_src <a.b.c.d>]
 [-igmp_multicast_addr <a.b.c.d>]
 [-igmpv3_grprechandle <igmpv3 grprechandle>
 [-igmp_multicast_addr <a.b.c.d>]
 [-igmp_max_response_time <0-65535>]
 [-igmp_msg_type {query | report}]
 [-igmp_qqic <0-255>]
 [-igmp_qrv <0-7>]
 [-igmp_s_flag {0 | 1}]
 [-igmp_type <numeric>]
 [-igmp_version <1-3>]
 [-isis_pdu_header_len <00-FF>]
 [-isis_version <00-FF>]
 [-isis_system_id_len <00-FF>]
 [-isis_pdu_type <00-FF>]
 [-isis_version2 <00-FF>]
 [-isis_reserved <00-FF>]
 [-isis_max_area_addr <00-FF>]
 [-isis_reserved_circuit_type <00-FF>]
 [-isis_source_id <hexadecimal>]
 [-isis_holder_timer <0000-FFFF>]
 [-isis_pdu_len <0000-FFFF>]
 [-isis_reserved_bit <binary string>]
 [-isis_priority <binary string>]
 [-isis_lan_id <hexadecimal>]
 [-transmit_mode {continuous | continuous_burst | multi_burst |
Traffic Functions
1064
 single_burst | single_pkt}]
 [-burst_loop_count <numeric>]
 [-rate_bps <bits_per_second>]
 [-rate_percent <0.00 - 100.00>]
 [-rate_pps <packets_per_second>]
 [-pkts_per_burst <1-16777215>]
 [-mpls_labels {0-1048575}]
 [-mpls_bottom_stack_bit {0 | 1} ]
 [-mpls_labels_mode { fixed | increment | decrement | list}]
 [-mpls_labels_count <numeric>]
 [-mpls_labels_step <1 - 524288> ]
 [-mpls_cos <numeric>]
 [-mpls_ttl <numeric>]
 [-mac_discovery_gw {<a.b.c.d > | <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>}]
 [-mac_discovery_gw_step <a.b.c.d> | <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-mac_discovery_gw_count <1-2147483647>]
 [-ppp_link 0 | 1]
 [-ppp_link_traffic_src_list <session_block_handle>]
 [-downstream_traffic_src_list <session_block_handle>]
 [-ppp_session_id <integer>]
 [-dhcp_link 0 | 1]
 [-dhcp_downstream <session_block_handle>]
 [-dhcp_upstream <session_block_handle> ]
 [-tunnel_handle <GRE_tunnel_handle>]
 [-vpls_source_handle <integer>]
 [-vpls_destination_handle <integer>]
 [-enable_stream_only_gen {1 | 0}]
 [-fill_type {constant | incr | decr | prbs}]
 [-enable_control_plane {0 | 1}]
 [-high_speed_result_analysis {0 | 1}]
 [-name <name>]
 [-traffic_state {1 | 0}]
 [-tcp_checksum <integer>]
 [-tcp_data_offset <1-15>]
 [-tcp_src_port_mode {increment | decrement | random | shuffle}]
 [-tcp_src_port_count <integer>]
 [-tcp_src_port_step <integer>]
 [-tcp_dst_port_count <integer>]
 [-tcp_dst_port_step <integer>]
 [-tcp_dst_port_mode {increment | decrement | random| shuffle}]
 [-udp_src_port_count <integer>]
 [-udp_src_port_step <integer>]
 [-udp_dst_port_mode {increment | decrement | random | shuffle}]
 [-udp_dst_port_count <integer>]
 [-udp_dst_port_step <integer>]
 [-udp_src_port_mode {increment | decrement | random | shuffle}]
 [-vxlan {0 | 1}]
 [-vni <0-16777215>]
 [-peer_vtep_ipv4_addr <a.b.c.d>]
 [-ipv4_multicast_group_addr <a.b.c.d>]
 [-inner_l3_protocol {ipv4}]
 [-inner_ip_src_addr <a.b.c.d>]
 [-inner_ip_src_count <1-2147483647>]
 [-inner_ip_src_mode {increment | decrement | random | shuffle | fixed}]
 [-inner_ip_src_step <a.b.c.d>]
 [-inner_ip_dst_addr <a.b.c.d>]
 [-inner_ip_dst_count <1-2147483647>]
 [-inner_ip_dst_mode {increment | decrement | random | shuffle | fixed}]
 [-inner_ip_dst_step <a.b.c.d>]
 [-inner_ip_fragment {1 | 0}]
 [-inner_ip_fragment_offset <0-8191>]
 [-inner_ip_id <0-65535> ]
 [-inner_ip_checksum {0 | 1}]
 [-inner_ip_gw <a.b.c.d>]
 [-inner_ip_gw_step <a.b.c.d>]
 [-inner_ip_gw_count <1-2147483647>]
 [-inner_l2_encap {ethernet_ii | ethernet_ii_vlan}]
 [-inner_inner_ether_type <hexadecimal>]
 [-inner_mac_dst <aa:bb:cc:dd:ee:ff>]
 [-inner_mac_dst_count <1-2147483647>]
 [-inner_mac_dst_mode {fixed | increment | decrement | random | shuffle}]
Traffic Functions
1065
 [-inner_mac_dst_step <1-255>]
 [-inner_mac_src <aa:bb:cc:dd:ee:ff>]
 [-inner_mac_src_count <1-2147483647>]
 [-inner_mac_src_mode {fixed | increment | decrement | random | shuffle}]
 [-inner_mac_src_step <1-255>]
 [-inner_vlan_priority_mode {fixed | increment | decrement | random |
 shuffle}]
 [-inner_vlan_priority_step <0-4095>]
 [-inner_vlan_priority_count <1-4096>]
 [-inner_vlan_id <0-4094>]
 [-inner_vlan_id_count <1-4096>]
 [-inner_vlan_id_mode {fixed | increment | decrement | random | shuffle}]
 [-inner_vlan_id_repeat <integer>]
 [-inner_vlan_id_step <0-4095>]
 [-inner_vlan_cfi {0 | 1}]
 [-inner_vlan_tpid <0-65535>]
 [-inner_vlan_user_priority <0-7>]
 [-inner_vlan_id_outer <0-4095>]
 [-inner_vlan_id_outer_mode {fixed | increment | decrement | random
 | shuffle}]
 [-inner_vlan_id_outer_count <1-4096>]
 [-inner_vlan_id_outer_repeat <integer>]
 [-inner_vlan_id_outer_step <0-4094>]
 [-inner_vlan_outer_cfi {0 | 1}]
 [-inner_vlan_outer_tpid <0-65535>]
 [-inner_vlan_outer_user_priority <0-7>]
 [-inner_qinq_incr_mode {inner | outer | both}]
Arguments:
 -bidirectional
 Sets up bidirectional traffic between the ports identified
 by the port_handle and port_handle2 arguments. Valid values
 are 0 (false/no) and 1 (true/yes). Specify the value 1 (true/yes)
 to use bidirectional traffic. The default is 0.
 To configure the bidirectional flow, Spirent HLTAPI uses
 the Layer 3 protocol (IPv4 or IPv6) source and destination
 addresses for both ports. (See the -l3_protocol,
 -ip_src_addr, -ip_dst_addr, -ipv6_src_addr, and
 -ipv6_dst_addr arguments.) Spirent HLTAPI uses the
 source and destination addresses for the first port
 (-port_handle), and then swaps the addresses to use them for
 the second port (-port_handle2). Any additional values
 specified in the function call are duplicated for both
 transmitting ports.
 Spirent HLTAPI uses the MAC addresses specified in the
 -mac_dst and -mac_dst2. The -mac_dst2 argument applies to the
 port associated with -port_handle2.
 -burst_loop_count
 Specifies the number of times to transmit a burst (that is,
 a continuous transfer of data without interruption from one
 device to another). The default is 1. Use this argument when
 transmit mode is set to either multi_burst, single_burst, or
 single_pkt. Set this argument to 1 if transmit mode is set
 to either single_burst or single_pkt. -port_handle is mandatory
 when calling this argument.
 -dhcp_downstream
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the DHCP session block handle from which to
 retrieve source IP addresses and creates dynamic downstream
 traffic. The sth::dhcp_config function returns this handle
 in the keyed list. The -dhcp_link argument must be set to 1.
 -dhcp_link
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables DHCP dynamic traffic. Valid values are 1
Traffic Functions
1066
 and 0. Specify the value 1 to enable dynamic binding from
 the bound DHCP sessions. Specify the value 0 to disable DHCP
 dynamic traffic. The default is 0.
 Note: For both PPPoX and DHCP bound traffic, for subsequent
 connects and disconnect you do not have to delete and re-
 create traffic when adding new sessions. To disconnect and
 re-connect multiple PPPoX or DHCP sessions, you must stop
 and then restart traffic AFTER all new sessions have
 connected so the traffic configuration can get the newly
 updated session information. If you do not stop traffic, the
 old session information will not be replaced by the new one.
 -dhcp_upstream
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the DHCP session block handle from which to
 retrieve source IP addresses and creates dynamic upstream
 traffic. The sth::dhcp_config function returns this handle
 in the keyed list. The -dhcp_link argument must be set to 1.
 -downstream_traffic_src_list
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the PPPoX session block handle from which to
 retrieve the source IP addresses and use for the downstream
 bindings. The sth::pppox_config function returns this
 handle in the keyed list. If you use this option, you must
 set -ppp_link to 1.
 -emulation_src_handle
 The handle used to retrieve information for L2 or L3
 IPv4 source addresses. This handle is returned by an
 emulation configuration function such as
 sth::emulation_bgp_config, sth::emulation_ospf_config, or
 sth::emulation_ldp_config. An emulation handle can be a host
 handle, a router handle, or a router block handle. (For routing
 protocol, the -emulation_src_handle argument currently only
 supports BGP, OSPF, and LDP.)
 The following example creates a new stream block of traffic
 on port2, uses the default source and default destination
 MAC addresses for the stream as Ethernet II, retrieves the
 IPv4 source address from the specified BGP route block
 handle, and retrieves the IPv4 destination address from the
 specified BGP route block handle:
 ::sth::traffic_config -mode create -port_handle port2\
 -l2_encap ethernet_ii\
 -length_mode fixed -l3_length 128 -l3_protocol ipv4 \
 -emulation_dst_handle $port1BgpRouter1RouteBlk1 \
 -emulation_src_handle $port2BgpRouter1RouteBlk2
 -emulation_dst_handle
 The handle used to retrieve information for L2 or L3 IPv4
 destination addresses. This handle is returned by an
 emulation configuration function such as
 sth::emulation_bgp_config, sth::emulation_ospf_config, or
 sth::emulation_ldp_config. (The -emulation_src_handle
 argument currently only supports BGP, OSPF, and LDP.)
 An emulation handle can be a host handle, a router handle,
 or a router block handle.
 The following example creates a new stream block of traffic
 on port2, defines the source and destination MAC addresses
 for the stream as Ethernet II, generates ten source IP
 addresses for the stream block, uses the default source MAC
 address and default destination MAC address, and retrieves
 the IPv4 destination address from the specified BGP route
 block handle:
 ::sth::traffic_config -mode create -port_handle port2\
 -l2_encap ethernet_ii\
Traffic Functions
1067
 -length_mode fixed \
 -l3_length 128\
 -l3_protocol ipv4\
 -ip_src_count 10\
 -ip_src_addr 150.111.0.22\
 -ip_src_step 0.0.0.1\
 -mac_discovery_gw 150.111.0.1\
 -mac_src 00.05.00.01.00.01\
 -emulation_dst_handle $port1BgpRouter1RouteBlk1
 -ether_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Ethernet protocol type.
 Possible Values are described below:
 value Description
 0200 XEROX PUP
 0201 PUP Addr Trans
 0400 Nixdorf
 0600 XEROX NS IDP
 0660 DLOG
 0661 DLOG2
 0800 Internet IP
 0801 X.75 Internet
 0802 NBS Internet
 0803 ECMA Internet
 0804 Chaosnet
 0805 X.25 Level 3
 0806 ARP
 0807 XNS Compatibility
 0808 Frame Relay ARP
 8035 RARP
 86DD IPv6
 880B PPP
 8809 Slow Protocol
 8847 MPLS Unicast
 8848 MPLS Multicast
 8863 PPPoE Discovery
 8864 PPPoE Session
 8906 FCoE
 8914 FIP
 -frame_size
 Specifies the L2 frame size for the stream in bytes. Use this
 argument when -length_mode is set to fixed. Possible
 values range from 44 to 16365.

 -frame_size_min
 Specifies the minimum L2 frame size in bytes. Use this argument
 when -length_mode is set to random or increment. Possible values
 range from 44 to 16365.

 -frame_size_max
 Specifies the maximum L2 frame size in bytes. Use this argument
 when -length_mode is set to random or increment. Possible values
 range from 44 to 16365.

 -frame_size_step
 Specifies the step by which the frame size increments when
 -length_mode is set to increment. Possible values range from 0
 to 16321.

 -dest_port_list
 Specifies a list of ports that are expected to receive all the
 packets from this stream block. If -dest_port_list is not
 specified, all ports will receive packets.
 -tunnel_bottom_label
 Specifies the bottom label in tunnel. The value is the handle
 returned for the configured router. For example,
Traffic Functions
1068
 -tunnel_bottom_label router2\
 -tunnel_next_label
 Specifies the next label in tunnel. The value is the handle
 returned for the configured router. For example,
 -tunnel_next_label router2\
 -tunnel_top_label
 Specify the top label in tunnel. The value is the handle
 returned for the configured router. For example,
 -tunnel_top_label router2\
 -enable_stream
 Spirent Extension (for Spirent HLTAPI only).
 Whether to use streams or Variable Field Definitions (VFDs) to
 generate modified values. Possible values are 0 and 1. The
 default value is 1.
 When it is set to 0, Spirent HLTAPI uses VFDs to generate
 modified values. The values of step attributes under
 sth::traffic_config must be a power of two. In this situation, the
 number of modifiers is limited by the Spirent TestCenter
 hardware (4 or 6 depending on the card series).
 When it is set to 1, Spirent HLTAPI uses streams to generate
 modified values. A unique signature per stream is generated. If
 the per-port limit of 32k streams total across all stream blocks is
 not exceeded, unlike when the argument is set to 0, there is no
 extra rules for inputting the step values under the
 sth::traffic_config command.
 -fcs_error
 Determines whether to insert frame check sequence (FCS)
 error in the frames. Possible values are 0 and 1.
 0 - FCS error in the frames will not be inserted. This is the default.
 1 - Inserts FCS error in the frames.
 -fill_value
 Specifies the value for the constant fill pattern
 when the -fill_type argument is set to constant.
 When the -fill_type argument is set to incr or decr,
 the value of this argument indicates the starting value
 -inter_stream_gap
 Specifies the gap between frames in the same burst when the
 burst size is greater than 1. This argument is available when if
 -transmit_mode is continuous_burst or multi_burst. The default
 value is 12.
 -inter_stream_gap_unit
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the unit for inter-frame gaps. This argument is
 available when -tramsmit_mode is set to continuous_burst or
 multi_burst. Possible values are discribed below::
 percent - Inter-frame gap as a percentage of the maximum
 bandwidth available on the test module
 fps - Inter-frame gap as the number of frames per second
 bytes - Inter-frame gap as the number of bytes
 ms - Inter-frame gap in milliseconds
 ns - Inter-frame gap in nanoseconds
 bps - Inter-frame gap as the number of bits per second
 Kbps - Inter-frame gap as the number of kilobits per second
 Mbps - inter-frame gap as the number of megabits per second

 The default value is bytes.
 -ip_checksum
Traffic Functions
1069
 Verifies that packets are not corrupted. Possible values are
 0 (not corrupted) and 1 (corrupted). The default is 0.
 You must specify IPv4 in the -l3_protocol argument.
 -ip_dscp
 Specifies the Differentiated Service Code Point (DSCP)
 precedence for a particular stream. The DSCP is made of the
 six most significant bits of the DiffServ field. Possible
 values are 0 to 63. The default is 0. You must specify
 IPv4 in the -l3_protocol argument. See RFC 2474 and 2475 for
 more information.
 -ip_dscp_step
 The amount by which to increment the specified DSCP
 value(-ip_dscp) for subsequent packets. This
 argument is applicable only when you specify
 -l3_protocol ipv4.
 -ip_dscp_count
 Specifies the number of DSCP values to generate for a stream.
 Possible values range from 1 to 63. The default is 1. You must
 specify IPv4 in the -l3_protocol argument.
 -ip_dst_addr
 Specifies the destination IPv4 address of the first
 generated packet. The default is 192.0.0.1. You must specify
 IPv4 in the -l3_protocol argument.
 -ip_dst_count
 Specifies the number of destination IPv4 addresses to
 generate for a stream. Possible values range from 1 to
 2147483647. The default is 1. You must specify IPv4 in the
 -l3_protocol argument.
 -ip_dst_mode
 Specifies how Spirent HLTAPI will assign the IPv4 IP
 addresses for a particular stream. Possible values are:
 increment - For all packets, the destination IP address
 increments by the step specified in the -ip_dst_step
 argument.
 decrement - For all packets, the destination IP address
 decrements by the step specified in the -ip_dst_step
 argument.
 random - For all packets, the destination IP addresses are
 in random order.

 shuffle - For all packets, the destination IP addresses are
 in random order within a range that is determined by the
 values of -ip_dst_count and -ip_dst_step.
 fixed - The destination IP address is the same for all
 packets.
 You must specify IPv4 in the -l3_protocol argument.
 -ip_dst_step
 The amount by which to increment the specified IPv4
 destination IP address (-ip_dst_addr) for subsequent
 packets. The modifier is in the format of 0.0.0.0 for IPv4.
 See -ip_src_step for an example. You must specify IPv4 in
 the -l3_protocol argument.
 -ip_dst_outer_addr
 Specifies the destination IPv4 address of the first
 generated packet in the outer header. The default is
 192.0.0.1. You must specify IPv4 in the -l3_protocol
 argument.
Traffic Functions
1070
 -ip_dst_outer_count
 Specifies the number of destination IPv4 addresses to
 generate for the outer header. Possible values range from 1
 to 2147483647. The default is 1. You must specify IPv4 in
 the -l3_protocol argument.
 -ip_dst_outer_mode
 Specifies how Spirent HLTAPI will assign the IPv4 IP
 addresses for the outer header. Possible values are:
 increment - For all packets, the destination IP address
 increments by the step specified in the
 -ip_dst_outer_step argument.
 decrement - For all packets, the destination IP address
 decrements by the step specified in the
 -ip_dst_outer_step argument.
 random - For all packets, the destination IP addresses are
 in random order.
 fixed - The destination IP address is the same for all
 packets.
 shuffle - For all packets, the destination IP addresses are in
 random order within a range that is determined by the values
 of -ip_dst_outer_count and -ip_dst_outer_step.
 You must specify IPv4 in the -l3_protocol argument.
 -ip_dst_outer_step
 The amount by which to increment the specified IPv4
 destination IP address (-ip_dst_outer_addr) for subsequent
 packets. The modifier is in the format of 0.0.0.0 for IPv4.
 See -ip_src_outer_step for an example. You must specify IPv4
 in the -l3_protocol argument.
 -ip_dst_block_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of destination blocks for the
 streamblock. Possible values range from 1 to 2147483647.
 The default value is 1. Specify this argument when the
 destination of the stream is across different sub-interfaces.
 You must specify IPv4 in the -l3_protocol argument. Please
 refer to Examples for more information.
 -ip_dst_block_step
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the step by which to increment the destination
 addresses across different sub-interfaces. The value must
 be in IPv4 format. The default value is 0.0.1.0. You must
 specify IPv4 in the -l3_protocol argument.
 -ip_fragment
 Specifies whether the datagram is fragmented. Possible
 values are 0 (not fragmented) and 1 (fragmented).
 Fragmentation is a method for dividing large packets into
 smaller packets at any point on a route between the source
 and destination. You must specify IPv4 in the -l3_protocol
 argument.
 -ip_fragment_offset
 The byte count from the start of the original sent packet.
 If the IP packet is a fragment, the fragment offset
 indicates the location of the fragment in the final
 datagram. The fragment offset is measured in 8-octet
 increments (64 bits). Possible values range from 0 to 8191.
 The default is 0. You must specify IPv4 in the -l3_protocol
 argument.
 -ip_fragment_outer_offset
Traffic Functions
1071
 The byte count from the start of the original sent packet in
 the outer header. If the IP packet is a fragment, the
 fragment offset indicates the location of the fragment in
 the final datagram. The fragment offset is measured in
 8-octet increments (64 bits). Possible values range from 0
 to 8191. The default is 0. You must specify IPv4 in the
 -l3_protocol argument.
 -ip_hdr_length
 The length of the IP header field in number of bytes.
 Possible values range from 0 to 15. The default is 5. This
 argument is mandatory because without it the receiver would
 not know where the TCP portion of the packet begins. You
 must specify IPv4 in the -l3_protocol argument.
 -ip_hdr_outer_length
 Spirent Extension (for Spirent HLTAPI only).
 The length of the outer IP header field in number of bytes.
 Possible values range from 0 to 15. The default is 5. This
 argument is mandatory because without it the receiver would
 not know where the TCP portion of the packet begins. You
 must specify IPv4 in the -l3_protocol argument.
 -ip_id
 Specifies the identifying value used to help assemble the
 fragments of a datagram. Possible values range from 0 to
 65535. The default is 0. You must specify IPv4 in the
 -l3_protocol argument.
 -ip_outer_checksum
 Spirent Extension (for Spirent HLTAPI only).
 Verifies that packets in the outer header are not corrupted.
 Possible values are 0 (not corrupted) and 1 (corrupted). The
 default is 0. You must specify IPv4 in the -l3_protocol
 argument.
 -ip_outer_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the identifying value used to help assemble the
 fragments of a datagram in the outer header. Possible values
 range from 0 to 65535. The default is 0. You must specify
 IPv4 in the -l3_protocol argument.
 -ip_outer_protocol
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the type of L4 protocol in the outer header.
 Possible values range from 0 to 255. The default is 253.
 See -ip_protocol for descriptions of the possible values.
 -ip_outer_ttl
 Spirent Extension (for Spirent HLTAPI only).
 Sets the time-to-live (TTL) for the IP packet in the outer
 header. The TTL is a counter measured in units of seconds
 that gradually decrements to zero, at which point the
 datagram is discarded. Possible values are 0-255. The
 default is 64. You must specify IPv6 in the -l3_protocol
 argument.
 -ip_precedence
 Configure the TOS three-bit Precedence field in the IP
 header. Possible values are 0 to 7. The default is 0. You
 must specify IPv4 in the -l3_protocol argument. This argument
 is not available when -ip_tos_field is in a list format.
 Value Description
 7 Network Control
 6 Internetwork Control
 5 CRITIC/ECP
 4 Flash Override
 3 Flash
 2 Immediate
Traffic Functions
1072
 1 Priority
 0 Routine
 -ip_precedence_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign the TOS 3-bit
 Precedence in the IP header for a particular stream. Possible
 values are:
 increment - For all packets, the ToS three-bit Precedence
 increments by the step specified in the
 -ip_precedence_step argument.

 decrement - For all packets, the ToS three-bit Precedence
 decrements by the step specified in the
 -ip_precedence_step argument.

 random - For all packets, the ToS three-bit Precedence will be in
 random order

 shuffle - For all packets, the TOS three-bit Precedence will be
 in random order within a range that is determined by the
 values of -ip_precedence_count and -ip_precedence_step.

 Note: Spirent HLTAPI does not allow switching from increment, or
 decrement, shuffle to random; or from random to increment,
 decrement or shuffle.
 -ip_precedence_count
 Specifies the number of values to use in increment mode.
 The default is 0. You must specify IPv4 in the -l3_protocol
 argument.
 Note: A large IP precedence count value can degrade
 performance. If it takes too long to create the stream, try
 reducing this count.
 -ip_precedence_step
 Increment step to use in increment mode. Possible values are
 1 to 7. You must specify IPv4 in the -l3_protocol argument.
 -ip_protocol
 Indicates the type of L4 protocol in the IP header. Possible
 values range from 0 to 255. The default is 253.
 Possible values are:
 Value Description
 0 HOPOPT
 1 ICMP
 2 IGMP
 3 GGP
 4 IP
 5 ST
 6 TCP
 7 CBT
 8 EGP
 9 IGP
 10 BBN-RCC-MON
 11 NVP-II
 12 PUP
 13 ARGUS
 14 EMCON
 15 XNET
 16 CHAOS
 17 UDP
 18 MUX
 19 DCN-MEAS
 20 HMP
 21 PRM
 22 XNS-IDP
Traffic Functions
1073
 23 TRUNK-1
 24 TRUNK-2
 25 LEAF-1
 26 LEAF-2
 27 RDP
 28 IRTP
 29 ISO-TP4
 30 NETBLT
 31 MFE-NSP
 32 MERIT-INP
 33 SEP
 34 3PC
 35 IDPR
 36 XTP
 37 DDP
 38 IDPR-CMTP
 39 TP++
 40 IL
 41 IPv6
 42 SDRP
 43 IPv6-Route
 44 IPv6-Frag
 45 IDRP
 46 RSVP
 47 GRE
 48 MHRP
 49 BNA
 50 ESP
 51 AH
 52 I-NLSP
 53 SWIPE
 54 NARP
 55 MOBILE
 56 TLSP
 57 SKIP
 58 IPv6-ICMP
 59 IPv6-NoNxt
 60 IPv6-Opts
 62 CFTP
 64 SAT-EXPAK
 65 KRYPTOLAN
 66 RVD
 67 IPPC
 69 SAT-MON
 70 VISA
 71 IPCV
 72 CPNX
 73 CPHB
 74 WSN
 75 PVP
 76 BR-SAT-MON
 77 SUN-ND
 78 WB-MON
 79 WB-EXPAK
 80 ISO-IP
 81 VMTP
 82 SECURE-VMTP
 83 VINES
 84 TTP
 85 NSFNET-IGP
 86 DGP
 87 TCF
 88 EIGRP
 89 OSPFIGP
 90 Sprite-RPC
 91 LARP
 92 MTP
 93 AX.25
 94 IPIP
 95 MICP
 96 SCC-SP
Traffic Functions
1074
 97 ETHERIP
 98 ENCAP
 100 GMTP
 101 IFMP
 102 PNNI
 103 PIM
 104 ARIS
 105 SCPS
 106 QNX
 107 A/N
 108 IPComp
 109 SNP
 110 Compaq-Peer
 111 IPX-in-IP
 112 VRRP
 113 PGM
 115 L2TP
 116 DDX
 117 IATP
 118 STP
 119 SRP
 120 UTI
 121 SMP
 122 SM
 123 PTP
 124 ISIS over IPv4
 125 FIRE
 126 CRTP
 127 CRUDP
 128 SSCOPMCE
 129 IPLT
 130 SPS
 131 PIPE
 132 SCTP
 133 FC
 134 RSVP-E2E-IGNORE
 135 Mobility Header
 136 UDPLite
 137 MPLS-in-IP
 253 Experimental
 255 Reserved
 You must specify IPv4 in the -l3_protocol argument.
 -ip_src_addr
 Specifies the source IPv4 address of the first generated
 packet. The default is 0.0.0.0. You must specify IPv4 in the
 -l3_protocol argument.
 -ip_src_count
 The number of source IP addresses to generate for a stream.
 Possible values range from 1 to 2147483647. The default is 1.
 -ip_src_outer_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the source IPv4 address of the first generated
 packet in the outer header. The default is 0.0.0.0. You
 must specify IPv4 in the -l3_protocol argument.
 -ip_src_outer_count
 Spirent Extension (for Spirent HLTAPI only).
 The number of source IP addresses to generate for a stream
 in the outer header. Possible values range from 1 to
 2147483647. The default is 1.
 -ip_src_outer_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign the IP
 addresses for the outer header. Possible values are:
 increment - For all packets, the source IP address
Traffic Functions
1075
 increments by the step specified in the
 -ip_src_outer_step argument.
 decrement - For all packets, the source IP address
 decrements by the step specified in the
 -ip_src_outer_step argument.

 random - For all packets, the source IP addresses are
 in random order.
 fixed - The source IP address is the same for all
 packets.
 shuffle - For all packets, the source IP addresses are in
 random order within a range that is determined by the
 values of -ip_src_outer_count and -ip_src_outer_step.
 -ip_src_mode
 Specifies how Spirent HLTAPI will assign the IP
 addresses for a particular stream. Possible values are:
 increment - For all packets, the source IP address
 increments by the step specified in the -ip_src_step
 argument.
 decrement - For all packets, the source IP address
 decrements by the step specified in the -ip_src_step
 argument.
 random - For all packets, the source IP addresses are
 in random order.

 shuffle - For all packets, the source IP addresses are in
 random order within a range that is determined by
 the values of -ip_src_count and -ip_src_step.
 fixed - The source IP address is the same for all
 packets.

 -ip_src_step
 Indicates both the step value and the prefix length that
 Spirent HLTAPI applies to the specified source address
 (-ip_src_addr). The format of the ip_src_step value is an
 IPv4 address, for example, 0.0.1.0. Use a single decimal
 digit equal to a power of 2; the remaining three digits must
 be zero (0). The numeric value identifies a bit location in
 the address; the location determines the prefix length.
 Spirent HLTAPI also uses the value to increment the host
 ID portion of the address.
 For example, if you specify 0.0.8.0 for the -ip_src_step
 argument, then the step value is 8 and the prefix length is
 21. However, if you specify 0.8.0.0, then the step value is
 8 but the prefix length is 13.
 sth::traffic_config -mode create {other needed switches} \
 -ip_src_addr 10.100.20.5 \
 -ip_src_mode increment \
 -ip_src_step 0.8.0.0 \
 -ip_src_count 5
 -ip_tos_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign the four-bit type of
 service (ToS) in the IP header for a particular stream. Possible
 values are:
 increment - For all packets, the four-bit ToS increments by the
 step specified in the -ip_tos_step argument.

 decrement - For all packets, the four-bit ToS decrements by the
 step specified in the -ip_tos_step argument.
Traffic Functions
1076

 random - For all packets, the four-bit ToS are in random
 order.

 shuffle - For all packets, the four-bit ToS are in random
 order within a range that is determined by
 the values of -ip_tos_count and -ip_tos_step.
 fixed - The four-bit ToS is the same for all
 packets.
 Note: Spirent HLTAPI does not allow switching from increment,
 or decrement, shuffle to random; or from random to increment,
 decrement or shuffle.
 -ip_tos_count
 Specifies the number of times the value will change before
 reverting to the initial value. The default is 0. You must
 specify IPv4 in the -l3_protocol argument.
 -ip_tos_field
 Sets the four-bit type of service (ToS) field in the IP
 header. The ToS field specifies the priority of the packet.
 Possible values range from 0 to 15. The default is 0. You
 must specify IPv4 in the -l3_protocol argument.
 -ip_tos_step
 Specifies the number of values to use in increment mode.
 Possible values range from 1 to 15. The default is 0. You
 must specify IPv4 in the -l3_protocol argument.
 -ip_mbz
 Specifies 1-bit Must Be Zero (MBZ) field of the ToS field in
 IPv4 header. Possible values are 0 or 1. The default is 0. You
 must specify IPv4 in the -l3_protocol argument.
 -ip_ttl
 Sets the time-to-live (TTL) for the IP packet. The TTL is a
 counter measured in units of seconds that gradually
 decrements to zero, at which point the datagram is
 discarded. Possible values are 0-255. The default is 64. You
 must specify IPv4 in the -l3_protocol argument.
 -ip_router_alert
 Determines whether to add the Router Alert option in the IPv4
 header. Possible values are 0 or 1. The default is 0. You must
 specify IPv4 in the -l3_protocol argument.
 -ipv4_header_options
 Specifies the option to be included in the IPv4 header. Possible
 values are described below:

 router_alert - Adds the IP router alert option in the IPv4
 header. You must set -ip_router_alert to 1.

 The default value is router_alert.
 -ipv4_router_alert
 Determines what will be included in the Router Alert option in
 the IPv4 header. This argument will present a list of keys:
 optiontype, length, and routeralertvalue.

 optiontype - Specifies the type of router alert to be included.
 Possible values include:

 end_of_options_list
 nop
 security
 loose_source_route
 time_stamp
 extended_security
Traffic Functions
1077
 record_route
 stream_identifier
 strict_source_route
 mtu_probe
 mtu_reply
 traceroute
 address_extension
 router_alert
 selective_directed_broadcast_mode
 The default is router_alert.
 length - Specifies the length field for the IP router alert
 option. The default value is 4.
 routeralertvalue - Specifies the value field for the the IP
 router alert option. The default value is 0.
 Here is an example:
 set returnedString [sth::traffic_config\
 -mode create\
 -port_handle $tgen1_port\
 -l3_protocol ipv4\
 -ip_router_alert 1\
 -ipv4_header_options router_alert\
 -ipv4_router_alert "length:4 routeralertvalue:10
 optiontype:selective_directed_broadcast_mode"
 ]
 -ipv6_dst_addr
 The destination IPv6 address of the first generated packet.
 The default is fe80:0:0:0:0:0:0:22. You must specify IPv6
 in the -l3_protocol argument.
 -ipv6_dst_count
 The number of destination IPv6 addresses to generate for a
 stream. Possible values range from 1 to 2147483647. The
 default is 1. You must specify IPv6 in the -l3_protocol
 argument.
 -ipv6_dst_mode
 Specifies how Spirent HLTAPI will assign the IPv6
 addresses for a particular stream. Possible values are:
 increment - For all packets, the destination IPv6 address
 increments by the step specified in the -ipv6_dst_step
 argument.
 decrement - For all packets, the destination IPv6 address
 decrements by the step specified in the -ipv6_dst_step
 argument.
 random - For all packets, the destination IPv6 addresses are
 in random order.

 shuffle - For all packets, the destination IPv6 addresses are
 in random order within a range that is determined
 by the values of -ipv6_dst_count and -ipv6_dst_step.
 fixed - The destination IPv6 address is the same for all
 packets.
 You must specify IPv6 in the -l3_protocol argument.
 -ipv6_dst_step
 The amount by which to increment the specified IPv6 destination
 IP address (-ipv6_dst_addr) for subsequent packets. The value
 must be either in IPv6 format or an integer. When it is in IPv6
 format, the default is ::1. When it is an integer, possible
 values range from 1 to 65535, and the default is 1. You must
Traffic Functions
1078
 specify IPv6 in the -l3_protocol argument.
 -ipv6_dst_outer_count
 Spirent Extension (for Spirent HLTAPI only).
 The number of destination IPv6 addresses to generate for the
 outer header. Possible values range from 1 to 2147483647.
 The default is 1. You must specify IPv6 in the -l3_protocol
 argument.
 -ipv6_dst_outer_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign the IPv6
 addresses for the outer header. Possible values are:
 increment - For all packets, the destination IPv6 address
 increments by the step specified in the
 -ipv6_dst_outer_step argument.
 decrement - For all packets, the destination IPv6 address
 decrements by the step specified in the
 -ipv6_dst_outer_step argument.
 random - For all packets, the destination IPv6 addresses are
 in random order.
 shuffle - For all packets, the destination IPv6 addresses are in
 random order within a range that is determined by the
 values of -ipv6_dst_outer_count and -ipv6_dst_outer_step.
 You must specify IPv6 in the -l3_protocol argument.
 -ipv6_dst_outer_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified IPv6
 destination IP address (-ip_dst_outer_addr) for subsequent
 packets. Possible values range from 1 to 65535. The default
 is 1. You must specify IPv6 in the -l3_protocol argument.
 -ipv6_dstprefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length of the destination IPv6 address.
 Possible values range from 1 to 128. The default is 64. This
 argument is available when -ipv6_dst_step is specified as an
 integer. The IPv6 destination addresses for subsequent packets
 will be modified in the specific offset bit with the
 -ipv6_dst_step value.
 -ipv6_flow_label
 The flow label value of the IPv6 stream, which is a twenty-
 bit field used for QoS management. Typical packets not
 associated with a particular flow, but which require special
 treatment are set to 0. Possible values range from 0 to
 1048575. The default is 0.
 -ipv6_hop_limit
 The hop limit field in the IPv6 header, which is an eight-
 bit field similar to TTL in IPv4. Possible values range from
 0 to 255. The default is 64.
 -ipv6_length
 The two-byte payload length field in the IPv6 header.
 Possible values range from 0 to 65535. The default is 128.
 -ipv6_next_header
 The next header field in the IPv6 header. For datagrams with
 extension headers, this field specifies the identity of the
 first extension header, which is the next header in the
 datagram. Possible values range from 0 to 255. The default
 is 59.
 -ipv6_src_addr
Traffic Functions
1079
 Specifies the source IPv6 address of the first generated
 packet. The default is fe80:0:0:0:0:0:0:12. You must specify
 IPv6 in the -l3_protocol argument.
 -ipv6_src_count
 The number of source IPv6 addresses to generate for a
 stream. Possible values range from 1 to 2147483647. The
 default is 1.
 -ipv6_src_mode
 Specifies how Spirent HLTAPI will assign the IPv6
 addresses for a particular stream. Possible values are:
 increment - For all packets, the source IPv6 address
 increments by the step specified in the
 -ip_src_step argument.
 decrement - For all packets, the source IPv6 address
 decrements by the step specified in the
 -ip_src_step argument.
 random - For all packets, the source IPv6 addresses are
 in random order.

 shuffle - For all packets, the source IPv6 addresses are in
 random order between a range that is determined by the
 values of -ipv6_src_count and -ipv6_src_step.
 fixed - The source IPv6 address is the same for all
 packets.
 You must specify IPv6 in the -l3_protocol argument.
 -ipv6_src_step
 The amount by which to increment the specified IPv6 source IP
 address (-ipv6_src_addr) for subsequent packets. The value
 must be either in IPv6 format or an integer. When it is in IPv6
 format, the default is ::1. When it is an integer, possible
 values range from 1 to 65535, and the default is 1. You must
 specify IPv6 in the -l3_protocol argument.
 -ipv6_src_outer_count
 Spirent Extension (for Spirent HLTAPI only).
 The number of source IPv6 addresses to generate for the
 outer header. Possible values range from 1 to 2147483647.
 The default is 1.
 -ipv6_src_outer_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign the IPv6
 addresses for the outer header. Possible values are:
 increment - For all packets, the source IP address
 increments by the step specified in the
 -ipv6_src_outer_step argument.
 decrement - For all packets, the source IP address
 decrements by the step specified in the
 -ipv6_src_outer_step argument
 random - For all packets, the source IPv6 addresses are
 in random order.
 shuffle - For all packets, the source IPv6 addresses are in
 random order within a range that is determined by the
 values of -ipv6_src_outer_count and -ipv6_src_outer_step.
 You must specify IPv6 in the -l3_protocol argument.
 -ipv6_src_outer_step
 Spirent Extension (for Spirent HLTAPI only).
Traffic Functions
1080
 The amount by which to increment the specified IPv6
 source IP address (-ip_src_outer_addr) for subsequent
 packets. Possible values range from 1 to 65535. The default
 is 1.
 -ipv6_srcprefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length of the source IPv6 address. Possible
 values range from 1 to 128. The default is 64. This argument is
 available when -ipv6_src_step is specified as an integer. The
 IPv6 source addresses for subsequent packets will be modified in
 the specific offset bit with the -ipv6_src_step value.
 -ipv6_srcprefix
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix mask of the source IPv6 address. The default
 is "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF" when -ipv6_src_step
 is specified in IPv6 format, or "FFFF" when -ipv6_src_step is
 specified as an integer.
 -ipv6_dstprefix
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix mask of the destination IPv6 address.
 The default is "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF" when
 -ipv6_src_step is specified in IPv6 format, or "FFFF" when
 -ipv6_src_step is specified as an integer.
 -ipv6_traffic_class
 The traffic class field in the IPv6 header, which is an
 eight-bit field that describes the packet's priority. This
 value is used at the application layer. Possible values
 range from 0 to 255. The default is 0.
 -l2_encap
 Identifies the type of Layer 2 encapsulation. Possible values
 are ethernet_ii, ethernet_ii_vlan, ethernet_ii_unicast_mpls,
 ethernet_ii_vlan_mpls, atm_vc_mux, ethernet_ii_pppoe,
 ethernet_ii_vlan_pppoe, ethernet_ii_qinq_pppoe, ethernet_8022,
 ethernet_8022_vlan, ethernet_8023_snap, ethernet_8023_snap_vlan,
 ethernet_8023_raw, ethernet_8023_raw_vlan and fibre_channel..
 The default value is ethernet_ii.


 ethernet_ii - Ethernet II
 ethernet_ii_vlan - Ethernet II with VLAN tag(s)
 ethernet_ii_unicast_mpls - Ethernet II with MPLS header
 ethernet_ii_vlan_mpls - Ethernet II with VLAN tag(s) and MPLS header
 atm_vc_mux - ATM with encapsulation type set to
 Virtual Circuit Multiplexing (VC_MUX).
 You can specify this option on an ATM
 card.
 ethernet_8022 - Ethernet 802.2
 ethernet_8022_vlan - Ethernet 802.2 with VLAN
 tag(s).
 ethernet_ii_pppoe - Ethernet II with PPPoE
 ethernet_ii_vlan_pppoe - Ethernet II with a single VLAN tag
 and PPPoE
 ethernet_ii_qinq_pppoe - Ethernet II with dual VLAN tags and
 PPPoE
 ethernet_8023_snap - Ethernet 802.3 with 802.2 and SNAP header
 ethernet_8023_snap_vlan - Ethernet 802.3 with 802.2 and SNAP header
 and VLAN tag(s).
 ethernet_8023_raw - Ethernet 802.3 Raw
 ethernet_8023_raw_vlan - Ethernet 802.3 Raw with VLAN tag(s)

 Notes:
 1) ethernet_ii_vlan, ethernet_8022_vlan
 ethernet_8023_snap_vlan, ethernet_8023_raw_vlan and
 ethernet_ii_vlan_mpls support VLAN tagging on Ethernet networks.
 If you use the -vlan_* arguments, a single VLAN sub-interface
Traffic Functions
1081
 will be defined; If you use -vlan_* and -vlan_id_outer_*
 arguments, both inner and outer VLAN headers will be created.

 2) ethernet_ii_unicast_mpls and ethernet_ii_vlan_mpls support
 adding MPLS header in raw streams. If you use -mpls_* to define
 an MPLS header, you must set the L2 encapsulation type to
 ethernet_ii_unicast_mpls.

 3) When you set the L2 encapsulation type to atm_vc_mux,
 the -vci_* and -vpi_* arguments are available.
 4) To configure PPPoE traffic, you must set the
 value of -l2_encap to one of these options:
 ethernet_ii_pppoe, ethernet_ii_vlan_pppoe, ethernet_ii_qinq_pppoe.
 To establish PPPoE traffic: use -ppp_link_traffic_src_list
 to specify the handle from which to retrieve the source address,
 or use -downstream_traffic_src_list to specify the handle from
 which to get the destination address. Both
 -ppp_link_traffic_src_list and -downstream_traffic_src_list
 handles are returned from sth::pppox_config. Make sure the
 PPPoE sessions are successfully connected before establishing
 the traffic.
 -l3_length
 Sets the stream L3 frame size in bytes. To set the frame
 size, the -length_mode argument must be set to fixed.
 Possible values range from 44 to 16365. The default is 110.
 The length of L2 frame is determined by the values of -l2_encap
 and -l3_length. The valid range for L2 frame length is 62-16383
 bytes. The default fixed L2 frame length is 128.
 The L2 frame is comprised of these segments if -l2_encap is set
 to ethernet_ii or ethernet_ii_vlan.
 Ethernet II
 802.1Q tag (optional)
 IPv4/IPv6 packet
 The L2 frame is comprised of these segments if -l2_encap is set
 to ethernet_ii_pppoe, ethernet_ii_vlan_pppoe or
 ethernet_ii_qinq_pppoe.
 Ethernet II
 802.1Q tag (optional)
 PPPoE
 PPP packet
 IPv4/IPv6 packet
 -l3_length_max
 Sets the maximum L3 frame length in bytes. Use this argument
 when -length_mode is set to random or increment. Possible
 values range from 44 to 16365. The default is 238.
 The maximum length of L2 frame is determined by the value of
 -l2_encap and -l3_length_max. The valid range for L2 frame
 length is 62-16383 bytes. The default maximum L2 frame length
 is 256.
 -l3_length_min
 Sets the minimum L3 frame length in bytes. Use this argument
 when -length_mode is set to random or increment. Possible
 values range from 44 to 16365. The default is 110.
 The minimum length of L2 frame is determined by the value of
 is 128. -l2_encap and -l3_length_min. The valid range for L2
 frame length is 62-16383 bytes. The default minimum L2 length
 length is 128.
 -l3_length_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the step by which the L3 frame length increments
 when -length_mode is set to increment.
 
Traffic Functions
1082
 -l3_imix1_ratio
 Specifies the ratio of the first packet size. You can
 use this argument if -length_mode is imix.
 -l3_imix1_size
 Specifies the first packet length in bytes. You can use
 this argument if -length_mode is set to imix.

 -l3_imix2_ratio
 Specifies the ratio of the second packet length. You can
 use this argument if -length_mode is set to imix.

 -l3_imix2_size
 Specifies the second packet length in bytes. You can use
 this argument if -length_mode is set to imix.

 -l3_imix3_ratio
 Specifies the ratio of the third packet length. You can
 use this argument if -length_mode is set to imix.

 -l3_imix3_size
 Specifies the third packet length in bytes. You can use
 this argument if -length_mode is set to imix.

 -l3_imix4_ratio
 Specifies the fourth packet length. You can use this
 argument if -length_mode is set to imix.

 -l3_imix4_size
 Specifies the fourth packet length in bytes. You can use
 this argument if -length_mode is set to imix.
 -l3_protocol
 Identifies the Layer 3 protocol to use when creating
 packets. Possible values are IPv4, IPv6, and arp.
 IPv4 uses 32-bit addresses, generally represented in dotted
 decimal notation (for example, 10.10.100.1). IPv6 use 128-
 bit addresses, normally written as eight groups of up to
 four hexadecimal digits, separated by colons (for example,
 1001:0ac8:11a1:02e1:2244:3a2e:8260:6443).
 If you specify "arp" as the Layer 3 protocol, you can
 use the following arguments to configure the traffic:
 -arp_src_hw_addr, -arp_src_hw_mode, -arp_src_hw_count,
 -arp_dst_hw_addr,-arp_dst_hw_mode, -arp_dst_hw_count,
 and -arp_operation. The Address Resolution Protocol (ARP)
 converts a 32-bit IP address into a 48-bit Ethernet
 address.
 If you specify "arp" as the Layer 3 protocol, use
 "-ip_src_addr" for the source protocol address and
 "-ip_dst_addr" for the destination protocol address.
 Also, only the fixed, increment, and decrement modes are
 supported in these two arguments when the Layer 3
 protocol is "arp".

 Note: If you do not specify -l3_protocol, the traffic packets
 created will not contain any Layer 3 header. You can refer to the
 examples for more details.
 -arp_src_hw_addr
 Specifies the MAC address of the sender interface. The
 sender interface broadcasts an ARP packet to all hosts
 attached to an Ethernet. The default is 00:00:01:00:00:02.
 You can use this argument if the Layer 3 protocol
 (-l3_protocol) is arp.
 -arp_src_hw_mode
 Specifies the method in which the MAC address of the
 sender interface is assigned. Possible values are fixed, 
Traffic Functions
1083
 increment, and decrement. The default is fixed. The step
 for both increment and decrement is 00:00:00:00:00:01.
 You can use this argument when -l3_protocol is set to
 "arp".
 -arp_src_hw_count
 The number of sender MAC addresses to generate for a
 stream. The default is 1. Possible values range
 from 1 to 2147483647.You can use this argument when
 the -l3_protocol is set to "arp".
 -arp_dst_hw_addr
 Specifies the MAC address of the target interface. The
 target interface is the interface with which the sender
 is interested in communicating. When the sender
 interface broadcasts a packet containing the IP address
 of the target interface, the target interface recognizes
 that the IP address in the packet matches its own and
 returns an answer to the sender. The default is
 00:00:00:00:00:00. You can use this argument if
 -l3_protocol is set to arp.

 -arp_dst_hw_mode
 Specifies the method in which the MAC address of the
 target interface is assigned. Possible values are fixed,
 increment, and decrement. The default is fixed. The step
 for both increment and decrement is 00:00:00:00:00:01.
 You can use this argument if -l3_protocol is set to "arp".
 -arp_dst_hw_count
 The number of target MAC addresses to generate for a
 stream. The default is 1. You can use this argument if
 -l3_protocol is set to "arp". Possible values range from
 1 to 2147483647.
 -arp_operation
 Defines the operation to be performed by the ARP packet.
 Possible values are arpRequest, arpReply, rarpRequest,
 and rarpReply. The default is arpRequest. You can use
 this argument if -l3_protocol is set to "arp".
 Note: Use "-ip_src_addr" for the source protocol address
 and "ip_dst_addr" for the destination protocol address.
 Only fixed, increment, and decrement modes are supported
 in these two arguments when the Layer 3 protocol
 is "arp".
 arpRequest - The ARP packet is sent as an ARP
 Request by the sender interface to the target
 interface.
 arpReply - The ARP packet is sent as an ARP Reply
 by the target interface to the sender
 interface.
 rarpRequest - The ARP packet is sent as a Reverse
 Address Resolution Protocol (RARP) Request
 by the sender interface to the target
 interface.
 RARP is a Link layer networking protocol
 used by a host computer to obtain its IPv4
 address given only its link-layer address
 (such as an Ethernet address).
 rarpReply - The ARP packet is sent as a RARP
 Reply by the target to the sender interface.
 -ipv6_frag_id
 Indicates the identification field in the fragment extension
 header of an IPv6 stream. You can refer to RFC 2460 for more 
Traffic Functions
1084
 information. Possible values range from 0 to 4294967295. The
 default value is 0.
 -ipv6_frag_more_flag
 M Flag in the fragment extension header. Possible vales are 0
 and 1. The M flag value set to 0 indicates the fragment is the last
 one. If not, the M flag value is 1. The default value is 0.
 -ipv6_frag_offset
 Indicates the Fragment Offset field in the fragment extension
 header of an IPv6 stream. You can refer to RFC 2460
 for details. Possible values range from 0 to 65535.
 The default value is 0.
 -ipv6_auth_seq_num
 Specifies the sequence counter for the authentication header (AH).
 You can refer to RFC 2402 for more information. Possible
 values range from 0 to 4294967295. The default value is 0.
 You can use this argument only when authentication is
 indicated in the -ipv6_extension_header argument.
 -ipv6_auth_spi
 Indicates the Security Parameter Index (SPI) associated with the
 authentication header. The SPI, in combination with the
 destination IP address and security protocol, uniquely identifies
 the Security Association for this datagram. You can refer to RFC
 2402 for more details. Possible values range from 0 to
 4294967295. The value format must be an integer. The default
 value is 0. You can specify this argument only when
 authentication is indicated in -ipv6_extension_header.
 -ipv6_auth_payload_len
 Indicates the length of the authentication data. Possible values
 range from 0 to 4294967295. This argument is available only when
 authentication is indicated in -ipv6_extension_header.
 Note: This argument is designed for the availability of previous
 scripts. In fact, the authentication length value will be
 automatically calculated.
 -ipv6_auth_string
 The value of this argument is a variable length string containing
 the packet Integrity Check Value (ICV). ICV is a checksum capable
 of detecting modification of an information system and is the
 result of the integrity process. The value must be a 32-bit
 hexadecimal value. It can be separated by ":" or ".". The default
 value is 00:00:00:00.
 -ipv6_routing_res
 Indicates a 32-bit reserved field. This argument is available
 when routing is indicated in the -ipv6_extension_header argument.
 The value must be a 16-bit hexadecimal value. It can be separated
 by ":" or ".". The default value is 0:0:0:0. You can refer to RFC
 2460 for more details.
 -ipv6_routing_node_list
 Specifies a list of 128-bit IPv6 addresses. The list indicates one or
 more intermediate nodes to be "visited" on the way to a packet's
 destination. This argument is available when routing is indicated in
 the -ipv6_extension_header argument.
 -ipv6_destination_options
 Determines what will be included in the "Destination options"
 field. This option will present a list of keys: type, length, and
 value.

 type - Indicates the type of IPv6 Destination options to be added.
 This attribute is mandatory. Possible values are listed below:
 pad1 - Indicates the Pad1 option that is used to insert one octet
 of padding into the Options area of a header.
Traffic Functions
1085

 padn - Indicates the Padn option that is used to insert two or
 more octets of padding into the Options area of a header.
 When "-ipv6_destination_options type: padn" is
 indicated, you can specify the value and the length
 options of the -ipv6_destination_options argument.
 Here is an example:
 set returnedString [sth::traffic_config\
 -mode create\
 -port_handle $tgen1_port\
 -l3_protocol ipv6\
 -ipv6_extension_header "destination " \
 -ipv6_src_addr "2009::1" \
 -ipv6_dst_addr "2009::9" \
 -ipv6_destination_options "type: padn length:5
 value: c:c"\
 ]
 length - Specifies the length value for the IPv6 Destination
 options. Possible values range from 0 to 255.
 value - Specifies the value for the IPv6 Destination options.
 The value must be a 8-bit hexadecimal value.
 It can be separated by ":" or ".". The default value is 0:0.
 -ipv6_hop_by_hop_options
 Determines what will be included in the "Hop-by-Hop options"
 field. This option will present a list of keys: type, length, value,
 payload, and alert_type.

 type - Indicates the type of IPv6 Hop-by-Hop options to be added.
 This attribute is mandatory. Possible values for the type
 field are listed below:
 pad1 - Indicates the Pad1 option that is used to insert one
 octet of padding into the Options area of a header.
 padn - Specifies the PadN option that is used to insert two or
 more octets of padding into the Options area of a
 header. When you specify "-ipv6_hop_by_hop_options
 type: padn", the length and the value arguments of
 -ipv6_hop_by_hop_options are available.
 jumbo - Indicates the jumbo payload option field of the
 Hop-by-Hop options. The jumbo payload option allows
 transmission of IPv6 packets with payloads between
 65536 and 4294967295 octets in length. Packets with
 such long payloads are commonly referred to as
 "jumbograms". You can refer to RFC 2675 for more
 details.
 When you specify
 "-ipv6_hop_by_hop_options type: jumbo", the length and
 the payload arguments of -ipv6_hop_by_hop_options are
 available.
 router_alert - Indicates the router alert option within the
 IPv6 Hop-by-Hop Header. The presence of this option in an
 IPv6 datagram informs the router that the contents of
 this datagram is of interest to the router and to
 handle any control data accordingly. The absence of
 this option in an IPv6 datagram informs the router that
 the datagram does not contain information needed by the
 router and hence can be safely routed without further
 datagram parsing. You can refer to RFC 2711 for more
 details.

 When you specify 
Traffic Functions
1086
 "-ipv6_hop_by_hop_options type: router_alert", you can
 use the alert_type argument.
 Here is an example:
 set returnedString [sth::traffic_config\
 -mode create\
 -port_handle $tgen1_port\
 -l3_protocol ipv6\
 -ipv6_extension_header "hop_by_hop" \
 -ipv6_src_addr "2009::1" \
 -ipv6_dst_addr "2009::9" \
 -ipv6_hop_by_hop_options "type: router_alert
 length:55 alert_type: active_net" \
 ]
 length - Specifies the length value for the IPv6 Hop-by-Hop
 option. Possible values range from 0 to 255.
 value - Specifies the value for the IPv6 Hop-by-Hop options.
 The value must be a 8-bit hexadecimal value.
 It can be separated by ":" or ".". The default value is 0:0.
 payload - Specifies the payload for the IPv6 Hop-by-Hop
 option. Possible values range from 0 to 65535.
 alert_type - Specifies the type of router alert to be included
 in the packet. Possible values are mld, rsvp, and active_net.
 -ipv6_extension_header
 Indicates the type of the next extension header. Possible
 values are listed below. You can specify one or more choices in
 the list.
 - There is no next header.
 hop_by_hop - Next header has Hop-by-Hop Options. The
 Hop-by-Hop Options header is used to carry optional
 information that must be examined by every node along a
 packet's delivery path.
 routing - Next header has routing options. The Routing header is
 used by an IPv6 source to list one or more intermediate nodes
 to be "visited" on the way to a packet's destination.
 destination - Next header has destination options. The Destination
 Options header is used to carry optional information that
 needs be examined only by a packet's destination node(s).
 authentication - Next header has a Internet Protocol Security
 (IPSEC) AH.
 fragment - Payload is a fragment. The Fragment header is used by
 an IPv6 source to send a packet whose size is larger than that
 would fit in the path Maximum Transmission Unit (MTU) to
 its destination.
 Whether fragment is indicated in -ipv6_extension_header or
 not, the arguments listed below are available:
 -ipv6_frag_id
 -ipv6_frag_more_flag
 -ipv6_frag_offset
 However, only when hop_by_hop, routing, destination or
 authentication is indicated in this argument, the relative
 arguments can be defined.
 This is an example for this argument:
 set returnedString [sth::traffic_config\
Traffic Functions
1087
 -mode create\
 -port_handle $tgen1_port\
 -l3_protocol ipv6\
 -ipv6_extension_header "hop_by_hop routing
 destination authentication" \
 -ipv6_src_addr "2009::1" \
 -ipv6_dst_addr "2009::9" \
 -ipv6_frag_id 12\
 -ipv6_frag_more_flag 1\
 -ipv6_frag_offset 20\
 -ipv6_hop_by_hop_options "type: router_alert
 length:55 alert_type: active_net" \
 -ipv6_routing_node_list "2002::2 2003::3"\
 -ipv6_routing_res "a:b:a:b" \
 -ipv6_destination_options "type: padn
 length:5 value:c:c:a"\
 -ipv6_auth_string aa:bb:00:cc\
 -ipv6_auth_spi 77\
 -ipv6_auth_seq_num 99\
 -ipv6_auth_payload_len 4 \
 ]
 -l3_outer_protocol
 Identifies the Layer3 protocol to use when creating packets
 for the outer header. Possible values are IPv4 and IPv6.
 -l4_protocol
 Identifies the Layer4 protocol to use as a transport service.
 Possible values are tcp, udp, icmp, igmp, rtp isis, and ospf.
 When you define a TCP header object, you can define the
 source and destination ports for the traffic, control bits
 to specify TCP segments (FIN, SYN, RST, PSH, ACK, URG), ACK,
 SEQ, and window attributes, and TCP frame length and urgent
 data pointer values.
 A UDP header contains fields that specify the source and
 destination ports, the length, and the checksum. When you
 create a UDP header object, you define the source and
 destination ports and the length of the combined UDP header
 and data.
 When you define an Internet Control Message Protocol
 (ICMP) header object, you can define the type of ICMP
 message and the code for each ICMP message type. See RFC
 1122 for more about ICMP.

 When you define an ICMPv6 header object, you can define the type
 of ICMPv6 message and the code for each ICMPv6 message type.
 ICMPv6 messages also include sub-types defined in Multicast
 Listener Discovery (MLDv1 and MLDv2) and Neighbor Discovery
 Protocol (NDP). See RFC 2710 for more about MLDv1, RFC 3810 for
 MLDv2, RFC 4861 for NDP and RFC 4443 for ICMPv6.

 When you define an Internet Group Management Protocol
 (IGMP) header object, you can define the IGMP version,
 the message type, the code, and the Multicast group
 address. See RFC 3376 for more about IGMP.
 When you define a Real-time Transport Protocol (RTP) header
 object, you can define the following fields defined in RTP
 header: CC, PT, Timestamp, SSRC and CSRC.
 When you define an Intermediate System to Intermediate System
 Protocol (ISIS) header object, you can specify the following
 fields defined in the ISIS header: PDU header length, version,
 the length of system ID, PDU type, reserved filed, maximum area
 addresses, circuit type, system ID, holding time, PDU length,
 priority and LAN ID. The logical-link control filed will be added
 automatically.
Traffic Functions
1088
 When you define an Open Shortest Path First (OSPF) header object,
 Use the traffic_config_ospf function to configure the parameters
 related to the OSPF header.
 -custom_llc
 Creates an LLC header with a user defined value preceded by the
 Layer 2 encapsulation header of the packet. The value must be in
 hexadecimal format. You must specify -l2_encap. There is no need
 to configure this argument if -l4_protocoal is set to isis.
 -custom_pattern
 Creates a frame with a user defined value at the end of the
 packet. The value must be in hexadecimal format.
 -rtp_csrc_count
 Specifies the CSRC count contains the number of CSRC
 identifiers that follow the fixed header. Possible values
 range from 0 to 15. The default value is 0. You must specify
 RTP in the -l4_protocol argument.
 -rtp_payload_type
 Specifies the type of the RTP payload and thus determines
 its interpretation by the application. The default value
 is 18. You must specify RTP in the -l4_protocol argument.
 Possible values are:
 value Description
 0 PCM-U -Law
 8 PCM-A Law
 9 G.722 audio codec
 4 G.723 audio codec
 15 G.728 audio codec
 18 G.729 audio codec
 34 G.763 audio codec
 31 G.761 audio codec
 -timestamp_initial_value
 Specifies the initial value of the timestamp in the RTP
 header. Possible values range from 0 to 4294967295. The
 default value is 0. You must specify RTP in the -l4_protocol
 argument.
 -timestamp_increment
 Specifies a monotonic value by which to increment the timestamp.
 Possible values range from 0 to 65535. The default value is
 64. You must specify RTP in the -l4_protocol argument.

 -ssrc
 Specifies the synchronization source. Possible values range
 from 0 to 4294967295. The default value is 1246289208. You
 must specify RTP in the -l4_protocol argument.
 -csrc_list
 Specifies the CSRC list which identifies the contributing
 sources for the payload contained in this packet. The
 number of identifiers is given by the CC field, which
 configured by the -rtp_csrc_count option. The length of
 the list should be equal to the rtp_csrc_count. Each item
 in the list is an integer value, the range of which is from
 0 to 4294967295.
 -icmp_checksum
 Defines the 16-bit one's complement of the one's complement
 sum of the ICMP message starting with the ICMP Type. The
 value must be an integer. To calculate the checksum correctly, do
 not specify the argument and let Spirent HLTAPI assign the
 checksum value automatically. Specify this argument only when
 your test requires so. You must specify ICMP in the -l4_protocol
 argument.
 -icmp_code 
Traffic Functions
1089
 Indicates the further specification of each ICMP message
 type. Possible values range from 0 to 255. For example, an
 ICMP Destination Unreachable message might set this field to
 1 through 15, where each number has a different meaning. The
 codes of Destination Unreachable message listed below
 indicate different reasons for Destination Unreachable
 situation.
 Codes Description
 0 Net Unreachable
 1 Host Unreachable
 2 Protocol Unreachable
 3 Port Unreachable
 4 Fragmentation Needed and Don't Fragment was
 Set
 5 Source Route Failed
 6 Destination Network Unknown
 7 Destination Host Unknown
 8 Source Host Isolated
 9 Communication with Destination Network is
 Administratively Prohibited
 10 Communication with Destination Host is
 Administratively Prohibited
 11 Destination Network Unreachable for Type of
 Service
 12 Destination Host Unreachable for Type of
 Service
 13 Communication Administratively Prohibited
 14 Host Precedence Violation
 15 Precedence cutoff in effect

 See RFC 1122 for more information.

 You must specify ICMP in the -l4_protocol argument.
 -icmp_id
 Indicates the ID for each Ping command (that is,
 EchoRequest). Possible values range from 0 to 65535. You
 must specify ICMP in the -l4_protocol argument.
 -icmp_seq
 Indicates the sequence number for each Ping command,
 (that is, EchoRequest). The client can use the sequence
 number to match the reply with the request. Possible
 values range from 0 to 65535. You must specify ICMP in
 the -l4_protocol argument.
 -icmp_type
 A number indicating the ICMP message type, such as 0 for
 Echo Reply. Possible values range from 0 to 255. You must
 specify ICMP in the -l4_protocol argument.
 -icmpv6_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the ICMPv6 message type. Its value determines the
 format of the remaining data. Possible values are described
 below:

 Value Description
 1 Destination Unreachable
 2 Packet Too Big
 3 Time Exceeded
 4 Parameter Problem
 128 Echo Request
 129 Echo Reply
 130 MLDv1 Query
 130 MLDv2 Query
 131 MLDv1 Listener Report
 132 MLDv1 Listener Done
 133 Router Solicitation
 134 Router Advertisement
 135 Neighbor Solicitation 
Traffic Functions
1090
 136 Neighbor Advertisement
 137 Redirect
 143 MLDv2 Listener Report

 The default value is 1.
 Note that MLDv2 Query is the updated version for MLDv1 Query, so
 they share the same ICMPv6 message type (130), but have different
 fields .

 -icmpv6_ip_data
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 2-octet IP data for the IP Header + Data field in
 ICMPv6 message types Destination Unreachable (type 1), Packet Too
 Big (type 2), Time Exceeded (type 3), Parameter Problem (type 4)
 and Redirect (type 137). The default value is 0000000000000000.
 You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_ip_src_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the source IPv6 address of the first generated packet
 for the IP Header + Data field in ICMPv6 message types Destination
 Unreachable (type 1), Packet Too Big (type 2), Time Exceeded
 (type 3), Parameter Problem (type 4) and Redirect (type 137). The
 value must be in IPv6 format. The default value is 2000::2. You must
 specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_ip_dst_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the destination IPv6 address of the first generated
 packet for the IP Header + Data field in ICMPv6 message types
 Destination Unreachable (type 1), Packet Too Big (type 2), Time
 Exceeded (type 3), Parameter Problem (type 4) and Redirect (type
 137). The value must be in IPv6 format. The default value is 2000::1.
 You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_ip_hop_limit
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the hop limit field for the IP Header + Data field in
 ICMPv6 message types Destination Unreachable (type 1), Packet Too
 Big (type 2), Time Exceeded (type 3), Parameter Problem (type 4)
 and Redirect (type 137). Possible values range from
 0 to 255. The default value is 255. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_ip_traffic_class
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the traffic class field for the IP Header + Data
 field in ICMPv6 message types Destination Unreachable (type 1),
 Packet Too Big (type 2), Time Exceeded (type 3), Parameter
 Problem (type 4) and Redirect (type 137). Possible values
 range from 0 to 255. The default value is 0.
 You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_ip_next_header
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the next header for the IP Header + Data field in
 ICMPv6 message types Destination Unreachable (type 1), Packet Too
 Big (type 2), Time Exceeded (type 3), Parameter Problem (type 4)
 and Redirect (type 137). Possible values range from 0 to 255. The
 default is 59. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_ip_flow_label
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the flow label value for the IP Header + Data field in
 ICMPv6 message types Destination Unreachable (type 1), Packet Too
 Big (type 2), Time Exceeded (type 3), Parameter Problem (type 4)
 and Redirect (type 137). Possible values range from 0 to
 1048575. The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.
 
Traffic Functions
1091
 -icmpv6_ip_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the two-byte payload length field for the IP Header +
 Data field in ICMPv6 message types Destination Unreachable (type
 1), Packet Too Big (type 2), Time Exceeded (type 3), Parameter
 Problem (type 4) and Redirect (type 137). Possible values range
 from 0 to 65535. The default value is 128. You must specify ICMPv6 in
 the -l4_protocol argument.

 -icmpv6_ip_gateway
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 gateway address for the IP Header + Data field
 in ICMPv6 message types Destination Unreachable (type 1), Packet
 Too Big (type 2), Time Exceeded (type 3), Parameter Problem (type
 4) and Redirect (type 137). The value must be in IPv6 format. The
 default is ::0. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_ip_version
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the IP version to be used for the IP Header + Data
 field in ICMPv6 message types Destination Unreachable (type 1),
 Packet Too Big (type 2), Time Exceeded (type 3), Parameter
 Problem (type 4) and Redirect (type 137). Possible values are 4
 and 6. The default value is 6. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_checksum
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the 16-bit checksum field in the ICMPv6 header. To
 calculate the checksum correctly, do not specify the argument and
 let Spirent HLTAPI assign the checksum value automatically.
 Specify this argument only when your test requires it. You must
 specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_code
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the ICMPv6 code field that is used to create an
 additional level of message granularity. Depending on the message
 type, possible values are described below:

 Message Type Code Description

 Destination Unreachable 0 No Route To Destination
 1 Communication with
 Destination Prohibited
 3 Address Unreachable
 4 Port Unreachable
 Time Exceeded 0 Hop Limit Exceeded
 1 Fragment Reassembly Time
 Exceeded
 Parameter Problem 0 Erroneous Header Field
 1 Unrecognized Next Header
 Type
 2 Unrecognized IPv6 Option

 Router Advertisement 0

 Echo Request 0
 Echo Reply 0
 MLDv1 Query 0
 MLDv1 Listener Report 0
 MLDv1 Listener Done 0
 Packet Too Big 0
 Router Solicitation 0
 Router Advertisement 0
 Neighbor Solicitation 0
 Neighbor Advertisement 0
 Redirect 0

 The default value is 0. You must specify ICMPv6 in the
Traffic Functions
1092
 -l4_protocol argument.


 -icmpv6_unused
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the unused field for ICMPv6 message types Destination
 Unreachable (type 1), Time Exceeded (type 3), and MLDv2 Listener
 Report (type 143). Possible values range from 0 to 65535. The
 default value is 0. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_mtu
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Maximum Transmission Unit (MTU) of the next-hop
 link for ICMPv6 message type Packet Too Big (type 2).
 Possible values range from 0 to 65535. The default value is 0.
 You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_pointer
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the pointer field for Parameter Problem messages (type
 4). The pointer field identifies the octet offset within the
 invoking packet where the error was detected. Possible values range
 from 0 to 65535. The default value is 0. You must specify ICMPv6 in
 the -l4_protocol argument.

 -icmpv6_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the identifier field for ICMPv6 message types Echo
 Request (type 128) and Echo Reply (type 129). For Echo
 Request messages, this field is used as an identifier to aid in
 matching Echo Replies to the Echo Request. For Echo Reply
 messages, this field is the identifier from the invoking Echo
 Request message. Possible values range from 0 to 65535. The
 default value is 0. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_seq
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the sequence number field for ICMPv6 message types Echo
 Request (type 128) and Echo Reply (type 129). For Echo
 Request messages, this field is used as a sequence number to aid
 in matching Echo Replies to the Echo Request. For Echo Reply
 messages, this field is the sequence number from the invoking
 Echo Request message. Possible values range from 0 to 65535. The
 default value is 0. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_data
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the echo data field for ICMPv6 message types Echo Request
 (type 128) and Echo Reply (type 129). The value must be a 4-digit
 HEX. The default value is 0000. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_reserved
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the reserved field for ICMPv6 message types MLDv2
 Query (type 130), MLDv1 Listener Report (type 131), MLDv1
 Listener Done (type 132), Neighbor Solicitation (type 135),
 Neighbor Advertisement (type 136) and Redirect (type 137).
 Possible values range from 0 to 65535. The default value is 0.
 You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_target_address
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the target address field for ICMPv6 message types
 Neighbor Solicitation (type 135), Neighbor Advertisement (type
 136) and Redirect (type 137). The value must be in IPv6 format.
 For types 135 and 136, the value must not be a multicast address.
 The default value is 2000::1. You must specify ICMPv6 in the
Traffic Functions
1093
 -l4_protocol argument.

 -icmpv6_oflag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Override flag bit (O-bit) for Neighbor
 Advertisement messages (type 136). Possible values are 0 and 1.
 When set to 1, the O-bit indicates that the advertisement should
 override an existing cache entry and update the cached link-layer
 address. When set to 0, the advertisement will not update a
 cached link-layer address though it will update an existing
 neighbor cache entry for which no link-layer address is known.
 The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_rflag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the router flag bit (R-bit) for Neighbor
 Advertisement messages (type 136). The R-bit is used by
 Neighbor Unreachability Detection to detect a router that changes
 to a host. The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_sflag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the solicited flag for Neighbor Advertisement messages
 (type 136). The S-bit is used as a reachability confirmation for
 neighbor unreachability detection. Possible values are 1 and 0.
 When set to 1, it indicates that the advertisement was sent in
 response to a neighbor solicitation from the destination address.
 The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_suppress_flag
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Suppress Router-Side Processing flag (S-flag) bit
 for MLDv2 Query messages (type 130). Possible values
 are 1 and 0. When set to 1, the S-flag indicates to any receiving
 multicast routers that they have to suppress the normal timer
 updates they perform upon hearing a Query. The default value is
 1. You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_max_resp_delay
 Spirent Extension (for Spirent HLTAPI only).
 Defines the maximum response delay field for ICMPv6 message
 types MLDv1 Query (type 130), MLDv1 Listener Report (type 131)
 and MLDv1 Listener Done (type 132). This field specifies the
 maximum allowed delay before sending a responding Report, in
 units of milliseconds. Possible values range from 0 to 65535. The
 default value is 0. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_mcast_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the multicast IPv6 address for ICMPv6 message types
 MLDv1 Listener Report (type 131) and MLDv1 Listener Done (type
 132). The value must be in IPv6 format. The default value is FF1E::1.
 You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_addr_list_ipv6_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv6 source address for ICMPv6 message types MLDv2
 Query (type 130) and MLDv2 Listener Report (type 143).
 The value must be in IPv6 format. The default value is
 2000::1. You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_link_layer_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the length field for the Link Layer Address option in
 ICMPv6 message types Router Solicitation (type 133), Router
 Advertisement (type 134), Neighbor Solicitation (type 135),
 Neighbor Advertisement (type 136 ) and Redirect (type 137).
Traffic Functions
1094
 Possible values range from 0 to 65535. The default value is 1.
 You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_link_layer_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the option type field for the Link Layer Address
 option in ICMPv6 message types Router Solicitation
 (type 133), Router Advertisement (type 134), Neighbor
 Solicitation (type 135), Neighbor Advertisement (type 136 ) and
 Redirect (type 137).
 Possible values are described below:
 Value Type
 1 Source Link-Layer Address
 2 Target Link-Layer Address
 3 Prefix Information
 4 Redirected Header
 5 MTU

 The default value is 1. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_link_layer_value
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the source/target link layer address field for the Link
 Layer Address option in ICMPv6 message types Router Solicitation
 (type 133), Router Advertisement (type 134), Neighbor
 Solicitation (type 135), Neighbor Advertisement (type 136) and
 Redirect (type 137). The value must be a 12-digit HEX. The
 default value is 000000000000. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_mtu_option_type
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the 8-bit identifier for the MTU option in Router
 Advertisement messages (type 134). Possible values are described
 below:
 Value Type
 1 Source Link-Layer Address
 2 Target Link-Layer Address
 3 Prefix Information
 4 Redirected Header
 5 MTU

 The default value is 5. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_mtu_option_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the option length field for the MTU option in
 Router Advertisement messages (type 134). Possible values range
 from 0 to 65535. The default value is 1. You must specify ICMPv6
 in the -l4_protocol argument.

 -icmpv6_mtu_option_reserved
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the reserved field for the MTU option in Router
 Advertisement messages (type 134). Possible values range from 0
 to 65535. The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_mtu_option_mtu
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the MTU value for the MTU option in Router
 Advertisement messages (type 134). Possible values range from 0
 to 65535. The default value is 1000. You must specify ICMPv6 in
 the -l4_protocol argument.

 -icmpv6_prefix_option_abit
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 1-bit autonomous address-configuration flag for the
 Prefix Information option in Router Advertisement messages (type 134).
Traffic Functions
1095
 Possible values are 1 and 0. When set to 1, it indicates that
 this prefix can be used for stateless address configuration. The
 default is 1. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_prefix_option_lbit
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the 1-bit on-link flag for the Prefix Information
 option in Router Advertisement messages (type 134). Possible
 values are 1 and 0. When set to 1, it indicates that this prefix
 can be used for on-link determination. When set to 0, the
 advertisement makes no statement about on-link or off-link
 properties of the prefix. The default value is 1. You must specify
 ICMPv6 in the -l4_protocol argument.

 -icmpv6_prefix_option_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the option length field for the Prefix Information
 option in Router Advertisement messages (type 134). Possible
 values range from 0 to 65535. The default value is 4. You must
 specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_prefix_option_preferred_lifetime
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the preferred lifetime for the Prefix Information
 option in Router Advertisement messages (type 134). The field
 indicates the length of time in seconds (relative to the time the
 packet is sent) that addresses generated from the prefix via
 stateless address autoconfiguration remain preferred. Possible
 values range from 0 to 65535. The default value is 1. You must
 specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_prefix_option_prefix
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix field for the Prefix Information option in
 Router Advertisement messages (type 134). The value is an IPv6
 address. The default value is 2000::0. You must specify ICMPv6 in
 the -l4_protocol argument.

 -icmpv6_prefix_option_prefix_len
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length field for the Prefix Information
 option in Router Advertisement messages (type 134). This field
 indicates the number of leading bits in the prefix field that are
 valid. Possible values range from 0 to 255. The default value is
 64. You must specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_prefix_option_reserved1
 Spirent Extension (for Spirent HLTAPI only).
 Specifies reserved field 1 for the Prefix Information option in
 Router Advertisement messages (type 134). Possible values range
 from 0 to 65535. The default value is 0. You must specify ICMPv6
 in the -l4_protocol argument.

 -icmpv6_prefix_option_reserved2
 Spirent Extension (for Spirent HLTAPI only).
 Specifies reserved field 2 for the Prefix Information option in
 Router Advertisement messages (type 134). Possible values range
 from 0 to 65535. The default value is 0. You must specify ICMPv6
 in the -l4_protocol argument.

 -icmpv6_prefix_option_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the option type field for the Prefix Information
 option in Router Advertisement messages (type 134).
 Possible values are described below:
 Value Type
 1 Source Link-Layer Address
 2 Target Link-Layer Address
 3 Prefix Information
 4 Redirected Header
Traffic Functions
1096
 5 MTU

 The default value is 3. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_prefix_option_valid_lifetime
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the valid lifetime field for the Prefix Information
 option in Router Advertisement messages (type 134). This field
 indicates the length of time in seconds (relative to the time the
 packet is sent) that the prefix is valid for the purpose of
 on-link determination. Possible values range from 0 to 65535. The
 default value is 1. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_dest_address
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the destination address field in Redirect messages
 (type 137). The destination address is the IPv6 address that is
 redirected to the target. The default value is 2000::1. You must
 specify ICMPv6 in the -l4_protocol argument.

 -icmpv6_redirect_hdr_type
 Spirent Extension (for Spirent HLTAPI only).
 Indicates the option type for the Redirect Header option in
 Redirect messages (type 137).
 Possible values are described below:
 Value Type
 1 Source Link-Layer Address
 2 Target Link-Layer Address
 3 Prefix Information
 4 Redirected Header
 5 MTU

 The default value is 4. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_redirect_hdr_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the length of the Redirect Header option in Redirect
 messages (type 137). Possible values range from 0 to 255. The
 default value is 4. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_redirect_hdr_reserved1
 Spirent Extension (for Spirent HLTAPI only).
 Specifies reserved field 1 for the Redirect Header option in
 Redirect messages (type 137). Possible values range from 0 to
 65535. The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_redirect_hdr_reserved2
 Spirent Extension (for Spirent HLTAPI only).
 Specifies reserved field 2 for the Redirect Header option in
 Redirect messages (type 137). Possible values range from 0 to
 65535. The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.

 -icmpv6_group_address
 Spirent Extension (for Spirent HLTAPI only).
 Defines the multicast address field in MLDv2 Query messages (type 130).
 The value must be in IPv6 format. The default value is FF1E::1. You
 must specify ICMPv6 in the -l4_protocol argument.
 -icmpv6_max_resp_code
 Spirent Extension (for Spirent HLTAPI only).
 Defines the maximum response code field in MLDv2 Query
 messages (type 130). This field specifies
 the maximum time allowed before sending a responding report.
 Possible values range from 0 to 65535. The default value is 0.
 You must specify ICMPv6 in the -l4_protocol argument. 
Traffic Functions
1097
 -icmpv6_num_source
 Spirent Extension (for Spirent HLTAPI only).
 Defines the number of sources field in MLDv2 Query messages (type 130).
 This field specifies how many source addresses
 are present in the Query. Possible values range from 0 to 65535.
 The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.
 -icmpv6_qqic
 Spirent Extension (for Spirent HLTAPI only).
 Defines the Querier's Query Interval Code (QQIC) field in
 MLDv2 Query messages (type 130). QQIC specifies the query interval
 used by the querier. Possible values range from 0 to 65535. The
 default value is 0. You must specify ICMPv6 in the -l4_protocol
 argument.
 -icmpv6_qrv
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Querier's Robustness Variable (QRV) bits in
 MLDv2 Query messages (type 130). The value is a 3-bit string. The
 default value is 000. You must specify ICMPv6 in the -l4_protocol
 argument.

 -icmpv6_resv
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the reserved field in MLDv2 Query messages (type 130).
 Possible values range from 0 to 65535. The default value is 0.
 You must specify ICMPv6 in the -l4_protocol argument.
 -icmpv6_num_grp_records
 Spirent Extension (for Spirent HLTAPI only).
 Defines the number of group records field for MLDv2 Listener
 Report messages (type 143). This field specifies how many
 multicast address records are present in this report. Possible
 values range from 0 to 65535. The default value is 0. You must
 specify ICMPv6 in the -l4_protocol argument.
 -icmpv6_grp_record_aux_data_len
 Spirent Extension (for Spirent HLTAPI only).
 Defines the auxiliary data length field for the multicast
 address record in MLDv2 Listener Report messages (type 143). This
 field specifies the length of the auxiliary data field in the
 multicast address record. Possible values range from 0 to 65535.
 The default value is 0. You must specify ICMPv6 in the
 -l4_protocol argument.
 -icmpv6_grp_record_mcast_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the multicast IPv6 address for the multicast address
 record in MLDv2 Listener Report messages (type 143). The value
 must be in IPv6 format. The default value is FF1E::1. You must specify
 ICMPv6 in the -l4_protocol argument.
 -icmpv6_grp_record_num_source
 Spirent Extension (for Spirent HLTAPI only).
 Defines the number of sources field for the multicast address
 record in MLDv2 Listener Report messages (type 143). This field
 specifies how many source addresses are present in this multicast
 address record. Possible values range from 0 to 65535. The
 default value is 0. You must specify ICMPv6 in the -l4_protocol
 argument.
 -icmpv6_grp_record_record_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the record type for the multicast address record in
 MLDv2 Listener Report messages (type 143). You must specify ICMPv6
 in the -l4_protocol argument.
 Possible values are described below:

 Value Description
Traffic Functions
1098
 1 MODE_IS_INCLUDE
 2 MODE_IS_EXCLUDE
 3 CHANGE_TO_INCLUDE_MODE
 4 CHANGE_TO_EXCLUDE_MODE
 5 ALLOW_NEW_SOURCES
 6 BLOCK_OLD_SOURCES
 -igmp_group_addr
 Specifies the IP multicast group address of the group
 being joined or left. This address must be in IPv4 format.
 You must specify IGMP in the -l4_protocol argument. This argument
 is only supported when -igmp_version is set to 1 or 2, or
 -igmp_version is set to 3 and -igmp_msg_type is set to query.
 -igmp_group_count
 Specifies the number of multicast group addresses to
 generate for a stream. Possible values range from 0 to
 65535. You must specify IGMP in the -l4_protocol
 argument. This argument is only supported when -igmp_version is
 set to 1 or 2, or -igmp_version is set to 3 and -igmp_msg_type is
 set to query.
 -igmp_group_mode
 Indicates how the group address varies when the repeat
 count is greater than 1. Possible values are increment
 and decrement. You must specify IGMP in the -l4_protocol
 argument.

 increment - The group address increments by the step
 defined in the -igmp_group_step argument.
 decrement - The group address decrements by the step
 defined in the -igmp_group_step argument.
 This argument is only supported when -igmp_version is set to 1 or
 2, or -igmp_version is set to 3 and -igmp_msg_type is set to
 query.
 -igmp_group_step
 Specifies the amount by which to increment or decrement
 the IP Multicast group address (-igmp_group_addr) for
 subsequent messages. You must specify IGMP in the
 -l4_protocol argument and "increment" or "decrement" for
 the -igmp_group_mode argument. The default value is
 0.0.0.1. This argument is only supported when -igmp_version is
 set to 1 or 2, or -igmp_version is set to 3 and -igmp_msg_type is
 set to query.

 -igmpv3_grprechandle
 Specifies the handle of the IGMPv3 PDU in the stream that you
 want to modify. This argument is available for mode -modify. The
 value is returned from mode -create when you create an IGMPv3
 header.
 -igmp_multicast_src
 Specifies the list of source IP addresses in the Report message.
 The Report message may specify these specific sources be used or
 not used for the multicast group as a condition of membership.
 The value must be in IPv4 format.(for example,
 -igmp_multicast_src {196.168.1.10 196.168.1.11})You must specify
 IGMP in the -l4_protocol argument. This argument is only
 supported when -igmp_version is set to 3 and -igmp_msg_type is
 set to report.
 -igmp_multicast_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the multicast group address to which the Group record
 in the Report message pertains. You must specify IGMP in the
 -l4_protocol argument. This argument is only supported when
Traffic Functions
1099
 -igmp_version is set to 3 and -igmp_msg_type is set to report.
 -igmp_record_type
 Specifies the types of Group Records to be included in the Report
 message. Possible values are described below:
 Value Description
 5 ALLOW_NEW_SOURCES
 6 BLOCK_OLD_SOURCES
 4 CHANGE_TO_EXCLUDE_MODE
 3 CHANGE_TO_INCLUDE_MODE
 2 MODE_IS_EXCLUDE
 1 MODE_IS_INCLUDE
 You must specify IGMP in the -l4_protocol argument. This argument
 is only supported when -igmp_version is set to 3 and
 -igmp_msg_type is set to report.
 -igmp_max_response_time
 The maximum allowed time, in units of 1/10 second, before
 sending a responding report. Possible values range from
 0 to 65535. You must specify IGMP in the -l4_protocol
 argument and set -igmp_version to 2 or 3. This option is
 unavailable when -igmp_msg_type is set to report.
 -igmp_msg_type
 Specifies the IGMPv3 (see -igmp_version) message type to
 generate. You must specify IGMP in the -l4_protocol argument and
 set -igmp_version to 2 or 3, in which case one of the following two
 values must be specified:
 query - Generates a Membership Query message, which is
 sent by IP multicast routers to query the multicast
 reception state of neighboring interfaces.
 report - Generates a Membership Report message. Version
 3 Membership Reports are sent by IP systems to
 report (to neighboring routers) the current
 multicast reception state, or changes in the
 multicast reception state, of their interfaces.

 -igmp_qqic
 Defines the Querier's Query Interval Code (QQIC) in
 IGMPv3 Query message. The QQIC indicates the interval
 at which IGMP Membership Queries are sent. Possible
 values range from 0 to 255. You must specify IGMP in the
 -l4_protocol argument and set-igmp_version to 3.
 -igmp_qrv
 Configures the Querier's Robustness Variable (QRV) in
 IGMPv3 Query messages. Possible values range from 0 to
 7. If you specify a non-zero value, the QRV field will
 contain the Robustness Variable value used by the
 querier, for example, the sender of the Query. You must
 specify IGMP in the -l4_protocol argument and
 set -igmp_version to 3.
 -igmp_s_flag
 Sets the S-flag in a IGMPv3 query message. Possible
 values are 0 and 1. If set to 0, it indicates that any
 receiving multicast routers must not suppress the normal
 timer updates they perform upon hearing a query. If set
 to 1, it indicates that any receiving multicast routers
 must suppress the normal timer updates they perform upon
 hearing a query. The default is 0. You must specify IGMP
 in the -l4_protocol argument and set -igmp_version to
 3.
 -igmp_type
 Defines the type of IGMP message to send, for example,
 for IGMPv1, 2 indicates that it is the IGMP membership Query
Traffic Functions
1100
 message to be sent. You must specify -igmp_type in numeric
 format. See RFC 3228 for detail information. You must specify
 IGMP in the -l4_protocol argument.
 -igmp_version
 Defines IGMP version. Possible values are 1, 2, and 3.
 You must specify IGMP in the -l4_protocol argument.
 1 - Indicates IGMP version 1. In IGMP version 1, the
 routers send IGMP queries to the "all-hosts" multicast
 address of 224.0.0.1 to solicit multicast groups with
 active multicast receivers. The multicast receivers
 also can send IGMP reports to the router to notify it
 that they are interested in receiving a particular
 multicast stream. Hosts can send the report
 asynchronously or in response to the IGMP queries sent
 by the router.
 2 - Indicates IGMP version 2. IGMP version 2 introduces
 several changes to make IGMP more efficient in joining
 and leaving the group. The important changes include
 Querier election mechanism, Leave group message,
 Group-specific query and so on.
 3 - Indicates IGMP version 3. IGMP Version 3 (IGMPv3)
 adds support for "source filtering", which enables a
 multicast receiver host to signal to a router which groups
 it wants to receive multicast traffic from and from which
 source(s) this traffic is expected.
 Note: If you have set -igmp_version to 3, you must also specify
 -igmp_msg_type, or the IGMPv3 header will not be created.
 -isis_pdu_header_len
 Specifies the PDU header length of ISIS hello packet.
 The value must be in 2-digit hexadecimal format. Possible values
 range from 00 to FF. The default value is 00. You must set
 -l4_protocol to isis.
 -isis_version
 Specifies the version/protocol ID extension of ISIS hello packet.
 The value must be in 2-digit hexadecimal format. Possible values
 range from 00 to FF. The default value is 01. You must set
 -l4_protocol to isis.
 -isis_system_id_len
 Specifies the system ID length of ISIS hello packet. The value
 must be in 2-digit hexadecimal format. Possible values range from
 00 to FF. The default value is 00. You must set -l4_protocol to
 isis.
 -isis_pdu_type
 Specifies the PDU type of ISIS hello packet.
 The value must be in 2-digit hexadecimal format. Possible values
 range from 00 to FF. The default value is 0f. You must set
 -l4_protocol to isis.
 -isis_version2
 Specifies the version of ISIS hello packet.
 The value must be in 2-digit hexadecimal format. Possible values
 range from 00 to FF. The default value is 01. You must set
 -l4_protocol to isis.
 -isis_reserved
 Specifies the reserved field of ISIS hello packet.
 The value must be in 2-digit hexadecimal format. Possible values
 range from 00 to FF. The default value is 00. You must set
 -l4_protocol to isis.
 -isis_max_area_addr
 Specifies the maximum area addresses of ISIS hello packet. 
Traffic Functions
1101
 The value must be in 2-digit hexadecimal format. Possible values
 range from 00 to FF. The default value is 00. You must set
 -l4_protocol to isis.
 -isis_reserved_circuit_type
 Specifies the combined value of reserved and circuit type of ISIS
 hello packet. The value must be in 2-digit hexadecimal format.
 Possible values range from 00 to FF. The default value is 01. You
 must set -l4_protocol to isis.
 -isis_source_id
 Specifies the source ID of ISIS hello packet.
 The value must be in hexadecimal format. The default is the
 value of -mac_src, or 000001000001 if -mac_src is not defined.
 You must set -l4_protocol to isis.
 -isis_holder_timer
 Specifies the holder timer of ISIS hello packet.
 The value must be in 4-digit hexadecimal format. Possible values
 range from 0000 to FFFF. The default value is 001e. You
 must set -l4_protocol to isis.
 -isis_pdu_len
 Specifies the pdu length of ISIS hello packet.
 The value must be in 4-digit hexadecimal format. Possible values
 range from 0000-FFFF. The default value is 0000. You must set
 -l4_protocol to isis.
 -isis_reserved_bit
 Specifies the reserved bit field before priority of ISIS hello packet.
 The value must be a binary string. The default value is 0.
 You must set -l4_protocol to isis. The total length of
 -isis_reserved_bit and -isis_priority must be 8 bit to comprise
 the 1-byte field for ISIS hello packet.
 -isis_priority
 Specifies the priority of ISIS hello packet.
 The value must be a binary string. The default value is 0000000.
 You must set -l4_protocol to isis. The total length of
 -isis_reserved_bit and -isis_priority must be 8 bit to comprise
 the 1-byte field for ISIS hello packet.
 -isis_lan_id
 Specifies the LAN ID of ISIS hello packet.
 The value must be in hexadecimal. The default is the value of
 -isis_source_id followed by "ff". You must set -l4_protocol
 to isis.
 -length_mode
 Specifies how Spirent HLTAPI generates the size of each
 packet. Possible values are fixed, random, increment, imix, and
 auto. Gaussian and quad modes are not supported in Spirent HLTAPI.
 In fixed mode, all frames in a stream have the same length.
 If you set the length mode to "fixed", use the -l3_length
 argument to specify the size of each frame. In fixed mode,
 the frames are fixed per stream, so fixed mode applies to
 only one stream. All frames for that stream will have a
 fixed frame size.
 In random mode, the frames have variable lengths. If you set
 the length mode to "random", use the -l3_length_min and
 l3_length_max arguments to specify the minimum and maximum
 size of each frame. Because "random" applies to the entire
 port, not per stream, Spirent HLTAPI will generate
 frame sizes within the range last specified. The most recent
 random mode range specification affects all random mode
 streams defined for a port.
 For example, suppose you have four streams of traffic coming
 out of the same port but with the following settings:
Traffic Functions
1102
 stream 1: -length mode fixed -l3_length 64
 stream 2: -length mode random -l3_length_min 128
 -l3_length_max 256
 stream 3: -length mode random-l3_length_min 60
 -l3_length_max 150
 stream 4: -length mode fixed -l3_length 128
 In the above example, stream 1 is 64 bytes, stream 2 ranges
 between 128 and 256 bytes, stream 3 ranges between 60 and 150
 bytes, and stream4 is 128 bytes.
 In increment mode, the frame length increments. The step
 by which the frame length increments is specified in the
 -l3_length_step argument. Increment mode applies to only
 one stream. If you set the length mode to "increment",
 use the -l3_length_min and -l3_length_max arguments to
 specify the minimum and maximum size of each frame.

 In imix mode, the packet lengths and the ratios of the
 packet lengths are fixed. Specify the packet lengths
 using the -l3_imix1_size, -l3_imix2_size,
 -l3_imix3_size and -l3_imix4_size arguments. Define
 the ratios of packet lengths using the -l3_imix1_ratio,
 -l3_imix2_ratio, -l3_imix3_ratio and -l3_imix4_ratio
 arguments. The sum of all the ratios is 100.

 In auto mode, the payload is automatically set to zero. Configure
 the smallest frame size consistent with the headers defined
 in the frame. Append the 20-byte signature field if
 -disable_signature is set to 0.
 -mac_discovery_gw
 Specify the gateway for the stream, so you can send an ARP
 for this stream. You must also enable the ARP send request
 (sth::interface_config -arp_send_req 1), and then call
 sth::traffic_control -action run -port_handle $porthandle
 send the ARP. ARP is sent each time you call this function.
 Both IPv4 and IPv6 are supported. The default is 192.85.1.1 for
 IPv4, ::0 for IPv6.

 Spirent HLTAPI requires that you set -mac_discovery_gw for each
 stream. You must also specify ethernet_ii in the -l2_encap
 argument.
 -mac_discovery_gw_count
 The number of gateway addresses for this streamblock.
 You should specify this option when the stream is across
 different sub-interfaces. Possible values range from
 1 to 2147483647. The default is 1.
 -mac_discovery_gw_step
 The amount by which to increment the specified
 gateway address (-mac_discovery_gw) for subsequent
 packets. The default is 0.0.0.1 for IPv4, ::1 for IPv6.
 -mac_dst
 Specifies the destination MAC address for the port. The
 default is 00-00-00-00-00-00.
 Note: When generating raw streamblocks for multicast traffic,
 Spirent HLTAPI will automatically calculate the correct
 destination MAC address if you leave this argument as the default.
 -mac_dst_count
 The number of destination MAC addresses to generate for a
 particular stream. Possible values are 1 to 2147483647. The
 default is 1.
 -mac_dst_mode
 Specifies how Spirent HLTAPI will assign the destination
 MAC addresses for a particular stream. Possible values are:
Traffic Functions
1103
 fixed - The destination MAC address is the same for all
 packets.
 increment - For all packets, the destination MAC address
 increments by the step specified in the -mac_dst_step
 argument.
 decrement - For all packets, the destination MAC address
 decrements by the step specified in the -mac_dst_step
 argument
 random - For all packets, the MAC addresses are
 in random order.
 shuffle - For all packets, the destination MAC addresses are in
 random order within a range that is determined by the
 values of -mac_dst_count and -mac_dst_step.
 This attribute is mandatory. You must set it for each
 stream. You must also set -mac_discovery_gw for each stream.
 -mac_dst_step
 The amount by which to increment the specified destination
 MAC address (-mac_dst) for subsequent packets. Possible
 values range from 1 to 255, expressed as a power-of-two
 value (1,2,4,8,16...). The default is 1.
 -mac_dst2
 Specifies the destination MAC address for the port specified
 in -port-handle2. The default is 00-00-00-00-00-00.
 Note: When generating raw streamblocks for multicast traffic,
 Spirent HLTAPI will automatically calculate the correct
 destination MAC address if you leave this argument as the default.
 -mac_dst2_count
 The number of destination MAC addresses to generate for a
 particular stream. Possible values are 1 to 2147483647. The
 default is 1.
 -mac_dst2_mode
 Specifies how Spirent HLTAPI will assign the destination
 MAC addresses for a particular stream. Possible values are:
 fixed - The destination MAC address is the same for all
 packets.
 increment - For all packets, the destination MAC address
 increments by the step specified in the -mac_dst2_step
 argument.
 decrement - For all packets, the destination MAC address
 decrements by the step specified in the -mac_dst2_step
 argument
 random - For all packets, the MAC addresses are
 in random order.
 shuffle - For all packets, the destination MAC addresses are in
 random order within a range that is determined by the
 values of -mac_dst2_count and -mac_dst2_step.
 -mac_dst2_step
 The amount by which to increment the specified destination
 MAC address (-mac_dst) for subsequent packets. Possible
 values range from 1 to 255, expressed as a power-of-two
 value (1,2,4,8,16...). The default is 1.
 -mac_src
 Specifies the source MAC address for the port. The default
 is 00-00-01-00-00-01.
Traffic Functions
1104
 -mac_src_count
 The number of the source MAC addresses to generate for a
 particular stream. Possible values range from 1 to
 2147483647. The default is 1.
 -mac_src_mode
 Specifies how Spirent HLTAPI will assign the source MAC
 addresses for a particular stream. Possible values are:
 fixed - The source MAC address is the same for all packets.
 increment - For all packets, the source MAC address
 increments by the step specified in the -mac_src_step
 argument.
 decrement - For all packets, the source MAC address
 decrements by the step specified in the -mac_src_step
 argument
 random - For all packets, the MAC addresses are
 in random order.
 shuffle - For all packets, the source MAC addresses are in
 random order within a range that is determined by the values
 of -mac_src_count and -mac_src_step.
 -mac_src_step
 The amount by which to increment the specified source MAC
 address (-mac_src) for subsequent packets. Possible values
 range from 1 to 255, expressed as a power-of-two value
 (1,2,4,8,16...). The default is 1.
 -mac_src2
 Specifies the source MAC address for the port specified
 in -port-handle2. The default is 00-00-01-00-00-01.
 -mac_src2_count
 The number of the source MAC addresses to generate for a
 particular stream. Possible values range from 1 to
 2147483647. The default is 1.
 -mac_src2_mode
 Specifies how Spirent HLTAPI will assign the source MAC
 addresses for a particular stream. Possible values are:
 fixed - The source MAC address is the same for all packets.
 increment - For all packets, the source MAC address
 increments by the step specified in the -mac_src2_step
 argument.
 decrement - For all packets, the source MAC address
 decrements by the step specified in the -mac_src2_step
 argument.
 random - For all packets, the MAC addresses are
 in random order.
 shuffle - For all packets, the source MAC addresses are in
 random order within a range that is determined by the
 values of -mac_src2_count and -mac_src2_step.
 -mac_src2_step
 The amount by which to increment the specified source MAC
 address (-mac_src) for subsequent packets. Possible values
 range from 1 to 255, expressed as a power-of-two value
 (1,2,4,8,16...). The default is 1.
 -llc_control
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the control field in the Logical Link Control (LLC)
Traffic Functions
1105
 header. LLC is the upper portion of the data link layer of the
 OSI Model, which presents a uniform interface to the user of the
 data link service. The value must be in 2-digit hexadecimal
 format. Possible values range from 00 to FF. You can use this
 argument when -l2_encap is set to ethernet_8022,
 ethernet_8022_vlan, ethernet_8023_snap, or
 ethernet_8023_snap_vlan. The value of this argument will
 automatically change to 03 when -l2_encap is set to
 ethernet_8023_snap or ethernet_8023_snap_vlan and any of
 arguments -appletalk_header, -aarp_header, decnet_header,
 -vines_header, -ipx_header, -xns_header -snap_oui_id and
 snap_ether_type is set. The default value is 03.
 -llc_dsap
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Destination Service Access Point (DSAP) field
 in the LLC header. The possible values are listed below and
 map to the following protocols respectively.
 Value Protocol
 04 IBM SNA
 06 IP
 80 3Com
 AA Snap
 BC Banyan
 E0 Novell
 FE ISO Network Layer Protocol

 The default value is AA. You can use this argument
 when -l2_encap is set to ethernet_8022, ethernet_8022_vlan,
 ethernet_8023_snap, or ethernet_8023_snap_vlan. The value of this
 argument will automatically change to AA when -l2_encap is set to
 ethernet_8023_snap or ethernet_8023_snap_vlan and any of
 arguments -appletalk_header, -aarp_header, decnet_header,
 -vines_header, -ipx_header, -xns_header -snap_oui_id and
 snap_ether_type is set. The default value is 03.
 -llc_ssap
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Source Service Access Point (SSAP) field in
 the LLC header. The possible values are listed below and
 map to the following protocols respectively.
 Value Protocol
 04 IBM SNA
 06 IP
 80 3Com
 AA Snap
 BC Banyan
 E0 Novell
 FE ISO Network Layer Protocol

 The default value is AA. You can use this argument
 when -l2_encap is set to ethernet_8022, ethernet_8022_vlan,
 ethernet_8023_snap, or ethernet_8023_snap_vlan. The value of this
 argument will automatically change to AA when -l2_encap is set to
 ethernet_8023_snap or ethernet_8023_snap_vlan and any of
 arguments -appletalk_header, -aarp_header, decnet_header,
 -vines_header, -ipx_header, -xns_header -snap_oui_id and
 snap_ether_type is set.
 -snap_ether_type
 Specifies the Ethernet type in the Subnetwork Access Protocol
 (SNAP) header. The value must be in hexadecimal. This argument
 will be automatically set when -appletalk_header, -aarp_header,
 -decnet_header, -vines_header, -ipx_header or -xns_header is set.
 Possible values are listed below and map to the following packet
 headers respectively.
 Value Packet Header
 8137 IPX
 809B Apple Talk
 80F3 Apple Talk AARP
Traffic Functions
1106
 6003 DECNet
 0BAD VINES IP
 0807 XNS Compatibility
 The default value is 88B5.
 You can use this argument when -l2_encap is set to
 ethernet_8023_snap or ethernet_8023_snap_vlan.
 -snap_oui_id
 Specifies the Organization Code in the SNAP header. The value
 must be in hexadecimal. You can use this argument when -l2_encap
 is set to ethernet_8023_snap or ethernet_8023_snap_vlan. The
 default value is 000000.
 -appletalk_header
 Specifies the AppleTalk packet header. The value must be in
 hexadecimal. If you specify this header, the value of argument
 -snap_ether_type will automatically change to 809B. You can use
 this argument when -l2_encap is set to ethernet_8023_snap
 or ethernet_8023_snap_vlan.
 -aarp_header
 Specifies the AppleTalk Address Resolution Protocol (AARP) packet
 header. The value must be in hexadecimal. If you specify this
 header, the value of argument -snap_ether_type will automatically
 change to 80F3.
 You can use this argument when -l2_encap is set to
 ethernet_8023_snap or ethernet_8023_snap_vlan.

 -decnet_header
 Specifies the DECNet packet header. DECnet is a suite of network
 protocols created by Digital Equipment Corporation. The value
 must be in hexadecimal. If you specify this header, the value of
 argument -snap_ether_type will automatically change to 6003.
 You can use this argument when -l2_encap is set to
 ethernet_8023_snap or ethernet_8023_snap_vlan.
 -vines_header
 Specifies the Virtual Integrated Network Service (VINES) IP
 packet header. The value must be in hexadecimal. If you specify
 this header, the value of argument -snap_ether_type will
 automatically change to 0BAD.
 You can use this argument when -l2_encap is set to
 ethernet_8023_snap or ethernet_8023_snap_vlan.

 -ipx_header
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Novell Internet Packet Exchange (IPX) header.
 The value must be in hexadecimal.
 You can use this argument when -l2_encap is set to ethernet_8022,
 ethernet_8022_vlan, ethernet_8023_snap, or ethernet_8023_snap_vlan.
 If you specify this header in L2 encapsulation mode ethernet_8022
 or ethernet_8022_vlan, the value of arguments -llc_dsap and
 -llc_ssap will automatically change to E0 (Novell). If you
 specify this header in L2 encapsulation mode ethernet_8023_snap
 or ethernet_8023_snap_vlan, the value of arguments
 -snap_ether_type will automatically change to 8137 (IPX packet).

 -xns_header
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Xerox Network Services (XNS) header. The value must
 be in hexadecimal. If you specify this header, the value of
 arguments -llc_dsap and -llc_ssap will automatically change to 80
 (3Com).
 You can use this argument when -l2_encap is set to
 ethernet_8022, ethernet_8022_vlan, ethernet_8023_snap, or
 ethernet_8023_snap_vlan. If you specify this header in L2
 encapsulation mode ethernet_8022 or ethernet_8022_vlan, the value
 of arguments -llc_dsap and -llc_ssap will automatically change to
 80 (3Com). If you specify this header in L2 encapsulation
 mode ethernet_8023_snap or ethernet_8023_snap_vlan, the value of
Traffic Functions
1107
 arguments -snap_ether_type will automatically change to 0807 (XNS
 Compatibility).
 -mode
 Specifies the action to perform. Possible values are create,
 disable, enable, modify, remove, or reset. The modes are
 described below:
 create - Creates a new stream block of traffic for the
 specified port. If you enable bidirectional
 traffic, Spirent HLTAPI creates two stream
 blocks between the specified ports, one for each
 direction of traffic. This argument is mandatory
 for the sth::traffic_config function. This mode
 returns the stream ID (stream_id).
 Example:
 traffic_config -mode create -port_handle $port1
 disable - Deactivates the existing stream blocks for the
 specified port(s). Same as "-mode remove".
 Example:
 traffic_config -mode disable -stream_id {list} \
 -port_handle $port1
 enable - Activates the existing stream blocks for the
 specified port(s).
 Example:
 traffic_config -mode enable -stream_id {list} \
 -port_handle $port1
 modify - Modifies the existing stream block for the
 specified port(s).
 Example:
 traffic_config -mode modify -stream_id {list} \
 -port_handle $port1
 remove - Deactivates the existing stream blocks for the
 specified port(s). Same as "-mode disable".
 Example:
 traffic_config -mode remove -stream_id {list} \
 -port_handle $port1
 reset - Deletes all of the existing stream blocks from the
 system.
 Example: traffic_config -mode reset
 Note: For both PPPoX and DHCP bound traffic, for subsequent
 connects and disconnect you do not have to delete and re-
 create traffic when adding new sessions. To disconnect and
 re-connect multiple PPPoX or DHCP sessions, you must stop
 and then restart traffic AFTER all new sessions have
 connected so the traffic configuration can get the newly
 updated session information. If you do not stop traffic, the
 old session information will not be replaced by the new session
 information.
 -mpls_labels
 The value of the MPLS label. This argument is available when
 the Ethernet type is ethernet_ii_unicast_mpls. Possible values
 range from 0 to 1048575. Spirent HLTAPI allows one or more labels
 for a single packet. Here is an example of a stream configuration
 using MPLS labels:
 sth::traffic_config
 -mode create \
 -port_handle $hPort($device.4/0) \
 -l2_encap ethernet_ii_unicast_mpls \
 -mpls_labels {1 3 7}\
 -mpls_labels_mode "list"\
 -mpls_cos 001\
 -mpls_ttl 60\
Traffic Functions
1108
 -l3_protocol ipv4 \
 -l3_length 256 \
 -length_mode fixed \
 -ip_src_addr 79.13.1.10 \
 -ip_dst_addr 78.14.0.10 \
 -mpls_bottom_stack_bit
 Enables/disables the Bottom of Stack bit in the MPLS label stack.
 Possible values are 0 (disabled) and 1 (enabled). The default
 value is 1.

 -mpls_labels_mode
 Specifies how Spirent HLTAPI will assign MPLS labels to a
 particular stream. Possible values are fixed, increment,
 decrement, and list.
 fixed - The MPLS Label is the same for all packets
 increment - For all packets, the MPLS labels increment
 by the step specified in the mpls_labels_step
 argument.
 decrement - For all packets, the MPLS labels decrement by
 the step specified in the mpls_labels_step
 argument.
 list - For all packets, the MPLS labels are the
 values in the list.
 -mpls_labels_count
 Specifies the number of the MPLS labels to generate for a
 particular stream. The default value is 1.
 -mpls_labels_step
 Specifies the amount by which to increment or decrement the
 specified MPLS label for subsequent packets. Possible values
 range from 1 to 524288.

 -mpls_cos
 Specifies the value of Class of Service (CoS) for MLPS, which
 is encoded as part of the MPLS header to place the traffic
 into a transmission priority queue. The CoS value is encoded
 using the CoS bits (also known as the EXP or experimental bits).
 Possible values are 3-bit binary numbers ranging from 000 to 111.
 -mpls_ttl
 Defines the time-to-live (TTL) value for MPLS label. The TTL
 is a counter measured in units of seconds that gradually
 decrements to zero, at which point the datagram is discarded.
 -pkts_per_burst
 Sets the number of packets each port transmits in a single
 burst. Possible values are 1 - 16777215. The default is 1.
 You must specify a value equal to 1 for continuous mode
 and greater than 1 for continuous_burst mode. You can only
 use this argument with Gigabit and higher Ethernet
 speeds in half-duplex mode. -port_handle is mandatory when
 calling this argument.
 -port_handle
 Specifies the handle for the port to be configured. The
 port_handle value uniquely identifies a port on a chassis.
 The port_handle value is obtained when you connect to the
 chassis (see the description of the connect function).
 Spirent HLTAPI will use this port to transmit
 traffic. This argument is mandatory for the
 sth::traffic_config function.
 -disable_signature
 Determines whether to disable the Spirent signature in
 traffic. Possible values are described:
Traffic Functions
1109
 0 - Inserts Spirent signature. This is the default.
 1 - The Spirent signature will not be inserted.
 -port_handle2
 Specifies the handle for the second port for bidirectional
 traffic. This port is the source of the reverse stream of
 traffic. Use this argument only when bidirectional traffic
 is enabled. (See the description of the -bidirectional
 argument.)
 -ppp_link
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables PPPoX dynamic traffic. Valid values are
 1 and 0. Specify the value 1 to enable dynamic binding from
 the bound PPPoX sessions. Specify the value 0 to disable
 PPPoX dynamic traffic. The default is 0. The -l2_encap
 argument must be set to ethernet_ii_pppoe,
 ethernet_ii_vlan_pppoe, or ethernet_ii_qinq_pppoe.
 Note: For both PPPoX and DHCP bound traffic, for subsequent
 connects and disconnect you do not have to delete and re-
 create traffic when adding new sessions. To disconnect and
 re-connect multiple PPPoX or DHCP sessions, you must stop
 and then restart traffic AFTER all new sessions have
 connected so the traffic configuration can get the newly
 updated session information. If you do not stop traffic, the
 old session information will not be replaced by the new one.
 -ppp_link_traffic_src_list
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the PPPoX session block handle from which to
 retrieve source IP addresses and creates dynamic upstream
 traffic. The sth::pppox_config function returns this
 handle in the keyed list. If you use this option, you must
 set -ppp_link to 1.
 -ppp_session_id
 Specifies the PPPoE session ID. This argument requires
 the -l2_encap argument to be set to ethernet_ii_pppoe,
 ethernet_ii_vlan_pppoe, or ethernet_ii_qinq_pppoe. Possible
 values range from 0 to 65535. If you specify a PPPoE session
 ID, do not use the -ppp_link or -ppp_link_traffic_src_list
 arguments.
 -rate_bps
 The traffic transmission rate in bits per second.
 -rate_percent
 The traffic transmission rate specified as a percent of the
 line rate for the specified stream. Possible values are
 between 0.00 and 100.00, inclusive. The default is 100.00.
 -rate_pps
 The traffic transmission rate in packets per second. This
 value refers to the packet rate of a given packet size that
 will load up an interface to 100%.
 -stream_id
 A handle that identifies a stream. Use this argument to
 modify or remove an existing stream. Spirent HLTAPI
 creates and returns a stream ID when you configure traffic
 (sth::traffic_config -mode create). If you create
 bidirectional traffic, Spirent HLTAPI creates and
 returns two stream IDs. (Each direction of the stream must
 have a unique ID.)
 -tcp_ack_flag
 Indicates whether the data identified by the sequence number
 has been received. Possible values are 0 and 1. The default
 is 0. You must specify TCP in the -l4_protocol argument.
Traffic Functions
1110
 -tcp_ack_num
 Identifies the next expected TCP octet. Possible values are
 1 to 2147483647. The default is 1. You must specify TCP in
 the -l4_protocol argument.

 -tcp_data_offset
 Specifies the data offset field in the TCP header. Possible values
 range from 1 to 15.
 -tcp_dst_port
 Specifies the port on the receiving TCP module. Possible
 values range from 0 to 65535. The default is 80. You must
 specify TCP in the -l4_protocol argument.
 -tcp_fin_flag
 Indicates whether a connection is terminated. Possible
 values are 0 and 1. The default is 0. Once the data transfer
 is complete, the host sends a packet with the FIN and ACK
 flags set. The FIN flag is then set to 1, while the ACK flag
 is set to 0. You must specify TCP in the -l4_protocol
 argument.
 -tcp_psh_flag
 Indicates whether to ensure that the data is given the
 appropriate priority and is processed at the sending or
 receiving end. Possible values are 0 and 1. The default is
 0. You must specify TCP in the -l4_protocol argument.
 -tcp_reserved
 Reserves TCP bits. Possible values range from 0 to 63. The
 default is 0. You must specify TCP in the -l4_protocol
 argument.
 -tcp_rst_flag
 Resets the connection when a segment arrives that is not
 intended for the current connection. Possible values are 0
 and 1. The default is 0. You must specify TCP in the
 -l4_protocol argument.
 -tcp_seq_num
 Identifies the position of the data within the data stream.
 Possible values are 1 to 2147483647. The default is 1. You
 must specify TCP in the -l4_protocol argument.
 -tcp_src_port
 Specifies the port on the sending TCP module. Possible
 values range from 0 to 65535. The default is 1024. You must
 specify TCP in the -l4_protocol argument.
 -tcp_syn_flag
 Indicates whether the port is open for connection. Possible
 values are 0 and 1. A value of 1 indicates the port has
 established a connection. The default is 0. You must specify
 TCP in the -l4_protocol argument.
 -tcp_urg_flag
 Identifies the incoming data as "urgent," giving it priority
 over the other segments. Possible values are 0 and 1. The
 default is 0. You must specify TCP in the -l4_protocol
 argument.
 -tcp_urgent_ptr
 Specifies the position in the segment where urgent data
 ends. Possible values range from 0 to 65535. The default is
 0.
 -tcp_window
 Specifies the number of bytes that can be sent
 simultaneously (within the window). In the TCP header, this
 field is used by the receiver to indicate to the sender the
Traffic Functions
1111
 amount of data that it is able to accept. Possible values
 are 0 to 65535. The default is 4069.
 -transmit_mode
 Defines the mode of transmission of the packets (as a part
 of the stream). Possible values are continuous,
 continuous_burst, multi_burst, single_burst, and single_pkt.
 The default is continuous. When calling this argument in
 either mode, the following arguments are mandatory:
 1. -rate_bps, -rate_pps, or -rate_percent (if you do not
 specify one of these arguments, Spirent HLTAPI uses
 the Spirent HLTAPI default (10% line rate)
 2. -length_mode
 3. -l3_length or l3_length_min and l3_length_max
 4. -pks_per_burst
 5. -port_handle
 Note: The -pkts_per_burst argument must be equal to 1
 for continuous mode and greater than or equal to 1 for
 continuous_burst mode. For multi_burst mode, the
 -burst_loop_count argument is mandatory. If you do not
 specify it, Spirent HLTAPI will use the default value
 which is 30. For single_burst mode, the -burst_loop_count
 argument always defaults to 1. For single_pkt mode,
 both the -burst_loop_count and -pkts_per_burst arguments
 always default to 1.
 -udp_checksum
 Verifies that packets are not corrupted. Possible values are
 0 (not corrupted) and 1 (corrupted). The default is 0.
 You must specify UDP in the -l4_protocol argument.
 -udp_dst_port
 Defines the destination TCP port number. Possible values
 range from 0 to 65535. The default is 80. You must specify
 UDP in the -l4_protocol argument.
 -udp_src_port
 Defines the source UDP port number. Possible values range
 from 0 to 65535. The default is 1024. You must specify UDP
 in the -l4_protocol argument.
 -vci
 The virtual circuit identifier for IP over ATM interfaces.
 Possible values range from 0 to 65535. The default is 32.
 -vci_count
 Specifies the number of VCIs to use for the emulation of
 clients over ATM interfaces. This argument is valid for ATM
 interfaces only. Possible values are 1 to 65536. The default
 is 1.

 -vci_step
 Specifies the increment to use when selecting the next
 VCI value to use for the emulation of clients over ATM
 interfaces. This argument is valid for ATM interfaces
 only. Possible values are 0 to 65535. The default is 1.
 -vpi
 The virtual path identifier for IP over ATM interfaces.
 Possible values range from 0 to 255. The default is 0.
 -vpi_count
 Specifies the number of VPIs to use for the emulation of
 clients over ATM interfaces. This argument is valid for ATM
 interfaces only. Possible values are 1 to 256. The default
 is 1.
 -vpi_step
 Specifies the increment to use when selecting the next
Traffic Functions
1112
 VPI value to use for the emulation of clients over ATM
 interfaces. This argument is valid for ATM interfaces only.
 Possible values are 0 to 255. The default is 1.
 VPI values are incremented by addition modulo 256.
 -vlan_cfi
 Specifies whether the canonical format indicator (cfi) value
 is set for the VLAN header. Possible values are 0 or
 1. You must set the -l2_encap argument to ethernet_ii_vlan.
 -vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the canonical format indicator (cfi) value
 is set for the VLAN outer header. Possible values are 0 or
 1. You must set the -l2_encap argument to ethernet_ii_vlan.
 -vlan_priority_mode
 Specifies how Spirent HLTAPI assigns VLAN priority to packets in
 a particular stream. Possible values are:
 fixed - The VLAN priority is the same for all packets.
 increment - For all packets, the VLAN priorities increment by the
 step specified by -vlan_priority_step.
 decrement - For all packets, the VLAN priorities decrement
 by the step specified by -vlan_priority_step.
 random - For all packets, the VLAN priorities are in random order.

 shuffle - For all packets, the VLAN priorities are in
 random order within a range that is determined by the
 values of -vlan_priority_count and -vlan_priority_step.

 -vlan_priority_step
 The amount by which to increment the specified VLAN priority
 (-vlan_user_priority) for subsequent packets.
 Possible values range from 0 to 4095. The default is 0. You must
 set the -l2_encap argument to ethernet_ii_vlan.
 -vlan_priority_count
 Specifies the number of VLAN priorities to generate for the
 stream. Possible values range from 1 to 4096. The
 default is 1. You must set the -vlan_id_mode argument to
 increment and the -l2_encap argument to ethernet_ii_vlan.
 -vlan_id
 Specifies the VLAN ID for a particular stream. Possible
 values range from 0 to 4094. You must set the
 -l2_encap argument to ethernet_ii_vlan.
 -vlan_id_count
 Specifies the number of VLAN tags to generate for the
 stream. Possible values range from 1 to 4096. The
 default is 1. You must set the -vlan_id_mode argument to
 increment and the -l2_encap argument to ethernet_ii_vlan.
 -vlan_id_mode
 Specifies how Spirent TestCenter will assign VLAN tags to
 packets in a particular stream. Possible values are:
 fixed - The VLAN ID is the same for all packets.
 increment - For all packets, the VLAN tag ID increments by
 the step specified in the -vlan_id_step argument.
 decrement - For all packets, the VLAN tag ID decrements by
 the step specified in the -vlan_id_step argument.
 random - For all packets, the VLAN tag IDs will be in random
 order. 
Traffic Functions
1113

 shuffle - For all packets, the VLAN tag IDs are in random order
 within a range that is determined by the values of
 -vlan_id_count and -vlan_id_step.
 You must set the -l2_encap argument to ethernet_ii_vlan.
 -vlan_id_step
 The amount by which to increment the specified VLAN ID
 (-vlan_id) for subsequent packets.
 Possible values range from 0 to 4095 (see below).
 The default is 0. You must set the -l2_encap argument to
 ethernet_ii_vlan.
 -vlan_tpid
 The type of VLAN in the frame header of traffic. Possible values
 range from 0 to 65535. The default is 33024.
 -vlan_id_outer
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN ID for a particular outer header.
 Possible values range from 0 to 4095. You must set the
 -l2_encap argument to ethernet_ii_vlan.
 -vlan_id_outer_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN tags to generate for the
 outer header. Possible values range from 1 to 4096.
 The default is 1. You must set the -vlan_id_outer_mode
 argument to increment and the -l2_encap argument to
 ethernet_ii_vlan.
 -vlan_id_outer_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter will assign VLAN tags to
 packets in the specified outer header. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -vlan_id_outer_step argument.
 decrement - For all packets, the outer VLAN tag ID
 decrements by the step specified in the
 -vlan_id_outer_step argument.
 random - For all packets, the outer VLAN tag IDs will be in
 random order.

 shuffle - For all packets, the outer VLAN tag IDs are in
 random order within a range that is determined by the
 values of -vlan_id_outer_count and
 -vlan_id_outer_step.
 You must set the -l2_encap argument to ethernet_ii_vlan.
 -vlan_id_outer_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-vlan_id_outer) for subsequent packets.
 Possible values range from 0 to 4095 (see below).
 The default is 0. You must set the -l2_encap argument to
 ethernet_ii_vlan.
 -vlan_outer_tpid
 Spirent Extension (for Spirent HLTAPI only).
 The type of outer VLAN in the frame header of traffic. Possible
 values range from 0 to 65535. The default is 33024.
Traffic Functions
1114
 -vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header.
 Possible values range from 0 to 7. You can also enter a
 list of priority values. The default is 0.
 -vlan_user_priority
 Specifies the VLAN priority to assign to the specified port,
 Possible values range from 0 to 7. You can also enter a
 list of priority values. The default is 1. You must set the
 -l2_encap argument to ethernet_ii_vlan.
 -qinq_incr_mode
 Determines which VLAN ID to increment first. Possible values
 are:
 inner - increment the inner VLAN ID before the outer VLAN ID
 outer - increment the outer VLAN ID before the inner VLAN ID
 both - increment both the inner and outer VLAN ID at the
 same time.
 The default is both. You must set the-l2_encap argument to
 ethernet_ii_vlan.
 -fc_eof
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the END-of-Frame (EOF) field in the FC frame. It is
 represented by an ordered set that immediately follows the CRC
 and will be transmitted on a word boundary. The following order
 sets are supported:

 EOFt - Indicates that the sequence associated with the
 sequence ID is complete

 EOFa - Indicates that the frame content is corrupted

 EOFn - Identifies the end of frame when one of the other EOF
 ordered sets indicating valid frame content is not
 required

 EOFni - Indicates that the frame is invalid

 The default value is EOFt. You must specify fibre_channel in the
 -l2_encap argument.
 -fc_sof
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Start-of-Frame (SOF) field in the FC frame.
 There are multiple SOF delimiters defined for sequence control.
 The following values are supported:

 SOFi2 - SOF Initiate Class 2. Used on the first frame of a
 sequence for class 2 service

 SOFi3 - SOF Initiate Class 3. Used on the first frame of a
 sequence for class 3 service

 SOFn2 - SOF Normal Class 2. Used for all frames except the first
 frame of a Sequence for class 2 service

 SOFn3 - SOF Normal Class 3. Used for all frames except the first
 frame of a Sequence for class 3 service.

 SOFf - SOF Fabric. Used to indicate when a PN_Port or Fx_Port
 receives a class F frame

 The default value is SOFi3. You must specify fibre_channel in the
 -l2_encap argument.
Traffic Functions
1115
 -fc_cs_ctl
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Class Specific Control (CS_CTL) field that
 contains management information for the class of service
 identified by the SOF. Possible values range from 00 to FF.
 The default value is 00. You must specify fibre_channel in
 the -l2_encap argument.

 -fc_data_field_control
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Data Field Control (DF_CTL) field, a one-byte
 field that specifies the presence of optional headers at the
 beginning of the Data field. Possible values range from 00 to
 FF. The default value is 00. You must specify fibre_channel
 in the -l2_encap argument.
 -fc_dest_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Destination ID (D_ID) field, a three-byte field
 that contains the address identifier of the destination
 Nx_Port in the FC frame header. Possible values range from
 000000 to FFFFFF. The default value is FFFFFD. You must
 specify fibre_channel in the -l2_encap argument.

 -fc_frame_control
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Frame Control (F_CTL) field in the FC frame
 header. It is a 24-bit field that contains the number of flags
 that are used to control flow of the sequence. Possible
 values range from 000000 to FFFFFF. The default value is
 380000. You must specify fibre_channel in the -l2_encap
 argument.

 -fc_orig_exchange_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Originator Exchange ID (OX_ID) field, a
 two-byte field in the FC frame header that identifies the
 exchange ID assigned by the originator of the exchange.
 Possible values range from 0000 to FFFF. The default value is
 0000. You must specify fibre_channel in the -l2_encap argument.

 -fc_parameter
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Parameter field in the FC frame header.
 Possible values range from 00000000 to FFFFFFFF. The default
 value is 00000000.
 -fc_r_ctl
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Routing Control (R_CTL) field in the FC frame
 header. The R-CTL field is a one-byte field that contains
 routing bits and information bits to categorize the frame
 function. Possible values range from 00 to FF. The default
 value is 22. You must specify fibre_channel in the -l2_encap
 argument.

 -fc_response_exchange_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Responder Exchanger ID (RX_ID) field, a
 two-byte field in the FC frame header that provides a unique,
 locally meaningful identifier at the responder for an
 exchange established by an originator and identified by an
 originator exchange ID. Possible values range from 0000 to
 FFFF. The default value is FFFF. You must specify
 fibre_channel in the -l2_encap argument.
 -fc_seq_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Sequencer Count (SEQ_CNT) field, a two-byte
 field that indicates the sequential order of a data frame
Traffic Functions
1116
 transmission within a single sequence or multiple consecutive
 sequences for the same Exchange. Possible values range from
 0000 to FFFF. The default value is 0000. You must specify
 fibre_channel in the -l2_encap argument.
 -fc_seq_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Sequence ID (SEQ_ID) field, a one-byte field in
 the FC frame header assigned by the sequence initiator that
 is unique for a specific D_ID and S_ID pair while the
 sequence is open. Possible values range from 00 to FF. The
 default value is 00. You must specify fibre_channel in the
 -l2_encap argument.

 -fc_source_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Source ID (S_ID) field, a three-byte field that
 contains the address identifier of the destination Nx_Port in
 the FC frame header. Possible values range from 000000 to
 FFFFFF. The default value is FFFFFD. You must specify
 fibre_channel in the -l2_encap argument.
 -fc_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Type field that defines the upper layer
 protocol carried in the payload of the FC frame. Possible
 values range from 00 to FF. The default value is 01. You must
 specify fibre_channel in the -l2_encap argument.

 -tunnel_handle
 Specifies the GRE tunnel handle, an array value,
 initialized by the emulation_gre_config command. The router
 sends traffic through this tunnel.
 -vpls_source_handle
 Specifies the emulation site or site pool handle for
 source of Virtual Private LAN Service (VPLS)/VPLS Pool
 traffic mesh, when VPLS site or pool emulation exists.
 Traffic streams can be established only between sites
 within the same VPN.
 -vpls_destination_handle
 Specifies the emulation site or site pool handle for the
 destination of Virtual Private LAN Service (VPLS) /VPLS
 Pool traffic mesh, when a VPLS site or pool emulation
 exists. Traffic streams can be established only between
 sites within the same VPN.
 -enable_stream_only_gen
 Spirent Extension (for Spirent HLTAPI only).
 Disables or enables "stream only generation" option when
 creating traffic. When it is set to 1, Spirent TestCenter will
 generate a separate stream for each flow instead of generating
 the same stream for all flows. Possible values are 0 and 1.
 The default is 1.
 -fill_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the fill pattern type to be used for payload. Possible
 values are constant, incr, decr and prbs. The default
 value is constant. The types are described below:
 constant - Use fixed fill pattern.
 incr - Use incrementing value to fill the rest of the frame.
 The step value is 1. The starting value is fixed.
 decr - Use decrementing value to fill the rest of the frame.
 The step value is 1. The starting value is fixed.
Traffic Functions
1117
 prbs - Use a pseudo-random bit sequence to fill the rest of
 the frame. The prbs pattern is shared across streams that
 use the prbs as the fill pattern.
 -vlan_id_repeat
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of times an inner VLAN ID should be
 repeated, before the step (-vlan_id_step) is applied to
 the inner VLAN ID for incrementing. The default is 0.
 -vlan_id_outer_repeat
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of times an outer VLAN ID should be
 repeated, before the step (-vlan_id_outer_step) is applied to
 the outer VLAN ID for incrementing. The default is 0.
 -enable_control_plane
 Spirent Extension (for Spirent HLTAPI only).
 This argument enables or disables control plane traffic, such as
 Ping and ARP. Possible values are 0 (disabled) and 1 (enabled).
 The default is 0.
 -high_speed_result_analysis
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables high speed result analysis for a stream block.
 Possible values are 0 (disabled) and 1 (enabled). The
 default is 1.
 -name
 Specifies the name for currently selected traffic stream.
 -traffic_state
 Turns the currently selected traffic stream on or off. Possible
 values are 0 (off) and 1 (on). The default value is 1.
 -tcp_checksum
 Specifies the TCP checksum value. Possible values range from
 0 to 65535. The values must be integers. If you don't specify
 this argument, checksum will be automatically calculated.
 -tcp_src_port_mode
 Specifies how Spirent HLTAPI will assign the TCP source
 port for a particular stream. Possible values are described
 below:
 increment - The TCP source port number increments
 by the step (-tcp_src_port) for all packets. This is
 the default.

 decrement - The TCP source port number decrements by
 the step (-tcp_src_port) for all packets.

 random - For all packets, the TCP source port number will be in
 random order.
 shuffle - For all packets, the TCP source port number will be in
 random order within a range that is determined by the
 values of -tcp_src_port_count and -tcp_src_port_step.
 -tcp_src_port_count
 Specifies the number of different values to generate for
 TCP source port. The values must be integers. Possible values
 range from 1 to 65535. The default value is 1.
 -tcp_src_port_step
 Specifies the amount by which to increment or decrement
 the specified TCP source port. Possible values range from 1 to
 65535. The default value is 1.
 -tcp_dst_port_mode
 Specifies how Spirent HLTAPI will assign the TCP destination 
Traffic Functions
1118
 port for a particular stream. Possible values are described
 below:

 increment - For all packets, the TCP destination port number
 increments by the step(-tcp_dst_port) argument.
 decrement - For all packets, the TCP destination port number
 decrements by the step (-tcp_dst_port) argument.
 random - For all packets, the TCP destination port number will
 be in random order.
 shuffle - For all packets, the TCP destination port number will
 be in random order within a range that is determined by the
 values of -tcp_dst_port_count and -tcp_dst_port_step.
 The default value is increment.
 -tcp_dst_port_count
 Specifies the number of different values to generate for
 TCP destination port. Possible values range from 1 to 65535.
 The default value is 1.
 -tcp_dst_port_step
 decrement the specified TCP destination port.
 Possible values range from 1 to 65535. The default
 value is 1.

 -udp_src_port_mode
 Specifies how Spirent HLTAPI will assign the UDP source port
 for a particular stream. Possible values are described below:

 increment - For all packets, the UDT source port number
 increments by the step specified in the -udp_src_port
 argument. This is the default.
 decrement - For all packets, the UDP source port number
 decrements by the step (-ip_dst_step).
 random - For all packets, the UDP source port number will
 be in random order.
 shuffle - For all packets, the UDP source port number will be in
 random order within a range that is determined by the
 values of -udp_src_port_count and -udp_src_port_step.
 -udp_src_port_count
 Specifies the number of different values to generate for the UDP
 source port. Possible values are integers and range from 1 to 65535.
 The default value is 1.
 -udp_src_port_step INTEGER
 Specifies the amount by which to increment or decrement the
 specified UDP source port. The values must be integers. Possible
 values range from 1 to 65535.
 -udp_dst_port_mode
 Specifies how Spirent HLTAPI will assign the UDP source
 port for a particular stream. Possible values are described
 below:

 increment - For all packets, the UDP source port number
 increments by the step (-udp_dst_port). This is the
 default.
 decrement - For all packets, the UDP source port number
 decrements by the step (-udp_dst_port).
 random - For all packets, the UDP source port number
 will be in random order.
Traffic Functions
1119
 shuffle - For all packets, the TCP destination port number will
 be in random order within a range that is determined by the
 values of -udp_dst_port_count and -udp_dst_port_step.
 -udp_dst_port_count
 Specifies the number of different values to generate for
 the UDP destination port. The values of this argument must
 be integers. Possible values range from 1 to 65535. The default
 value is 1.
 -udp_dst_port_step
 Specifies the amount by which to increment or decrement
 the specified UDP destination port. The values of this argument
 must be integers. Possible values range from 1 to 65535.
 -vxlan
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether to create the Virtual eXtensible Local Area
 Network (VXLAN) header. VXLAN encapsulates MAC frames in a UDP
 header to create a Layer 2 connection across an IP network
 between two vSphere hypervisor hosts. Possible values are 0 and
 1. If you set -vxlan to 1, Spirent HLTAPI creates a VXLAN header,
 together with which the original Ethernet frame and IPv4 frame
 (if specified ) are encapsulated. Note: The following arguments
 prefixed by -inner_*** are used to configure the inner Ethernet
 frame and inner IPv4 frame.

 -vni
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VXLAN Network Identifier in the VXLAN header.
 Possible values range from 0 to 16777215. The default is 0. You
 must set -vxlan to 1.

 -peer_vtep_ipv4_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv4 address of the peer Virtual Tunnel Endpoints
 (VTEP) device. The default value is 0.0.0.0. You must set -vxlan
 to 1.

 -ipv4_multicast_group_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IPv4 multicast group address. The default value is
 225.0.0.1. You must set -vxlan to 1.

 -inner_l3_protocol
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Layer 3 protocol for the inner Ethernet frame. The
 only supported value is ipv4. You must set -vxlan to 1.

 -inner_ip_src_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the source IPv4 address for the inner IPv4 header of
 the first generated packet. The default is 0.0.0.0. You must set
 -vxlan to 1.

 -inner_ip_dst_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the destination IPv4 address for the inner IPv4 header
 of the first generated packet. The default is 192.0.0.1. You must
 set -vxlan to 1.

 -inner_ip_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the identifying value used to help assemble the
 fragments of a datagram in the inner IPv4 header. Possible values
 range from 0 to 65535. The default is 0. You must set -vxlan to 1.

 -inner_ip_checksum
 Verifies that packets are not corrupted.
 Possible values are 0 (not corrupted) and 1 (corrupted). The
 default is 0. You must set -vxlan to 1. 
Traffic Functions
1120

 -inner_ip_fragment_offset
 Spirent Extension (for Spirent HLTAPI only).
 The byte count from the start for the inner IPv4 header of the
 original sent packet. The fragment offset is measured in 8-octet
 increments (64 bits). Possible values range from 0 to 8191. The
 default is 0. You must set -vxlan to 1.

 -inner_ip_dst_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign the IPv4
 addresses for a particular stream.
 Possible values are:
 increment - For all packets, the destination IP address
 increments by the step specified in the
 -inner_ip_dst_step argument.
 decrement - For all packets, the destination IP address
 decrements by the step specified in the
 -inner_ip_dst_step argument.
 random - For all packets, the destination IP addresses are
 in random order.

 shuffle - For all packets, the destination IP addresses are
 in random order within a range that is determined by the
 values of -inner_ip_dst_count and -inner_ip_dst_step.
 fixed - The destination IP address is the same for all
 packets.

 You must set -vxlan to 1.

 -inner_ip_dst_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified inner IPv4
 destination IP address (-inner_ip_dst_addr) for subsequent
 packets. The modifier must be in IPv4 format. You must set -vxlan
 to 1.

 -inner_ip_dst_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of inner destination IPv4 addresses to
 generate for a stream. Possible values range from 1 to 2147483647.
 The default is 1.You must set -vxlan to 1.

 -inner_ip_src_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign the inner IP addresses
 for a particular stream. Possible values are:
 increment - For all packets, the source IP
 address increments by the step specified in the
 -inner_ip_src_step argument.
 decrement - For all packets, the source
 IP address decrements by the step specified in the
 -inner_ip_src_step argument.
 random - For of all packets, the source IP addresses are in
 random order.

 shuffle - For all packets, the source
 IP addresses are in random order within a range that is
 determined by the values of -inner_ip_src_count and
 -inner_ip_src_step.
 fixed - The source IP address is the same for all packets.

 You must set -vxlan to 1. 
Traffic Functions
1121

 -inner_ip_src_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified inner source IP
 address (-inner_ip_src_addr) for subsequent packets. The modifier
 must be in IPv4 format. You must set -vxlan to 1.

 -inner_ip_src_count
 Spirent Extension (for Spirent HLTAPI only).
 The number of inner source IPv4 addresses to generate for a stream.
 Possible values range from 1 to 2147483647. The default is 1. You
 must set -vxlan to 1.

 -inner_ip_gw
 Spirent Extension (for Spirent HLTAPI only).
 The starting gateway address for the inner IPv4 header. The value
 must be in IPv4 format. You must set -vxlan to 1.

 -inner_ip_gw_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the increment used to generate inner IPv4 gateway addresses.
 The value must be in IPv4 format. The default value is 0.0.0.0.
 You must set -vxlan to 1.

 -inner_ip_gw_count
 Spirent Extension (for Spirent HLTAPI only).
 Defines the number of gateway addresses for the streamblocks of
 inner Ethernet frames. You should specify this option when the
 stream is across different sub-interfaces. Possible values range
 from 1 to 2147483647. You must set -vxlan to 1.

 -inner_l2_encap
 Spirent Extension (for Spirent HLTAPI only).
 Identifies the type of Layer 2 encapsulation for the inner
 Ethernet frame. Possible values are ethernet_ii and
 ethernet_ii_vlan. The default value is ethernet_ii. You must set
 -vxlan to 1.

 -inner_ether_type
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the Ethernet protocol type for the inner Ethernet frame.
 Possible Values are described below:
 value Description
 0200 XEROX PUP
 0201 PUP Addr Trans
 0400 Nixdorf
 0600 XEROX NS IDP
 0660 DLOG
 0661 DLOG2
 0800 Internet IP
 0801 X.75 Internet
 0802 NBS Internet
 0803 ECMA Internet
 0804 Chaosnet
 0805 X.25 Level 3
 0806 ARP
 0807 XNS Compatibility
 0808 Frame Relay ARP
 8035 RARP
 86DD IPv6
 880B PPP
 8809 Slow Protocol
 8847 MPLS Unicast
 8848 MPLS Multicast
 8863 PPPoE Discovery
 8864 PPPoE Session
 8906 FCoE
 8914 FIP

 You must set -vxlan to 1.
Traffic Functions
1122

 -inner_mac_dst
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the inner destination MAC address defined in the inner
 Ethernet frame. The default is 00-00-00-00-00-00. You must set
 -vxlan to 1.

 -inner_mac_src
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the inner source MAC address defined in the inner
 Ethernet frame. The default value is 00-00-01-00-00-01.
 You must set -vxlan to 1.

 -inner_mac_dst_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign inner destination
 MAC addresses for a particular stream. Possible values are:
 fixed - The destination MAC address is the same for all
 packets.
 increment - For all packets, the destination MAC address
 increments by the step specified in the
 -inner_mac_dst_step argument.
 decrement - For all packets, the destination MAC address
 decrements by the step specified in the
 -inner_mac_dst_step argument
 random - For all packets, the MAC addresses are
 in random order.
 shuffle - For all packets, the destination MAC addresses are in
 random order within a range that is determined by the
 values of -inner_mac_dst_count and -inner_mac_dst_step.
 This attribute is mandatory for each stream. You must set -vxlan to 1.

 -inner_mac_dst_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified inner destination
 MAC address (-inner_mac_dst) for subsequent packets. Possible
 values range from 1 to 255, expressed as a power-of-two
 value (1,2,4,8,16...). The default is 1. You must set -vxlan to 1.

 -inner_mac_dst_count
 Spirent Extension (for Spirent HLTAPI only).
 The number of inner destination MAC addresses to generate for a
 particular stream. Possible values are 1 to 2147483647. The
 default is 1. You must set -vxlan to 1.

 -inner_mac_src_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI will assign the inner source MAC
 addresses for a particular stream. Possible values are:
 fixed - The source MAC address is the same for all packets.
 increment - For all packets, the source MAC address
 increments by the step specified in the -inner_mac_src_step
 argument.
 decrement - For all packets, the source MAC address
 decrements by the step specified in the -inner_mac_src_step
 argument
 random - For all packets, the MAC addresses are
 in random order.
 shuffle - For all packets, the source MAC addresses are in
 random order within a range that is determined by the values
Traffic Functions
1123
 of -inner_mac_src_count and -inner_mac_src_step.

 You must set -vxlan to 1.
 -inner_mac_src_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified inner source MAC
 address (-mac_src) for subsequent packets. Possible values
 range from 1 to 255, expressed as a power-of-two value
 (1,2,4,8,16...). The default is 1. You must set -vxlan to 1.

 -inner_mac_src_count
 Spirent Extension (for Spirent HLTAPI only).
 The number of inner source MAC addresses to generate
 for a particular stream. Possible values range from 1 to
 2147483647. The default is 1. You must set -vxlan to 1.

 -inner_vlan_id
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN ID for the inner Ethernet frame. Possible
 values range from 0 to 4094. You must set -vxlan to 1 and
 -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the canonical format indicator (CFI) value
 is set for the inner VLAN header. Possible values are 0 or
 1. You must set -vxlan to 1 and -inner_l2_encap to
 ethernet_ii_vlan.

 -inner_vlan_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the specified port.
 Possible values range from 0 to 7. You can also enter a list of
 priority values. The default is 1. You must set -vxlan to 1 and
 -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_id_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter will assign VLAN tags to
 packets in a particular stream. Possible values are:
 fixed - The VLAN ID is the same for all packets.
 increment - For all packets, the VLAN tag ID increments by
 the step specified in the -inner_vlan_id_step argument.
 decrement - For all packets, the VLAN tag ID decrements by
 the step specified in the -inner_vlan_id_step argument.
 random - For all packets, the VLAN tag IDs will be in random
 order.

 shuffle - For all packets, the VLAN tag IDs are in random
 order within a range that is determined by the values
 of -inner_vlan_id_count and -inner_vlan_id_step.
 You must set -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.


 -inner_vlan_id_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified VLAN ID
 (-inner_vlan_id) for subsequent packets in inner Ethernet frames.
 Possible values range from 0 to 4095.
 The default is 0. You must set -vxlan to 1 and -inner_l2_encap to
 ethernet_ii_vlan.
 -inner_vlan_id_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN tags to generate for the stream.
Traffic Functions
1124
 Possible values range from 1 to 4096. The default is 1. You must
 set -vxlan to 1, -inner_vlan_id_mode to increment and
 -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_id_repeat
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of times an VLAN ID should be repeated,
 before the step (-inner_vlan_id_step) is applied to the VLAN ID
 for incrementing. The default is 0. You must set -vxlan to 1 and
 -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_priority_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent HLTAPI assigns VLAN priority to packets in
 In a particular stream. Possible values are:
 fixed - The VLAN priority is the same for all packets.
 increment - For all packets, the VLAN priorities increment by the
 step specified by -inner_vlan_priority_step.
 decrement - For all packets, the VLAN priorities decrement
 by the step specified by -inner_vlan_priority_step.
 random - For all packets, the VLAN priorities are in random order.

 shuffle - For all packets, the VLAN priorities are in
 random order within a range that is determined by the
 values of -inner_vlan_priority_count and
 -inner_vlan_priority_step.

 You must set -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_priority_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified VLAN priority
 (-inner_vlan_user_priority) for subsequent packets.
 Possible values range from 0 to 4095. The default is 0. You must
 set -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_priority_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN priorities to generate for the
 stream. Possible values range from 1 to 4096. The
 default is 1. You must set -vxlan to 1, -inner_vlan_id_mode to
 increment and -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_tpid
 Spirent Extension (for Spirent HLTAPI only).
 The type of VLAN in the inner Ethernet frame header. Possible values
 range from 0 to 65535. The default is 33024. You must
 set -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_id_outer
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN ID for a particular outer header in the inner
 Ethernet frame. Possible values range from 0 to 4095. You must set
 -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_outer_cfi
 Spirent Extension (for Spirent HLTAPI only).
 Specifies whether the CFI value is set for the VLAN outer header
 in the inner Ethernet frame. Possible values are 0 or 1. You must
 set -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_outer_user_priority
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the VLAN priority to assign to the outer header in the
 inner Ethernet frame. Possible values range from 0 to 7. You can
 also enter a list of priority values. The default is 0. You must
 set -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.
Traffic Functions
1125
 -inner_vlan_id_outer_mode
 Spirent Extension (for Spirent HLTAPI only).
 Specifies how Spirent TestCenter will assign VLAN tags to
 packets in the specified outer header. Possible values are:
 fixed - The outer VLAN ID is the same for all packets.
 increment - For all packets, the outer VLAN tag ID
 increments by the step specified in the
 -inner_vlan_id_outer_step argument.
 decrement - For all packets, the outer VLAN tag ID
 decrements by the step specified in the
 -inner_vlan_id_outer_step argument.
 random - For all packets, the outer VLAN tag IDs will be in
 random order.

 shuffle - For all packets, the outer VLAN tag IDs are in
 random order within a range that is determined by the
 values of -inner_vlan_id_outer_count and
 -inner_vlan_id_outer_step.
 You must set -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_id_outer_step
 Spirent Extension (for Spirent HLTAPI only).
 The amount by which to increment the specified outer VLAN ID
 (-inner_vlan_id_outer) for subsequent packets. Possible values
 range from 0 to 4095 (see below). The default is 0. You must set
 -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.
 -inner_vlan_id_outer_count
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of VLAN tags to generate for the outer
 header. Possible values range from 1 to 4096. The default is 1.
 You must set -vxlan to 1, -vlan_id_outer_mode to increment and
 -inner_l2_encap to ethernet_ii_vlan.

 -inner_vlan_id_outer_repeat
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the number of times an outer VLAN ID should be repeated,
 before the step (-inner_vlan_id_outer_step) is applied to the
 outer VLAN ID for incrementing. The default is 0. You must set
 -vxlan to 1 and -inner_l2_encap to ethernet_ii_vlan.
 -inner_vlan_outer_tpid
 Spirent Extension (for Spirent HLTAPI only).
 The type of outer VLAN in the inner Ethernet frame header of
 traffic. Possible values range from 0 to 65535. The default is
 33024. You must set -vxlan to 1 and -inner_l2_encap to
 ethernet_ii_vlan.

 -inner_qinq_incr_mode
 Spirent Extension (for Spirent HLTAPI only).
 Determines which VLAN ID to increment first.
 Possible values are:
 inner - Increment the inner VLAN ID before the outer VLAN ID
 outer - Increment the outer VLAN ID before the inner VLAN ID
 both - Increment both the inner and outer VLAN ID at the
 same time
 The default is both. You must set -vxlan to 1 and -inner_l2_encap
 to ethernet_ii_vlan.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
Traffic Functions
1126
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -ip_dst_block_count
 -ip_dst_block_step
 -qinq_incr_mode
 -port_handle2
 -bidirectional
 -mac_dst2
 -mac_src2
 -mac_dst2_mode
 -mac_dst2_step
 -mac_dst2_count
 -mac_src2_mode
 -mac_src2_step
 -mac_src2_count
 -stream_id
 -vpi
 -vpi_step
 -vpi_count
 -vci
 -vci_step
 -vci_count

 802.2 and SNAP Header
 -ipx_header
 -xns_header
 -appletalk_header
 -aarp_header
 -decnet_header
 -vines_header
 -custom_llc

 RTP Header
 -rtp_csrc_count
 -ssrc
 -rtp_payload_type
 -timestamp_initial_value
 -timestamp_increment
 -csrc_list

 ISIS Header
 -isis_pdu_header_len
 -isis_version
 -isis_system_id_len
 -isis_pdu_type
 -isis_version2
 -isis_reserved
 -isis_max_area_addr
 -isis_reserved_circuit_type
 -isis_source_id
 -isis_holder_timer
 -isis_pdu_len
 -isis_reserved_bit
 -isis_priorit
 -isis_lan_id

 ICMPv6 Header
 Arguments prefixed by -icmpv6_***

 VXLAN Header
 -vxlan
 -vni
 -peer_vtep_ipv4_addr
 -ipv4_multicast_group_addr
 Arguments prefixed by -inner_***

 Notes:
 1. Save as HLTAPI only supports streamblock creating at port level. 
Traffic Functions
1127
 2. When configuring a streamblock that includes the GRE header in Spirent
 TestCenter, select GRE for the Protocol field in the IPv4 header (the IPv4
 header before GRE) instead of using the default value, or you will have to
 manually configure the GRE header in the generated script.

 3. For header fields that are filled with <auto> + value in Spirent TestCenter,
 you need to manually edit that field instead of using the automatic value.
 This way the value will be reflected in the script generated by Save to High
 Level API.
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -fcs
 -inter_burst_gap
 -inter_stream_gap
 -ip_cu
 -ip_dst_skip_broadcast
 -ip_dst_skip_multicast
 -ip_fragment_last
 -ip_src_skip_broadcast
 -ip_src_skip_multicast
 -ipv6_checksum
 -ipv6_frag_id
 -ipv6_frag_more_flag
 -ipv6_frag_next_header
 -ipv6_frag_offset
 -l3_gaus1_avg
 -l3_gaus2_avg
 -l3_gaus3_avg
 -l3_gaus4_avg
 -l3_gaus1_halfbw
 -l3_gaus1_weight
 -l3_gaus2_halfbw
 -l3_gaus2_weight
 -l3_gaus3_halfbw
 -l3_gaus3_weight
 -l3_gaus4_halfbw
 -l3_gaus4_weight
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 stream_id
 The handle that identifies the traffic stream created by the
 sth::traffic_config function.
 stream_id.$port_handle
 The stream identifier for traffic associated with
 $port_handle. This ID is returned only if you generated
 bidirectional traffic.
 stream_id.$port_handle2
 The stream identifier for traffic associated with
 $port_handle2. This ID is returned only if you generated
 bidirectional traffic.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::traffic_config function sets up a traffic stream block on a
 Spirent HLTAPI port. Use this function to create new stream blocks,
 modify existing stream blocks, remove or disable stream blocks, or reset
 traffic stream blocks. (Use the -mode argument to specify the type of
 operation, and see the Notes for this section for more information.)
 When you create a stream block on a port, the Spirent HLTAPI generator
Traffic Functions
1128
 uses that port to transmit traffic stream blocks. You can also use a single
 call to the sth::traffic_config function to configure bidirectional
 traffic between two ports. (See the description of the -bidirectional
 argument.)
 To configure traffic, use the arguments of the sth::traffic_config
 function to specify values for fields of an IP datagram. When you start
 traffic during the test, Spirent HLTAPI generates packets containing
 protocol headers based on the argument values. The arguments provide
 information such as source address, destination address, ToS, Layer 3
 protocol, Layer4 protocol, IP bit flags, and other datagram values.
 For each traffic header:
 - You specify a source and destination. For Ethernet headers, you supply
 a MAC address; for IP protocols, you specify IPv4 or IPv6 addresses;
 for TCP and UDP headers, you supply port numbers; for
 ARP headers, you can specify the source and destination address
 as either a MAC address or an IP address, which depends on the
 type of ARP packets.
 - You can specify a count and an increment to use a range of addresses
 or port numbers for sources and destinations. When you use ranges,
 Spirent HLTAPI generates packets based on permutations of the
 address and port number sets. You are limited in the number of ranges
 that you can specify.
 Spirent HLTAPI supports up to a maximum of 2000 streamBlocks. There is
 one stream under each streamBlock. Each stream has an adjustable frame
 length distribution and transmit rate setting.
 Spirent HLTAPI includes the capability of stacking L3 headers in the
 stream block definition (-mode create). Currently, the HLTAPI supports two
 levels of stacking for L3: 1) the "inner" type, which is defined by the L3
 protocol (see -l3_protocol and the arguments that apply to it), and 2) the
 "outer" type, which is defined by the L3 outer protocol (see
 -l3_outer_protocol and the arguments that apply to it). The outer header
 definition is created from the arguments containing "outer" in their names.
 Here is an example showing how to stack headers in a stream
 definition (-mode create) using both an inner and outer header:
 sth::traffic_config
 -mode create \
 -port_handle $port1 \
 -enable_stacking true \
 -length_mode fixed \
 -l3_length 256 \
 # general switches end here
 -l2_encap Ethernet_ii \
 .
 ..
 -l3_protocol ipv4 \
 -ip_src_addr 1.1.1.1 \
 -ip_dst_addr 3.3.3.3 \
 -l3_outer_protocol ipv4 \
 -ip_dst_outer_addr "2.2.2.2" \
 -ip_outer_protocol 10 \
 -ip_hdr_outer_length 3 \
 -ip_outer_id 0 \
 -ip_outer_checksum 100 \
 -ip_outer_ttl 16 \
 -ip_fragment_outer_offset 12
 ...
 -l2_encap Ethernet_ii \
 ...
 The example above creates two L3 headers under the stream block .
 To modify attributes in a header (-mode modify), you must identify the
 specific attribute of the specific header that you added to the traffic
Traffic Functions
1129
 stream during -mode create. Use the dot (".") notation to identify the
 attribute and header using one of the following two methods:
 1) Append the dot to the attribute name to identify the header to
 modify. For example, to modify the second Layer 2 header, you can
 identify it as "l2_encap.2". Likewise, to modify the third Layer 3
 header, you can identify it as "l3_protocol.3". Here is an
 example:
 sth::traffic_config
 -mode modify \
 -stream_id 50 \
 -l2_encap.2 ethernet_ii \
 -mac_src aa.bb.cc.dd.ee.ff \ # the new value of
 # source MAC address
 ...
 -l3_protocol.3 ipv4 \
 -src_ip_addr 10.10.1.1 \
 ...
 2) Append the dot to the value of the attribute to identify the header
 to modify. For example, to modify the second Layer 2 header, you
 can identify it as "Ethernet_ii.2". Likewise, to modify the third
 Layer 3 header, you can identify it as "ipv4.3". Here is an
 example:
 sth::traffic_config
 -mode modify \
 -stream_id 50 \
 -l2_encap ethernet_ii.2 \
 -mac_src aa.bb.cc.dd.ee.ff \ # the new value of
 # source MAC address
 .
 -l3_protocol ipv4.3 \
 -src_ip_addr 10.10.1.1 \
 .
 For both PPPoX and DHCP bound traffic, for subsequent
 connects and disconnect you do not have to delete and re-
 create traffic when adding new sessions. To disconnect and
 re-connect multiple PPPoX or DHCP sessions, you must stop
 and then restart traffic AFTER all new sessions have
 connected so the traffic configuration can get the newly
 updated session information. If you do not stop traffic, the
 old session information will not be replaced by the new session information.
Examples:
 #### HLTAPI for Tcl ####
 The following code fragment configures Ethernet traffic for a single
 port and checks the returned key list to determine the status. The call to
 traffic_config uses create mode to set up an Ethernet II header, supply
 source and destination MAC addresses, and generate a range of addresses
 for stream packets. The L2 encapsulation mode is ethernet_ii. Increment mode
 is used with a step value of 2, and a count of 3 to generate a stream
 containing packets with three unique source MAC addresses (0.0.0.0.0.1,
 0.0.0.0.0.3, and 0.0.0.0.0.5).
 set returnKlist [sth::traffic_config -mode create \
 -port_handle $p0 \
 -l2_encap ethernet_ii \
 -mac_src 0.0.0.0.0.1 \
 -mac_dst 0.0.0.0.0.3 \
 -mac_src_mode increment \
 -mac_src_step 2 \
 -mac_src_count 3];
 keylget returnKlist status iStatus;
 if {$iStatus == 0} {
 keylget returnKlist log result;
 puts $result;
 } else {
 keylget returnKlist stream_id streamID;
Traffic Functions
1130
 puts "stream handle 1 = $streamID";
 }
 On success:
 {stream_id 108} {status 1} {log {}}
 On failure:
 {status 0} {log {<errorMsg>}}
 The following example creates a stream with only one Ethernet PDU.
 sth::traffic_config -port_handle $port1\
 -mode create \
 -stream_id 1 \
 -l2_encap ethernet_ii\

 {status 1} {stream_id streamblock1}
 The following example sends traffic from 1 source address to 100 destination
 addresses across 10 VLANs.
 sth::traffic_config -mode create \
 -port_handle port1 \
 -rate_pps 1000 \
 -l2_encap ethernet_ii_vlan \
 -l3_protocol ipv4 \
 -ip_src_addr 10.0.0.11 \
 -ip_src_count 1 \
 -ip_src_mode fixed \
 -mac_src 01:01:01:01:01 \
 -mac_discovery_gw 10.0.0.1\
 -ip_dst_addr 20.0.0.12 \
 -ip_dst_count 100 \
 -ip_dst_mode increment \
 -ip_dst_block_count 10 \
 -ip_dst_block_step 0.0.1.0 \
 -ip_dst_step 0.0.0.1 \
 -l3_length 128 \
 -length_mode fixed \
 -transmit_mode continuous \
 -enable_stream 0 \
 -vlan_id 200 \
 -vlan_id_count 10 \

 {stream_id streamblock1} {status 1}
 The following example configures PPPoE traffic.
 ##
 # Access PPPoE traffic example
 ##
 # Configure PPPoX which will return the handle that will be used later to
 # configure resolved traffic both destined for and generated from the PPPoX
 #clients created below.
 set pppox_rL [sth::pppox_config \
 -mode create
 -port_handle port1 \
 -encap ethernet_ii \
 -protocol pppoe \
 -num_sessions 1 \
 -auth_mode chap \
 -mac_addr 00:10:94:01:00:01 \
 -username cisco \
 -password cisco \
 ]
 {status 1} {port_handle port1} {handles host2} {pppoe_port
 pppoxportconfig1} {pppoe_session pppoeclientblockconfig1} {procName
 sth::pppox_config}
 # Configure traffic generated from IP address 22.23.0.100, destined for all
Traffic Functions
1131
 # connected PPPoX clients associated with the handle returned in "pppox_rL".
 # The following example assumes that the handle passed into
 # -downstream_traffic_src_list was retrieved from a successful call to
 # sth::pppox_config and that all PPPoE sessions are currently connected.
 # Note: Access traffic requires that -ppp_link be set to 1 in order to use
 # -downstream_traffic_src_list. The parameter -mac_dst is a mandatory
 # parameter for Access traffic from a static port running no PPPoE
 # emulation and that will terminate at the PPPoX client.
 set traffic_config_rL [sth::traffic_config \
 -mode create \
 -port_handle port2 \
 -l2_encap ethernet_ii \
 -mac_src 00:03:a0:10:92:AA \
 -mac_dst 00:03:a0:10:92:78 \
 -rate_pps 50 \
 -ppp_link 1 \
 -downstream_traffic_src_list [keylget pppox_rL handles] \
 -l3_protocol ipv4 \
 -l3_length 256 \
 -length_mode fixed \
 -ip_src_addr 22.23.0.100 \
 ]
 {status 1} {stream_id streamblock1}
 # Configure traffic generated from all connected PPPoX clients associated
 with the handle returned in "pppox_rL" and terminating at the IP address
 22.23.0.100.
 # The following example assumes that the handle passed into
 # -ppp_link_traffic_src_list was retrieved from a successful call to
 # sth::pppox_config and that all PPPoE sessions are currently connected.
 # Note: Access traffic requires that -ppp_link be set to 1 in order to use
 # -ppp_link_traffic_src_list.
 set traffic_config_rL [sth::traffic_config \
 -mode create \
 -port_handle port1 \
 -rate_pps 1 \
 -l2_encap ethernet_ii_pppoe \
 -ppp_link 1 \
 -ppp_link_traffic_src_list [keylget pppox_rL handles] \
 -l3_protocol ipv4 \
 -l3_length 256 \
 -length_mode fixed \
 -ip_dst_addr 22.23.0.100 \
 ]
 {status 1} {stream_id streamblock2}
 The following example configures a 802.2 raw stream
 sth::traffic_config -mode create\
 -port_handle $port1 \
 -l2_encap ethernet_8022 \
 -rate_pps 1000 \
 -mac_src 11:11:11:11:11:11 \
 -mac_dst 22:22:22:22:22:22 \
 -llc_dsap FE \
 -llc_ssap FE \
 -llc_control 02 \
 {status 1} {stream_id streamblock1}

 The following example configures IP traffic over 802.2 frames across 3 VLANS.
 sth::traffic_config -mode create\
 -port_handle $port1 \
 -l2_encap ethernet_8022_vlan \
 -mac_src 11:11:11:11:11:11 \
 -mac_dst 22:22:22:22:22:22 \
 -transmit_mode continuous \
 -rate_pps 1000\
 -l3_protocol ipv4\
 -ip_src_addr 10.0.0.11\
 -ip_dst_addr 10.0.0.1 \
Traffic Functions
1132
 -length_mode fixed \
 -l3_length 180 \
 -vlan_id 1 \
 -vlan_id_count 3 \
 -vlan_id_step 1 \
 -vlan_user_priority {1 2 3} \
 {status 1} {stream_id streamblock1}
 The following example configures an IPX header over 802.2 frames
 sth::traffic_config -mode create\
 -port_handle $port1 \
 -l2_encap ethernet_8022 \
 -llc_dsap E0 \
 -llc_ssap E0 \
 -llc_control 03 \
 -ipx_header 123456789012345678 \
 -mac_src 11:11:11:11:11:11 \
 -mac_dst 22:22:22:22:22:22 \
 -transmit_mode continuous \
 -rate_pps 500 \

 {status 1} {stream_id streamblock1}
 The following example configures XNS header over 802.2 frames:
 sth::traffic_config -mode create\
 -port_handle $port1 \
 -l2_encap ethernet_8022 \
 -llc_dsap 80 \
 -llc_ssap 80 \
 -llc_control 03 \
 -xns_header 123456789012345678 \
 -mac_src 11:11:11:11:11:11 \
 -mac_dst 22:22:22:22:22:22 \
 -transmit_mode continuous \
 -rate_pps 500 \
 {status 1} {stream_id streamblock1}
# To configure ICMPv6 Destination Unreachable message type in -mode create:
 # [icmpv6_type 1] Destination Unreachable
 set ret [sth::traffic_config \
 -mode create\
 -port_handle $hport1\
 -l2_encap ethernet_ii\
 -l3_protocol ipv6\
 -ipv6_src_addr 2000::2\
 -ipv6_traffic_class 0\
 -ipv6_dst_addr 2000::1\
 -ipv6_next_header 58\
 -l4_protocol icmpv6\
 -icmpv6_type 1\
 -icmpv6_code 1\
 -icmpv6_checksum 0\
 -icmpv6_unused 3\
 -icmpv6_ip_data 4321\
 -icmpv6_ip_src_addr 2002::15\
 -icmpv6_ip_dst_addr 2002::14\
 -icmpv6_ip_hop_limit 5\
 -icmpv6_ip_traffic_class 6\
 -icmpv6_ip_next_header 59\
 -icmpv6_ip_flow_label 3333\
 -icmpv6_ip_length 0\
 -icmpv6_ip_gateway 2003::44\
 -icmpv6_ip_version 6]
 # To create one stream with the IGMPv3 Report header:
 Set -mode to create, and specify -port_handle to set the port under which the
Traffic Functions
1133
 stream will be creaed. If -igmp_multicast_addr is not set, the default value is
 255.0.0.1. In the returned value, use igmpgrprec_handle to get the created group
 record in the IGMPv3 Report header.

 set ret [sth::traffic_config -mode create\
 -port_handle port1\
 -name igmpv3_report_olist_scale1\
 -l4_protocol igmp \
 -igmp_msg_type report\
 -igmp_version 3\
 -igmp_multicast_src {196.168.1.10 196.168.1.11}\
 -igmp_multicast_addr 196.168.1.2 \
 -igmp_record_type 5]
 #if online, {igmpgrprec_handle grouprecord1} {stream_id streamblock1} {status 1}
 #if offline,{igmpgrprec_handle grouprecord1} {stream_id streamblock1} {status 1}
 # To add one IGMPv3 Report's group record to the created stream:
 Set -mode to modify, set -stream_id, but do not specify -igmpv3_grprechandle.
 If -igmp_multicast_addr is not specified, the default value is 255.0.0.1.
 In the returned value, use igmpgrprec_handle to get the
 created group record in igmpv3report header.

 set ret [sth::traffic_config -mode modify\
 -stream_id $mystream\
 -l4_protocol igmp \
 -igmp_msg_type report\
 -igmp_version 3\
 -igmp_multicast_src {196.168.4.10 196.168.4.11}\
 -igmp_record_type 4]
 #if online, {igmpgrprec_handle grouprecord3_anon_1008} {status 1}
 #if offline, {igmpgrprec_handle grouprecord3} {status 1}

 # To modify a specified IGMPv3 Report's group record in one stream:
 Set -mode to modify, specify -stream_id, and set -igmpv3_grprechandle to the
 value returned earlier. If not specified, the value of -igmp_multicast_addr
 remains to be the one configured when you added the group record.

 set ret [sth::traffic_config -mode modify\
 -stream_id $mystream\
 -igmpv3_grprechandle $myhandlename \
 -l4_protocol igmp \
 -igmp_msg_type report\
 -igmp_version 3\
 -igmp_multicast_src {196.168.2.10}\
 -igmp_multicast_addr 196.168.22.2 \
 -igmp_record_type 3]

 {status 1}
 # To add one IGMPv3 query message to the created stream:
 set streamblock_ret1 [::sth::traffic_config \
 -mode create\
 -port_handle $port1\
 -l2_encap ethernet_ii\
 -l3_protocol ipv4\
 -l4_protocol igmp\
 -l3_length 110\
 -name StreamBlock_1\
 -fill_type constant\
 -fcs_error 0\
 -fill_value 0\
 -traffic_state 1\
 -high_speed_result_analysis 1\
 -length_mode fixed\
 -disable_signature 0\
 -enable_stream_only_gen 1\
 -igmp_s_flag 1\
Traffic Functions
1134
 -igmp_qqic 0\
 -igmp_max_response_time 100\
 -igmp_version 3\
 -igmp_type 11\
 -igmp_msg_type query\
 -igmp_qrv 0\
 -igmp_group_addr 225.0.0.1\
 -igmp_multicast_src {192.0.0.1 192.0.0.2 192.0.0.3} \
 {igmpgrprec_handle grouprecord1} {stream_id streamblock1} {status 1}
 To modify the IGMPv3 query message just created:
 keylget streamblock_ret1 stream_id mystream
 keylget streamblock_ret1 igmpgrprec_handle myhandlename
 set streamblock_ret2 [::sth::traffic_config \
 -mode modify\
 -port_handle $port1\
 -l4_protocol igmp\
 -stream_id $mystream \
 -igmpv3_grprechandle $myhandlename
 -igmp_msg_type query\
 -igmp_version 3\
 -igmp_multicast_src {192.0.0.6 192.0.0.7 192.0.0.8} \
 {status 1}
 To configure a VXLAN header:
 set traffic_results [sth::traffic_config\
 -mode create\
 -port_handle $port2\
 -bidirectional 0\
 -l3_protocol ipv4\
 -inner_l3_protocol ipv4\
 -ip_src_addr 10.10.10.11\
 -ip_dst_addr 10.10.10.10\
 -inner_ip_src_addr 11.11.11.12 \
 -inner_ip_dst_addr 11.11.11.11\
 -inner_ip_gw 11.11.11.11\
 -l4_protocol udp\
 -udp_src_port 456\
 -udp_dst_port 4789\
 -mac_src 40:01:02:03:04:05 \
 -mac_dst 30:01:02:03:04:05\
 -inner_mac_src 00:01:02:03:04:06\
 -inner_mac_dst 00:01:02:03:04:05 \
 -l2_encap ethernet_ii_vlan \
 -vlan_id 11\
 -inner_vlan_id 10\
 -inner_l2_encap ethernet_ii_vlan\
 -vxlan 1\
 -vni 2\
 -auto_select_udp_port 1\
 -ipv4_multicast_group_addr 225.0.0.1\
 -vlan_user_priority 2\
 -vlan_cfi 1\
 -inner_vlan_id_mode increment\
 -inner_vlan_user_priority 4\
 -inner_vlan_cfi 1\
 ]
 #### HLTAPI for Python ####
 To create one Ethernet 802.3 with 802.2 and SNAP header:
 streamblock_ret1 = sth.traffic_config (
 mode = 'create',
 port_handle = port_handle[0],
 l2_encap = 'ethernet_8023_snap',
 l3_protocol = 'ipv4',
Traffic Functions
1135
 ip_id = '0',
 ip_src_addr = '192.85.1.2',
 ip_dst_addr = '192.0.0.1',
 ip_ttl = '255',
 ip_hdr_length = '5',
 ip_protocol = '253',
 ip_fragment_offset = '0',
 ip_mbz = '0',
 ip_precedence = '0',
 ip_tos_field = '0',
 mac_src = '00:10:94:00:00:02',
 mac_dst = '00:00:01:00:00:01',
 llc_control = '03',
 llc_ssap = 'AA',
 llc_dsap = 'AA',
 snap_oui_id = '00FFFF',
 snap_ether_type = '88B5',
 enable_control_plane= '0',
 l3_length = '128',
 name = 'StreamBlock_83',
 fill_type = 'constant',
 fcs_error = '0',
 fill_value = '0',
 traffic_state = '1',
 high_speed_result_analysis= '1',
 length_mode = 'fixed',
 disable_signature = '0',
 enable_stream_only_gen= '1',
 pkts_per_burst = '1',
 inter_stream_gap_unit= 'bytes',
 burst_loop_count = '30',
 transmit_mode = 'multi_burst',
 inter_stream_gap = '12',
 rate_percent = '10',
 mac_discovery_gw = '192.85.1.1');

 {'status': '1', 'stream_id': 'streamblock1'}

 # hlapiGen_streamblock_ipv6_extention_header

 streamblock_ret1 = sth.traffic_config (
 mode = 'create',
 port_handle = port_handle[0],
 l2_encap = 'ethernet_ii',
 l3_protocol = 'ipv6',
 ipv6_routing_res = '006f',
 ipv6_auth_seq_num = '1',
 ipv6_auth_payload_len= '0',
 ipv6_auth_string = '0000abcd',
 ipv6_auth_spi = '1',
 ipv6_frag_more_flag = '0',
 ipv6_frag_id = '0',
 ipv6_frag_offset = '1',
 ipv6_src_addr = '2000::2',
 ipv6_traffic_class = '0',
 ipv6_dst_addr = '2000::2',
 ipv6_next_header = '59',
 ipv6_length = '0',
 ipv6_flow_label = '7',
 ipv6_hop_limit = '255',
 mac_src = '00:10:94:00:00:01',
 ether_type = '88B5',
 mac_dst = '00:10:94:00:00:02',
 enable_control_plane= '0',
 l3_length = '110',
 name = 'StreamBlock_4-3',
 fill_type = 'constant',
 fcs_error = '0',
 fill_value = '0',
 traffic_state = '1',
 high_speed_result_analysis= '1',
Traffic Functions
1136
 length_mode = 'fixed',
 disable_signature = '0',
 enable_stream_only_gen= '1',
 pkts_per_burst = '1',
 inter_stream_gap_unit= 'bytes',
 burst_loop_count = '30',
 transmit_mode = 'continuous',
 inter_stream_gap = '12',
 rate_percent = '10',
 ipv6_hop_by_hop_options= ['type:','router_alert','length:2','alert_type:mld'],
 ipv6_destination_options= ['type:padn','length:1','value:ab'],
 ipv6_extension_header=['routing','authentication',
 'fragment','hop_by_hop','destination'],
 mac_discovery_gw = '::');

 # hlapiGen_streamblock_vlan_pri_modifier_CR1800
 streamblock_ret1 = sth.traffic_config (
 mode = 'create',
 port_handle = port_handle[0],
 l2_encap = 'ethernet_ii_vlan',
 l3_outer_protocol = 'ipv4',
 l3_protocol = 'ipv4',
 ip_outer_id = '0',
 ip_outer_protocol = '253',
 ip_fragment_outer_offset= '0',
 ip_dst_outer_addr = '193.85.1.5',
 ip_hdr_outer_length = '5',
 ip_src_outer_addr = '192.85.1.5',
 ip_outer_ttl = '255',
 ip_id = '0',
 ip_src_addr = '192.85.1.2',
 ip_dst_addr = '192.0.0.1',
 ip_ttl = '255',
 ip_hdr_length = '5',
 ip_protocol = '253',
 ip_fragment_offset = '0',
 ip_mbz = '0',
 ip_precedence = '0',
 ip_tos_field = '0',
 vlan_priority_count = '10',
 vlan_priority_step = '001',
 vlan_priority_mode = 'increment',
 ip_src_outer_mode = 'increment',
 ip_src_outer_count = '1',
 ip_src_outer_step = '0.0.0.1',
 vlan_id_repeat = '0',
 vlan_id_mode = 'increment',
 vlan_id_count = '1',
 vlan_id_step = '1',
 ip_dst_outer_count = '1',
 ip_dst_outer_step = '0.0.0.1',
 ip_dst_outer_mode = 'increment',
 ip_src_count = '1',
 ip_src_step = '0.0.0.1',
 ip_src_mode = 'increment',
 ip_dst_count = '1',
 ip_dst_step = '0.0.0.1',
 ip_dst_mode = 'increment',
 ip_tos_count = '1',
 ip_tos_step = '0',
 ip_tos_mode = 'increment',
 mac_src_count = '1',
 mac_src_mode = 'increment',
 mac_src_step = '2',
 mac_src = '00:10:94:00:00:05',
 ether_type = '88B5',
 mac_dst = '00:00:01:00:00:01',
 vlan_cfi = '0',
 vlan_tpid = '33024',
 vlan_id = '100',
 vlan_user_priority = '7',
Traffic Functions
1137
 enable_control_plane= '0',
 l3_length = '106',
 name = 'StreamBlock_4-2',
 fill_type = 'constant',
 fcs_error = '0',
 fill_value = '0',
 traffic_state = '1',
 high_speed_result_analysis= '1',
 length_mode = 'fixed',
 disable_signature = '0',
 enable_stream_only_gen= '1',
 pkts_per_burst = '1',
 inter_stream_gap_unit= 'bytes',
 inter_stream_gap = '12',
 rate_percent = '10',
 mac_discovery_gw = '192.85.1.1',
 enable_stream = 'false');

 Sample Output for the examples above:
 {'status': '1', 'stream_id': 'streamblock1'}

 ##hlapiGen_streamblock_igmpv3report
 streamblock_ret1 = sth.traffic_config (
 mode = 'create',
 port_handle = port_handle[0],
 l2_encap = 'ethernet_ii',
 l4_protocol = 'igmp',
 igmp_version = '3',
 igmp_type = '22',
 igmp_msg_type = 'report',
 mac_src = '00:10:94:00:00:02',
 ether_type = '88B5',
 mac_dst = '00:00:01:00:00:01',
 enable_control_plane= '0',
 l3_length = '110',
 name = 'igmpv3_report_olist_scale1',
 fill_type = 'constant',
 fcs_error = '0',
 fill_value = '0',
 traffic_state = '1',
 high_speed_result_analysis= '1',
 length_mode = 'fixed',
 disable_signature = '0',
 enable_stream_only_gen= '1',
 pkts_per_burst = '1',
 inter_stream_gap_unit= 'bytes',
 burst_loop_count = '30',
 transmit_mode = 'continuous',
 inter_stream_gap = '12',
 rate_percent = '10',
 igmp_record_type = ['5','6'],
 igmp_multicast_addr = ['255.0.0.1','255.0.0.1'],
 igmp_multicast_src = ['196.168.1.10','196.168.2.11']);

 Sample Output:
 {'status': '1', 'stream_id': 'streamblock1', 'igmpgrprec_handle':
 'grouprecord1_anon_1290 grouprecord2_anon_1294'}

 #### HLTAPI for Perl ####
 # hlapiGen_raw_stream_8023snap
 my %streamblock_ret1 = sth::traffic_config (
 mode => 'create',
 port_handle => "$hport[1]",
 l2_encap => 'ethernet_8023_snap',
 l3_protocol => 'ipv4',
 ip_id => '0',
 ip_src_addr => '192.85.1.2',
 ip_dst_addr => '192.0.0.1',
 ip_ttl => '255',
Traffic Functions
1138
 ip_hdr_length => '5',
 ip_protocol => '253',
 ip_fragment_offset => '0',
 ip_mbz => '0',
 ip_precedence => '0',
 ip_tos_field => '0',
 mac_src => '00:10:94:00:00:02',
 mac_dst => '00:00:01:00:00:01',
 llc_control => '03',
 llc_ssap => 'AA',
 llc_dsap => 'AA',
 snap_oui_id => '00FFFF',
 snap_ether_type => '88B5',
 enable_control_plane=> '0',
 l3_length => '128',
 name => 'StreamBlock_83',
 fill_type => 'constant',
 fcs_error => '0',
 fill_value => '0',
 traffic_state => '1',
 high_speed_result_analysis=> '1',
 length_mode => 'fixed',
 disable_signature => '0',
 enable_stream_only_gen=> '1',
 pkts_per_burst => '1',
 inter_stream_gap_unit=> 'bytes',
 burst_loop_count => '30',
 transmit_mode => 'multi_burst',
 inter_stream_gap => '12',
 rate_percent => '10',
 mac_discovery_gw => '192.85.1.1');

 # hlapiGen_streamblock_igmpv3report
 my %streamblock_ret1 = sth::traffic_config (
 mode => 'create',
 port_handle => "$hport[1]",
 l2_encap => 'ethernet_ii',
 l4_protocol => 'igmp',
 igmp_version => '3',
 igmp_type => '22',
 igmp_msg_type => 'report',
 mac_src => '00:10:94:00:00:02',
 ether_type => '88B5',
 mac_dst => '00:00:01:00:00:01',
 enable_control_plane=> '0',
 l3_length => '110',
 name => 'igmpv3_report_olist_scale1',
 fill_type => 'constant',
 fcs_error => '0',
 fill_value => '0',
 traffic_state => '1',
 high_speed_result_analysis=> '1',
 length_mode => 'fixed',
 disable_signature => '0',
 enable_stream_only_gen=> '1',
 pkts_per_burst => '1',
 inter_stream_gap_unit=> 'bytes',
 burst_loop_count => '30',
 transmit_mode => 'continuous',
 inter_stream_gap => '12',
 rate_percent => '10',
 igmp_record_type => '5 6 ',
 igmp_multicast_addr => '255.0.0.1 255.0.0.1 ',
 igmp_multicast_src => '196.168.1.10 196.168.2.11 ');
 # hlapiGen_streamblock_ipv6_extention_header

 my %streamblock_ret1 = sth::traffic_config (
 mode => 'create',
Traffic Functions
1139
 port_handle => "$hport[1]",
 l2_encap => 'ethernet_ii',
 l3_protocol => 'ipv6',
 ipv6_routing_res => '006f',
 ipv6_auth_seq_num => '1',
 ipv6_auth_payload_len=> '0',
 ipv6_auth_string => '0000abcd',
 ipv6_auth_spi => '1',
 ipv6_frag_more_flag => '0',
 ipv6_frag_id => '0',
 ipv6_frag_offset => '1',
 ipv6_src_addr => '2000::2',
 ipv6_traffic_class => '0',
 ipv6_dst_addr => '2000::2',
 ipv6_next_header => '59',
 ipv6_length => '0',
 ipv6_flow_label => '7',
 ipv6_hop_limit => '255',
 mac_src => '00:10:94:00:00:01',
 ether_type => '88B5',
 mac_dst => '00:10:94:00:00:02',
 enable_control_plane=> '0',
 l3_length => '110',
 name => 'StreamBlock_4-3',
 fill_type => 'constant',
 fcs_error => '0',
 fill_value => '0',
 traffic_state => '1',
 high_speed_result_analysis=> '1',
 length_mode => 'fixed',
 disable_signature => '0',
 enable_stream_only_gen=> '1',
 pkts_per_burst => '1',
 inter_stream_gap_unit=> 'bytes',
 burst_loop_count => '30',
 transmit_mode => 'continuous',
 inter_stream_gap => '12',
 rate_percent => '10',
 ipv6_hop_by_hop_options=> 'type: router_alert length:2 alert_type:mld ',
 ipv6_destination_options=> 'type:padn length:1 value:ab ',
 ipv6_extension_header=> 'routing authentication fragment hop_by_hop destination ',
 mac_discovery_gw => '::');

 ##hlapiGen_streamblock_vlan_pri_modifier_CR1800

 my %streamblock_ret1 = sth::traffic_config (
 mode => 'create',
 port_handle => "$hport[1]",
 l2_encap => 'ethernet_ii_vlan',
 l3_outer_protocol => 'ipv4',
 l3_protocol => 'ipv4',
 ip_outer_id => '0',
 ip_outer_protocol => '253',
 ip_fragment_outer_offset=> '0',
 ip_dst_outer_addr => '193.85.1.5',
 ip_hdr_outer_length => '5',
 ip_src_outer_addr => '192.85.1.5',
 ip_outer_ttl => '255',
 ip_id => '0',
 ip_src_addr => '192.85.1.2',
 ip_dst_addr => '192.0.0.1',
 ip_ttl => '255',
 ip_hdr_length => '5',
 ip_protocol => '253',
 ip_fragment_offset => '0',
 ip_mbz => '0',
 ip_precedence => '0',
 ip_tos_field => '0',
 vlan_priority_count => '10',
 vlan_priority_step => '001',
 vlan_priority_mode => 'increment',
Traffic Functions
1140
 ip_src_outer_mode => 'increment',
 ip_src_outer_count => '1',
 ip_src_outer_step => '0.0.0.1',
 vlan_id_repeat => '0',
 vlan_id_mode => 'increment',
 vlan_id_count => '1',
 vlan_id_step => '1',
 ip_dst_outer_count => '1',
 ip_dst_outer_step => '0.0.0.1',
 ip_dst_outer_mode => 'increment',
 ip_src_count => '1',
 ip_src_step => '0.0.0.1',
 ip_src_mode => 'increment',
 ip_dst_count => '1',
 ip_dst_step => '0.0.0.1',
 ip_dst_mode => 'increment',
 ip_tos_count => '1',
 ip_tos_step => '0',
 ip_tos_mode => 'increment',
 mac_src_count => '1',
 mac_src_mode => 'increment',
 mac_src_step => '2',
 mac_src => '00:10:94:00:00:05',
 ether_type => '88B5',
 mac_dst => '00:00:01:00:00:01',
 vlan_cfi => '0',
 vlan_tpid => '33024',
 vlan_id => '100',
 vlan_user_priority => '7',
 enable_control_plane=> '0',
 l3_length => '106',
 name => 'StreamBlock_4-2',
 fill_type => 'constant',
 fcs_error => '0',
 fill_value => '0',
 traffic_state => '1',
 high_speed_result_analysis=> '1',
 length_mode => 'fixed',
 disable_signature => '0',
 enable_stream_only_gen=> '1',
 pkts_per_burst => '1',
 inter_stream_gap_unit=> 'bytes',
 inter_stream_gap => '12',
 rate_percent => '10',
 mac_discovery_gw => '192.85.1.1',
 enable_stream => 'false');
 Sample Output for the examples above:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'stream_id';
 $VAR4 = 'streamblock1';
 ##hlapiGen_streamblock_igmpv3report
 my %streamblock_ret1 = sth::traffic_config (
 mode => 'create',
 port_handle => "$hport[1]",
 l2_encap => 'ethernet_ii',
 l4_protocol => 'igmp',
 igmp_version => '3',
 igmp_type => '22',
 igmp_msg_type => 'report',
 mac_src => '00:10:94:00:00:02',
 ether_type => '88B5',
 mac_dst => '00:00:01:00:00:01',
 enable_control_plane=> '0',
 l3_length => '110',
 name => 'igmpv3_report_olist_scale1',
 fill_type => 'constant',
 fcs_error => '0',
Traffic Functions
1141
 fill_value => '0',
 traffic_state => '1',
 high_speed_result_analysis=> '1',
 length_mode => 'fixed',
 disable_signature => '0',
 enable_stream_only_gen=> '1',
 pkts_per_burst => '1',
 inter_stream_gap_unit=> 'bytes',
 burst_loop_count => '30',
 transmit_mode => 'continuous',
 inter_stream_gap => '12',
 rate_percent => '10',
 igmp_record_type => '5 6 ',
 igmp_multicast_addr => '255.0.0.1 255.0.0.1 ',
 igmp_multicast_src => '196.168.1.10 196.168.2.11 ');

 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'igmpgrprec_handle';
 $VAR4 = 'grouprecord1_anon_1489 grouprecord2_anon_1493';
 $VAR5 = 'stream_id';
 $VAR6 = 'streamblock1';
Sample Input: See Examples.
Sample Output: See Examples.
Notes:
 1) Before you modify traffic streams, you must use the traffic_control
 function to stop generating traffic. Failure to stop traffic may
 produce unpredictable results. (See the description of the
 traffic_control function for information about stopping traffic.)
 2) When you set the mode to remove, the mandatory argument -stream_id
 <integer> specifies the stream id to remove from the traffic
 generator, existing streams are left intact.
 3) In reset mode, if you specify the -stream_id argument, Spirent
 HLTAPI removes the existing stream for the specified port. If you
 do not specify -stream_id, all streams are removed from the device
 corresponding to the port_handle argument.
 4) For functions that use the control plane to resolve data plane packet
 block information, it is assumed that the control plane has been
 successfully established prior to issuing the sth::traffic_config
 function.
End of Procedure Header
sth::traffic_config_ospf
Name:
 sth::traffic_config_ospf
Purpose:
 Configures OSPF headers under a streamblock. It must be used after the
 traffic_config function is configured.
Synopsis:
 sth::traffic_config_ospf
 -mode {create | modify | delete}
 -stream_id <stream_handle>
 -type {packets update_router_lsa_link | update_router_lsa_tos |
 -update_summary_lsa_tos | update_asexternal_lsa_tos}
 -ospf_type {dd | hello | req | ack | unknown | update}
 [-handle <handle>]
Traffic Functions
1142
 [-ospf_router_id <a.b.c.d>]
 [-ospf_area_id <a.b.c.d>]
 [-ospf_checksum <hexadecimal>]
 [-ospf_auth_type <integer>]
 [-ospf_auth_value1 <integer>]
 [-ospf_auth_value2 <integer>]

 [-ospf_lsa_num <integer>]
 [-ospf_lsa_age <integer>]
 [-ospf_lsa_header_options <binary string>]
 [-ospf_ls_type <integer>]
 [-ospf_ls_link_state_id <a.b.c.d>]
 [-ospf_ls_ad_router <a.b.c.d>]
 [-ospf_ls_seq_number <hex>]
 [-ospf_interface_mtu <integer>
 [-ospf_packets_options <binary string>
 [-ospf_dd_options <binary string>
 [-ospf_dd_seq_number<hex>]
 [-ospf_network_mask<a.b.c.d>]
 [-ospf_hello_interval <integer>]
 [-ospf_router_priority <integer>]
 [-ospf_router_dead_interval <integer>]
 [-ospf_designated_router <a.b.c.d>]
 [-ospf_bk_designated_router <a.b.c.d>]
 [-ospf_neighbor_id <a.b.c.d>]

 [-ospf_req_lsa_num <integer>]
 [-ospf_req_ls_type <integer>]
 [-ospf_req_link_state_id <a.b.c.d>]
 [-ospf_req_ad_router <a.b.c.d>]
 [-ospf_num_of_lsas <integer>]
 [-ospf_router_lsa_num <integer>]
 [-ospf_router_lsa_age <integer>]
 [-ospf_router_lsa_header_options <binary string>]
 [-ospf_router_lsa_type <integer>]
 [-ospf_router_lsa_link_state_id <a.b.c.d>]
 [-ospf_router_lsa_ad_router <a.b.c.d>]
 [-ospf_router_lsa_seq_number <hex>
 [-ospf_router_lsa_options <binary string>]
 [-ospf_router_lsa_reserved <integer>]
 [-ospf_router_lsa_num_of_linklist <integer>]
 [-ospf_router_lsa_link_num <integer>]
 [-ospf_router_lsa_link_id <a.b.c.d>]
 [-ospf_router_lsa_link_data<a.b.c.d>]
 [-ospf_router_lsa_link_type <integer>]
 [-ospf_router_lsa_tos_metric_num <integer>]
 [-ospf_router_lsa_link_metric <integer>]
 [-ospf_router_lsa_tos_num <integer>]
 [-ospf_router_lsa_tos_type <integer>]
 [-ospf_router_lsa_tos_reserved <integer>]
 [-ospf_router_lsa_tos_metric <integer>]
 [-ospf_network_lsa_num <integer>]
 [-ospf_network_lsa_age <integer>]
 [-ospf_network_lsa_header_options <binary string>]
 [-ospf_network_lsa_type <integer>]
 [-ospf_network_lsa_link_state_id <a.b.c.d>]
 [-ospf_network_lsa_ad_router <a.b.c.d>]
 [-ospf_network_lsa_seq_number <hex>
 [-ospf_network_lsa_network_mask <a.b.c.d>]
 [-ospf_network_lsa_attached_router_id <list of a.b.c.d>]
 [-ospf_summary_lsa_num <integer>]
 [-ospf_summary_lsa_age <integer>]
 [-ospf_summary_lsa_header_options <binary string>]
 [-ospf_summary_lsa_type <integer>]
 [-ospf_summary_lsa_link_state_id <a.b.c.d>]
 [-ospf_summary_lsa_ad_router <a.b.c.d>]
Traffic Functions
1143
 [-ospf_summary_lsa_seq_number <hex>
 [-ospf_summary_lsa_network_mask <a.b.c.d>]
 [-ospf_summary_lsa_reserved <integer>]
 [-ospf_summary_lsa_metric <integer>]
 [-ospf_summary_lsa_tos_num <integer>]
 [-ospf_summary_lsa_tos_reserved <integer>]
 [-ospf_summary_lsa_tos_metric <integer>]

 [-ospf_summaryasbr_lsa_num <integer>]
 [-ospf_summaryasbr_lsa_age <integer>]
 [-ospf_summaryasbr_lsa_header_options <binary string>]
 [-ospf_summaryasbr_lsa_type <integer>]
 [-ospf_summaryasbr_lsa_link_state_id <a.b.c.d>]
 [-ospf_summaryasbr_lsa_ad_router <a.b.c.d>]
 [-ospf_summaryasbr_lsa_seq_number <hex>
 [-ospf_summaryasbr_lsa_network_mask <a.b.c.d>]
 [-ospf_summaryasbr_lsa_reserved <integer>]
 [-ospf_summaryasbr_lsa_metric <integer>]
 [-ospf_asexternal_lsa_num <integer>]
 [-ospf_asexternal_lsa_age <integer>]
 [-ospf_asexternal_lsa_header_options <binary string>]
 [-ospf_asexternal_lsa_type <integer>]
 [-ospf_asexternal_lsa_link_state_id <a.b.c.d>]
 [-ospf_asexternal_lsa_ad_router <a.b.c.d>]
 [-ospf_asexternal_lsa_seq_number <hex>]
 [-ospf_asexternal_lsa_network_mask <a.b.c.d>]
 [-ospf_asexternal_lsa_route_metric <integer>]
 [-ospf_asexternal_lsa_forwarding_addr <a.b.c.d>]
 [-ospf_asexternal_lsa_route_tag <integer>]
 [-ospf_asexternal_lsa_option_ebit {0|1}]
 [-ospf_asexternal_lsa_option_reserved <integer>]
 [-ospf_asexternal_lsa_tos_num <integer>]
 [-ospf_asexternal_lsa_tos_ebit {0|1}]
 [-ospf_asexternal_lsa_tos_type <integer>]
 [-ospf_asexternal_lsa_tos_metric <integer>]
 [-ospf_asexternal_lsa_tos_forwarding_addr<a.b.c.d>]
Arguments:
 -type
 Specifies the header type to create/modify. Possible values are
 described below:


 Value Header Type
 packets OSPF packets

 update_router_lsa_link Router LSA link header under
 update router LSA header

 update_router_lsa_tos Router LSA TOS header under
 update router LSA link header

 update_summary_lsa_tos Summary LSA TOS header under
 update summary LSA header

 update_asexternal_lsa_tos AS-external LSA TOS header under
 update AS-external LSA header

 This argument is mandatory.
 -handle
 Specifies the handle to modify. This argument can only be used
 in mode modify. The value can be an OSPF header handle, an LSA
 link header handle or an LSA TOS header handle.
 -mode
 Specifies the action to take in configuring OSPF. Possible values
 are create, modify, and delete. This argument is mandatory.
Traffic Functions
1144
 create - Creates an OSPF header for the specified streamblock,
 or a router LSA link header/router LSA TOS metric
 header/summary LSA TOS metric header/ASBR-summary LSA TOS
 metric header for the specified LSA header. This mode
 returns different handles depending on the configurations
 of -type and -ospf_type. Please see Return Values for
 more information.
 Example:
 traffic_config_ospf -mode create -type packets\
 -ospf_type hello\
 -stream_id $strHdl
 modify - Modifies the existing header.
 Example:
 traffic_config_ospf -mode modify
 -type packets\
 -ospf_type hello\
 -handle $hdl
 -stream_id $strHdl

 delete- Deletes all of the existing handles
 Example:
 traffic_config -mode delete\
 -type packets\
 -ospf_type hello\
 -handle $hdl#
 -stream_id $strHdl
 -phandle
 Specifies the handle under which the LSA link or LSA TOS is
 created. This argument is only used when -type is not packets
 in mode create. The value can be an OSPF header handle or an LSA
 link header handle.
 -stream_id
 Specifies the streamblock handle on which to create or modify the
 OSPF header. This argument is only valid when -type is packets in
 mode create.
 -ospf_type
 Specifies the OSPF packet type to configure. This argument is
 mandatory when -type is set to packets. This parameter
 does not work for mode modify. If you want to modify an OSPF
 type, delete the created OSPF packet header using delete mode
 and create a new OSPF type. Possible value are dd, ack, hello,
 req, unknown, update.
 dd - OSPFv2 Database Description packet
 ack - OSPFv2 Link State Acknowledge packet
 hello - OSPFv2 Link State Hello packet
 req - OSPFv2 Link State Request packet
 unknown - OSPFv2 Unknown packet

 -ospf_router_id
 Specifies the router ID of the OSPF packet header. The value
 must be in IPv4 format. The default value is 1.1.1.1. You must
 set -type to packets.

 -ospf_area_id
 Specifies the area ID of the OSPF packet header. The value must
 be in IPv4 format. The default value is 0.0.0.0. You must set
 -type to packets.

 -ospf_checksum
 Specifies the checksum field of the OSPF packet header. The
 value must be a 4-digit HEX. The default value is 0000. You must
 set -type to packets.
 -ospf_auth_type
 Specifies the authentication type field of the OSPF packet
 header. Possible value are none, password, md5, and userdefined.
 The default value is none. You must set -type to packets.
Traffic Functions
1145
 -ospf_auth_value1
 Specifies the authentication type field of the OSPF packet
 header. The default value is 0. You must set -type to packets.

 -ospf_auth_value2
 Specifies the checksum field of the OSPF packet header. The
 default value is 0. You must set -type to packets.
 -ospf_interface_mtu
 Specifies the interface MTU of the OSPFv2 Database Description
 packet. The default value is 4096. You must set -type to packets
 and -ospf_type to dd.
 -ospf_packets_options
 Specifies the options field of the OSPFv2 Database Description
 packet. The value must be an 8-digit binary string. The default
 value is 00000000. You must set -type to packets and -ospf_type
 to dd.
 -ospf_dd_options
 Specifies the special option field of the OSPFv2 Database
 Description packet. The value must be an 8-digit binary string.
 The default value is 00000000. You must set -type to packets and
 -ospf_type to dd.
 -ospf_dd_seq_number
 Specifies the sequence number of the OSPFv2 Database Description
 packet. The default value is 0. You must set -type to packets and
 -ospf_type to dd.
 -ospf_lsa_num
 Specifies the number of LSA headers in the OSPFv2 Database
 Description packet or OSPFv2 Acknowledge packet. A list of LSAs
 will be created if this parameter is specified. The default
 value is 0. You must set -type to packets and -ospf_type to dd
 or ack.
 -ospf_lsa_age
 Specifies the LSA age of LSA header in the OSPFv2 Database
 Description packet or OSPFv2 Acknowledge packet. The value can be
 a list, the length of which can be equal to or less than
 -ospf_lsa_num. If the length is less than -ospf_lsa_num, the
 default value, 0, will be used. You must set -type to packets and
 -ospf_type to dd or ack.

 -ospf_lsa_header_options
 Specifies the LSA header options of the LSA header in the OSPFv2
 Database Description packet or OSPFv2 Acknowledge packet. The
 value can be a list of 8-digit binary strings, the length of
 which can be equal to or less than the -ospf_lsa_num. If the
 length is less than -ospf_lsa_num, the default value, 00000000,
 will be used.
 You must set -type to packets and -ospf_type to dd or ack.

 -ospf_ls_type
 Specifies the link state type of the LSA header for the OSPFv2
 Database Description packet or OSPFv2 Acknowledge packet.
 Possible values are described below:
 Value Description
 1 Router
 2 Network
 3 Summary
 4 Summary-ASBR
 5 AS-External Type-5
 7 AS-External Type-7
 This argument can be a list, the length of which can be equal to
 or less than the -ospf_lsa_num. If the length is less than
 -ospf_lsa_num, the default value, 1, will be used. You must set
 -type to packets and -ospf_type to dd or ack.
Traffic Functions
1146

 -ospf_ls_link_state_id
 Specifies the link state ID of the LSA header in the OSPFv2
 Database Description packet or OSPFv2 Acknowledge packet. The
 value must be in IPv4 format. This argument can be a list, the
 length of which can be equal to or less than the -ospf_lsa_num.
 If the length is less than -ospf_lsa_num, the default value,
 1.1.1.1., will be used. You must set -type to packets and
 -ospf_type to dd or ack.
 -ospf_ls_ad_router
 Specifies the advertising router of the LSA header for the OSPFv2
 Database Description packet or OSPFv2 Acknowledge packet. The
 value must be in IPv4 format. This argument can be a list, the
 length of which can be equal to or less than the -ospf_lsa_num.
 If the length is less than -ospf_lsa_num, the default value,
 1.1.1.1, will be used. You must set -type to packets and
 -ospf_type to dd or ack.
 -ospf_ls_seq_number
 Specifies the link state sequence number of the LSA header for
 the OSPFv2 Database Description packet or OSPFv2 Acknowledge
 packet. The value must be a 8-digit HEX. This argument can be a
 list, the length of which can be equal to or less than the
 -ospf_lsa_num. If the length is less than -ospf_lsa_num, the
 default value, 80000001, will be used. You must set -type to
 packets and -ospf_type to dd or ack.
 -ospf_network_mask
 Specifies the network mask of the OSPFv2 Hello packet. The value
 must be in IPv4 format. The default value is 255.255.255.0. You
 must set -type to packets and -ospf_type to hello.

 -ospf_hello_interval
 Specifies the Hello interval of the OSPFv2 Hello packet. The
 default value is 10. You must set -type to packets and -ospf_type
 to hello.
 -ospf_router_priority
 Specifies the router priority of the OSPFv2 Hello packet. The
 default value is 0. You must set -type to packets and -ospf_type
 to hello.
 -ospf_router_dead_interval
 Specifies the router dead interval of the OSPFv2 Hello packet.
 The default value is 40. You must set -type to packets and
 -ospf_type to hello.
 -ospf_designated_router
 Specifies the designated router of the OSPFv2 Hello packet. The
 value must be in IPv4 format. The default value is 1.1.1.1. You
 must set -type to packets and -ospf_type to hello.

 -ospf_bk_designated_router
 Specifies the backup designated router of the OSPFv2 Hello
 packet. The value must be in IPv4 format. The default value is
 2.2.2.2. You must set -type to packets and -ospf_type to hello.

 -ospf_neighbor_id
 Specifies the neighbor ID list of the OSPFv2 Hello packet. The
 value must be in IPv4 format. The default value is 1.1.1.1. You
 must set -type to packets and -ospf_type to hello.
 -ospf_req_lsa_num
 Specifies the number of the requested LSA headers of the OSPFv2
 Link State Request packet. The default value is 0. You must set
 -type to packets and -ospf_type to req.

 -ospf_req_ls_type
 Specifies the link state type of the LSA header of the OSPFv2
 Link State Request packet. Possible values are described below:
Traffic Functions
1147
 Value Description
 1 Router
 2 Network
 3 Summary
 4 Summary-ASBR
 5 AS-External Type-5
 7 AS-External Type-7

 This argument can be a list, the length of which can be equal to
 or less than the -ospf_req_lsa_num. If the length is less than
 -ospf_req_lsa_num, the default value, 1, will be used. You must
 set -type to packets and -ospf_type to req.

 -ospf_req_link_state_id
 Specifies the link state ID of the requested LSA list in the
 OSPFv2 Link State Request packet. The value must be in IPv4
 format. This value can be a list, the length of which can be
 equal to or less than -ospf_req_lsa_num. If the length is less
 than -ospf_req_lsa_num, the default value, 1.1.1.1, will be used.
 You must set -type to packets and -ospf_type to req.
 -ospf_req_ad_router
 Specifies the advertising router ID of the requested LSA list in
 the OSPFv2 Link State Request packet. The value must be in IPv4
 format. This value can be a list, the length of which can be
 equal to or less than -ospf_req_lsa_num. If the length is less
 than -ospf_req_lsa_num, the default value, 1.1.1.1, will be used.
 You must set -type to packets and -ospf_type to req.
 -ospf_num_of_lsas
 Specifies the number of LSAs for the OSPFv2 Link State Update
 packet. The default value is 0. You must set -type to packets and
 -ospf_type to update.
 The following arguments configure the OSPFv2 router LSA under the created OSPFv2
 Link State Update packet. The values for all OSPFv2 router LSA arguments (except
 -ospf_router_lsa_num) can be a list, the length can be equal to or less than the
 -ospf_router_lsa_num. If the length is less than -ospf_router_lsa_num, the
 default value will be used. You must set -type to packets and -ospf_type to
 update.
 -ospf_router_lsa_num
 Specifies the number of router LSA headers to include in the list.
 If this parameter is specified, the router LSA list will
 be created. The default value is 0.
 -ospf_router_lsa_age
 Specifies the router LSA age for the OSPFv2 Link State Update
 packet. The default value is 0.

 -ospf_router_lsa_header_options
 Specifies the header options of the router LSA header.
 The value must be a 8-digit binary string. The default is
 00000000.

 -ospf_router_lsa_type
 Specifies the link state type of the router LSA header.
 Possible values are described below:
 Value Description
 1 Router
 2 Network
 3 Summary
 4 Summary-ASBR
 5 AS-External Type-5
 7 AS-External Type-7

 The default value is 1.
 -ospf_router_lsa_link_state_id
 Specifies the link state ID of the router LSA header. The
 value must be in IPv4 format. The default value is 1.1.1.1.
Traffic Functions
1148
 -ospf_router_lsa_ad_router
 Specifies the LSA advertising router of the router LSA header.
 The value must be in IPv4 format. The default value is 1.1.1.1.
 -ospf_router_lsa_seq_number
 Specifies the LSA sequence number of the router LSA header.
 The value must be an 8-digit HEX. The default
 value is 80000001.
 -ospf_router_lsa_options
 Specifies the LSA options field of the router LSA header. The
 value must be an 8-digit binary string. The default value is
 00000000.
 -ospf_router_lsa_reserved
 Specifies the LSA reserved field of the router LSA header. The
 default value is 0.
 -ospf_router_lsa_num_of_linklist
 Specifies the number of link lists of the router LSA header.
 The default value is 0.
 When type is update_router_lsa_link, the following arguments are available to
 configure the router LSA link header under the created router LSA header. To
 create a router LSA link header, you must specify -ospf_router_lsa_link_num and
 configure -phandle with the created router LSA handle in mode create. To modify
 an existing router LSA link header, configure -handle with the router LSA link
 handle returned from mode create. The values for all router LSA link arguments
 (except -ospf_router_lsa_link_num) can be a list, the length of which can be
 equal to or less than -ospf_router_lsa_link_num. If the length is less than
 -ospf_router_lsa_link_num, the default value will be used.

 -ospf_router_lsa_link_num
 Specifies the number of router LSA link headers to include in the
 list. The default value is 0.
 -ospf_router_lsa_link_id
 Specifies the link ID of the router LSA link header
 Update packet. The value must be in IPv4 format. The default
 value is 1.1.1.1.
 -ospf_router_lsa_link_data
 Specifies the link data of the router LSA link header. The value
 must be in IPv4 format. The default value is 1.1.1.1.

 -ospf_router_lsa_link_type
 Specifies the link type of the router LSA link header.
 Possible values are described below:
 Type Description

 1 Point-to-Point
 2 Transit
 3 Stub
 4 Virtual

 The default value is 3.

 -ospf_router_lsa_tos_metric_num
 Specifies the number of TOS metrics in the router LSA link header.
 The default value is 0.

 -ospf_router_lsa_link_metric
 Specifies the router LSA link metric field of the router LSA link
 header. The default value is 0.

 When type is update_router_lsa_tos, the following arguments are available to
 configure the router LSA TOS metric header under a created router LSA link header
 for OSPFv2 Link State Update packet. To create a router LSA TOS metric header,
 you must specify ospf_router_lsa_tos_num and configure -phandle with the created
 router LSA link handle in mode create. To modify an existing router LSA TOS
Traffic Functions
1149
 metric header, configure -handle with the router LSA tos metric header handle
 returned from mode create. The values for all router LSA TOS metric arguments
 (except -ospf_router_lsa_tos_num) can be a list, the length of which can be equal
 to or less than -ospf_router_lsa_tos_num. If the length is less than
 -ospf_router_lsa_tos_num, the default value will be used.
 -ospf_router_lsa_tos_num
 Specifies the number of TOS metric headers in the list. The
 default value is 0.
 -ospf_router_lsa_tos_type
 Specifies the LSA TOS type for the router LSA TOS metric header.
 Possible values are described below:
 Value Description
 1 Point-to-Point
 2 Transit
 3 Stub
 4 Virtual

 The default value is 1.
 -ospf_router_lsa_tos_reserved
 Specifies the LSA TOS reserved field for the router LSA TOS
 metric header. The default value is 0.

 -ospf_router_lsa_tos_metric
 Specifies the router TOS link metric for the router LSA TOS
 metric header. The default value is 0.

 The following arguments configure the OSPFv2 network LSA header of OSPFv2 Link
 State Update packet. The values of these arguments (except -ospf_network_lsa_num)
 can be a list, the length of which can be equal to or less than the
 -ospf_network_lsa_num. If the length is less than -ospf_network_lsa_num, the
 default value will be used. You must set -type to packets and -ospf_type to
 update.

 -ospf_network_lsa_num
 Specifies the number of network LSA headers to include in the
 list. The default value is 0.

 -ospf_network_lsa_age
 Specifies the network LSA age. The default value is 0.
 -ospf_network_lsa_header_options
 Specifies the header options field of the network LSA header.
 The value must be a 8-digit binary string. The default is
 00000000.

 -ospf_network_lsa_type
 Specifies the link state type of the network LSA header.
 Possible values are described below:
 Value Description
 1 Router
 2 Network
 3 Summary
 4 Summary-ASBR
 5 AS-External Type-5
 7 AS-External Type-7

 The default value is 1.
 -ospf_network_lsa_link_state_id
 Specifies the link state ID of the network LSA header. The value
 must be in IPv4 format. The default value is 1.1.1.1.

 -ospf_network_lsa_ad_router
 Specifies the advertising router of the network LSA header. The
 value must be in IPv4 format. The default value is 1.1.1.1.

 -ospf_network_lsa_seq_number
 Specifies the LSA sequence number of the network LSA header. The
Traffic Functions
1150
 value must be an 8-digit HEX. The default value is 80000001.

 -ospf_network_lsa_network_mask
 Specifies the LSA network mask of the network LSA header. The
 value must be in IPv4 format. The default value is 255.255.255.0.
 -ospf_network_lsa_attached_router_id
 Specifies the attached router ID of the network LSA
 header. Each element of the list can be a list. The value must be
 in IPv4 format. The default value is 1.1.1.1.
 The following arguments configure the OSPFv2 summary-LSA header of the OSPFv2
 Link State Update packet. The values of these arguments (except
 -ospf_summary_lsa_num) can be a list, the length of which can be equal to or less
 than the -ospf_summary_lsa_num. If the length is less than -ospf_summary_lsa_num,
 the default value will be used. You must set -type to packets and -ospf_type to
 update.

 -ospf_summary_lsa_num
 Specifies the number of summary LSA headers to include in the
 list. The default value is 0.

 -ospf_summary_lsa_age
 Specifies the summary LSA age of the OSPFv2 summary LSA header.
 The default value is 0.
 -ospf_summary_lsa_header_options
 Specifies the header options field of the OSPFv2 summary LSA
 header. The value must be a 8-digit binary string. The default
 is 00000000.

 -ospf_summary_lsa_type
 Specifies the link state type of the OSPFv2 summary LSA
 header. Possible values are described below:
 Value Description
 1 Router
 2 Network
 3 Summary
 4 Summary-ASBR
 5 AS-External Type-5
 7 AS-External Type-7

 The default value is 1.
 -ospf_summary_lsa_link_state_id
 Specifies the link state ID of the OSPFv2 summary LSA header.
 The value must be in IPv4 format. The default value is 1.1.1.1.

 -ospf_summary_lsa_ad_router
 Specifies the advertising router of the OSPFv2 summary LSA
 header. The value must be in IPv4 format. The default value is
 1.1.1.1.

 -ospf_summary_lsa_seq_number
 Specifies the LSA sequence number of summary LSA of the
 OSPFv2 summary LSA header. The value must be an 8-digit HEX. The
 default value is 80000001.

 -ospf_summary_lsa_network_mask
 Specifies the LSA network mask of the OSPFv2 summary LSA
 header. The value must be in IPv4 format. The default value is
 255.255.255.0.

 -ospf_summary_lsa_reserved
 Specifies the LSA reserved field of the OSPFv2 summary LSA header.
 The default value is 0.
 -ospf_summary_lsa_metric
 Specifies the LSA metric field of the OSPFv2 summary LSA header.
 The default value is 0.
Traffic Functions
1151

 When type is update_summary_lsa_tos, the following arguments are available to
 configure the summary LSA TOS metric header under the created OSPFv2
 summary/ASBR-summary LSA in the OSPFv2 Link State Update packet. To create a
 summary LSA TOS metric header, you must specify -ospf_summary_lsa_tos_num and
 configure -phandle with the created summary LSA/ASBR-summary LSA handle in mode
 create. To modify an existing summary LSA TOS metric header, configure -handle
 with the summary LSA TOS metric header handle returned from mode create. The
 values for all router LSA link arguments (except -ospf_summary_lsa_tos_num) can
 be a list, the length of which can be equal to or less than
 -ospf_summary_lsa_tos_num. If the length is less than -ospf_summary_lsa_tos_num,
 the default value will be used.

 -ospf_summary_lsa_tos_num
 Specifies the number of summary LSA TOS metric headers to
 include in the list. The default value is 0.

 -ospf_summary_lsa_tos_reserved <integer> 0
 Specifies the reserved field of the OSPFv2 summary LSA header.
 The default value is 0.
 -ospf_summary_lsa_tos_metric <integer> 0
 Specifies the summary TOS metric field of the OSPFv2 summary LSA
 header. The default is 0.
 The following arguments configure the OSPFv2 ASBR-summary-LSA for the OSPFv2 Link
 State Update packet. The values of these arguments (except
 -ospf_summaryasbr_lsa_age) can be a list, the length of which can be equal to or
 less than -ospf_summaryasbr_lsa_age. If the length is less than
 -ospf_summaryasbr_lsa_age, the default value will be used. You must set -type to
 packets and -ospf_type to update.

 -ospf_summaryasbr_lsa_num
 Specifies the number of ASBR-summary LSA headers to include in
 the list. The default is 0.
 -ospf_summaryasbr_lsa_age
 Specifies the ASBR-summary LSA age. The default value is 0.

 -ospf_summaryasbr_lsa_header_options
 Specifies the header options field for the ASBR-summary LSA
 header. The value must be an 8-digit binary string. The default
 is 00000000.

 -ospf_summaryasbr_lsa_type
 Specifies the link state type of the ASBR-summary LSA header.
 Possible values are described below:

 Value Description
 1 Router
 2 Network
 3 Summary
 4 Summary-ASBR
 5 AS-External Type-5
 7 AS-External Type-7

 The default value is 1.
 -ospf_summaryasbr_lsa_link_state_id
 Specifies the link state ID of the ASBR-summary LSA header. The
 value must be in IPv4 format. The default value is 1.1.1.1.

 -ospf_summaryasbr_lsa_ad_router
 Specifies the LSA advertising router ID of the ASBR-summary LSA
 header. The value must be in IPv4 format. The default value is
 1.1.1.1.

 -ospf_summaryasbr_lsa_seq_number
 Specifies the LSA sequence number of the ASBR-summary LSA for the
 OSPFv2 Link State Update packet. The value must be an 8-digit
Traffic Functions
1152
 HEX. The default value is 80000001.
 -ospf_summaryasbr_lsa_reserved
 Specifies the LSA reserved field of the ASBR-summary LSA header.
 The default value is 0.

 -ospf_summaryasbr_lsa_metric <integer> 0
 Specifies LSA metric field of the ASBR-summary LSA header. The
 default value is 0.

 The following arguments configure OSPFv2 AS-external LSA header of the OSPFv2
 Link State Update packet. The values of these arguments (except
 -ospf_asexternal_lsa_num) can be a list, the length of which can be equal to or
 less than -ospf_asexternal_lsa_num. If the length is less than
 -ospf_asexternal_lsa_num, the default value will be used. You must set -type to
 packets and -ospf_type to update.
 -ospf_asexternal_lsa_num
 Specifies the number of AS-external LSA headers to include in
 the list. The default value is 0.

 -ospf_asexternal_lsa_age
 Specifies the AS-external LSA age. The default value is 0.
 -ospf_asexternal_lsa_header_options
 Specifies the header options field of the AS-external LSA header.
 The value must be an 8-digit binary string. The default value is
 00000000.

 -ospf_asexternal_lsa_type
 Specifies the link state type of the AS-external LSA header.
 Possible values are described below:
 Value Description
 1 Router
 2 Network
 3 Summary
 4 Summary-ASBR
 5 AS-External Type-5
 7 AS-External Type-7

 The default value is 1.
 -ospf_asexternal_lsa_link_state_id
 Specifies the link state ID of the AS-external LSA header. The
 value must be in IPv4 format. The default value is 1.1.1.1.

 -ospf_asexternal_lsa_ad_router
 Specifies the advertising router ID of the AS-external LSA
 header. The value must be in IPv4 format. The default value is
 1.1.1.1.

 -ospf_asexternal_lsa_seq_number
 Specifies the LSA sequence number of the AS-external LSA header.
 The value must be an 8-digit HEX. The default value is 80000001.
 -ospf_asexternal_lsa_network_mask
 Specifies the LSA network mask of the AS-external LSA header. The
 value must be in IPv4 format. The default value is 255.255.255.0.

 -ospf_asexternal_lsa_option_reserved
 Specifies the reserved field of the AS-external LSA header. The
 default value is 0.
 -ospf_summary_lsa_metric
 Specifies the LSA metric of the AS-external LSA header. The
 default value is 0.

 -ospf_asexternal_lsa_forwarding_addr
 Specifies the forwarding address of the AS-external LSA header.
 The value must be in IPv4 format. The default value is 1.1.1.1.
 
Traffic Functions
1153
 -ospf_asexternal_lsa_route_tag
 Specifies the external route tag of the AS-external LSA header.
 The default value is 0.

 -ospf_asexternal_lsa_option_ebit
 Specifies the option E-bit field of the AS-external LSA header.
 Possible values are 0 and 1. The default value is 0.
 When type is update_asexternal_lsa_tos, the following arguments are available to
 configure the AS-external LSA TOS metric header under the created OSPFv2
 AS-external LSA in the OSPFv2 Link State Update packet. To create an AS-external
 LSA TOS metric header, you must specify -ospf_asexternal_lsa_tos_num and
 configure -phandle with the created AS-external LSA handle in mode create. To
 modify an existing AS-external LSA TOS metric header, configure -handle with the
 AS-external LSA TOS metric header handle returned from mode create. The values
 for all AS-external LSA TOS metric arguments (except
 -ospf_asexternal_lsa_tos_num) can be a list, the length of which can be equal to
 or less than -ospf_asexternal_lsa_tos_num. If the length is less than
 -ospf_asexternal_lsa_tos_num, the default value will be used.
 -ospf_asexternal_lsa_tos_num
 Specifies the number of AS-external LSA TOS metric headers to
 include in the list. The default value is 0.
 -ospf_asexternal_lsa_tos_ebit {0 | 1}
 Specifies the E-bit of the AS-external LSA TOS metric header.
 Possible values are 0 and 1. The default value is 0.

 -ospf_asexternal_lsa_tos_type
 Specifies the router TOS of the AS-external LSA TOS metric
 header. Possible values are described below:

 Value Description
 0 Normal
 2 Minimize Monetary Cost
 4 Maximize Monetary Cost
 6
 8 Maximize Throughput
 10
 12
 14
 16 Minimize Delay
 18
 20
 22
 24
 26
 28
 30
 The default value is 0.

 -ospf_asexternal_lsa_tos_metric <integer> 0
 Specifies the TOS metric of the AS-external LSA TOS metric
 header. The default value is 0.
 -ospf_asexternal_lsa_tos_forwarding _addr
 Specifies the forwarding address of the router of the AS-external
 LSA TOS metric list. The value must be in IPv4 format. The
 default value is 1.1.1.1.
Arguments Unsupported by Save as HLTAPI:
 None.
Return Values:
 The sth::traffic_config_ospf function returns a keyed list
 using the following keys (with corresponding data):
 A list of handles that identify the OSPF packet header/router LSA link
 header/router LSA TOS metric header/summary LSA TOS metric header/ AS-external
 LSA TOS metric header created by the sth::traffic_config_ospf function.
Traffic Functions
1154
 The handles returned vary by the values of -type and -ospf_type as below:
 Type ospf_type Returned Keys for handle

 packets dd ospf_handle, dd_lsa_handle

 packets ack ospf_handle, ack_lsa_handle

 packets hello/unknown ospf_handle

 packets req ospf_handle, req_lsa_handle

 packets update ospf_handle, update_router_lsa,
 update_network_lsa, update_summary_lsa,
 update_summaryasbr_lsa,
 update_asexternal_lsa
 (Note: The handle can only be configured
 after the corresponding LSA header is
 created)

 update_router_lsa_link router_lsa_link_handle

 update_router_lsa_tos router_lsa_tos_handle

 update_summary_lsa_tos summary_lsa_tos_handle

 update_asexternal_lsa_tos asexternal_lsa_tos_handle
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The sth::traffic_config_ospf function creates, modifies, deletes the OSPF packets
 header/router LSA link header/router LSA TOS metric header/summary LSA TOS metric
 header/ AS-external LSA TOS metric header on the specified streamblock. Use the
 -mode argument to specify the action to perform. (See the -mode argument
 description for information about the actions.)

 To create an OSPF packet header, use the -stream_id argument to specify the
 Spirent HLTAPI streamblock on which the OSPF header will be created.
 To create a router LSA link header, use the -phandle to specify the router LSA on
 which the header will be created, and use the -ospf_router_lsa_link_num argument
 to specify the number of the headers to create. To create a router LSA TOS metric
 header, you must specify the type to update_router_lsa_tos, in addition to using
 the -phandle argument to specify the router LSA link header on which the header
 will be created, and using the ospf_router_lsa_tos_num argument to specify the
 number of router LSA TOS metric headers to create.
 Note: 1. Configurations for other header types under the OSPFv2 link state update
 packet are similar to the router LSA link header and the LSA TOS metric
 header.
 2. The Stream ID value is contained in the keyed list returned by the
 sth::traffic_config function.
 To create a summary/ASBR-summary/AS-external LSA TOS metric header, use the
 -phandle argument to specify the summary/ASBR-summary/AS-external LSA of the
 OSPFv2 link state update packet on which the TOS metric header will be created.

 If the performed action fails, Spirent HLTAPI returns an error message. For
 example, if the user tries to configure a non-existing session handle under
 modify mode, an error message will be returned.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates an OSPFv2 Database Description packet header with
 two LSA headers : (A stream ID handle: strHdl must already exist)
Traffic Functions
1155
 set RStatus [ sth::traffic_config_ospf -mode create\
 -type packets\
 -ospf_type dd\
 -stream_id $strHdl\
 -ospf_router_id 0.0.0.4\
 -ospf_auth_type password \
 -ospf_auth_value1 2\
 -ospf_interface_mtu 8192\
 -ospf_dd_options "10000000"\
 -ospf_lsa_num 2\
 -ospf_lsa_age "5 6"\
 -ospf_lsa_header_options "10000001"\
 -ospf_ls_type "3 4"\
 -ospf_ls_seq_number "80000002 80000003"]
 set ospfHdl [keylget RStatus ospf_handle]
 set lsaHdlList [keylget RStatus dd_lsa_handle]
 set lsaHdl [lindex $lsaHdlList 0]
 The following example modifies the created OSPFv2 Database Description packet
 header:
 set RStatus [ sth::traffic_config_ospf -mode modify\
 -stream_id $strHdl\
 -handle $ospfHdl\
 -type packets\
 -ospf_type dd\
 -ospf_router_id 0.0.0.5\
 -ospf_auth_type userdefined \
 -ospf_auth_value1 3\
 -ospf_interface_mtu 8191]
 The following example modifies the first LSA header which is already created:
 set RStatus [ sth::traffic_config_ospf -mode modify\
 -stream_id $strHdl\
 -handle $lsaHdl\
 -type packets\
 -ospf_type dd\
 -ospf_lsa_age "1"\
 -ospf_lsa_header_options "10000011"\
 -ospf_ls_seq_number "80000010"]
 The following example deletes the first LSA header which is already created:
 set RStatus [ sth::traffic_config_ospf -mode delete\
 -stream_id $strHdl\
 -handle $lsaHdl\
 -type packets\
 -ospf_type dd]
 The following example creates an OSPFv2 link state update packet header with two
 router LSA headers: (A stream ID handle: strHdl must already exist)
 set RStatus [ sth::traffic_config_ospf -mode create\
 -type packets\
 -ospf_type update\
 -stream_id $strHdl\
 -ospf_router_id 0.0.0.4\
 -ospf_auth_type password \
 -ospf_auth_value1 2\
 -ospf_router_lsa_num 2\
 -ospf_router_lsa_age "5 6"\
 -ospf_router_lsa_header_options "10000001 10000111"\
 -ospf_router_lsa_num_of_linklist "4 6"]
 set ospfHdl [keylget RStatus ospf_handle]
 set routerLsaHdl [lindex [keylget RStatus update_router_lsa] 0]
 The following example creates two router LSA link headers of the router LSA for
 the OSPFv2 link state update packet header: (A router LSA handle routerLsaHdl
 must already exist)
Traffic Functions
1156
 set RStatus [ sth::traffic_config_ospf -mode create\
 -stream_id $strHdl\
 -type update_router_lsa_link\
 -phandle $routerLsaHdl\
 -ospf_router_lsa_link_num 2\
 -ospf_router_lsa_link_type "1 4"]
 set LsaLink [keylget RStatus router_lsa_link_handle]
 set lsaLinkHdl [lindex $LsaLink 0]
 The following example modifies a router LSA link header of the router LSA for the
 OSPFv2 link state update packet header:
 set RStatus [ sth::traffic_config_ospf -mode modify\
 -stream_id $strHdl\
 -type update_router_lsa_link\
 -handle $lsaLinkHdl\
 -ospf_router_lsa_link_type "3"\
 -ospf_router_lsa_link_data 1.1.1.2]
 The following example creates/modifies the router LSA TOS metric header of the
 router LSA link for the OSPFv2 link state update packet header: (A router LSA
 link handle lsaLinkHdl must already exist)
 set RStatus [ sth::traffic_config_ospf -mode create\
 -type update_router_lsa_tos\
 -stream_id $strHdl\
 -phandle $lsaLinkHdl\
 -ospf_router_lsa_tos_num 2\
 -ospf_router_lsa_tos_type "1 3"]
 set LsaTosHdl [lindex [keylget RStatus router_lsa_tos_handle] 0]
 set RStatus [ sth::traffic_config_ospf -mode modify\
 -type update_router_lsa_tos\
 -stream_id $strHdl\
 -handle $LsaTosHdl\
 -ospf_router_lsa_tos_type "2"\
 -ospf_router_lsa_tos_reserved 12\
 -ospf_router_lsa_tos_metric 11]
 The following example creates an LSA TOS metric header of the summary LSA and
 ABSR-summary LSA for the OSPFv2 link state update packet header: (a
 summary/ABSR-summary LSA link handle summaryLsaHdl/summaryasbrLsaHdl must
 already exist)
 set RStatus [ sth::traffic_config_ospf -mode create\
 -stream_id $strHdl\
 -type update_summary_lsa_tos\
 -phandle $summaryLsaHdl\
 -ospf_summary_lsa_tos_num 3\
 -ospf_summary_lsa_tos_reserved "1 2 3"\
 -ospf_summary_lsa_tos_metric "10 11 12"]
 set tosHdl [lindex [keylget RStatus summary_lsa_tos_handle] 1]
 set RStatus [ sth::traffic_config_ospf -mode create\
 -stream_id $strHdl\
 -type update_summary_lsa_tos\
 -phandle $summaryasbrLsaHdl\
 -ospf_summary_lsa_tos_num 3\
 -ospf_summary_lsa_tos_reserved "1 2 3"\
 -ospf_summary_lsa_tos_metric "10 11 12"]
 set AsbrtosHdl [lindex [keylget RStatus summary_lsa_tos_handle] 1]
 #### HLTAPI for Python ####
 To create an OSPFv2 Database Description packet header with
 two LSA headers: (A stream ID handle must already exist)

 streamblock_ospf_ret = sth.traffic_config_ospf (
 mode = 'create',
 stream_id = stream_id,
Traffic Functions
1157
 type = 'packets',
 ospf_type = 'dd',
 ospf_dd_options = '11111000',
 ospf_auth_type = 'md5',
 ospf_checksum = '0000',
 ospf_router_id = '1.1.1.2',
 ospf_interface_mtu = '4096',
 ospf_auth_value1 = '3',
 ospf_auth_value2 = '4',
 ospf_ls_ad_router = ['1.1.1.1','1.1.2.3'],
 ospf_lsa_header_options= ['00000001','00000000'],
 ospf_lsa_age = ['5','6'],
 ospf_area_id = '0.0.0.1',
 ospf_packets_options= '10101010',
 ospf_lsa_num = '2',
 ospf_ls_seq_number = ['80000001','80000021'],
 ospf_dd_seq_number = '2',
 ospf_ls_link_state_id= ['1.1.1.1','1.1.2.2'],
 ospf_ls_type = ['1','3']);
 Sample Output:
 {'status': '1', 'ospf_handle': 'ospfv2:ospfv2databasedescription1_ospfv2_1291',
 'dd_lsa_handle': 'ospfv2lsaheader1_anon_1496'}

 #### HLTAPI for Perl ####
 To create an OSPFv2 Database Description packet header with
 two LSA headers: (A stream ID handle must already exist)
 my %streamblock_ospf_ret = sth::traffic_config_ospf (
 mode => 'create',
 stream_id => "$stream_id",
 type => 'packets',
 ospf_type => 'dd',
 ospf_dd_options => '11111000',
 ospf_auth_type => 'md5',
 ospf_checksum => '0000',
 ospf_router_id => '1.1.1.2',
 ospf_interface_mtu => '4096',
 ospf_auth_value1 => '3',
 ospf_auth_value2 => '4',
 ospf_ls_ad_router => '1.1.1.1 1.1.2.3 ',
 ospf_lsa_header_options=> '00000001 00000000 ',
 ospf_lsa_age => '5 6 ',
 ospf_area_id => '0.0.0.1',
 ospf_packets_options=> '10101010',
 ospf_lsa_num => '2',
 ospf_ls_seq_number => '80000001 80000021 ',
 ospf_dd_seq_number => '2',
 ospf_ls_link_state_id=> '1.1.1.1 1.1.2.2 ',
 ospf_ls_type => '1 3 ');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'dd_lsa_handle';
 $VAR4 = 'ospfv2lsaheader1_anon_1496',;
 $VAR5 = 'ospf_handle';
 $VAR6 = 'ospfv2:ospfv2databasedescription1_ospfv2_1291';

End of Procedure Header
sth::imix_config
Name:
 sth::imix_config 
Traffic Functions
1158
Purpose:
 Creates an Internet Mix (iMIX) frame size distribution profile and adds iMIX
 frame size definitions to the specified iMIX profile. iMIX traffic (iMIX for
 Internet mix) uses multiple frame sizes. You can use it to simulate real-world
 traffic. There can be up to 16 iMIX frame size definitions under one iMIX
 profile.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::imix_config
 -mode create | -mode add -handle <iMIX profile handle>
 [-name <string>]
 [-seed <integer>]
 [-frame_size <integer>]
 [-frame_length_mode {fixed | random}]
 [-min_frame_size <integer>]
 [-max_frame_size <integer>]
 [-weight <integer>]
Arguments:
 -mode
 Specifies the action to perform. This argument is mandatory.
 Possible values are:

 create - Create an iMIX distribution profile, and a default iMIX
 frame size definition will be created at the same time.

 add - Add iMIX frame size definitions to the specified iMIX
 profile. You must specify -handle.

 -handle
 The handle of the created iMIX profile under which you want to add
 the iMIX frame size definition. It is mandatory for -mode add.

 -name
 The name of the iMIX profile to create.

 -seed
 Used to change the sequence of transmitted frame sizes. If you
 change the value of the seed, frame sizes will be transmitted in
 a different sequence. The default value is 10900842.

 -frame_size
 Specifies the size of the frame length when -frame_length_mode is
 set to fixed. The default value is 128.

 -frame_length_mode
 Specifies how Spirent HLTAPI assigns the frame length to a
 specified frame size definition.
 Possible values are:

 fixed - Use the frame length specified by -frame_size.

 random - Spirent HLTAPI assigns a random frame length that ranges
 between -min_frame_size and -max_frame_size.

 The default value is fixed.

 -min_frame_size
 Specify the minimum size of the frame length when
 -frame_length_mode is set to random. The default value is 128.

 -max_frame_size
 Specifies the maximum size of the frame length when
 -frame_length_mode is set to random. The default value is 128.

 -weight
 Specifies the weight of the iMIX frame size definition. A higher
 weight value for this frame size definition, in relation to the
 weight values of other frame size definitions, means more traffic
Traffic Functions
1159
 of this size will be transmitted. The default value is 1.

Description:
 The sth::imix_config function creates an iMIX frame size distribution profile and
 adds iMIX frame size definitions to the specified iMIX profile. Use the -mode
 argument to specify the action to perform. (See the -mode argument description
 for information about the actions.)

 The function returns the handle and the name for the created iMIX profile, which
 you can use to define -frame_size_imix when you specify -frame_size_mode imix in
 the sth::test_rfc2544_config function. (See sth::test_rfc2544_config for more
 information.)

 Note that the value for argument -name must be unique for each iMIX profile created.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status Success (1) or failure (0) of the operation

 handle The handle of the iMIX profile when you create an
 iMIX profile using -mode create

 name The name of the iMIX profile when you create an
 iMIX profile using -mode create

 log An error message (if the operation failed)

Examples:
 To create an iMIX profile:
 set imix_ret [::sth::imix_config \
 -mode create\
 -name imix1\
 -frame_size 256\
 -weight 8]
 Sample Output:
 {status 1} {handle framelengthdistribution1} {name imix1}
 To add a frame size definition to the specified iMIX file:
 set imix [keylget imix_ret handle]
 set imix_ret [::sth::imix_config \
 -mode add\
 -handle $imix\
 -frame_length_mode random\
 -min_frame_size 128\
 -max_frame_size 256\
 -weight 10]
 Sample Output:
 {status 1}
Note:
 None.
End of Procedure Header
sth::traffic_control
Name:
 sth::traffic_control
Purpose:
 Controls traffic generation on the specified test ports.
Traffic Functions
1160
Synopsis:
 sth::traffic_control
 -action {run | stop | reset | destroy | clear_stats | poll}
 [-enable_arp {1 | 0}]
 [-elapsed_time {0 | 1}]
 [-db_file {1 | 0}]
 [-latency_bins {} ]
 [-latency_values {} ]
 [-duration <seconds>]
 [-port_handle <list of port handles>]
 [-stream_handle <list of stream handles>]
Arguments:
 -action
 Specifies the action to take on the specified port handles. This
 argument is mandatory. Possible values are:
 run - Starts traffic on all specified test ports.
 stop - Stops traffic generation on all specified test
 ports.
 reset - Clears all statistics and deletes all streams.
 destroy - Deletes all streams. (Same as using
 -traffic_configure -mode remove.)
 clear_stats - Clears all statistics (transmitted and
 received counters) related to streams.

 poll - Polls the generators to determine whether they are
 stopped or are running.
 -enable_arp
 Spirent Extension (for Spirent HLTAPI only).
 Enables or disables ARP on streamblocks, RIP routers,
 PPPoE clients/servers or other hosts. Possible values are 1 and 0.
 If it is set to 1, ARP will be enabled. The default value is 1.
 -elapsed_time
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether to return key elapsed_time when you get results
 using the sth::traffic_stats function. Possible values are 0 and
 1. When you set -elapsed_time to 0, Spirent HLTAPI will not return
 elapsed_time in the traffic results. The default value is 1.
 -db_file
 Determines whether to create the Data Base (DB) file to store
 the End of Testing (EOT) results. Possible values are 1 and 0.
 If it is set to 1, a DB file will be created.
 The default value is 1.
 -duration
 Amount of time in seconds for a continuous test to run.
 Tests run continuously for the number of seconds
 specified. You must set "sth::traffic_config -transmit_mode"
 to "continuous".
 -get
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the type of filter to use during a test. Possible
 values are described below:

 tos - Adds a filter for IPv4 ToS.
 dscp - Adds a filter for IPv4 DSCP.
 vlan_pri - Adds a filter for VLAN priority.
 vlan_pri_inner - Adds a filter for inner VLAN priority.
Traffic Functions
1161
 vlan_id - Adds a filter for VLAN ID.
 vlan_id_inner - Adds a filter for inner VLAN ID.
 -port_handle
 Specifies the handle(s) of the port(s) on which to control
 traffic. A port_handle is a value that uniquely identifies a
 port on a chassis. To apply the function to all ports, specify
 all instead of one handle (for example, -port_handle all).
 -latency_bins
 Specifies the number of latency bins. Always choose the
 first n number of preset buckets.
 -latency_values
 Specifies the latency bucket values. You can enter a maximum
 of 15 values.
 For example, if you specify the following arguments:
 sth::traffic_control -latency_bins 3 \
 -latency_values 0.1 0.2 0.3 0.4 0.5 0.6
 Then the following values are sent to Spirent HLTAPI:
 0.1 0.2 0.3 0.4
 -stream_handle
 Specifies the stream handle(s) by which to start or stop the
 specified streamblock(s). You can specify this argument only when
 -action is set to run or stop. If -port_handle and -stream_handle
 are both specified, -port_handle will take effect.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 stopped Stopped (1) or Running (0)
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Description:
 The traffic_control function manages streams of traffic on the
 specified test ports. You use this function to perform the following
 actions:
 - Start and stop traffic

 - Start and stop the specified streamblock
 - Synchronize traffic generation
 - Determine status
 - Reset the traffic generators and result counters
When you are running interactive tests, note that if you configure one port
and start traffic on that port, and then wait a while before configuring
another port and starting traffic on it, all of the port counters will be
reset at the moment you start traffic on the second port.
Examples: Please see Sample Input and Sample Output below.
Sample Input:
 #### HLTAPI for Tcl ####
 The following example starts all the traffic on the specified port:
 set returnCtrlKlist [sth::traffic_control -action run -port_handle 84];
 keylget returnCtrlKlist status iStatus;
 if {$iStatus == 0} {
 keylget returnCtrlKlist log result;
Traffic Functions
1162
 puts $result;
 }
 The following example starts the specified streamblock:
 sth::traffic_control -stream_handle streamHandle \
 -action run \
 -duration 5 \
 The following example stops the specified streamblock:

 sth::traffic_control -stream_handle streamHandle \
 -action stop \
 The following example starts traffic on all ports for 200 seconds:
 set returnedString [sth::traffic_control -action run
 -duration 200]
 The following example clears the statistics on all ports:

 set returnedString [sth::traffic_control -port_handle all
 -action clear_stats]

 The following example polls states of generators on all ports:
 set returnedString [sth::traffic_control -port_handle all
 -action poll]
 Output: {port1-generator1 RUNNING} {port2-generator2 RUNNING} {status 1}
 Sample Output:
 On success:
 {status 1} {log {}}
 On failure:
 {status 0} {log {<errorMsg>}}
 #### HLTAPI for Python ####
 The following example starts the specified ports:

 traffic_ctrl_ret = sth.traffic_control (
 port_handle = [port_handle[0],port_handle[1]],
 action = 'run');

 Sample Output: {'status': '1'}
 #### HLTAPI for Perl ####
 The following example starts the specified ports:
 my %traffic_ctrl_ret = sth::traffic_control (
 port_handle => "$hport[1] $hport[2] ",
 action => 'run');
 Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
Notes:
 1) The traffic_control function is non-blocking; it starts the action and
 then returns control to the Tcl shell environment immediately. To
 determine if an action has completed, use the "poll" action.
End of Procedure Header
sth::traffic_stats
Traffic Functions
1163
Name:
 sth::traffic_stats
Purpose:
 Retrieves statistical information about traffic streams.
Synopsis:
 sth::traffic_stats
 -port_handle <port_handle>
 -mode {aggregate | out_of_filter | all} |
 -mode streams | detailed_streams
 [-streams <list of stream IDs>]
 [-rx_port_handle <handle>]
 [-detailed_rx_stats {0|1}]
 [-properties <property_list>]
Arguments:

 -port_handle
 Specifies one or more ports from which to gather transmitted
 (tx) and received (rx) statistics. This argument is mandatory.
 -mode
 Specifies the type of statistics to collect:
 aggregate - Collect all transmitted (tx) and
 received (rx) packets
 out_of_filter - Collect received (rx) packets that do
 not match the filter

 detailed_streams - Collect detailed statistics for individual streams
 streams - Collect detailed test stream statistics
 all - Collect all statistics
 This argument is mandatory.
 -streams
 Specifies a stream ID for which to gather statistics.
 If -streams is not specified, then this function retrieves
 statistics for all streams under the specified port(s). If
 -streams and -port_handle are both specified, the statistics for
 the specific stream(s) will be retrieved, even if the stream is
 not created on the specified port.
 -rx_port_handle
 Retrieves real-time or EOT steam results from the receiving
 port. You can specify this argument only when -mode is set
 to streams.
 -detailed_rx_stats
 Spirent Extension (for Spirent HLTAPI only).
 Determines whether to include the rx stream statistics
 per port. Possible values are 0 and 1. When it is set to 0, only
 the aggregate rx statistics on all rx ports will be displayed.
 When it is set to 1, the rx statistics for each rx port will be
 included in the keyed list of the port handle on which the
 streamblock is created. The default is 0.

 -properties
 Spirent Extension (for Spirent HLTAPI only).
 Specifies a set of analyzer/generator attributes for which you
 want the results. You can use the -db_file argument with the
 corresponding action in the sth::traffic_control function to
 determine whether to return EOT or run-time results. If no
 property is specified, all properties will be returned. This
 argument is only available for -mode aggregate or stream. The
 available properties are listed below:
 
Traffic Functions
1164
 For -mode aggregate (EOT and run-time):

 rx.total_pkt_bytes tx.total_pkt_bytes
 rx.fcoe_frame_rate tx.total_pkts
 rx.udp_pkts tx.raw_pkt_count
 rx.tcp_checksum_errors tx.pkt_bit_rate
 rx.total_pkts tx.pkt_byte_count
 rx.pfc_frame_rate tx.pkt_rate
 rx.fcoe_frame_count tx.pfc_frame_count
 rx.tcp_pkts tx.raw_pkt_rate
 rx.pkt_bit_rate tx.total_pkt_rate
 rx.raw_pkt_count tx.pkt_count
 rx.pkt_byte_count
 rx.pkt_rate
 rx.pfc_frame_count
 rx.total_pkt_rate
 rx.pkt_count

 Note: Not applicable for ip_pkts and elapsed_time

 For -mode stream (EOT and run-time):

 rx.misinserted_pkts tx.total_pkt_bytes
 rx.total_pkt_bytes tx.total_pkt_rate
 rx.prbs_bit_errors tx.total_pkts
 rx.ipv4_outer_present tx.ipv4_outer_present
 rx.min_delay tx.udp_present
 rx.ipv6_outer_present tx.ipv6_present
 rx.max_delay tx.total_pkt_bit_rate
 rx.avg_delay tx.ipv6_outer_present
 rx.duplicate_pkts tx.tcp_present
 rx.out_of_sequence_pkts tx.ipv4_present
 rx.total_pkts
 rx.dropped_pkts
 rx.first_tstamp
 rx.udp_present
 rx.total_pkt_bit_rate
 rx.ipv4_present
 rx.min_pkt_length
 rx.last_tstamp
 rx.total_pkt_rate
 rx.ipv6_present
 rx.max_pkt_length
 rx.rx_port

 Note: Not applicable for elapsed_time.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 <port_handle> The handle(s) of the port(s) on which to retrieve
 statistics.
 <mode> The type of statistics to collect.
 <tx | rx> Indicates if the value refers to a transmitted (tx) or
 received (rx) statistic.
 <attribute> The name of the attribute to which the statistic applies.
 status Success (1) or failure (0) of the operation.
 log An error message (if the operation failed).
Following is a keyed list showing the types of keys returned based on the mode
you specified.
 Note: With EOT results, after you stop the traffic, all rates are set to
 0; therefore, they are not returned in the keyed list.
 *** aggregate statistics ***
 <port handle>.aggregate.<tx|rx>.pkt_count
 <port handle>.aggregate.<tx|rx>.pkt_byte_count
Traffic Functions
1165
 <port handle>.aggregate.<tx|rx>.pkt_rate
 <port handle>.aggregate.<tx|rx>.total_pkts
 <port handle>.aggregate.<tx|rx>.total_pkt_bytes
 <port handle>.aggregate.<tx|rx>.total_pkt_rate
 <port handle>.aggregate.<tx|rx>.tcp_pkts
 <port handle>.aggregate.<tx|rx>.tcp_checksum_errors
 <port handle>.aggregate.<tx|rx>.udp_pkts
 <port handle>.aggregate.<tx|rx>.ip_pkts
 <port handle>.aggregate.<tx|rx>.pfc_frame_count
 <port handle>.aggregate.rx.pfc_frame_rate
 <port handle>.aggregate.rx.fcoe_frame_rate
 <port handle>.aggregate.rx.fcoe_frame_count
TOS Stats
 <porthandle>.aggregate.rx.tos.<value>.count
 <porthandle>.aggregate.rx.tos.<value>.rate_pps
 <porthandle>.aggregate.rx.tos.<value>.rate_bps
 <porthandle>.aggregate.rx.prec.<value>.count
 <porthandle>.aggregate.rx.prec.<value>.rate_pps
 <porthandle>.aggregate.rx.prec.<value>.rate_bps
 NOTE: "tos.<value>" is used to filter "dBit tBit rbit mBit";
 "prec.<value>" is used to filter precedence filed.
 tx.tos stats are not supported.
Filtered VLAN Stats
 <porthandle>.aggregate.rx.vlan.<value>.count
 <porthandle>.aggregate.rx.vlan.<value>.rate_pps
 <porthandle>.aggregate.rx.vlan.<value>.rate_bps
 Note: you must set -get in sth::traffic_control to vlan_id to filter by VLAN.
Filtered Inner VLAN Stats
 <porthandle>.aggregate.rx. vlan_inner.<value>.count
 <porthandle>.aggregate.rx. vlan_inner.<value>.rate_pps
 <porthandle>.aggregate.rx. vlan_inner.<value>.rate_bps
 Note: you must set -get in sth::traffic_control to vlan_id_inner to
 filter by inner VLAN.
 *** stream statistics ***
 <port handle>.stream.<id>.ipv4_present
 <port handle>.stream.<id>.ipv6_present
 <port handle>.stream.<id>.ipv4_outer_present
 <port handle>.stream.<id>.ipv6_outer_present
 <port handle>.stream.<id>.tcp_present
 <port handle>.stream.<id>.udp_present
 <port handle>.stream.<id>.<rx|tx>.total_pkts
 <port handle>.stream.<id>.<rx|tx>.total_pkt_bytes
 <port handle>.stream.<id>.<rx|tx>.total_pkt_rate
 <port handle>.stream.<id>.<rx|tx>.total_pkt_bit_rate
 <port handle>.stream.<id>.<rx|tx>.min_pkt_length
 <port handle>.stream.<id>.<rx|tx>.max_pkt_length
 <port handle>.stream.<id>.<rx|tx>.avg_delay
 <port handle>.stream.<id>.<rx|tx>.min_delay
 <port handle>.stream.<id>.<rx|tx>.max_delay
 <port handle>.stream.<id>.<rx|tx>.misinserted_pkts
 <port handle>.stream.<id>.<rx|tx>.out_of_sequence_pkts
 <port handle>.stream.<id>.<rx|tx>.misinserted_pkt_rate
 <port handle>.stream.<id>.<rx|tx>.prbs_bit_error_rate
 <port handle>.stream.<id>.<rx|tx>.prbs_bit_errors
 <port handle>.stream.<id>.<rx|tx>.first_tstamp
 <port handle>.stream.<id>.<rx|tx>.last_tstamp
 <port handle>.stream.<id>.<rx|tx>.Max
 <port handle>.stream.<id>.<rx|tx>.Min
 <port handle>.stream.<id>.<rx|tx>.pkt_byte_rate
 <port handle>.stream.<id>.rx.latency_bin.<bin number>.pkt_byte_rate
 <port handle>.stream.<id>.rx.rx_port
 <port handle>.stream.<id>.rx.latency_bin.<bin number>.total_pkts
Traffic Functions
1166
 <port handle>.stream.<id>.rx. duplicate_pkts
 Spirent Extension (for Spirent HLTAPI only). Number of duplicate packets.
 <port handle>.stream.<id>.rx. dropped_pkts
 Spirent Extension (for Spirent HLTAPI only). Number of dropped packets.
Description:
 Depending on the configuration of -db_file with the corresponding action in
 the sth::traffic_control function, the sth::traffic_stats function returns EOT
 results (by accessing the database file) or run-time results (by subscription of
 result objects) of the traffic transmitted and received at the specified port(s).
 You can direct Spirent HLTAPI analyzer to retrieve various combinations of
 statistics:
 - All transmitted and received packets, identified by port
 - Statistics organized by stream
 - All statistics

 The function returns the requested type of data and a status value (1 for
 success). If there is an error, the function returns the status value (0)
 and an error message. Function return values are formatted as a keyed list
 (supported by the Tcl extension software - TclX). Use the TclX function
 keylget to retrieve data from the keyed list.
 You can also retrieve a desired set of analyzer/generator attributes for which you
 want results by specifying the -properties argument.
 The key values to access the data returned from the traffic_stats function
 are:
 <port_handle>.<mode>.<tx|rx>.<attribute>
 <port_handle> identifies a port on the chassis, specified as an integer.
 <mode> indicates the type of statistics to collect.
 <tx | rx> specifies whether the statistic was transmitted or received.
 <attribute> specifies the name of the attribute to which the statistic
 applies such as avg_pkt_length, pkt_count, and pkt_rate,
 status
 The key "status" retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log
 The key "log" retrieves a message describing the last error that occurred
 during the operation. If the operation was successful - {status 1} - the
 log value is null.
Examples:
 #### HLTAPI for Tcl ####
 1/5/4.aggregate.rx.tos.5.count
 The count statistic indicates the count of packets received with the
 TOS values displayed in packets per second, as well as, bits per
 second.
 The rate statistic indicates the average rate of packets received with the
 TOS values in packets per second, as well as bits per second.
 The vendor equipment should be able to collect and calculate the rate in a
 one time instance and over an average rate of the full run time.
 set vlanPriority 3
 set chassis 192.168.2.1
 set txport 192.168.2.1/1/1
 set rxport 192.168.2.1/1/2
 set connectList [ <vendor>::connect -device $chassis -port_list { $txport
 $rxport } ]
 set txportHandle [ keylget $chassis port_handle.$chassis.$txport ]
 set rxportHandle [ keylget $chassis port_handle.$chassis.$rxport ]
Traffic Functions
1167
 set trafficHandle [ <vendor>::traffic_config -port_handle $txportHandle \
 -l2_encap ethernet_ii \
 -vlan_id 1 \
 -vlan_user_priority $vlanPriority \
 -transmit_mode continuous -rate_pps 10000\
 -length_mode fixed -l3_length 50 \
 -l3_protocol ipv4 \
 -ip_src_addr $ipsrc.1.1.1 \
 -ip_dst_addr $ipdst.1.1.1 \
 -ip_dst_step 0.0.1.0 \
 -mac_src $macsrc.10.10.10.10.10 \
 -mac_dst $macdst.10.10.10.10.10 ]
 <vendor>::traffic_control -port_handle $rxportHandle -action run
 <vendor>::traffic_control -port_handle $txportHandle -action run
 after 3000
 <vendor>::traffic_control -port_handle $rxportHandle \
 -get <streams aggregate tos vlan_pri latency> -mode run
 (The -get above is only there as a method for the vendor to know what type
 of filter to setup if they need it)
 <vendor>::traffic_control -port_handle $txportHandle -action stop
 <vendor>::traffic_control -port_handle $rxportHandle -action stop
 set trafficStats [ <vendor>::traffic_stats -port_handle $rxportHandle -mode
 aggregate ]
 set tosStat [ keylget $trafficStats
 -$rxportHandle.aggregate.rx.tos.$vlanPriority.count ]
 The following example retrieves traffic results from the specified receiving port:
 sth::traffic_stats -port_handle port1 -mode streams -rx_port_handle port2
 Output:
 {port2 {{stream {{streamblock1 {{rx {{total_pkt_bytes 21935848}
 {ipv6_outer_present 0}{max_delay 0.1} {total_pkts 161293} {dropped_pkts 0}
 {min_pkt_length 136}{prbs_bit_errors 0} {duplicate_pkts 0} {first_tstamp 0}
 {udp_present 0}{total_pkt_rate 1000} {ipv4_outer_present 0} {min_delay 0.09}
 {avg_delay 0.096}{out_of_sequence_pkts 0} {misinserted_pkt_rate 0}
 {prbs_bit_error_rate 0}{ipv4_present 1} {ipv6_present 0} {pkt_byte_rate 135999}
 {out_of_pkt_frame_rate 0}{misinserted_pkts 0} {total_pkt_bit_rate 1087992}
 {last_tstamp 0}{Min 136}{max_pkt_length 136} {Max 136} {tcp_present 0}}}}}}}}}
 {port1 {{stream {{streamblock1
 {{tx {{total_pkt_bytes 21907288} {ipv4_outer_present 0} {ipv6_outer_present 0}
 {total_pkts 161083} {udp_present 0} {total_pkt_bit_rate 1087776} {ipv4_present 1}
 {elapsed_time 161} {total_pkt_rate 1000} {ipv6_present 0}
 {tcp_present 0}}}}}}}}}{status 1}

 The following example retrieves traffic results from all streams under the
 specified ports:
 sth::traffic_stats -port_handle $hport1 $hport2 -mode streams

 Output:
 {port1 {{stream {{streamblock1 {{rx {{total_pkt_bytes 3744000000}
 {ipv6_outer_present 0} {max_delay 0.11} {total_pkts 300000} {dropped_pkts 0}
 {min_pkt_length 12480} {rx_port {10.61.39.164-9-2 //9/2}} {prbs_bit_errors 0}
 {duplicate_pkts 0} {first_tstamp 0} {udp_present 0} {total_pkt_rate 0}
 {ipv4_outer_present 0} {min_delay 0.1} {avg_delay 0.1} {out_of_sequence_pkts 0}
 {misinserted_pkt_rate 0} {prbs_bit_error_rate 0} {ipv4_present 0}
 {ipv6_present0} {pkt_byte_rate 0} {out_of_pkt_frame_rate 0} {misinserted_pkts 0}
 {total_pkt_bit_rate 0} {last_tstamp 0} {Min 12480} {max_pkt_length 12480}
 {Max 12480} {tcp_present 0}}} {tx {{total_pkt_bytes 3744000000}
 {ipv4_outer_present 0} {ipv6_outer_present 0} {total_pkts 300000} {udp_present 0}
 {total_pkt_bit_rate 0} {ipv4_present 0} {elapsed_time 0} {total_pkt_rate 0}
 {ipv6_present 0} {tcp_present 0}}}}}}}}} {port2 {{stream {{streamblock2 {{rx
 {{total_pkt_bytes 3744000000} {ipv6_outer_present 0} {max_delay 0.11}
 {total_pkts 300000} {dropped_pkts 0} {min_pkt_length 12480} {rx_port
 {10.61.39.164-9-1 //9/1}} {prbs_bit_errors 0} {duplicate_pkts 0} {first_tstamp
 0} {udp_present 0} {total_pkt_rate 0} {ipv4_outer_present 0} {min_delay 0.1}
 {avg_delay 0.107} {out_of_sequence_pkts 0} {misinserted_pkt_rate 0}
 {prbs_bit_error_rate 0} {ipv4_present 0} {ipv6_present 0} {pkt_byte_rate 0}
 {out_of_pkt_frame_rate 0} {misinserted_pkts 0} {total_pkt_bit_rate 0}
 {last_tstamp 0} {Min 12480} {max_pkt_length 12480} {Max 12480} {tcp_present 0}}}
 {tx {{total_pkt_bytes 3744000000} {ipv4_outer_present 0} {ipv6_outer_present 0}
Traffic Functions
1168
 {total_pkts 300000} {udp_present 0} {total_pkt_bit_rate 0} {ipv4_present 0}
 {elapsed_time 0} {total_pkt_rate 0} {ipv6_present 0} {tcp_present 0}}}}}}}}}
 {status 1}

Sample Input:
 set statsKeyList [sth::traffic_stats -mode aggregate -port_handle 60];
 keylget statsKeyList status iStatus;
 if {$iStatus == 0} {
 keylget statsKeyList log result;
 puts $result;
 }
Sample Output:
 On success:
 {status 1} {log {}}
 On failure:
 {status 0} {log {<errorMsg>}}
 The following example retrieves a desired set of aggregate results using -properties:
 set rtn [sth::traffic_stats \
 -port_handle $portHndList \
 -properties "rx.total_pkt_bytes tx.total_pkt_bytes"\
 -mode aggregate]

 Output:
 {port1 {{aggregate {{rx {{total_pkt_bytes 960}}} {tx {{total_pkt_bytes
 246410112}}}}}}} {port2 {{aggregate {{rx {{total_pkt_bytes 245020480}}} {tx
 {{total_pkt_bytes 640}}}}}}} {status 1}
 The following example retrieves a desired set of attributes in -mode streams:

 set rtn [sth::traffic_stats \
 -port_handle $portList \
 -mode streams\
 -properties "rx.total_pkt_bytes tx.total_pkt_bytes"\
 -streams "$s1 $s2"]
 Output:
 {port1 {{stream {{streamblock1 {{rx {{total_pkt_bytes 257354402}}} {tx
 {{total_pkt_bytes 48258}}}}} {streamblock2 {{rx {{total_pkt_bytes 39650432}}} {tx
 {{total_pkt_bytes 41528192}}}}}}}}} {status 1}

 The following example retrieves a desired set of attributes in -mode detailed_streams:

 set rtn [sth::traffic_stats \
 -port_handle "$port1 $port2"\
 -mode detailed_streams \
 -properties "tx.tcp_present rx.total_pkt_bytes \
 -streams "$s1 $s2" \
 ]
 Output:
 {port1 {{stream {{streamblock1 {{rx {{0 {{total_pkt_bytes 662230784}}} {1
 {{total_pkt_bytes 662230784}}}}} {tx {{0 {{tcp_present 0}}} {1 {{tcp_present
 0}}}}}}}}}}} {port2 {{stream {{streamblock2 {{rx {{0 {{total_pkt_bytes
 662230784}}} {1 {{total_pkt_bytes 662230784}}}}} {tx {{0 {{tcp_present 0}}} {1
 {{tcp_present 0}}}}}}}}}}} {status 1}
 #### HLTAPI for Python ####
 The following example retrieves traffic results from all streams under the
 specified ports:
 sth.traffic_stats (
 port_handle = [port_handle[0],port_handle[1]],
 mode = 'all');
 Sample Output:
 {'status': '1', 'port2': {'aggregate': {'rx': {'pfc_frame_count': '0',
 'pkt_bit_rate': '0', 'pfc_frame_rate': '0', 'pkt_byte_count': '4352',
Traffic Functions
1169
 'tcp_checksum_errors': '0', 'fcoe_frame_count': '0', 'tcp_pkts': '0',
 'pkt_rate': '0', 'total_pkt_rate': '0', 'ip_pkts': '0', 'fcoe_frame_rate': '0',
 'udp_pkts': '0', 'total_pkt_bytes': '4352', 'total_pkts': '38', 'pkt_count':
 '30'}, 'tx': {'pfc_frame_count': '0', 'pkt_bit_rate': '0', 'pkt_count': '0',
 'pkt_rate': '0', 'elapsed_time': '0', 'total_pkt_rate': '0', 'ip_pkts': '0',
 'total_pkt_bytes': '512', 'total_pkts': '8', 'pkt_byte_count': '512'}},
 'stream': {'unknown': {'rx': {'min_pkt_length': '64', 'good_pkt_bit_rate': '0',
 'max_pkt_length': '64', 'total_pkt_rate': '0', 'total_pkt_bytes': '512',
 'total_pkts': '8'}}}}, 'port1': {'aggregate': {'rx': {'pfc_frame_count': '0',
 'pkt_bit_rate': '0', 'pfc_frame_rate': '0', 'pkt_byte_count': '512',
 'tcp_checksum_errors': '0', 'fcoe_frame_count': '0', 'tcp_pkts': '0',
 'pkt_rate': '0', 'total_pkt_rate': '0', 'ip_pkts': '0', 'fcoe_frame_rate': '0',
 'udp_pkts': '0', 'total_pkt_bytes': '512', 'total_pkts': '8', 'pkt_count': '0'},
 'tx': {'pfc_frame_count': '0', 'pkt_bit_rate': '0', 'pkt_count': '30',
 'pkt_rate': '0', 'elapsed_time': '0', 'total_pkt_rate': '0', 'ip_pkts': '30',
 'total_pkt_bytes': '4352', 'total_pkts': '38', 'pkt_byte_count': '4352'}},
 'stream': {'unknown': {'rx': {'min_pkt_length': '64', 'good_pkt_bit_rate': '0',
 'max_pkt_length': '64', 'total_pkt_rate': '0', 'total_pkt_bytes': '512',
 'total_pkts': '8'}}, 'block1': {'rx': {'prbs_bit_errors': '0', 'dropped_pkts':
 '0', 'out_of_sequence_pkts': '0', 'min_pkt_length': '128', 'ipv4_present': '1',
 'duplicate_pkts': '0', 'total_pkt_bit_rate': '0', 'max_pkt_length': '128',
 'total_pkt_rate': '0', 'misinserted_pkts': '0', 'prbs_bit_error_rate': '0',
 'total_pkts': '30', 'tcp_present': '0', 'pkt_byte_rate': '0', 'avg_delay':
 '0.12', 'ipv6_present': '0', 'last_tstamp': '0', 'Max': '128', 'Min': '128',
 'ipv4_outer_present': '0', 'max_delay': '0.12', '_port': '10.61.44.2-6-4 //6/4',
 'ipv6_outer_present': '0', 'udp_present': '0', 'total_pkt_bytes': '3840',
 'out_of_pkt_frame_rate': '0', 'first_tstamp': '0', 'min_delay': '0.12',
 'misinserted_pkt_rate': '0'}, 'tx': {'ipv4_present': '1', 'ipv6_present': '0',
 'total_pkt_bit_rate': '0', 'elapsed_time': '0', 'total_pkt_rate': '0',
 'total_pkts': '30', 'ipv6_outer_present': '0', 'udp_present': '0',
 'total_pkt_bytes': '3840', 'tcp_present': '0', 'ipv4_outer_present': '0'}}}}}
 #### HLTAPI for Perl ####
 The following example retrieves traffic results from all streams under the
 specified ports:
 my %traffic_results_ret = sth::traffic_stats (
 port_handle => "$hport[1] $hport[2] ",
 mode => 'all');
Sample Output:
 $VAR1 = 'port2';
 $VAR2 = {
 'stream' => {
 'unknown' => {
 'rx' => {
 'total_pkt_rate' => '0',
'min_pkt_length' => '64',
'total_pkts' => '8',
'total_pkt_bytes' => '512',
'max_pkt_length' => '64',
'good_pkt_bit_rate' => '0'
 }
 }
 },
 'aggregate' => {
 'tx' => {
 'pkt_bit_rate' => '0',
 'total_pkts' => '8',
 'elapsed_time' => '0',
 'total_pkt_rate' => '0',
 'ip_pkts' => '0',
 'pkt_rate' => '0',
 'total_pkt_bytes' => '512',
 'pkt_count' => '0',
 'pkt_byte_count' => '512',
 'pfc_frame_count' => '0'
 },
 'rx' => {
 'pkt_bit_rate' => '0',
Traffic Functions
1170
 'tcp_pkts' => '0',
 'total_pkts' => '38',
 'tcp_checksum_errors' => '0',
 'pfc_frame_rate' => '0',
 'fcoe_frame_rate' => '0',
 'fcoe_frame_count' => '0',
 'total_pkt_rate' => '0',
 'ip_pkts' => '0',
 'pkt_rate' => '0',
 'total_pkt_bytes' => '4352',
 'pkt_count' => '30',
 'pfc_frame_count' => '0',
 'pkt_byte_count' => '4352',
 'udp_pkts' => '0'
 }
 }
 };
 $VAR3 = 'status';
 $VAR4 = '1';
 ...


Notes:
 1) The keyed list that is returned will contain only the relevant
 parameters. For example, if the generator is running on port 2 and
 analyzer is running on port 1, a call to traffic_stats passing port 2
 will only return the generator statistics. A call to traffic_stats for
 port 2 with the mode set as "streams" will return only the tx-side
 parameter that will be returned in the total_pkts field. of the
 rx-side parameters will be returned.
 2) Do not reset the analyzer (if the stream statistics are mandatory)
 because this will clear the filters.
 3) Elapsed time is returned only if the analyzer is receiving any data.
End of Procedure Header
sth::drv_stats
Name:
 sth::drv_stats
Purpose:
 Returns the statistics for the test using Dynamic Result View (DRV). DRV allows
 you to define custom results view properties that are based on pre-defined
 counters and/or configuration parameters. Custom properties are displayed in the
 results view.
Synopsis
 Spirent Extension (for Spirent HLTAPI only).
 sth::drv_stats
 [-drv_name <string>]
 [-force_load {1|0}]
 [-query_from <object_list>]
 [-group_by <condition_list>]
 [-handle <handle>]
 [-properties <predefined_ID_list>]
 [-size <integer>]
 [-sort_by <properties_list>]
 [-drv_xml <drv_xml_file_name>]
Arguments:
 -drv_xml
 The name of the saved XML file. You can save the DRV
 configuration file from the Spirent TestCenter GUI and use it
 in the script. If you specify -drv_xml, there is no need to
Traffic Functions
1171
 specify other arguments in this function.
 -drv_name
 The name of the dynamic result view. The default value is
 custom_drv.
 -force_load
 Determines whether to re-subscribe to the results view
 according to parameter changes such as port and size.
 Possible values are true and false. The default is false.
 When -force_load is set to false, the related parameter
 changes will not take effect.

 -query_from
 A list of objects to indicate the scope of results. All the
 objects in the list must belong to the same type.
 -group_by
 A list of conditions to indicate how the results will be
 grouped. This argument is only valid for configuration
 properties specified by -properties.

 -handle
 The handle of the dynamic result view returned from the
 procedure. You must specify -handle when you want to refresh
 the DRV results.
 -properties
 A list of property names to indicate the target properties to
 view. You can get the name of the properties on the Spirent
 TestCenter GUI. For example, Streamblock.RxFrameCount and
 Streamblock.TxFrameCount. See Appendix C: Spirent TestCenter
 Properties Available for DRV for a full list of the available
 properties.
 -size
 The maximum number of result records allowed to be returned.
 The default value is 50.
 -sort_by
 A list of properties to indicate the order of results. Each
 property will be in DESC (descending) or ASC (ascending)
 order. For example,

 -sort_by "{Streamblock.RxFrameCount DESC}"

 This argument is only valid for properties specified by
 -properties.

 -where
 A list of conditions to indicate the filter for the result.
 The supported conditions are >, >=, !=, =, < and <=. The
 condition pattern is:
 <property> <condition sign> <value>
 <value> could be a specified integer value or another property.
 For example, -where "Streamblock.RxFrameCount > 0".
 This argument is only valid for properties specified by
 -properties.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)
 
Traffic Functions
1172

 handle The DRV handle, which can be used to create a Comma-Separated
 Values (CSV) result file or refresh the DRV results

 result_count The number of the results

 A keyed list of the results
Description:
 The sth::drv_stats function returns the requested data for specific properties
 and a status value (1 for success). If there is an error, the function
 returns the status value (0) and an error message. Function return values
 are formatted as a keyed list, with property names as keys. For readability
 purposes, the dot delimiter within each property is removed in the keyed list.
 Use the TclX function keylget to retrieve data from the keyed list.
 Besides the DRV configuration with Spirent HLTAPI arguments, you can also use a
 saved XML configuration file of DRV in the script by specifying -drv_xml. If you
 do so, there is no need to specify other arguments in this function.

 The key values to access the data returned from the drv_stats function
 are:

 status
 Retrieves a value indicating the success (1) or failure
 (0) of the operation.
 log
 Retrieves a message describing the last error that occurred
 during the operation. If the operation was successful - {status 1} - the
 log value is null.

 result_count

 The number of the results

 <item$i>.<property-key>
 <item$i> The entry number starting from 0
 <property-key> The property keyed list that is embedded in the primary keyed
 list returned by this function

Examples:
 To retrieve specified properties from port objects:

 set drv_stats [::sth::drv_stats \
 -query_from "$port1 $port2" \
 -drv_name "drv1"\
 -properties "Port.Name Port.RxTotalFrameCount Port.TxTotalFrameCount"\
 -group_by "Port.Name"\
 Sample Output:
 {result_count 2} {item0 {{PortName {10.62.224.8-1-1 //1/1}}
 {PortRxTotalFrameCount 3185148} {PortTxTotalFrameCount 76826}}} {item1
 {{PortName {10.62.2 24.8-1-2 //1/2}} {PortRxTotalFrameCount 3253222}
 {PortTxTotalFrameCount 130984}}} {handle dynamicresultview1} {status 1}

 To retrieve specified properties from streamblock objects:

 set drv_stats [::sth::drv_stats \
 -query_from "$str1 $str2 $str3 $str4"\
 -drv_name "drv2"\
 -properties "Streamblock.PortName Streamblock.Name\
 Streamblock.RxFrameCount Streamblock.TxFrameCount"\
 -where "Streamblock.RxFrameCount != Streamblock.TxFrameCount"\
 ]

 Sample Output:
Traffic Functions
1173
 {result_count 4} {item0 {{StreamblockPortName {10.62.224.8-1-1 //1/1}}
 {StreamblockName {StreamBlock 1}} {StreamblockRxFrameCount 154211}
 {Streamblock TxFrameCount 108613}}} {item1 {{StreamblockPortName
 {10.62.224.8-1-1 //1/1}} {StreamblockName {StreamBlock 3}}
 {StreamblockRxFrameCount 148172} {Strea mblockTxFrameCount 108613}}}
 {item2 {{StreamblockPortName {10.62.224.8-1-2//1/2}}
 {StreamblockName {StreamBlock 2}} {StreamblockRxFrameCount 176701}
 {StreamblockTxFrameCount 156804}}} {item3
 {{StreamblockPortName {10.62.224.8-1-2
 //1/2}} {StreamblockName {StreamBlock 4}} {StreamblockRxFrameCount 17 6708}
 {StreamblockTxFrameCount 156808}}} {handle dynamicresultview2} {status 1}
 To refresh the DRV results:
 set drv_stats [::sth::drv_stats \
 -handle $drv_handle\
 ]

 Sample Output:
 {result_count 4} {item0 {{StreamblockPortName {10.62.224.8-1-1 //1/1}}
 {StreamblockName {StreamBlock 1}} {StreamblockRxFrameCount 368067}
 {Streamblock TxFrameCount 306270}}} {item1 {{StreamblockPortName
 {10.62.224.8-1-1 //1/1}} {StreamblockName {StreamBlock 3}}
 {StreamblockRxFrameCount 362032} {Strea mblockTxFrameCount 306270}}} {item2
 {{StreamblockPortName {10.62.224.8-1-2 //1/2}} {StreamblockName {StreamBlock
 2}} {StreamblockRxFrameCount 389928} {StreamblockTxFrameCount 358786}}}
 {item3 {{StreamblockPortName {10.62.224.8-1-2 //1/2}} {StreamblockName
 {StreamBlock 4}} {StreamblockRxFrameCount 38 9935} {StreamblockTxFrameCount
 358786}}} {handle dynamicresultview2} {status 1}
 The following example uses -sort_by to define the order for the DRV results:

 set traffic_results_drv [::sth::drv_stats \
 -query_from "$port1 $port2" \
 -drv_name "drv1" \
 -properties "Streamblock.RxFrameCount Streamblock.TxFrameCount\
 Streamblock.Name StreamBlock.StreamCount" \
 -sort_by "{Streamblock.RxFrameCount DESC} {Streamblock.Name ASC}"\
 -group_by "Streamblock.Name"\
 ]
 Sample Output:
 {result_count 4}
 {item0 {{StreamblockRxFrameCount 61695} {StreamblockTxFrameCount 61696}
 {StreamblockName StreamBlock_1} {StreamBlockStreamCount 10}}}
 {item1 {{StreamblockRxFrameCount 61690} {StreamblockTxFrameCount 61690}
 {StreamblockName StreamBlock_2} {StreamBlockStreamCount 10}}}
 {item2 {{StreamblockRxFrameCount 61690} {StreamblockTxFrameCount 61690}
 {StreamblockName StreamBlock_3} {StreamBlockStreamCount 10}}}
 {item3 {{StreamblockRxFrameCount 61690} {StreamblockTxFrameCount 61690}
 {StreamblockName StreamBlock_4} {StreamBlockStreamCount 10}}} {handle
 dynamicresultview1} {status 1}

 To use the DRV XML file instead of configuring DRV properties in the script:
 set traffic_results_drv [::sth::drv_stats \
 -drv_xml "D:/HLTAPI/Test/drv_xml_name.xml" \
 ]
Note: None
sth::create_csv_file
Name:
 sth::create_csv_file
Purpose:
 Saves the port level, stream level, or streamblock level results to a .csv
Traffic Functions
1174
 file.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::create_csv_file
 -result_view_handle <result_view_handle>
 [-column_style {display | property}]
 [-file_name <string>]
 [-write_mode {append | overwrite}]
Arguments:
 -column_style
 Specifies the style for column heading names.
 Possible values are:

 display Use the GUI display name for column headings

 property Use the property name for column headings

 The default value is display.
 -file_name
 Specifies the name of the result file to be saved. The default
 value is results.

 -result_view_handle
 Handle of the result view to export. It can either be a
 result data set handle or a DRV handle that is returned
 from the sth::drv_stats function. This argument is mandatory.

 write_mode
 Specifies the result writing mode. Possible values are:

 append Append results to the end of the existing file

 overwrite Overwrite the existing file

 The default value is overwrite.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Description:
 The sth::create_csv_file function saves the port level, stream level, or
 streamblock level results to a .csv file. You must specify a result view handle
 using the -result_view_handle argument.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)
Examples:
 To save the specified DRV results to a .csv file:
 set create_csv_ret [sth::create_csv_file \
 -result_view_handle $drv_handle \
 -file_name "drv_results"\
 -write_mode overwrite]

 Sample Output:
 {status 1}
VXLAN Functions
1175
VXLAN Functions
Functions:
sth::emulation_vxlan_config
sth::emulation_vxlan_control
sth::emulation_vxlan_stats
sth::emulation_vxlan_config
Name:
 sth::emulation_vxlan_config
Purpose:
 Creates, modifies or deletes Virtual eXtensible Local Area Network (VXLAN)
 emulated devices on a Spirent HLTAPI chassis. VXLAN encapsulates MAC frames in
 a UDP header to create a Layer 2 connection across an IP network between two
 vSphere hypervisor hosts. These hosts are known as Virtual Tunnel Endpoints
 (VTEPs) and perform the encapsulation/decapsulation function for the tunnel.
 VXLAN uses IP multicast to associate a VM MAC address with a VTEP IP address.
Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_vxlan_config
 -mode create -port_handle <handle> |
 -mode {modify|delete} -handle <VXLAN_device_handle>
 [-count <integer> ]
 [-encapsulation {ethernet_ii | ethernet_ii_vlan | ethernet_ii_qinq}]
 [-enable_ping_response {1 | 0}]
 [-ip_version {4 | 6}]
 [-intf_ip_addr <a.b.c.d>]
 [-intf_ip_addr_step <a.b.c.d>]
 [-gateway_ip_addr <a.b.c.d>]
 [-gateway_ip_addr_step <a.b.c.d>]
 [-gateway_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_prefix_len <1-32>]
 [-intf_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-intf_ipv6_prefix_len <1-128>]
 [-link_local_ipv6_addr <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-link_local_ipv6_prefix_len <0-128>]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-qinq_incr_mode {inner | outer | both}]
 [-router_id <a.b.c.d>]
 [-router_id_ipv6 <aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh>]
 [-vlan_id_step <0-4095>]
 [-vlan_user_pri <0-7>]
 [-vlan_outer_id <0-4095>]
 [-vlan_outer_id_step <0-4095>]
 [-vlan_outer_user_pri <0-7>]
 [-udp_dst_port <1-63355>]
 [-udp_src_port <1-63355>]
 [-multicast_type {MULTICAST_IGMP | MULTICAST_PIM}]
 [-udp_checksum_enabled {true | false}]
 [-vni <numeric>]
 [-communication_type {MULTICAST_LEARNING | UNICAST_CONFIGURATION}]
 [-multicast_group <a.b.c.d>]
 [-vm_hosts <host_handle>]
 [-vxlansegmenthandle <segment_handle>]

Arguments:
 -port_handle
 The port on which to create the emulated VXLAN device. This
 handle is returned by the sth::connect function. It is mandatory
 for -mode create.
VXLAN Functions
1176

 -handle
 The VXLAN device handle. This argument is mandatory for -mode
 modify and delete.

 -mode
 Specifies the action to perform on the test port. This argument is
 mandatory. Possible values are create, modify and delete.

 create - Creates the emulated VXLAN device on the port specified
 by -port_handle.

 modify - Changes the configuration for the VXLAN device
 identified by the -handle argument.

 delete - Deletes the VXLAN device
 identified by the -handle argument

 -router_id
 Specifies the router ID of the emulated device. The value
 must be in IPv4 format.

 -router_id_ipv6
 Specifies the IPv6 router ID of the emulated device. The value
 must be in IPv6 format.

 -enable_ping_response
 Enables or disables the emulated VTEP device to respond to ping.
 Possible values are 0 (disable) and 1 (enable). The default is 0.
 -ip_version
 Defines the IP version to be used by the emulated VTEP device.
 Possible values are ipv4, ipv6 and ipv46. The default value is
 ipv4.

 -intf_ip_addr
 Specifies the IPv4 address of the interface for the emulated
 VTEP device. The default value is 192.85.1.3.

 -gateway_ip_addr
 Specifies the IPv4 gateway address for the emulated VTEP device.

 -intf_prefix_len
 Specifies the prefix length for the IPv6 address of the emulated
 VTEP device. Possible values range from 1 to 32. The default is 24.

 -intf_ipv6_addr
 Specifies the IPv6 address of the interface for the emulated
 VTEP device.

 -intf_ipv6_prefix_len
 Specifies the prefix length for the IPv6 address of the emulated
 device, possible values range from 0 to 128. The default is 64.

 -gateway_ipv6_addr
 Specifies the IPv6 gateway address for the emulated VTEP device.

 -link_local_ipv6_addr
 Specifies the link local IPv6 address for the emulated device.
 The default value is FE80::0.

 -link_local_ipv6_prefix_len
 Specifies the prefix length for the link local IPv6 address of
 the emulated device. Possible values range from 0 to 128. The
 default is 64.

 -mac_addr
 Specifies the MAC address of the emulated VTEP device.

 -qinq_incr_mode
 Determines which VLAN ID to increment first.
VXLAN Functions
1177
 Possible values are:

 inner - Increments the inner VLAN ID before the outer VLAN ID

 outer - Increments the outer VLAN ID before the inner VLAN ID

 both - Increment both the inner and outer VLAN ID at the same time

 The default value is inner.

 -encapsulation
 Specifies the type of Layer 2 encapsulation.
 Possible values are:

 ethernet_ii - Ethernet II

 ethernet_ii_vlan - Ethernet II with a single VLAN tag

 ethernet_ii_qinq - Ethernet II with two VLAN tags

 The default value is ethernet_ii.

 -vlan_id
 Specifies the starting VLAN ID for the ethernet_ii_vlan
 encapsulation or the ethernet_ii_qinq encapsulation. Possible
 values range from 0 to 4095. The default value is 100. This
 argument is available when -encapsulation is set to
 ethernet_ii_qinq or ethernet_ii_vlan.

 -vlan_user_pri
 Specifies the VLAN user priority assigned to the emulated VTEP
 devices. Possible values range from 0 to 7. The default value is 0.

 -vlan_outer_id
 Specifies the starting outer VLAN ID for the QinQ encapsulation.
 Possible values range from 0 to 4095. The default value is 100.
 This argument is available when -encapsulation is set to
 ethernet_ii_qinq.

 -vlan_outer_user_pri
 Specifies the VLAN priority to assign to the outer VLAN header.
 Possible values range from 0 to 7. The default value is 0.

 -udp_dst_port
 Specifies the UDP port number of the destination VTEP device.
 Possible values range from 1 to 65535. The default is 4789.

 -auto_select_udp_src_port
 Specifies whether to let Spirent HLTAPI generate the UDP
 source port number. Possible values are true and false. The
 default value is true.

 -udp_src_port
 Specifies the UDP port number of the source VTEP device. Possible
 values range from 1 to 65535. The default is 1025. This argument
 is only available when -auto_select_udp_src_port is set to false.

 -multicast_type
 Specifies which kind of multicast will be used to associate a VM
 MAC address with a VTEP IP address. Possible values are
 MULTICAST_IGMP and MULTICAST_PIM. The default is MULTICAST_IGMP.

 -udp_checksum_enabled
 Enables or disables checksums for UDP. Possible values are true
 (enable) and false(disable). The default is false.

 -vni
 Specifies the VXLAN Network Identifier (VNI) value used to
 identify the VXLAN segment. The value must be an integer. The
 default is 1.
 
VXLAN Functions
1178
 -communication_type
 Specifies the method of communication between emulated VTEP
 devices. Possible values are:

 MULTICAST_LEARNING multicast
 UNICAST_CONFIGURATION unicast

 The default value is MULTICAST_LEARNING.

 -multicast_group
 Specifies the IPv4 multicast address for the VXLAN segment. This
 argument is only available when -communication_type is set to
 MULTICAST_LEARNING.

 -vm_hosts
 A list of handles of the VM hosts to be linked to the configured
 VTEP devices.

 -vxlansegmenthandle
 The VXLAN segment handle used to modify VXLAN segment attributes.
Description:
 The sth::emulation_vxlan_config function creates, modifies or deletes one or
 more emulated VXLAN (VETP) devices on the specified port. Use
 sth::emulation_device_config or other protocol-specific functions to create VM
 devices, and sth::emulation_multicast_group_config to create a multicast
 group before you use this function. Use the -mode argument to specify the
 action to perform. (See the -mode argument description for information about
 the actions.)

 When you create a VETP device, use the -port_handle argument to specify
 the port handle that the emulated device will use. (The port
 handle value is contained in the keyed list returned by the connect
 function.)

 During the VTEP creating process, the function establishes the link between the
 VM device and the VETP with argument -vm_hosts. See Examples for a sample
 configuration.

 Note: To modify -vni, -communication_type, -multicast_group or VM hosts, you
 must specify the target VXLAN segment handle using -vxlansegmenthandle.
Arguments Unsupported by Save as HLTAPI:
 This function is currently not supported by Save as HLTAPI.
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log Error message if command returns {status 0}
 handle The VXLAN device handle
 vxlansegmenthandle The VXLAN segment handle
Examples:
 The following example creates an emulated VTEP device:

 set vtep_ret2 [::sth::emulation_vxlan_config\
 -port_handle $port2\
 -mode create\
 -router_id 192.0.0.4\
 -ip_version ipv4\
 -intf_ip_addr 10.10.10.11\
 -intf_ip_addr_step 0.0.0.1\
 -gateway_ip_addr 10.10.10.10\
 -gateway_ip_addr_step 0.0.0.1\
 -intf_prefix_len 24\
 -mac_addr 40:01:02:03:04:05\
 -mac_addr_step 00:00:00:00:00:01\
 -udp_dst_port 4789\
 -auto_select_udp_src_port true\
VXLAN Functions
1179
 -multicast_type MULTICAST_PIM\
 -udp_checksum_enabled false\
 -vni 2\
 -communication_type MULTICAST_LEARNING\
 -multicast_group $macstgroup1\
 -vm_hosts $vm2\
 ]

 Sample Output:

 {handle router2} {vxlansegmenthandle vxlansegmentconfig1} {status 1}
Notes: None
End of Procedure Header
sth::emulation_vxlan_control
Name:
 sth::emulation_vxlan_control
Purpose:
 Starts or stops the created VTEP devices.

Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_vxlan_control
 -action {start | stop}
 [-port_handle <port_handle>]
 [-handle <device_handle>]

Arguments:
 -action
 Specifies the action to perform. This argument is mandatory.
 Possible values are start and stop.

 start - Start the VTEP device

 stop - Stop the VTEP device
 -port_handle
 The port on which the action will be performed. You must specify
 either -port_handle or -handle, but not both.

 -handle
 Specifies the VTEP device handle on which to perform the action.
 You must specify either -port_handle or -handle, but not both.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):

 status $SUCCESS or $FAILURE
 log Error message if command returns {status 0}
Description:
 The sth::emulation_vxlan_control function controls the configured VTEP devices.
Examples:
 To start the specified VTEP device:

 set status [::sth::emulation_vxlan_control -port_handle $port1 -action start]

End of Procedure Header
VXLAN Functions
1180
sth::emulation_vxlan_stats
Name:
 sth::emulation_vxlan_stats
Purpose:
 Retrieves statistics for the VTEP devices configured on the specified test port.

Synopsis:
 Spirent Extension (for Spirent HLTAPI only).
 sth::emulation_vxlan_stats
 [-port_handle <port_handle>]
 [-handle <device_handle>]
Arguments:
 -port_handle
 Specifies the port handle from which to retrieve the statistics.
 You must specify either port_handle or handle, but not both.

 -handle
 Specifies the VXLAN device handle from which to retrieve the
 statistics. You must specify either port_handle or handle, but
 not both.

Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 status $SUCCESS or $FAILURE
 log Error message if command returns {status 0}
 state The state of the VTEP device. Possible values are
 STOPPED and STARTED
 STOPPED - Left multicasts groups
 STARTED - Joined multicast groups (if necessary) and
 sent out ARPs
 learned_binding_count The number of the binding VM devices learned
 load_profile_run_state The state of the load profile
 resolved_vm_macs_count The number of resolved VM MAC addresses
 unresolved_vm_macs_count The number of unresolved VM MAC address
Description:
 The sth::emulation_vxlan_stats function retrieves statistics for all
 emulated VTEP devices configured on a specified port, or statistics for a
 specified VTEP device.

Examples:
 To get the statistics of VTEP devices on the specified ports:

 set results [::sth::emulation_vxlan_stats -port_handle "$port1 $port2"]

 Sample Output:
 {router1 {{unresolved_vm_macs_count 0}{ load_profile_run_state false}
 {resolved_vm_macs_count 1}{ learned_binding_count 1}{ state STARTED}}} {router2
 {{unresolved_vm_macs_count 0}{ load_profile_run_state false}{ resolved_vm_macs_count
 1}{ learned_binding_count 1}{ state STARTED}}} {status 1}

 To get the statistics of the specified device:

 set results [::sth::emulation_vxlan_stats -handle router1]

 Sample Output:
 {router1 {{unresolved_vm_macs_count 0}{ load_profile_run_state false}{
 resolved_vm_macs_count 1 }{learned_binding_count 1}{ state STARTED}}} {status 1}
End of Procedure Header
VPLS Functions
1181
VPLS Functions
Functions:
sth::emulation_l2vpn_pe_config
sth::emulation_vpls_site_config
sth::emulation_l2vpn_pe_config
Name:
 sth::emulation_l2vpn_pe_config
Purpose:
 Creates and configures Provider Edge (PE) routers supporting Virtual Private
 LAN Service (VPLS) on the specified test port of a Spirent TestCenter chassis.
 VPLS is a type of Layer 2 VPN that provides Ethernet-based
 multipoint-to-multipoint communication over
 Internet Protocol /Multi-Protocol Label Switching (IP/MPLS) network. This
 service uses MPLS tunnels between participating provider edge (PE) routers.
 See RFC 4762, "Virtual Private LAN Service (VPLS) Using Label Distribution
 Protocol (LDP) Signaling," and RFC 4665 for more information.
Synopsis:
 sth::emulation_l2vpn_pe_config
 -port_handle <port_handle>
 [-pe_remote_ip_addr <a.b.c.d>]
 [-pe_ip_addr_start <a.b.c.d>]
 [-pe_ip_addr_step <a.b.c.d>
 [-pe_ip_addr_count <1-2056> ]
 [-pe_ip_addr_prefix_length <1-32>]
 [-pe_gateway_ip_addr <a.b.c.d> ]
 [-pe_gateway_ip_addr_step <a.b.c.d> ]
 [-traffic_engineering {0|1}]
Arguments:
 -port_handle
 Specifies the handle of the port on which to create
 the PE router. The PE router refers to the edge router in the
 backbone network and it is connected to the Custom
 Edge (CE) for the access of VPN services. This argument
 is mandatory.
 -pe_remote_ip_addr
 Specifies the interface address of the remote PE router. The
 default is 192.1.0.1. You must specify the value in IPv4 format.
 -pe_ip_addr_start
 Specifies the starting IP address of the emulated PE router.
 The default is 192.85.1.1. You must specify the value
 in IPv4 format.
 -pe_ip_addr_step
 Specifies the step size of the IP address for multiple
 addresses. The default is 0.0.0.1.
 -pe_ip_addr_count
 Specifies the number of unique PE routers to emulate.
 Possible values are from 1 to 2056. The default is 1.
 -pe_ip_addr_prefix_length
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length of the IP address. 
VPLS Functions
1182
 Possible values for IPv4 addresses range from 1 to 32. The
 default is 24.
 -pe_gateway_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Configures the IPv4 gateway address of the PE router. The
 default is 192.85.1.1.
 -pe_gateway_ip_addr_step
 Spirent Extension (for Spirent HLTAPI only).
 Defines the step size of the increment for the IPv4
 gateway address (-pe_gateway_ip_addr) for
 multiple routers. This argument is used with
 the -pe_gateway_ip_addr argument. The default is 0.0.0.1.
Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent
 TestCenter configurations to HLTAPI scripts using Save as HLTAPI. To test
 with these arguments, you must specify them manually as necessary.
 -pe_gateway_ip_addr_step
 -pe_ip_addr_step
 -pe_ip_addr_count
Cisco-specific Arguments:
 -traffic_engineering
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle
 A list of PE handles.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_l2vpn_pe_config function creates and configures VPLS on
 a PE router and returns the handle of the PE router.
 When you create an emulated PE router, use the -port_handle argument to
 specify the Spirent TestCenter port that the emulated router will use. (The
 port handle value is contained in the keyed list returned by the connect
 function.)
Example:
 #### HLTAPI for Tcl ####
 The following example creates and configures a PE router.
 sth::emulation_l2vpn_pe_config -port_handle $p1 \
 -pe_remote_ip_addr 192.168.0.3 \
 -pe_ip_addr_start 192.168.0.1 \
 -pe_ip_addr_step 0.0.0.1 \
 -pe_ip_addr_count 1 \
 -pe_gateway_ip_addr 192.168.0.3 \
 -pe_gateway_ip_addr_step 0.0.0.1 \
 -pe_ip_addr_prefix_length 24 \
 -traffic_engineering 1
Sample Output: {handle router1} {status 1}
 #### HLTAPI for Python ####
 The following example creates and configures a PE router.
VPLS Functions
1183
 device_ret2 = sth.emulation_l2vpn_pe_config (
 port_handle = port_handle[1],
 pe_ip_addr_start = '111.111.111.111',
 pe_gateway_ip_addr = '9.3.0.1',
 pe_ip_addr_prefix_length= '32',
 pe_remote_ip_addr = '1.1.1.4');
Sample Output: {'status': '1', 'handle': 'router1'}

 #### HLTAPI for Perl ####
 The following example creates and configures a PE router.
 my %device_ret2 = sth::emulation_l2vpn_pe_config (
 port_handle => "$hport[2]",
 pe_ip_addr_start => '111.111.111.111',
 pe_gateway_ip_addr => '9.3.0.1',
 pe_ip_addr_prefix_length=> '32',
 pe_remote_ip_addr => '1.1.1.4');
Sample Output:
 $VAR1 = 'status';
 $VAR2 = '1';
 $VAR3 = 'handle';
 $VAR4 = 'router1';
Notes:
 None.
End of Procedure Header
sth::emulation_vpls_site_config
Name:
 sth::emulation_vpls_site_config
Purpose:
 Creates the emulated VPLS CE site. In general, it will create CE hosts.
Synopsis:
 sth::emulation_vpls_site_config
 -port_handle <port_handle>
 -pe_handle <pe_handle_list>
 [-site_count <integer>]
 [-vc_type {4 | 5 | B } ]
 [-vpn_id <0-65535> ]
 [-vpn_id_step <1-4094>]
 [-vc_id <0-65535> ]
 [-vc_id_step <0-4294967295> ]
 [-vlan <0-4095> ]
 [-vlan_step <1-4094> ]
 [-vlan_count <1-4095>]
 [-mtu <1-65535 >]
 [-mac_addr <aa:bb:cc:dd:ee:ff>]
 [-mac_addr_step <aa:bb:cc:dd:ee:ff>]
 [-mac_count <integer>]
 [-vlan_id <0-4095>]
 [-vlan_id_step <1-4094>]
 [-attached_dut_ip_addr <a.b.c.d>]
 [-attached_dut_ip_prefix <integer>]
Arguments:
 -port_handle
 Specifies the handle of the port on which to create
 the VPLS site. It is mandatory that you specify
 either -port_handle or -pe_handle. You can specify
 both of these arguments only when the PE routers
VPLS Functions
1184
 are created on the port defined by -port_handle.
 -pe_handle
 Specifies the list of PE handles on which to create
 VPLS sites. See "-port_handle".
 -site_count
 Specifies the number of VPLS sites to create. The default is 1.

 -vpn_id
 Specifies the VPN ID of the site. Possible values are from 0 to
 65535.

 -vc_id
 The virtual circuit identifier for IP over ATM interfaces.
 A Virtual Circuit Identifier (VCI) is a unique identifier for
 a particular virtual circuit on a network. It is a 16-bit
 field in the header of an ATM cell. The VCI, together with
 the VPI (Virtual Path Identifier) identifies the next
 destination of a cell as it passes through a series of ATM
 switches on its way to its destination. Possible values range
 from 0 to 65535.

 -vc_id_step
 Defines the step size in which the VCI value is
 incremented for the emulation of clients over
 ATM interfaces. This argument is valid for ATM interfaces
 only. Possible values are 0 to 4294967295. The default is 1.
 -vlan
 The VLAN ID of the first site. Used to configure refresh
 reduction capabilities as per RFC 2961. Possible values range
 from 0 to 4095. The default is 1.

 -vlan_step
 The step size by which the Site VLAN value is incremented.
 Possible step values range from 1 to 4094. The default is 1.
 -vlan_count
 Sets the number of Site VLAN IDs to use when generating VPLS
 sessions or tunnels. Spirent HLTAPI assigns VLAN membership in
 round-robin fashion. Possible values range from 1 to 4095. The
 default is 1.

 -mtu
 Maximum Transmission Unit, excluding encapsulation overhead,
 for the egress packet interface transmitting the de-
 capsulated PDU. Possible values are 1 to 65535. The default
 is 1500. This is the advertised MTU value in database
 entries sent to other routers created on the Spirent
 TestCenter interface.
 -mac_addr
 Indicates the starting MAC address in the address pool.

 -mac_addr_step
 Specifies the increment to use when selecting the next MAC
 address.
 -mac_count
 Defines the number of MAC addresses in the address pool. The
 number of MAC addresses determines the number of stations within
 the VPLS site. If you enable VLAN addresses, type the number
 of addresses per VLAN ID in the address pool. The default is
 1.
 -vlan_id
 Defines the first VLAN ID for a range of customer VLANs.Possible
 values range from 0 to 4095. The default is 1.
 -vlan_id_step
 Defines the step size by which the customer VLAN ID value is 
VPLS Functions
1185
 incremented. Possible values range from 1 to 4094. The default is 1.
 -attached_dut_ip_addr
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the IP address of the Device Under Test (DUT). When the
 created site is a PE router and is connected to the DUT directly,
 you must specify this argument and -attached_dut_ip_prefix. This
 value must be in IPv4 format.
 -attached_dut_ip_prefix
 Spirent Extension (for Spirent HLTAPI only).
 Specifies the prefix length for the DUT IP address. When
 the created site is a PE router and is connected to the DUT
 directly, you must specify this argument and
 -attached_dut_ip_addr.

Arguments Unsupported by Save as HLTAPI:
 The following Spirent HLTAPI arguments are currently not supported by the Save as
 HLTAPI function. They will not be generated when you save Spirent TestCenter
 configurations to HLTAPI scripts using Save as HLTAPI. To test with these
 arguments, you must specify them manually as necessary.
 -mac_addr_step
 -mac_count
 -site_count
 -vc_id_step
 -vlan_id_step
 -vlan_step
 -vlan_count
 -vpls_site_config
Cisco-specific Arguments:
 The following arguments are specific to the Cisco HLTAPI but are not
 supported by Spirent HLTAPI.
 -vc_type
 -vpn_id_step
 -control_word
 -te_label
 -traffic_engineering
Return Values:
 Depending on the specific language that HLTAPI uses, the function returns a
 keyed list/dictionary/hash (See Introduction for more information on return
 value formats) using the following keys (with corresponding data):
 handle
 A list of VPLS CE handles
 log
 Returns debugging information when the status is $FAILURE.
 status
 Success (1) or failure (0) of the operation.
 log
 An error message (if the operation failed).
Description:
 The sth::emulation_vpls_site_config function creates a VPLS CE site.
 The VPLS site emulates a local area network (LAN).
 When you create an emulated VPLS CE site, use the -port_handle argument to
 specify the Spirent TestCenter port that the emulated VPLS site will use for
 communication. (The port handle value is contained in the keyed list
 returned by the connect function.) Use the -pe_handle to create a list of
 PE handles to use to create VPLS CE sites.
 Each VPLS site (that is, each VPN) connects one or more VPN sites to a
 common virtual LAN. A VPN site can use either 802.1q tagged or untagged
 (but not both) Ethernet frames to communicate with the other sites of the 
VPLS Functions
1186
 VPN. In case of tagged frames, each VPN site must use a single VLAN ID for
 the same VPN, but the VLAN ID may differ at each VPN site.
 The interface to which you are connecting the VPLS site may be 802.1Q
 tagged or untagged (but not both) Ethernet frames to communicate with the
 other sites on the VPN. If the interface is tagged, you must specify the
 VLAN ID used to connect the site to the VPN.
 With LDP, each PE router must be configured to participate in a given VPLS,
 and, in addition, be given the addresses of other PEs participating in the
 same VPLS. LDP sessions are then established between these PE routers.
Examples:
 #### HLTAPI for Tcl ####
 The following example creates a VPLS site.
 sth::emulation_vpls_site_config -port_handle $p1 \
 -pe_handle $ vplsPeRouterHandle \
 -site_count 1 \
 -vc_type 5 \
 -vpn_id 10 \
 -vpn_id_step 3\
 -vc_id 20 \
 -vc_id_step 1\
 -vlan 100 \
 -vlan_step 5 \
 -vlan_count 4 \
 -mtu 2000 \
 -mac_addr 00:00:11:00:00:01 \
 -mac_addr_step 00:00:00:00:00:01 \
 -mac_count 3 \
 Sample output: {handle host1} {status 1}
 #### HLTAPI for Python ####
 The following example creates a VPLS site.
 device_ret3 = sth.emulation_vpls_site_config (
 vpn_id = '100',
 attached_dut_ip_addr= '1.1.1.4',
 attached_dut_ip_prefix= '32',
 vc_id = '920',
 port_handle = port_handle[0],
 vlan_id = '920',
 mac_addr = '00:00:11:00:00:01');
 Sample Output: {'status': '1', 'handle': 'host3'}
 #### HLTAPI for Perl ####
 The following example creates a VPLS site.
 my %device_ret3 = sth::emulation_vpls_site_config (
 vpn_id => '100',
 attached_dut_ip_addr=> '1.1.1.4',
 attached_dut_ip_prefix=> '32',
 vc_id => '920',
 port_handle => "$hport[1]",
 vlan_id => '920',
 mac_addr => '00:00:11:00:00:01');
 Sample Output:
 $VAR1 = 'handle';
 $VAR2 = 'host3';
 $VAR3 = 'status';
 $VAR4 = '1';
Notes:
 None.
End of Procedure Header
Save as HLTAPI CLI Mode
1187
Save as HLTAPI CLI Mode
Functions:
sth::hlapi_gen
sth::hlapi_gen
Name:
 sth::hlapi_gen
Purpose:
 Provides the Command Line Interface (CLI) mode of the Save as HLTAPI function to
 generate Spirent HLTAPI script from the existing configuration file (in .xml or
 .tcc format). This is not a Spirent HLTAPI function, so it is only available in Tcl.
Synopsis:
 sth::hlapi_gen
 -config_file <config file>
 [-output <output file>
 [-output_type {tcl|perl|python}]
 [-test_config {0|1}]
 [-test_control {0|1}]
 [-test_run {0|1}]
 [-test_result {0|1}]
 [-pkt_capture {0|1}]
 [-device_info {0|1}]
 [-scaling_test {0|1}]

Arguments:
 -config_file
 Specifies the name of the existing configuration file which will
 be used to generate the Spirent HLTAPI script. The file must be
 in .xml or .tcc format. This argument is mandatory.

 -output
 Specifies the path, name or both for the output Spirent HLTAPI
 script file. If not specified, the output file will use the same
 name and path as the configuration file.

 -output_type
 Specifies the language of the output HLTAPI script. Possible
 values are tcl, perl and python. The default value is tcl.
 -test_config
 Determines whether to include the sth::test_config function in
 the generated script. Possible values are 0 and 1. The default
 value is 0, which means sth::test_config will not be included in
 the generated script.
 -test_control
 Determines whether to include the sth::test_control function in
 the generated script. Possible values are 0 and 1. The default
 value is 0.
 -test_run
 Determines whether to include the control command, such as
 sth::emulation_*_control -start/-stop, in the generated script.
 Possible values are 0 and 1. The default value is 0.
 -test_result
 Determines whether to include the result function in the
 generated script. Possible values are 0 and 1. The default value
 is 0.
 
Save as HLTAPI CLI Mode
1188
 -pkt_capture
 Determines whether to include packet capture related functions in
 the generated script. Possible values are 0 and 1. The default
 value is 0.

 -device_info
 Determines whether to include the sth::device_info function in
 the generated script. Possible values are 0 and 1. The default
 value is 0.

 -scaling_test
 Determines whether to enable the scaling test mode for the test.
 For a scaling test, multiple device blocks will be created with
 only one Spirent HLTAPI function calling. Possible values are 0
 and 1. The default value is 0, which means that one Spirent
 HLTAPI function can only create one device at a time in the
 generated script. For more information on scaling mode, please
 refer to Options for the Save as HLTAPI Wizard in Appendix A.

Return Values:
 None.
Description:
 The sth::hlapi_gen function provides the CLI mode of the Save as HLTAPI function.
 Unlike the GUI mode that requires some additional preparations to register the
 tool in Spirent TestCenter, this mode works immediately the same way as other
 regular Spirent HLTAPI functions do. Before you use this function, you either
 have a previously saved configuration file (.xml or .tcc), or configure a test in
 Spirent TestCenter and save the configurations on the spot.

 The output Spirent HLTAPI script file (.tcl) will be in the same directory with
 the same name as the source configuration file.

 For more information of the Save as HLTAPI function, please refer to
 Appendix A. Save as HLTAPI.

Example:

 ::sth::hlapi_gen -config_file D:/HLTAPI/scriptGen/CR/hltgen_IGMP.xml \
 -output igmp.tcl\
 -test_config 1\
 -test_control 1\
 -test_run 1\
 -test_result 1\
 -pkt_capture 0\
 -device_info 1\
 -scaling_test 1

Notes:
 None.
Sequencer Control Function
1189
Sequencer Control Function
Functions:
sth::sequencer_control
sth::sequencer_control
Name:
 sth::sequencer_control
Purpose:
 Controls the Command Sequencer configurations specified in the
 sth::sequencer_config function
Synopsis
 Spirent Extension (for Spirent HLTAPI only).
 sth::sequencer_control
 [-action {start | stop | step | pause}]

Arguments:
 -action
 Specifies the action to perform. Possible values are described
 below:
 start Starts the Command Sequencer

 stop Stops the Command Sequencer

 pause Pauses the Command Sequencer

 step Executes the current command in the Command Sequencer,
 starting from step 1

 The default value is start.

 Return Values:
 The function returns a keyed list using the following keys (with corresponding
 data:
 status Success (1) or failure (0) of the operation

 log An error message (if the operation failed)

 Description:
 The sth::sequencer_control function starts, stops, pauses the Command Sequencer,
 or executes the current command in a step-by-step fashion. See -action for more
 information on the control actions.

 Before you use this function, there must be existing Command Sequencer
 configurations (procedure sth::sequencer_config) either written manually or
 generated using the Save as HLTAPI tool. See Support for Command Sequencer in
 Appendix A for more information on Save as HLTAPI's support for Command
 Sequencer.

 Example:
 The following example starts the Command Sequencer:
 set ctrl_ret1 [sth::emulation_sequencer_control -action start]

 Sample Output in the HLTAPI console:

 start sequencer .....
 command "Start OSPF"...
 command "Activate/Deactivate StreamBlocks 1"...
Sequencer Control Function
1190
 command "Wait 8"...
 command "Routing: Establish Protocol 3"...
 command "Routing: Verify Routing State 1"...
 command "Activate/Deactivate StreamBlocks 3"...
 command "Iterate Burst Size 1"...
 command "Iterate Combo Command 1"...
 command "Iterate Trial Command 1"...
 command "Iterate Throughput 1"...
 command "Iterate Load Size 1"...
 command "Iterate Frame Size 4"...
 command "Set Traffic Duration 10 sec"...
 command "Wait 9"...
 command "Start StreamBlocks 3"...
 command "Wait 15"...
 command "Start Random Error Insertion 1"...
 command "Start Capture 2"...
 command "Wait 16"...
 command "Add Chart Marker 1"...
 command "Clear Chart Results 1"...
 command "Wait 17"...
 command "Stop Capture 3"...
 command "Stop StreamBlocks 3"...
 Command "Stop Random Error Insertion 1"... 
HLTAPI Wrapper Function
1191
HLTAPI Wrapper Function
Functions:
Appendix: Spirent HLTAPI Wrapper
Appendix: Spirent HLTAPI Wrapper
Name:
 Appendix: Spirent HLTAPI Wrapper

Introduction
 This section describes Spirent HLTAPI Wrapper and its sample usages. A list of
 supported functions is also provided. The target audience is test specialists who
 wish to run automation testing with Spirent TestCenter using another vendor's
 HLTAPI scripts.

 Since Spirent HLTAPI and HLTAPIs from other vendors share many common functions
 and arguments, it is possible to migrate from another vendor's testing system to
 Spirent TestCenter chassis, as long as the test scripts use HLTAPI. Spirent HLTAPI
 Wrapper functions as the mid-layer from another HLTAPI to Spirent HLTAPI. It
 converts functions and arguments that are common to both HLTAPIs involved in the
 current wrapper procedure and resolves those that are unsupported or mismatched.
 Note: Unless otherwise stated, "vendor's HLTAPI" refers to HLTAPI from a vendor
 other than Spirent, and use of "HLTAPI Wrapper" refers to Spirent HLTAPI Wrapper
 through this document.
Arguments Processing
 Spirent HLTAPI Wrapper divides a vendor's HLTAPI arguments into two groups and
 handles them differently.
 Group 1: Common arguments for Spirent HLTAPI and the vendor's HLTAPI These are the
 major group of arguments. The argument naming and the functionality are the same
 for Spirent HLTAPI and the vendor's HLTAPI. Spirent HLTAPI Wrapper maps the
 arguments directly without extra processing. You can find the related description
 of these arguments in the Arguments section under the specific function.

 Group 2: Unsupported or mismatched arguments
 These arguments are specific to a vendor's HLTAPI, or they do not have direct
 equivalents in Spirent HLTAPI. There are two sub-groups for this category:

 Vendor's HLTAPI arguments that affect the testing with Spirent TestCenter:
 These arguments will be input into Spirent HLTAPI Wrapper accordingly. For
 detailed information on the new arguments, refer to HLTAPI Wrapper Related
 Arguments under the specific function. Vendor's HLTAPI arguments that do not
 affect the testing with Spirent TestCenter:
 These arguments will not be processed by HLTAPI Wrapper. Therefore, they will not
 appear in the converted scripts of Spirent HLTAPI. For a list of such arguments,
 refer to HLTAPI Wrapper Related Arguments under the specific function.

 Here is a snippet from the trace log, from which you can observe how Spirent
 HLTAPI Wrapper finishes the arguments conversion.

 2015-05-19_14:13:16
 {::competitor::interface_config -vlan_id_count 1 -gateway_step 0.0.1.0
 -intf_mode ethernet -phy_mode fiber -intf_ip_addr_step 0.0.1.0
 -vlan_id_step 1 -data_integrity 0 -vlan 1 -duplex full -src_mac_addr
 0000.6f01.0102 -connected_count 1 -intf_ip_addr 111.1.1.2 -mode config
 -vlan_id 50 -transmit_mode advanced -port_handle port1 -speed
 ether10000lan -autonegotiation 1 -port_rx_mode
 auto_detect_instrumentation -gateway 111.1.1.1} enter
 2015-05-19_14:13:16 {::sth::interface_config -gateway_step 0.0.1.0 -intf_mode
HLTAPI Wrapper Function
1192
 ethernet -phy_mode fiber -intf_ip_addr_step 0.0.1.0 -vlan_id_step 1 -vlan
 1 -src_mac_addr 0000.6f01.0102 -intf_ip_addr 111.1.1.2 -vlan_id 50 -mode
 config -vlan_user_priority 0 -port_handle port1 -speed ether10000
 -autonegotiation 1 -gateway 111.1.1.1 -enable_ping_response 1}
Using Spirent HLTAPI Wrapper
 To use HLTAPI Wrapper, prepare the target scripts in a vendor's HLTAPI, and
 replace its HLTAPI package with that of Spirent HLTAPI Wrapper and Spirent
 HLTAPI, as shown below:
 ##############################################################
 #Load package SpirentHltApiWrapper and SpirentHltApi
 ##############################################################
 package require SpirentHltApiWrapper
 package require SpirentHltApi
 HLTAPI Wrapper will finish the rest of the operation automatically.

 See Supported Protocols/Functions for a list of functions supported by Spirent
 HLTAPI Wrapper.
Useful Environment Variables
 This section provides a list of environment variables relevant to HLTAPI Wrapper.
 TCLLIBPATH
 The search path for Tcl packages. It is recommended that you add the root path
 for the Spirent library.

 EASY_BASEDIR
 ATS-defined location of the logs and results for the current job. This path
 is used when the STC_LOG_PATH is not defined.

 SPIRENT_VERSION
 Specifies the HLTAPI Wrapper version to use. This version is mapped to
 array ::spirent::spirent_version, which defines the mapping between
 SPIRENT_VERSION and the version of Spirent HLTAPI Wrapper. The
 ::spirent::spirent_version array is defined in the pkgIndex.tcl file located
 in the root Spirent library directory. If this is not defined, then the
 latest version of Spirent HLTAPI Wrapper will be used.

 SPIRENT_OPTIONS
 A list of the optional parameters listed below. The value is a Tcl keyed list.
 For example:
 {STC_LAB_SERVER_ADDRESS 10.1.1.1 STC_LOG_PATH "/this is/the location/"
 STC_LOG_ENABLE TRUE}

 STC_LAB_SERVER_ADDRESS
 Specifies the address for the Spirent TestCenter LabServer. If set, a
 session will be created on the specified LabServer.

 STC_LAB_SERVER_USER
 Specifies the username for the LabServer session, if
 STC_LAB_SERVER_ADDRESS is defined. The $::tcl_platform (user) value is
 used if this variable is not defined. The LabServer session ID is formed
 using command sessionname - user.

 STC_LAB_SERVER_SESSIONAME
 Specifies the session name to use for the LabServer session, if
 STC_LAB_SERVER_ADDRESS is defined. The last part of the EASY_BASEDIR
 environment variable (the job name) is used if this variable is not
 defined. The LabServer session ID is formed using command
 sessionname - user.

 STC_LAB_SERVER_TERMINATE
 Controls when a LabServer session will terminate. By default, the session
 will remain running until the cleanup_session command is called, where it
 will change to ON_LAST_DISCONNECT. The options are CANCEL,
 ON_CLIENT_DISCONNECT, ON_LAST_DISCONNECT, and
 ON_LAST_CONTROLLER_DISCONNECT. Use CANCEL if you want the session to
 remain running after cleanup_session is called. Any existing session with
 the same session ID will be automatically terminated when a new session
HLTAPI Wrapper Function
1193
 is started, regardless of this setting.

 STC_LOG_ENABLE
 Enables/disables Spirent HLTAPI Wrapper logging. The default value is
 false (disable). Note: The Spirent TestCenter BLL and chassis logs are
 always generated, regardless of this setting.

 STC_LOG_PATH
 The path where all logs generated by Spirent are stored. If this is not
 defined, the logs will be stored in the path specified by EASY_BASEDIR.
Supported Protocols/Functions
 This list contains the functions that are supported by HLTAPI Wrapper. There are
 many implementations of functions by different vendors, and inclusion in the list
 does not mean the wrapper supports all implementations of the wrapper from all
 vendors. Nor does it mean that every argument for the listed function is
 supported. For assistance and clarification, please contact Spirent using the
 "Contact Us" section of this document.

 ANCP
 BFD
 BGP
 DHCP Client
 DHCP Server
 EFM
 GRE
 IGMP
 IGMP Querier
 ISIS
 LACP
 LDP
 MLD
 Multicast
 EOAM
 OSPF
 PIM
 RIP
 RSVP
 FCoE
 L2TP
 Packet Capture
 PPP
 PPPOX
 Session
 Traffic

 Note: The vendor specific functions ::get_port_list_from_connect and
 ::capture_packet are also supported by Spirent HLTAPI Wrapper.
Appendix A. Save as HLTAPI
1194
Appendix A. Save as HLTAPI
Description
This appendix provides instructions for installing, configuring and working with the Save as HLTAPI function
for Spirent TestCenter. It also addresses some limitations. Save as HLTAPI is a one-step automation solution
to create Spirent HLTAPI scripts. Using an integrated GUI in Spirent TestCenter, Save as HLTAPI converts
Spirent TestCenter configurations (the configuration file in .xml or .tcc format) directly to Spirent HLTAPI
scripts. The generated scripts can also be manually modified to address different testing needs. This greatly
reduces script authoring time, thus making test automation even more efficient. The Command Line Interface
(CLI) mode of Save as HLTAPI is also available as a regular Spirent HLTAPI function. Note that all the
instructions within this appendix only apply to the GUI mode. For more information on the CLI mode, please
refer to Save as HLTAPI CLI Mode.
Requirements
To create automation scripts with Save as HLTAPI, you must install and configure Spirent TestCenter,
Spirent HLTAPI, and register the Save as HLTAPI tool. Also, please make sure that the tbcload package (1.7
or higher) is included in \Tcl\lib\tclx.x\. For details on the installation of the Spirent TestCenter software and
Spirent HLTAPI, please refer to Getting Started with Spirent TestCenter and HLTAPI Environment Installation
Guide.
To register the Save as HLTAPI tool in Spirent TestCenter:
1. Install Spirent TestCenter and Spirent HLTAPI, and launch Spirent TestCenter.
2. From the menu bar, go to Tools > Options > Tcl/Tk to make sure the Tcl/Tk installation path is correct.
3. Launch the command line window and type the following command:
tclsh c:\Tcl\lib\HLTAPI\tools\toolRegister.tcl stcVersion
where stcVersion is the version of Spirent TestCenter. Make sure the path to toolRegister.tcl is
correct. Figure 1 shows a successful tool registration.
Figure 1. Registering Save as HLTAPI to Spirent TestCenter
4. Restart Spirent TestCenter.
5. In the menu bar, go to Tools > Custom Tools, and then click Save as HLTAPI (Figure 2).
Appendix A. Save as HLTAPI
1195
Figure 2. Save as HLTAPI Option
Scripting with Save as HLTAPI
Before you can generate HLTAPI scripts directly from the configurations in the Spirent TestCenter GUI, you
must configure the target function to test in Spirent TestCenter.
To generate HLTAPI scripts directly from Spirent TestCenter:
1. Click Tools > Custom Tools > Save as HLTAPI to open the Save as HLTAPI Wizard window (Figure 3).
Appendix A. Save as HLTAPI
1196
Figure 3. Save as HLTAPI Wizard
2. Specify the name and the path for the Tcl file to be generated.
3. Customize the scripts by selecting or clearing checkboxes in the wizard window.
The options shown in Figure 3 are described in Options for the Save as HLTAPI Wizard.
4. Click Generate and wait until the process is finished.
You will be prompted to open the script in the text editor.
• Click Yes if you want to open the generated file in Notepad.
• Click No if you want to open it later or in a different text editor.
5. Modify the scripts as necessary.
Options for the Save as HLTAPI Wizard
This section lists and describes each Save as HLTAPI option on in the Save as HLTAPI Wizard.
• Scaling mode - select to generate a HLTAPI script that configures multiple device blocks in one function
by calling the emulation_*_config function once. This is only applicable to those protocols that
support multiple device blocks in one function in Spirent HLTAPI, including ANCP, BFD, BGP, EOAM,
FCoE, IGMP, IGMP Querier, ISIS, LDP, LLDP, MLD, MPLS-VPN, OSPF, PIM, PTP, RIP, RSVP, STP,
and VPLS.
Scaling mode is used for doing a scaling test with Spirent HLTAPI when multiple device blocks are
required. When you select this option, emulation_*_config is called once to create the number of
device blocks specified in the Spirent TestCenter wizard. If you clear this option, emulation_*_config
creates only one device block at a time.
• HLTAPI for Tcl - select to generate HLTAPI script in Tcl (default)
• HLTAPI for Perl - select to generate HLTAPI script in Perl
• HLTAPI for Python - select to generate HLTAPI script in Python
Appendix A. Save as HLTAPI
1197
• Include log command - select to include the test_config function in the generated HLTAPI script
(default)
• Include optimize command - select to include the test_control function in the generated HLTAPI
script (default)
• Include control commands - select to include the emulation_*_control function in the generated
HLTAPI script (default)
• Include result commands - select to include the emulation_*_info function in the generated HLTAPI
script (default)
• Include packet commands - select to include the packet_* function in the generated HLTAPI script
• Include device_info command - select to include the device_info function in the generated HLTAPI
script
• Include traffic commands - select to include traffic functions in the generated HLTAPI scripts (default)
Support for Command Sequencer
Spirent TestCenter Command Sequencer enables you to specify the dynamic or interactive steps that must
occur as part of a test, and to facilitate the specification of pass/fail verdict criteria. With Save as HLTAPI’s
support, you can easily save the Command Sequencer configurations to HLTAPI scripts. In the generated
scripts, there will be no output of original HLTAPI control and results commands. Instead, procedures
sth::sequencer_config and sth::sequencer_control will be output as the Command Sequencer
configurations. Procedure sth::sequencer_config configures the Command Sequencer with native APIs
of Spirent TestCenter, and procedure sth::sequencer_control controls the Command Sequencer. See the
sample script below:

 proc sth:: sequencer_config {dhcp_handle} {
 set dhcp_config_handle [stc::get dhcp_handle -xxconfig]
 set Sequencer(1) [stc::create "Sequencer" -under $system1 ]
 set Dhcpv4StartServerCommand(1) [stc::create "Dhcpv4StartServerCommand" \
 -under $Sequencer(1) -Name {DHCPv4: Start Server 1} ]
 set Dhcpv4BindCommand(1) [stc::create "Dhcpv4BindCommand" \
 -under $Sequencer(1) -Name {DHCPv4: Bind Sessions 2} ]
 set Dhcpv4BindWaitCommand(1) [stc::create "Dhcpv4BindWaitCommand" \
 -under $Sequencer(1) -ErrorOnFailure "TRUE" \
 -Name {DHCPv4: Wait for Sessions to Bind 1} ]
 }

 set cmd_ret1 [sth::sequencer_config $dhcp_handle]
 set ctrl_ret1 [sth::sequencer_control start]

Notes:
• In case of features or protocols that are not supported by HLTAPI or Save as HLTAPI, the device or
protocol handles will still be output as "???" in the generated script of sth::sequencer_config. In order
to make the Command Sequencer work, you must edit the code manually for the unsupported functions.
• RFC-related functions already have their own implementation of Command Sequencer in HLTAPI. If
Command Sequencer is configured for these functions, there will be no output of corresponding commands
in the generated script.
• sth::sequencer_control is an HLTAPI function that provides control options to the Command
Sequencer commands in HLTAPI scripts. For more details, refer to the Sequencer Control function
Save as HLTAPI Scripting Notes
• It is important that you refer to the Arguments Unsupported by S section in each function, where
limitations of Save as HLTAPI are listed. See Limitations of Save as HLTAPI for more details.
• Save as HLTAPI focuses on the conversion of the configuration procedure of a test. Therefore, the
converted scripts do not cover all the modes of control and result retrieval. Instead, it automatically adds
one mode of test control and result retrieval according to a defined test scenario. For example, only
mode –start will be added to start the router on the specified port. To run a different control or obtain test
statistics in another mode with the generated scripts, you must specify those modes manually.
Limitations of Save as HLTAPI
Save as High Level API is a tool you use to improve the script generation of Spirent HLTAPI. However,
only HLTAPI-supported features can be automatically scripted. Also, the arguments of the high-level APIs
Appendix A. Save as HLTAPI
1198
do not have a one-to-one correlation with Spirent Test Center's native API objects, so some functions and
arguments are not supported by Save as HLTAPI. In these cases, you can modify the script manually.
These are the categories of unsupported arguments:
• Action-related arguments such as -mode reset and interface_config -arp_cache_retrieve.
• Arguments that can be functionally substituted by other supported arguments. For example, the supported
argument emulation_ldp_config -cfi achieves the same functionality as the unsupported
-vlan_cfi
• ATM-related arguments
• Cisco-specific arguments unsupported by Spirent HLTAPI (Cisco-specific Arguments in each function)
• Unsupported functions, specifically emulation_isis_topology_route_config,
emulation_ospf_topology_route_config, emulation_mpls_tp_config,
emulation_mpls_tp_port_config, interface_stats, labserver_connect,
labserver_disconnect, load_xml, start_devices, stop_devices, and get_handles
• Arguments that are only available when you specify -mode modify.
Additional arguments will be supported in future releases. Each unsupported argument is listed in the
Arguments Unsupported by Save as HLTAPI section that follows Arguments in each function. Notes on
how to bypass these limitations, if any, are provided as well. It is strongly recommended that you refer to this
list before you use Save as HLTAPI. Unless otherwise stated, the HLTAPI functions can be used with Save
as HLTAPI.
Appendix B. Functions that Support Multiple Protocols on One Device
1199
Appendix B. Functions that Support Multiple Protocols on One Device
The following list includes all protocols in Spirent HLAPI that can be configured on an existing device. To
create multiple protocols on the same device, set -mode to create or enable, which depends on the
specific implementation of the protocol, and set –handle to the device handle over which you would like to
configure the new protocol. See the example below the list. For more detailed information, please refer to the
description of arguments -mode and -handle of the function in this list.
• BGP
• DHCPv4
• DHCPv6
• DHCPv6PD
• IGMP
• IGMP QUERIER
• ISIS
• LDP
• MLD
• OSPFv2
• OSPFv3
• PPPoE
• PIM
• RIP
• RSVP
• SIP
Example
The following example creates a BGP router first, and then configures OSPF over the existing device.
 set device_ret0 [sth::emulation_bgp_config \
 -mode enable \
 -retries 100 \
 -vpls_version VERSION_00 \
 -port_handle $port1 \
 -remote_ip_addr 192.85.1.4 \
 -ip_version 4 \
 -remote_as 2 \
 -local_as 1 \
 -active_connect_enable 1 \
 -local_router_id 192.0.0.1 \
 -mac_address_start 00:10:94:00:00:01 \
 -local_ip_addr 192.85.1.3 \
 -next_hop_ip 192.85.1.4 \
 -netmask 24 \
 ]
 set device_created [keylget device_ret0 handle]

Output:
 {handles emulateddevice1} {handle emulateddevice1} {status 1}

Configuring OSPF over the existing device:
 set device_cfg_ret2 [sth::emulation_ospf_config \
 -mode create \
 -handle $device_created \
 -session_type ospfv2 \
 -authentication_mode none \
 -network_type ptop \
 -option_bits 0x2 \
 -hello_interval 10 \
 -lsa_retransmit_delay 5 \
 -te_metric 0 \
Appendix B. Functions that Support Multiple Protocols on One Device
1200
 -router_priority 0 \
 -te_enable 0 \
 -dead_interval 40 \
 -interface_cost 1 \
 -area_id 0.0.0.0 \
 -graceful_restart_enable 0 \
 ]

Output:
 {session_router ospfv2routerconfig1} {handle emulateddevice1} {handles emulateddevice1}
 {status 1}
 
Appendix C: Result Properties for DRV
1201
Appendix C: Result Properties for DRV
This appendix contains a list of the Spirent TestCenter properties available for the sth::drv_stats
function. All the properties are grouped and listed following the Spirent TestCenter GUI IDs during the
Dynamic Result View (DRV) configuration. There are two general contexts for all the properties: Counter
and Configuration. Depending on the object you specify, a different list of properties will be available. Since
properties under streamblock objects are included under port objects, this appendix does not provide a
separate list for properties only available for streamblocks.
Counter Properties
Counter Properties - Project
GUI ID Property Name
Name Project.Name
Counter Properties - Port
GUI ID Property Name
Header
Name Project.Name
Port Name Port.Name
Basic Counters
Generator rate (bps) Port.GeneratorBitRate
Generator Count (Frames) Port.GeneratorFrameCount
Generator rate (fps) Port.GeneratorFrameRate
Generator Count (bytes) Port.GeneratorOctetCount
Generator rate (Bps) Port.GeneratorOctetRate
Generator Sig Count (Frames) Port.GeneratorSigFrameCount
Generator Sig rate (fps) Port.GeneratorSigFrameRate
Rx Hardware Count Previous
Second (Frames)
Port.RxHwFrameCount
Rx L1 Count (bits) Port.RxL1BitCount
Rx L1 Rate (bps) Port.RxL1BitRate
Rx L1 Rate (Percent) Port.RxL1BitRatePercent
Rx Max line Rate (bps) Port.RxMaxLineRate
Rx Sig Count (Frames) Port.RxSigFrameCount
Rx Sig Rate (fps) Port.RxSigFrameRate
Total Rx Count (bits) Port.RxTotalBitCount
Total Rx Rate (bps) Port.RxTotalBitRate
Total Rx Count (Cells) Port.RxTotalCellCount
Total Rx Rate (cps) Port.RxTotalCellRate
Total Rx Count (Frames) Port.RxTotalFrameCount
Appendix C: Result Properties for DRV
1202
GUI ID Property Name
Total Rx Rate (fps) Port.RxTotalFrameRate
Total Rx Count (bytes) Port.RxTotalOctetCount
Total Rx Rate (Bps) Port.RxTotalOctetRate
Tx Hardware Count Previous
Second (Frames)
Port.TxHwFrameCount
Tx L1 Count (bits) Port.TxL1BitCount
Tx L1 Rate (bps) Port.TxL1BitRate
Tx L1 Rate (Percent) Port.TxL1BitRatePercent
Tx Max line Rate (bps) Port.TxMaxLineRate
Total Tx Count (bits) Port.TxTotalBitCount
Total Tx Rate (bps) Port.TxTotalBitRate
Total Tx Count (Cells) Port.TxTotalCellCount
Total Tx Rate (cps) Port.TxTotalCellRate
Total Tx Count (Frames) Port.TxTotalFrameCount
Total Tx Rate (Bps) Port.TxTotalFrameRate
Total Tx Count (bytes) Port.TxTotalOctetCount
Total Tx Rate (Bps) Port.TxTotalOctetRate
Errors
Generator Abort Count (Frames) Port.GeneratorAbortFrameCount
Generator Abort Rate (fps) Port.GeneratorAbortFrameRate
Generator CRC Error Count
(Frames)
Port.GeneratorCrcErrorFrameCount
Generator CRC Error Rate (fps) Port.GeneratorCrcErrorFrameRate
Generator Jumbo Count (Frames) Port.GeneratorJumboFrameCount
Generator Jumbo Rate (fps) Port.GeneratorJumboFrameRate
Generator L3 Checksum Error Count Port.GeneratorL3ChecksumErrorCount
Generator L3 Header Checksum
Error Rate
Port.GeneratorL3ChecksumErrorRate
Generator L4 Checksum Error Count Port.GeneratorL4ChecksumErrorCount
Generator L4 Header Checksum
Error Rate
Port.GeneratorL4ChecksumErrorRate
Generator Oversize Count (Frames) Port.GeneratorOversizeFrameCount
Generator Oversize Rate (fps) Port.GeneratorOversizeFrameRate
Generator Undersize Count
(Frames)
Port.GeneratorUndersizeFrameCount
Generator Undersize Rate (fbs) Port.GeneratorUndersizeFrameRate
Rx FCS Error Frame Count (Frames) Port.RxFcsErrorFrameCount
Rx FCS Error Rate (fbs) Port.RxFcsErrorFrameRate
Appendix C: Result Properties for DRV
1203
GUI ID Property Name
Rx IPV4 Checksum Error Count Port.RxIpv4ChecksumErrorCount
Rx IPV4 Checksum Error Rate Port.RxIpv4ChecksumErrorRate
Rx Jumbo Frame Count (Frames) Port.RxJumboFrameCount
Rx Jumbo Frame Rate (fps) Port.RxJumboFrameRate
Rx Oversize Frame Count (Frames) Port.RxOversizeFrameCount
Rx Oversize Rate (fps) Port.RxOversizeFrameRate
Rx Pause Frame Count (Frames) Port.RxPauseFrameCount
Rx Pause Rate (fps) Port.RxPauseFrameRate
Rx PRBS Bit Error Count Port.RxPrbsBitErrorCount
Rx PRBS Bit Error Rate (Bps) Port.RxPrbsBitErrorRate
Rx PRBS Error Count (Frames) Port.RxPrbsErrorFrameCount
Rx PRBS Error Rate (fps) Port.RxPrbsErrorFrameRate
Rx PRBS Fill Count (Frames) Port.RxPrbsFillOctetCount
Rx PRBS Fill Rate (Bps) Port.RxPrbsFillOctetRate
Rx TCP Checksum Error Count Port.RxTcpChecksumErrorCount
Rx TCP Checksum Error Rate Port.RxTcpChecksumErrorRate
Rx UDP Checksum Error Count Port.RxUdpChecksumErrorCount
Rx UDP Checksum Error Rate Port.RxUdpChecksumErrorRate
Rx Undersize Frame Count (Frames) Port.RxUndersizeFrameCount
Rx Undersize Rate (fps) Port.RxUndersizeFrameRate
Triggers
ComboTrigger Port.RxComboTriggerCount
ComboTrigger Rate Port.RxComboTriggerRate
Trigger 1 Port.RxTrigger1Count
Trigger 1 Rate Port.RxTrigger1Rate
Trigger 2 Port.RxTrigger2Count
Trigger 2 Rate Port.RxTrigger2Rate
Trigger 3 Port.RxTrigger3Count
Trigger 3 Rate Port.RxTrigger3Rate
Trigger 4 Port.RxTrigger4Count
Trigger 4 Rate Port.RxTrigger4Rate
Trigger 5 Port.RxTrigger5Count
Trigger 5 Rate Port.RxTrigger5Rate
Trigger 6 Port.RxTrigger6Count
Trigger 6 Rate Port.RxTrigger6Rate
Trigger 7 Port.RxTrigger7Count
Appendix C: Result Properties for DRV
1204
GUI ID Property Name
Trigger 7 Rate Port.RxTrigger7Rate
Trigger 8 Port.RxTrigger8Count
Trigger 8 Rate Port.RxTrigger8Rate
Generator IPV4 Count (Frames) Port.GeneratorIpv4FrameCount
Protocol
Generator IPV4 Rate (fps) Port.GeneratorIpv4FrameRate
Generator IPv6 Count (Frames) Port.GeneratorIPv6FrameCount
Generator IPv6 Rate (fps) Port.GeneratorIPv6FrameRate
Generator MPLS Count (Frames) Port.GeneratorMplsFrameCount
Generator MPLS Rate (fps) Port.GeneratorMplsFrameRate
Generator VLAN Count (Frames) Port.GeneratorVlanFrameCount
Generator VLAN Rate (fps) Port.GeneratorVlanFrameRate
Rx FCoE Count (Frames) Port.RxFcoeFrameCount
Rx FCoE Rate (fps) Port.RxFcoeFrameRate
Rx ICMP Count (Frames) Port.RxIcmpFrameCount
Rx ICMP Rate (fps) Port.RxIcmpFrameRate
Rx IPv4 Frame Count (Frames) Port.RxIpv4FrameCount
Rx IPv4 Frame Rate (fps) Port.RxIpv4FrameRate
Rx IPv6 Frame Count (Frames) Port.RxIPv6FrameCount
Rx IPv6 Frame Rate (fps) Port.RxIPv6FrameRate
Rx IPv6 over IPv4 Frame Count
(Frames)
Port.RxIPv6OverIpv4FrameCount
Rx IPv6 over IPv4 Rate (fps) Port.RxIPv6OverIpv4FrameRate
Rx MPLS Frame Count (Frames) Port.RxMplsFrameCount
Rx MPLS Frame Rate (fps) Port.RxMplsFrameRate
Rx TCP Frame Count (Frames) Port.RxTcpFrameCount
Rx TCP Rate (fps) Port.RxTcpFrameRate
Rx UDP Frame Count (Frames) Port.RxUdpFrameCount
Rx UDP Rate (fps) Port.RxUdpFrameRate
Rx VLAN Frame Count (Frames) Port.RxVlanFrameCount
Rx VLAN Rate (fps) Port.RxVlanFrameRate
Total Tx IPv4(Frames) Port.TxTotalIpv4FrameCount
Total Tx IPv4 Rate (fps) Port.TxTotalIpv4FrameRate
Total Tx IPv6(Frames) Port.TxTotalIPv6FrameCount
Total Tx IPv6 Rate (fps) Port.TxTotalIPv6FrameRate
Total Tx MPLS (Frames) Port.TxTotalMplsFrameCount
Appendix C: Result Properties for DRV
1205
GUI ID Property Name
Total Tx MPLS Rate (fps) Port.TxTotalMplsFrameRate
PFC Counters
Rx PFC Count (Frames) Port.RxPfcFrameCount
Rx PFC Rate (fps) Port.RxPfcFrameRate
Rx PFC Priority0 Count (Frames) Port.RxPfcPri0FrameCount
Rx PFC Priority0 Rate (fps) Port.RxPfcPri0FrameRate
Rx PFC Priority0 Quanta Port.RxPfcPri0Quanta
Rx PFC Priority1 Count (Frames) Port.RxPfcPri1FrameCount
Rx PFC Priority1 Rate (fps) Port.RxPfcPri1FrameRate
Rx PFC Priority1 Quanta Port.RxPfcPri1Quanta
Rx PFC Priority2 Count (Frames) Port.RxPfcPri2FrameCount
Rx PFC Priority2 Rate (fps) Port.RxPfcPri2FrameRate
Rx PFC Priority2 Quanta Port.RxPfcPri2Quanta
Rx PFC Priority3 Count (Frames) Port.RxPfcPri3FrameCount
Rx PFC Priority3 Rate (fps) Port.RxPfcPri3FrameRate
Rx PFC Priority3 Quanta Port.RxPfcPri3Quanta
Rx PFC Priority4 Count (Frames) Port.RxPfcPri4FrameCount
Rx PFC Priority4 Rate (fps) Port.RxPfcPri4FrameRate
Rx PFC Priority4 Quanta Port.RxPfcPri4Quanta
Rx PFC Priority5 Count (Frames) Port.RxPfcPri5FrameCount
Rx PFC Priority5 Rate (fps) Port.RxPfcPri5FrameRate
Rx PFC Priority5 Quanta Port.RxPfcPri5Quanta
Rx PFC Priority6 Count (Frames) Port.RxPfcPri6FrameCount
Rx PFC Priority6 Rate (fps) Port.RxPfcPri6FrameRate
Rx PFC Priority6 Quanta Port.RxPfcPri6Quanta
Rx PFC Priority7 Count (Frames) Port.RxPfcPri7FrameCount
Rx PFC Priority7 Rate (fps) Port.RxPfcPri7FrameRate
Rx PFC Priority7 Quanta Port.RxPfcPri7Quanta
Tx PFC Count (Frames) Port.TxPfcFrameCount
Tx PFC Priority0 Count (Frames) Port.TxPfcPri0FrameCount
Tx PFC Priority1 Count (Frames) Port.TxPfcPri1FrameCount
Tx PFC Priority2 Count (Frames) Port.TxPfcPri2FrameCount
Tx PFC Priority3 Count (Frames) Port.TxPfcPri3FrameCount
Tx PFC Priority4 Count (Frames) Port.TxPfcPri4FrameCount
Tx PFC Priority5 Count (Frames) Port.TxPfcPri5FrameCount
Tx PFC Priority6 Count (Frames) Port.TxPfcPri6FrameCount
Appendix C: Result Properties for DRV
1206
GUI ID Property Name
Tx PFC Priority7 Count (Frames) Port.TxPfcPri7FrameCount
User Defined
User Defined Capture Counter 1
(Frames)
Port.RxUserDefinedFrameCount1
User Defined Capture Counter 2
(Frames)
Port.RxUserDefinedFrameCount2
User Defined Capture Counter 3
(Frames)
Port.RxUserDefinedFrameCount3
User Defined Capture Counter 4
(Frames)
Port.RxUserDefinedFrameCount4
User Defined Capture Counter 5
(Frames)
Port.RxUserDefinedFrameCount5
User Defined Capture Counter 6
(Frames)
Port.RxUserDefinedFrameCount6
User Defined Capture Rate 1 (fps) Port.RxUserDefinedFrameRate1
User Defined Capture Rate 2 (fps) Port.RxUserDefinedFrameRate2
User Defined Capture Rate 3 (fps) Port.RxUserDefinedFrameRate3
User Defined Capture Rate 4 (fps) Port.RxUserDefinedFrameRate4
User Defined Capture Rate 5 (fps) Port.RxUserDefinedFrameRate5
User Defined Capture Rate 6 (fps) Port.RxUserDefinedFrameRate6
Latency
Avg Latency (us) Port.AvgLatency
Max Latency (us) Port.MaxLatency
Min Latency (us) Port.MinLatency
RT-Import
Learned RT-Import Port.LearnedRtImport
Upstream IPv4 PE Address Port.UpstreamPeIpv4Addr
Upstream Route Target Port.UpstreamPeRt
PCS - Errors
PCS BIP 8 Error Rate Port.PCS.BIP8ErrorRate
PCS BIP 8 Errors Port.PCS.BIP8Errors
PCS BIP 8 Errors (sec) Port.PCS.BIP8ErrorsErr
PCS BIP 8 Errors Last Sec Port.PCS.BIP8ErrorsLastSec
PCS Consecutive Errors Rate Port.PCS.ConsecErrorRate
PCS Consecutive Errors Port.PCS.ConsecErrors
PCS Consecutive Errors (sec) Port.PCS.ConsecErrorsErr
PCS Consecutive Errors Last Sec Port.PCS.ConsecErrorsLastSec
PCS Length Errors Rate Port.PCS.LengthErrorRate
PCS Length Errors Port.PCS.LengthErrors
Appendix C: Result Properties for DRV
1207
GUI ID Property Name
PCS Length Errors (sec) Port.PCS.LengthErrorsErr
PCS Length Errors Last sec Port.PCS.LengthErrorsLastSec
PCS Marker Errors Rate Port.PCS.MarkerErrorRate
PCS Marker Errors Port.PCS.MarkerErrors
PCS Marker Errors (sec) Port.PCS.MarkerErrorsErr
PCS Marker Errors Last Sec Port.PCS.MarkerErrorsLastSec
PCS SH Errors Rate Port.PCS.SHErrorRate
PCS SH Errors Port.PCS.SHErrors
PCS SH Errors (sec) Port.PCS.SHErrorsErr
PCS SH Errors Last Sec Port.PCS.SHErrorsLastSec
PCS Sync Errors Rate Port.PCS.SyncErrorRate
PCS Sync Errors Port.PCS.SyncErrors
PCS Sync Errors (sec) Port.PCS.SyncErrorsErr
PCS Sync Errors Last sec Port.PCS.SyncErrorsLastSec
PCS - Lane
PCS Lane BIP 8 Errors Rate Port.PCS.Lane.BIP8ErrorRate
PCS Lane BIP 8 Errors Port.PCS.Lane.BIP8Errors
PCS Lane BIP 8 Errors (sec) Port.PCS.Lane.BIP8ErrorsErr
PCS Lane BIP 8 Errors Last Sec Port.PCS.Lane.BIP8ErrorsLastSec
PCS Lane Consecutive Errors Rate Port.PCS.Lane.ConsecErrorRate
PCS Lane Consecutive Errors Port.PCS.Lane.ConsecErrors
PCS Lane Consecutive Errors (sec) Port.PCS.Lane.ConsecErrorsErr
PCS Lane Consecutive Errors Last
Sec
Port.PCS.Lane.ConsecErrorsLastSec
PCS Lane Index Port.PCS.Lane.Index
PCS Lane Length Errors Rate Port.PCS.Lane.LengthErrorRate
PCS Lane Length Errors Port.PCS.Lane.LengthErrors
PCS Lane Length Errors (sec) Port.PCS.Lane.LengthErrorsErr
PCS Lane Length Errors Last sec Port.PCS.Lane.LengthErrorsLastSec
PCS Lane Marker Errors Rate Port.PCS.Lane.MarkerErrorRate
PCS Lane Marker Errors Port.PCS.Lane.MarkerErrors
PCS Lane Marker Errors (sec) Port.PCS.Lane.MarkerErrorsErr
PCS Lane Marker Errors Last Sec Port.PCS.Lane.MarkerErrorsLastSec
PCS Lane SH Errors Rate Port.PCS.Lane.SHErrorRate
PCS Lane SH Errors Port.PCS.Lane.SHErrors
PCS Lane SH Errors (sec) Port.PCS.Lane.SHErrorsErr
Appendix C: Result Properties for DRV
1208
GUI ID Property Name
PCS Lane SH Errors Last Sec Port.PCS.Lane.SHErrorsLastSec
PCS Lane Sync Errors Rate Port.PCS.Lane.SyncErrorRate
PCS Lane Sync Errors Port.PCS.Lane.SyncErrors
PCS Lane Sync Errors (sec) Port.PCS.Lane.SyncErrorsErr
PCS Lane Sync Errors Last Sec Port.PCS.Lane.SyncErrorsLastSec
PMA
PMA Lane Ber Error Rate Port.PMA.Lane.BerErrorRate
PMA Lane BER Errors Port.PMA.Lane.BerErrors
PMA Lane Ber Sync (sec) Port.PMA.Lane.BerSync
PMA Lane Ber Unsync (sec) Port.PMA.Lane.BerUnsync
PMA Lane Index Port.PMA.Lane.Lane
PMA Lane Rx Prbs Pattern Port.PMA.Lane.RxPrbsPattern
FrameLength
Rx Max Frame Length (bytes) Port.RxMaxFrameLength
Rx Min Frame Length (bytes) Port.RxMinFrameLength
Basic Sequencing
Out of Sequence Frame Count
(Frames)
Port.RxOutSeqFrameCount
Emulated Device
Emulated Device - Header
GUI ID Property Name
Name EmulatedDevice.Name
Port Name EmulatedDevice.PortName
Project Name EmulatedDevice.ProjectName
Stream Block
Stream Block - Header
GUI ID Property Name
Name StreamBlock.Name
Port Name StreamBlock.PortName
Project Name StreamBlock.ProjectName
Expected Rx Port Name StreamBlock.ExpectedRxPortName
Stream ID StreamBlock.StreamId
TX Stream Index StreamBlock.TxStreamIndex
Actual Rx Port Name StreamBlock.ActualRxPortName
Rx Stream Index StreamBlock.RxStreamIndex
Appendix C: Result Properties for DRV
1209
Stream Block - Basic counters
GUI ID Property Name
16-bit Analyzer Filter #1 StreamBlock.Comp16_1
16-bit Analyzer Filter #2 StreamBlock.Comp16_2
16-bit Analyzer Filter #3 StreamBlock.Comp16_3
16-bit Analyzer Filter #4 StreamBlock.Comp16_4
32-bit Analyzer Filter StreamBlock.Comp32
Frame Loss StreamBlock.Frameloss
Expected Rx Frame Count StreamBlock.ExpectedRxFrameCount
Tx Count (bits) StreamBlock.TxBitCount
Tx Rate (bps) StreamBlock.TxBitRate
Tx Count (cells) StreamBlock.TxCellCount
Tx Rate (cps) StreamBlock.TxCellRate
Tx Count (Frames) StreamBlock.TxFrameCount
Tx Rate (fps) StreamBlock.TxFrameRate
Tx L1 Count (bits) StreamBlock.TxL1BitCount
Tx L1 Rate (bps) StreamBlock.TxL1BitRate
Tx Count (Bytes) StreamBlock.TxOctetCount
Tx Rate (Bps) StreamBlock.TxOctetRate
Is Expected StreamBlock.IsExpected
Port Stray Frames StreamBlock.PortStrayFrames
Rx Count (bits) StreamBlock.RxBitCount
Rx Rate (bps) StreamBlock.RxBitRate
Rx Count (cells) StreamBlock.RxCellCount
Rx Rate (cps) StreamBlock.RxCellRate
Rx Count (Frames) StreamBlock.RxFrameCount
Rx L1 Count (bits) StreamBlock.RxL1BitCount
Rx Rate (fps) StreamBlock.RxFrameRate
Rx L1 Rate (bps) StreamBlock.RxL1BitRate
Rx Count (bytes) StreamBlock.RxOctetCount
Rx Rate (Bps) StreamBlock.RxOctetRate
Rx Sig Count (Frames) StreamBlock.RxSigFrameCount
Rx Sig Rate (fps) StreamBlock.RxSigFrameRate
Stream Count StreamBlock.StreamCount
Appendix C: Result Properties for DRV
1210
Stream Block - Errors
GUI ID Property Name
Rx Fcs Error Count (Frames) StreamBlock.FcsErrorFrameCount
Rx Fcs Error Rate (fps) StreamBlock.FcsErrorFrameRate
Rx Ipv4 Checksum Error Count StreamBlock.Ipv4ChecksumErrorCount
Rx Ipv4 Checksum Error Rate StreamBlock.Ipv4ChecksumErrorRate
PRBS Error Count (bits) StreamBlock.PrbsBitErrorCount
PRBS Error Rate (bps) StreamBlock.PrbsBitErrorRate
PRBS Error Ratio StreamBlock.PrbsBitErrorRatio
PRBS Error Frame Count (Frames) StreamBlock.PrbsErrorFrameCount
PRBS Fill Count (bytes) StreamBlock.PrbsFillOctetCount
PRBS Error Frame Rate (fps) StreamBlock.PrbsErrorFrameRate
PRBS Fill Rate (Bps) StreamBlock.PrbsFillOctetRate
Rx Tcp/Udp Checksum Error Count StreamBlock.TcpUdpChecksumErrorCount
Rx Tcp/Udp Checksum Error Rate StreamBlock.TcpUdpChecksumErrorRate
Stream Block - Inter-arrival Time
GUI ID Property Name
Avg Inter-arrival Time (us) StreamBlock.AvgInterarrivalTime
First Arrival Time (us) StreamBlock.FirstArrivalTime
Last Arrival Time (us) StreamBlock.LastArrivalTime
Max Inter-arrival Time (us) StreamBlock.MaxInterarrivalTime
Min Inter-arrival Time (us) StreamBlock.MinInterarrivalTime
Short Term Avg Inter-arrival Time
(us)
StreamBlock.ShortTermAvgInterarrivalTime
Total Inter-arrivalTime (us) StreamBlock.TotalInterarrivalTime
Stream Block - Jitter
GUI ID Property Name
Avg Jitter (us) StreamBlock.AvgJitter
In Jitter Mode Rfc3393 StreamBlock.InJitterModeRfc3393
Max Jitter (us) StreamBlock.MaxJitter
Min Jitter (us) StreamBlock.MinJitter
RFC 4689 Absolute Avg Jitter (us) StreamBlock.Rfc4689AbsoluteAvgJitter
Short Term Avg Jitter (us) StreamBlock.ShortTermAvgJitter
Total Jitter (us) StreamBlock.TotalJitter
Total Jitter Rate StreamBlock.TotalJitterRate
Appendix C: Result Properties for DRV
1211
Stream Block - Frame Length
GUI ID Property Name
Max Frame Length (bytes) StreamBlock.MaxFrameLength
Min Frame Length (bytes) StreamBlock.MinFrameLength
Stream Block - Latency
GUI ID Property Name
Avg Latency (us) StreamBlock.AvgLatency
Max Latency (us) StreamBlock.MaxLatency
Min Latency (us) StreamBlock.MinLatency
Short Term Avg Latency (us) StreamBlock.ShortTermAvgLatency
Total Latency (us) StreamBlock.TotalLatency
Stream Block - Basic Sequencing
GUI ID Property Name
In Sequence Count (Frames) StreamBlock.InSeqFrameCount
In Sequence Rate (fps) StreamBlock.InSeqFrameRate
Out of Sequence Count (Frames) StreamBlock.OutSeqFrameCount
Out of Sequence Rate (fps) StreamBlock.OutSeqFrameRate
Sequence Run Length (Frames) StreamBlock.SeqRunLength
Stream Block - Advanced Sequencing
GUI ID Property Name
Dropped Count (Frames) StreamBlock.DroppedFrameCount
Dropped Frame Percent StreamBlock.DroppedFramePercent
Dropped Frame Percent Rate StreamBlock.DroppedFramePercentRate
Dropped Rate (fps) StreamBlock.DroppedFrameRate
Duplicate Count (Frames) StreamBlock.DuplicateFrameCount
Duplicate Rate (fps) StreamBlock.DuplicateFrameRate
Expected Sequence Number StreamBlock.ExpectedSeqNum
In-order count (Frames) StreamBlock.InOrderFrameCount
In-order rate (fps) StreamBlock.InOrderFrameRate
Late Count (Frames) StreamBlock.LateFrameCount
Late Rate (fps) StreamBlock.LateFrameRate
Reordered Count (Frames) StreamBlock.ReorderedFrameCount
Reordered Rate (fps) StreamBlock.ReorderedFrameRate
Rx Counter Timestamp StreamBlock.RxCounterTimestamp
Rx Last Modified StreamBlock.RxLastModified
Appendix C: Result Properties for DRV
1212
GUI ID Property Name
Rx Rate Timestamp StreamBlock.RxRateTimestamp
Last sequence Number StreamBlock.LastSeqNum
Tx Counter Timestamp StreamBlock.TxCounterTimestamp
Tx Last Modified StreamBlock.TxLastModified
Tx Rate Timestamp StreamBlock.TxRateTimestamp
Stream Block - Histograms
GUI ID Property Name
Bucket 1 Count StreamBlock.HistBin1Count
Bucket 1 Name StreamBlock.HistBin1Name
Bucket 1 Rate StreamBlock.HistBin1Rate
Bucket 2 Count StreamBlock.HistBin2Count
Bucket 2 Name StreamBlock.HistBin2Name
Bucket 2 Rate StreamBlock.HistBin2Rate
Bucket 3 Count StreamBlock.HistBin3Count
Bucket 3 Name StreamBlock.HistBin3Name
Bucket 3 Rate StreamBlock.HistBin3Rate
Bucket 4 Count StreamBlock.HistBin4Count
Bucket 4 Name StreamBlock.HistBin4Name
Bucket 4 Rate StreamBlock.HistBin4Rate
Bucket 5 Count StreamBlock.HistBin5Count
Bucket 5 Name StreamBlock.HistBin5Name
Bucket 5 Rate StreamBlock.HistBin5Rate
Bucket 6 Count StreamBlock.HistBin6Count
Bucket 6 Name StreamBlock.HistBin6Name
Bucket 6 Rate StreamBlock.HistBin6Rate
Bucket 7 Count StreamBlock.HistBin7Count
Bucket 7 Name StreamBlock.HistBin7Name
Bucket 7 Rate StreamBlock.HistBin7Rate
Bucket 8 Count StreamBlock.HistBin8Count
Bucket 8 Name StreamBlock.HistBin8Name
Bucket 8 Rate StreamBlock.HistBin8Rate
Bucket 9 Count StreamBlock.HistBin9Count
Bucket 9 Name StreamBlock.HistBin9Name
Bucket 9 Rate StreamBlock.HistBin9Rate
Bucket 10 Count StreamBlock.HistBin10Count
Appendix C: Result Properties for DRV
1213
GUI ID Property Name
Bucket 10 Name StreamBlock.HistBin10Name
Bucket 10 Rate StreamBlock.HistBin10Rate
Bucket 11 Count StreamBlock.HistBin11Count
Bucket 11 Name StreamBlock.HistBin11Name
Bucket 11 Rate StreamBlock.HistBin11Rate
Bucket 12 Count StreamBlock.HistBin12Count
Bucket 12 Name StreamBlock.HistBin12Name
Bucket 12 Rate StreamBlock.HistBin12Rate
Bucket 13 Count StreamBlock.HistBin13Count
Bucket 13 Name StreamBlock.HistBin13Name
Bucket 13 Rate StreamBlock.HistBin13Rate
Bucket 14 Count StreamBlock.HistBin14Count
Bucket 14 Name StreamBlock.HistBin14Name
Bucket 14 Rate StreamBlock.HistBin14Rate
Bucket 15 Count StreamBlock.HistBin15Count
Bucket 15 Name StreamBlock.HistBin15Name
Bucket 15 Rate StreamBlock.HistBin15Rate
Bucket 16 Count StreamBlock.HistBin16Count
Bucket 16 Name StreamBlock.HistBin16Name
Bucket 16 Rate StreamBlock.HistBin16Rate
Stream Block - Convergence
GUI ID Property Name
Arrival Time Diff (us) StreamBlock.ArrivalTimeDiff
Dropped Frame Duration (us) StreamBlock.DroppedFrameDuration
Frame Loss Duration (us) StreamBlock.FrameLossDuration
Max First Arrival Time (us) StreamBlock.MaxFirstArrivalTime
Min Last Arrival Time (us) StreamBlock.MinLastArrivalTime
BgpRouterConfig
BgpRouterConfig - Header
GUI ID Property Name
EmulatedDevice Name BgpRouterConfig.EmulatedDeviceName
Name BgpRouterConfig.Name
Port Name BgpRouterConfig.PortName
Project Name BgpRouterConfig.ProjectName
Appendix C: Result Properties for DRV
1214
BgpRouterConfig - BGP Router
GUI ID Property Name
Rx Advertised EVPN AD Route
Count
BgpRouterConfig.RxAdvertisedEvpnAdRouteCount
Rx Advertised EVPN Mac Route
Count
BgpRouterConfig.RxAdvertisedEvpnMacRouteCount
Rx Advertised EVPN Inclusive
Multicast Route Count
BgpRouterConfig.RxAdvertisedEvpnMcastRouteCount
Rx MVPN Type 1 Advertised BgpRouterConfig.RxAdvertisedMvpnType1RouteCount
Rx MVPN Type 5 IPv4 Advertised BgpRouterConfig.RxAdvertisedMvpnType5Ipv4RouteCount
Rx MVPN Type 5 IPv6 Advertised BgpRouterConfig.RxAdvertisedMvpnType5Ipv6RouteCount
Rx MVPN Type 7 IPv4 Advertised BgpRouterConfig.RxAdvertisedMvpnType7Ipv4RouteCount
Rx MVPN Type 7 IPv6 Advertised BgpRouterConfig.RxAdvertisedMvpnType7Ipv6RouteCount
Rx Advertised Route Count BgpRouterConfig.RxAdvertisedRouteCount
Rx Open Count BgpRouterConfig.RxOpenCount
Rx Withdrawn EVPN AD Route
Count
BgpRouterConfig.RxWithdrawnEvpnAdRouteCount
Rx Withdrawn EVPN Mac Route
Count
BgpRouterConfig.RxWithdrawnEvpnMacRouteCount
Rx Withdrawn EVPN Inclusive
Multicast Route Count
BgpRouterConfig.RxWithdrawnEvpnMcastRouteCount
Rx MVPN Type 1 Withdrawn BgpRouterConfig.RxWithdrawnMvpnType1RouteCount
Rx MVPN Type 5 IPv4 Withdrawn BgpRouterConfig.RxWithdrawnMvpnType5Ipv4RouteCount
Rx MVPN Type 5 IPv6 Withdrawn BgpRouterConfig.RxWithdrawnMvpnType5Ipv6RouteCount
Rx MVPN Type 7 IPv4 Withdrawn BgpRouterConfig.RxWithdrawnMvpnType7Ipv4RouteCount
Rx MVPN Type 7 IPv6 Withdrawn BgpRouterConfig.RxWithdrawnMvpnType7Ipv6RouteCount
Rx Withdrawn Route Count BgpRouterConfig.RxWithdrawnRouteCount
State BgpRouterConfig.State
Tx Advertised EVPN AD Route
Count
BgpRouterConfig.TxAdvertisedEvpnAdRouteCount
Tx Advertised EVPN Mac Route
Count
BgpRouterConfig.TxAdvertisedEvpnMacRouteCount
Tx Advertised EVPN Inclusive
Multicast Route Count
BgpRouterConfig.TxAdvertisedEvpnMcastRouteCount
Tx MVPN Type 1 Advertised BgpRouterConfig.TxAdvertisedMvpnType1RouteCount
Tx MVPN Type 7 Advertised Failed BgpRouterConfig.TxAdvertisedMvpnType7FailedCount
Tx MVPN Type 7 IPv4 Advertised BgpRouterConfig.TxAdvertisedMvpnType7Ipv4RouteCount
Tx MVPN Type 7 IPv6 Advertised BgpRouterConfig.TxAdvertisedMvpnType7Ipv6RouteCount
Tx Advertised Route Coun BgpRouterConfig.TxAdvertisedRouteCount
Tx Open Count BgpRouterConfig.TxOpenCount
Appendix C: Result Properties for DRV
1215
GUI ID Property Name
Tx Withdrawn EVPN AD Route
Count
BgpRouterConfig.TxWithdrawnEvpnAdRouteCount
Tx Withdrawn EVPN Mac Route
Count
BgpRouterConfig.TxWithdrawnEvpnMacRouteCount
Tx Withdrawn EVPN Inclusive
Multicast Route Count
BgpRouterConfig.TxWithdrawnEvpnMcastRouteCount
Tx MVPN Type 1 Withdrawn BgpRouterConfig.TxWithdrawnMvpnType1RouteCount
Tx MVPN Type 7 IPv4 Withdrawn BgpRouterConfig.TxWithdrawnMvpnType7Ipv4RouteCount
Tx MVPN Type 7 IPv6 Withdrawn BgpRouterConfig.TxWithdrawnMvpnType7Ipv6RouteCount
Tx Withdrawn Route Count BgpRouterConfig.TxWithdrawnRouteCount
IGMPGroupMembership
IGMPGroupMembership - Basic Counters
GUI ID Property Name
Duplicate Joins (bytes) IgmpGroupMembership.DuplicateJoin
Join Fails (Frames) IgmpGroupMembership.JoinFail
Join Latency IgmpGroupMembership.JoinLatency
Leave Latency IgmpGroupMembership.LeaveLatency
IGMPGroupMembership - Header
GUI ID Property Name
EmulatedDevice Name IgmpGroupMembership.EmulatedDeviceName
Group Address IgmpGroupMembership.GroupAddress
Name IgmpGroupMembership.Name
Port Name IgmpGroupMembership.PortName
Project Name IgmpGroupMembership.ProjectName
LspPingProtocolConfig
LspPingProtocolConfig - LSP Ping
GUI ID Property Name
Avg Ping Latency (ms) LspPingProtocolConfig.AvgPingLatency
FEC Info LspPingProtocolConfig.LspPingFecInfo
Ping Path Down Count LspPingProtocolConfig.LspPingPathDown
Ping Path Up Count LspPingProtocolConfig.LspPingPathUp
Maximum Ping Latency (ms) LspPingProtocolConfig.MaxPingLatency
Minimum Ping Latency (ms) LspPingProtocolConfig.MinPingLatency
Ping Fail Count LspPingProtocolConfig.PingFailCount
Ping Rx Return Code LspPingProtocolConfig.PingRxReturnCode
Appendix C: Result Properties for DRV
1216
GUI ID Property Name
Ping State LspPingProtocolConfig.PingState
Ping Success Count LspPingProtocolConfig.PingSuccessCount
LspPingProtocolConfig - Header
GUI ID Property Name
EmulatedDevice Name LspPingProtocolConfig.EmulatedDeviceName
Name LspPingProtocolConfig.Name
Port Name LspPingProtocolConfig.PortName
Project Name LspPingProtocolConfig.ProjectName
Configuration Properties
StreamBlock
GUI ID Property Name
Frame Length (Bytes) StreamBlock.FrameLength
StreamBlock - Rate
GUI ID Property Name
Frame per Second (fps) StreamBlock.Rate.Fps
Percent Bandwidth (%) StreamBlock.Rate.Percent
Bits per Second (bps) StreamBlock.Rate.bps
Kilobits per second
(kbps)
StreamBlock.Rate.Kbps
Megabits per second
(Mbps)
StreamBlock.Rate.Mbps
Inter Frame Gap
(bytes)
StreamBlock.Rate.IbgInBytes
Inter Frame Gap
(msec)
StreamBlock.Rate.IbgInMillisec
Inter Frame Gap (us) StreamBlock.Rate.IbgInNanosec
Ethernet
Ethernet - EthernetII
GUI ID Property Name
Preamble StreamBlock.FrameConfig.ethernet:EthernetII.1.preamble
Destination MAC StreamBlock.FrameConfig.ethernet:EthernetII.1.dstMac
Source MAC StreamBlock.FrameConfig.ethernet:EthernetII.1.srcMac
Ethertype StreamBlock.FrameConfig.ethernet:EthernetII.1.etherType
VLANs
Appendix C: Result Properties for DRV
1217
GUI ID Property Name
Type StreamBlock.FrameConfig.ethernet:EthernetII.vlans.Vlan.1.type
Priority StreamBlock.FrameConfig.ethernet:EthernetII.vlans.Vlan.1.pri
CFI StreamBlock.FrameConfig.ethernet:EthernetII.vlans.Vlan.1.cfi
ID StreamBlock.FrameConfig.ethernet:EthernetII.vlans.Vlan.1.id
Ethernet - 802.2
GUI ID Property Name
Preamble StreamBlock.FrameConfig.ethernet:Ethernet8022.1.preamble
Destination MAC StreamBlock.FrameConfig.ethernet:Ethernet8022.1.dstMac
Source MAC StreamBlock.FrameConfig.ethernet:Ethernet8022.1.srcMac
Length StreamBlock.FrameConfig.ethernet:Ethernet8022.1.length
VLANs
Type StreamBlock.FrameConfig.ethernet:Ethernet8022.vlans.Vlan.1.type
Priority StreamBlock.FrameConfig.ethernet:Ethernet8022.vlans.Vlan.1.pri
CFI StreamBlock.FrameConfig.ethernet:Ethernet8022.vlans.Vlan.1.cfi
ID StreamBlock.FrameConfig.ethernet:Ethernet8022.vlans.Vlan.1.id
LLC Header
DSAP StreamBlock.FrameConfig.ethernet:Ethernet8022.1.llcheader.dsap
SSAP StreamBlock.FrameConfig.ethernet:Ethernet8022.1.llcheader.ssap
Control Field StreamBlock.FrameConfig.ethernet:Ethernet8022.1.llcheader.control
Ethernet - 802.3 RAW
GUI ID Property Name
Preamble StreamBlock.FrameConfig.ethernet:Ethernet8023Raw.1.preamble
Destination MAC StreamBlock.FrameConfig.ethernet:Ethernet8023Raw.1.dstMac
Source MAC StreamBlock.FrameConfig.ethernet:Ethernet8023Raw.1.srcMac
Length StreamBlock.FrameConfig.ethernet:Ethernet8023Raw.1.length
VLANs
Type StreamBlock.FrameConfig.ethernet:Ethernet8023Raw.vlans.Vlan.1.type
Priority StreamBlock.FrameConfig.ethernet:Ethernet8023Raw.vlans.Vlan.1.pri
CFI StreamBlock.FrameConfig.ethernet:Ethernet8023Raw.vlans.Vlan.1.cfi
ID StreamBlock.FrameConfig.ethernet:Ethernet8023Raw.vlans.Vlan.1.id
Ethernet - Ethernet SNAP
GUI ID Property Name
Preamble StreamBlock.FrameConfig.ethernet:EthernetSnap.1.preamble
Destination MAC StreamBlock.FrameConfig.ethernet:EthernetSnap.1.dstMac
Appendix C: Result Properties for DRV
1218
GUI ID Property Name
Source MAC StreamBlock.FrameConfig.ethernet:EthernetSnap.1.srcMac
Length StreamBlock.FrameConfig.ethernet:EthernetSnap.1.length
VLANs
Type StreamBlock.FrameConfig.ethernet:EthernetSnap.vlans.Vlan.1.type
Priority StreamBlock.FrameConfig.ethernet:EthernetSnap.vlans.Vlan.1.pri
CFI StreamBlock.FrameConfig.ethernet:EthernetSnap.vlans.Vlan.1.cfi
ID StreamBlock.FrameConfig.ethernet:EthernetSnap.vlans.Vlan.1.id
LLC Header
DSAP StreamBlock.FrameConfig.ethernet:EthernetSnap.1.llcheader.dsap
SSAP StreamBlock.FrameConfig.ethernet:EthernetSnap.1.llcheader.ssap
Control Field StreamBlock.FrameConfig.ethernet:EthernetSnap.1.llcheader.control
SNAP Header
Organiztion Code StreamBlock.FrameConfig.ethernet:EthernetSnap.1.snapheader.orgcode
Ethernet Type StreamBlock.FrameConfig.ethernet:EthernetSnap.1.snapheader.EthernetType
IPv4
GUI ID Property Name
Fragment Offset StreamBlock.FrameConfig.ipv4:IPv4.1.fragOffset
Time to live StreamBlock.FrameConfig.ipv4:IPv4.1.ttl
Protocol StreamBlock.FrameConfig.ipv4:IPv4.1.protocol
Checksum StreamBlock.FrameConfig.ipv4:IPv4.1.checksum
Source StreamBlock.FrameConfig.ipv4:IPv4.1.sourceAddr
Destination StreamBlock.FrameConfig.ipv4:IPv4.1.destAddr
Prefix Length StreamBlock.FrameConfig.ipv4:IPv4.1.prefixLength
Destination Prefix
Length
StreamBlock.FrameConfig.ipv4:IPv4.1.destPrefixLength
Gateway StreamBlock.FrameConfig.ipv4:IPv4.1.gateway
IPv4 - Tos
GUI ID Property Name
Tos value StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.tos
Precedence StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.tos.precedence
D Bit StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.tos.dBit
T Bit StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.tos.tBit
R Bit StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.tos.rBit
M Bit StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.tos.mBit
Reserved StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.tos.reserved
Appendix C: Result Properties for DRV
1219
IPv4 - DiffServ
GUI ID Property Name
DiffServ value StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.diffServ
DSCP High StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.diffServ.dscpHigh
DSCP Low StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.diffServ.dscpLow
Reserved StreamBlock.FrameConfig.ipv4:IPv4.1.tosDiffserv.diffServ.reserved
Version StreamBlock.FrameConfig.ipv4:IPv4.1.version
Header Length StreamBlock.FrameConfig.ipv4:IPv4.1.ihl
Total Length StreamBlock.FrameConfig.ipv4:IPv4.1.totalLength
Identification StreamBlock.FrameConfig.ipv4:IPv4.1.identification
IPv4 - Control Flags
GUI ID Property Name
Reserved StreamBlock.FrameConfig.ipv4:IPv4.1.flags.reserved
DF Bit StreamBlock.FrameConfig.ipv4:IPv4.1.flags.dfBit
MF Bit StreamBlock.FrameConfig.ipv4:IPv4.1.flags.mfBit
IPv4 - Header Options
GUI ID Property Name
End of Options StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.endOfOptlist.type
NOP StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.nop.type
Security
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.security.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.security.length
Security StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.security.security
Compartments StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.security.compartments
Handling
Restrictions
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.security.handlingRestrictions
Transmission
Control Code
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.security.txControlCode
Loose Source Route
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.looseSrcRoute.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.looseSrcRoute.length
Pointer StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.looseSrcRoute.pointer
Ip Address List StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.looseSrcRoute.addrList.Ipv4Addr.value
Time Stamp
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.timestamp.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.timestamp.length
Appendix C: Result Properties for DRV
1220
GUI ID Property Name
Pointer StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.timestamp.pointer
Overflow StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.timestamp.overflow
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.timestamp.flag
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.timestamp.timestamp
Extended Security
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.extSecurity.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.extSecurity.length
Format Code StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.extSecurity.formatCode
Overflow StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.extSecurity.addSecInfo
Record Route
Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.recordRoute.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.recordRoute.length
Pointer StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.recordRoute.pointer
Route List StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.recordRoute.addrList.Ipv4Addr.value
Stream Identifier
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.streamId.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.streamId.length
Stream Identifier StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.streamId.streamId
Strict Source Route
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.strictSrcRoute.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.strictSrcRoute.length
Pointer StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.strictSrcRoute.pointer
Route List StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.strictSrcRoute.addrList.Ipv4Addr.value
MTU Probe
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.mtuProbe.type
Lenght StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.mtuProbe.length
MTU Value StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.mtuProbe.mtu
Trace Route
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.tracert.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.tracert.length
ID Number StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.tracert.idNumber
Outbound Hop
Count
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.tracert.outboundHopCnt
Return Hop
Count
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.tracert.returnHopCnt
Originator Ip
Address
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.tracert.originatorIp
Appendix C: Result Properties for DRV
1221
GUI ID Property Name
Address Extension
Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.addrExt.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.addrExt.length
Source Ipv7
Administrative
Domain
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.addrExt.sourceIpv7
Source 7th Byte StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.addrExt.source7thByte
Destination Ipv7
Administrative
Domain
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.addrExt.destIpv7
Destination 7th
Byte
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.addrExt.dest7thByte
Router Alert
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.rtrAlert.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.rtrAlert.length
Router Alert
Value
StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.rtrAlert.routerAlert
Selective Directed Broadcast Mode
Option Type StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.selBrdcast.type
Length StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.selBrdcast.length
Route List StreamBlock.FrameConfig.ipv4:IPv4.1.options.IPv4HeaderOption.selBrdcast.addrList.Ipv4Addr.value
IPv6
IPv6 - IPv6 Header
GUI ID Property Name
Version StreamBlock.FrameConfig.ipv6:IPv6.1.version
Traffic Class StreamBlock.FrameConfig.ipv6:IPv6.1.trafficClass
Flow Label StreamBlock.FrameConfig.ipv6:IPv6.1.flowLabel
Pay load Length StreamBlock.FrameConfig.ipv6:IPv6.1.payloadLength
Next Header StreamBlock.FrameConfig.ipv6:IPv6.1.nextHeader
Hop Limit StreamBlock.FrameConfig.ipv6:IPv6.1.hopLimit
Source Address StreamBlock.FrameConfig.ipv6:IPv6.1.sourceAddr
Destination Address StreamBlock.FrameConfig.ipv6:IPv6.1.destAddr
Prefix length StreamBlock.FrameConfig.ipv6:IPv6.1.prefixLength
Destination Prefix
Length
StreamBlock.FrameConfig.ipv6:IPv6.1.destPrefixLength
Gateway StreamBlock.FrameConfig.ipv6:IPv6.1.gateway
Appendix C: Result Properties for DRV
1222
IPv6 - IPv6 Authentication Header
GUI ID Property Name
Authentication Header
next Header
StreamBlock.FrameConfig.ipv6:Ipv6AuthenticationHeader.nxtHdr
Authentication Header
Length
StreamBlock.FrameConfig.ipv6:Ipv6AuthenticationHeader.length
Reserved StreamBlock.FrameConfig.ipv6:Ipv6AuthenticationHeader.reserved
Security Parameter
index
StreamBlock.FrameConfig.ipv6:Ipv6AuthenticationHeader.spi
Sequence number StreamBlock.FrameConfig.ipv6:Ipv6AuthenticationHeader.seqNum
Authentication Data StreamBlock.FrameConfig.ipv6:Ipv6AuthenticationHeader.authData
IPv6 - IPv6 Destination Header
GUI ID Property Name
Destination Header
Next Header
StreamBlock.FrameConfig.ipv6:Ipv6DestinationHeader.nxtHdr
Destination Header
Length
StreamBlock.FrameConfig.ipv6:Ipv6DestinationHeader.length
IPv6 Options
Pad1 Option StreamBlock.FrameConfig.ipv6:Ipv6DestinationHeader.options.Ipv6DestinationOption.pad1.pad1
PadN Option StreamBlock.FrameConfig.ipv6:Ipv6DestinationHeader.options.Ipv6DestinationOption.padN.padN
PadN Option Length StreamBlock.FrameConfig.ipv6:Ipv6DestinationHeader.options.Ipv6DestinationOption.padN.length
PadN Option Padding StreamBlock.FrameConfig.ipv6:Ipv6DestinationHeader.options.Ipv6DestinationOption.padN.padding
Custom Option StreamBlock.FrameConfig.ipv6:Ipv6DestinationHeader.options.Ipv6DestinationOption.custom.type
Data StreamBlock.FrameConfig.ipv6:Ipv6DestinationHeader.options.Ipv6DestinationOption.custom.data
IPv6 - IPv6 Encapsulation Header
GUI ID Property Name
Security Parameter
index
StreamBlock.FrameConfig.ipv6:Ipv6EncapsulationHeader.spi
Sequence number StreamBlock.FrameConfig.ipv6:Ipv6EncapsulationHeader.seqNum
Payload data StreamBlock.FrameConfig.ipv6:Ipv6EncapsulationHeader.payloadData
Pad data StreamBlock.FrameConfig.ipv6:Ipv6EncapsulationHeader.padData
Pad length StreamBlock.FrameConfig.ipv6:Ipv6EncapsulationHeader.length
Encapsulation Header
Next Header
StreamBlock.FrameConfig.ipv6:Ipv6EncapsulationHeader.nxtHdr
Authentication Data StreamBlock.FrameConfig.ipv6:Ipv6EncapsulationHeader.authData
Appendix C: Result Properties for DRV
1223
IPv6 - IPv6 Fragment Header
GUI ID Property Name
Fragment Header Next
Header
StreamBlock.FrameConfig.ipv6:Ipv6FragmentHeader.nxtHdr
Reserved StreamBlock.FrameConfig.ipv6:Ipv6FragmentHeader.length
Fragment Offset StreamBlock.FrameConfig.ipv6:Ipv6FragmentHeader.fragOffset
Reserved StreamBlock.FrameConfig.ipv6:Ipv6FragmentHeader.reserved
More Flag StreamBlock.FrameConfig.ipv6:Ipv6FragmentHeader.m_flag
Identification StreamBlock.FrameConfig.ipv6:Ipv6FragmentHeader.ident
IPv6 - IPv6 Hop by Hop Header
GUI ID Property Name
Hop by Hop
Header Next
header
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.nxtHdr
Hop by Hop
Header Length
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.length
IPv6 Options
Pad1 Option StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.pad1.pad1
PadN Option StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.padN.padN
PadN Option
Length
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.padN.length
PadN Option
Padding
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.padN.padding
Router Alert
Option
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.routerAlert.routerAlert
Router Alert
Length
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.routerAlert.length
Router Alert
Value
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.routerAlert.value
Jumbo Payload
Option
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.jumbo.type
Jumbo Payload
Option Length
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.jumbo.length
Jumbo Payload
Option Value
StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.jumbo.data
Custom Option StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.custom.type
Data StreamBlock.FrameConfig.ipv6:Ipv6HopByHopHeader.options.Ipv6HopByHopOption.custom.data
IPv6 - IPv6 Routing Header
GUI ID Property Name
Routing Header Next
Header
StreamBlock.FrameConfig.ipv6:Ipv6RoutingHeader.nxtHdr
Appendix C: Result Properties for DRV
1224
GUI ID Property Name
Routing Header length StreamBlock.FrameConfig.ipv6:Ipv6RoutingHeader.length
Routing type StreamBlock.FrameConfig.ipv6:Ipv6RoutingHeader.routingType
Segments Left StreamBlock.FrameConfig.ipv6:Ipv6RoutingHeader.segLeft
Reserved StreamBlock.FrameConfig.ipv6:Ipv6RoutingHeader.reserved
Nodes
IPv6 Address StreamBlock.FrameConfig.ipv6:Ipv6RoutingHeader.nodes.Ipv6Addr.value
MPLS
MPLS - Pseudowire Control Word
GUI ID Property Name
Type StreamBlock.FrameConfig.mpls:ControlWord.type
Reserved StreamBlock.FrameConfig.mpls:ControlWord.reserved
Sequence number StreamBlock.FrameConfig.mpls:ControlWord.seqNum
MPLS - MPLS Entropy Label
GUI ID Property Name
Hash value StreamBlock.FrameConfig.mpls:EntropyLabel.hash
Experimental bits StreamBlock.FrameConfig.mpls:EntropyLabel.exp
Bottom of Stack StreamBlock.FrameConfig.mpls:EntropyLabel.sBit
Time to live StreamBlock.FrameConfig.mpls:EntropyLabel.ttl
MPLS - MPLS Header
GUI ID Property Name
Label StreamBlock.FrameConfig.mpls:Mpls.label
Experimental bits StreamBlock.FrameConfig.mpls:Mpls.exp
Bottom of Stack StreamBlock.FrameConfig.mpls:Mpls.sBit
Time to live StreamBlock.FrameConfig.mpls:Mpls.ttl
Next Hop Mac StreamBlock.FrameConfig.mpls:Mpls.dstMac
TCP
GUI ID Property Name
Source port StreamBlock.FrameConfig.tcp:Tcp.sourcePort
Destination port StreamBlock.FrameConfig.tcp:Tcp.destPort
Sequence Number StreamBlock.FrameConfig.tcp:Tcp.seqNum
Acknowledgement
Number
StreamBlock.FrameConfig.tcp:Tcp.ackNum
Header Length StreamBlock.FrameConfig.tcp:Tcp.offset
Appendix C: Result Properties for DRV
1225
GUI ID Property Name
Reserved StreamBlock.FrameConfig.tcp:Tcp.reserved
Congestion Window
Reduced
StreamBlock.FrameConfig.tcp:Tcp.cwrBit
ECN-Echo StreamBlock.FrameConfig.tcp:Tcp.ecnBit
Urgent pointer StreamBlock.FrameConfig.tcp:Tcp.urgBit
Acknowledgement StreamBlock.FrameConfig.tcp:Tcp.ackBit
push Function StreamBlock.FrameConfig.tcp:Tcp.pshBit
Reset Connection StreamBlock.FrameConfig.tcp:Tcp.rstBit
Synchronize StreamBlock.FrameConfig.tcp:Tcp.synBit
No more data StreamBlock.FrameConfig.tcp:Tcp.finBit
Window size StreamBlock.FrameConfig.tcp:Tcp.window
Checksum StreamBlock.FrameConfig.tcp:Tcp.checksum
Urgent pointer StreamBlock.FrameConfig.tcp:Tcp.urgentPtr
UDP
GUI ID Property Name
Source port StreamBlock.FrameConfig.udp:Udp.sourcePort
Destination port StreamBlock.FrameConfig.udp:Udp.destPort
Length StreamBlock.FrameConfig.udp:Udp.length
Checksum StreamBlock.FrameConfig.udp:Udp.checksum
VxLAN
GUI ID Property Name
Flags StreamBlock.FrameConfig.vxlan:VxLAN.flags
Reserved 1 StreamBlock.FrameConfig.vxlan:VxLAN.reservedone
Virtual Network
Identifier
StreamBlock.FrameConfig.vxlan:VxLAN.vni
Reserved 2 StreamBlock.FrameConfig.vxlan:VxLAN.reservedtwo
IPv4 Muticast Group
Address
StreamBlock.FrameConfig.vxlan:VxLAN.multicastGroupAddr
Auto Select UDP
Source Port
StreamBlock.FrameConfig.vxlan:VxLAN.autoSelectUdpSrcPort
Peer VTEP IPv4
Address
StreamBlock.FrameConfig.vxlan:VxLAN.resolvedIpv4Addr
Function Index
Appendix: Spirent HLTAPI Wrapper.................................................................................................................................................................. 1191
sth::alarms_control..................................................................................................................................................................................................38
sth::alarms_stats.....................................................................................................................................................................................................41
sth::arp_control..................................................................................................................................................................................................... 978
sth::cleanup_session.......................................................................................................................................................................................... 1010
sth::connect...........................................................................................................................................................................................................981
sth::create_csv_file............................................................................................................................................................................................. 1173
sth::device_info..................................................................................................................................................................................................... 984
sth::drv_stats.......................................................................................................................................................................................................1170
sth::emulation_ancp_config.................................................................................................................................................................................... 44
sth::emulation_ancp_control................................................................................................................................................................................... 58
sth::emulation_ancp_stats...................................................................................................................................................................................... 62
sth::emulation_ancp_subscriber_lines_config........................................................................................................................................................ 51
sth::emulation_bfd_config....................................................................................................................................................................................... 65
sth::emulation_bfd_control......................................................................................................................................................................................72
sth::emulation_bfd_info...........................................................................................................................................................................................74
sth::emulation_bgp_config...................................................................................................................................................................................... 77
sth::emulation_bgp_control.....................................................................................................................................................................................91
sth::emulation_bgp_info........................................................................................................................................................................................116
sth::emulation_bgp_route_config............................................................................................................................................................................94
sth::emulation_bgp_route_generator.................................................................................................................................................................... 121
sth::emulation_bgp_route_info..............................................................................................................................................................................119
sth::emulation_device_config................................................................................................................................................................................135
sth::emulation_dhcp_config.................................................................................................................................................................................. 147
sth::emulation_dhcp_control................................................................................................................................................................................. 177
sth::emulation_dhcp_group_config....................................................................................................................................................................... 156
sth::emulation_dhcp_server_config...................................................................................................................................................................... 188
sth::emulation_dhcp_server_control..................................................................................................................................................................... 212
sth::emulation_dhcp_server_relay_agent_config................................................................................................................................................. 206
sth::emulation_dhcp_server_stats........................................................................................................................................................................ 215
sth::emulation_dhcp_stats.................................................................................................................................................................................... 179
sth::emulation_dot1x_config................................................................................................................................................................................... 21
sth::emulation_dot1x_control.................................................................................................................................................................................. 30
sth::emulation_dot1x_stats..................................................................................................................................................................................... 32
sth::emulation_efm_config.................................................................................................................................................................................... 220
sth::emulation_efm_control...................................................................................................................................................................................231
sth::emulation_efm_stat........................................................................................................................................................................................234
sth::emulation_gre_config.....................................................................................................................................................................................321
sth::emulation_http_config.................................................................................................................................................................................... 337
sth::emulation_http_control...................................................................................................................................................................................343
sth::emulation_http_phase_config........................................................................................................................................................................ 340
sth::emulation_http_profile_config........................................................................................................................................................................ 328
sth::emulation_http_stats...................................................................................................................................................................................... 344
sth::emulation_igmp_config.................................................................................................................................................................................. 350
sth::emulation_igmp_control................................................................................................................................................................................. 360
sth::emulation_igmp_group_config....................................................................................................................................................................... 363
sth::emulation_igmp_info...................................................................................................................................................................................... 366
sth::emulation_igmp_querier_config..................................................................................................................................................................... 372
sth::emulation_igmp_querier_control....................................................................................................................................................................378
sth::emulation_igmp_querier_info.........................................................................................................................................................................380
sth::emulation_ipv6_autoconfig............................................................................................................................................................................ 382
sth::emulation_ipv6_autoconfig_control................................................................................................................................................................390
sth::emulation_ipv6_autoconfig_stats...................................................................................................................................................................391
sth::emulation_isis_config.....................................................................................................................................................................................395
sth::emulation_isis_control....................................................................................................................................................................................408
sth::emulation_isis_info.........................................................................................................................................................................................433
sth::emulation_isis_lsp_generator........................................................................................................................................................................ 417
sth::emulation_isis_topology_route_config........................................................................................................................................................... 410
sth::emulation_l2vpn_pe_config......................................................................................................................................................................... 1181
sth::emulation_lacp_config................................................................................................................................................................................... 458
sth::emulation_lacp_control.................................................................................................................................................................................. 461
sth::emulation_lacp_info....................................................................................................................................................................................... 462
sth::emulation_ldp_config..................................................................................................................................................................................... 465
sth::emulation_ldp_control.................................................................................................................................................................................... 477
sth::emulation_ldp_info......................................................................................................................................................................................... 478
sth::emulation_ldp_route_config........................................................................................................................................................................... 483
sth::emulation_lldp_config.................................................................................................................................................................................... 499
sth::emulation_lldp_control................................................................................................................................................................................... 526
sth::emulation_lldp_dcbx_tlv_config..................................................................................................................................................................... 513
sth::emulation_lldp_info........................................................................................................................................................................................ 527
sth::emulation_lldp_optional_tlv_config................................................................................................................................................................ 505
sth::emulation_lsp_ping_info................................................................................................................................................................................ 572
sth::emulation_lsp_switching_point_tlvs_config................................................................................................................................................... 494
sth::emulation_mld_config.................................................................................................................................................................................... 533
sth::emulation_mld_control................................................................................................................................................................................... 542
sth::emulation_mld_group_config......................................................................................................................................................................... 540
sth::emulation_mld_info........................................................................................................................................................................................ 546
sth::emulation_mpls_l2vpn_pe_config..................................................................................................................................................................574
sth::emulation_mpls_l2vpn_site_config................................................................................................................................................................ 579
sth::emulation_mpls_l3vpn_pe_config..................................................................................................................................................................586
sth::emulation_mpls_l3vpn_site_config................................................................................................................................................................ 590
sth::emulation_mpls_tp_config............................................................................................................................................................................. 552
sth::emulation_mpls_tp_control............................................................................................................................................................................ 571
sth::emulation_mpls_tp_port_config..................................................................................................................................................................... 569
sth::emulation_msti_config................................................................................................................................................................................. 1051
sth::emulation_mstp_region_config.................................................................................................................................................................... 1049
sth::emulation_multicast_group_config.................................................................................................................................................................596
sth::emulation_multicast_source_config............................................................................................................................................................... 598
sth::emulation_mvpn_config................................................................................................................................................................................. 605
sth::emulation_mvpn_control................................................................................................................................................................................ 630
sth::emulation_mvpn_customer_port_config........................................................................................................................................................ 603
sth::emulation_mvpn_info..................................................................................................................................................................................... 631
sth::emulation_mvpn_provider_port_config.......................................................................................................................................................... 601
sth::emulation_oam_config_msg.......................................................................................................................................................................... 242
sth::emulation_oam_config_topology................................................................................................................................................................... 252
sth::emulation_oam_control..................................................................................................................................................................................262
sth::emulation_oam_info.......................................................................................................................................................................................263
sth::emulation_openflow_config............................................................................................................................................................................638
sth::emulation_openflow_control.......................................................................................................................................................................... 645
sth::emulation_openflow_stats..............................................................................................................................................................................647
sth::emulation_ospf_config................................................................................................................................................................................... 652
sth::emulation_ospf_control.................................................................................................................................................................................. 665
sth::emulation_ospf_lsa_config.............................................................................................................................................................................668
sth::emulation_ospf_route_info.............................................................................................................................................................................715
sth::emulation_ospf_tlv_config..............................................................................................................................................................................691
sth::emulation_ospf_topology_route_config......................................................................................................................................................... 699
sth::emulation_ospfv2_info................................................................................................................................................................................... 709
sth::emulation_ospfv3_info................................................................................................................................................................................... 712
sth::emulation_pcep_config.................................................................................................................................................................................. 747
sth::emulation_pcep_control................................................................................................................................................................................. 775
sth::emulation_pim_config.................................................................................................................................................................................... 778
sth::emulation_pim_control................................................................................................................................................................................... 789
sth::emulation_pim_group_config......................................................................................................................................................................... 791
sth::emulation_pim_info........................................................................................................................................................................................ 794
sth::emulation_ping...............................................................................................................................................................................................798
sth::emulation_ptp_config..................................................................................................................................................................................... 864
sth::emulation_ptp_control....................................................................................................................................................................................879
sth::emulation_ptp_stats....................................................................................................................................................................................... 880
sth::emulation_rip_config...................................................................................................................................................................................... 932
sth::emulation_rip_control.....................................................................................................................................................................................940
sth::emulation_rip_info..........................................................................................................................................................................................945
sth::emulation_rip_route_config............................................................................................................................................................................942
sth::emulation_rsvp_config................................................................................................................................................................................... 949
sth::emulation_rsvp_control.................................................................................................................................................................................. 959
sth::emulation_rsvp_info....................................................................................................................................................................................... 961
sth::emulation_rsvp_tunnel_config....................................................................................................................................................................... 964
sth::emulation_rsvp_tunnel_info........................................................................................................................................................................... 975
sth::emulation_rsvpte_tunnel_control................................................................................................................................................................... 973
sth::emulation_sip_config................................................................................................................................................................................... 1021
sth::emulation_sip_control.................................................................................................................................................................................. 1033
sth::emulation_sip_stats..................................................................................................................................................................................... 1035
sth::emulation_stp_config................................................................................................................................................................................... 1040
sth::emulation_stp_control.................................................................................................................................................................................. 1054
sth::emulation_stp_stats..................................................................................................................................................................................... 1055
sth::emulation_vpls_site_config.......................................................................................................................................................................... 1183
sth::emulation_vxlan_config................................................................................................................................................................................1175
sth::emulation_vxlan_control.............................................................................................................................................................................. 1179
sth::emulation_vxlan_stats..................................................................................................................................................................................1180
sth::fc_config.........................................................................................................................................................................................................269
sth::fc_control........................................................................................................................................................................................................271
sth::fc_stats...........................................................................................................................................................................................................272
sth::fcoe_config.....................................................................................................................................................................................................275
sth::fcoe_control....................................................................................................................................................................................................281
sth::fcoe_stats.......................................................................................................................................................................................................282
sth::fcoe_traffic_config.......................................................................................................................................................................................... 301
sth::fip_traffic_config............................................................................................................................................................................................. 285
sth::forty_hundred_gig_l1_results...........................................................................................................................................................................16
sth::get_handles..................................................................................................................................................................................................1018
sth::hlapi_gen......................................................................................................................................................................................................1187
sth::imix_config................................................................................................................................................................................................... 1157
sth::interface_config..............................................................................................................................................................................................987
sth::interface_control.............................................................................................................................................................................................133
sth::interface_stats..............................................................................................................................................................................................1003
sth::l2tp_config......................................................................................................................................................................................................436
sth::l2tp_control.....................................................................................................................................................................................................449
sth::l2tp_stats........................................................................................................................................................................................................450
sth::labserver_connect........................................................................................................................................................................................1012
sth::labserver_disconnect................................................................................................................................................................................... 1013
sth::link_config.................................................................................................................................................................................................... 1015
sth::load_xml.......................................................................................................................................................................................................1016
sth::packet_config_buffers.................................................................................................................................................................................... 720
sth::packet_config_filter........................................................................................................................................................................................ 724
sth::packet_config_triggers................................................................................................................................................................................... 721
sth::packet_control................................................................................................................................................................................................742
sth::packet_info.....................................................................................................................................................................................................743
sth::packet_stats................................................................................................................................................................................................... 744
sth::pcs_error_config.............................................................................................................................................................................................. 11
sth::pcs_error_control............................................................................................................................................................................................. 14
sth::ppp_config......................................................................................................................................................................................................801
sth::ppp_stats........................................................................................................................................................................................................809
sth::pppox_config..................................................................................................................................................................................................814
sth::pppox_control.................................................................................................................................................................................................831
sth::pppox_server_config......................................................................................................................................................................................840
sth::pppox_server_control.....................................................................................................................................................................................854
sth::pppox_server_stats........................................................................................................................................................................................856
sth::pppox_stats....................................................................................................................................................................................................834
sth::random_error_config........................................................................................................................................................................................14
sth::random_error_control.......................................................................................................................................................................................16
sth::sequencer_control........................................................................................................................................................................................1189
sth::start_devices................................................................................................................................................................................................ 1017
sth::stop_devices................................................................................................................................................................................................ 1018
sth::test_config......................................................................................................................................................................................................140
sth::test_control.....................................................................................................................................................................................................144
sth::test_rfc2544_config........................................................................................................................................................................................885
sth::test_rfc2544_control.......................................................................................................................................................................................898
sth::test_rfc2544_info............................................................................................................................................................................................900
sth::test_rfc3918_config........................................................................................................................................................................................905
sth::test_rfc3918_control.......................................................................................................................................................................................921
sth::test_rfc3918_info............................................................................................................................................................................................922
sth::traffic_config.................................................................................................................................................................................................1059
sth::traffic_config_ospf........................................................................................................................................................................................ 1141
sth::traffic_control................................................................................................................................................................................................1159
sth::traffic_stats...................................................................................................................................................................................................1162
