############## General ################
fv-connect-user:
   type: string 
   destination: controllers
   content:
      key: user
      value: value
   description:
       This knob uses a user name  other than 'regress' to log into a device
       Example-
       r0 {
           system{
               fv-connect-user "root";
         }
     }

fv-connect-password:
   type: string 
   destination: controllers
   content:
      key: password
      value: value
   description:
       This knob uses password other than 'MaRtInI' to log into a device
       Example-
       r0 {
          system{
              fv-connect-password "Embe1mpls";
        }
     }

fv-su-user:
   type: string
   destination: controllers
   content:
      key: su_user
      value: value
   description:
       This knob uses user other than 'root' to swich to super user on a device
       Example-
       r0 {
          system{
              fv-su-user "rootuser";
        }
     }

fv-su-password:
   type: string
   destination: controllers
   content:
      key: su_password
      value: value
   description:
       This knob uses password other than 'Embe1mpls' to swich to super user on a device
       Example-
       r0 {
          system{
              fv-su-password "rootpassword";
        }
     }

fv-core-check:
   type: string
   destination: system-nodes
   content:
      key: core-check
      value: value
   allowed-values:
      - enable
   description:
       This knob enables core checking
       Example-
       r0 {
          system{
              fv-core-check "enable";
         }
     }
fv-exclude-core-pattern:
   type: string
   destination: controllers
   content:
      key: core-exclude
      value: value
   description:
       This knob excludes the core pattern
       Example-
       r0 {
          system{
              fv-exclude-core-pattern ".*livecore.tgz";
         }
     }
fv-tags:
   type: list
   destination: same
   content:
      key: tags
      value: value
   description:
       This knob provides a list of attributes assigned to a system
       or interface for easy retrieval
       Examples-
       Robot (single tag)
       ${duts} = Get Resource List tag=dut
       Python (single tag)-
       duts = t.get_resource_list(tag='dut')
       Robot (multiple tags)-
       @{tags} = Create List test l2
       ${interfaces} = Get Interface List tag=@{tags}
       Python (multiple tags)-
       interfaces = t.get_interface_list(tag=['test', 'l2'])
       r0 {
         system {
           fv-tags  "dut";
         }
         interfaces {
           intf1 {
             fv-tags "uplink:egress";
           }
         }
       }

fv-include-tag:
   type: list
   destination: same
   content:
      key: include-tag
      value: value
   description:
      This knob allows certain testcases to be included by tags. You can pass multiple
      tags separated by colons. This knob will then include the tags when Robot is run in
      command line. Note that if you have any testcases that are included by tags provided,
      if this knob is used in conjunction with fv-exclude-tag and there are testcases included
      by this knob that are also covered by the exclusion tags, the exclusion tags take precedence.
      Examples -
      r0 {
        system {
        }
      }
      fv-include-tag "a:b:c:d";

fv-exclude-tag:
   type: list
   destination: same
   content:
      key: exclude-tag
      value: value
   description:
      This knob allows certain testcases to be excluded by tags. You can pass multiple
      tags separated by colons. This knob will then exclude the tags when Robot is run in
      command line. Note that if used in conjunction with fv-include-tag, this will override
      any testcase with an inclusion tag and NOT run them.
      Examples -
      r0 {
        system {
        }
      }
      fv-exclude-tag "a:b:c:d";

fv-connect-channels:      
   type: list 
   destination: controllers
   content:
      key: connect_channels
      value: value
   allowed-values:
      - all
      - pyez
      - text
   description:
       This knob explicitely states which channels to connect to (default options are pyez & text)
       Examples-
       r0 {
          system {
               fv-connect-channels   "all";
           }
       }

fv-snmp-mib-path:
  type: string
  destination: controllers
  content:
    key: mibs_custom_dir
    value: value
  description:
    This knob allows user to provide a custom mib directory when creating a snmp channel.
    Examples-
    r0 {
      system {
        fv-snmp-mib-path "/volume/labtools/lib";
      }
    }

fv-selenium:
   type: string
   destination: controllers
   content:
      key: selenium
      value: value
   allowed-values:
      - enable
   description:
       Selenium-Grid allows you run your tests on different machines against different browsers in parallel.
       This knob spcifies the location of selenium tool from the local path
       Examples-
       r0 {
         system {
             fv-selenium-grid-jar "\\TOBY\\selenium-server-standalone-3.5.2.jar"
           }
       }
fv-selenium-jar-version:
   type: string
   destination: controllers
   content:
      key: selenium_jar_version
      value: value
   description:
       Examples-
       r0 {
         system {
             fv-selenium-jar-version "3.5.2";
           }
       }

fv-nssm-interactive:
   type: string
   destination: controllers
   content:
      key: nssm_interactive
      value: value
   description:
       By default fv-nssm-interactive is set to enable
       Examples-
       r0 {
         system {
             fv-nssm-interactive "disable";
           }
       }
fv-connect-transport:
   type: string 
   destination: controllers
   content:
      key: connect_mode
      value: value
   allowed-values:
      - ssh
      - telnet
   description:
       This knob defines which transport protocol to use (default is set to ssh,
       telnet is also allowed)
       Examples-
       r0 {
          system {
               fv-connect-transport   "telnet";
           }
       }
fv-sifos-ip:
   type: string
   destination: controllers
   content:
      key: sifos_ip
      value: value
   description:
       This knob defines which connects to the sifos ip
       Examples-
       r0 {
          system {
               fv-sifos-ip   "10.204.34.243";
           }
       }

fv-sifos-shell-path:
   type: string
   destination: controllers
   content:
      key: sifos_shell_path
      value: value
   description:
       Examples-
       r0 {
          system {
               fv-sifos-shellpath "/root/PowerShell_TCL.SH";
           }
       }
fv-connect-ssh-key-file:
   type: string
   destination: controllers
   content:
      key: ssh_key_file
      value: value   
   description:
       This knob defines a file to store the ssh keys
       Examples-
       r0 {
          system {
               fv-connect-ssh-key-file   "~ck/.ssh/id_rsa";
           }
       }

fv-connect-system-nodes:
   type: boolean 
   destination: system-nodes 
   content:
      key: connect
      value: True
   allowed-values:
      - all
      - primary
   description:
       This knob states whether or not to connect to all system nodes in a complex system
       Examples-
       r0 {
          system {
               fv-connect-system-nodes   "all";
           }
       }

fv-connect-controllers:
   type: boolean 
   destination: controllers
   content:
      key: connect
      value: True
   allowed-values:
      - all
      - none
   description:
       This knob defines which controllers (REs) to connect to (default is set to master RE)
       Examples-
       r0 {
          system {
               fv-connect-controllers   "all";
           }
       }

fv-connect-targets:
   type: string
   destination: controllers
   content:
      key: connect_targets
      value: value
   allowed-values:
      - management
      - console
   description:
       This knob connects to either console or management. Default is management.
       Supported values are console/management
       Examples-
       r0 {
          system {
               fv-connect-targets   "console";
           }
       }

fv-proxy:
   type: dictionary 
   destination: controllers
   content:
      host: proxy_host
      port: proxy_port
      user: proxy_user
      password: proxy_password
      ssh-key: proxy_ssh_key
      hosts: proxy_hosts
   description:
       This knob used to proxy all commands to devices through an ssh proxy
       Examples-
       r0 {
          system {
               fv-proxy   "host=proxy.juniper.net:user=ABC:password=XYZ";
           }
       }

fv-load-baseline-config-from:
   type: string
   destination: system-nodes
   content:
      key: load-baseline-config-from
      value: value
   description:
       This knob loads JUNOS config from designated path on device
       If set to 'default', will load from /var/tmp
       Examples-
       r0 {
          system {
               fv-load-baseline-config-from   "default";
           }
       }

fv-interface-status-check:
   type: string
   destination: system-nodes
   content:
      key: interface-status-check
      value: value
   allowed-values:
      - enable
   description:
       This knob checks JUNOS interfaces to ensure that they are UP.
       Used in conjunction with 'Toby Suite Setup' keyword.
       Examples-
       fv-interface-status-check {
       r0 {
         system {
           make "juniper";
         }
       }
       r1 {
         system {
           make "juniper";
         }
       }

fv-connect-channel-ports:
    type: dictionary
    destination: controllers
    content:
      text: text_port
      pyez: pyez_port
    description:
       This knob is used to connect to channel ports using either text or pyez channel.
       This allows you to define the ssh and Netconf ports
       Examples-
       r0 {
         system {
           fv-connect-channel-ports "text=22:pyez=8300";
         }
       }

fv-debug:
   type: string 
   destination: system-nodes 
   content:
      key: debug
      value: value 
   allowed-values:
      - enable
   description:
       This knob is used for particular platforms, create addition debug logs
       Examples-
       rt0 {
         system {
           make "spirent";
           fv-debug "enable";
         }
       }

fv-load-baseline-config-timeout:
   type: string
   destination: system-nodes
   content:
      key: load-baseline-config-timeout
      value: value
   description:
       This knob waits for default timeout to get the device handle while loading baseline config
       If set to 'default', it will wait for 180s
       Examples-
       r0 {
          system {
               fv-load-baseline-config-timeout   "180";
           }
       }

fv-device-response-check:
   type: string
   destination: controllers
   content:
      key: device_response_check
      value: value
   allowed-values:
      - enable
      - disable

fv-epoch-pre-exec:
   type: string
   destination: controllers
   content:
      key: pre_exec_epoch
      value: value
   description:
      Toby reports the cores genrated after the timestamp passed by fusion.

fv-resource-cli-timestamp:
    type: string
    destination: controllers
    content:
      key: set_cli_timestamp
      value: value
    allowed-values:
        enable
    description:
       This knob is enabled in CLI mode to set CLI Timestamp. This results in command outputs
       with timestamp from the device. CLI timestamp set in %b %d %T format.
       Examples-
       r0 {
         system {
           fv-resource-cli-timestamp "enable";
         }
       }

######## Software Install #########

fv-software-install:
   type: complex
   destination: global
   content:
      key: software-install
      value: value
   description:
       This knob is used to upgrade software image from a default path
       Examples-
       r0 {
          system {
               fv-software-install   "/volume/build/junos/eabu-builder/";
           }
       }


############# JPG ######################

fv-jpg-bridge-name:
   type: string 
   destination: interfaces 
   content:
      key: jpg-bridge-name
      value: value
   description:
       This knob specifies the bridge name
       Example-
         rt0-r0-jpg0 {
             fv-jpg-bridge-name"r0-rt0";
             link "rt0r0-jpg0";
         }

fv-jpg-replication-factor:
   type: string 
   destination: interfaces 
   content:
      key: jpg-replication-factor
      value: value
   description:
       This knob, if not set is set to 1 by default
       Example-
         rt0-r0-jpg0 {
             fv-jpg-replication-factor "1";
             fv-jpg-bridge-name"r0-rt0";
             link "rt0r0-jpg0";
         }

############## Ixia ####################
fv-ixia-appserver-port:
   type: string
   destination: system-nodes
   content:
      key: appserver-port
      value: value
   description:
       This knob connects on port other than IXIA appserver default
       Example-
       rt0{
           system{
               fv-ixia-appserver-port 8032;
           }
       }

fv-ixia-appserver-username:
   type: string
   destination: system-nodes
   content:
      key: appserver-username
      value: value
   description:
       This knob uses a user name  other than 'admin' to log into a device
       Example-
       rt0{
           system{
               fv-ixia-appserver-username "admin1";
           }
       }

fv-ixia-appserver-password:
   type: string
   destination: system-nodes
   content:
      key: appserver-password
      value: value
   description:
       This knob uses a  password other than 'admin' to log into a device
       Example-
       rt0{
           system{
               fv-ixia-appserver-password "admin1";
           }
       }

fv-ixia-license-server:
   type: string
   destination: system-nodes
   content:
      key: license_server
      value: value
   description:
       This knob for IxVM, provides ability to license IXIA VM ports
       Example-
       rt0{
           system{
                fv-ixia-license-server "10.32.123.213";
           }
       }

fv-ixia-appserver:
   type: string
   destination: system-nodes
   content:
      key: appserver
      value: value
   description:
       This knob is used to connect to a Ixia GUI for which the ports are mentioned
       in params file.
       rt0{
           system{
                fv-appserver "toby-as1.englab.juniper.net";
           }
       }

fv-ixia-physical-port-type:
   type: string
   destination: interfaces 
   content:
      key: physical-port-type
      value: value
   description:
       This knob allows the configuration of mixed interfaces types (copper and fiber)
       in the same topology
       Example-
       rt0{
           system{
                fv-ixia-physical-port-type "copper";
           }
       }

fv-ixia-license-type:
   type: string
   destination: system-nodes
   content:
      key: license_type
      value: value
   description:
       This knob for Ixia, provides the type of license for IXIA VM ports
       Example-
       rt0{
           system{
                fv-ixia-license-server "10.102.148.236";
           }
       }
   
fv-ixia-config-file:
   type: string
   destination: system-nodes
   content:
      key: config-file
      value: value
   description:
       This knob for Ixia, provides a config file to load from
       Example-
       rt0{
           system{
                make "ixia";
                fv-ixia-config-file "mycfg.ixncfg";
           }
       }

fv-ixia-return-detailed-handles:
   type: string
   destination: system-nodes
   content:
      key: return-detailed-handles
      value: value
   allowed-values:
      - enable
      - disable
   description:
       This knob for Ixia is used to 'avoid' getting handles back
       By default the knob is "enable"
       Example-
       rt0{
           system{
                fv-ixia-return-detailed-handles "disable";
           }
       }

fv-ixia-port-order:
   type: string
   destination: system-nodes
   content:
      key: port-order
      value: value
   description:
       This knob for Ixia, gives the order in which the ports are defined.
       Example-
       rt0{
           system{
                make "ixia";
                fv-ixia-port-order "rt0_r0_1:rt0_r0_2";
           }
       }

fv-ixia-connect-args:
   type: dictionary
   destination: system-nodes
   content:
      key: connect-args
      value: value
   description:
       This knob is used to pass connection arguments when connecting to ixia
       chassis. Since it is a dictionary, you need to pass the arguments in this
       format, key=value:key=value...etc.
       Examples-
       r0 {
          system {
               fv-ixia-connect-args "session_resume_keys=0:return_detailed_handles=0";
           }
       }

fv-ixia-cleanup-session-args:
   type: dictionary
   destination: system-nodes
   content:
      key: cleanup-session-args
      value: value

fv-ixia-connect-to-current-session:
   type: string
   destination: system-nodes
   content:
      key: connect-to-current-session
      value: value
   allowed-values:
      - enable

fv-ixia-min-version:
   type: string
   destination: system-nodes
   content:
      key: min-version
      value: value
   description:
       This knob for ixia is used to list the minimum supported ixia version.
       Example-
       rt0{
           system{
                make "ixia";
                fv-ixia-min-version "8.20";
           }
       }

############## Ixia IxLoad####################

fv-ixload:
   type: string
   destination: system-nodes
   content:
      key: ixload
      value: value
   Description:
      This knob instructs Toby to utilize IxLoad APIs (vs. IxNetwork) on a given IXIA device
      With Ixload APIs we have keywords such as abort_test,add_activity,get_session,run_test,etc
      Example-
      Execute Tester Command ${rt_obj} command=abort_test
      Execute Tester Command ${rt_obj} command=add_activity
      Execute Tester Command ${rt_obj} command=run_test
      Execute Tester Command ${rt_obj} command=save_as

############## Spirent ###################

fv-spirent-labserver:
   type: string
   destination: system-nodes
   content:
      key: labserver
      value: value
   description:
      This knob specifies a Spirent labserver to use instead of talking directly to chassis
      Example-
      rt0 {
           system{
               fv-spirent-labserver "10.38.34.45";
          }
      }

fv-spirent-labserver-session-name:
   type: string
   destination: system-nodes
   content:
      key: labserver_session_name
      value: value
   description:
      This knob specifies a Spirent labserver where the session can be named
      Example-
      rt0 {
           system{
               fv-spirent-labserver-session-name "V4-OVER-V6-TOBY";
          }
      }

fv-spirent-labserver-preserve-session:
   type: string
   destination: system-nodes
   content:
      key: labserver_preserve_session
      value: value
   allowed-values:
      - enable 
   description:
      This knob specifies a Spirent labserver where the session can be preserved
      Example-
      rt0 {
           system{
               fv-spirent-labserver-preserve-session  "enable";
          }
      }

fv-spirent-labserver-connect-existing-session:
   type: string
   destination: system-nodes
   content:
      key: labserver_connect_existing_session
      value: value
   allowed-values:
      - enable 
   description:
      This knob specifies a Spirent labserver which connects to existing labserver session if any
      Example-
      rt0 {
           system{
               fv-spirent-labserver-connect-existing-session  "V4-V6-existing-TOBY";
          }
      }

fv-spirent-license-server:
   type: string
   destination: system-nodes
   content:
      key: license_server
      value: value
   description:
      This knob specifies a Spirent license server for vSpirent
      Example-
      rt0{
          system{
              fv-spirent-license-server "10.38.32.34";
          }
      }

fv-spirent-hltapi-path:
   type: string
   destination: system-nodes
   content:
      key: hltapi-path
      value: value
   description:
      This knob specifies a Spirent license server for vSpirent
      Example-
      rt0{
          system{
              fv-spirent-hltapi-path   "/homes/cxk/tobyscript/nx/HLTAPI_4.67_GA_822707";
          }
      }

fv-spirent-config-file:
   type: string
   destination: system-nodes
   content:
      key: config-file
      value: value
   description:
       This knob for Spirent, provides a config file to load from
       Example-
       rt0{
           system{
                make "spirent";
                fv-spirent-config-file "b2bBgp.xml";
           }
       }

fv-spirent-port-order:
   type: string
   destination: system-nodes
   content:
      key: port-order
      value: value
   description:
       This knob for spirent, gives the order in which the ports are defined.
       Example-
       rt0{
           system{
                make "spirent";
                fv-spirent-port-order "rt0_r0_1:rt0_r0_2";
           }
       }

################# Paragon ############

fv-paragon-server-ip:
   type: string
   destination: system-nodes
   content:
      key: server-ip 
      value: value
   Description:
       This knob defines the Paragon server IP
       fv-paragon-server-ip "10.32.2.5";

################ Avalanche ################

fv-avalanche:
   type: string
   destination: system-nodes
   content:
      key: avalanche 
      value: value
   description:
       This knob enables Avalanche APIs (vs. STC HLTAPI)
       for those platforms that support Spirent L4+
       Specifies 'client' or 'server' role within port stanza (required) for Avalanche
       Example-
       fv-avalanche-port-role "client";

fv-avalanche-port-role:
   type: string 
   destination: interfaces 
   content:
      key: avalanche-port-role
      value: value
   allowed-values:
      - client
      - server     
   description:
       This knob tells avalanche port whether to be a client or a server
       Example-
       rt0 {
         system {
           make "Spirent";
           fv-avalanche "enable";
         }
         interfaces {
           intf1 {
            fv-avalanche-port-role "client";
           }
           intf2 {
             fv-avalanche-port-role "server";
           }
         }
       }
  
fv-avalanche-api-path:
   type: string
   destination: system-nodes
   content:
      key: api-path
      value: value
   description:
       This knob specifies different path to find av.py module.
       Useful for development and testing of pre-release av.py.
       Example-
       rt0 {
         system {
           make "Spirent";
           fv-avalanche "enable";
           fv-avalanche-api-path "/homes/jdoe/new_av";
         }
       }

fv-avalanche-license-path:
   type: string
   destination: system-nodes
   content:
      key: license-path
      value: value
   description:
       This knob points to the path of the Avalanche license
       Example-
       rt0 {
         system {
           make "Spirent";
           fv-avalanche "enable";
           fv-avalanche-license-path "/homes/juser/my_license";
         }
       }

############## Breakingpoint ##############

fv-breakingpoint-group:
   type: string 
   destination: system-nodes
   content:
      key: group
      value: value
   description:
      This knob uses designate BreakingPoint group (Allowable values are 1-12)
      It declares which pre-configured group (1-12) on the BreakingPoint appliance to use.
      Example-
      fv-breakingpoint-group 3;
      rt0 {
        system {
          make "Ixia";
          model "BreakingPoint";
          fv-breakingpiont-group 9;
        }
      }

############## Warp17 ##############

fv-warp17:
   type: string
   destination: system-nodes
   content:
      key: warp17
      value: value

######### Monitoring Engine ########

fv-monitoring-engine:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value
   description:
      Monitoring engine provides keywords to collect, store analyse
      and present data within the context of an arbitrary Toby test
      suite running over an arbitrary topology.
      fv-monitoring-engine value can also simply be set to 'enable'
      fv-monitoring-engine "interval=10 (idea) nfile=monitor.yaml";
      Example-
      fv-monitoring-engine "enable";
      fv-monitoring-engine "interval=1";

fv-recputitle:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value

fv-rememtitle:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value

fv-pfememtitle:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value


fv-pfecputitle:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value


fv-recpuyaxis:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value

fv-rememyaxis:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value

fv-pfememyaxis:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value


fv-pfecpuyaxis:
   type: string
   destination: global
   content:
      key: monitoring-engine
      value: value

######## Macro Engine #########

fv-macro-engine:
   type: string
   destination: global
   content:
      key: macro-engine
      value: value
   description:
       This knob is used to run macros on failure.  
       It expects macro_lib and macro as mandatory fields

#########code-coverage#########

fv-code-coverage:
    type: complex
    destination: global
    content:
       key: code_coverage
       value: value
    description:
        This knob enables gather gcov data from instrumented images
        and register with code coverage services
        Parameters like PR, Activity ID, Activity type RLI, Release, Data Path,
        Sandbox Path can be specified
      
################ Landslide ################

fv-landslide-manager:
   type: string
   destination: system-nodes
   content:
      key: landslide-manager
      value: value

############ GENERIC-TEMPLATES ############

fv-verify-templates-location:
   type: string
   destination: global
   content:
      key: verify-templates-location
      value: value
