[tox]
#envlist = py27
envlist = py34,py35
#envlist = py35
skip_missing_interpreters = True


[tox:jenkins]
# Override defaults for jenkins context

[base]
deps =
    -r{toxinidir}/requirements.txt

[testdeps]
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/tests/requirements.txt

[custom]
expected_pylint_score=9.0
expected_coverage_score=30

[testenv]
install_command = pip install {opts} {packages}
envdir = {toxworkdir}/share
recreate = False

# nose unit test environment
#  Intended for use interactively by developers who prefer nose reporting
#  See configuration values in setup.cfg for specifics
[testenv:nose]
deps = {[testdeps]deps}
commands =
# See options in setup.cfg file
    nosetests {posargs}

# py.test unit test environment
#  Can be used interactively.
#  Is used by Jenkins to run unit tests with coverage reporting.
#  For Jenkins, both coverage and pass/fail results are output as .xml
#  See setup.cfg for configuration options.
[testenv:pytest]
deps = {[testdeps]deps}
commands =
    pytest tests/unit {posargs}

# The /bin/cp command in the below is a workaround for the namespace collision
#   between pyEZ and toby.  Once that is fixed properly, this should be removed.
[testenv:coverage]
usedevelop = True
deps = {[testdeps]deps}
commands =
#    /bin/cp lib/jnpr/__init__.py .tox/share/lib/python3.4/site-packages/jnpr/
    - coverage run --branch --source=jnpr.toby -m py.test --junitxml=junit-{envname}.xml tests
    coverage xml
#    coverage html

# Check coverage for against expected coverage score
[testenv:checkcoverage]
usedevelop = True
deps = {[testdeps]deps}
whitelist_externals =
     bash
     awk
     sed
commands =
    - bash -c 'score=$(coverage report {posargs} | awk  "FNR == 3 \{print \$6\}" | sed  s/\%//g ) && if [ $(echo "$score >= {[custom]expected_coverage_score}" | bc) -eq 1 ]; then echo "Coverage score of $score% is acceptable"; else echo "Coverage score of $score% does not meet the minimum code coverage threshold of {[custom]expected_coverage_score}%" && exit 1; fi'

# Sphinx-based API doc generation environment
#  sphinx-apidoc is used to auto-generate .rst files for all modules in lib/jnpr
#  Then sphinx-build is used to populate docs/build/html directory
#  In Jenkins usage, the post-build phase will archive and publish those docs
#  For interactive use, point browser at resulting html directory to review
[testenv:docs]
whitelist_externals =
    sphinx-apidoc
    sphinx-build
changedir = {toxinidir}/docs
skipsdist = True
setenv =
    PYTHONPATH = {toxinidir}/lib
deps = {[testdeps]deps}
commands =
    - sphinx-apidoc --ext-autodoc -o source -f {toxinidir}/lib/jnpr/toby
    - sphinx-build -C -D extensions='sphinx.ext.autodoc' -D master_doc='toby' -b html -d build/doctrees source build/html

# flake8 static analysis environment
#  flake8 is a more flexible and fully-features lint checker, relatively to pylint
#  In current config, only basic pep.008 conformance is checked.
[testenv:flake8]
changedir = {toxinidir}
deps =
    {[base]deps}
    flake8==3.0.4
    flake8-docstrings==1.0.2
    mccabe==0.5.2
commands =
    -flake8 --output-file=flake8-report.txt lib/jnpr

# Copy-paste-detection (CPD) environment
#  Clonedigger identifies copied code through static analysis
[testenv:cpd]
changedir = {toxinidir}
# Below workaround because clonedigger is not python3 compatible
basepython = /usr/bin/python2.7
deps =
    clonedigger
commands =
    clonedigger --cpd-output --output=clonedigger.xml lib/jnpr

# Set up a dev environment isolated in a virtualenv
#  This creates a suitable local devenv directory
#  To activate, `source devenv/bin/activate`
[testenv:devenv]
changedir = {toxinidir}
deps =
    {[testdeps]deps}
envdir = devenv
basepython = python3.4
usedevelop = True
# Commands deliberately blank, to override any default commands in tox env
commands =

[testenv:pylint]
changedir = {toxinidir}
usedevelop = True
skipsdist = True
envdir = {toxworkdir}/share
whitelist_externals =
    bash
# pylint lacks a way to specify output file
# tox lacks a way to redirect command output to a file
# This combination means the below hack is necessary
commands =
    - bash -c 'pylint --rcfile={toxinidir}/lib/pylintrc --output-format=parseable {posargs} > pylint.out'
    bash -c 'score=$(cat pylint.out | grep "Your code has been rated" | cut -d \  -f7 | cut -d / -f 1) && if [ $(echo "$score >= {[custom]expected_pylint_score}" | bc) -eq 1 ]; then echo "Pylint score of $score is acceptable. (for now...)"; else echo "Pylint score of $score does not meet the minimum threshold of {[custom]expected_pylint_score}."  && exit 1; fi'
